
VCP_SDcard_DMA_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800da88  0800da88  0000ea88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e160  0800e160  0001006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e160  0800e160  0000f160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e168  0800e168  0001006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e168  0800e168  0000f168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e16c  0800e16c  0000f16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800e170  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064ec  2000006c  0800e1dc  0001006c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006558  0800e1dc  00010558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020098  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b9c  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  00034cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c5  00000000  00000000  000367b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2be  00000000  00000000  00037c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002426e  00000000  00000000  00063f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101ad5  00000000  00000000  000881a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189c7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a18  00000000  00000000  00189cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  001916dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800da70 	.word	0x0800da70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800da70 	.word	0x0800da70

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	@ 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__aeabi_d2uiz>:
 80008ac:	004a      	lsls	r2, r1, #1
 80008ae:	d211      	bcs.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008b4:	d211      	bcs.n	80008da <__aeabi_d2uiz+0x2e>
 80008b6:	d50d      	bpl.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d40e      	bmi.n	80008e0 <__aeabi_d2uiz+0x34>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	fa23 f002 	lsr.w	r0, r3, r2
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d102      	bne.n	80008e6 <__aeabi_d2uiz+0x3a>
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	4770      	bx	lr
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	4770      	bx	lr

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;

//<---- --------------- Functions --------------- ---->
void Mount_SD(const TCHAR* path)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <Mount_SD+0x48>)
 8000bea:	f007 fe3b 	bl	8008864 <f_mount>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <Mount_SD+0x4c>)
 8000bf4:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Mounting => %d \n", fresult);
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <Mount_SD+0x4c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <Mount_SD+0x50>)
 8000bfe:	f00b feed 	bl	800c9dc <iprintf>

	if(fresult == FR_OK)
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <Mount_SD+0x4c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <Mount_SD+0x36>
		printf("SD_CARD mounted successfully...\n");
 8000c0a:	4809      	ldr	r0, [pc, #36]	@ (8000c30 <Mount_SD+0x54>)
 8000c0c:	f00b ff4e 	bl	800caac <puts>
	else
	{
		printf("Error! in mounting SD_CARD...\n");
		Error_Handler();
	}
}
 8000c10:	e004      	b.n	8000c1c <Mount_SD+0x40>
		printf("Error! in mounting SD_CARD...\n");
 8000c12:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <Mount_SD+0x58>)
 8000c14:	f00b ff4a 	bl	800caac <puts>
		Error_Handler();
 8000c18:	f000 fbbe 	bl	8001398 <Error_Handler>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000088 	.word	0x20000088
 8000c28:	20002108 	.word	0x20002108
 8000c2c:	0800da88 	.word	0x0800da88
 8000c30:	0800daa4 	.word	0x0800daa4
 8000c34:	0800dac4 	.word	0x0800dac4

08000c38 <Unmount_SD>:

//<---- -------------------------------------------------------- ---->
void Unmount_SD(const TCHAR* path)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	2000      	movs	r0, #0
 8000c46:	f007 fe0d 	bl	8008864 <f_mount>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <Unmount_SD+0x48>)
 8000c50:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Unmounting => %d \n", fresult);
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <Unmount_SD+0x48>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4619      	mov	r1, r3
 8000c58:	480a      	ldr	r0, [pc, #40]	@ (8000c84 <Unmount_SD+0x4c>)
 8000c5a:	f00b febf 	bl	800c9dc <iprintf>

	if(fresult == FR_OK)
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <Unmount_SD+0x48>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <Unmount_SD+0x36>
		printf("SD_CARD unmounted successfully...\n");
 8000c66:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <Unmount_SD+0x50>)
 8000c68:	f00b ff20 	bl	800caac <puts>
	else
	{
		printf("Error! in unmounting SD_CARD...\n");
		Error_Handler();
	}
}
 8000c6c:	e004      	b.n	8000c78 <Unmount_SD+0x40>
		printf("Error! in unmounting SD_CARD...\n");
 8000c6e:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <Unmount_SD+0x54>)
 8000c70:	f00b ff1c 	bl	800caac <puts>
		Error_Handler();
 8000c74:	f000 fb90 	bl	8001398 <Error_Handler>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20002108 	.word	0x20002108
 8000c84:	0800dae4 	.word	0x0800dae4
 8000c88:	0800db04 	.word	0x0800db04
 8000c8c:	0800db28 	.word	0x0800db28

08000c90 <Format_SD>:
//<---- -------------------------------------------------------- ---->

FRESULT Format_SD(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20 * sizeof(char));
 8000c96:	2014      	movs	r0, #20
 8000c98:	f00b fd20 	bl	800c6dc <malloc>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
    sprintf(path, "%s", "/");
 8000ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d50 <Format_SD+0xc0>)
 8000ca2:	492c      	ldr	r1, [pc, #176]	@ (8000d54 <Format_SD+0xc4>)
 8000ca4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000ca6:	f00b ff09 	bl	800cabc <siprintf>

    fresult = f_opendir(&dir, path);							// Open the directory
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f008 fa86 	bl	80091c0 <f_opendir>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <Format_SD+0xc8>)
 8000cba:	701a      	strb	r2, [r3, #0]
    printf("Fresult in Opening Directory => %d \n", fresult);
 8000cbc:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <Format_SD+0xc8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <Format_SD+0xcc>)
 8000cc4:	f00b fe8a 	bl	800c9dc <iprintf>

    if(fresult == FR_OK)
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <Format_SD+0xc8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d136      	bne.n	8000d3e <Format_SD+0xae>
    {
        for(;;)
        {
            fresult = f_readdir(&dir, &fno);                   	// Read a directory item
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4923      	ldr	r1, [pc, #140]	@ (8000d60 <Format_SD+0xd0>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f008 fb17 	bl	8009308 <f_readdir>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <Format_SD+0xc8>)
 8000ce0:	701a      	strb	r2, [r3, #0]
            if(fresult != FR_OK || fno.fname[0] == 0)
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <Format_SD+0xc8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d125      	bne.n	8000d36 <Format_SD+0xa6>
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <Format_SD+0xd0>)
 8000cec:	7a5b      	ldrb	r3, [r3, #9]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d021      	beq.n	8000d36 <Format_SD+0xa6>
            	break;  										// Break on error or end of dir

            if(fno.fattrib & AM_DIR)     						// It is a directory
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <Format_SD+0xd0>)
 8000cf4:	7a1b      	ldrb	r3, [r3, #8]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d011      	beq.n	8000d22 <Format_SD+0x92>
            {
            	if(!(strcmp("SYSTEM~1", fno.fname)))
 8000cfe:	4919      	ldr	r1, [pc, #100]	@ (8000d64 <Format_SD+0xd4>)
 8000d00:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <Format_SD+0xd8>)
 8000d02:	f7ff fa85 	bl	8000210 <strcmp>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d012      	beq.n	8000d32 <Format_SD+0xa2>
            		continue;

            	fresult = f_unlink(fno.fname);
 8000d0c:	4815      	ldr	r0, [pc, #84]	@ (8000d64 <Format_SD+0xd4>)
 8000d0e:	f008 fc3a 	bl	8009586 <f_unlink>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <Format_SD+0xc8>)
 8000d18:	701a      	strb	r2, [r3, #0]
            	if(fresult == FR_DENIED)
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <Format_SD+0xc8>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b07      	cmp	r3, #7
 8000d20:	e7d6      	b.n	8000cd0 <Format_SD+0x40>
            		continue;
            }
            else
            {
               fresult = f_unlink(fno.fname);					// It is a file.
 8000d22:	4810      	ldr	r0, [pc, #64]	@ (8000d64 <Format_SD+0xd4>)
 8000d24:	f008 fc2f 	bl	8009586 <f_unlink>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <Format_SD+0xc8>)
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e7ce      	b.n	8000cd0 <Format_SD+0x40>
            		continue;
 8000d32:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   	// Read a directory item
 8000d34:	e7cc      	b.n	8000cd0 <Format_SD+0x40>
            }
        }
        f_closedir(&dir);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f008 faba 	bl	80092b2 <f_closedir>
    }
    free(path);
 8000d3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000d40:	f00b fcd4 	bl	800c6ec <free>
    return fresult;
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <Format_SD+0xc8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3738      	adds	r7, #56	@ 0x38
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	0800db48 	.word	0x0800db48
 8000d54:	0800db4c 	.word	0x0800db4c
 8000d58:	20002108 	.word	0x20002108
 8000d5c:	0800db50 	.word	0x0800db50
 8000d60:	200020f0 	.word	0x200020f0
 8000d64:	200020f9 	.word	0x200020f9
 8000d68:	0800db78 	.word	0x0800db78

08000d6c <Create_File>:
//<---- -------------------------------------------------------- ---->

FRESULT Create_File(char *name)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8000d74:	4928      	ldr	r1, [pc, #160]	@ (8000e18 <Create_File+0xac>)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f008 fb09 	bl	800938e <f_stat>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <Create_File+0xb0>)
 8000d82:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8000d84:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <Create_File+0xb0>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4825      	ldr	r0, [pc, #148]	@ (8000e20 <Create_File+0xb4>)
 8000d8c:	f00b fe26 	bl	800c9dc <iprintf>

	if(fresult == FR_OK)
 8000d90:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <Create_File+0xb0>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <Create_File+0x3a>
	{
		printf("Error! *%s* already exists!\n use Update_File Function \n", name);
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4822      	ldr	r0, [pc, #136]	@ (8000e24 <Create_File+0xb8>)
 8000d9c:	f00b fe1e 	bl	800c9dc <iprintf>
	    return fresult;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <Create_File+0xb0>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	e034      	b.n	8000e10 <Create_File+0xa4>
	}
	else
	{
		fresult = f_open(&fil, name, (FA_CREATE_ALWAYS | FA_READ | FA_WRITE));
 8000da6:	220b      	movs	r2, #11
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	481f      	ldr	r0, [pc, #124]	@ (8000e28 <Create_File+0xbc>)
 8000dac:	f007 fdbe 	bl	800892c <f_open>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <Create_File+0xb0>)
 8000db6:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <Create_File+0xb0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10f      	bne.n	8000de0 <Create_File+0x74>
			printf("*%s* created successfully\n Now use Write_File to write data\n", name);
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	481a      	ldr	r0, [pc, #104]	@ (8000e2c <Create_File+0xc0>)
 8000dc4:	f00b fe0a 	bl	800c9dc <iprintf>
		{
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
		    return fresult;
		}

		fresult = f_close(&fil);
 8000dc8:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <Create_File+0xbc>)
 8000dca:	f008 f9ca 	bl	8009162 <f_close>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <Create_File+0xb0>)
 8000dd4:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <Create_File+0xb0>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10f      	bne.n	8000dfe <Create_File+0x92>
 8000dde:	e009      	b.n	8000df4 <Create_File+0x88>
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <Create_File+0xb0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <Create_File+0xc4>)
 8000dea:	f00b fdf7 	bl	800c9dc <iprintf>
		    return fresult;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <Create_File+0xb0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	e00d      	b.n	8000e10 <Create_File+0xa4>
			printf("File *%s* Closed Successfully\n", name);
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	480f      	ldr	r0, [pc, #60]	@ (8000e34 <Create_File+0xc8>)
 8000df8:	f00b fdf0 	bl	800c9dc <iprintf>
 8000dfc:	e006      	b.n	8000e0c <Create_File+0xa0>
		else
			printf("Error! No. %d in closing file *%s* \n", fresult, name);
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <Create_File+0xb0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4619      	mov	r1, r3
 8000e06:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <Create_File+0xcc>)
 8000e08:	f00b fde8 	bl	800c9dc <iprintf>
	}
    return fresult;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <Create_File+0xb0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200020f0 	.word	0x200020f0
 8000e1c:	20002108 	.word	0x20002108
 8000e20:	0800db84 	.word	0x0800db84
 8000e24:	0800dba4 	.word	0x0800dba4
 8000e28:	200010c0 	.word	0x200010c0
 8000e2c:	0800dbdc 	.word	0x0800dbdc
 8000e30:	0800dc1c 	.word	0x0800dc1c
 8000e34:	0800dc44 	.word	0x0800dc44
 8000e38:	0800dc64 	.word	0x0800dc64

08000e3c <Update_File>:
//<---- -------------------------------------------------------- ---->

FRESULT Update_File(char *name, char *data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	fresult = f_stat(name, &fno);
 8000e46:	493b      	ldr	r1, [pc, #236]	@ (8000f34 <Update_File+0xf8>)
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f008 faa0 	bl	800938e <f_stat>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b39      	ldr	r3, [pc, #228]	@ (8000f38 <Update_File+0xfc>)
 8000e54:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <Update_File+0xfc>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4837      	ldr	r0, [pc, #220]	@ (8000f3c <Update_File+0x100>)
 8000e5e:	f00b fdbd 	bl	800c9dc <iprintf>

	if(fresult == FR_OK)
 8000e62:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <Update_File+0xfc>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d157      	bne.n	8000f1a <Update_File+0xde>
	{
		fresult = f_open(&fil, name, (FA_OPEN_APPEND | FA_WRITE));
 8000e6a:	2232      	movs	r2, #50	@ 0x32
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4834      	ldr	r0, [pc, #208]	@ (8000f40 <Update_File+0x104>)
 8000e70:	f007 fd5c 	bl	800892c <f_open>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <Update_File+0xfc>)
 8000e7a:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK)
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f38 <Update_File+0xfc>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <Update_File+0x5c>
		{
			printf("Error! No. %d in opening file *%s*\n\n", fresult, name);
 8000e84:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <Update_File+0xfc>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482d      	ldr	r0, [pc, #180]	@ (8000f44 <Update_File+0x108>)
 8000e8e:	f00b fda5 	bl	800c9dc <iprintf>
			return fresult;
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <Update_File+0xfc>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	e049      	b.n	8000f2c <Update_File+0xf0>
		}

		fresult = f_write(&fil, data, strlen (data), &bw);					// Writing text
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff f9c3 	bl	8000224 <strlen>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <Update_File+0x10c>)
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	4826      	ldr	r0, [pc, #152]	@ (8000f40 <Update_File+0x104>)
 8000ea6:	f007 ff10 	bl	8008cca <f_write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <Update_File+0xfc>)
 8000eb0:	701a      	strb	r2, [r3, #0]
		printf("Fresult in Write File => %d \n", fresult);
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <Update_File+0xfc>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4824      	ldr	r0, [pc, #144]	@ (8000f4c <Update_File+0x110>)
 8000eba:	f00b fd8f 	bl	800c9dc <iprintf>

		if(fresult == FR_OK)
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <Update_File+0xfc>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d104      	bne.n	8000ed0 <Update_File+0x94>
			printf("*%s* UPDATED successfully\n", name);
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4821      	ldr	r0, [pc, #132]	@ (8000f50 <Update_File+0x114>)
 8000eca:	f00b fd87 	bl	800c9dc <iprintf>
 8000ece:	e006      	b.n	8000ede <Update_File+0xa2>
		else
			printf("Error! No. %d in writing file *%s*\n\n", fresult, name);
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <Update_File+0xfc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481e      	ldr	r0, [pc, #120]	@ (8000f54 <Update_File+0x118>)
 8000eda:	f00b fd7f 	bl	800c9dc <iprintf>

		fresult = f_close(&fil);											// Close file
 8000ede:	4818      	ldr	r0, [pc, #96]	@ (8000f40 <Update_File+0x104>)
 8000ee0:	f008 f93f 	bl	8009162 <f_close>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <Update_File+0xfc>)
 8000eea:	701a      	strb	r2, [r3, #0]
		printf("Fresult in Closing File => %d \n", fresult);
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <Update_File+0xfc>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4819      	ldr	r0, [pc, #100]	@ (8000f58 <Update_File+0x11c>)
 8000ef4:	f00b fd72 	bl	800c9dc <iprintf>

		if(fresult == FR_OK)
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <Update_File+0xfc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <Update_File+0xce>
			printf("File *%s* CLOSED successfully\n", name);
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4816      	ldr	r0, [pc, #88]	@ (8000f5c <Update_File+0x120>)
 8000f04:	f00b fd6a 	bl	800c9dc <iprintf>
 8000f08:	e00e      	b.n	8000f28 <Update_File+0xec>
		else
			printf("Error! No. %d in closing file *%s*\n\n", fresult, name);
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <Update_File+0xfc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4813      	ldr	r0, [pc, #76]	@ (8000f60 <Update_File+0x124>)
 8000f14:	f00b fd62 	bl	800c9dc <iprintf>
 8000f18:	e006      	b.n	8000f28 <Update_File+0xec>
	}
	else
	{
		printf("Error! *%s* does not exists\n\n", name);
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <Update_File+0x128>)
 8000f1e:	f00b fd5d 	bl	800c9dc <iprintf>
	    return fresult;
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <Update_File+0xfc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	e001      	b.n	8000f2c <Update_File+0xf0>
	}
    return fresult;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <Update_File+0xfc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200020f0 	.word	0x200020f0
 8000f38:	20002108 	.word	0x20002108
 8000f3c:	0800db84 	.word	0x0800db84
 8000f40:	200010c0 	.word	0x200010c0
 8000f44:	0800dc8c 	.word	0x0800dc8c
 8000f48:	2000210c 	.word	0x2000210c
 8000f4c:	0800dcb4 	.word	0x0800dcb4
 8000f50:	0800dcd4 	.word	0x0800dcd4
 8000f54:	0800dcf0 	.word	0x0800dcf0
 8000f58:	0800dd18 	.word	0x0800dd18
 8000f5c:	0800dd38 	.word	0x0800dd38
 8000f60:	0800dd58 	.word	0x0800dd58
 8000f64:	0800dd80 	.word	0x0800dd80

08000f68 <Check_SD_Space>:
    return fresult;
}
//<---- -------------------------------------------------------- ---->

void Check_SD_Space (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint32_t total, free_space;

    f_getfree("", &fre_clust, &pfs);						// Check free space
 8000f6e:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f70:	4921      	ldr	r1, [pc, #132]	@ (8000ff8 <Check_SD_Space+0x90>)
 8000f72:	4822      	ldr	r0, [pc, #136]	@ (8000ffc <Check_SD_Space+0x94>)
 8000f74:	f008 fa4b 	bl	800940e <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	3b02      	subs	r3, #2
 8000f80:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	8952      	ldrh	r2, [r2, #10]
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fc14 	bl	80007b8 <__aeabi_ui2d>
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <Check_SD_Space+0x98>)
 8000f96:	f7ff f9a3 	bl	80002e0 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fc83 	bl	80008ac <__aeabi_d2uiz>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	607b      	str	r3, [r7, #4]
    printf("SD_CARD Total Size: \t%lu\n", total);
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4815      	ldr	r0, [pc, #84]	@ (8001004 <Check_SD_Space+0x9c>)
 8000fae:	f00b fd15 	bl	800c9dc <iprintf>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	895b      	ldrh	r3, [r3, #10]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <Check_SD_Space+0x90>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fbf8 	bl	80007b8 <__aeabi_ui2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Check_SD_Space+0x98>)
 8000fce:	f7ff f987 	bl	80002e0 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fc67 	bl	80008ac <__aeabi_d2uiz>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	603b      	str	r3, [r7, #0]
    printf("SD_CARD Free Space: \t%lu\n", free_space);
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <Check_SD_Space+0xa0>)
 8000fe6:	f00b fcf9 	bl	800c9dc <iprintf>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20002110 	.word	0x20002110
 8000ff8:	20002114 	.word	0x20002114
 8000ffc:	0800dfa0 	.word	0x0800dfa0
 8001000:	3fe00000 	.word	0x3fe00000
 8001004:	0800dfa4 	.word	0x0800dfa4
 8001008:	0800dfc0 	.word	0x0800dfc0

0800100c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <vApplicationGetIdleTaskMemory+0x2c>)
 800101c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4a06      	ldr	r2, [pc, #24]	@ (800103c <vApplicationGetIdleTaskMemory+0x30>)
 8001022:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2280      	movs	r2, #128	@ 0x80
 8001028:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20002118 	.word	0x20002118
 800103c:	200021b8 	.word	0x200021b8

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fd02 	bl	8001a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f823 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 f8fd 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8001052:	f000 f8d5 	bl	8001200 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001056:	f000 f883 	bl	8001160 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800105a:	f005 fa75 	bl	8006548 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800105e:	f000 f89f 	bl	80011a0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <main+0x4c>)
 8001064:	1d3c      	adds	r4, r7, #4
 8001066:	461d      	mov	r5, r3
 8001068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f008 fc2b 	bl	80098d4 <osThreadCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a03      	ldr	r2, [pc, #12]	@ (8001090 <main+0x50>)
 8001082:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001084:	f008 fc03 	bl	800988e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <main+0x48>
 800108c:	0800dfe8 	.word	0x0800dfe8
 8001090:	200025e8 	.word	0x200025e8

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	@ 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	@ 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00b fe02 	bl	800ccac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <SystemClock_Config+0xc4>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <SystemClock_Config+0xc4>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <SystemClock_Config+0xc4>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <SystemClock_Config+0xc8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a21      	ldr	r2, [pc, #132]	@ (800115c <SystemClock_Config+0xc8>)
 80010d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <SystemClock_Config+0xc8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f2:	2302      	movs	r3, #2
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80010fc:	230f      	movs	r3, #15
 80010fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001100:	23d8      	movs	r3, #216	@ 0xd8
 8001102:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001104:	2302      	movs	r3, #2
 8001106:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001108:	230f      	movs	r3, #15
 800110a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fb39 	bl	8002788 <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800111c:	f000 f93c 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001120:	230f      	movs	r3, #15
 8001122:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001124:	2302      	movs	r3, #2
 8001126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800112c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2105      	movs	r1, #5
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fdc6 	bl	8002cd0 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800114a:	f000 f925 	bl	8001398 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	@ 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_SDMMC1_SD_Init+0x38>)
 8001166:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <MX_SDMMC1_SD_Init+0x3c>)
 8001168:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_SDMMC1_SD_Init+0x38>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_SDMMC1_SD_Init+0x38>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <MX_SDMMC1_SD_Init+0x38>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <MX_SDMMC1_SD_Init+0x38>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <MX_SDMMC1_SD_Init+0x38>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <MX_SDMMC1_SD_Init+0x38>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	2000241c 	.word	0x2000241c
 800119c:	40012c00 	.word	0x40012c00

080011a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011a6:	4a15      	ldr	r2, [pc, #84]	@ (80011fc <MX_USART1_UART_Init+0x5c>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_USART1_UART_Init+0x58>)
 80011e4:	f003 ff78 	bl	80050d8 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f8d3 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20002560 	.word	0x20002560
 80011fc:	40011000 	.word	0x40011000

08001200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <MX_DMA_Init+0x48>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <MX_DMA_Init+0x48>)
 800120c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <MX_DMA_Init+0x48>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2105      	movs	r1, #5
 8001222:	203b      	movs	r0, #59	@ 0x3b
 8001224:	f000 fd1c 	bl	8001c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001228:	203b      	movs	r0, #59	@ 0x3b
 800122a:	f000 fd35 	bl	8001c98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	2045      	movs	r0, #69	@ 0x45
 8001234:	f000 fd14 	bl	8001c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001238:	2045      	movs	r0, #69	@ 0x45
 800123a:	f000 fd2d 	bl	8001c98 <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <MX_GPIO_Init+0xb0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a25      	ldr	r2, [pc, #148]	@ (80012fc <MX_GPIO_Init+0xb0>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <MX_GPIO_Init+0xb0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <MX_GPIO_Init+0xb0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a1f      	ldr	r2, [pc, #124]	@ (80012fc <MX_GPIO_Init+0xb0>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_GPIO_Init+0xb0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_GPIO_Init+0xb0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <MX_GPIO_Init+0xb0>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_GPIO_Init+0xb0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_GPIO_Init+0xb0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <MX_GPIO_Init+0xb0>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_GPIO_Init+0xb0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_GPIO_Init+0xb0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <MX_GPIO_Init+0xb0>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <MX_GPIO_Init+0xb0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SDMMC1_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC1_Detect_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_Detect_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_GPIO_Init+0xb4>)
 80012f0:	f001 f886 	bl	8002400 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800

08001304 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800130c:	1d39      	adds	r1, r7, #4
 800130e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001312:	2201      	movs	r2, #1
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <__io_putchar+0x20>)
 8001316:	f003 ff2d 	bl	8005174 <HAL_UART_Transmit>

  return ch;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20002560 	.word	0x20002560

08001328 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  Mount_SD(SDPath);
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <StartDefaultTask+0x3c>)
 8001332:	f7ff fc53 	bl	8000bdc <Mount_SD>
  Format_SD();
 8001336:	f7ff fcab 	bl	8000c90 <Format_SD>
  Check_SD_Space();
 800133a:	f7ff fe15 	bl	8000f68 <Check_SD_Space>
  Create_File("MRL.txt");
 800133e:	480a      	ldr	r0, [pc, #40]	@ (8001368 <StartDefaultTask+0x40>)
 8001340:	f7ff fd14 	bl	8000d6c <Create_File>
  sprintf(sd_buffer, "Hello MRL-HSL \n");
 8001344:	4909      	ldr	r1, [pc, #36]	@ (800136c <StartDefaultTask+0x44>)
 8001346:	480a      	ldr	r0, [pc, #40]	@ (8001370 <StartDefaultTask+0x48>)
 8001348:	f00b fbb8 	bl	800cabc <siprintf>
  Update_File("MRL.txt", sd_buffer);
 800134c:	4908      	ldr	r1, [pc, #32]	@ (8001370 <StartDefaultTask+0x48>)
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <StartDefaultTask+0x40>)
 8001350:	f7ff fd74 	bl	8000e3c <Update_File>
  Unmount_SD(SDPath);
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <StartDefaultTask+0x3c>)
 8001356:	f7ff fc6f 	bl	8000c38 <Unmount_SD>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f008 fb06 	bl	800996c <osDelay>
 8001360:	e7fb      	b.n	800135a <StartDefaultTask+0x32>
 8001362:	bf00      	nop
 8001364:	20002644 	.word	0x20002644
 8001368:	0800e004 	.word	0x0800e004
 800136c:	0800e00c 	.word	0x0800e00c
 8001370:	200023b8 	.word	0x200023b8

08001374 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001386:	f000 fb6f 	bl	8001a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40001000 	.word	0x40001000

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <Error_Handler+0x8>

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	210f      	movs	r1, #15
 80013de:	f06f 0001 	mvn.w	r0, #1
 80013e2:	f000 fc3d 	bl	8001c60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ac      	sub	sp, #176	@ 0xb0
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	2284      	movs	r2, #132	@ 0x84
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f00b fc49 	bl	800ccac <memset>
  if(hsd->Instance==SDMMC1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a74      	ldr	r2, [pc, #464]	@ (80015f0 <HAL_SD_MspInit+0x1fc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	f040 80e0 	bne.w	80015e6 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001426:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 800142a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fe5f 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001448:	f7ff ffa6 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800144c:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001450:	4a68      	ldr	r2, [pc, #416]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 8001452:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001456:	6453      	str	r3, [r2, #68]	@ 0x44
 8001458:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 800145a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001464:	4b63      	ldr	r3, [pc, #396]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	4a62      	ldr	r2, [pc, #392]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001470:	4b60      	ldr	r3, [pc, #384]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147c:	4b5d      	ldr	r3, [pc, #372]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	4a5c      	ldr	r2, [pc, #368]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6313      	str	r3, [r2, #48]	@ 0x30
 8001488:	4b5a      	ldr	r3, [pc, #360]	@ (80015f4 <HAL_SD_MspInit+0x200>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001494:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014ae:	230c      	movs	r3, #12
 80014b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014b8:	4619      	mov	r1, r3
 80014ba:	484f      	ldr	r0, [pc, #316]	@ (80015f8 <HAL_SD_MspInit+0x204>)
 80014bc:	f000 ffa0 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014c0:	2304      	movs	r3, #4
 80014c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014d8:	230c      	movs	r3, #12
 80014da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014e2:	4619      	mov	r1, r3
 80014e4:	4845      	ldr	r0, [pc, #276]	@ (80015fc <HAL_SD_MspInit+0x208>)
 80014e6:	f000 ff8b 	bl	8002400 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80014ea:	4b45      	ldr	r3, [pc, #276]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 80014ec:	4a45      	ldr	r2, [pc, #276]	@ (8001604 <HAL_SD_MspInit+0x210>)
 80014ee:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80014f0:	4b43      	ldr	r3, [pc, #268]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 80014f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014f6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f8:	4b41      	ldr	r3, [pc, #260]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fe:	4b40      	ldr	r3, [pc, #256]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001504:	4b3e      	ldr	r3, [pc, #248]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 8001506:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800150c:	4b3c      	ldr	r3, [pc, #240]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 800150e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001512:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001514:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 8001516:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800151a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 800151e:	2220      	movs	r2, #32
 8001520:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001522:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001528:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 800152a:	2204      	movs	r2, #4
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 8001530:	2203      	movs	r2, #3
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001534:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 8001536:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 800153e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001544:	482e      	ldr	r0, [pc, #184]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 8001546:	f000 fbb5 	bl	8001cb4 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001550:	f7ff ff22 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a2a      	ldr	r2, [pc, #168]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 8001558:	641a      	str	r2, [r3, #64]	@ 0x40
 800155a:	4a29      	ldr	r2, [pc, #164]	@ (8001600 <HAL_SD_MspInit+0x20c>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001560:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <HAL_SD_MspInit+0x214>)
 8001562:	4a2a      	ldr	r2, [pc, #168]	@ (800160c <HAL_SD_MspInit+0x218>)
 8001564:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001566:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <HAL_SD_MspInit+0x214>)
 8001568:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800156c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <HAL_SD_MspInit+0x214>)
 8001570:	2240      	movs	r2, #64	@ 0x40
 8001572:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_SD_MspInit+0x214>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800157a:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <HAL_SD_MspInit+0x214>)
 800157c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001580:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_SD_MspInit+0x214>)
 8001584:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001588:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <HAL_SD_MspInit+0x214>)
 800158c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001590:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <HAL_SD_MspInit+0x214>)
 8001594:	2220      	movs	r2, #32
 8001596:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_SD_MspInit+0x214>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_SD_MspInit+0x214>)
 80015a0:	2204      	movs	r2, #4
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <HAL_SD_MspInit+0x214>)
 80015a6:	2203      	movs	r2, #3
 80015a8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <HAL_SD_MspInit+0x214>)
 80015ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_SD_MspInit+0x214>)
 80015b4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80015b8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80015ba:	4813      	ldr	r0, [pc, #76]	@ (8001608 <HAL_SD_MspInit+0x214>)
 80015bc:	f000 fb7a 	bl	8001cb4 <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80015c6:	f7ff fee7 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_SD_MspInit+0x214>)
 80015ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <HAL_SD_MspInit+0x214>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2105      	movs	r1, #5
 80015da:	2031      	movs	r0, #49	@ 0x31
 80015dc:	f000 fb40 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80015e0:	2031      	movs	r0, #49	@ 0x31
 80015e2:	f000 fb59 	bl	8001c98 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80015e6:	bf00      	nop
 80015e8:	37b0      	adds	r7, #176	@ 0xb0
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40012c00 	.word	0x40012c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	200024a0 	.word	0x200024a0
 8001604:	40026458 	.word	0x40026458
 8001608:	20002500 	.word	0x20002500
 800160c:	400264a0 	.word	0x400264a0

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0ac      	sub	sp, #176	@ 0xb0
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2284      	movs	r2, #132	@ 0x84
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f00b fb3b 	bl	800ccac <memset>
  if(huart->Instance==USART1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a32      	ldr	r2, [pc, #200]	@ (8001704 <HAL_UART_MspInit+0xf4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d15c      	bne.n	80016fa <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001640:	2340      	movs	r3, #64	@ 0x40
 8001642:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001644:	2300      	movs	r3, #0
 8001646:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	4618      	mov	r0, r3
 800164e:	f001 fd57 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001658:	f7ff fe9e 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800165c:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001660:	4a29      	ldr	r2, [pc, #164]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 8001662:	f043 0310 	orr.w	r3, r3, #16
 8001666:	6453      	str	r3, [r2, #68]	@ 0x44
 8001668:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 800166a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001678:	4a23      	ldr	r2, [pc, #140]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6313      	str	r3, [r2, #48]	@ 0x30
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_UART_MspInit+0xf8>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016bc:	2307      	movs	r3, #7
 80016be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016c6:	4619      	mov	r1, r3
 80016c8:	4810      	ldr	r0, [pc, #64]	@ (800170c <HAL_UART_MspInit+0xfc>)
 80016ca:	f000 fe99 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e8:	2307      	movs	r3, #7
 80016ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016f2:	4619      	mov	r1, r3
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <HAL_UART_MspInit+0x100>)
 80016f6:	f000 fe83 	bl	8002400 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016fa:	bf00      	nop
 80016fc:	37b0      	adds	r7, #176	@ 0xb0
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40011000 	.word	0x40011000
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400
 8001710:	40020000 	.word	0x40020000

08001714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08e      	sub	sp, #56	@ 0x38
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001724:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <HAL_InitTick+0xe0>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	4a32      	ldr	r2, [pc, #200]	@ (80017f4 <HAL_InitTick+0xe0>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001730:	4b30      	ldr	r3, [pc, #192]	@ (80017f4 <HAL_InitTick+0xe0>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800173c:	f107 0210 	add.w	r2, r7, #16
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fca8 	bl	800309c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001756:	f001 fc79 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 800175a:	6378      	str	r0, [r7, #52]	@ 0x34
 800175c:	e004      	b.n	8001768 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800175e:	f001 fc75 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8001762:	4603      	mov	r3, r0
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800176a:	4a23      	ldr	r2, [pc, #140]	@ (80017f8 <HAL_InitTick+0xe4>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9b      	lsrs	r3, r3, #18
 8001772:	3b01      	subs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001776:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <HAL_InitTick+0xe8>)
 8001778:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <HAL_InitTick+0xec>)
 800177a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_InitTick+0xe8>)
 800177e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001782:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001784:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <HAL_InitTick+0xe8>)
 8001786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001788:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <HAL_InitTick+0xe8>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_InitTick+0xe8>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_InitTick+0xe8>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800179c:	4817      	ldr	r0, [pc, #92]	@ (80017fc <HAL_InitTick+0xe8>)
 800179e:	f003 f9c7 	bl	8004b30 <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11b      	bne.n	80017e8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017b0:	4812      	ldr	r0, [pc, #72]	@ (80017fc <HAL_InitTick+0xe8>)
 80017b2:	f003 fa1f 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d111      	bne.n	80017e8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017c4:	2036      	movs	r0, #54	@ 0x36
 80017c6:	f000 fa67 	bl	8001c98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d808      	bhi.n	80017e2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	2036      	movs	r0, #54	@ 0x36
 80017d6:	f000 fa43 	bl	8001c60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <HAL_InitTick+0xf0>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e002      	b.n	80017e8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3738      	adds	r7, #56	@ 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	200025ec 	.word	0x200025ec
 8001800:	40001000 	.word	0x40001000
 8001804:	20000004 	.word	0x20000004

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <NMI_Handler+0x4>

08001810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <MemManage_Handler+0x4>

08001820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <UsageFault_Handler+0x4>

08001830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <SDMMC1_IRQHandler+0x10>)
 8001846:	f002 facb 	bl	8003de0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000241c 	.word	0x2000241c

08001854 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <TIM6_DAC_IRQHandler+0x10>)
 800185a:	f003 fa43 	bl	8004ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200025ec 	.word	0x200025ec

08001868 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <DMA2_Stream3_IRQHandler+0x10>)
 800186e:	f000 fb51 	bl	8001f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200024a0 	.word	0x200024a0

0800187c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <DMA2_Stream6_IRQHandler+0x10>)
 8001882:	f000 fb47 	bl	8001f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20002500 	.word	0x20002500

08001890 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
  }

  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e009      	b.n	80018f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd0d 	bl	8001304 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf1      	blt.n	80018dc <_write+0x12>
  }
  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192a:	605a      	str	r2, [r3, #4]
  return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f00b fa3a 	bl	800ce14 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20050000 	.word	0x20050000
 80019cc:	00004000 	.word	0x00004000
 80019d0:	20002638 	.word	0x20002638
 80019d4:	20006558 	.word	0x20006558

080019d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a00:	f7ff ffea 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f00b f9f9 	bl	800ce20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2e:	f7ff fb07 	bl	8001040 <main>
  bx  lr    
 8001a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a40:	0800e170 	.word	0x0800e170
  ldr r2, =_sbss
 8001a44:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a48:	20006558 	.word	0x20006558

08001a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC_IRQHandler>

08001a4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a52:	2003      	movs	r0, #3
 8001a54:	f000 f8f9 	bl	8001c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a58:	200f      	movs	r0, #15
 8001a5a:	f7ff fe5b 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5e:	f7ff fca1 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	@ (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	2000263c 	.word	0x2000263c

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2000263c 	.word	0x2000263c

08001aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000008 	.word	0x20000008

08001af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x40>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x40>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00
 8001b34:	05fa0000 	.word	0x05fa0000

08001b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	@ (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	@ (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	@ 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff4c 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c72:	f7ff ff61 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	6978      	ldr	r0, [r7, #20]
 8001c7e:	f7ff ffb1 	bl	8001be4 <NVIC_EncodePriority>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff80 	bl	8001b90 <__NVIC_SetPriority>
}
 8001c90:	bf00      	nop
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff54 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fee6 	bl	8001a90 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e099      	b.n	8001e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf0:	e00f      	b.n	8001d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf2:	f7ff fecd 	bl	8001a90 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d908      	bls.n	8001d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e078      	b.n	8001e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e8      	bne.n	8001cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4b38      	ldr	r3, [pc, #224]	@ (8001e0c <HAL_DMA_Init+0x158>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	4313      	orrs	r3, r2
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
 8001d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d117      	bne.n	8001dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00e      	beq.n	8001dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 faa5 	bl	8002308 <DMA_CheckFifoParam>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2240      	movs	r2, #64	@ 0x40
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e016      	b.n	8001e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fa5c 	bl	800229c <DMA_CalcBaseAndBitshift>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	223f      	movs	r2, #63	@ 0x3f
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	f010803f 	.word	0xf010803f

08001e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA_Start_IT+0x26>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e048      	b.n	8001ec8 <HAL_DMA_Start_IT+0xb8>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d137      	bne.n	8001eba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f9ee 	bl	8002240 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	223f      	movs	r2, #63	@ 0x3f
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0216 	orr.w	r2, r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e8e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0208 	orr.w	r2, r2, #8
 8001ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e005      	b.n	8001ec6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d004      	beq.n	8001eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00c      	b.n	8001f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f20:	4b8e      	ldr	r3, [pc, #568]	@ (800215c <HAL_DMA_IRQHandler+0x248>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a8e      	ldr	r2, [pc, #568]	@ (8002160 <HAL_DMA_IRQHandler+0x24c>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0a9b      	lsrs	r3, r3, #10
 8001f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3e:	2208      	movs	r2, #8
 8001f40:	409a      	lsls	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01a      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	2201      	movs	r2, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	2204      	movs	r2, #4
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2204      	movs	r2, #4
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d043      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03c      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200e:	2210      	movs	r2, #16
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d018      	beq.n	8002056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d024      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
 8002042:	e01f      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e016      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0208 	bic.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2220      	movs	r2, #32
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 808f 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8087 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	2220      	movs	r2, #32
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d136      	bne.n	800212c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0216 	bic.w	r2, r2, #22
 80020cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_DMA_IRQHandler+0x1da>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	223f      	movs	r2, #63	@ 0x3f
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211e:	2b00      	cmp	r3, #0
 8002120:	d07e      	beq.n	8002220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
        }
        return;
 800212a:	e079      	b.n	8002220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	2b00      	cmp	r3, #0
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e02c      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000
 8002160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d023      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e01e      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0210 	bic.w	r2, r2, #16
 8002192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d032      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d022      	beq.n	800220e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2205      	movs	r2, #5
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d307      	bcc.n	80021fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f2      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x2cc>
 80021fa:	e000      	b.n	80021fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
 800221e:	e000      	b.n	8002222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002220:	bf00      	nop
    }
  }
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800225c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b40      	cmp	r3, #64	@ 0x40
 800226c:	d108      	bne.n	8002280 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800227e:	e007      	b.n	8002290 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3b10      	subs	r3, #16
 80022ac:	4a13      	ldr	r2, [pc, #76]	@ (80022fc <DMA_CalcBaseAndBitshift+0x60>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <DMA_CalcBaseAndBitshift+0x64>)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d908      	bls.n	80022dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <DMA_CalcBaseAndBitshift+0x68>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	1d1a      	adds	r2, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80022da:	e006      	b.n	80022ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <DMA_CalcBaseAndBitshift+0x68>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	aaaaaaab 	.word	0xaaaaaaab
 8002300:	0800e090 	.word	0x0800e090
 8002304:	fffffc00 	.word	0xfffffc00

08002308 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11f      	bne.n	8002362 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d856      	bhi.n	80023d6 <DMA_CheckFifoParam+0xce>
 8002328:	a201      	add	r2, pc, #4	@ (adr r2, 8002330 <DMA_CheckFifoParam+0x28>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002341 	.word	0x08002341
 8002334:	08002353 	.word	0x08002353
 8002338:	08002341 	.word	0x08002341
 800233c:	080023d7 	.word	0x080023d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d046      	beq.n	80023da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002350:	e043      	b.n	80023da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800235a:	d140      	bne.n	80023de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002360:	e03d      	b.n	80023de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800236a:	d121      	bne.n	80023b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d837      	bhi.n	80023e2 <DMA_CheckFifoParam+0xda>
 8002372:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <DMA_CheckFifoParam+0x70>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	08002389 	.word	0x08002389
 800237c:	0800238f 	.word	0x0800238f
 8002380:	08002389 	.word	0x08002389
 8002384:	080023a1 	.word	0x080023a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      break;
 800238c:	e030      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002392:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d025      	beq.n	80023e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800239e:	e022      	b.n	80023e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023a8:	d11f      	bne.n	80023ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ae:	e01c      	b.n	80023ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d903      	bls.n	80023be <DMA_CheckFifoParam+0xb6>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d003      	beq.n	80023c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023bc:	e018      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
      break;
 80023c2:	e015      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00e      	beq.n	80023ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e00b      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      break;
 80023d6:	bf00      	nop
 80023d8:	e00a      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
 80023dc:	e008      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e006      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
 80023e4:	e004      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
 80023e8:	e002      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ee:	bf00      	nop
    }
  } 
  
  return status; 
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	@ 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e175      	b.n	800270c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8164 	bne.w	8002706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x56>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80be 	beq.w	8002706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	4b66      	ldr	r3, [pc, #408]	@ (8002724 <HAL_GPIO_Init+0x324>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	4a65      	ldr	r2, [pc, #404]	@ (8002724 <HAL_GPIO_Init+0x324>)
 8002590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002594:	6453      	str	r3, [r2, #68]	@ 0x44
 8002596:	4b63      	ldr	r3, [pc, #396]	@ (8002724 <HAL_GPIO_Init+0x324>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025a2:	4a61      	ldr	r2, [pc, #388]	@ (8002728 <HAL_GPIO_Init+0x328>)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a58      	ldr	r2, [pc, #352]	@ (800272c <HAL_GPIO_Init+0x32c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d037      	beq.n	800263e <HAL_GPIO_Init+0x23e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a57      	ldr	r2, [pc, #348]	@ (8002730 <HAL_GPIO_Init+0x330>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d031      	beq.n	800263a <HAL_GPIO_Init+0x23a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a56      	ldr	r2, [pc, #344]	@ (8002734 <HAL_GPIO_Init+0x334>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02b      	beq.n	8002636 <HAL_GPIO_Init+0x236>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a55      	ldr	r2, [pc, #340]	@ (8002738 <HAL_GPIO_Init+0x338>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d025      	beq.n	8002632 <HAL_GPIO_Init+0x232>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a54      	ldr	r2, [pc, #336]	@ (800273c <HAL_GPIO_Init+0x33c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01f      	beq.n	800262e <HAL_GPIO_Init+0x22e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a53      	ldr	r2, [pc, #332]	@ (8002740 <HAL_GPIO_Init+0x340>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d019      	beq.n	800262a <HAL_GPIO_Init+0x22a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a52      	ldr	r2, [pc, #328]	@ (8002744 <HAL_GPIO_Init+0x344>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0x226>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a51      	ldr	r2, [pc, #324]	@ (8002748 <HAL_GPIO_Init+0x348>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00d      	beq.n	8002622 <HAL_GPIO_Init+0x222>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a50      	ldr	r2, [pc, #320]	@ (800274c <HAL_GPIO_Init+0x34c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0x21e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4f      	ldr	r2, [pc, #316]	@ (8002750 <HAL_GPIO_Init+0x350>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_GPIO_Init+0x21a>
 8002616:	2309      	movs	r3, #9
 8002618:	e012      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800261a:	230a      	movs	r3, #10
 800261c:	e010      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800261e:	2308      	movs	r3, #8
 8002620:	e00e      	b.n	8002640 <HAL_GPIO_Init+0x240>
 8002622:	2307      	movs	r3, #7
 8002624:	e00c      	b.n	8002640 <HAL_GPIO_Init+0x240>
 8002626:	2306      	movs	r3, #6
 8002628:	e00a      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800262a:	2305      	movs	r3, #5
 800262c:	e008      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800262e:	2304      	movs	r3, #4
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x240>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x240>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800263e:	2300      	movs	r3, #0
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002650:	4935      	ldr	r1, [pc, #212]	@ (8002728 <HAL_GPIO_Init+0x328>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_GPIO_Init+0x354>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a34      	ldr	r2, [pc, #208]	@ (8002754 <HAL_GPIO_Init+0x354>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b32      	ldr	r3, [pc, #200]	@ (8002754 <HAL_GPIO_Init+0x354>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a29      	ldr	r2, [pc, #164]	@ (8002754 <HAL_GPIO_Init+0x354>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b2:	4b28      	ldr	r3, [pc, #160]	@ (8002754 <HAL_GPIO_Init+0x354>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <HAL_GPIO_Init+0x354>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_GPIO_Init+0x354>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <HAL_GPIO_Init+0x354>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	f67f ae86 	bls.w	8002420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	@ 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40013800 	.word	0x40013800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400
 8002734:	40020800 	.word	0x40020800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40021000 	.word	0x40021000
 8002740:	40021400 	.word	0x40021400
 8002744:	40021800 	.word	0x40021800
 8002748:	40021c00 	.word	0x40021c00
 800274c:	40022000 	.word	0x40022000
 8002750:	40022400 	.word	0x40022400
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e001      	b.n	800277a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e291      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8087 	beq.w	80028ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ac:	4b96      	ldr	r3, [pc, #600]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d00c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b8:	4b93      	ldr	r3, [pc, #588]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d112      	bne.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027c4:	4b90      	ldr	r3, [pc, #576]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d0:	d10b      	bne.n	80027ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d06c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x130>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d168      	bne.n	80028b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e26b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x7a>
 80027f4:	4b84      	ldr	r3, [pc, #528]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a83      	ldr	r2, [pc, #524]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80027fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	e02e      	b.n	8002860 <HAL_RCC_OscConfig+0xd8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x9c>
 800280a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b7c      	ldr	r3, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7b      	ldr	r2, [pc, #492]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 800281c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e01d      	b.n	8002860 <HAL_RCC_OscConfig+0xd8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0xc0>
 800282e:	4b76      	ldr	r3, [pc, #472]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a75      	ldr	r2, [pc, #468]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b73      	ldr	r3, [pc, #460]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a72      	ldr	r2, [pc, #456]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0xd8>
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 800284e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b6c      	ldr	r3, [pc, #432]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6b      	ldr	r2, [pc, #428]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7ff f912 	bl	8001a90 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7ff f90e 	bl	8001a90 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	@ 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e21f      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b61      	ldr	r3, [pc, #388]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0xe8>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff f8fe 	bl	8001a90 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff f8fa 	bl	8001a90 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e20b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	4b57      	ldr	r3, [pc, #348]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x110>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d069      	beq.n	800299a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c6:	4b50      	ldr	r3, [pc, #320]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d11c      	bne.n	8002918 <HAL_RCC_OscConfig+0x190>
 80028de:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d116      	bne.n	8002918 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_RCC_OscConfig+0x17a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d001      	beq.n	8002902 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e1df      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002902:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	493d      	ldr	r1, [pc, #244]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	e040      	b.n	800299a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d023      	beq.n	8002968 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002920:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a38      	ldr	r2, [pc, #224]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff f8b0 	bl	8001a90 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7ff f8ac 	bl	8001a90 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1bd      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	4b30      	ldr	r3, [pc, #192]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4929      	ldr	r1, [pc, #164]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
 8002966:	e018      	b.n	800299a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002968:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a26      	ldr	r2, [pc, #152]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff f88c 	bl	8001a90 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7ff f888 	bl	8001a90 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e199      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d038      	beq.n	8002a18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d019      	beq.n	80029e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80029b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b2:	4a15      	ldr	r2, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7ff f869 	bl	8001a90 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c2:	f7ff f865 	bl	8001a90 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e176      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80029d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x23a>
 80029e0:	e01a      	b.n	8002a18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e2:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e6:	4a08      	ldr	r2, [pc, #32]	@ (8002a08 <HAL_RCC_OscConfig+0x280>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7ff f84f 	bl	8001a90 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f6:	f7ff f84b 	bl	8001a90 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d903      	bls.n	8002a0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e15c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
 8002a08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b91      	ldr	r3, [pc, #580]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ee      	bne.n	80029f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a4 	beq.w	8002b6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b8b      	ldr	r3, [pc, #556]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b88      	ldr	r3, [pc, #544]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	4a87      	ldr	r2, [pc, #540]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3e:	4b85      	ldr	r3, [pc, #532]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4e:	4b82      	ldr	r3, [pc, #520]	@ (8002c58 <HAL_RCC_OscConfig+0x4d0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c58 <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c58 <HAL_RCC_OscConfig+0x4d0>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7ff f813 	bl	8001a90 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7ff f80f 	bl	8001a90 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	@ 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e120      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a80:	4b75      	ldr	r3, [pc, #468]	@ (8002c58 <HAL_RCC_OscConfig+0x4d0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x31a>
 8002a94:	4b6f      	ldr	r3, [pc, #444]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a98:	4a6e      	ldr	r2, [pc, #440]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa0:	e02d      	b.n	8002afe <HAL_RCC_OscConfig+0x376>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x33c>
 8002aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	4a69      	ldr	r2, [pc, #420]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab6:	4b67      	ldr	r3, [pc, #412]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	4a66      	ldr	r2, [pc, #408]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac2:	e01c      	b.n	8002afe <HAL_RCC_OscConfig+0x376>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x35e>
 8002acc:	4b61      	ldr	r3, [pc, #388]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a60      	ldr	r2, [pc, #384]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002adc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0x376>
 8002ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	4a5a      	ldr	r2, [pc, #360]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af2:	4b58      	ldr	r3, [pc, #352]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	4a57      	ldr	r2, [pc, #348]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d015      	beq.n	8002b32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe ffc3 	bl	8001a90 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe ffbf 	bl	8001a90 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0ce      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	4b4b      	ldr	r3, [pc, #300]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ee      	beq.n	8002b0e <HAL_RCC_OscConfig+0x386>
 8002b30:	e014      	b.n	8002b5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7fe ffad 	bl	8001a90 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe ffa9 	bl	8001a90 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0b8      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	4b40      	ldr	r3, [pc, #256]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	4b3c      	ldr	r3, [pc, #240]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	4a3b      	ldr	r2, [pc, #236]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a4 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b78:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d06b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d149      	bne.n	8002c20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a30      	ldr	r2, [pc, #192]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe ff7a 	bl	8001a90 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe ff76 	bl	8001a90 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e087      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	4313      	orrs	r3, r2
 8002be4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002be6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002bea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe ff4a 	bl	8001a90 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe ff46 	bl	8001a90 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e057      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x478>
 8002c1e:	e04f      	b.n	8002cc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0b      	ldr	r2, [pc, #44]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe ff30 	bl	8001a90 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe ff2c 	bl	8001a90 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e03d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b03      	ldr	r3, [pc, #12]	@ (8002c54 <HAL_RCC_OscConfig+0x4cc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4ac>
 8002c52:	e035      	b.n	8002cc0 <HAL_RCC_OscConfig+0x538>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCC_OscConfig+0x544>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d028      	beq.n	8002cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d121      	bne.n	8002cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d11a      	bne.n	8002cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d111      	bne.n	8002cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0d0      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d910      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b67      	ldr	r3, [pc, #412]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 020f 	bic.w	r2, r3, #15
 8002cfe:	4965      	ldr	r1, [pc, #404]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b8      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b59      	ldr	r3, [pc, #356]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a58      	ldr	r2, [pc, #352]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d48:	4b53      	ldr	r3, [pc, #332]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b50      	ldr	r3, [pc, #320]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	494d      	ldr	r1, [pc, #308]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d040      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d115      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b41      	ldr	r3, [pc, #260]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e073      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b3d      	ldr	r3, [pc, #244]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06b      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b39      	ldr	r3, [pc, #228]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4936      	ldr	r1, [pc, #216]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fe64 	bl	8001a90 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fe60 	bl	8001a90 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e053      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b27      	ldr	r3, [pc, #156]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d210      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 020f 	bic.w	r2, r3, #15
 8002e0a:	4922      	ldr	r1, [pc, #136]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4916      	ldr	r1, [pc, #88]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	490e      	ldr	r1, [pc, #56]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e62:	f000 f821 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	490a      	ldr	r1, [pc, #40]	@ (8002e9c <HAL_RCC_ClockConfig+0x1cc>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1d4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fc46 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	0800e078 	.word	0x0800e078
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b090      	sub	sp, #64	@ 0x40
 8002eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb8:	2300      	movs	r3, #0
 8002eba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec0:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	f200 80a1 	bhi.w	8003014 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eda:	e09b      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_GetSysClockFreq+0x184>)
 8002ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee0:	e09b      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee6:	e098      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d028      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	4b4a      	ldr	r3, [pc, #296]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	2200      	movs	r2, #0
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f10:	2100      	movs	r1, #0
 8002f12:	4b47      	ldr	r3, [pc, #284]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f14:	fb03 f201 	mul.w	r2, r3, r1
 8002f18:	2300      	movs	r3, #0
 8002f1a:	fb00 f303 	mul.w	r3, r0, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a43      	ldr	r2, [pc, #268]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f22:	fba0 1202 	umull	r1, r2, r0, r2
 8002f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f28:	460a      	mov	r2, r1
 8002f2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f2e:	4413      	add	r3, r2
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f34:	2200      	movs	r2, #0
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	61fa      	str	r2, [r7, #28]
 8002f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f42:	f7fd fcd3 	bl	80008ec <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4e:	e053      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	617a      	str	r2, [r7, #20]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f62:	f04f 0b00 	mov.w	fp, #0
 8002f66:	4652      	mov	r2, sl
 8002f68:	465b      	mov	r3, fp
 8002f6a:	f04f 0000 	mov.w	r0, #0
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	0159      	lsls	r1, r3, #5
 8002f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f78:	0150      	lsls	r0, r2, #5
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f82:	eb63 090b 	sbc.w	r9, r3, fp
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f9a:	ebb2 0408 	subs.w	r4, r2, r8
 8002f9e:	eb63 0509 	sbc.w	r5, r3, r9
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	00eb      	lsls	r3, r5, #3
 8002fac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb0:	00e2      	lsls	r2, r4, #3
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	461d      	mov	r5, r3
 8002fb6:	eb14 030a 	adds.w	r3, r4, sl
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	eb45 030b 	adc.w	r3, r5, fp
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fce:	4629      	mov	r1, r5
 8002fd0:	028b      	lsls	r3, r1, #10
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd8:	4621      	mov	r1, r4
 8002fda:	028a      	lsls	r2, r1, #10
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	60fa      	str	r2, [r7, #12]
 8002fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fec:	f7fd fc7e 	bl	80008ec <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	3301      	adds	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003012:	e002      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCC_GetSysClockFreq+0x184>)
 8003016:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800301c:	4618      	mov	r0, r3
 800301e:	3740      	adds	r7, #64	@ 0x40
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	017d7840 	.word	0x017d7840

08003034 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	@ (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	0800e088 	.word	0x0800e088

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffdc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0b5b      	lsrs	r3, r3, #13
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	0800e088 	.word	0x0800e088

0800309c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	220f      	movs	r2, #15
 80030aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030ac:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <HAL_RCC_GetClockConfig+0x5c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <HAL_RCC_GetClockConfig+0x5c>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <HAL_RCC_GetClockConfig+0x5c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030d0:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <HAL_RCC_GetClockConfig+0x5c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	08db      	lsrs	r3, r3, #3
 80030d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030de:	4b07      	ldr	r3, [pc, #28]	@ (80030fc <HAL_RCC_GetClockConfig+0x60>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 020f 	and.w	r2, r3, #15
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d012      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003128:	4b69      	ldr	r3, [pc, #420]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a68      	ldr	r2, [pc, #416]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003132:	6093      	str	r3, [r2, #8]
 8003134:	4b66      	ldr	r3, [pc, #408]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313c:	4964      	ldr	r1, [pc, #400]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d017      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800315a:	4b5d      	ldr	r3, [pc, #372]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003160:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	4959      	ldr	r1, [pc, #356]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003178:	d101      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800317a:	2301      	movs	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003186:	2301      	movs	r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d017      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003196:	4b4e      	ldr	r3, [pc, #312]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800319c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	494a      	ldr	r1, [pc, #296]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031b4:	d101      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031d2:	2301      	movs	r3, #1
 80031d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 808b 	beq.w	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	4b3a      	ldr	r3, [pc, #232]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	4a39      	ldr	r2, [pc, #228]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80031f0:	4b37      	ldr	r3, [pc, #220]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031fc:	4b35      	ldr	r3, [pc, #212]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a34      	ldr	r2, [pc, #208]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fe fc42 	bl	8001a90 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003210:	f7fe fc3e 	bl	8001a90 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e357      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003222:	4b2c      	ldr	r3, [pc, #176]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800322e:	4b28      	ldr	r3, [pc, #160]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003236:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d035      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	429a      	cmp	r2, r3
 800324a:	d02e      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800324c:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003254:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	4a1d      	ldr	r2, [pc, #116]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003260:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003262:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	4a1a      	ldr	r2, [pc, #104]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800326e:	4a18      	ldr	r2, [pc, #96]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003274:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d114      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fc06 	bl	8001a90 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fe fc02 	bl	8001a90 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e319      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329e:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0ee      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032b6:	d111      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032b8:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032c4:	4b04      	ldr	r3, [pc, #16]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032c6:	400b      	ands	r3, r1
 80032c8:	4901      	ldr	r1, [pc, #4]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
 80032ce:	e00b      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40007000 	.word	0x40007000
 80032d8:	0ffffcff 	.word	0x0ffffcff
 80032dc:	4baa      	ldr	r3, [pc, #680]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4aa9      	ldr	r2, [pc, #676]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80032e6:	6093      	str	r3, [r2, #8]
 80032e8:	4ba7      	ldr	r3, [pc, #668]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f4:	49a4      	ldr	r1, [pc, #656]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d010      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003306:	4ba0      	ldr	r3, [pc, #640]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800330c:	4a9e      	ldr	r2, [pc, #632]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003312:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003316:	4b9c      	ldr	r3, [pc, #624]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003318:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	4999      	ldr	r1, [pc, #612]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003334:	4b94      	ldr	r3, [pc, #592]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003342:	4991      	ldr	r1, [pc, #580]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003356:	4b8c      	ldr	r3, [pc, #560]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003364:	4988      	ldr	r1, [pc, #544]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003378:	4b83      	ldr	r3, [pc, #524]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003386:	4980      	ldr	r1, [pc, #512]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800339a:	4b7b      	ldr	r3, [pc, #492]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a8:	4977      	ldr	r1, [pc, #476]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033bc:	4b72      	ldr	r3, [pc, #456]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	f023 0203 	bic.w	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	496f      	ldr	r1, [pc, #444]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033de:	4b6a      	ldr	r3, [pc, #424]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e4:	f023 020c 	bic.w	r2, r3, #12
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ec:	4966      	ldr	r1, [pc, #408]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003400:	4b61      	ldr	r3, [pc, #388]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340e:	495e      	ldr	r1, [pc, #376]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003422:	4b59      	ldr	r3, [pc, #356]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003428:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003430:	4955      	ldr	r1, [pc, #340]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003444:	4b50      	ldr	r3, [pc, #320]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	494d      	ldr	r1, [pc, #308]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003466:	4b48      	ldr	r3, [pc, #288]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	4944      	ldr	r1, [pc, #272]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003488:	4b3f      	ldr	r3, [pc, #252]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	493c      	ldr	r1, [pc, #240]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034aa:	4b37      	ldr	r3, [pc, #220]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b8:	4933      	ldr	r1, [pc, #204]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034da:	492b      	ldr	r1, [pc, #172]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d011      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034ee:	4b26      	ldr	r3, [pc, #152]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034fc:	4922      	ldr	r1, [pc, #136]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800350c:	d101      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352e:	4b16      	ldr	r3, [pc, #88]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003534:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353c:	4912      	ldr	r1, [pc, #72]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003550:	4b0d      	ldr	r3, [pc, #52]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003556:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003560:	4909      	ldr	r1, [pc, #36]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d006      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80d9 	beq.w	800372e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800357c:	4b02      	ldr	r3, [pc, #8]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a01      	ldr	r2, [pc, #4]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003582:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003586:	e001      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003588:	40023800 	.word	0x40023800
 800358c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358e:	f7fe fa7f 	bl	8001a90 <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003596:	f7fe fa7b 	bl	8001a90 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b64      	cmp	r3, #100	@ 0x64
 80035a2:	d901      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e194      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035a8:	4b6c      	ldr	r3, [pc, #432]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d021      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d11d      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035c8:	4b64      	ldr	r3, [pc, #400]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035d6:	4b61      	ldr	r3, [pc, #388]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035dc:	0e1b      	lsrs	r3, r3, #24
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	019a      	lsls	r2, r3, #6
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	071b      	lsls	r3, r3, #28
 80035fc:	4957      	ldr	r1, [pc, #348]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02e      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362e:	d129      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003630:	4b4a      	ldr	r3, [pc, #296]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800363e:	4b47      	ldr	r3, [pc, #284]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003644:	0f1b      	lsrs	r3, r3, #28
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	019a      	lsls	r2, r3, #6
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	041b      	lsls	r3, r3, #16
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	071b      	lsls	r3, r3, #28
 8003664:	493d      	ldr	r1, [pc, #244]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800366c:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003672:	f023 021f 	bic.w	r2, r3, #31
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	3b01      	subs	r3, #1
 800367c:	4937      	ldr	r1, [pc, #220]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01d      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003690:	4b32      	ldr	r3, [pc, #200]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003696:	0e1b      	lsrs	r3, r3, #24
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800369e:	4b2f      	ldr	r3, [pc, #188]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a4:	0f1b      	lsrs	r3, r3, #28
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	019a      	lsls	r2, r3, #6
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	431a      	orrs	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	431a      	orrs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	071b      	lsls	r3, r3, #28
 80036c4:	4925      	ldr	r1, [pc, #148]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d011      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	019a      	lsls	r2, r3, #6
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	071b      	lsls	r3, r3, #28
 80036f4:	4919      	ldr	r1, [pc, #100]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036fc:	4b17      	ldr	r3, [pc, #92]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a16      	ldr	r2, [pc, #88]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003702:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fe f9c2 	bl	8001a90 <HAL_GetTick>
 800370c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003710:	f7fe f9be 	bl	8001a90 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0d7      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003722:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b01      	cmp	r3, #1
 8003732:	f040 80cd 	bne.w	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a08      	ldr	r2, [pc, #32]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003742:	f7fe f9a5 	bl	8001a90 <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800374a:	f7fe f9a1 	bl	8001a90 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b64      	cmp	r3, #100	@ 0x64
 8003756:	d903      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0ba      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800375c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003760:	4b5e      	ldr	r3, [pc, #376]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800376c:	d0ed      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800378a:	2b00      	cmp	r3, #0
 800378c:	d02e      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d12a      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003796:	4b51      	ldr	r3, [pc, #324]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037a4:	4b4d      	ldr	r3, [pc, #308]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	0f1b      	lsrs	r3, r3, #28
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	019a      	lsls	r2, r3, #6
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	061b      	lsls	r3, r3, #24
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	071b      	lsls	r3, r3, #28
 80037ca:	4944      	ldr	r1, [pc, #272]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037d2:	4b42      	ldr	r3, [pc, #264]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e0:	3b01      	subs	r3, #1
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	493d      	ldr	r1, [pc, #244]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d022      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003800:	d11d      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003802:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	0e1b      	lsrs	r3, r3, #24
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003810:	4b32      	ldr	r3, [pc, #200]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	0f1b      	lsrs	r3, r3, #28
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	019a      	lsls	r2, r3, #6
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	071b      	lsls	r3, r3, #28
 8003836:	4929      	ldr	r1, [pc, #164]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d028      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800384a:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003850:	0e1b      	lsrs	r3, r3, #24
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003858:	4b20      	ldr	r3, [pc, #128]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	019a      	lsls	r2, r3, #6
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	431a      	orrs	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	071b      	lsls	r3, r3, #28
 800387e:	4917      	ldr	r1, [pc, #92]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003886:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800388c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	4911      	ldr	r1, [pc, #68]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800389c:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0e      	ldr	r2, [pc, #56]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fe f8f2 	bl	8001a90 <HAL_GetTick>
 80038ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038b0:	f7fe f8ee 	bl	8001a90 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e007      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ce:	d1ef      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800

080038e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e022      	b.n	8003938 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fd fd75 	bl	80013f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f814 	bl	8003940 <HAL_SD_InitCard>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00a      	b.n	8003938 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003940:	b5b0      	push	{r4, r5, r7, lr}
 8003942:	b08e      	sub	sp, #56	@ 0x38
 8003944:	af04      	add	r7, sp, #16
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800395c:	2376      	movs	r3, #118	@ 0x76
 800395e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681d      	ldr	r5, [r3, #0]
 8003964:	466c      	mov	r4, sp
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800396e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003978:	4628      	mov	r0, r5
 800397a:	f002 f8b3 	bl	8005ae4 <SDMMC_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e059      	b.n	8003a44 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800399e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f002 f8e7 	bl	8005b78 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80039ba:	2002      	movs	r0, #2
 80039bc:	f7fe f874 	bl	8001aa8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 ff59 	bl	8004878 <SD_PowerON>
 80039c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e02e      	b.n	8003a44 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fe78 	bl	80046dc <SD_InitCard>
 80039ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e01b      	b.n	8003a44 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a14:	4618      	mov	r0, r3
 8003a16:	f002 f941 	bl	8005c9c <SDMMC_CmdBlockLength>
 8003a1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00f      	beq.n	8003a42 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a09      	ldr	r2, [pc, #36]	@ (8003a4c <HAL_SD_InitCard+0x10c>)
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3728      	adds	r7, #40	@ 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	004005ff 	.word	0x004005ff

08003a50 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	@ 0x30
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0c3      	b.n	8003c00 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	f040 80bc 	bne.w	8003bfe <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	441a      	add	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d907      	bls.n	8003aaa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0aa      	b.n	8003c00 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2203      	movs	r2, #3
 8003aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8003ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	4a4e      	ldr	r2, [pc, #312]	@ (8003c08 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	4a4d      	ldr	r2, [pc, #308]	@ (8003c0c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003ad8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	2200      	movs	r2, #0
 8003ae0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3380      	adds	r3, #128	@ 0x80
 8003b10:	4619      	mov	r1, r3
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	025b      	lsls	r3, r3, #9
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	f7fe f979 	bl	8001e10 <HAL_DMA_Start_IT>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003b32:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a35      	ldr	r2, [pc, #212]	@ (8003c10 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e055      	b.n	8003c00 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0208 	orr.w	r2, r2, #8
 8003b62:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d002      	beq.n	8003b72 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	025b      	lsls	r3, r3, #9
 8003b70:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
 8003b76:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	025b      	lsls	r3, r3, #9
 8003b7c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003b7e:	2390      	movs	r3, #144	@ 0x90
 8003b80:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003b82:	2302      	movs	r3, #2
 8003b84:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f107 0210 	add.w	r2, r7, #16
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f002 f853 	bl	8005c44 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d90a      	bls.n	8003bba <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2282      	movs	r2, #130	@ 0x82
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f002 f8b7 	bl	8005d24 <SDMMC_CmdReadMultiBlock>
 8003bb6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003bb8:	e009      	b.n	8003bce <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2281      	movs	r2, #129	@ 0x81
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 f88a 	bl	8005ce0 <SDMMC_CmdReadSingleBlock>
 8003bcc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d012      	beq.n	8003bfa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c10 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003bda:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e002      	b.n	8003c00 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3730      	adds	r7, #48	@ 0x30
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	080044eb 	.word	0x080044eb
 8003c0c:	0800455d 	.word	0x0800455d
 8003c10:	004005ff 	.word	0x004005ff

08003c14 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08c      	sub	sp, #48	@ 0x30
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0c6      	b.n	8003dca <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f040 80bf 	bne.w	8003dc8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	441a      	add	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d907      	bls.n	8003c6e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c62:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0ad      	b.n	8003dca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2203      	movs	r2, #3
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 021a 	orr.w	r2, r2, #26
 8003c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	4a50      	ldr	r2, [pc, #320]	@ (8003dd4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003c94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9a:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003c9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d002      	beq.n	8003cb4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8003cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb0:	025b      	lsls	r3, r3, #9
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d90a      	bls.n	8003cd0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22a0      	movs	r2, #160	@ 0xa0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f002 f870 	bl	8005dac <SDMMC_CmdWriteMultiBlock>
 8003ccc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003cce:	e009      	b.n	8003ce4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2290      	movs	r2, #144	@ 0x90
 8003cd4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f002 f843 	bl	8005d68 <SDMMC_CmdWriteSingleBlock>
 8003ce2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d012      	beq.n	8003d10 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a3b      	ldr	r2, [pc, #236]	@ (8003ddc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003cf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e05c      	b.n	8003dca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	2240      	movs	r2, #64	@ 0x40
 8003d26:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3380      	adds	r3, #128	@ 0x80
 8003d50:	461a      	mov	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	f7fe f85a 	bl	8001e10 <HAL_DMA_Start_IT>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01a      	beq.n	8003d98 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 021a 	bic.w	r2, r2, #26
 8003d70:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a19      	ldr	r2, [pc, #100]	@ (8003ddc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003d78:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e018      	b.n	8003dca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	025b      	lsls	r3, r3, #9
 8003da2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003da4:	2390      	movs	r3, #144	@ 0x90
 8003da6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f107 0210 	add.w	r2, r7, #16
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 ff40 	bl	8005c44 <SDMMC_ConfigData>

      return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3730      	adds	r7, #48	@ 0x30
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	080044c1 	.word	0x080044c1
 8003dd8:	0800455d 	.word	0x0800455d
 8003ddc:	004005ff 	.word	0x004005ff

08003de0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_SD_IRQHandler+0x2e>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fdec 	bl	80049e4 <SD_Read_IT>
 8003e0c:	e15a      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 808d 	beq.w	8003f38 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e26:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b9a      	ldr	r3, [pc, #616]	@ (800409c <HAL_SD_IRQHandler+0x2bc>)
 8003e34:	400b      	ands	r3, r1
 8003e36:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d039      	beq.n	8003ec6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <HAL_SD_IRQHandler+0x86>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 ffc0 	bl	8005df0 <SDMMC_CmdStopTransfer>
 8003e70:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f921 	bl	80040cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <HAL_SD_IRQHandler+0xd6>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f002 fbde 	bl	8006678 <HAL_SD_RxCpltCallback>
 8003ebc:	e102      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f002 fbd0 	bl	8006664 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ec4:	e0fe      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80f9 	beq.w	80040c4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d011      	beq.n	8003f00 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 ff85 	bl	8005df0 <SDMMC_CmdStopTransfer>
 8003ee6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8e6 	bl	80040cc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 80dc 	bne.w	80040c4 <HAL_SD_IRQHandler+0x2e4>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 80d6 	bne.w	80040c4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0208 	bic.w	r2, r2, #8
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f002 fb97 	bl	8006664 <HAL_SD_TxCpltCallback>
}
 8003f36:	e0c5      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_SD_IRQHandler+0x178>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fd98 	bl	8004a86 <SD_Write_IT>
 8003f56:	e0b5      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80ae 	beq.w	80040c4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7a:	f043 0202 	orr.w	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	f043 0208 	orr.w	r2, r3, #8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	f043 0210 	orr.w	r2, r3, #16
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fefe 	bl	8005df0 <SDMMC_CmdStopTransfer>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f857 	bl	80040cc <HAL_SD_ErrorCallback>
}
 800401e:	e051      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04c      	beq.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_SD_IRQHandler+0x25e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d011      	beq.n	8004062 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	4a17      	ldr	r2, [pc, #92]	@ (80040a0 <HAL_SD_IRQHandler+0x2c0>)
 8004044:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	4618      	mov	r0, r3
 800404c:	f7fd ff40 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d036      	beq.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fad0 	bl	8004600 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004060:	e030      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_SD_IRQHandler+0x296>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d018      	beq.n	80040a8 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <HAL_SD_IRQHandler+0x2c4>)
 800407c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd ff24 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01a      	beq.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	4618      	mov	r0, r3
 8004094:	f000 faeb 	bl	800466e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004098:	e014      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
 800409a:	bf00      	nop
 800409c:	ffff3ec5 	.word	0xffff3ec5
 80040a0:	08004601 	.word	0x08004601
 80040a4:	0800466f 	.word	0x0800466f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f002 fac7 	bl	8006650 <HAL_SD_AbortCallback>
}
 80040c2:	e7ff      	b.n	80040c4 <HAL_SD_IRQHandler+0x2e4>
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ee:	0f9b      	lsrs	r3, r3, #30
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040fa:	0e9b      	lsrs	r3, r3, #26
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	b2da      	uxtb	r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800410c:	0e1b      	lsrs	r3, r3, #24
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	b2da      	uxtb	r2, r3
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800411e:	0c1b      	lsrs	r3, r3, #16
 8004120:	b2da      	uxtb	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b2da      	uxtb	r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004136:	b2da      	uxtb	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004140:	0d1b      	lsrs	r3, r3, #20
 8004142:	b29a      	uxth	r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	b2da      	uxtb	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800415e:	0bdb      	lsrs	r3, r3, #15
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004170:	0b9b      	lsrs	r3, r3, #14
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	b2da      	uxtb	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004182:	0b5b      	lsrs	r3, r3, #13
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004194:	0b1b      	lsrs	r3, r3, #12
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	b2da      	uxtb	r2, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2200      	movs	r2, #0
 80041a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d163      	bne.n	8004278 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041b4:	009a      	lsls	r2, r3, #2
 80041b6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041ba:	4013      	ands	r3, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80041c0:	0f92      	lsrs	r2, r2, #30
 80041c2:	431a      	orrs	r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041cc:	0edb      	lsrs	r3, r3, #27
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041de:	0e1b      	lsrs	r3, r3, #24
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f0:	0d5b      	lsrs	r3, r3, #21
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004202:	0c9b      	lsrs	r3, r3, #18
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	b2da      	uxtb	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004214:	0bdb      	lsrs	r3, r3, #15
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	b2da      	uxtb	r2, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	7e1b      	ldrb	r3, [r3, #24]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	3302      	adds	r3, #2
 8004238:	2201      	movs	r2, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004242:	fb03 f202 	mul.w	r2, r3, r2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	7a1b      	ldrb	r3, [r3, #8]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	2201      	movs	r2, #1
 8004256:	409a      	lsls	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004264:	0a52      	lsrs	r2, r2, #9
 8004266:	fb03 f202 	mul.w	r2, r3, r2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004274:	661a      	str	r2, [r3, #96]	@ 0x60
 8004276:	e031      	b.n	80042dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427c:	2b01      	cmp	r3, #1
 800427e:	d11d      	bne.n	80042bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	431a      	orrs	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	3301      	adds	r3, #1
 800429c:	029a      	lsls	r2, r3, #10
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80042ba:	e00f      	b.n	80042dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a58      	ldr	r2, [pc, #352]	@ (8004424 <HAL_SD_GetCardCSD+0x344>)
 80042c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e09d      	b.n	8004418 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e0:	0b9b      	lsrs	r3, r3, #14
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f2:	09db      	lsrs	r3, r3, #7
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430a:	b2da      	uxtb	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	0fdb      	lsrs	r3, r3, #31
 8004316:	b2da      	uxtb	r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004320:	0f5b      	lsrs	r3, r3, #29
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	b2da      	uxtb	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	0e9b      	lsrs	r3, r3, #26
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	b2da      	uxtb	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	0d9b      	lsrs	r3, r3, #22
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	b2da      	uxtb	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	0d5b      	lsrs	r3, r3, #21
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	0bdb      	lsrs	r3, r3, #15
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	0b9b      	lsrs	r3, r3, #14
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	0b5b      	lsrs	r3, r3, #13
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	0b1b      	lsrs	r3, r3, #12
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d6:	0a9b      	lsrs	r3, r3, #10
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004406:	b2da      	uxtb	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	004005ff 	.word	0x004005ff

08004428 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800448c:	f107 030c 	add.w	r3, r7, #12
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa7e 	bl	8004994 <SD_SendStatus>
 8004498:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	0a5b      	lsrs	r3, r3, #9
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80044b6:	693b      	ldr	r3, [r7, #16]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044dc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	2b82      	cmp	r3, #130	@ 0x82
 80044fe:	d111      	bne.n	8004524 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f001 fc73 	bl	8005df0 <SDMMC_CmdStopTransfer>
 800450a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff fdd4 	bl	80040cc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0208 	bic.w	r2, r2, #8
 8004532:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f240 523a 	movw	r2, #1338	@ 0x53a
 800453c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f002 f893 	bl	8006678 <HAL_SD_RxCpltCallback>
#endif
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004568:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd fe5c 	bl	8002228 <HAL_DMA_GetError>
 8004570:	4603      	mov	r3, r0
 8004572:	2b02      	cmp	r3, #2
 8004574:	d03e      	beq.n	80045f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d002      	beq.n	8004592 <SD_DMAError+0x36>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d12d      	bne.n	80045ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a19      	ldr	r2, [pc, #100]	@ (80045fc <SD_DMAError+0xa0>)
 8004598:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80045a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	f7ff ff62 	bl	8004480 <HAL_SD_GetCardState>
 80045bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b06      	cmp	r3, #6
 80045c2:	d002      	beq.n	80045ca <SD_DMAError+0x6e>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	d10a      	bne.n	80045e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 fc0e 	bl	8005df0 <SDMMC_CmdStopTransfer>
 80045d4:	4602      	mov	r2, r0
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	431a      	orrs	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80045ee:	6978      	ldr	r0, [r7, #20]
 80045f0:	f7ff fd6c 	bl	80040cc <HAL_SD_ErrorCallback>
#endif
  }
}
 80045f4:	bf00      	nop
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	004005ff 	.word	0x004005ff

08004600 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004616:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff ff31 	bl	8004480 <HAL_SD_GetCardState>
 800461e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b06      	cmp	r3, #6
 8004632:	d002      	beq.n	800463a <SD_DMATxAbort+0x3a>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b05      	cmp	r3, #5
 8004638:	d10a      	bne.n	8004650 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f001 fbd6 	bl	8005df0 <SDMMC_CmdStopTransfer>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	431a      	orrs	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d103      	bne.n	8004660 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f001 fff9 	bl	8006650 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800465e:	e002      	b.n	8004666 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff fd33 	bl	80040cc <HAL_SD_ErrorCallback>
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004684:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff fefa 	bl	8004480 <HAL_SD_GetCardState>
 800468c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d002      	beq.n	80046a8 <SD_DMARxAbort+0x3a>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b05      	cmp	r3, #5
 80046a6:	d10a      	bne.n	80046be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 fb9f 	bl	8005df0 <SDMMC_CmdStopTransfer>
 80046b2:	4602      	mov	r2, r0
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f001 ffc2 	bl	8006650 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80046cc:	e002      	b.n	80046d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff fcfc 	bl	80040cc <HAL_SD_ErrorCallback>
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046dc:	b5b0      	push	{r4, r5, r7, lr}
 80046de:	b094      	sub	sp, #80	@ 0x50
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80046e4:	2301      	movs	r3, #1
 80046e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f001 fa51 	bl	8005b94 <SDMMC_GetPowerState>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80046f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80046fc:	e0b8      	b.n	8004870 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	2b03      	cmp	r3, #3
 8004704:	d02f      	beq.n	8004766 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fc38 	bl	8005f80 <SDMMC_CmdSendCID>
 8004710:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <SD_InitCard+0x40>
    {
      return errorstate;
 8004718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471a:	e0a9      	b.n	8004870 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f001 fa7b 	bl	8005c1e <SDMMC_GetResponse>
 8004728:	4602      	mov	r2, r0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2104      	movs	r1, #4
 8004734:	4618      	mov	r0, r3
 8004736:	f001 fa72 	bl	8005c1e <SDMMC_GetResponse>
 800473a:	4602      	mov	r2, r0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2108      	movs	r1, #8
 8004746:	4618      	mov	r0, r3
 8004748:	f001 fa69 	bl	8005c1e <SDMMC_GetResponse>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	210c      	movs	r1, #12
 8004758:	4618      	mov	r0, r3
 800475a:	f001 fa60 	bl	8005c1e <SDMMC_GetResponse>
 800475e:	4602      	mov	r2, r0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	2b03      	cmp	r3, #3
 800476c:	d00d      	beq.n	800478a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f107 020e 	add.w	r2, r7, #14
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fc3e 	bl	8005ffa <SDMMC_CmdSetRelAdd>
 800477e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <SD_InitCard+0xae>
    {
      return errorstate;
 8004786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004788:	e072      	b.n	8004870 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478e:	2b03      	cmp	r3, #3
 8004790:	d036      	beq.n	8004800 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f001 fc08 	bl	8005fbc <SDMMC_CmdSendCSD>
 80047ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80047b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b6:	e05b      	b.n	8004870 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 fa2d 	bl	8005c1e <SDMMC_GetResponse>
 80047c4:	4602      	mov	r2, r0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2104      	movs	r1, #4
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 fa24 	bl	8005c1e <SDMMC_GetResponse>
 80047d6:	4602      	mov	r2, r0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2108      	movs	r1, #8
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 fa1b 	bl	8005c1e <SDMMC_GetResponse>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	210c      	movs	r1, #12
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 fa12 	bl	8005c1e <SDMMC_GetResponse>
 80047fa:	4602      	mov	r2, r0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2104      	movs	r1, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f001 fa09 	bl	8005c1e <SDMMC_GetResponse>
 800480c:	4603      	mov	r3, r0
 800480e:	0d1a      	lsrs	r2, r3, #20
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004814:	f107 0310 	add.w	r3, r7, #16
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fc60 	bl	80040e0 <HAL_SD_GetCardCSD>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004826:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800482a:	e021      	b.n	8004870 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	2200      	movs	r2, #0
 8004838:	461c      	mov	r4, r3
 800483a:	4615      	mov	r5, r2
 800483c:	4622      	mov	r2, r4
 800483e:	462b      	mov	r3, r5
 8004840:	4608      	mov	r0, r1
 8004842:	f001 faf7 	bl	8005e34 <SDMMC_CmdSelDesel>
 8004846:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <SD_InitCard+0x176>
  {
    return errorstate;
 800484e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004850:	e00e      	b.n	8004870 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681d      	ldr	r5, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	466c      	mov	r4, sp
 800485a:	f103 0210 	add.w	r2, r3, #16
 800485e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004864:	3304      	adds	r3, #4
 8004866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004868:	4628      	mov	r0, r5
 800486a:	f001 f93b 	bl	8005ae4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3740      	adds	r7, #64	@ 0x40
 8004874:	46bd      	mov	sp, r7
 8004876:	bdb0      	pop	{r4, r5, r7, pc}

08004878 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f001 faf2 	bl	8005e7a <SDMMC_CmdGoIdleState>
 8004896:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	e072      	b.n	8004988 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 fb05 	bl	8005eb6 <SDMMC_CmdOperCond>
 80048ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 fadb 	bl	8005e7a <SDMMC_CmdGoIdleState>
 80048c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	e05b      	b.n	8004988 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d137      	bne.n	800494e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 fb05 	bl	8005ef4 <SDMMC_CmdAppCommand>
 80048ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02d      	beq.n	800494e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80048f6:	e047      	b.n	8004988 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 faf8 	bl	8005ef4 <SDMMC_CmdAppCommand>
 8004904:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <SD_PowerON+0x98>
    {
      return errorstate;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	e03b      	b.n	8004988 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	491e      	ldr	r1, [pc, #120]	@ (8004990 <SD_PowerON+0x118>)
 8004916:	4618      	mov	r0, r3
 8004918:	f001 fb0e 	bl	8005f38 <SDMMC_CmdAppOperCommand>
 800491c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004924:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004928:	e02e      	b.n	8004988 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f001 f974 	bl	8005c1e <SDMMC_GetResponse>
 8004936:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	0fdb      	lsrs	r3, r3, #31
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <SD_PowerON+0xcc>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <SD_PowerON+0xce>
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]

    count++;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3301      	adds	r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004954:	4293      	cmp	r3, r2
 8004956:	d802      	bhi.n	800495e <SD_PowerON+0xe6>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0cc      	beq.n	80048f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004964:	4293      	cmp	r3, r2
 8004966:	d902      	bls.n	800496e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800496c:	e00c      	b.n	8004988 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44
 800497e:	e002      	b.n	8004986 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	c1100000 	.word	0xc1100000

08004994 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80049a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049a8:	e018      	b.n	80049dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f001 fb40 	bl	800603c <SDMMC_CmdSendStatus>
 80049bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	e009      	b.n	80049dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 f925 	bl	8005c1e <SDMMC_GetResponse>
 80049d4:	4602      	mov	r2, r0
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d03f      	beq.n	8004a7e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e033      	b.n	8004a6c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f897 	bl	8005b3c <SDMMC_ReadFIFO>
 8004a0e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3301      	adds	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	0e1b      	lsrs	r3, r3, #24
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b07      	cmp	r3, #7
 8004a70:	d9c8      	bls.n	8004a04 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d043      	beq.n	8004b28 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e037      	b.n	8004b16 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	021a      	lsls	r2, r3, #8
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	041a      	lsls	r2, r3, #16
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	061a      	lsls	r2, r3, #24
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f107 0208 	add.w	r2, r7, #8
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f001 f823 	bl	8005b56 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3301      	adds	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b07      	cmp	r3, #7
 8004b1a:	d9c4      	bls.n	8004aa6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e049      	b.n	8004bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f841 	bl	8004bde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f000 f9e8 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d001      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e054      	b.n	8004cb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a26      	ldr	r2, [pc, #152]	@ (8004cc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d022      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c36:	d01d      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a22      	ldr	r2, [pc, #136]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a21      	ldr	r2, [pc, #132]	@ (8004ccc <HAL_TIM_Base_Start_IT+0xd8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cdc <HAL_TIM_Base_Start_IT+0xe8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d115      	bne.n	8004ca0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	4b19      	ldr	r3, [pc, #100]	@ (8004ce0 <HAL_TIM_Base_Start_IT+0xec>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d015      	beq.n	8004cb2 <HAL_TIM_Base_Start_IT+0xbe>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8c:	d011      	beq.n	8004cb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	e008      	b.n	8004cb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e000      	b.n	8004cb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40010400 	.word	0x40010400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40001800 	.word	0x40001800
 8004ce0:	00010007 	.word	0x00010007

08004ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d020      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0202 	mvn.w	r2, #2
 8004d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8e9 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f8db 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f8ec 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d020      	beq.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01b      	beq.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0204 	mvn.w	r2, #4
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8c3 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f8b5 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f8c6 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d020      	beq.n	8004de0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01b      	beq.n	8004de0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0208 	mvn.w	r2, #8
 8004db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f89d 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f88f 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8a0 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0210 	mvn.w	r2, #16
 8004dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2208      	movs	r2, #8
 8004e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f877 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f869 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f87a 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0201 	mvn.w	r2, #1
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fa92 	bl	8001374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00c      	beq.n	8004e7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f919 	bl	80050b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00c      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f911 	bl	80050c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00c      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f834 	bl	8004f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f06f 0220 	mvn.w	r2, #32
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f8d9 	bl	800509c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a46      	ldr	r2, [pc, #280]	@ (8005070 <TIM_Base_SetConfig+0x12c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a43      	ldr	r2, [pc, #268]	@ (8005074 <TIM_Base_SetConfig+0x130>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a42      	ldr	r2, [pc, #264]	@ (8005078 <TIM_Base_SetConfig+0x134>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a41      	ldr	r2, [pc, #260]	@ (800507c <TIM_Base_SetConfig+0x138>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a40      	ldr	r2, [pc, #256]	@ (8005080 <TIM_Base_SetConfig+0x13c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a35      	ldr	r2, [pc, #212]	@ (8005070 <TIM_Base_SetConfig+0x12c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa4:	d027      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a32      	ldr	r2, [pc, #200]	@ (8005074 <TIM_Base_SetConfig+0x130>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d023      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a31      	ldr	r2, [pc, #196]	@ (8005078 <TIM_Base_SetConfig+0x134>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01f      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a30      	ldr	r2, [pc, #192]	@ (800507c <TIM_Base_SetConfig+0x138>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8005080 <TIM_Base_SetConfig+0x13c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d017      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8005084 <TIM_Base_SetConfig+0x140>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005088 <TIM_Base_SetConfig+0x144>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800508c <TIM_Base_SetConfig+0x148>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8005090 <TIM_Base_SetConfig+0x14c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8005094 <TIM_Base_SetConfig+0x150>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	@ (8005098 <TIM_Base_SetConfig+0x154>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d108      	bne.n	8005008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a10      	ldr	r2, [pc, #64]	@ (8005070 <TIM_Base_SetConfig+0x12c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a12      	ldr	r2, [pc, #72]	@ (8005080 <TIM_Base_SetConfig+0x13c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d103      	bne.n	8005044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b01      	cmp	r3, #1
 8005054:	d105      	bne.n	8005062 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f023 0201 	bic.w	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]
  }
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010000 	.word	0x40010000
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40010400 	.word	0x40010400
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400
 800508c:	40014800 	.word	0x40014800
 8005090:	40001800 	.word	0x40001800
 8005094:	40001c00 	.word	0x40001c00
 8005098:	40002000 	.word	0x40002000

0800509c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e040      	b.n	800516c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc fa88 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2224      	movs	r2, #36	@ 0x24
 8005104:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fb16 	bl	8005750 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8af 	bl	8005288 <UART_SetConfig>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e01b      	b.n	800516c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fb95 	bl	8005894 <UART_CheckIdleState>
 800516a:	4603      	mov	r3, r0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	@ 0x28
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005188:	2b20      	cmp	r3, #32
 800518a:	d177      	bne.n	800527c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Transmit+0x24>
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e070      	b.n	800527e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2221      	movs	r2, #33	@ 0x21
 80051a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051aa:	f7fc fc71 	bl	8001a90 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c8:	d108      	bne.n	80051dc <HAL_UART_Transmit+0x68>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	e003      	b.n	80051e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051e4:	e02f      	b.n	8005246 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	2180      	movs	r1, #128	@ 0x80
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fba6 	bl	8005942 <UART_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e03b      	b.n	800527e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10b      	bne.n	8005224 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800521a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	3302      	adds	r3, #2
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e007      	b.n	8005234 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	781a      	ldrb	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3301      	adds	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1c9      	bne.n	80051e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	2140      	movs	r1, #64	@ 0x40
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fb70 	bl	8005942 <UART_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e005      	b.n	800527e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4ba6      	ldr	r3, [pc, #664]	@ (800554c <UART_SetConfig+0x2c4>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	6979      	ldr	r1, [r7, #20]
 80052bc:	430b      	orrs	r3, r1
 80052be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a94      	ldr	r2, [pc, #592]	@ (8005550 <UART_SetConfig+0x2c8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d120      	bne.n	8005346 <UART_SetConfig+0xbe>
 8005304:	4b93      	ldr	r3, [pc, #588]	@ (8005554 <UART_SetConfig+0x2cc>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b03      	cmp	r3, #3
 8005310:	d816      	bhi.n	8005340 <UART_SetConfig+0xb8>
 8005312:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <UART_SetConfig+0x90>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005329 	.word	0x08005329
 800531c:	08005335 	.word	0x08005335
 8005320:	0800532f 	.word	0x0800532f
 8005324:	0800533b 	.word	0x0800533b
 8005328:	2301      	movs	r3, #1
 800532a:	77fb      	strb	r3, [r7, #31]
 800532c:	e150      	b.n	80055d0 <UART_SetConfig+0x348>
 800532e:	2302      	movs	r3, #2
 8005330:	77fb      	strb	r3, [r7, #31]
 8005332:	e14d      	b.n	80055d0 <UART_SetConfig+0x348>
 8005334:	2304      	movs	r3, #4
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e14a      	b.n	80055d0 <UART_SetConfig+0x348>
 800533a:	2308      	movs	r3, #8
 800533c:	77fb      	strb	r3, [r7, #31]
 800533e:	e147      	b.n	80055d0 <UART_SetConfig+0x348>
 8005340:	2310      	movs	r3, #16
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e144      	b.n	80055d0 <UART_SetConfig+0x348>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a83      	ldr	r2, [pc, #524]	@ (8005558 <UART_SetConfig+0x2d0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d132      	bne.n	80053b6 <UART_SetConfig+0x12e>
 8005350:	4b80      	ldr	r3, [pc, #512]	@ (8005554 <UART_SetConfig+0x2cc>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d828      	bhi.n	80053b0 <UART_SetConfig+0x128>
 800535e:	a201      	add	r2, pc, #4	@ (adr r2, 8005364 <UART_SetConfig+0xdc>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005399 	.word	0x08005399
 8005368:	080053b1 	.word	0x080053b1
 800536c:	080053b1 	.word	0x080053b1
 8005370:	080053b1 	.word	0x080053b1
 8005374:	080053a5 	.word	0x080053a5
 8005378:	080053b1 	.word	0x080053b1
 800537c:	080053b1 	.word	0x080053b1
 8005380:	080053b1 	.word	0x080053b1
 8005384:	0800539f 	.word	0x0800539f
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b1 	.word	0x080053b1
 8005394:	080053ab 	.word	0x080053ab
 8005398:	2300      	movs	r3, #0
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e118      	b.n	80055d0 <UART_SetConfig+0x348>
 800539e:	2302      	movs	r3, #2
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e115      	b.n	80055d0 <UART_SetConfig+0x348>
 80053a4:	2304      	movs	r3, #4
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e112      	b.n	80055d0 <UART_SetConfig+0x348>
 80053aa:	2308      	movs	r3, #8
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e10f      	b.n	80055d0 <UART_SetConfig+0x348>
 80053b0:	2310      	movs	r3, #16
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e10c      	b.n	80055d0 <UART_SetConfig+0x348>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a68      	ldr	r2, [pc, #416]	@ (800555c <UART_SetConfig+0x2d4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d120      	bne.n	8005402 <UART_SetConfig+0x17a>
 80053c0:	4b64      	ldr	r3, [pc, #400]	@ (8005554 <UART_SetConfig+0x2cc>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053ca:	2b30      	cmp	r3, #48	@ 0x30
 80053cc:	d013      	beq.n	80053f6 <UART_SetConfig+0x16e>
 80053ce:	2b30      	cmp	r3, #48	@ 0x30
 80053d0:	d814      	bhi.n	80053fc <UART_SetConfig+0x174>
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d009      	beq.n	80053ea <UART_SetConfig+0x162>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d810      	bhi.n	80053fc <UART_SetConfig+0x174>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <UART_SetConfig+0x15c>
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d006      	beq.n	80053f0 <UART_SetConfig+0x168>
 80053e2:	e00b      	b.n	80053fc <UART_SetConfig+0x174>
 80053e4:	2300      	movs	r3, #0
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e0f2      	b.n	80055d0 <UART_SetConfig+0x348>
 80053ea:	2302      	movs	r3, #2
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e0ef      	b.n	80055d0 <UART_SetConfig+0x348>
 80053f0:	2304      	movs	r3, #4
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e0ec      	b.n	80055d0 <UART_SetConfig+0x348>
 80053f6:	2308      	movs	r3, #8
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e0e9      	b.n	80055d0 <UART_SetConfig+0x348>
 80053fc:	2310      	movs	r3, #16
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e0e6      	b.n	80055d0 <UART_SetConfig+0x348>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a56      	ldr	r2, [pc, #344]	@ (8005560 <UART_SetConfig+0x2d8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d120      	bne.n	800544e <UART_SetConfig+0x1c6>
 800540c:	4b51      	ldr	r3, [pc, #324]	@ (8005554 <UART_SetConfig+0x2cc>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005412:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005416:	2bc0      	cmp	r3, #192	@ 0xc0
 8005418:	d013      	beq.n	8005442 <UART_SetConfig+0x1ba>
 800541a:	2bc0      	cmp	r3, #192	@ 0xc0
 800541c:	d814      	bhi.n	8005448 <UART_SetConfig+0x1c0>
 800541e:	2b80      	cmp	r3, #128	@ 0x80
 8005420:	d009      	beq.n	8005436 <UART_SetConfig+0x1ae>
 8005422:	2b80      	cmp	r3, #128	@ 0x80
 8005424:	d810      	bhi.n	8005448 <UART_SetConfig+0x1c0>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <UART_SetConfig+0x1a8>
 800542a:	2b40      	cmp	r3, #64	@ 0x40
 800542c:	d006      	beq.n	800543c <UART_SetConfig+0x1b4>
 800542e:	e00b      	b.n	8005448 <UART_SetConfig+0x1c0>
 8005430:	2300      	movs	r3, #0
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e0cc      	b.n	80055d0 <UART_SetConfig+0x348>
 8005436:	2302      	movs	r3, #2
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e0c9      	b.n	80055d0 <UART_SetConfig+0x348>
 800543c:	2304      	movs	r3, #4
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e0c6      	b.n	80055d0 <UART_SetConfig+0x348>
 8005442:	2308      	movs	r3, #8
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e0c3      	b.n	80055d0 <UART_SetConfig+0x348>
 8005448:	2310      	movs	r3, #16
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e0c0      	b.n	80055d0 <UART_SetConfig+0x348>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a44      	ldr	r2, [pc, #272]	@ (8005564 <UART_SetConfig+0x2dc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d125      	bne.n	80054a4 <UART_SetConfig+0x21c>
 8005458:	4b3e      	ldr	r3, [pc, #248]	@ (8005554 <UART_SetConfig+0x2cc>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005466:	d017      	beq.n	8005498 <UART_SetConfig+0x210>
 8005468:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800546c:	d817      	bhi.n	800549e <UART_SetConfig+0x216>
 800546e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005472:	d00b      	beq.n	800548c <UART_SetConfig+0x204>
 8005474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005478:	d811      	bhi.n	800549e <UART_SetConfig+0x216>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <UART_SetConfig+0x1fe>
 800547e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005482:	d006      	beq.n	8005492 <UART_SetConfig+0x20a>
 8005484:	e00b      	b.n	800549e <UART_SetConfig+0x216>
 8005486:	2300      	movs	r3, #0
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e0a1      	b.n	80055d0 <UART_SetConfig+0x348>
 800548c:	2302      	movs	r3, #2
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e09e      	b.n	80055d0 <UART_SetConfig+0x348>
 8005492:	2304      	movs	r3, #4
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e09b      	b.n	80055d0 <UART_SetConfig+0x348>
 8005498:	2308      	movs	r3, #8
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e098      	b.n	80055d0 <UART_SetConfig+0x348>
 800549e:	2310      	movs	r3, #16
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e095      	b.n	80055d0 <UART_SetConfig+0x348>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005568 <UART_SetConfig+0x2e0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d125      	bne.n	80054fa <UART_SetConfig+0x272>
 80054ae:	4b29      	ldr	r3, [pc, #164]	@ (8005554 <UART_SetConfig+0x2cc>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054bc:	d017      	beq.n	80054ee <UART_SetConfig+0x266>
 80054be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054c2:	d817      	bhi.n	80054f4 <UART_SetConfig+0x26c>
 80054c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c8:	d00b      	beq.n	80054e2 <UART_SetConfig+0x25a>
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ce:	d811      	bhi.n	80054f4 <UART_SetConfig+0x26c>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <UART_SetConfig+0x254>
 80054d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d8:	d006      	beq.n	80054e8 <UART_SetConfig+0x260>
 80054da:	e00b      	b.n	80054f4 <UART_SetConfig+0x26c>
 80054dc:	2301      	movs	r3, #1
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e076      	b.n	80055d0 <UART_SetConfig+0x348>
 80054e2:	2302      	movs	r3, #2
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e073      	b.n	80055d0 <UART_SetConfig+0x348>
 80054e8:	2304      	movs	r3, #4
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e070      	b.n	80055d0 <UART_SetConfig+0x348>
 80054ee:	2308      	movs	r3, #8
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e06d      	b.n	80055d0 <UART_SetConfig+0x348>
 80054f4:	2310      	movs	r3, #16
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e06a      	b.n	80055d0 <UART_SetConfig+0x348>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <UART_SetConfig+0x2e4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d138      	bne.n	8005576 <UART_SetConfig+0x2ee>
 8005504:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <UART_SetConfig+0x2cc>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800550e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005512:	d017      	beq.n	8005544 <UART_SetConfig+0x2bc>
 8005514:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005518:	d82a      	bhi.n	8005570 <UART_SetConfig+0x2e8>
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551e:	d00b      	beq.n	8005538 <UART_SetConfig+0x2b0>
 8005520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005524:	d824      	bhi.n	8005570 <UART_SetConfig+0x2e8>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <UART_SetConfig+0x2aa>
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552e:	d006      	beq.n	800553e <UART_SetConfig+0x2b6>
 8005530:	e01e      	b.n	8005570 <UART_SetConfig+0x2e8>
 8005532:	2300      	movs	r3, #0
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e04b      	b.n	80055d0 <UART_SetConfig+0x348>
 8005538:	2302      	movs	r3, #2
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e048      	b.n	80055d0 <UART_SetConfig+0x348>
 800553e:	2304      	movs	r3, #4
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e045      	b.n	80055d0 <UART_SetConfig+0x348>
 8005544:	2308      	movs	r3, #8
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e042      	b.n	80055d0 <UART_SetConfig+0x348>
 800554a:	bf00      	nop
 800554c:	efff69f3 	.word	0xefff69f3
 8005550:	40011000 	.word	0x40011000
 8005554:	40023800 	.word	0x40023800
 8005558:	40004400 	.word	0x40004400
 800555c:	40004800 	.word	0x40004800
 8005560:	40004c00 	.word	0x40004c00
 8005564:	40005000 	.word	0x40005000
 8005568:	40011400 	.word	0x40011400
 800556c:	40007800 	.word	0x40007800
 8005570:	2310      	movs	r3, #16
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e02c      	b.n	80055d0 <UART_SetConfig+0x348>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a72      	ldr	r2, [pc, #456]	@ (8005744 <UART_SetConfig+0x4bc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d125      	bne.n	80055cc <UART_SetConfig+0x344>
 8005580:	4b71      	ldr	r3, [pc, #452]	@ (8005748 <UART_SetConfig+0x4c0>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005586:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800558a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800558e:	d017      	beq.n	80055c0 <UART_SetConfig+0x338>
 8005590:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005594:	d817      	bhi.n	80055c6 <UART_SetConfig+0x33e>
 8005596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800559a:	d00b      	beq.n	80055b4 <UART_SetConfig+0x32c>
 800559c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a0:	d811      	bhi.n	80055c6 <UART_SetConfig+0x33e>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <UART_SetConfig+0x326>
 80055a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055aa:	d006      	beq.n	80055ba <UART_SetConfig+0x332>
 80055ac:	e00b      	b.n	80055c6 <UART_SetConfig+0x33e>
 80055ae:	2300      	movs	r3, #0
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e00d      	b.n	80055d0 <UART_SetConfig+0x348>
 80055b4:	2302      	movs	r3, #2
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e00a      	b.n	80055d0 <UART_SetConfig+0x348>
 80055ba:	2304      	movs	r3, #4
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e007      	b.n	80055d0 <UART_SetConfig+0x348>
 80055c0:	2308      	movs	r3, #8
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e004      	b.n	80055d0 <UART_SetConfig+0x348>
 80055c6:	2310      	movs	r3, #16
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e001      	b.n	80055d0 <UART_SetConfig+0x348>
 80055cc:	2310      	movs	r3, #16
 80055ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d8:	d15b      	bne.n	8005692 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80055da:	7ffb      	ldrb	r3, [r7, #31]
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d828      	bhi.n	8005632 <UART_SetConfig+0x3aa>
 80055e0:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <UART_SetConfig+0x360>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005615 	.word	0x08005615
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	08005633 	.word	0x08005633
 80055f8:	08005623 	.word	0x08005623
 80055fc:	08005633 	.word	0x08005633
 8005600:	08005633 	.word	0x08005633
 8005604:	08005633 	.word	0x08005633
 8005608:	0800562b 	.word	0x0800562b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800560c:	f7fd fd1e 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8005610:	61b8      	str	r0, [r7, #24]
        break;
 8005612:	e013      	b.n	800563c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005614:	f7fd fd2e 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8005618:	61b8      	str	r0, [r7, #24]
        break;
 800561a:	e00f      	b.n	800563c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800561c:	4b4b      	ldr	r3, [pc, #300]	@ (800574c <UART_SetConfig+0x4c4>)
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	e00c      	b.n	800563c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005622:	f7fd fc41 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8005626:	61b8      	str	r0, [r7, #24]
        break;
 8005628:	e008      	b.n	800563c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800562e:	61bb      	str	r3, [r7, #24]
        break;
 8005630:	e004      	b.n	800563c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	77bb      	strb	r3, [r7, #30]
        break;
 800563a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d074      	beq.n	800572c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	005a      	lsls	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	441a      	add	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d916      	bls.n	800568c <UART_SetConfig+0x404>
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005664:	d212      	bcs.n	800568c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f023 030f 	bic.w	r3, r3, #15
 800566e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	b29b      	uxth	r3, r3
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	b29a      	uxth	r2, r3
 800567c:	89fb      	ldrh	r3, [r7, #14]
 800567e:	4313      	orrs	r3, r2
 8005680:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	89fa      	ldrh	r2, [r7, #14]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	e04f      	b.n	800572c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	77bb      	strb	r3, [r7, #30]
 8005690:	e04c      	b.n	800572c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005692:	7ffb      	ldrb	r3, [r7, #31]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d828      	bhi.n	80056ea <UART_SetConfig+0x462>
 8005698:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <UART_SetConfig+0x418>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	080056eb 	.word	0x080056eb
 80056b0:	080056db 	.word	0x080056db
 80056b4:	080056eb 	.word	0x080056eb
 80056b8:	080056eb 	.word	0x080056eb
 80056bc:	080056eb 	.word	0x080056eb
 80056c0:	080056e3 	.word	0x080056e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c4:	f7fd fcc2 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80056c8:	61b8      	str	r0, [r7, #24]
        break;
 80056ca:	e013      	b.n	80056f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056cc:	f7fd fcd2 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 80056d0:	61b8      	str	r0, [r7, #24]
        break;
 80056d2:	e00f      	b.n	80056f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d4:	4b1d      	ldr	r3, [pc, #116]	@ (800574c <UART_SetConfig+0x4c4>)
 80056d6:	61bb      	str	r3, [r7, #24]
        break;
 80056d8:	e00c      	b.n	80056f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056da:	f7fd fbe5 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 80056de:	61b8      	str	r0, [r7, #24]
        break;
 80056e0:	e008      	b.n	80056f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056e6:	61bb      	str	r3, [r7, #24]
        break;
 80056e8:	e004      	b.n	80056f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	77bb      	strb	r3, [r7, #30]
        break;
 80056f2:	bf00      	nop
    }

    if (pclk != 0U)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	085a      	lsrs	r2, r3, #1
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	441a      	add	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b0f      	cmp	r3, #15
 8005712:	d909      	bls.n	8005728 <UART_SetConfig+0x4a0>
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800571a:	d205      	bcs.n	8005728 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	b29a      	uxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e001      	b.n	800572c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005738:	7fbb      	ldrb	r3, [r7, #30]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40007c00 	.word	0x40007c00
 8005748:	40023800 	.word	0x40023800
 800574c:	00f42400 	.word	0x00f42400

08005750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01a      	beq.n	8005866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800584e:	d10a      	bne.n	8005866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08c      	sub	sp, #48	@ 0x30
 8005898:	af02      	add	r7, sp, #8
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058a4:	f7fc f8f4 	bl	8001a90 <HAL_GetTick>
 80058a8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d12e      	bne.n	8005916 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	2200      	movs	r2, #0
 80058c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f83b 	bl	8005942 <UART_WaitOnFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d021      	beq.n	8005916 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058e6:	623b      	str	r3, [r7, #32]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	617b      	str	r3, [r7, #20]
   return(result);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e6      	bne.n	80058d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e011      	b.n	800593a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3728      	adds	r7, #40	@ 0x28
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	4613      	mov	r3, r2
 8005950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005952:	e04f      	b.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d04b      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595c:	f7fc f898 	bl	8001a90 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	429a      	cmp	r2, r3
 800596a:	d302      	bcc.n	8005972 <UART_WaitOnFlagUntilTimeout+0x30>
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e04e      	b.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d037      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b80      	cmp	r3, #128	@ 0x80
 8005988:	d034      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b40      	cmp	r3, #64	@ 0x40
 800598e:	d031      	beq.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b08      	cmp	r3, #8
 800599c:	d110      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2208      	movs	r2, #8
 80059a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f838 	bl	8005a1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2208      	movs	r2, #8
 80059b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e029      	b.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ce:	d111      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f81e 	bl	8005a1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e00f      	b.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4013      	ands	r3, r2
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d0a0      	beq.n	8005954 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b095      	sub	sp, #84	@ 0x54
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a42:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e6      	bne.n	8005a24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e5      	bne.n	8005a56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d118      	bne.n	8005ac4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 0310 	bic.w	r3, r3, #16
 8005aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6979      	ldr	r1, [r7, #20]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	613b      	str	r3, [r7, #16]
   return(result);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e6      	bne.n	8005a92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ad8:	bf00      	nop
 8005ada:	3754      	adds	r7, #84	@ 0x54
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	f107 001c 	add.w	r0, r7, #28
 8005af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005afa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005afc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005afe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005b02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005b06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005b0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005b0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	4b07      	ldr	r3, [pc, #28]	@ (8005b38 <SDMMC_Init+0x54>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	b004      	add	sp, #16
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	ffff8100 	.word	0xffff8100

08005b3c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2203      	movs	r2, #3
 8005b84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0303 	and.w	r3, r3, #3
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005bd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005bda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <SDMMC_SendCommand+0x50>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	fffff000 	.word	0xfffff000

08005c04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	b2db      	uxtb	r3, r3
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	4413      	add	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
}  
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005c70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005c76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0

}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005caa:	2310      	movs	r3, #16
 8005cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cae:	2340      	movs	r3, #64	@ 0x40
 8005cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cbc:	f107 0308 	add.w	r3, r7, #8
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff ff74 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ccc:	2110      	movs	r1, #16
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f9d6 	bl	8006080 <SDMMC_GetCmdResp1>
 8005cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005cee:	2311      	movs	r3, #17
 8005cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cf2:	2340      	movs	r3, #64	@ 0x40
 8005cf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d00:	f107 0308 	add.w	r3, r7, #8
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff ff52 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d10:	2111      	movs	r1, #17
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f9b4 	bl	8006080 <SDMMC_GetCmdResp1>
 8005d18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005d32:	2312      	movs	r3, #18
 8005d34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d36:	2340      	movs	r3, #64	@ 0x40
 8005d38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d44:	f107 0308 	add.w	r3, r7, #8
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ff30 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d54:	2112      	movs	r1, #18
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f992 	bl	8006080 <SDMMC_GetCmdResp1>
 8005d5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005d76:	2318      	movs	r3, #24
 8005d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d7a:	2340      	movs	r3, #64	@ 0x40
 8005d7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d88:	f107 0308 	add.w	r3, r7, #8
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ff0e 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d98:	2118      	movs	r1, #24
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f970 	bl	8006080 <SDMMC_GetCmdResp1>
 8005da0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005da2:	69fb      	ldr	r3, [r7, #28]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005dba:	2319      	movs	r3, #25
 8005dbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005dbe:	2340      	movs	r3, #64	@ 0x40
 8005dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dcc:	f107 0308 	add.w	r3, r7, #8
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff feec 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ddc:	2119      	movs	r1, #25
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f94e 	bl	8006080 <SDMMC_GetCmdResp1>
 8005de4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005de6:	69fb      	ldr	r3, [r7, #28]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005dfc:	230c      	movs	r3, #12
 8005dfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e00:	2340      	movs	r3, #64	@ 0x40
 8005e02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e0e:	f107 0308 	add.w	r3, r7, #8
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff fecb 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005e1a:	4a05      	ldr	r2, [pc, #20]	@ (8005e30 <SDMMC_CmdStopTransfer+0x40>)
 8005e1c:	210c      	movs	r1, #12
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f92e 	bl	8006080 <SDMMC_GetCmdResp1>
 8005e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e26:	69fb      	ldr	r3, [r7, #28]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	05f5e100 	.word	0x05f5e100

08005e34 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	@ 0x28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005e44:	2307      	movs	r3, #7
 8005e46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e48:	2340      	movs	r3, #64	@ 0x40
 8005e4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e54:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e56:	f107 0310 	add.w	r3, r7, #16
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff fea7 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e66:	2107      	movs	r1, #7
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f909 	bl	8006080 <SDMMC_GetCmdResp1>
 8005e6e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3728      	adds	r7, #40	@ 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b088      	sub	sp, #32
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e98:	f107 0308 	add.w	r3, r7, #8
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fe86 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb23 	bl	80064f0 <SDMMC_GetCmdError>
 8005eaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eac:	69fb      	ldr	r3, [r7, #28]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b088      	sub	sp, #32
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005ebe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005ec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ec8:	2340      	movs	r3, #64	@ 0x40
 8005eca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ed4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff fe67 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fab6 	bl	8006454 <SDMMC_GetCmdResp7>
 8005ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eea:	69fb      	ldr	r3, [r7, #28]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005f02:	2337      	movs	r3, #55	@ 0x37
 8005f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f06:	2340      	movs	r3, #64	@ 0x40
 8005f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fe48 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f24:	2137      	movs	r1, #55	@ 0x37
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8aa 	bl	8006080 <SDMMC_GetCmdResp1>
 8005f2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	4b0d      	ldr	r3, [pc, #52]	@ (8005f7c <SDMMC_CmdAppOperCommand+0x44>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005f4a:	2329      	movs	r3, #41	@ 0x29
 8005f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f4e:	2340      	movs	r3, #64	@ 0x40
 8005f50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f5c:	f107 0308 	add.w	r3, r7, #8
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fe24 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f9bf 	bl	80062ec <SDMMC_GetCmdResp3>
 8005f6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f70:	69fb      	ldr	r3, [r7, #28]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3720      	adds	r7, #32
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	80100000 	.word	0x80100000

08005f80 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005f90:	23c0      	movs	r3, #192	@ 0xc0
 8005f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fe03 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f956 	bl	800625c <SDMMC_GetCmdResp2>
 8005fb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fb2:	69fb      	ldr	r3, [r7, #28]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005fca:	2309      	movs	r3, #9
 8005fcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005fce:	23c0      	movs	r3, #192	@ 0xc0
 8005fd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fdc:	f107 0308 	add.w	r3, r7, #8
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff fde4 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f937 	bl	800625c <SDMMC_GetCmdResp2>
 8005fee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b088      	sub	sp, #32
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006008:	2303      	movs	r3, #3
 800600a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800600c:	2340      	movs	r3, #64	@ 0x40
 800600e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006018:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fdc5 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	2103      	movs	r1, #3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f99c 	bl	8006368 <SDMMC_GetCmdResp6>
 8006030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006032:	69fb      	ldr	r3, [r7, #28]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3720      	adds	r7, #32
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800604a:	230d      	movs	r3, #13
 800604c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800604e:	2340      	movs	r3, #64	@ 0x40
 8006050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800605a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800605c:	f107 0308 	add.w	r3, r7, #8
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff fda4 	bl	8005bb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606c:	210d      	movs	r1, #13
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f806 	bl	8006080 <SDMMC_GetCmdResp1>
 8006074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006076:	69fb      	ldr	r3, [r7, #28]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	460b      	mov	r3, r1
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800608e:	4b70      	ldr	r3, [pc, #448]	@ (8006250 <SDMMC_GetCmdResp1+0x1d0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a70      	ldr	r2, [pc, #448]	@ (8006254 <SDMMC_GetCmdResp1+0x1d4>)
 8006094:	fba2 2303 	umull	r2, r3, r2, r3
 8006098:	0a5a      	lsrs	r2, r3, #9
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
 80060a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	61fa      	str	r2, [r7, #28]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060b0:	e0c9      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ef      	beq.n	80060a2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1ea      	bne.n	80060a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2204      	movs	r2, #4
 80060dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060de:	2304      	movs	r3, #4
 80060e0:	e0b1      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0a6      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	22c5      	movs	r2, #197	@ 0xc5
 80060fc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff fd80 	bl	8005c04 <SDMMC_GetCommandResponse>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	7afb      	ldrb	r3, [r7, #11]
 800610a:	4293      	cmp	r3, r2
 800610c:	d001      	beq.n	8006112 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800610e:	2301      	movs	r3, #1
 8006110:	e099      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006112:	2100      	movs	r1, #0
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff fd82 	bl	8005c1e <SDMMC_GetResponse>
 800611a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4b4e      	ldr	r3, [pc, #312]	@ (8006258 <SDMMC_GetCmdResp1+0x1d8>)
 8006120:	4013      	ands	r3, r2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006126:	2300      	movs	r3, #0
 8006128:	e08d      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	da02      	bge.n	8006136 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006134:	e087      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006140:	2340      	movs	r3, #64	@ 0x40
 8006142:	e080      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800614e:	2380      	movs	r3, #128	@ 0x80
 8006150:	e079      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800615c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006160:	e071      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800616c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006170:	e069      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800617c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006180:	e061      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800618c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006190:	e059      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800619c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061a0:	e051      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80061ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80061b0:	e049      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80061bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80061c0:	e041      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80061cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061d0:	e039      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80061dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061e0:	e031      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80061ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80061f0:	e029      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80061fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006200:	e021      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800620c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006210:	e019      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800621c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006220:	e011      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800622c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006230:	e009      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800623c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006240:	e001      	b.n	8006246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000000 	.word	0x20000000
 8006254:	10624dd3 	.word	0x10624dd3
 8006258:	fdffe008 	.word	0xfdffe008

0800625c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006264:	4b1f      	ldr	r3, [pc, #124]	@ (80062e4 <SDMMC_GetCmdResp2+0x88>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1f      	ldr	r2, [pc, #124]	@ (80062e8 <SDMMC_GetCmdResp2+0x8c>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	0a5b      	lsrs	r3, r3, #9
 8006270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006274:	fb02 f303 	mul.w	r3, r2, r3
 8006278:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1e5a      	subs	r2, r3, #1
 800627e:	60fa      	str	r2, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006284:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006288:	e026      	b.n	80062d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0ef      	beq.n	800627a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1ea      	bne.n	800627a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2204      	movs	r2, #4
 80062b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062b6:	2304      	movs	r3, #4
 80062b8:	e00e      	b.n	80062d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d004      	beq.n	80062d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e003      	b.n	80062d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	22c5      	movs	r2, #197	@ 0xc5
 80062d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20000000 	.word	0x20000000
 80062e8:	10624dd3 	.word	0x10624dd3

080062ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006360 <SDMMC_GetCmdResp3+0x74>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006364 <SDMMC_GetCmdResp3+0x78>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	0a5b      	lsrs	r3, r3, #9
 8006300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006304:	fb02 f303 	mul.w	r3, r2, r3
 8006308:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1e5a      	subs	r2, r3, #1
 800630e:	60fa      	str	r2, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006314:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006318:	e01b      	b.n	8006352 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ef      	beq.n	800630a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ea      	bne.n	800630a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2204      	movs	r2, #4
 8006344:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006346:	2304      	movs	r3, #4
 8006348:	e003      	b.n	8006352 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	22c5      	movs	r2, #197	@ 0xc5
 800634e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000000 	.word	0x20000000
 8006364:	10624dd3 	.word	0x10624dd3

08006368 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	460b      	mov	r3, r1
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006376:	4b35      	ldr	r3, [pc, #212]	@ (800644c <SDMMC_GetCmdResp6+0xe4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a35      	ldr	r2, [pc, #212]	@ (8006450 <SDMMC_GetCmdResp6+0xe8>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	0a5b      	lsrs	r3, r3, #9
 8006382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1e5a      	subs	r2, r3, #1
 8006390:	61fa      	str	r2, [r7, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006396:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800639a:	e052      	b.n	8006442 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0ef      	beq.n	800638c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1ea      	bne.n	800638c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2204      	movs	r2, #4
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063c8:	2304      	movs	r3, #4
 80063ca:	e03a      	b.n	8006442 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063de:	2301      	movs	r3, #1
 80063e0:	e02f      	b.n	8006442 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff fc0e 	bl	8005c04 <SDMMC_GetCommandResponse>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	7afb      	ldrb	r3, [r7, #11]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d001      	beq.n	80063f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e025      	b.n	8006442 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	22c5      	movs	r2, #197	@ 0xc5
 80063fa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80063fc:	2100      	movs	r1, #0
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f7ff fc0d 	bl	8005c1e <SDMMC_GetResponse>
 8006404:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	0c1b      	lsrs	r3, r3, #16
 8006414:	b29a      	uxth	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800641a:	2300      	movs	r3, #0
 800641c:	e011      	b.n	8006442 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800642c:	e009      	b.n	8006442 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800643c:	e001      	b.n	8006442 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800643e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006442:	4618      	mov	r0, r3
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000000 	.word	0x20000000
 8006450:	10624dd3 	.word	0x10624dd3

08006454 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800645c:	4b22      	ldr	r3, [pc, #136]	@ (80064e8 <SDMMC_GetCmdResp7+0x94>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a22      	ldr	r2, [pc, #136]	@ (80064ec <SDMMC_GetCmdResp7+0x98>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	0a5b      	lsrs	r3, r3, #9
 8006468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800646c:	fb02 f303 	mul.w	r3, r2, r3
 8006470:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1e5a      	subs	r2, r3, #1
 8006476:	60fa      	str	r2, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800647c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006480:	e02c      	b.n	80064dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006486:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0ef      	beq.n	8006472 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1ea      	bne.n	8006472 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2204      	movs	r2, #4
 80064ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064ae:	2304      	movs	r3, #4
 80064b0:	e014      	b.n	80064dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e009      	b.n	80064dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2240      	movs	r2, #64	@ 0x40
 80064d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80064da:	2300      	movs	r3, #0
  
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	20000000 	.word	0x20000000
 80064ec:	10624dd3 	.word	0x10624dd3

080064f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064f8:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <SDMMC_GetCmdError+0x50>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a11      	ldr	r2, [pc, #68]	@ (8006544 <SDMMC_GetCmdError+0x54>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	0a5b      	lsrs	r3, r3, #9
 8006504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006508:	fb02 f303 	mul.w	r3, r2, r3
 800650c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1e5a      	subs	r2, r3, #1
 8006512:	60fa      	str	r2, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006518:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800651c:	e009      	b.n	8006532 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f1      	beq.n	800650e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	22c5      	movs	r2, #197	@ 0xc5
 800652e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000000 	.word	0x20000000
 8006544:	10624dd3 	.word	0x10624dd3

08006548 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800654c:	4904      	ldr	r1, [pc, #16]	@ (8006560 <MX_FATFS_Init+0x18>)
 800654e:	4805      	ldr	r0, [pc, #20]	@ (8006564 <MX_FATFS_Init+0x1c>)
 8006550:	f003 f918 	bl	8009784 <FATFS_LinkDriver>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	4b03      	ldr	r3, [pc, #12]	@ (8006568 <MX_FATFS_Init+0x20>)
 800655a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800655c:	bf00      	nop
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20002644 	.word	0x20002644
 8006564:	0800e098 	.word	0x0800e098
 8006568:	20002640 	.word	0x20002640

0800656c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006570:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006572:	4618      	mov	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006586:	f000 f888 	bl	800669a <BSP_SD_IsDetected>
 800658a:	4603      	mov	r3, r0
 800658c:	2b01      	cmp	r3, #1
 800658e:	d001      	beq.n	8006594 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006590:	2302      	movs	r3, #2
 8006592:	e005      	b.n	80065a0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006594:	4804      	ldr	r0, [pc, #16]	@ (80065a8 <BSP_SD_Init+0x2c>)
 8006596:	f7fd f9a3 	bl	80038e0 <HAL_SD_Init>
 800659a:	4603      	mov	r3, r0
 800659c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800659e:	79fb      	ldrb	r3, [r7, #7]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	2000241c 	.word	0x2000241c

080065ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	68f9      	ldr	r1, [r7, #12]
 80065c2:	4806      	ldr	r0, [pc, #24]	@ (80065dc <BSP_SD_ReadBlocks_DMA+0x30>)
 80065c4:	f7fd fa44 	bl	8003a50 <HAL_SD_ReadBlocks_DMA>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	2000241c 	.word	0x2000241c

080065e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	4806      	ldr	r0, [pc, #24]	@ (8006610 <BSP_SD_WriteBlocks_DMA+0x30>)
 80065f8:	f7fd fb0c 	bl	8003c14 <HAL_SD_WriteBlocks_DMA>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006606:	7dfb      	ldrb	r3, [r7, #23]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	2000241c 	.word	0x2000241c

08006614 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006618:	4805      	ldr	r0, [pc, #20]	@ (8006630 <BSP_SD_GetCardState+0x1c>)
 800661a:	f7fd ff31 	bl	8004480 <HAL_SD_GetCardState>
 800661e:	4603      	mov	r3, r0
 8006620:	2b04      	cmp	r3, #4
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
}
 800662a:	4618      	mov	r0, r3
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	2000241c 	.word	0x2000241c

08006634 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4803      	ldr	r0, [pc, #12]	@ (800664c <BSP_SD_GetCardInfo+0x18>)
 8006640:	f7fd fef2 	bl	8004428 <HAL_SD_GetCardInfo>
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	2000241c 	.word	0x2000241c

08006650 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006658:	f000 f818 	bl	800668c <BSP_SD_AbortCallback>
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800666c:	f000 f9c4 	bl	80069f8 <BSP_SD_WriteCpltCallback>
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006680:	f000 f9c8 	bl	8006a14 <BSP_SD_ReadCpltCallback>
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0

}
 8006690:	bf00      	nop
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80066a0:	2301      	movs	r3, #1
 80066a2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80066a4:	f000 f80c 	bl	80066c0 <BSP_PlatformIsDetected>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80066ae:	2300      	movs	r3, #0
 80066b0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	b2db      	uxtb	r3, r3
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80066c6:	2301      	movs	r3, #1
 80066c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80066ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80066ce:	4806      	ldr	r0, [pc, #24]	@ (80066e8 <BSP_PlatformIsDetected+0x28>)
 80066d0:	f7fc f842 	bl	8002758 <HAL_GPIO_ReadPin>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80066da:	2300      	movs	r3, #0
 80066dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80066de:	79fb      	ldrb	r3, [r7, #7]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40020800 	.word	0x40020800

080066ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80066f4:	f003 f8de 	bl	80098b4 <osKernelSysTick>
 80066f8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80066fa:	e006      	b.n	800670a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80066fc:	f7ff ff8a 	bl	8006614 <BSP_SD_GetCardState>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006706:	2300      	movs	r3, #0
 8006708:	e009      	b.n	800671e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800670a:	f003 f8d3 	bl	80098b4 <osKernelSysTick>
 800670e:	4602      	mov	r2, r0
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	429a      	cmp	r2, r3
 8006718:	d8f0      	bhi.n	80066fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006732:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <SD_CheckStatus+0x38>)
 8006734:	2201      	movs	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006738:	f7ff ff6c 	bl	8006614 <BSP_SD_GetCardState>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d107      	bne.n	8006752 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006742:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <SD_CheckStatus+0x38>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	b2da      	uxtb	r2, r3
 800674e:	4b04      	ldr	r3, [pc, #16]	@ (8006760 <SD_CheckStatus+0x38>)
 8006750:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006752:	4b03      	ldr	r3, [pc, #12]	@ (8006760 <SD_CheckStatus+0x38>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	b2db      	uxtb	r3, r3
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000009 	.word	0x20000009

08006764 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800676e:	4b20      	ldr	r3, [pc, #128]	@ (80067f0 <SD_initialize+0x8c>)
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006774:	f003 f892 	bl	800989c <osKernelRunning>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d030      	beq.n	80067e0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800677e:	f7ff fefd 	bl	800657c <BSP_SD_Init>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d107      	bne.n	8006798 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff ffcc 	bl	8006728 <SD_CheckStatus>
 8006790:	4603      	mov	r3, r0
 8006792:	461a      	mov	r2, r3
 8006794:	4b16      	ldr	r3, [pc, #88]	@ (80067f0 <SD_initialize+0x8c>)
 8006796:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006798:	4b15      	ldr	r3, [pc, #84]	@ (80067f0 <SD_initialize+0x8c>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d01e      	beq.n	80067e0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80067a2:	4b14      	ldr	r3, [pc, #80]	@ (80067f4 <SD_initialize+0x90>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10e      	bne.n	80067c8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80067aa:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <SD_initialize+0x94>)
 80067ac:	f107 0408 	add.w	r4, r7, #8
 80067b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80067b6:	f107 0308 	add.w	r3, r7, #8
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f003 f9b2 	bl	8009b26 <osMessageCreate>
 80067c2:	4603      	mov	r3, r0
 80067c4:	4a0b      	ldr	r2, [pc, #44]	@ (80067f4 <SD_initialize+0x90>)
 80067c6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80067c8:	4b0a      	ldr	r3, [pc, #40]	@ (80067f4 <SD_initialize+0x90>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d107      	bne.n	80067e0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80067d0:	4b07      	ldr	r3, [pc, #28]	@ (80067f0 <SD_initialize+0x8c>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	4b04      	ldr	r3, [pc, #16]	@ (80067f0 <SD_initialize+0x8c>)
 80067de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80067e0:	4b03      	ldr	r3, [pc, #12]	@ (80067f0 <SD_initialize+0x8c>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	b2db      	uxtb	r3, r3
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd90      	pop	{r4, r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000009 	.word	0x20000009
 80067f4:	20002648 	.word	0x20002648
 80067f8:	0800e01c 	.word	0x0800e01c

080067fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ff8d 	bl	8006728 <SD_CheckStatus>
 800680e:	4603      	mov	r3, r0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	@ 0x28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800682e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006832:	f7ff ff5b 	bl	80066ec <SD_CheckStatusWithTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	da02      	bge.n	8006842 <SD_read+0x2a>
  {
    return res;
 800683c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006840:	e032      	b.n	80068a8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	68b8      	ldr	r0, [r7, #8]
 8006848:	f7ff feb0 	bl	80065ac <BSP_SD_ReadBlocks_DMA>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8006852:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006856:	2b00      	cmp	r3, #0
 8006858:	d124      	bne.n	80068a4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800685a:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <SD_read+0x98>)
 800685c:	6819      	ldr	r1, [r3, #0]
 800685e:	f107 0314 	add.w	r3, r7, #20
 8006862:	f247 5230 	movw	r2, #30000	@ 0x7530
 8006866:	4618      	mov	r0, r3
 8006868:	f003 f9c6 	bl	8009bf8 <osMessageGet>

    if (event.status == osEventMessage)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b10      	cmp	r3, #16
 8006870:	d118      	bne.n	80068a4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d115      	bne.n	80068a4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8006878:	f003 f81c 	bl	80098b4 <osKernelSysTick>
 800687c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800687e:	e008      	b.n	8006892 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006880:	f7ff fec8 	bl	8006614 <BSP_SD_GetCardState>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d103      	bne.n	8006892 <SD_read+0x7a>
              {
                res = RES_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006890:	e008      	b.n	80068a4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006892:	f003 f80f 	bl	80098b4 <osKernelSysTick>
 8006896:	4602      	mov	r2, r0
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f247 522f 	movw	r2, #29999	@ 0x752f
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d9ed      	bls.n	8006880 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80068a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	@ 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20002648 	.word	0x20002648

080068b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	@ 0x28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80068ca:	f247 5030 	movw	r0, #30000	@ 0x7530
 80068ce:	f7ff ff0d 	bl	80066ec <SD_CheckStatusWithTimeout>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	da02      	bge.n	80068de <SD_write+0x2a>
  {
    return res;
 80068d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068dc:	e02e      	b.n	800693c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	68b8      	ldr	r0, [r7, #8]
 80068e4:	f7ff fe7c 	bl	80065e0 <BSP_SD_WriteBlocks_DMA>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d124      	bne.n	8006938 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80068ee:	4b15      	ldr	r3, [pc, #84]	@ (8006944 <SD_write+0x90>)
 80068f0:	6819      	ldr	r1, [r3, #0]
 80068f2:	f107 0314 	add.w	r3, r7, #20
 80068f6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80068fa:	4618      	mov	r0, r3
 80068fc:	f003 f97c 	bl	8009bf8 <osMessageGet>

    if (event.status == osEventMessage)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b10      	cmp	r3, #16
 8006904:	d118      	bne.n	8006938 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d115      	bne.n	8006938 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800690c:	f002 ffd2 	bl	80098b4 <osKernelSysTick>
 8006910:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006912:	e008      	b.n	8006926 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006914:	f7ff fe7e 	bl	8006614 <BSP_SD_GetCardState>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d103      	bne.n	8006926 <SD_write+0x72>
          {
            res = RES_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8006924:	e008      	b.n	8006938 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006926:	f002 ffc5 	bl	80098b4 <osKernelSysTick>
 800692a:	4602      	mov	r2, r0
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006934:	4293      	cmp	r3, r2
 8006936:	d9ed      	bls.n	8006914 <SD_write+0x60>
    }

  }
#endif

  return res;
 8006938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800693c:	4618      	mov	r0, r3
 800693e:	3728      	adds	r7, #40	@ 0x28
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20002648 	.word	0x20002648

08006948 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	@ 0x30
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	603a      	str	r2, [r7, #0]
 8006952:	71fb      	strb	r3, [r7, #7]
 8006954:	460b      	mov	r3, r1
 8006956:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800695e:	4b25      	ldr	r3, [pc, #148]	@ (80069f4 <SD_ioctl+0xac>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <SD_ioctl+0x28>
 800696c:	2303      	movs	r3, #3
 800696e:	e03c      	b.n	80069ea <SD_ioctl+0xa2>

  switch (cmd)
 8006970:	79bb      	ldrb	r3, [r7, #6]
 8006972:	2b03      	cmp	r3, #3
 8006974:	d834      	bhi.n	80069e0 <SD_ioctl+0x98>
 8006976:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <SD_ioctl+0x34>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	0800698d 	.word	0x0800698d
 8006980:	08006995 	.word	0x08006995
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069c7 	.word	0x080069c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006992:	e028      	b.n	80069e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006994:	f107 030c 	add.w	r3, r7, #12
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fe4b 	bl	8006634 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800699e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80069aa:	e01c      	b.n	80069e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069ac:	f107 030c 	add.w	r3, r7, #12
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff fe3f 	bl	8006634 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80069c4:	e00f      	b.n	80069e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069c6:	f107 030c 	add.w	r3, r7, #12
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fe32 	bl	8006634 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	0a5a      	lsrs	r2, r3, #9
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80069de:	e002      	b.n	80069e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80069e0:	2304      	movs	r3, #4
 80069e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80069e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3730      	adds	r7, #48	@ 0x30
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000009 	.word	0x20000009

080069f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80069fc:	4b04      	ldr	r3, [pc, #16]	@ (8006a10 <BSP_SD_WriteCpltCallback+0x18>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2102      	movs	r1, #2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f003 f8b7 	bl	8009b78 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20002648 	.word	0x20002648

08006a14 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8006a18:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <BSP_SD_ReadCpltCallback+0x18>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2101      	movs	r1, #1
 8006a20:	4618      	mov	r0, r3
 8006a22:	f003 f8a9 	bl	8009b78 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8006a26:	bf00      	nop
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20002648 	.word	0x20002648

08006a30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	4a08      	ldr	r2, [pc, #32]	@ (8006a60 <disk_status+0x30>)
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	79fa      	ldrb	r2, [r7, #7]
 8006a48:	4905      	ldr	r1, [pc, #20]	@ (8006a60 <disk_status+0x30>)
 8006a4a:	440a      	add	r2, r1
 8006a4c:	7a12      	ldrb	r2, [r2, #8]
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4798      	blx	r3
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20002674 	.word	0x20002674

08006a64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	4a0d      	ldr	r2, [pc, #52]	@ (8006aac <disk_initialize+0x48>)
 8006a76:	5cd3      	ldrb	r3, [r2, r3]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d111      	bne.n	8006aa0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8006aac <disk_initialize+0x48>)
 8006a80:	2101      	movs	r1, #1
 8006a82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	4a09      	ldr	r2, [pc, #36]	@ (8006aac <disk_initialize+0x48>)
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	79fa      	ldrb	r2, [r7, #7]
 8006a92:	4906      	ldr	r1, [pc, #24]	@ (8006aac <disk_initialize+0x48>)
 8006a94:	440a      	add	r2, r1
 8006a96:	7a12      	ldrb	r2, [r2, #8]
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20002674 	.word	0x20002674

08006ab0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8006aec <disk_read+0x3c>)
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	689c      	ldr	r4, [r3, #8]
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	4a07      	ldr	r2, [pc, #28]	@ (8006aec <disk_read+0x3c>)
 8006ad0:	4413      	add	r3, r2
 8006ad2:	7a18      	ldrb	r0, [r3, #8]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	47a0      	blx	r4
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd90      	pop	{r4, r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20002674 	.word	0x20002674

08006af0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006af0:	b590      	push	{r4, r7, lr}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <disk_write+0x3c>)
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68dc      	ldr	r4, [r3, #12]
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	4a07      	ldr	r2, [pc, #28]	@ (8006b2c <disk_write+0x3c>)
 8006b10:	4413      	add	r3, r2
 8006b12:	7a18      	ldrb	r0, [r3, #8]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	47a0      	blx	r4
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd90      	pop	{r4, r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20002674 	.word	0x20002674

08006b30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	603a      	str	r2, [r7, #0]
 8006b3a:	71fb      	strb	r3, [r7, #7]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	4a09      	ldr	r2, [pc, #36]	@ (8006b68 <disk_ioctl+0x38>)
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	79fa      	ldrb	r2, [r7, #7]
 8006b4e:	4906      	ldr	r1, [pc, #24]	@ (8006b68 <disk_ioctl+0x38>)
 8006b50:	440a      	add	r2, r1
 8006b52:	7a10      	ldrb	r0, [r2, #8]
 8006b54:	79b9      	ldrb	r1, [r7, #6]
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	4798      	blx	r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20002674 	.word	0x20002674

08006b6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3301      	adds	r3, #1
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006b7c:	89fb      	ldrh	r3, [r7, #14]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	b21a      	sxth	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b21b      	sxth	r3, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	b21b      	sxth	r3, r3
 8006b8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006b8e:	89fb      	ldrh	r3, [r7, #14]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3303      	adds	r3, #3
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	021b      	lsls	r3, r3, #8
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	3202      	adds	r2, #2
 8006bb4:	7812      	ldrb	r2, [r2, #0]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	3201      	adds	r2, #1
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	7812      	ldrb	r2, [r2, #0]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
	return rv;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	887a      	ldrh	r2, [r7, #2]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	887b      	ldrh	r3, [r7, #2]
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	887a      	ldrh	r2, [r7, #2]
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	1c53      	adds	r3, r2, #1
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	1c59      	adds	r1, r3, #1
 8006c94:	6179      	str	r1, [r7, #20]
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f1      	bne.n	8006c8a <mem_cpy+0x1a>
	}
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006cb2:	b480      	push	{r7}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	617a      	str	r2, [r7, #20]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f3      	bne.n	8006cc2 <mem_set+0x10>
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ce8:	b480      	push	{r7}
 8006cea:	b089      	sub	sp, #36	@ 0x24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	61fa      	str	r2, [r7, #28]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	61ba      	str	r2, [r7, #24]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	1acb      	subs	r3, r1, r3
 8006d14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	607b      	str	r3, [r7, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <mem_cmp+0x40>
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0eb      	beq.n	8006d00 <mem_cmp+0x18>

	return r;
 8006d28:	697b      	ldr	r3, [r7, #20]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3724      	adds	r7, #36	@ 0x24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006d40:	e002      	b.n	8006d48 <chk_chr+0x12>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3301      	adds	r3, #1
 8006d46:	607b      	str	r3, [r7, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <chk_chr+0x26>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d1f2      	bne.n	8006d42 <chk_chr+0xc>
	return *str;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <lock_fs+0x22>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f002 fd3b 	bl	80097fa <ff_req_grant>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <lock_fs+0x22>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <lock_fs+0x24>
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00d      	beq.n	8006dc6 <unlock_fs+0x2e>
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	2b0c      	cmp	r3, #12
 8006dae:	d00a      	beq.n	8006dc6 <unlock_fs+0x2e>
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	2b0b      	cmp	r3, #11
 8006db4:	d007      	beq.n	8006dc6 <unlock_fs+0x2e>
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	2b0f      	cmp	r3, #15
 8006dba:	d004      	beq.n	8006dc6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f002 fd2f 	bl	8009824 <ff_rel_grant>
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60bb      	str	r3, [r7, #8]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e029      	b.n	8006e38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006de4:	4a27      	ldr	r2, [pc, #156]	@ (8006e84 <chk_lock+0xb4>)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	4413      	add	r3, r2
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01d      	beq.n	8006e2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006df2:	4a24      	ldr	r2, [pc, #144]	@ (8006e84 <chk_lock+0xb4>)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	4413      	add	r3, r2
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d116      	bne.n	8006e32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006e04:	4a1f      	ldr	r2, [pc, #124]	@ (8006e84 <chk_lock+0xb4>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d10c      	bne.n	8006e32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e18:	4a1a      	ldr	r2, [pc, #104]	@ (8006e84 <chk_lock+0xb4>)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	4413      	add	r3, r2
 8006e20:	3308      	adds	r3, #8
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d102      	bne.n	8006e32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e2c:	e007      	b.n	8006e3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d9d2      	bls.n	8006de4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d109      	bne.n	8006e58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <chk_lock+0x80>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d101      	bne.n	8006e54 <chk_lock+0x84>
 8006e50:	2300      	movs	r3, #0
 8006e52:	e010      	b.n	8006e76 <chk_lock+0xa6>
 8006e54:	2312      	movs	r3, #18
 8006e56:	e00e      	b.n	8006e76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d108      	bne.n	8006e70 <chk_lock+0xa0>
 8006e5e:	4a09      	ldr	r2, [pc, #36]	@ (8006e84 <chk_lock+0xb4>)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	4413      	add	r3, r2
 8006e66:	330c      	adds	r3, #12
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e6e:	d101      	bne.n	8006e74 <chk_lock+0xa4>
 8006e70:	2310      	movs	r3, #16
 8006e72:	e000      	b.n	8006e76 <chk_lock+0xa6>
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20002654 	.word	0x20002654

08006e88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	e002      	b.n	8006e9a <enq_lock+0x12>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3301      	adds	r3, #1
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d806      	bhi.n	8006eae <enq_lock+0x26>
 8006ea0:	4a09      	ldr	r2, [pc, #36]	@ (8006ec8 <enq_lock+0x40>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	4413      	add	r3, r2
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f2      	bne.n	8006e94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20002654 	.word	0x20002654

08006ecc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e01f      	b.n	8006f1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006edc:	4a41      	ldr	r2, [pc, #260]	@ (8006fe4 <inc_lock+0x118>)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	4413      	add	r3, r2
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d113      	bne.n	8006f16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006eee:	4a3d      	ldr	r2, [pc, #244]	@ (8006fe4 <inc_lock+0x118>)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d109      	bne.n	8006f16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006f02:	4a38      	ldr	r2, [pc, #224]	@ (8006fe4 <inc_lock+0x118>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	4413      	add	r3, r2
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d006      	beq.n	8006f24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d9dc      	bls.n	8006edc <inc_lock+0x10>
 8006f22:	e000      	b.n	8006f26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d132      	bne.n	8006f92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e002      	b.n	8006f38 <inc_lock+0x6c>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d806      	bhi.n	8006f4c <inc_lock+0x80>
 8006f3e:	4a29      	ldr	r2, [pc, #164]	@ (8006fe4 <inc_lock+0x118>)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	4413      	add	r3, r2
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f2      	bne.n	8006f32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d101      	bne.n	8006f56 <inc_lock+0x8a>
 8006f52:	2300      	movs	r3, #0
 8006f54:	e040      	b.n	8006fd8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4922      	ldr	r1, [pc, #136]	@ (8006fe4 <inc_lock+0x118>)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	440b      	add	r3, r1
 8006f62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	491e      	ldr	r1, [pc, #120]	@ (8006fe4 <inc_lock+0x118>)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	440b      	add	r3, r1
 8006f70:	3304      	adds	r3, #4
 8006f72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	491a      	ldr	r1, [pc, #104]	@ (8006fe4 <inc_lock+0x118>)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	440b      	add	r3, r1
 8006f80:	3308      	adds	r3, #8
 8006f82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006f84:	4a17      	ldr	r2, [pc, #92]	@ (8006fe4 <inc_lock+0x118>)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	4413      	add	r3, r2
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	2200      	movs	r2, #0
 8006f90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <inc_lock+0xe0>
 8006f98:	4a12      	ldr	r2, [pc, #72]	@ (8006fe4 <inc_lock+0x118>)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	4413      	add	r3, r2
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <inc_lock+0xe0>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e015      	b.n	8006fd8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d108      	bne.n	8006fc4 <inc_lock+0xf8>
 8006fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8006fe4 <inc_lock+0x118>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	4413      	add	r3, r2
 8006fba:	330c      	adds	r3, #12
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	e001      	b.n	8006fc8 <inc_lock+0xfc>
 8006fc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fc8:	4906      	ldr	r1, [pc, #24]	@ (8006fe4 <inc_lock+0x118>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	440b      	add	r3, r1
 8006fd0:	330c      	adds	r3, #12
 8006fd2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20002654 	.word	0x20002654

08006fe8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	607b      	str	r3, [r7, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d825      	bhi.n	8007048 <dec_lock+0x60>
		n = Files[i].ctr;
 8006ffc:	4a17      	ldr	r2, [pc, #92]	@ (800705c <dec_lock+0x74>)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	4413      	add	r3, r2
 8007004:	330c      	adds	r3, #12
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800700a:	89fb      	ldrh	r3, [r7, #14]
 800700c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007010:	d101      	bne.n	8007016 <dec_lock+0x2e>
 8007012:	2300      	movs	r3, #0
 8007014:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007016:	89fb      	ldrh	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <dec_lock+0x3a>
 800701c:	89fb      	ldrh	r3, [r7, #14]
 800701e:	3b01      	subs	r3, #1
 8007020:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007022:	4a0e      	ldr	r2, [pc, #56]	@ (800705c <dec_lock+0x74>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	4413      	add	r3, r2
 800702a:	330c      	adds	r3, #12
 800702c:	89fa      	ldrh	r2, [r7, #14]
 800702e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007030:	89fb      	ldrh	r3, [r7, #14]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <dec_lock+0x5a>
 8007036:	4a09      	ldr	r2, [pc, #36]	@ (800705c <dec_lock+0x74>)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	4413      	add	r3, r2
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	737b      	strb	r3, [r7, #13]
 8007046:	e001      	b.n	800704c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007048:	2302      	movs	r3, #2
 800704a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800704c:	7b7b      	ldrb	r3, [r7, #13]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20002654 	.word	0x20002654

08007060 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	e010      	b.n	8007090 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800706e:	4a0d      	ldr	r2, [pc, #52]	@ (80070a4 <clear_lock+0x44>)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	4413      	add	r3, r2
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	429a      	cmp	r2, r3
 800707c:	d105      	bne.n	800708a <clear_lock+0x2a>
 800707e:	4a09      	ldr	r2, [pc, #36]	@ (80070a4 <clear_lock+0x44>)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	4413      	add	r3, r2
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3301      	adds	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d9eb      	bls.n	800706e <clear_lock+0xe>
	}
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	20002654 	.word	0x20002654

080070a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	78db      	ldrb	r3, [r3, #3]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d034      	beq.n	8007126 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7858      	ldrb	r0, [r3, #1]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80070cc:	2301      	movs	r3, #1
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	f7ff fd0e 	bl	8006af0 <disk_write>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80070da:	2301      	movs	r3, #1
 80070dc:	73fb      	strb	r3, [r7, #15]
 80070de:	e022      	b.n	8007126 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	1ad2      	subs	r2, r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d217      	bcs.n	8007126 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	789b      	ldrb	r3, [r3, #2]
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	e010      	b.n	8007120 <sync_window+0x78>
					wsect += fs->fsize;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4413      	add	r3, r2
 8007106:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	7858      	ldrb	r0, [r3, #1]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007112:	2301      	movs	r3, #1
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	f7ff fceb 	bl	8006af0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	3b01      	subs	r3, #1
 800711e:	613b      	str	r3, [r7, #16]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d8eb      	bhi.n	80070fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d01b      	beq.n	8007180 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff ffad 	bl	80070a8 <sync_window>
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d113      	bne.n	8007180 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7858      	ldrb	r0, [r3, #1]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007162:	2301      	movs	r3, #1
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	f7ff fca3 	bl	8006ab0 <disk_read>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007170:	f04f 33ff 	mov.w	r3, #4294967295
 8007174:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007176:	2301      	movs	r3, #1
 8007178:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff ff87 	bl	80070a8 <sync_window>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d159      	bne.n	8007258 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d149      	bne.n	8007240 <sync_fs+0xb4>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	791b      	ldrb	r3, [r3, #4]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d145      	bne.n	8007240 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	899b      	ldrh	r3, [r3, #12]
 80071be:	461a      	mov	r2, r3
 80071c0:	2100      	movs	r1, #0
 80071c2:	f7ff fd76 	bl	8006cb2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3338      	adds	r3, #56	@ 0x38
 80071ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80071ce:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fd05 	bl	8006be2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3338      	adds	r3, #56	@ 0x38
 80071dc:	4921      	ldr	r1, [pc, #132]	@ (8007264 <sync_fs+0xd8>)
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fd1a 	bl	8006c18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3338      	adds	r3, #56	@ 0x38
 80071e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80071ec:	491e      	ldr	r1, [pc, #120]	@ (8007268 <sync_fs+0xdc>)
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fd12 	bl	8006c18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3338      	adds	r3, #56	@ 0x38
 80071f8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f7ff fd08 	bl	8006c18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3338      	adds	r3, #56	@ 0x38
 800720c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	4619      	mov	r1, r3
 8007216:	4610      	mov	r0, r2
 8007218:	f7ff fcfe 	bl	8006c18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	7858      	ldrb	r0, [r3, #1]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007234:	2301      	movs	r3, #1
 8007236:	f7ff fc5b 	bl	8006af0 <disk_write>
			fs->fsi_flag = 0;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2200      	movs	r2, #0
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fc71 	bl	8006b30 <disk_ioctl>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <sync_fs+0xcc>
 8007254:	2301      	movs	r3, #1
 8007256:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	41615252 	.word	0x41615252
 8007268:	61417272 	.word	0x61417272

0800726c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	3b02      	subs	r3, #2
 800727a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	3b02      	subs	r3, #2
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d301      	bcc.n	800728c <clust2sect+0x20>
 8007288:	2300      	movs	r3, #0
 800728a:	e008      	b.n	800729e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	895b      	ldrh	r3, [r3, #10]
 8007290:	461a      	mov	r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	fb03 f202 	mul.w	r2, r3, r2
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729c:	4413      	add	r3, r2
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b086      	sub	sp, #24
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d904      	bls.n	80072ca <get_fat+0x20>
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d302      	bcc.n	80072d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80072ca:	2301      	movs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e0ba      	b.n	8007446 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295
 80072d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	f000 8082 	beq.w	80073e4 <get_fat+0x13a>
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	f300 80a6 	bgt.w	8007432 <get_fat+0x188>
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d002      	beq.n	80072f0 <get_fat+0x46>
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d055      	beq.n	800739a <get_fat+0xf0>
 80072ee:	e0a0      	b.n	8007432 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	899b      	ldrh	r3, [r3, #12]
 8007306:	4619      	mov	r1, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	fbb3 f3f1 	udiv	r3, r3, r1
 800730e:	4413      	add	r3, r2
 8007310:	4619      	mov	r1, r3
 8007312:	6938      	ldr	r0, [r7, #16]
 8007314:	f7ff ff0c 	bl	8007130 <move_window>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 808c 	bne.w	8007438 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	60fa      	str	r2, [r7, #12]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	8992      	ldrh	r2, [r2, #12]
 800732a:	fbb3 f1f2 	udiv	r1, r3, r2
 800732e:	fb01 f202 	mul.w	r2, r1, r2
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800733c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	899b      	ldrh	r3, [r3, #12]
 8007346:	4619      	mov	r1, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	fbb3 f3f1 	udiv	r3, r3, r1
 800734e:	4413      	add	r3, r2
 8007350:	4619      	mov	r1, r3
 8007352:	6938      	ldr	r0, [r7, #16]
 8007354:	f7ff feec 	bl	8007130 <move_window>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d16e      	bne.n	800743c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	899b      	ldrh	r3, [r3, #12]
 8007362:	461a      	mov	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	fbb3 f1f2 	udiv	r1, r3, r2
 800736a:	fb01 f202 	mul.w	r2, r1, r2
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4313      	orrs	r3, r2
 800737e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <get_fat+0xe6>
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	091b      	lsrs	r3, r3, #4
 800738e:	e002      	b.n	8007396 <get_fat+0xec>
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007396:	617b      	str	r3, [r7, #20]
			break;
 8007398:	e055      	b.n	8007446 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	899b      	ldrh	r3, [r3, #12]
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	4619      	mov	r1, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80073ae:	4413      	add	r3, r2
 80073b0:	4619      	mov	r1, r3
 80073b2:	6938      	ldr	r0, [r7, #16]
 80073b4:	f7ff febc 	bl	8007130 <move_window>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d140      	bne.n	8007440 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	8992      	ldrh	r2, [r2, #12]
 80073cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80073d0:	fb00 f202 	mul.w	r2, r0, r2
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	440b      	add	r3, r1
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fbc7 	bl	8006b6c <ld_word>
 80073de:	4603      	mov	r3, r0
 80073e0:	617b      	str	r3, [r7, #20]
			break;
 80073e2:	e030      	b.n	8007446 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	899b      	ldrh	r3, [r3, #12]
 80073ec:	089b      	lsrs	r3, r3, #2
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80073f8:	4413      	add	r3, r2
 80073fa:	4619      	mov	r1, r3
 80073fc:	6938      	ldr	r0, [r7, #16]
 80073fe:	f7ff fe97 	bl	8007130 <move_window>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11d      	bne.n	8007444 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	8992      	ldrh	r2, [r2, #12]
 8007416:	fbb3 f0f2 	udiv	r0, r3, r2
 800741a:	fb00 f202 	mul.w	r2, r0, r2
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	440b      	add	r3, r1
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fbba 	bl	8006b9c <ld_dword>
 8007428:	4603      	mov	r3, r0
 800742a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800742e:	617b      	str	r3, [r7, #20]
			break;
 8007430:	e009      	b.n	8007446 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007432:	2301      	movs	r3, #1
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	e006      	b.n	8007446 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007438:	bf00      	nop
 800743a:	e004      	b.n	8007446 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800743c:	bf00      	nop
 800743e:	e002      	b.n	8007446 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007440:	bf00      	nop
 8007442:	e000      	b.n	8007446 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007444:	bf00      	nop
		}
	}

	return val;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007450:	b590      	push	{r4, r7, lr}
 8007452:	b089      	sub	sp, #36	@ 0x24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800745c:	2302      	movs	r3, #2
 800745e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b01      	cmp	r3, #1
 8007464:	f240 8109 	bls.w	800767a <put_fat+0x22a>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	429a      	cmp	r2, r3
 8007470:	f080 8103 	bcs.w	800767a <put_fat+0x22a>
		switch (fs->fs_type) {
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b03      	cmp	r3, #3
 800747a:	f000 80b6 	beq.w	80075ea <put_fat+0x19a>
 800747e:	2b03      	cmp	r3, #3
 8007480:	f300 80fb 	bgt.w	800767a <put_fat+0x22a>
 8007484:	2b01      	cmp	r3, #1
 8007486:	d003      	beq.n	8007490 <put_fat+0x40>
 8007488:	2b02      	cmp	r3, #2
 800748a:	f000 8083 	beq.w	8007594 <put_fat+0x144>
 800748e:	e0f4      	b.n	800767a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4413      	add	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	899b      	ldrh	r3, [r3, #12]
 80074a6:	4619      	mov	r1, r3
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80074ae:	4413      	add	r3, r2
 80074b0:	4619      	mov	r1, r3
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fe3c 	bl	8007130 <move_window>
 80074b8:	4603      	mov	r3, r0
 80074ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074bc:	7ffb      	ldrb	r3, [r7, #31]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f040 80d4 	bne.w	800766c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	61ba      	str	r2, [r7, #24]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	8992      	ldrh	r2, [r2, #12]
 80074d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80074d8:	fb00 f202 	mul.w	r2, r0, r2
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	440b      	add	r3, r1
 80074e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00d      	beq.n	8007508 <put_fat+0xb8>
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	b25b      	sxtb	r3, r3
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	b25a      	sxtb	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	b25b      	sxtb	r3, r3
 8007500:	4313      	orrs	r3, r2
 8007502:	b25b      	sxtb	r3, r3
 8007504:	b2db      	uxtb	r3, r3
 8007506:	e001      	b.n	800750c <put_fat+0xbc>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	899b      	ldrh	r3, [r3, #12]
 800751e:	4619      	mov	r1, r3
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	fbb3 f3f1 	udiv	r3, r3, r1
 8007526:	4413      	add	r3, r2
 8007528:	4619      	mov	r1, r3
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7ff fe00 	bl	8007130 <move_window>
 8007530:	4603      	mov	r3, r0
 8007532:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007534:	7ffb      	ldrb	r3, [r7, #31]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 809a 	bne.w	8007670 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	899b      	ldrh	r3, [r3, #12]
 8007546:	461a      	mov	r2, r3
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	fbb3 f0f2 	udiv	r0, r3, r2
 800754e:	fb00 f202 	mul.w	r2, r0, r2
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	440b      	add	r3, r1
 8007556:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <put_fat+0x11a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	091b      	lsrs	r3, r3, #4
 8007566:	b2db      	uxtb	r3, r3
 8007568:	e00e      	b.n	8007588 <put_fat+0x138>
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b25b      	sxtb	r3, r3
 8007570:	f023 030f 	bic.w	r3, r3, #15
 8007574:	b25a      	sxtb	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	0a1b      	lsrs	r3, r3, #8
 800757a:	b25b      	sxtb	r3, r3
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	b25b      	sxtb	r3, r3
 8007582:	4313      	orrs	r3, r2
 8007584:	b25b      	sxtb	r3, r3
 8007586:	b2db      	uxtb	r3, r3
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	70da      	strb	r2, [r3, #3]
			break;
 8007592:	e072      	b.n	800767a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	899b      	ldrh	r3, [r3, #12]
 800759c:	085b      	lsrs	r3, r3, #1
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80075a8:	4413      	add	r3, r2
 80075aa:	4619      	mov	r1, r3
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7ff fdbf 	bl	8007130 <move_window>
 80075b2:	4603      	mov	r3, r0
 80075b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075b6:	7ffb      	ldrb	r3, [r7, #31]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d15b      	bne.n	8007674 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	8992      	ldrh	r2, [r2, #12]
 80075ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80075ce:	fb00 f202 	mul.w	r2, r0, r2
 80075d2:	1a9b      	subs	r3, r3, r2
 80075d4:	440b      	add	r3, r1
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	b292      	uxth	r2, r2
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fb00 	bl	8006be2 <st_word>
			fs->wflag = 1;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	70da      	strb	r2, [r3, #3]
			break;
 80075e8:	e047      	b.n	800767a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	899b      	ldrh	r3, [r3, #12]
 80075f2:	089b      	lsrs	r3, r3, #2
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	4619      	mov	r1, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80075fe:	4413      	add	r3, r2
 8007600:	4619      	mov	r1, r3
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff fd94 	bl	8007130 <move_window>
 8007608:	4603      	mov	r3, r0
 800760a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800760c:	7ffb      	ldrb	r3, [r7, #31]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d132      	bne.n	8007678 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	8992      	ldrh	r2, [r2, #12]
 8007626:	fbb3 f0f2 	udiv	r0, r3, r2
 800762a:	fb00 f202 	mul.w	r2, r0, r2
 800762e:	1a9b      	subs	r3, r3, r2
 8007630:	440b      	add	r3, r1
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff fab2 	bl	8006b9c <ld_dword>
 8007638:	4603      	mov	r3, r0
 800763a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800763e:	4323      	orrs	r3, r4
 8007640:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	8992      	ldrh	r2, [r2, #12]
 8007650:	fbb3 f0f2 	udiv	r0, r3, r2
 8007654:	fb00 f202 	mul.w	r2, r0, r2
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	440b      	add	r3, r1
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fada 	bl	8006c18 <st_dword>
			fs->wflag = 1;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	70da      	strb	r2, [r3, #3]
			break;
 800766a:	e006      	b.n	800767a <put_fat+0x22a>
			if (res != FR_OK) break;
 800766c:	bf00      	nop
 800766e:	e004      	b.n	800767a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007670:	bf00      	nop
 8007672:	e002      	b.n	800767a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007674:	bf00      	nop
 8007676:	e000      	b.n	800767a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007678:	bf00      	nop
		}
	}
	return res;
 800767a:	7ffb      	ldrb	r3, [r7, #31]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3724      	adds	r7, #36	@ 0x24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd90      	pop	{r4, r7, pc}

08007684 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d904      	bls.n	80076aa <remove_chain+0x26>
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d301      	bcc.n	80076ae <remove_chain+0x2a>
 80076aa:	2302      	movs	r3, #2
 80076ac:	e04b      	b.n	8007746 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00c      	beq.n	80076ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	69b8      	ldr	r0, [r7, #24]
 80076bc:	f7ff fec8 	bl	8007450 <put_fat>
 80076c0:	4603      	mov	r3, r0
 80076c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80076c4:	7ffb      	ldrb	r3, [r7, #31]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <remove_chain+0x4a>
 80076ca:	7ffb      	ldrb	r3, [r7, #31]
 80076cc:	e03b      	b.n	8007746 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f7ff fdea 	bl	80072aa <get_fat>
 80076d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d031      	beq.n	8007742 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <remove_chain+0x64>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e02e      	b.n	8007746 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d101      	bne.n	80076f4 <remove_chain+0x70>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e028      	b.n	8007746 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80076f4:	2200      	movs	r2, #0
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	69b8      	ldr	r0, [r7, #24]
 80076fa:	f7ff fea9 	bl	8007450 <put_fat>
 80076fe:	4603      	mov	r3, r0
 8007700:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007702:	7ffb      	ldrb	r3, [r7, #31]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <remove_chain+0x88>
 8007708:	7ffb      	ldrb	r3, [r7, #31]
 800770a:	e01c      	b.n	8007746 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	3b02      	subs	r3, #2
 8007716:	429a      	cmp	r2, r3
 8007718:	d20b      	bcs.n	8007732 <remove_chain+0xae>
			fs->free_clst++;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	791b      	ldrb	r3, [r3, #4]
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	b2da      	uxtb	r2, r3
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	429a      	cmp	r2, r3
 800773e:	d3c6      	bcc.n	80076ce <remove_chain+0x4a>
 8007740:	e000      	b.n	8007744 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007742:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3720      	adds	r7, #32
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b088      	sub	sp, #32
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10d      	bne.n	8007780 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <create_chain+0x2c>
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	429a      	cmp	r2, r3
 8007778:	d31b      	bcc.n	80077b2 <create_chain+0x64>
 800777a:	2301      	movs	r3, #1
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	e018      	b.n	80077b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff fd91 	bl	80072aa <get_fat>
 8007788:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d801      	bhi.n	8007794 <create_chain+0x46>
 8007790:	2301      	movs	r3, #1
 8007792:	e070      	b.n	8007876 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779a:	d101      	bne.n	80077a0 <create_chain+0x52>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e06a      	b.n	8007876 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d201      	bcs.n	80077ae <create_chain+0x60>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	e063      	b.n	8007876 <create_chain+0x128>
		scl = clst;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	3301      	adds	r3, #1
 80077ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d307      	bcc.n	80077d6 <create_chain+0x88>
				ncl = 2;
 80077c6:	2302      	movs	r3, #2
 80077c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d901      	bls.n	80077d6 <create_chain+0x88>
 80077d2:	2300      	movs	r3, #0
 80077d4:	e04f      	b.n	8007876 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80077d6:	69f9      	ldr	r1, [r7, #28]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fd66 	bl	80072aa <get_fat>
 80077de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00e      	beq.n	8007804 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d003      	beq.n	80077f4 <create_chain+0xa6>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f2:	d101      	bne.n	80077f8 <create_chain+0xaa>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	e03e      	b.n	8007876 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d1da      	bne.n	80077b6 <create_chain+0x68>
 8007800:	2300      	movs	r3, #0
 8007802:	e038      	b.n	8007876 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007804:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007806:	f04f 32ff 	mov.w	r2, #4294967295
 800780a:	69f9      	ldr	r1, [r7, #28]
 800780c:	6938      	ldr	r0, [r7, #16]
 800780e:	f7ff fe1f 	bl	8007450 <put_fat>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <create_chain+0xe2>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d006      	beq.n	8007830 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6938      	ldr	r0, [r7, #16]
 8007828:	f7ff fe12 	bl	8007450 <put_fat>
 800782c:	4603      	mov	r3, r0
 800782e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d116      	bne.n	8007864 <create_chain+0x116>
		fs->last_clst = ncl;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	699a      	ldr	r2, [r3, #24]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	3b02      	subs	r3, #2
 8007846:	429a      	cmp	r2, r3
 8007848:	d804      	bhi.n	8007854 <create_chain+0x106>
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	1e5a      	subs	r2, r3, #1
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	791b      	ldrb	r3, [r3, #4]
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	b2da      	uxtb	r2, r3
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	711a      	strb	r2, [r3, #4]
 8007862:	e007      	b.n	8007874 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d102      	bne.n	8007870 <create_chain+0x122>
 800786a:	f04f 33ff 	mov.w	r3, #4294967295
 800786e:	e000      	b.n	8007872 <create_chain+0x124>
 8007870:	2301      	movs	r3, #1
 8007872:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007874:	69fb      	ldr	r3, [r7, #28]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800787e:	b480      	push	{r7}
 8007880:	b087      	sub	sp, #28
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	3304      	adds	r3, #4
 8007894:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	899b      	ldrh	r3, [r3, #12]
 800789a:	461a      	mov	r2, r3
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	8952      	ldrh	r2, [r2, #10]
 80078a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	613a      	str	r2, [r7, #16]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <clmt_clust+0x42>
 80078bc:	2300      	movs	r3, #0
 80078be:	e010      	b.n	80078e2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d307      	bcc.n	80078d8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	617b      	str	r3, [r7, #20]
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	3304      	adds	r3, #4
 80078d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078d6:	e7e9      	b.n	80078ac <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80078d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	4413      	add	r3, r2
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b086      	sub	sp, #24
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007904:	d204      	bcs.n	8007910 <dir_sdi+0x22>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007910:	2302      	movs	r3, #2
 8007912:	e071      	b.n	80079f8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <dir_sdi+0x46>
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b02      	cmp	r3, #2
 800792c:	d902      	bls.n	8007934 <dir_sdi+0x46>
		clst = fs->dirbase;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007932:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10c      	bne.n	8007954 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	8912      	ldrh	r2, [r2, #8]
 8007942:	4293      	cmp	r3, r2
 8007944:	d301      	bcc.n	800794a <dir_sdi+0x5c>
 8007946:	2302      	movs	r3, #2
 8007948:	e056      	b.n	80079f8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	61da      	str	r2, [r3, #28]
 8007952:	e02d      	b.n	80079b0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	895b      	ldrh	r3, [r3, #10]
 8007958:	461a      	mov	r2, r3
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	899b      	ldrh	r3, [r3, #12]
 800795e:	fb02 f303 	mul.w	r3, r2, r3
 8007962:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007964:	e019      	b.n	800799a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6979      	ldr	r1, [r7, #20]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fc9d 	bl	80072aa <get_fat>
 8007970:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007978:	d101      	bne.n	800797e <dir_sdi+0x90>
 800797a:	2301      	movs	r3, #1
 800797c:	e03c      	b.n	80079f8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d904      	bls.n	800798e <dir_sdi+0xa0>
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	429a      	cmp	r2, r3
 800798c:	d301      	bcc.n	8007992 <dir_sdi+0xa4>
 800798e:	2302      	movs	r3, #2
 8007990:	e032      	b.n	80079f8 <dir_sdi+0x10a>
			ofs -= csz;
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d2e1      	bcs.n	8007966 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80079a2:	6979      	ldr	r1, [r7, #20]
 80079a4:	6938      	ldr	r0, [r7, #16]
 80079a6:	f7ff fc61 	bl	800726c <clust2sect>
 80079aa:	4602      	mov	r2, r0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <dir_sdi+0xd4>
 80079be:	2302      	movs	r3, #2
 80079c0:	e01a      	b.n	80079f8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	899b      	ldrh	r3, [r3, #12]
 80079ca:	4619      	mov	r1, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80079d2:	441a      	add	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	899b      	ldrh	r3, [r3, #12]
 80079e2:	461a      	mov	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80079ea:	fb00 f202 	mul.w	r2, r0, r2
 80079ee:	1a9b      	subs	r3, r3, r2
 80079f0:	18ca      	adds	r2, r1, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	3320      	adds	r3, #32
 8007a16:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <dir_next+0x28>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a26:	d301      	bcc.n	8007a2c <dir_next+0x2c>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	e0bb      	b.n	8007ba4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	899b      	ldrh	r3, [r3, #12]
 8007a30:	461a      	mov	r2, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a38:	fb01 f202 	mul.w	r2, r1, r2
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 809d 	bne.w	8007b7e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10b      	bne.n	8007a6e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	8912      	ldrh	r2, [r2, #8]
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	f0c0 808d 	bcc.w	8007b7e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	61da      	str	r2, [r3, #28]
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	e09a      	b.n	8007ba4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	899b      	ldrh	r3, [r3, #12]
 8007a72:	461a      	mov	r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	8952      	ldrh	r2, [r2, #10]
 8007a7e:	3a01      	subs	r2, #1
 8007a80:	4013      	ands	r3, r2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d17b      	bne.n	8007b7e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	f7ff fc0b 	bl	80072aa <get_fat>
 8007a94:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d801      	bhi.n	8007aa0 <dir_next+0xa0>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e081      	b.n	8007ba4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d101      	bne.n	8007aac <dir_next+0xac>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e07b      	b.n	8007ba4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d359      	bcc.n	8007b6a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	61da      	str	r2, [r3, #28]
 8007ac2:	2304      	movs	r3, #4
 8007ac4:	e06e      	b.n	8007ba4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7ff fe3d 	bl	800774e <create_chain>
 8007ad4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <dir_next+0xe0>
 8007adc:	2307      	movs	r3, #7
 8007ade:	e061      	b.n	8007ba4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <dir_next+0xea>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e05c      	b.n	8007ba4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af0:	d101      	bne.n	8007af6 <dir_next+0xf6>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e056      	b.n	8007ba4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7ff fad6 	bl	80070a8 <sync_window>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <dir_next+0x106>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e04e      	b.n	8007ba4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	899b      	ldrh	r3, [r3, #12]
 8007b10:	461a      	mov	r2, r3
 8007b12:	2100      	movs	r1, #0
 8007b14:	f7ff f8cd 	bl	8006cb2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b18:	2300      	movs	r3, #0
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	6979      	ldr	r1, [r7, #20]
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7ff fba4 	bl	800726c <clust2sect>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b2a:	e012      	b.n	8007b52 <dir_next+0x152>
						fs->wflag = 1;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fab8 	bl	80070a8 <sync_window>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <dir_next+0x142>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e030      	b.n	8007ba4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	3301      	adds	r3, #1
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	895b      	ldrh	r3, [r3, #10]
 8007b56:	461a      	mov	r2, r3
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d3e6      	bcc.n	8007b2c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad2      	subs	r2, r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b70:	6979      	ldr	r1, [r7, #20]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f7ff fb7a 	bl	800726c <clust2sect>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	899b      	ldrh	r3, [r3, #12]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b96:	fb00 f202 	mul.w	r2, r0, r2
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	18ca      	adds	r2, r1, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fe95 	bl	80078ee <dir_sdi>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d12b      	bne.n	8007c26 <dir_alloc+0x7a>
		n = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff faa9 	bl	8007130 <move_window>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11d      	bne.n	8007c24 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2be5      	cmp	r3, #229	@ 0xe5
 8007bf0:	d004      	beq.n	8007bfc <dir_alloc+0x50>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d107      	bne.n	8007c0c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d102      	bne.n	8007c10 <dir_alloc+0x64>
 8007c0a:	e00c      	b.n	8007c26 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c10:	2101      	movs	r1, #1
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fef4 	bl	8007a00 <dir_next>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0d7      	beq.n	8007bd2 <dir_alloc+0x26>
 8007c22:	e000      	b.n	8007c26 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c24:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d101      	bne.n	8007c30 <dir_alloc+0x84>
 8007c2c:	2307      	movs	r3, #7
 8007c2e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	331a      	adds	r3, #26
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe ff8f 	bl	8006b6c <ld_word>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d109      	bne.n	8007c6e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	3314      	adds	r3, #20
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe ff84 	bl	8006b6c <ld_word>
 8007c64:	4603      	mov	r3, r0
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	331a      	adds	r3, #26
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	b292      	uxth	r2, r2
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe ffa7 	bl	8006be2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d109      	bne.n	8007cb0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f103 0214 	add.w	r2, r3, #20
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f7fe ff99 	bl	8006be2 <st_word>
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007cc2:	2304      	movs	r3, #4
 8007cc4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007ccc:	e03c      	b.n	8007d48 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6938      	ldr	r0, [r7, #16]
 8007cd6:	f7ff fa2b 	bl	8007130 <move_window>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d136      	bne.n	8007d52 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	75fb      	strb	r3, [r7, #23]
 8007cf6:	e031      	b.n	8007d5c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	330b      	adds	r3, #11
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d04:	73bb      	strb	r3, [r7, #14]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7bba      	ldrb	r2, [r7, #14]
 8007d0a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2be5      	cmp	r3, #229	@ 0xe5
 8007d10:	d011      	beq.n	8007d36 <dir_read+0x7e>
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d16:	d00e      	beq.n	8007d36 <dir_read+0x7e>
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d00b      	beq.n	8007d36 <dir_read+0x7e>
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	f023 0320 	bic.w	r3, r3, #32
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00f      	beq.n	8007d56 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007d36:	2100      	movs	r1, #0
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff fe61 	bl	8007a00 <dir_next>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d108      	bne.n	8007d5a <dir_read+0xa2>
	while (dp->sect) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1be      	bne.n	8007cce <dir_read+0x16>
 8007d50:	e004      	b.n	8007d5c <dir_read+0xa4>
		if (res != FR_OK) break;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <dir_read+0xa4>
				break;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <dir_read+0xa4>
		if (res != FR_OK) break;
 8007d5a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <dir_read+0xb0>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	61da      	str	r2, [r3, #28]
	return res;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d80:	2100      	movs	r1, #0
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff fdb3 	bl	80078ee <dir_sdi>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <dir_find+0x24>
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	e03e      	b.n	8007e14 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6938      	ldr	r0, [r7, #16]
 8007d9e:	f7ff f9c7 	bl	8007130 <move_window>
 8007da2:	4603      	mov	r3, r0
 8007da4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d12f      	bne.n	8007e0c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <dir_find+0x4e>
 8007dba:	2304      	movs	r3, #4
 8007dbc:	75fb      	strb	r3, [r7, #23]
 8007dbe:	e028      	b.n	8007e12 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	330b      	adds	r3, #11
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	330b      	adds	r3, #11
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10a      	bne.n	8007df8 <dir_find+0x86>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a18      	ldr	r0, [r3, #32]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3324      	adds	r3, #36	@ 0x24
 8007dea:	220b      	movs	r2, #11
 8007dec:	4619      	mov	r1, r3
 8007dee:	f7fe ff7b 	bl	8006ce8 <mem_cmp>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff fe00 	bl	8007a00 <dir_next>
 8007e00:	4603      	mov	r3, r0
 8007e02:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0c5      	beq.n	8007d96 <dir_find+0x24>
 8007e0a:	e002      	b.n	8007e12 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007e0c:	bf00      	nop
 8007e0e:	e000      	b.n	8007e12 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e10:	bf00      	nop

	return res;
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff febd 	bl	8007bac <dir_alloc>
 8007e32:	4603      	mov	r3, r0
 8007e34:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d11c      	bne.n	8007e76 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	4619      	mov	r1, r3
 8007e42:	68b8      	ldr	r0, [r7, #8]
 8007e44:	f7ff f974 	bl	8007130 <move_window>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d111      	bne.n	8007e76 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	2220      	movs	r2, #32
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe ff29 	bl	8006cb2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a18      	ldr	r0, [r3, #32]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3324      	adds	r3, #36	@ 0x24
 8007e68:	220b      	movs	r2, #11
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f7fe ff00 	bl	8006c70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2201      	movs	r2, #1
 8007e74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	4619      	mov	r1, r3
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff f94b 	bl	8007130 <move_window>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8007e9e:	7afb      	ldrb	r3, [r7, #11]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	22e5      	movs	r2, #229	@ 0xe5
 8007eaa:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d04f      	beq.n	8007f74 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007edc:	e022      	b.n	8007f24 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1a      	ldr	r2, [r3, #32]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	1c59      	adds	r1, r3, #1
 8007ee6:	6179      	str	r1, [r7, #20]
 8007ee8:	4413      	add	r3, r2
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d016      	beq.n	8007f22 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d101      	bne.n	8007efe <get_fileinfo+0x42>
 8007efa:	23e5      	movs	r3, #229	@ 0xe5
 8007efc:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d106      	bne.n	8007f12 <get_fileinfo+0x56>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	613a      	str	r2, [r7, #16]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	222e      	movs	r2, #46	@ 0x2e
 8007f10:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	613a      	str	r2, [r7, #16]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	7bfa      	ldrb	r2, [r7, #15]
 8007f1e:	725a      	strb	r2, [r3, #9]
 8007f20:	e000      	b.n	8007f24 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8007f22:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b0a      	cmp	r3, #10
 8007f28:	d9d9      	bls.n	8007ede <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	4413      	add	r3, r2
 8007f30:	3309      	adds	r3, #9
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	7ada      	ldrb	r2, [r3, #11]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	331c      	adds	r3, #28
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe fe28 	bl	8006b9c <ld_dword>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	3316      	adds	r3, #22
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe fe1f 	bl	8006b9c <ld_dword>
 8007f5e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	80da      	strh	r2, [r3, #6]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	0c1b      	lsrs	r3, r3, #16
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	809a      	strh	r2, [r3, #4]
 8007f72:	e000      	b.n	8007f76 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007f74:	bf00      	nop
}
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3324      	adds	r3, #36	@ 0x24
 8007f90:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007f92:	220b      	movs	r2, #11
 8007f94:	2120      	movs	r1, #32
 8007f96:	68b8      	ldr	r0, [r7, #8]
 8007f98:	f7fe fe8b 	bl	8006cb2 <mem_set>
	si = i = 0; ni = 8;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	61fa      	str	r2, [r7, #28]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007fb6:	7efb      	ldrb	r3, [r7, #27]
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d94e      	bls.n	800805a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007fbc:	7efb      	ldrb	r3, [r7, #27]
 8007fbe:	2b2f      	cmp	r3, #47	@ 0x2f
 8007fc0:	d006      	beq.n	8007fd0 <create_name+0x54>
 8007fc2:	7efb      	ldrb	r3, [r7, #27]
 8007fc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8007fc6:	d110      	bne.n	8007fea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007fc8:	e002      	b.n	8007fd0 <create_name+0x54>
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	61fb      	str	r3, [r7, #28]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8007fda:	d0f6      	beq.n	8007fca <create_name+0x4e>
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b5c      	cmp	r3, #92	@ 0x5c
 8007fe6:	d0f0      	beq.n	8007fca <create_name+0x4e>
			break;
 8007fe8:	e038      	b.n	800805c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007fea:	7efb      	ldrb	r3, [r7, #27]
 8007fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fee:	d003      	beq.n	8007ff8 <create_name+0x7c>
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d30c      	bcc.n	8008012 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b0b      	cmp	r3, #11
 8007ffc:	d002      	beq.n	8008004 <create_name+0x88>
 8007ffe:	7efb      	ldrb	r3, [r7, #27]
 8008000:	2b2e      	cmp	r3, #46	@ 0x2e
 8008002:	d001      	beq.n	8008008 <create_name+0x8c>
 8008004:	2306      	movs	r3, #6
 8008006:	e044      	b.n	8008092 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008008:	2308      	movs	r3, #8
 800800a:	613b      	str	r3, [r7, #16]
 800800c:	230b      	movs	r3, #11
 800800e:	617b      	str	r3, [r7, #20]
			continue;
 8008010:	e022      	b.n	8008058 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008012:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008016:	2b00      	cmp	r3, #0
 8008018:	da04      	bge.n	8008024 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800801a:	7efb      	ldrb	r3, [r7, #27]
 800801c:	3b80      	subs	r3, #128	@ 0x80
 800801e:	4a1f      	ldr	r2, [pc, #124]	@ (800809c <create_name+0x120>)
 8008020:	5cd3      	ldrb	r3, [r2, r3]
 8008022:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008024:	7efb      	ldrb	r3, [r7, #27]
 8008026:	4619      	mov	r1, r3
 8008028:	481d      	ldr	r0, [pc, #116]	@ (80080a0 <create_name+0x124>)
 800802a:	f7fe fe84 	bl	8006d36 <chk_chr>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <create_name+0xbc>
 8008034:	2306      	movs	r3, #6
 8008036:	e02c      	b.n	8008092 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008038:	7efb      	ldrb	r3, [r7, #27]
 800803a:	2b60      	cmp	r3, #96	@ 0x60
 800803c:	d905      	bls.n	800804a <create_name+0xce>
 800803e:	7efb      	ldrb	r3, [r7, #27]
 8008040:	2b7a      	cmp	r3, #122	@ 0x7a
 8008042:	d802      	bhi.n	800804a <create_name+0xce>
 8008044:	7efb      	ldrb	r3, [r7, #27]
 8008046:	3b20      	subs	r3, #32
 8008048:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	613a      	str	r2, [r7, #16]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	4413      	add	r3, r2
 8008054:	7efa      	ldrb	r2, [r7, #27]
 8008056:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008058:	e7a6      	b.n	8007fa8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800805a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	441a      	add	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <create_name+0xf4>
 800806c:	2306      	movs	r3, #6
 800806e:	e010      	b.n	8008092 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2be5      	cmp	r3, #229	@ 0xe5
 8008076:	d102      	bne.n	800807e <create_name+0x102>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2205      	movs	r2, #5
 800807c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800807e:	7efb      	ldrb	r3, [r7, #27]
 8008080:	2b20      	cmp	r3, #32
 8008082:	d801      	bhi.n	8008088 <create_name+0x10c>
 8008084:	2204      	movs	r2, #4
 8008086:	e000      	b.n	800808a <create_name+0x10e>
 8008088:	2200      	movs	r2, #0
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	330b      	adds	r3, #11
 800808e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008090:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008092:	4618      	mov	r0, r3
 8008094:	3720      	adds	r7, #32
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	0800e0ac 	.word	0x0800e0ac
 80080a0:	0800e02c 	.word	0x0800e02c

080080a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80080b8:	e002      	b.n	80080c0 <follow_path+0x1c>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	3301      	adds	r3, #1
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80080c6:	d0f8      	beq.n	80080ba <follow_path+0x16>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80080ce:	d0f4      	beq.n	80080ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	2200      	movs	r2, #0
 80080d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b1f      	cmp	r3, #31
 80080dc:	d80a      	bhi.n	80080f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2280      	movs	r2, #128	@ 0x80
 80080e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff fc00 	bl	80078ee <dir_sdi>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]
 80080f2:	e048      	b.n	8008186 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080f4:	463b      	mov	r3, r7
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff ff3f 	bl	8007f7c <create_name>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d139      	bne.n	800817c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff fe32 	bl	8007d72 <dir_find>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008118:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	2b04      	cmp	r3, #4
 8008124:	d12c      	bne.n	8008180 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008126:	7afb      	ldrb	r3, [r7, #11]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d127      	bne.n	8008180 <follow_path+0xdc>
 8008130:	2305      	movs	r3, #5
 8008132:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008134:	e024      	b.n	8008180 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d121      	bne.n	8008184 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	799b      	ldrb	r3, [r3, #6]
 8008144:	f003 0310 	and.w	r3, r3, #16
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800814c:	2305      	movs	r3, #5
 800814e:	75fb      	strb	r3, [r7, #23]
 8008150:	e019      	b.n	8008186 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	8992      	ldrh	r2, [r2, #12]
 8008160:	fbb3 f0f2 	udiv	r0, r3, r2
 8008164:	fb00 f202 	mul.w	r2, r0, r2
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	440b      	add	r3, r1
 800816c:	4619      	mov	r1, r3
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff fd63 	bl	8007c3a <ld_clust>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800817a:	e7bb      	b.n	80080f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800817c:	bf00      	nop
 800817e:	e002      	b.n	8008186 <follow_path+0xe2>
				break;
 8008180:	bf00      	nop
 8008182:	e000      	b.n	8008186 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008184:	bf00      	nop
			}
		}
	}

	return res;
 8008186:	7dfb      	ldrb	r3, [r7, #23]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008198:	f04f 33ff 	mov.w	r3, #4294967295
 800819c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d031      	beq.n	800820a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	e002      	b.n	80081b4 <get_ldnumber+0x24>
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	3301      	adds	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	d903      	bls.n	80081c4 <get_ldnumber+0x34>
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80081c2:	d1f4      	bne.n	80081ae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80081ca:	d11c      	bne.n	8008206 <get_ldnumber+0x76>
			tp = *path;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	60fa      	str	r2, [r7, #12]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	3b30      	subs	r3, #48	@ 0x30
 80081dc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b09      	cmp	r3, #9
 80081e2:	d80e      	bhi.n	8008202 <get_ldnumber+0x72>
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d10a      	bne.n	8008202 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d107      	bne.n	8008202 <get_ldnumber+0x72>
					vol = (int)i;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	3301      	adds	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	e002      	b.n	800820c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008206:	2300      	movs	r3, #0
 8008208:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800820a:	693b      	ldr	r3, [r7, #16]
}
 800820c:	4618      	mov	r0, r3
 800820e:	371c      	adds	r7, #28
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	70da      	strb	r2, [r3, #3]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f04f 32ff 	mov.w	r2, #4294967295
 800822e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7fe ff7c 	bl	8007130 <move_window>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <check_fs+0x2a>
 800823e:	2304      	movs	r3, #4
 8008240:	e038      	b.n	80082b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3338      	adds	r3, #56	@ 0x38
 8008246:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fc8e 	bl	8006b6c <ld_word>
 8008250:	4603      	mov	r3, r0
 8008252:	461a      	mov	r2, r3
 8008254:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008258:	429a      	cmp	r2, r3
 800825a:	d001      	beq.n	8008260 <check_fs+0x48>
 800825c:	2303      	movs	r3, #3
 800825e:	e029      	b.n	80082b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008266:	2be9      	cmp	r3, #233	@ 0xe9
 8008268:	d009      	beq.n	800827e <check_fs+0x66>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008270:	2beb      	cmp	r3, #235	@ 0xeb
 8008272:	d11e      	bne.n	80082b2 <check_fs+0x9a>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800827a:	2b90      	cmp	r3, #144	@ 0x90
 800827c:	d119      	bne.n	80082b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3338      	adds	r3, #56	@ 0x38
 8008282:	3336      	adds	r3, #54	@ 0x36
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fc89 	bl	8006b9c <ld_dword>
 800828a:	4603      	mov	r3, r0
 800828c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008290:	4a0a      	ldr	r2, [pc, #40]	@ (80082bc <check_fs+0xa4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d101      	bne.n	800829a <check_fs+0x82>
 8008296:	2300      	movs	r3, #0
 8008298:	e00c      	b.n	80082b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3338      	adds	r3, #56	@ 0x38
 800829e:	3352      	adds	r3, #82	@ 0x52
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fe fc7b 	bl	8006b9c <ld_dword>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4a05      	ldr	r2, [pc, #20]	@ (80082c0 <check_fs+0xa8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d101      	bne.n	80082b2 <check_fs+0x9a>
 80082ae:	2300      	movs	r3, #0
 80082b0:	e000      	b.n	80082b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80082b2:	2302      	movs	r3, #2
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	00544146 	.word	0x00544146
 80082c0:	33544146 	.word	0x33544146

080082c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b096      	sub	sp, #88	@ 0x58
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff ff59 	bl	8008190 <get_ldnumber>
 80082de:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80082e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	da01      	bge.n	80082ea <find_volume+0x26>
 80082e6:	230b      	movs	r3, #11
 80082e8:	e26a      	b.n	80087c0 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80082ea:	4aa3      	ldr	r2, [pc, #652]	@ (8008578 <find_volume+0x2b4>)
 80082ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80082f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <find_volume+0x3a>
 80082fa:	230c      	movs	r3, #12
 80082fc:	e260      	b.n	80087c0 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 80082fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008300:	f7fe fd34 	bl	8006d6c <lock_fs>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <find_volume+0x4a>
 800830a:	230f      	movs	r3, #15
 800830c:	e258      	b.n	80087c0 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008312:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01a      	beq.n	800835a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fb81 	bl	8006a30 <disk_status>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008334:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10c      	bne.n	800835a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <find_volume+0x92>
 8008346:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800834a:	f003 0304 	and.w	r3, r3, #4
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008352:	230a      	movs	r3, #10
 8008354:	e234      	b.n	80087c0 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8008356:	2300      	movs	r3, #0
 8008358:	e232      	b.n	80087c0 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008362:	b2da      	uxtb	r2, r3
 8008364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008366:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	4618      	mov	r0, r3
 800836e:	f7fe fb79 	bl	8006a64 <disk_initialize>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008378:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008384:	2303      	movs	r3, #3
 8008386:	e21b      	b.n	80087c0 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <find_volume+0xda>
 800838e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800839a:	230a      	movs	r3, #10
 800839c:	e210      	b.n	80087c0 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800839e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a0:	7858      	ldrb	r0, [r3, #1]
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	330c      	adds	r3, #12
 80083a6:	461a      	mov	r2, r3
 80083a8:	2102      	movs	r1, #2
 80083aa:	f7fe fbc1 	bl	8006b30 <disk_ioctl>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <find_volume+0xf4>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e203      	b.n	80087c0 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80083b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ba:	899b      	ldrh	r3, [r3, #12]
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c0:	d80d      	bhi.n	80083de <find_volume+0x11a>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	899b      	ldrh	r3, [r3, #12]
 80083c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083ca:	d308      	bcc.n	80083de <find_volume+0x11a>
 80083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ce:	899b      	ldrh	r3, [r3, #12]
 80083d0:	461a      	mov	r2, r3
 80083d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d4:	899b      	ldrh	r3, [r3, #12]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	4013      	ands	r3, r2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <find_volume+0x11e>
 80083de:	2301      	movs	r3, #1
 80083e0:	e1ee      	b.n	80087c0 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80083e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083ea:	f7ff ff15 	bl	8008218 <check_fs>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80083f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d149      	bne.n	8008490 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083fc:	2300      	movs	r3, #0
 80083fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008400:	e01e      	b.n	8008440 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008404:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008410:	4413      	add	r3, r2
 8008412:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	3304      	adds	r3, #4
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d006      	beq.n	800842c <find_volume+0x168>
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	3308      	adds	r3, #8
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fbba 	bl	8006b9c <ld_dword>
 8008428:	4602      	mov	r2, r0
 800842a:	e000      	b.n	800842e <find_volume+0x16a>
 800842c:	2200      	movs	r2, #0
 800842e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	3358      	adds	r3, #88	@ 0x58
 8008434:	443b      	add	r3, r7
 8008436:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800843a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800843c:	3301      	adds	r3, #1
 800843e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008442:	2b03      	cmp	r3, #3
 8008444:	d9dd      	bls.n	8008402 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008446:	2300      	movs	r3, #0
 8008448:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800844a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <find_volume+0x192>
 8008450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008452:	3b01      	subs	r3, #1
 8008454:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	3358      	adds	r3, #88	@ 0x58
 800845c:	443b      	add	r3, r7
 800845e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008462:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <find_volume+0x1b2>
 800846a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800846c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800846e:	f7ff fed3 	bl	8008218 <check_fs>
 8008472:	4603      	mov	r3, r0
 8008474:	e000      	b.n	8008478 <find_volume+0x1b4>
 8008476:	2303      	movs	r3, #3
 8008478:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800847c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008480:	2b01      	cmp	r3, #1
 8008482:	d905      	bls.n	8008490 <find_volume+0x1cc>
 8008484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008486:	3301      	adds	r3, #1
 8008488:	643b      	str	r3, [r7, #64]	@ 0x40
 800848a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800848c:	2b03      	cmp	r3, #3
 800848e:	d9e2      	bls.n	8008456 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008490:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008494:	2b04      	cmp	r3, #4
 8008496:	d101      	bne.n	800849c <find_volume+0x1d8>
 8008498:	2301      	movs	r3, #1
 800849a:	e191      	b.n	80087c0 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800849c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d901      	bls.n	80084a8 <find_volume+0x1e4>
 80084a4:	230d      	movs	r3, #13
 80084a6:	e18b      	b.n	80087c0 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	3338      	adds	r3, #56	@ 0x38
 80084ac:	330b      	adds	r3, #11
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fb5c 	bl	8006b6c <ld_word>
 80084b4:	4603      	mov	r3, r0
 80084b6:	461a      	mov	r2, r3
 80084b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ba:	899b      	ldrh	r3, [r3, #12]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d001      	beq.n	80084c4 <find_volume+0x200>
 80084c0:	230d      	movs	r3, #13
 80084c2:	e17d      	b.n	80087c0 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	3338      	adds	r3, #56	@ 0x38
 80084c8:	3316      	adds	r3, #22
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fb4e 	bl	8006b6c <ld_word>
 80084d0:	4603      	mov	r3, r0
 80084d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80084d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <find_volume+0x224>
 80084da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084dc:	3338      	adds	r3, #56	@ 0x38
 80084de:	3324      	adds	r3, #36	@ 0x24
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fe fb5b 	bl	8006b9c <ld_dword>
 80084e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80084e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fa:	789b      	ldrb	r3, [r3, #2]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d005      	beq.n	800850c <find_volume+0x248>
 8008500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008502:	789b      	ldrb	r3, [r3, #2]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d001      	beq.n	800850c <find_volume+0x248>
 8008508:	230d      	movs	r3, #13
 800850a:	e159      	b.n	80087c0 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800850c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850e:	789b      	ldrb	r3, [r3, #2]
 8008510:	461a      	mov	r2, r3
 8008512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008514:	fb02 f303 	mul.w	r3, r2, r3
 8008518:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008520:	461a      	mov	r2, r3
 8008522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008524:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008528:	895b      	ldrh	r3, [r3, #10]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <find_volume+0x27c>
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008530:	895b      	ldrh	r3, [r3, #10]
 8008532:	461a      	mov	r2, r3
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	895b      	ldrh	r3, [r3, #10]
 8008538:	3b01      	subs	r3, #1
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <find_volume+0x280>
 8008540:	230d      	movs	r3, #13
 8008542:	e13d      	b.n	80087c0 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008546:	3338      	adds	r3, #56	@ 0x38
 8008548:	3311      	adds	r3, #17
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe fb0e 	bl	8006b6c <ld_word>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008556:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855a:	891b      	ldrh	r3, [r3, #8]
 800855c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800855e:	8992      	ldrh	r2, [r2, #12]
 8008560:	0952      	lsrs	r2, r2, #5
 8008562:	b292      	uxth	r2, r2
 8008564:	fbb3 f1f2 	udiv	r1, r3, r2
 8008568:	fb01 f202 	mul.w	r2, r1, r2
 800856c:	1a9b      	subs	r3, r3, r2
 800856e:	b29b      	uxth	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <find_volume+0x2b8>
 8008574:	230d      	movs	r3, #13
 8008576:	e123      	b.n	80087c0 <find_volume+0x4fc>
 8008578:	2000264c 	.word	0x2000264c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800857c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857e:	3338      	adds	r3, #56	@ 0x38
 8008580:	3313      	adds	r3, #19
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe faf2 	bl	8006b6c <ld_word>
 8008588:	4603      	mov	r3, r0
 800858a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800858c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <find_volume+0x2dc>
 8008592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008594:	3338      	adds	r3, #56	@ 0x38
 8008596:	3320      	adds	r3, #32
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe faff 	bl	8006b9c <ld_dword>
 800859e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80085a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a2:	3338      	adds	r3, #56	@ 0x38
 80085a4:	330e      	adds	r3, #14
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fae0 	bl	8006b6c <ld_word>
 80085ac:	4603      	mov	r3, r0
 80085ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80085b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <find_volume+0x2f6>
 80085b6:	230d      	movs	r3, #13
 80085b8:	e102      	b.n	80087c0 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80085ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80085bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085be:	4413      	add	r3, r2
 80085c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085c2:	8911      	ldrh	r1, [r2, #8]
 80085c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085c6:	8992      	ldrh	r2, [r2, #12]
 80085c8:	0952      	lsrs	r2, r2, #5
 80085ca:	b292      	uxth	r2, r2
 80085cc:	fbb1 f2f2 	udiv	r2, r1, r2
 80085d0:	b292      	uxth	r2, r2
 80085d2:	4413      	add	r3, r2
 80085d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085da:	429a      	cmp	r2, r3
 80085dc:	d201      	bcs.n	80085e2 <find_volume+0x31e>
 80085de:	230d      	movs	r3, #13
 80085e0:	e0ee      	b.n	80087c0 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085ea:	8952      	ldrh	r2, [r2, #10]
 80085ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <find_volume+0x338>
 80085f8:	230d      	movs	r3, #13
 80085fa:	e0e1      	b.n	80087c0 <find_volume+0x4fc>
		fmt = FS_FAT32;
 80085fc:	2303      	movs	r3, #3
 80085fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008608:	4293      	cmp	r3, r2
 800860a:	d802      	bhi.n	8008612 <find_volume+0x34e>
 800860c:	2302      	movs	r3, #2
 800860e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008618:	4293      	cmp	r3, r2
 800861a:	d802      	bhi.n	8008622 <find_volume+0x35e>
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	1c9a      	adds	r2, r3, #2
 8008626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008628:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800862a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800862e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008630:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008634:	441a      	add	r2, r3
 8008636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008638:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800863a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800863c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863e:	441a      	add	r2, r3
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008644:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008648:	2b03      	cmp	r3, #3
 800864a:	d11e      	bne.n	800868a <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800864c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864e:	3338      	adds	r3, #56	@ 0x38
 8008650:	332a      	adds	r3, #42	@ 0x2a
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fa8a 	bl	8006b6c <ld_word>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <find_volume+0x39e>
 800865e:	230d      	movs	r3, #13
 8008660:	e0ae      	b.n	80087c0 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008664:	891b      	ldrh	r3, [r3, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <find_volume+0x3aa>
 800866a:	230d      	movs	r3, #13
 800866c:	e0a8      	b.n	80087c0 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800866e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008670:	3338      	adds	r3, #56	@ 0x38
 8008672:	332c      	adds	r3, #44	@ 0x2c
 8008674:	4618      	mov	r0, r3
 8008676:	f7fe fa91 	bl	8006b9c <ld_dword>
 800867a:	4602      	mov	r2, r0
 800867c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	647b      	str	r3, [r7, #68]	@ 0x44
 8008688:	e01f      	b.n	80086ca <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800868a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868c:	891b      	ldrh	r3, [r3, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <find_volume+0x3d2>
 8008692:	230d      	movs	r3, #13
 8008694:	e094      	b.n	80087c0 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800869a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800869c:	441a      	add	r2, r3
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80086a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d103      	bne.n	80086b2 <find_volume+0x3ee>
 80086aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	e00a      	b.n	80086c8 <find_volume+0x404>
 80086b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b4:	69da      	ldr	r2, [r3, #28]
 80086b6:	4613      	mov	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	4413      	add	r3, r2
 80086bc:	085a      	lsrs	r2, r3, #1
 80086be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80086c8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086cc:	6a1a      	ldr	r2, [r3, #32]
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	899b      	ldrh	r3, [r3, #12]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086d6:	440b      	add	r3, r1
 80086d8:	3b01      	subs	r3, #1
 80086da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086dc:	8989      	ldrh	r1, [r1, #12]
 80086de:	fbb3 f3f1 	udiv	r3, r3, r1
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d201      	bcs.n	80086ea <find_volume+0x426>
 80086e6:	230d      	movs	r3, #13
 80086e8:	e06a      	b.n	80087c0 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80086ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ec:	f04f 32ff 	mov.w	r2, #4294967295
 80086f0:	619a      	str	r2, [r3, #24]
 80086f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f4:	699a      	ldr	r2, [r3, #24]
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80086fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fc:	2280      	movs	r2, #128	@ 0x80
 80086fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008700:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008704:	2b03      	cmp	r3, #3
 8008706:	d149      	bne.n	800879c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870a:	3338      	adds	r3, #56	@ 0x38
 800870c:	3330      	adds	r3, #48	@ 0x30
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe fa2c 	bl	8006b6c <ld_word>
 8008714:	4603      	mov	r3, r0
 8008716:	2b01      	cmp	r3, #1
 8008718:	d140      	bne.n	800879c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800871a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800871c:	3301      	adds	r3, #1
 800871e:	4619      	mov	r1, r3
 8008720:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008722:	f7fe fd05 	bl	8007130 <move_window>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d137      	bne.n	800879c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800872c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872e:	2200      	movs	r2, #0
 8008730:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008734:	3338      	adds	r3, #56	@ 0x38
 8008736:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fa16 	bl	8006b6c <ld_word>
 8008740:	4603      	mov	r3, r0
 8008742:	461a      	mov	r2, r3
 8008744:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008748:	429a      	cmp	r2, r3
 800874a:	d127      	bne.n	800879c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800874c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874e:	3338      	adds	r3, #56	@ 0x38
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe fa23 	bl	8006b9c <ld_dword>
 8008756:	4603      	mov	r3, r0
 8008758:	4a1b      	ldr	r2, [pc, #108]	@ (80087c8 <find_volume+0x504>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d11e      	bne.n	800879c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	3338      	adds	r3, #56	@ 0x38
 8008762:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fa18 	bl	8006b9c <ld_dword>
 800876c:	4603      	mov	r3, r0
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <find_volume+0x508>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d113      	bne.n	800879c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008776:	3338      	adds	r3, #56	@ 0x38
 8008778:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fa0d 	bl	8006b9c <ld_dword>
 8008782:	4602      	mov	r2, r0
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878a:	3338      	adds	r3, #56	@ 0x38
 800878c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fa03 	bl	8006b9c <ld_dword>
 8008796:	4602      	mov	r2, r0
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80087a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80087a4:	4b0a      	ldr	r3, [pc, #40]	@ (80087d0 <find_volume+0x50c>)
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	3301      	adds	r3, #1
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	4b08      	ldr	r3, [pc, #32]	@ (80087d0 <find_volume+0x50c>)
 80087ae:	801a      	strh	r2, [r3, #0]
 80087b0:	4b07      	ldr	r3, [pc, #28]	@ (80087d0 <find_volume+0x50c>)
 80087b2:	881a      	ldrh	r2, [r3, #0]
 80087b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80087b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087ba:	f7fe fc51 	bl	8007060 <clear_lock>
#endif
	return FR_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3758      	adds	r7, #88	@ 0x58
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	41615252 	.word	0x41615252
 80087cc:	61417272 	.word	0x61417272
 80087d0:	20002650 	.word	0x20002650

080087d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80087de:	2309      	movs	r3, #9
 80087e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d02e      	beq.n	8008846 <validate+0x72>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02a      	beq.n	8008846 <validate+0x72>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d025      	beq.n	8008846 <validate+0x72>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	889a      	ldrh	r2, [r3, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	88db      	ldrh	r3, [r3, #6]
 8008804:	429a      	cmp	r2, r3
 8008806:	d11e      	bne.n	8008846 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe faad 	bl	8006d6c <lock_fs>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d014      	beq.n	8008842 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe f906 	bl	8006a30 <disk_status>
 8008824:	4603      	mov	r3, r0
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <validate+0x60>
				res = FR_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73fb      	strb	r3, [r7, #15]
 8008832:	e008      	b.n	8008846 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2100      	movs	r1, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe faac 	bl	8006d98 <unlock_fs>
 8008840:	e001      	b.n	8008846 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008842:	230f      	movs	r3, #15
 8008844:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <validate+0x7e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	e000      	b.n	8008854 <validate+0x80>
 8008852:	2300      	movs	r3, #0
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	6013      	str	r3, [r2, #0]
	return res;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008876:	f107 0310 	add.w	r3, r7, #16
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fc88 	bl	8008190 <get_ldnumber>
 8008880:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	2b00      	cmp	r3, #0
 8008886:	da01      	bge.n	800888c <f_mount+0x28>
 8008888:	230b      	movs	r3, #11
 800888a:	e048      	b.n	800891e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800888c:	4a26      	ldr	r2, [pc, #152]	@ (8008928 <f_mount+0xc4>)
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008894:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00f      	beq.n	80088bc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800889c:	69b8      	ldr	r0, [r7, #24]
 800889e:	f7fe fbdf 	bl	8007060 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 ff9b 	bl	80097e2 <ff_del_syncobj>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <f_mount+0x52>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e033      	b.n	800891e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00f      	beq.n	80088e2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3310      	adds	r3, #16
 80088d0:	4619      	mov	r1, r3
 80088d2:	4610      	mov	r0, r2
 80088d4:	f000 ff65 	bl	80097a2 <ff_cre_syncobj>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <f_mount+0x7e>
 80088de:	2302      	movs	r3, #2
 80088e0:	e01d      	b.n	800891e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4910      	ldr	r1, [pc, #64]	@ (8008928 <f_mount+0xc4>)
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <f_mount+0x94>
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d001      	beq.n	80088fc <f_mount+0x98>
 80088f8:	2300      	movs	r3, #0
 80088fa:	e010      	b.n	800891e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80088fc:	f107 010c 	add.w	r1, r7, #12
 8008900:	f107 0308 	add.w	r3, r7, #8
 8008904:	2200      	movs	r2, #0
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff fcdc 	bl	80082c4 <find_volume>
 800890c:	4603      	mov	r3, r0
 800890e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	7dfa      	ldrb	r2, [r7, #23]
 8008914:	4611      	mov	r1, r2
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fa3e 	bl	8006d98 <unlock_fs>
 800891c:	7dfb      	ldrb	r3, [r7, #23]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3720      	adds	r7, #32
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	2000264c 	.word	0x2000264c

0800892c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b098      	sub	sp, #96	@ 0x60
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	4613      	mov	r3, r2
 8008938:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <f_open+0x18>
 8008940:	2309      	movs	r3, #9
 8008942:	e1be      	b.n	8008cc2 <f_open+0x396>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800894a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800894c:	79fa      	ldrb	r2, [r7, #7]
 800894e:	f107 0110 	add.w	r1, r7, #16
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff fcb4 	bl	80082c4 <find_volume>
 800895c:	4603      	mov	r3, r0
 800895e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008962:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008966:	2b00      	cmp	r3, #0
 8008968:	f040 819b 	bne.w	8008ca2 <f_open+0x376>
		dj.obj.fs = fs;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	f107 0314 	add.w	r3, r7, #20
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff fb93 	bl	80080a4 <follow_path>
 800897e:	4603      	mov	r3, r0
 8008980:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008984:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008988:	2b00      	cmp	r3, #0
 800898a:	d118      	bne.n	80089be <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800898c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008990:	b25b      	sxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	da03      	bge.n	800899e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008996:	2306      	movs	r3, #6
 8008998:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800899c:	e00f      	b.n	80089be <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	bf8c      	ite	hi
 80089a4:	2301      	movhi	r3, #1
 80089a6:	2300      	movls	r3, #0
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	461a      	mov	r2, r3
 80089ac:	f107 0314 	add.w	r3, r7, #20
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fa0c 	bl	8006dd0 <chk_lock>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	f003 031c 	and.w	r3, r3, #28
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d07f      	beq.n	8008ac8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80089c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d017      	beq.n	8008a00 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80089d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d10e      	bne.n	80089f6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80089d8:	f7fe fa56 	bl	8006e88 <enq_lock>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d006      	beq.n	80089f0 <f_open+0xc4>
 80089e2:	f107 0314 	add.w	r3, r7, #20
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff fa18 	bl	8007e1c <dir_register>
 80089ec:	4603      	mov	r3, r0
 80089ee:	e000      	b.n	80089f2 <f_open+0xc6>
 80089f0:	2312      	movs	r3, #18
 80089f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	f043 0308 	orr.w	r3, r3, #8
 80089fc:	71fb      	strb	r3, [r7, #7]
 80089fe:	e010      	b.n	8008a22 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008a00:	7ebb      	ldrb	r3, [r7, #26]
 8008a02:	f003 0311 	and.w	r3, r3, #17
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <f_open+0xe6>
					res = FR_DENIED;
 8008a0a:	2307      	movs	r3, #7
 8008a0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008a10:	e007      	b.n	8008a22 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <f_open+0xf6>
 8008a1c:	2308      	movs	r3, #8
 8008a1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008a22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d168      	bne.n	8008afc <f_open+0x1d0>
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	f003 0308 	and.w	r3, r3, #8
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d063      	beq.n	8008afc <f_open+0x1d0>
				dw = GET_FATTIME();
 8008a34:	f7fd fd9a 	bl	800656c <get_fattime>
 8008a38:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3c:	330e      	adds	r3, #14
 8008a3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe f8e9 	bl	8006c18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a48:	3316      	adds	r3, #22
 8008a4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fe f8e3 	bl	8006c18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a54:	330b      	adds	r3, #11
 8008a56:	2220      	movs	r2, #32
 8008a58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff f8ea 	bl	8007c3a <ld_clust>
 8008a66:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff f902 	bl	8007c78 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a76:	331c      	adds	r3, #28
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe f8cc 	bl	8006c18 <st_dword>
					fs->wflag = 1;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2201      	movs	r2, #1
 8008a84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d037      	beq.n	8008afc <f_open+0x1d0>
						dw = fs->winsect;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a90:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008a92:	f107 0314 	add.w	r3, r7, #20
 8008a96:	2200      	movs	r2, #0
 8008a98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fdf2 	bl	8007684 <remove_chain>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d126      	bne.n	8008afc <f_open+0x1d0>
							res = move_window(fs, dw);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe fb3c 	bl	8007130 <move_window>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ac2:	3a01      	subs	r2, #1
 8008ac4:	615a      	str	r2, [r3, #20]
 8008ac6:	e019      	b.n	8008afc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d115      	bne.n	8008afc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008ad0:	7ebb      	ldrb	r3, [r7, #26]
 8008ad2:	f003 0310 	and.w	r3, r3, #16
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8008ada:	2304      	movs	r3, #4
 8008adc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008ae0:	e00c      	b.n	8008afc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d007      	beq.n	8008afc <f_open+0x1d0>
 8008aec:	7ebb      	ldrb	r3, [r7, #26]
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <f_open+0x1d0>
						res = FR_DENIED;
 8008af6:	2307      	movs	r3, #7
 8008af8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008afc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d126      	bne.n	8008b52 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008b1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	bf8c      	ite	hi
 8008b2a:	2301      	movhi	r3, #1
 8008b2c:	2300      	movls	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	f107 0314 	add.w	r3, r7, #20
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe f9c7 	bl	8006ecc <inc_lock>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <f_open+0x226>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008b52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f040 80a3 	bne.w	8008ca2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff f869 	bl	8007c3a <ld_clust>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b70:	331c      	adds	r3, #28
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe f812 	bl	8006b9c <ld_dword>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	88da      	ldrh	r2, [r3, #6]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	79fa      	ldrb	r2, [r7, #7]
 8008b96:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3330      	adds	r3, #48	@ 0x30
 8008bae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe f87c 	bl	8006cb2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	f003 0320 	and.w	r3, r3, #32
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d06e      	beq.n	8008ca2 <f_open+0x376>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d06a      	beq.n	8008ca2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	895b      	ldrh	r3, [r3, #10]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	899b      	ldrh	r3, [r3, #12]
 8008bde:	fb02 f303 	mul.w	r3, r2, r3
 8008be2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bf0:	e016      	b.n	8008c20 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe fb57 	bl	80072aa <get_fat>
 8008bfc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008bfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d802      	bhi.n	8008c0a <f_open+0x2de>
 8008c04:	2302      	movs	r3, #2
 8008c06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008c0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c10:	d102      	bne.n	8008c18 <f_open+0x2ec>
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <f_open+0x304>
 8008c28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d8e0      	bhi.n	8008bf2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c34:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008c36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d131      	bne.n	8008ca2 <f_open+0x376>
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	899b      	ldrh	r3, [r3, #12]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c46:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c4a:	fb01 f202 	mul.w	r2, r1, r2
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d026      	beq.n	8008ca2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe fb07 	bl	800726c <clust2sect>
 8008c5e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d103      	bne.n	8008c6e <f_open+0x342>
						res = FR_INT_ERR;
 8008c66:	2302      	movs	r3, #2
 8008c68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008c6c:	e019      	b.n	8008ca2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	899b      	ldrh	r3, [r3, #12]
 8008c72:	461a      	mov	r2, r3
 8008c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c76:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c7c:	441a      	add	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	7858      	ldrb	r0, [r3, #1]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1a      	ldr	r2, [r3, #32]
 8008c90:	2301      	movs	r3, #1
 8008c92:	f7fd ff0d 	bl	8006ab0 <disk_read>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <f_open+0x376>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <f_open+0x384>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fe f86d 	bl	8006d98 <unlock_fs>
 8008cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3760      	adds	r7, #96	@ 0x60
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b08c      	sub	sp, #48	@ 0x30
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]
 8008cd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f107 0210 	add.w	r2, r7, #16
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff fd72 	bl	80087d4 <validate>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d107      	bne.n	8008d0e <f_write+0x44>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	7d5b      	ldrb	r3, [r3, #21]
 8008d02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008d06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <f_write+0x58>
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe f83e 	bl	8006d98 <unlock_fs>
 8008d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d20:	e192      	b.n	8009048 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	7d1b      	ldrb	r3, [r3, #20]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <f_write+0x72>
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	2107      	movs	r1, #7
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fe f830 	bl	8006d98 <unlock_fs>
 8008d38:	2307      	movs	r3, #7
 8008d3a:	e185      	b.n	8009048 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	699a      	ldr	r2, [r3, #24]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	441a      	add	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	f080 816a 	bcs.w	8009022 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	43db      	mvns	r3, r3
 8008d54:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008d56:	e164      	b.n	8009022 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	8992      	ldrh	r2, [r2, #12]
 8008d60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d64:	fb01 f202 	mul.w	r2, r1, r2
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f040 810f 	bne.w	8008f8e <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	8992      	ldrh	r2, [r2, #12]
 8008d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	8952      	ldrh	r2, [r2, #10]
 8008d80:	3a01      	subs	r2, #1
 8008d82:	4013      	ands	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d14d      	bne.n	8008e28 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10c      	bne.n	8008dae <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d11a      	bne.n	8008dd6 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2100      	movs	r1, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fcd2 	bl	800774e <create_chain>
 8008daa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008dac:	e013      	b.n	8008dd6 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7fe fd5e 	bl	800787e <clmt_clust>
 8008dc2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008dc4:	e007      	b.n	8008dd6 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f7fe fcbd 	bl	800774e <create_chain>
 8008dd4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 8127 	beq.w	800902c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d109      	bne.n	8008df8 <f_write+0x12e>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2202      	movs	r2, #2
 8008de8:	755a      	strb	r2, [r3, #21]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2102      	movs	r1, #2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fd ffd2 	bl	8006d98 <unlock_fs>
 8008df4:	2302      	movs	r3, #2
 8008df6:	e127      	b.n	8009048 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	d109      	bne.n	8008e14 <f_write+0x14a>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	755a      	strb	r2, [r3, #21]
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2101      	movs	r1, #1
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fd ffc4 	bl	8006d98 <unlock_fs>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e119      	b.n	8009048 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e18:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <f_write+0x15e>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	7d1b      	ldrb	r3, [r3, #20]
 8008e2c:	b25b      	sxtb	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	da1d      	bge.n	8008e6e <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	7858      	ldrb	r0, [r3, #1]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6a1a      	ldr	r2, [r3, #32]
 8008e40:	2301      	movs	r3, #1
 8008e42:	f7fd fe55 	bl	8006af0 <disk_write>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d009      	beq.n	8008e60 <f_write+0x196>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	755a      	strb	r2, [r3, #21]
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2101      	movs	r1, #1
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fd ff9e 	bl	8006d98 <unlock_fs>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e0f3      	b.n	8009048 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	7d1b      	ldrb	r3, [r3, #20]
 8008e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f7fe f9f8 	bl	800726c <clust2sect>
 8008e7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d109      	bne.n	8008e98 <f_write+0x1ce>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2202      	movs	r2, #2
 8008e88:	755a      	strb	r2, [r3, #21]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fd ff82 	bl	8006d98 <unlock_fs>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e0d7      	b.n	8009048 <f_write+0x37e>
			sect += csect;
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	899b      	ldrh	r3, [r3, #12]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eac:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d048      	beq.n	8008f46 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	4413      	add	r3, r2
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	8952      	ldrh	r2, [r2, #10]
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d905      	bls.n	8008ece <f_write+0x204>
					cc = fs->csize - csect;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	895b      	ldrh	r3, [r3, #10]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	7858      	ldrb	r0, [r3, #1]
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	69f9      	ldr	r1, [r7, #28]
 8008ed8:	f7fd fe0a 	bl	8006af0 <disk_write>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d009      	beq.n	8008ef6 <f_write+0x22c>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	755a      	strb	r2, [r3, #21]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	2101      	movs	r1, #1
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fd ff53 	bl	8006d98 <unlock_fs>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e0a8      	b.n	8009048 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a1a      	ldr	r2, [r3, #32]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d918      	bls.n	8008f36 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a1a      	ldr	r2, [r3, #32]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	8992      	ldrh	r2, [r2, #12]
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	18d1      	adds	r1, r2, r3
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	899b      	ldrh	r3, [r3, #12]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f7fd fea4 	bl	8006c70 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	7d1b      	ldrb	r3, [r3, #20]
 8008f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	899b      	ldrh	r3, [r3, #12]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	fb02 f303 	mul.w	r3, r2, r3
 8008f42:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008f44:	e050      	b.n	8008fe8 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d01b      	beq.n	8008f88 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d215      	bcs.n	8008f88 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	7858      	ldrb	r0, [r3, #1]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f66:	2301      	movs	r3, #1
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	f7fd fda1 	bl	8006ab0 <disk_read>
 8008f6e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d009      	beq.n	8008f88 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	755a      	strb	r2, [r3, #21]
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fd ff0a 	bl	8006d98 <unlock_fs>
 8008f84:	2301      	movs	r3, #1
 8008f86:	e05f      	b.n	8009048 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	899b      	ldrh	r3, [r3, #12]
 8008f92:	4618      	mov	r0, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	8992      	ldrh	r2, [r2, #12]
 8008f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fa0:	fb01 f202 	mul.w	r2, r1, r2
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	1ac3      	subs	r3, r0, r3
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d901      	bls.n	8008fb6 <f_write+0x2ec>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	8992      	ldrh	r2, [r2, #12]
 8008fc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fc8:	fb00 f202 	mul.w	r2, r0, r2
 8008fcc:	1a9b      	subs	r3, r3, r2
 8008fce:	440b      	add	r3, r1
 8008fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fd2:	69f9      	ldr	r1, [r7, #28]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fd fe4b 	bl	8006c70 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	7d1b      	ldrb	r3, [r3, #20]
 8008fde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	4413      	add	r3, r2
 8008fee:	61fb      	str	r3, [r7, #28]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff6:	441a      	add	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	619a      	str	r2, [r3, #24]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	429a      	cmp	r2, r3
 8009006:	bf38      	it	cc
 8009008:	461a      	movcc	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	60da      	str	r2, [r3, #12]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	441a      	add	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f47f ae97 	bne.w	8008d58 <f_write+0x8e>
 800902a:	e000      	b.n	800902e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800902c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	7d1b      	ldrb	r3, [r3, #20]
 8009032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009036:	b2da      	uxtb	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2100      	movs	r1, #0
 8009040:	4618      	mov	r0, r3
 8009042:	f7fd fea9 	bl	8006d98 <unlock_fs>
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3730      	adds	r7, #48	@ 0x30
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f107 0208 	add.w	r2, r7, #8
 800905e:	4611      	mov	r1, r2
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fbb7 	bl	80087d4 <validate>
 8009066:	4603      	mov	r3, r0
 8009068:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d16d      	bne.n	800914c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	7d1b      	ldrb	r3, [r3, #20]
 8009074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009078:	2b00      	cmp	r3, #0
 800907a:	d067      	beq.n	800914c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	7d1b      	ldrb	r3, [r3, #20]
 8009080:	b25b      	sxtb	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	da1a      	bge.n	80090bc <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	7858      	ldrb	r0, [r3, #1]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1a      	ldr	r2, [r3, #32]
 8009094:	2301      	movs	r3, #1
 8009096:	f7fd fd2b 	bl	8006af0 <disk_write>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d006      	beq.n	80090ae <f_sync+0x5e>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2101      	movs	r1, #1
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fd fe77 	bl	8006d98 <unlock_fs>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e055      	b.n	800915a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	7d1b      	ldrb	r3, [r3, #20]
 80090b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80090bc:	f7fd fa56 	bl	800656c <get_fattime>
 80090c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f7fe f830 	bl	8007130 <move_window>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d138      	bne.n	800914c <f_sync+0xfc>
					dir = fp->dir_ptr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	330b      	adds	r3, #11
 80090e4:	781a      	ldrb	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	330b      	adds	r3, #11
 80090ea:	f042 0220 	orr.w	r2, r2, #32
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	461a      	mov	r2, r3
 80090fc:	68f9      	ldr	r1, [r7, #12]
 80090fe:	f7fe fdbb 	bl	8007c78 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f103 021c 	add.w	r2, r3, #28
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7fd fd82 	bl	8006c18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3316      	adds	r3, #22
 8009118:	6939      	ldr	r1, [r7, #16]
 800911a:	4618      	mov	r0, r3
 800911c:	f7fd fd7c 	bl	8006c18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	3312      	adds	r3, #18
 8009124:	2100      	movs	r1, #0
 8009126:	4618      	mov	r0, r3
 8009128:	f7fd fd5b 	bl	8006be2 <st_word>
					fs->wflag = 1;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2201      	movs	r2, #1
 8009130:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe f829 	bl	800718c <sync_fs>
 800913a:	4603      	mov	r3, r0
 800913c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7d1b      	ldrb	r3, [r3, #20]
 8009142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009146:	b2da      	uxtb	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	7dfa      	ldrb	r2, [r7, #23]
 8009150:	4611      	mov	r1, r2
 8009152:	4618      	mov	r0, r3
 8009154:	f7fd fe20 	bl	8006d98 <unlock_fs>
 8009158:	7dfb      	ldrb	r3, [r7, #23]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff ff70 	bl	8009050 <f_sync>
 8009170:	4603      	mov	r3, r0
 8009172:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d11d      	bne.n	80091b6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f107 0208 	add.w	r2, r7, #8
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff fb26 	bl	80087d4 <validate>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d111      	bne.n	80091b6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd ff26 	bl	8006fe8 <dec_lock>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d102      	bne.n	80091ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fd fdf1 	bl	8006d98 <unlock_fs>
#endif
		}
	}
	return res;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <f_opendir+0x14>
 80091d0:	2309      	movs	r3, #9
 80091d2:	e06a      	b.n	80092aa <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80091d8:	f107 010c 	add.w	r1, r7, #12
 80091dc:	463b      	mov	r3, r7
 80091de:	2200      	movs	r2, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff f86f 	bl	80082c4 <find_volume>
 80091e6:	4603      	mov	r3, r0
 80091e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d14f      	bne.n	8009290 <f_opendir+0xd0>
		obj->fs = fs;
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7fe ff52 	bl	80080a4 <follow_path>
 8009200:	4603      	mov	r3, r0
 8009202:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8009204:	7dfb      	ldrb	r3, [r7, #23]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d13d      	bne.n	8009286 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009210:	b25b      	sxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	db12      	blt.n	800923c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	799b      	ldrb	r3, [r3, #6]
 800921a:	f003 0310 	and.w	r3, r3, #16
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f7fe fd05 	bl	8007c3a <ld_clust>
 8009230:	4602      	mov	r2, r0
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	609a      	str	r2, [r3, #8]
 8009236:	e001      	b.n	800923c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009238:	2305      	movs	r3, #5
 800923a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d121      	bne.n	8009286 <f_opendir+0xc6>
				obj->id = fs->id;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	88da      	ldrh	r2, [r3, #6]
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800924a:	2100      	movs	r1, #0
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7fe fb4e 	bl	80078ee <dir_sdi>
 8009252:	4603      	mov	r3, r0
 8009254:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d114      	bne.n	8009286 <f_opendir+0xc6>
					if (obj->sclust) {
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00d      	beq.n	8009280 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009264:	2100      	movs	r1, #0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7fd fe30 	bl	8006ecc <inc_lock>
 800926c:	4602      	mov	r2, r0
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <f_opendir+0xc6>
 800927a:	2312      	movs	r3, #18
 800927c:	75fb      	strb	r3, [r7, #23]
 800927e:	e002      	b.n	8009286 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2200      	movs	r2, #0
 8009284:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	2b04      	cmp	r3, #4
 800928a:	d101      	bne.n	8009290 <f_opendir+0xd0>
 800928c:	2305      	movs	r3, #5
 800928e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <f_opendir+0xdc>
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	2200      	movs	r2, #0
 800929a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	7dfa      	ldrb	r2, [r7, #23]
 80092a0:	4611      	mov	r1, r2
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fd fd78 	bl	8006d98 <unlock_fs>
 80092a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3718      	adds	r7, #24
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f107 0208 	add.w	r2, r7, #8
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff fa86 	bl	80087d4 <validate>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d115      	bne.n	80092fe <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d006      	beq.n	80092e8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fd fe82 	bl	8006fe8 <dec_lock>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fd fd4d 	bl	8006d98 <unlock_fs>
#endif
	}
	return res;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f107 0208 	add.w	r2, r7, #8
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff fa5a 	bl	80087d4 <validate>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d126      	bne.n	8009378 <f_readdir+0x70>
		if (!fno) {
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d106      	bne.n	800933e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009330:	2100      	movs	r1, #0
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7fe fadb 	bl	80078ee <dir_sdi>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
 800933c:	e01c      	b.n	8009378 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800933e:	2100      	movs	r1, #0
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7fe fcb9 	bl	8007cb8 <dir_read>
 8009346:	4603      	mov	r3, r0
 8009348:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800934a:	7bfb      	ldrb	r3, [r7, #15]
 800934c:	2b04      	cmp	r3, #4
 800934e:	d101      	bne.n	8009354 <f_readdir+0x4c>
 8009350:	2300      	movs	r3, #0
 8009352:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10e      	bne.n	8009378 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7fe fdad 	bl	8007ebc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009362:	2100      	movs	r1, #0
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fe fb4b 	bl	8007a00 <dir_next>
 800936a:	4603      	mov	r3, r0
 800936c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	2b04      	cmp	r3, #4
 8009372:	d101      	bne.n	8009378 <f_readdir+0x70>
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	4611      	mov	r1, r2
 800937e:	4618      	mov	r0, r3
 8009380:	f7fd fd0a 	bl	8006d98 <unlock_fs>
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b090      	sub	sp, #64	@ 0x40
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009398:	f107 010c 	add.w	r1, r7, #12
 800939c:	1d3b      	adds	r3, r7, #4
 800939e:	2200      	movs	r2, #0
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe ff8f 	bl	80082c4 <find_volume>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 80093ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d11f      	bne.n	80093f4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	f107 030c 	add.w	r3, r7, #12
 80093ba:	4611      	mov	r1, r2
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe fe71 	bl	80080a4 <follow_path>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80093c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d111      	bne.n	80093f4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80093d0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80093d4:	b25b      	sxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	da03      	bge.n	80093e2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80093da:	2306      	movs	r3, #6
 80093dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80093e0:	e008      	b.n	80093f4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <f_stat+0x66>
 80093e8:	f107 030c 	add.w	r3, r7, #12
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fd64 	bl	8007ebc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fd fccb 	bl	8006d98 <unlock_fs>
 8009402:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009406:	4618      	mov	r0, r3
 8009408:	3740      	adds	r7, #64	@ 0x40
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b092      	sub	sp, #72	@ 0x48
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	60b9      	str	r1, [r7, #8]
 8009418:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800941a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800941e:	f107 030c 	add.w	r3, r7, #12
 8009422:	2200      	movs	r2, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe ff4d 	bl	80082c4 <find_volume>
 800942a:	4603      	mov	r3, r0
 800942c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009430:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009434:	2b00      	cmp	r3, #0
 8009436:	f040 8099 	bne.w	800956c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800943a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009442:	699a      	ldr	r2, [r3, #24]
 8009444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	3b02      	subs	r3, #2
 800944a:	429a      	cmp	r2, r3
 800944c:	d804      	bhi.n	8009458 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800944e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e089      	b.n	800956c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d128      	bne.n	80094b6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009464:	2302      	movs	r3, #2
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800946c:	f107 0314 	add.w	r3, r7, #20
 8009470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009472:	4618      	mov	r0, r3
 8009474:	f7fd ff19 	bl	80072aa <get_fat>
 8009478:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800947a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009480:	d103      	bne.n	800948a <f_getfree+0x7c>
 8009482:	2301      	movs	r3, #1
 8009484:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009488:	e063      	b.n	8009552 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800948a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948c:	2b01      	cmp	r3, #1
 800948e:	d103      	bne.n	8009498 <f_getfree+0x8a>
 8009490:	2302      	movs	r3, #2
 8009492:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009496:	e05c      	b.n	8009552 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	2b00      	cmp	r3, #0
 800949c:	d102      	bne.n	80094a4 <f_getfree+0x96>
 800949e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094a0:	3301      	adds	r3, #1
 80094a2:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80094a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a6:	3301      	adds	r3, #1
 80094a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d3db      	bcc.n	800946c <f_getfree+0x5e>
 80094b4:	e04d      	b.n	8009552 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80094b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c0:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c6:	2300      	movs	r3, #0
 80094c8:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80094ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d113      	bne.n	80094f8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80094d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80094d8:	4619      	mov	r1, r3
 80094da:	f7fd fe29 	bl	8007130 <move_window>
 80094de:	4603      	mov	r3, r0
 80094e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 80094e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d131      	bne.n	8009550 <f_getfree+0x142>
							p = fs->win;
 80094ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ee:	3338      	adds	r3, #56	@ 0x38
 80094f0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80094f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f4:	899b      	ldrh	r3, [r3, #12]
 80094f6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80094f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d10f      	bne.n	8009520 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009502:	f7fd fb33 	bl	8006b6c <ld_word>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <f_getfree+0x104>
 800950c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800950e:	3301      	adds	r3, #1
 8009510:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	3302      	adds	r3, #2
 8009516:	633b      	str	r3, [r7, #48]	@ 0x30
 8009518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800951a:	3b02      	subs	r3, #2
 800951c:	637b      	str	r3, [r7, #52]	@ 0x34
 800951e:	e010      	b.n	8009542 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009522:	f7fd fb3b 	bl	8006b9c <ld_dword>
 8009526:	4603      	mov	r3, r0
 8009528:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <f_getfree+0x128>
 8009530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009532:	3301      	adds	r3, #1
 8009534:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	3304      	adds	r3, #4
 800953a:	633b      	str	r3, [r7, #48]	@ 0x30
 800953c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800953e:	3b04      	subs	r3, #4
 8009540:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009544:	3b01      	subs	r3, #1
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1bd      	bne.n	80094ca <f_getfree+0xbc>
 800954e:	e000      	b.n	8009552 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009550:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009556:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800955c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009560:	791a      	ldrb	r2, [r3, #4]
 8009562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009564:	f042 0201 	orr.w	r2, r2, #1
 8009568:	b2d2      	uxtb	r2, r2
 800956a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800956c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009572:	4611      	mov	r1, r2
 8009574:	4618      	mov	r0, r3
 8009576:	f7fd fc0f 	bl	8006d98 <unlock_fs>
 800957a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800957e:	4618      	mov	r0, r3
 8009580:	3748      	adds	r7, #72	@ 0x48
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b09e      	sub	sp, #120	@ 0x78
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009592:	f107 010c 	add.w	r1, r7, #12
 8009596:	1d3b      	adds	r3, r7, #4
 8009598:	2202      	movs	r2, #2
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fe92 	bl	80082c4 <find_volume>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 80095aa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f040 808e 	bne.w	80096d0 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80095ba:	4611      	mov	r1, r2
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fd71 	bl	80080a4 <follow_path>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80095c8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d108      	bne.n	80095e2 <f_unlink+0x5c>
 80095d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80095d4:	2102      	movs	r1, #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fd fbfa 	bl	8006dd0 <chk_lock>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80095e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d172      	bne.n	80096d0 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80095ea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80095ee:	b25b      	sxtb	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da03      	bge.n	80095fc <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80095f4:	2306      	movs	r3, #6
 80095f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80095fa:	e008      	b.n	800960e <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80095fc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009608:	2307      	movs	r3, #7
 800960a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800960e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009612:	2b00      	cmp	r3, #0
 8009614:	d134      	bne.n	8009680 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800961a:	4611      	mov	r1, r2
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fb0c 	bl	8007c3a <ld_clust>
 8009622:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009624:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b00      	cmp	r3, #0
 800962e:	d027      	beq.n	8009680 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009634:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009636:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009638:	f107 0310 	add.w	r3, r7, #16
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe f955 	bl	80078ee <dir_sdi>
 8009644:	4603      	mov	r3, r0
 8009646:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800964a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800964e:	2b00      	cmp	r3, #0
 8009650:	d116      	bne.n	8009680 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009652:	f107 0310 	add.w	r3, r7, #16
 8009656:	2100      	movs	r1, #0
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fb2d 	bl	8007cb8 <dir_read>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009664:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <f_unlink+0xec>
 800966c:	2307      	movs	r3, #7
 800966e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009672:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009676:	2b04      	cmp	r3, #4
 8009678:	d102      	bne.n	8009680 <f_unlink+0xfa>
 800967a:	2300      	movs	r3, #0
 800967c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8009680:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009684:	2b00      	cmp	r3, #0
 8009686:	d123      	bne.n	80096d0 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009688:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fbf7 	bl	8007e80 <dir_remove>
 8009692:	4603      	mov	r3, r0
 8009694:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009698:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10c      	bne.n	80096ba <f_unlink+0x134>
 80096a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80096a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80096aa:	2200      	movs	r2, #0
 80096ac:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fd ffe8 	bl	8007684 <remove_chain>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80096ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <f_unlink+0x14a>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fd fd61 	bl	800718c <sync_fs>
 80096ca:	4603      	mov	r3, r0
 80096cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fd fb5d 	bl	8006d98 <unlock_fs>
 80096de:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3778      	adds	r7, #120	@ 0x78
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4613      	mov	r3, r2
 80096f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096fa:	2301      	movs	r3, #1
 80096fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009702:	4b1f      	ldr	r3, [pc, #124]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 8009704:	7a5b      	ldrb	r3, [r3, #9]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	d131      	bne.n	8009770 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800970c:	4b1c      	ldr	r3, [pc, #112]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 800970e:	7a5b      	ldrb	r3, [r3, #9]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	461a      	mov	r2, r3
 8009714:	4b1a      	ldr	r3, [pc, #104]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 8009716:	2100      	movs	r1, #0
 8009718:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800971a:	4b19      	ldr	r3, [pc, #100]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 800971c:	7a5b      	ldrb	r3, [r3, #9]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	4a17      	ldr	r2, [pc, #92]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800972a:	4b15      	ldr	r3, [pc, #84]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 800972c:	7a5b      	ldrb	r3, [r3, #9]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	4b13      	ldr	r3, [pc, #76]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 8009734:	4413      	add	r3, r2
 8009736:	79fa      	ldrb	r2, [r7, #7]
 8009738:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800973a:	4b11      	ldr	r3, [pc, #68]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 800973c:	7a5b      	ldrb	r3, [r3, #9]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	b2d1      	uxtb	r1, r2
 8009744:	4a0e      	ldr	r2, [pc, #56]	@ (8009780 <FATFS_LinkDriverEx+0x94>)
 8009746:	7251      	strb	r1, [r2, #9]
 8009748:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800974a:	7dbb      	ldrb	r3, [r7, #22]
 800974c:	3330      	adds	r3, #48	@ 0x30
 800974e:	b2da      	uxtb	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	3301      	adds	r3, #1
 8009758:	223a      	movs	r2, #58	@ 0x3a
 800975a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	3302      	adds	r3, #2
 8009760:	222f      	movs	r2, #47	@ 0x2f
 8009762:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	3303      	adds	r3, #3
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009770:	7dfb      	ldrb	r3, [r7, #23]
}
 8009772:	4618      	mov	r0, r3
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	20002674 	.word	0x20002674

08009784 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800978e:	2200      	movs	r2, #0
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff ffaa 	bl	80096ec <FATFS_LinkDriverEx>
 8009798:	4603      	mov	r3, r0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b086      	sub	sp, #24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	4603      	mov	r3, r0
 80097aa:	6039      	str	r1, [r7, #0]
 80097ac:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	2300      	movs	r3, #0
 80097b4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80097b6:	f107 030c 	add.w	r3, r7, #12
 80097ba:	2101      	movs	r1, #1
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 f8e9 	bl	8009994 <osSemaphoreCreate>
 80097c2:	4602      	mov	r2, r0
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	bf14      	ite	ne
 80097d0:	2301      	movne	r3, #1
 80097d2:	2300      	moveq	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	617b      	str	r3, [r7, #20]

    return ret;
 80097d8:	697b      	ldr	r3, [r7, #20]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f988 	bl	8009b00 <osSemaphoreDelete>
#endif
    return 1;
 80097f0:	2301      	movs	r3, #1
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009806:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f8f4 	bl	80099f8 <osSemaphoreWait>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009816:	2301      	movs	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800981a:	68fb      	ldr	r3, [r7, #12]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f931 	bl	8009a94 <osSemaphoreRelease>
#endif
}
 8009832:	bf00      	nop
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	4603      	mov	r3, r0
 8009842:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800984c:	2b84      	cmp	r3, #132	@ 0x84
 800984e:	d005      	beq.n	800985c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009850:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	3303      	adds	r3, #3
 800985a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800985c:	68fb      	ldr	r3, [r7, #12]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009870:	f3ef 8305 	mrs	r3, IPSR
 8009874:	607b      	str	r3, [r7, #4]
  return(result);
 8009876:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009878:	2b00      	cmp	r3, #0
 800987a:	bf14      	ite	ne
 800987c:	2301      	movne	r3, #1
 800987e:	2300      	moveq	r3, #0
 8009880:	b2db      	uxtb	r3, r3
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009892:	f001 fc65 	bl	800b160 <vTaskStartScheduler>
  
  return osOK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	bd80      	pop	{r7, pc}

0800989c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80098a0:	f002 f8b4 	bl	800ba0c <xTaskGetSchedulerState>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <osKernelRunning+0x12>
    return 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	e000      	b.n	80098b0 <osKernelRunning+0x14>
  else
    return 1;
 80098ae:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80098b8:	f7ff ffd7 	bl	800986a <inHandlerMode>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80098c2:	f001 fd79 	bl	800b3b8 <xTaskGetTickCountFromISR>
 80098c6:	4603      	mov	r3, r0
 80098c8:	e002      	b.n	80098d0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80098ca:	f001 fd65 	bl	800b398 <xTaskGetTickCount>
 80098ce:	4603      	mov	r3, r0
  }
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80098d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d6:	b089      	sub	sp, #36	@ 0x24
 80098d8:	af04      	add	r7, sp, #16
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d020      	beq.n	8009928 <osThreadCreate+0x54>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01c      	beq.n	8009928 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685c      	ldr	r4, [r3, #4]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	691e      	ldr	r6, [r3, #16]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff ff9a 	bl	800983a <makeFreeRtosPriority>
 8009906:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009910:	9202      	str	r2, [sp, #8]
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	9100      	str	r1, [sp, #0]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	4632      	mov	r2, r6
 800991a:	4629      	mov	r1, r5
 800991c:	4620      	mov	r0, r4
 800991e:	f001 fa2f 	bl	800ad80 <xTaskCreateStatic>
 8009922:	4603      	mov	r3, r0
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	e01c      	b.n	8009962 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685c      	ldr	r4, [r3, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009934:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff ff7c 	bl	800983a <makeFreeRtosPriority>
 8009942:	4602      	mov	r2, r0
 8009944:	f107 030c 	add.w	r3, r7, #12
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	9200      	str	r2, [sp, #0]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	4632      	mov	r2, r6
 8009950:	4629      	mov	r1, r5
 8009952:	4620      	mov	r0, r4
 8009954:	f001 fa7a 	bl	800ae4c <xTaskCreate>
 8009958:	4603      	mov	r3, r0
 800995a:	2b01      	cmp	r3, #1
 800995c:	d001      	beq.n	8009962 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	e000      	b.n	8009964 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009962:	68fb      	ldr	r3, [r7, #12]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800996c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <osDelay+0x16>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	e000      	b.n	8009984 <osDelay+0x18>
 8009982:	2301      	movs	r3, #1
 8009984:	4618      	mov	r0, r3
 8009986:	f001 fbb3 	bl	800b0f0 <vTaskDelay>
  
  return osOK;
 800998a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af02      	add	r7, sp, #8
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00f      	beq.n	80099c6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d10a      	bne.n	80099c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2203      	movs	r2, #3
 80099b2:	9200      	str	r2, [sp, #0]
 80099b4:	2200      	movs	r2, #0
 80099b6:	2100      	movs	r1, #0
 80099b8:	2001      	movs	r0, #1
 80099ba:	f000 fab1 	bl	8009f20 <xQueueGenericCreateStatic>
 80099be:	4603      	mov	r3, r0
 80099c0:	e016      	b.n	80099f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e014      	b.n	80099f0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d110      	bne.n	80099ee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80099cc:	2203      	movs	r2, #3
 80099ce:	2100      	movs	r1, #0
 80099d0:	2001      	movs	r0, #1
 80099d2:	f000 fb2c 	bl	800a02e <xQueueGenericCreate>
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <osSemaphoreCreate+0x56>
 80099de:	2300      	movs	r3, #0
 80099e0:	2200      	movs	r2, #0
 80099e2:	2100      	movs	r1, #0
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 fb85 	bl	800a0f4 <xQueueGenericSend>
      return sema;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	e000      	b.n	80099f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80099ee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009a02:	2300      	movs	r3, #0
 8009a04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009a0c:	2380      	movs	r3, #128	@ 0x80
 8009a0e:	e03a      	b.n	8009a86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d103      	bne.n	8009a24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e009      	b.n	8009a38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d006      	beq.n	8009a38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <osSemaphoreWait+0x40>
      ticks = 1;
 8009a34:	2301      	movs	r3, #1
 8009a36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009a38:	f7ff ff17 	bl	800986a <inHandlerMode>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d017      	beq.n	8009a72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	461a      	mov	r2, r3
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 ff98 	bl	800a980 <xQueueReceiveFromISR>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d001      	beq.n	8009a5a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009a56:	23ff      	movs	r3, #255	@ 0xff
 8009a58:	e015      	b.n	8009a86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d011      	beq.n	8009a84 <osSemaphoreWait+0x8c>
 8009a60:	4b0b      	ldr	r3, [pc, #44]	@ (8009a90 <osSemaphoreWait+0x98>)
 8009a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	e008      	b.n	8009a84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009a72:	68f9      	ldr	r1, [r7, #12]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fe6b 	bl	800a750 <xQueueSemaphoreTake>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d001      	beq.n	8009a84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009a80:	23ff      	movs	r3, #255	@ 0xff
 8009a82:	e000      	b.n	8009a86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009aa4:	f7ff fee1 	bl	800986a <inHandlerMode>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d016      	beq.n	8009adc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009aae:	f107 0308 	add.w	r3, r7, #8
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fcca 	bl	800a44e <xQueueGiveFromISR>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d001      	beq.n	8009ac4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009ac0:	23ff      	movs	r3, #255	@ 0xff
 8009ac2:	e017      	b.n	8009af4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d013      	beq.n	8009af2 <osSemaphoreRelease+0x5e>
 8009aca:	4b0c      	ldr	r3, [pc, #48]	@ (8009afc <osSemaphoreRelease+0x68>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	e00a      	b.n	8009af2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009adc:	2300      	movs	r3, #0
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fb06 	bl	800a0f4 <xQueueGenericSend>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d001      	beq.n	8009af2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009aee:	23ff      	movs	r3, #255	@ 0xff
 8009af0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009b08:	f7ff feaf 	bl	800986a <inHandlerMode>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009b12:	2382      	movs	r3, #130	@ 0x82
 8009b14:	e003      	b.n	8009b1e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 ffba 	bl	800aa90 <vQueueDelete>

  return osOK; 
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009b26:	b590      	push	{r4, r7, lr}
 8009b28:	b085      	sub	sp, #20
 8009b2a:	af02      	add	r7, sp, #8
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d011      	beq.n	8009b5c <osMessageCreate+0x36>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00d      	beq.n	8009b5c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6818      	ldr	r0, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6859      	ldr	r1, [r3, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2400      	movs	r4, #0
 8009b52:	9400      	str	r4, [sp, #0]
 8009b54:	f000 f9e4 	bl	8009f20 <xQueueGenericCreateStatic>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	e008      	b.n	8009b6e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	4619      	mov	r1, r3
 8009b68:	f000 fa61 	bl	800a02e <xQueueGenericCreate>
 8009b6c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}
	...

08009b78 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009b84:	2300      	movs	r3, #0
 8009b86:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <osMessagePut+0x1e>
    ticks = 1;
 8009b92:	2301      	movs	r3, #1
 8009b94:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009b96:	f7ff fe68 	bl	800986a <inHandlerMode>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d018      	beq.n	8009bd2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009ba0:	f107 0210 	add.w	r2, r7, #16
 8009ba4:	f107 0108 	add.w	r1, r7, #8
 8009ba8:	2300      	movs	r3, #0
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 fbac 	bl	800a308 <xQueueGenericSendFromISR>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d001      	beq.n	8009bba <osMessagePut+0x42>
      return osErrorOS;
 8009bb6:	23ff      	movs	r3, #255	@ 0xff
 8009bb8:	e018      	b.n	8009bec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d014      	beq.n	8009bea <osMessagePut+0x72>
 8009bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf4 <osMessagePut+0x7c>)
 8009bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	e00b      	b.n	8009bea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009bd2:	f107 0108 	add.w	r1, r7, #8
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 fa8a 	bl	800a0f4 <xQueueGenericSend>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d001      	beq.n	8009bea <osMessagePut+0x72>
      return osErrorOS;
 8009be6:	23ff      	movs	r3, #255	@ 0xff
 8009be8:	e000      	b.n	8009bec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	e000ed04 	.word	0xe000ed04

08009bf8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009bf8:	b590      	push	{r4, r7, lr}
 8009bfa:	b08b      	sub	sp, #44	@ 0x2c
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009c12:	2380      	movs	r3, #128	@ 0x80
 8009c14:	617b      	str	r3, [r7, #20]
    return event;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	461c      	mov	r4, r3
 8009c1a:	f107 0314 	add.w	r3, r7, #20
 8009c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c26:	e054      	b.n	8009cd2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c36:	d103      	bne.n	8009c40 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009c38:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c3e:	e009      	b.n	8009c54 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d006      	beq.n	8009c54 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <osMessageGet+0x5c>
      ticks = 1;
 8009c50:	2301      	movs	r3, #1
 8009c52:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009c54:	f7ff fe09 	bl	800986a <inHandlerMode>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01c      	beq.n	8009c98 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009c5e:	f107 0220 	add.w	r2, r7, #32
 8009c62:	f107 0314 	add.w	r3, r7, #20
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	68b8      	ldr	r0, [r7, #8]
 8009c6c:	f000 fe88 	bl	800a980 <xQueueReceiveFromISR>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d102      	bne.n	8009c7c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009c76:	2310      	movs	r3, #16
 8009c78:	617b      	str	r3, [r7, #20]
 8009c7a:	e001      	b.n	8009c80 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d01d      	beq.n	8009cc2 <osMessageGet+0xca>
 8009c86:	4b15      	ldr	r3, [pc, #84]	@ (8009cdc <osMessageGet+0xe4>)
 8009c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	e014      	b.n	8009cc2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009c98:	f107 0314 	add.w	r3, r7, #20
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	68b8      	ldr	r0, [r7, #8]
 8009ca4:	f000 fc6c 	bl	800a580 <xQueueReceive>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d102      	bne.n	8009cb4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009cae:	2310      	movs	r3, #16
 8009cb0:	617b      	str	r3, [r7, #20]
 8009cb2:	e006      	b.n	8009cc2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <osMessageGet+0xc6>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e000      	b.n	8009cc0 <osMessageGet+0xc8>
 8009cbe:	2340      	movs	r3, #64	@ 0x40
 8009cc0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	461c      	mov	r4, r3
 8009cc6:	f107 0314 	add.w	r3, r7, #20
 8009cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	372c      	adds	r7, #44	@ 0x2c
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd90      	pop	{r4, r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f103 0208 	add.w	r2, r3, #8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f103 0208 	add.w	r2, r3, #8
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f103 0208 	add.w	r2, r3, #8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d2e:	bf00      	nop
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	601a      	str	r2, [r3, #0]
}
 8009d76:	bf00      	nop
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d98:	d103      	bne.n	8009da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	e00c      	b.n	8009dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3308      	adds	r3, #8
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e002      	b.n	8009db0 <vListInsert+0x2e>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d2f6      	bcs.n	8009daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	601a      	str	r2, [r3, #0]
}
 8009de8:	bf00      	nop
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6892      	ldr	r2, [r2, #8]
 8009e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6852      	ldr	r2, [r2, #4]
 8009e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d103      	bne.n	8009e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	1e5a      	subs	r2, r3, #1
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10d      	bne.n	8009e78 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	b672      	cpsid	i
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	b662      	cpsie	i
 8009e70:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	e7fd      	b.n	8009e74 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009e78:	f002 f918 	bl	800c0ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e84:	68f9      	ldr	r1, [r7, #12]
 8009e86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e88:	fb01 f303 	mul.w	r3, r1, r3
 8009e8c:	441a      	add	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	68f9      	ldr	r1, [r7, #12]
 8009eac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009eae:	fb01 f303 	mul.w	r3, r1, r3
 8009eb2:	441a      	add	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	22ff      	movs	r2, #255	@ 0xff
 8009ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	22ff      	movs	r2, #255	@ 0xff
 8009ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d114      	bne.n	8009ef8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d01a      	beq.n	8009f0c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3310      	adds	r3, #16
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 fbc8 	bl	800b670 <xTaskRemoveFromEventList>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d012      	beq.n	8009f0c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8009f1c <xQueueGenericReset+0xd4>)
 8009ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	e009      	b.n	8009f0c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3310      	adds	r3, #16
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff feef 	bl	8009ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3324      	adds	r3, #36	@ 0x24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff feea 	bl	8009ce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f0c:	f002 f904 	bl	800c118 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f10:	2301      	movs	r3, #1
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08e      	sub	sp, #56	@ 0x38
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10d      	bne.n	8009f50 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f38:	b672      	cpsid	i
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	b662      	cpsie	i
 8009f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f4a:	bf00      	nop
 8009f4c:	bf00      	nop
 8009f4e:	e7fd      	b.n	8009f4c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10d      	bne.n	8009f72 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5a:	b672      	cpsid	i
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	b662      	cpsie	i
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	e7fd      	b.n	8009f6e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <xQueueGenericCreateStatic+0x5e>
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <xQueueGenericCreateStatic+0x62>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <xQueueGenericCreateStatic+0x64>
 8009f82:	2300      	movs	r3, #0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10d      	bne.n	8009fa4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8c:	b672      	cpsid	i
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	b662      	cpsie	i
 8009f9c:	623b      	str	r3, [r7, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	bf00      	nop
 8009fa2:	e7fd      	b.n	8009fa0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <xQueueGenericCreateStatic+0x90>
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <xQueueGenericCreateStatic+0x94>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e000      	b.n	8009fb6 <xQueueGenericCreateStatic+0x96>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10d      	bne.n	8009fd6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbe:	b672      	cpsid	i
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	b662      	cpsie	i
 8009fce:	61fb      	str	r3, [r7, #28]
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	e7fd      	b.n	8009fd2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fd6:	2348      	movs	r3, #72	@ 0x48
 8009fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b48      	cmp	r3, #72	@ 0x48
 8009fde:	d00d      	beq.n	8009ffc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	b672      	cpsid	i
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	b662      	cpsie	i
 8009ff4:	61bb      	str	r3, [r7, #24]
}
 8009ff6:	bf00      	nop
 8009ff8:	bf00      	nop
 8009ffa:	e7fd      	b.n	8009ff8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ffc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00d      	beq.n	800a024 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a010:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	4613      	mov	r3, r2
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 f848 	bl	800a0b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a026:	4618      	mov	r0, r3
 800a028:	3730      	adds	r7, #48	@ 0x30
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b08a      	sub	sp, #40	@ 0x28
 800a032:	af02      	add	r7, sp, #8
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	4613      	mov	r3, r2
 800a03a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10d      	bne.n	800a05e <xQueueGenericCreate+0x30>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a046:	b672      	cpsid	i
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	b662      	cpsie	i
 800a056:	613b      	str	r3, [r7, #16]
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	e7fd      	b.n	800a05a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	e004      	b.n	800a074 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	fb02 f303 	mul.w	r3, r2, r3
 800a072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	3348      	adds	r3, #72	@ 0x48
 800a078:	4618      	mov	r0, r3
 800a07a:	f002 f945 	bl	800c308 <pvPortMalloc>
 800a07e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d011      	beq.n	800a0aa <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	3348      	adds	r3, #72	@ 0x48
 800a08e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a098:	79fa      	ldrb	r2, [r7, #7]
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	68b9      	ldr	r1, [r7, #8]
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f000 f805 	bl	800a0b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0aa:	69bb      	ldr	r3, [r7, #24]
	}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3720      	adds	r7, #32
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d103      	bne.n	800a0d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e002      	b.n	800a0d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	69b8      	ldr	r0, [r7, #24]
 800a0e6:	f7ff feaf 	bl	8009e48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b08e      	sub	sp, #56	@ 0x38
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a102:	2300      	movs	r3, #0
 800a104:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10d      	bne.n	800a12c <xQueueGenericSend+0x38>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a114:	b672      	cpsid	i
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	b662      	cpsie	i
 800a124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a126:	bf00      	nop
 800a128:	bf00      	nop
 800a12a:	e7fd      	b.n	800a128 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d103      	bne.n	800a13a <xQueueGenericSend+0x46>
 800a132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <xQueueGenericSend+0x4a>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <xQueueGenericSend+0x4c>
 800a13e:	2300      	movs	r3, #0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10d      	bne.n	800a160 <xQueueGenericSend+0x6c>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	b672      	cpsid	i
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	b662      	cpsie	i
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	e7fd      	b.n	800a15c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b02      	cmp	r3, #2
 800a164:	d103      	bne.n	800a16e <xQueueGenericSend+0x7a>
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d101      	bne.n	800a172 <xQueueGenericSend+0x7e>
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <xQueueGenericSend+0x80>
 800a172:	2300      	movs	r3, #0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10d      	bne.n	800a194 <xQueueGenericSend+0xa0>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17c:	b672      	cpsid	i
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	b662      	cpsie	i
 800a18c:	623b      	str	r3, [r7, #32]
}
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
 800a192:	e7fd      	b.n	800a190 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a194:	f001 fc3a 	bl	800ba0c <xTaskGetSchedulerState>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <xQueueGenericSend+0xb0>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <xQueueGenericSend+0xb4>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e000      	b.n	800a1aa <xQueueGenericSend+0xb6>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10d      	bne.n	800a1ca <xQueueGenericSend+0xd6>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	b672      	cpsid	i
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	b662      	cpsie	i
 800a1c2:	61fb      	str	r3, [r7, #28]
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	e7fd      	b.n	800a1c6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1ca:	f001 ff6f 	bl	800c0ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d302      	bcc.n	800a1e0 <xQueueGenericSend+0xec>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d129      	bne.n	800a234 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1e6:	f000 fc91 	bl	800ab0c <prvCopyDataToQueue>
 800a1ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d010      	beq.n	800a216 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f6:	3324      	adds	r3, #36	@ 0x24
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f001 fa39 	bl	800b670 <xTaskRemoveFromEventList>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d013      	beq.n	800a22c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a204:	4b3f      	ldr	r3, [pc, #252]	@ (800a304 <xQueueGenericSend+0x210>)
 800a206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	e00a      	b.n	800a22c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a21c:	4b39      	ldr	r3, [pc, #228]	@ (800a304 <xQueueGenericSend+0x210>)
 800a21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a22c:	f001 ff74 	bl	800c118 <vPortExitCritical>
				return pdPASS;
 800a230:	2301      	movs	r3, #1
 800a232:	e063      	b.n	800a2fc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d103      	bne.n	800a242 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a23a:	f001 ff6d 	bl	800c118 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	e05c      	b.n	800a2fc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a244:	2b00      	cmp	r3, #0
 800a246:	d106      	bne.n	800a256 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a248:	f107 0314 	add.w	r3, r7, #20
 800a24c:	4618      	mov	r0, r3
 800a24e:	f001 fa75 	bl	800b73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a252:	2301      	movs	r3, #1
 800a254:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a256:	f001 ff5f 	bl	800c118 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a25a:	f000 ffef 	bl	800b23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a25e:	f001 ff25 	bl	800c0ac <vPortEnterCritical>
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a268:	b25b      	sxtb	r3, r3
 800a26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26e:	d103      	bne.n	800a278 <xQueueGenericSend+0x184>
 800a270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a27e:	b25b      	sxtb	r3, r3
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a284:	d103      	bne.n	800a28e <xQueueGenericSend+0x19a>
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a28e:	f001 ff43 	bl	800c118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a292:	1d3a      	adds	r2, r7, #4
 800a294:	f107 0314 	add.w	r3, r7, #20
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f001 fa64 	bl	800b768 <xTaskCheckForTimeOut>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d124      	bne.n	800a2f0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2a8:	f000 fd28 	bl	800acfc <prvIsQueueFull>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d018      	beq.n	800a2e4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	3310      	adds	r3, #16
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 f9b0 	bl	800b620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2c2:	f000 fcb3 	bl	800ac2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2c6:	f000 ffc7 	bl	800b258 <xTaskResumeAll>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f47f af7c 	bne.w	800a1ca <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800a2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a304 <xQueueGenericSend+0x210>)
 800a2d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	e772      	b.n	800a1ca <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2e6:	f000 fca1 	bl	800ac2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2ea:	f000 ffb5 	bl	800b258 <xTaskResumeAll>
 800a2ee:	e76c      	b.n	800a1ca <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2f2:	f000 fc9b 	bl	800ac2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2f6:	f000 ffaf 	bl	800b258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3738      	adds	r7, #56	@ 0x38
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08e      	sub	sp, #56	@ 0x38
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10d      	bne.n	800a33c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	b672      	cpsid	i
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	b662      	cpsie	i
 800a334:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a336:	bf00      	nop
 800a338:	bf00      	nop
 800a33a:	e7fd      	b.n	800a338 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d103      	bne.n	800a34a <xQueueGenericSendFromISR+0x42>
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <xQueueGenericSendFromISR+0x46>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <xQueueGenericSendFromISR+0x48>
 800a34e:	2300      	movs	r3, #0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10d      	bne.n	800a370 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a358:	b672      	cpsid	i
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	b662      	cpsie	i
 800a368:	623b      	str	r3, [r7, #32]
}
 800a36a:	bf00      	nop
 800a36c:	bf00      	nop
 800a36e:	e7fd      	b.n	800a36c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d103      	bne.n	800a37e <xQueueGenericSendFromISR+0x76>
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d101      	bne.n	800a382 <xQueueGenericSendFromISR+0x7a>
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <xQueueGenericSendFromISR+0x7c>
 800a382:	2300      	movs	r3, #0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10d      	bne.n	800a3a4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38c:	b672      	cpsid	i
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	b662      	cpsie	i
 800a39c:	61fb      	str	r3, [r7, #28]
}
 800a39e:	bf00      	nop
 800a3a0:	bf00      	nop
 800a3a2:	e7fd      	b.n	800a3a0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3a4:	f001 ff6a 	bl	800c27c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3a8:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b0:	b672      	cpsid	i
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	b662      	cpsie	i
 800a3c0:	61ba      	str	r2, [r7, #24]
 800a3c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d302      	bcc.n	800a3da <xQueueGenericSendFromISR+0xd2>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d12c      	bne.n	800a434 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	68b9      	ldr	r1, [r7, #8]
 800a3e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3ea:	f000 fb8f 	bl	800ab0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f6:	d112      	bne.n	800a41e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d016      	beq.n	800a42e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	3324      	adds	r3, #36	@ 0x24
 800a404:	4618      	mov	r0, r3
 800a406:	f001 f933 	bl	800b670 <xTaskRemoveFromEventList>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00e      	beq.n	800a42e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00b      	beq.n	800a42e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	e007      	b.n	800a42e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a41e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a422:	3301      	adds	r3, #1
 800a424:	b2db      	uxtb	r3, r3
 800a426:	b25a      	sxtb	r2, r3
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a42e:	2301      	movs	r3, #1
 800a430:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a432:	e001      	b.n	800a438 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a434:	2300      	movs	r3, #0
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
 800a438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a43a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a442:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a446:	4618      	mov	r0, r3
 800a448:	3738      	adds	r7, #56	@ 0x38
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b08e      	sub	sp, #56	@ 0x38
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10d      	bne.n	800a47e <xQueueGiveFromISR+0x30>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a466:	b672      	cpsid	i
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	b662      	cpsie	i
 800a476:	623b      	str	r3, [r7, #32]
}
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	e7fd      	b.n	800a47a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00d      	beq.n	800a4a2 <xQueueGiveFromISR+0x54>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	b672      	cpsid	i
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	b662      	cpsie	i
 800a49a:	61fb      	str	r3, [r7, #28]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <xQueueGiveFromISR+0x64>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <xQueueGiveFromISR+0x68>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <xQueueGiveFromISR+0x6a>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10d      	bne.n	800a4d8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c0:	b672      	cpsid	i
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	b662      	cpsie	i
 800a4d0:	61bb      	str	r3, [r7, #24]
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4d8:	f001 fed0 	bl	800c27c <vPortValidateInterruptPriority>
	__asm volatile
 800a4dc:	f3ef 8211 	mrs	r2, BASEPRI
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	b672      	cpsid	i
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	b662      	cpsie	i
 800a4f4:	617a      	str	r2, [r7, #20]
 800a4f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a4f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a500:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a508:	429a      	cmp	r2, r3
 800a50a:	d22b      	bcs.n	800a564 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a51e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a526:	d112      	bne.n	800a54e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d016      	beq.n	800a55e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	3324      	adds	r3, #36	@ 0x24
 800a534:	4618      	mov	r0, r3
 800a536:	f001 f89b 	bl	800b670 <xTaskRemoveFromEventList>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00e      	beq.n	800a55e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00b      	beq.n	800a55e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2201      	movs	r2, #1
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	e007      	b.n	800a55e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a54e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a552:	3301      	adds	r3, #1
 800a554:	b2db      	uxtb	r3, r3
 800a556:	b25a      	sxtb	r2, r3
 800a558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a55e:	2301      	movs	r3, #1
 800a560:	637b      	str	r3, [r7, #52]	@ 0x34
 800a562:	e001      	b.n	800a568 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a564:	2300      	movs	r3, #0
 800a566:	637b      	str	r3, [r7, #52]	@ 0x34
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f383 8811 	msr	BASEPRI, r3
}
 800a572:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a576:	4618      	mov	r0, r3
 800a578:	3738      	adds	r7, #56	@ 0x38
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08c      	sub	sp, #48	@ 0x30
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10d      	bne.n	800a5b6 <xQueueReceive+0x36>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	b672      	cpsid	i
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	b662      	cpsie	i
 800a5ae:	623b      	str	r3, [r7, #32]
}
 800a5b0:	bf00      	nop
 800a5b2:	bf00      	nop
 800a5b4:	e7fd      	b.n	800a5b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d103      	bne.n	800a5c4 <xQueueReceive+0x44>
 800a5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <xQueueReceive+0x48>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e000      	b.n	800a5ca <xQueueReceive+0x4a>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10d      	bne.n	800a5ea <xQueueReceive+0x6a>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d2:	b672      	cpsid	i
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	b662      	cpsie	i
 800a5e2:	61fb      	str	r3, [r7, #28]
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	e7fd      	b.n	800a5e6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5ea:	f001 fa0f 	bl	800ba0c <xTaskGetSchedulerState>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <xQueueReceive+0x7a>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <xQueueReceive+0x7e>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e000      	b.n	800a600 <xQueueReceive+0x80>
 800a5fe:	2300      	movs	r3, #0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10d      	bne.n	800a620 <xQueueReceive+0xa0>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a608:	b672      	cpsid	i
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	b662      	cpsie	i
 800a618:	61bb      	str	r3, [r7, #24]
}
 800a61a:	bf00      	nop
 800a61c:	bf00      	nop
 800a61e:	e7fd      	b.n	800a61c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a620:	f001 fd44 	bl	800c0ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a628:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d01f      	beq.n	800a670 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a634:	f000 fad4 	bl	800abe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63a:	1e5a      	subs	r2, r3, #1
 800a63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00f      	beq.n	800a668 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	3310      	adds	r3, #16
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 f80f 	bl	800b670 <xTaskRemoveFromEventList>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d007      	beq.n	800a668 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a658:	4b3c      	ldr	r3, [pc, #240]	@ (800a74c <xQueueReceive+0x1cc>)
 800a65a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a668:	f001 fd56 	bl	800c118 <vPortExitCritical>
				return pdPASS;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e069      	b.n	800a744 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a676:	f001 fd4f 	bl	800c118 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e062      	b.n	800a744 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a680:	2b00      	cmp	r3, #0
 800a682:	d106      	bne.n	800a692 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a684:	f107 0310 	add.w	r3, r7, #16
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 f857 	bl	800b73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a68e:	2301      	movs	r3, #1
 800a690:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a692:	f001 fd41 	bl	800c118 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a696:	f000 fdd1 	bl	800b23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a69a:	f001 fd07 	bl	800c0ac <vPortEnterCritical>
 800a69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6a4:	b25b      	sxtb	r3, r3
 800a6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6aa:	d103      	bne.n	800a6b4 <xQueueReceive+0x134>
 800a6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6ba:	b25b      	sxtb	r3, r3
 800a6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c0:	d103      	bne.n	800a6ca <xQueueReceive+0x14a>
 800a6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6ca:	f001 fd25 	bl	800c118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6ce:	1d3a      	adds	r2, r7, #4
 800a6d0:	f107 0310 	add.w	r3, r7, #16
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f001 f846 	bl	800b768 <xTaskCheckForTimeOut>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d123      	bne.n	800a72a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6e4:	f000 faf4 	bl	800acd0 <prvIsQueueEmpty>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d017      	beq.n	800a71e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f0:	3324      	adds	r3, #36	@ 0x24
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 ff92 	bl	800b620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6fe:	f000 fa95 	bl	800ac2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a702:	f000 fda9 	bl	800b258 <xTaskResumeAll>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d189      	bne.n	800a620 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800a70c:	4b0f      	ldr	r3, [pc, #60]	@ (800a74c <xQueueReceive+0x1cc>)
 800a70e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	e780      	b.n	800a620 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a71e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a720:	f000 fa84 	bl	800ac2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a724:	f000 fd98 	bl	800b258 <xTaskResumeAll>
 800a728:	e77a      	b.n	800a620 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a72a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a72c:	f000 fa7e 	bl	800ac2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a730:	f000 fd92 	bl	800b258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a736:	f000 facb 	bl	800acd0 <prvIsQueueEmpty>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f43f af6f 	beq.w	800a620 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a742:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a744:	4618      	mov	r0, r3
 800a746:	3730      	adds	r7, #48	@ 0x30
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	e000ed04 	.word	0xe000ed04

0800a750 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08e      	sub	sp, #56	@ 0x38
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a762:	2300      	movs	r3, #0
 800a764:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10d      	bne.n	800a788 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a770:	b672      	cpsid	i
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	b662      	cpsie	i
 800a780:	623b      	str	r3, [r7, #32]
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00d      	beq.n	800a7ac <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	b672      	cpsid	i
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	b662      	cpsie	i
 800a7a4:	61fb      	str	r3, [r7, #28]
}
 800a7a6:	bf00      	nop
 800a7a8:	bf00      	nop
 800a7aa:	e7fd      	b.n	800a7a8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7ac:	f001 f92e 	bl	800ba0c <xTaskGetSchedulerState>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <xQueueSemaphoreTake+0x6c>
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <xQueueSemaphoreTake+0x70>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e000      	b.n	800a7c2 <xQueueSemaphoreTake+0x72>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10d      	bne.n	800a7e2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	b672      	cpsid	i
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	b662      	cpsie	i
 800a7da:	61bb      	str	r3, [r7, #24]
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	e7fd      	b.n	800a7de <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7e2:	f001 fc63 	bl	800c0ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d024      	beq.n	800a83c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	1e5a      	subs	r2, r3, #1
 800a7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d104      	bne.n	800a80c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a802:	f001 facd 	bl	800bda0 <pvTaskIncrementMutexHeldCount>
 800a806:	4602      	mov	r2, r0
 800a808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00f      	beq.n	800a834 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a816:	3310      	adds	r3, #16
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 ff29 	bl	800b670 <xTaskRemoveFromEventList>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d007      	beq.n	800a834 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a824:	4b55      	ldr	r3, [pc, #340]	@ (800a97c <xQueueSemaphoreTake+0x22c>)
 800a826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a834:	f001 fc70 	bl	800c118 <vPortExitCritical>
				return pdPASS;
 800a838:	2301      	movs	r3, #1
 800a83a:	e09a      	b.n	800a972 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d114      	bne.n	800a86c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00d      	beq.n	800a864 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84c:	b672      	cpsid	i
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	b662      	cpsie	i
 800a85c:	617b      	str	r3, [r7, #20]
}
 800a85e:	bf00      	nop
 800a860:	bf00      	nop
 800a862:	e7fd      	b.n	800a860 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a864:	f001 fc58 	bl	800c118 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a868:	2300      	movs	r3, #0
 800a86a:	e082      	b.n	800a972 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d106      	bne.n	800a880 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a872:	f107 030c 	add.w	r3, r7, #12
 800a876:	4618      	mov	r0, r3
 800a878:	f000 ff60 	bl	800b73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a87c:	2301      	movs	r3, #1
 800a87e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a880:	f001 fc4a 	bl	800c118 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a884:	f000 fcda 	bl	800b23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a888:	f001 fc10 	bl	800c0ac <vPortEnterCritical>
 800a88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a892:	b25b      	sxtb	r3, r3
 800a894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a898:	d103      	bne.n	800a8a2 <xQueueSemaphoreTake+0x152>
 800a89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8a8:	b25b      	sxtb	r3, r3
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ae:	d103      	bne.n	800a8b8 <xQueueSemaphoreTake+0x168>
 800a8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8b8:	f001 fc2e 	bl	800c118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8bc:	463a      	mov	r2, r7
 800a8be:	f107 030c 	add.w	r3, r7, #12
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 ff4f 	bl	800b768 <xTaskCheckForTimeOut>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d132      	bne.n	800a936 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8d2:	f000 f9fd 	bl	800acd0 <prvIsQueueEmpty>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d026      	beq.n	800a92a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d109      	bne.n	800a8f8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800a8e4:	f001 fbe2 	bl	800c0ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f001 f8ab 	bl	800ba48 <xTaskPriorityInherit>
 800a8f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a8f4:	f001 fc10 	bl	800c118 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fa:	3324      	adds	r3, #36	@ 0x24
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	4611      	mov	r1, r2
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fe8d 	bl	800b620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a906:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a908:	f000 f990 	bl	800ac2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a90c:	f000 fca4 	bl	800b258 <xTaskResumeAll>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	f47f af65 	bne.w	800a7e2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800a918:	4b18      	ldr	r3, [pc, #96]	@ (800a97c <xQueueSemaphoreTake+0x22c>)
 800a91a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	e75b      	b.n	800a7e2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a92a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a92c:	f000 f97e 	bl	800ac2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a930:	f000 fc92 	bl	800b258 <xTaskResumeAll>
 800a934:	e755      	b.n	800a7e2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a936:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a938:	f000 f978 	bl	800ac2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a93c:	f000 fc8c 	bl	800b258 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a942:	f000 f9c5 	bl	800acd0 <prvIsQueueEmpty>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f43f af4a 	beq.w	800a7e2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00d      	beq.n	800a970 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800a954:	f001 fbaa 	bl	800c0ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a958:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a95a:	f000 f8bf 	bl	800aadc <prvGetDisinheritPriorityAfterTimeout>
 800a95e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a966:	4618      	mov	r0, r3
 800a968:	f001 f97a 	bl	800bc60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a96c:	f001 fbd4 	bl	800c118 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a970:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a972:	4618      	mov	r0, r3
 800a974:	3738      	adds	r7, #56	@ 0x38
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08e      	sub	sp, #56	@ 0x38
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10d      	bne.n	800a9b2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99a:	b672      	cpsid	i
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	b662      	cpsie	i
 800a9aa:	623b      	str	r3, [r7, #32]
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	e7fd      	b.n	800a9ae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d103      	bne.n	800a9c0 <xQueueReceiveFromISR+0x40>
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <xQueueReceiveFromISR+0x44>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e000      	b.n	800a9c6 <xQueueReceiveFromISR+0x46>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10d      	bne.n	800a9e6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ce:	b672      	cpsid	i
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	b662      	cpsie	i
 800a9de:	61fb      	str	r3, [r7, #28]
}
 800a9e0:	bf00      	nop
 800a9e2:	bf00      	nop
 800a9e4:	e7fd      	b.n	800a9e2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9e6:	f001 fc49 	bl	800c27c <vPortValidateInterruptPriority>
	__asm volatile
 800a9ea:	f3ef 8211 	mrs	r2, BASEPRI
 800a9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f2:	b672      	cpsid	i
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	b662      	cpsie	i
 800aa02:	61ba      	str	r2, [r7, #24]
 800aa04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d02f      	beq.n	800aa76 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa24:	f000 f8dc 	bl	800abe0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2a:	1e5a      	subs	r2, r3, #1
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa38:	d112      	bne.n	800aa60 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d016      	beq.n	800aa70 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	3310      	adds	r3, #16
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fe12 	bl	800b670 <xTaskRemoveFromEventList>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00e      	beq.n	800aa70 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	e007      	b.n	800aa70 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa64:	3301      	adds	r3, #1
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	b25a      	sxtb	r2, r3
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aa70:	2301      	movs	r3, #1
 800aa72:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa74:	e001      	b.n	800aa7a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f383 8811 	msr	BASEPRI, r3
}
 800aa84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3738      	adds	r7, #56	@ 0x38
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10d      	bne.n	800aabe <vQueueDelete+0x2e>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa6:	b672      	cpsid	i
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	b662      	cpsie	i
 800aab6:	60bb      	str	r3, [r7, #8]
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	e7fd      	b.n	800aaba <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f934 	bl	800ad2c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d102      	bne.n	800aad4 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f001 fce8 	bl	800c4a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d006      	beq.n	800aafa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f1c3 0307 	rsb	r3, r3, #7
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	e001      	b.n	800aafe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aafa:	2300      	movs	r3, #0
 800aafc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aafe:	68fb      	ldr	r3, [r7, #12]
	}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10d      	bne.n	800ab46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d14d      	bne.n	800abce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f001 f806 	bl	800bb48 <xTaskPriorityDisinherit>
 800ab3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	609a      	str	r2, [r3, #8]
 800ab44:	e043      	b.n	800abce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d119      	bne.n	800ab80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6858      	ldr	r0, [r3, #4]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab54:	461a      	mov	r2, r3
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	f002 f989 	bl	800ce6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab64:	441a      	add	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d32b      	bcc.n	800abce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	605a      	str	r2, [r3, #4]
 800ab7e:	e026      	b.n	800abce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	68d8      	ldr	r0, [r3, #12]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab88:	461a      	mov	r2, r3
 800ab8a:	68b9      	ldr	r1, [r7, #8]
 800ab8c:	f002 f96f 	bl	800ce6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	68da      	ldr	r2, [r3, #12]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab98:	425b      	negs	r3, r3
 800ab9a:	441a      	add	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	68da      	ldr	r2, [r3, #12]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d207      	bcs.n	800abbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	689a      	ldr	r2, [r3, #8]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb4:	425b      	negs	r3, r3
 800abb6:	441a      	add	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d105      	bne.n	800abce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	3b01      	subs	r3, #1
 800abcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800abd6:	697b      	ldr	r3, [r7, #20]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d018      	beq.n	800ac24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68da      	ldr	r2, [r3, #12]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abfa:	441a      	add	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68da      	ldr	r2, [r3, #12]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d303      	bcc.n	800ac14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68d9      	ldr	r1, [r3, #12]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6838      	ldr	r0, [r7, #0]
 800ac20:	f002 f925 	bl	800ce6e <memcpy>
	}
}
 800ac24:	bf00      	nop
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac34:	f001 fa3a 	bl	800c0ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac40:	e011      	b.n	800ac66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d012      	beq.n	800ac70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3324      	adds	r3, #36	@ 0x24
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 fd0e 	bl	800b670 <xTaskRemoveFromEventList>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac5a:	f000 fded 	bl	800b838 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dce9      	bgt.n	800ac42 <prvUnlockQueue+0x16>
 800ac6e:	e000      	b.n	800ac72 <prvUnlockQueue+0x46>
					break;
 800ac70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	22ff      	movs	r2, #255	@ 0xff
 800ac76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac7a:	f001 fa4d 	bl	800c118 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac7e:	f001 fa15 	bl	800c0ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac8a:	e011      	b.n	800acb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d012      	beq.n	800acba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3310      	adds	r3, #16
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fce9 	bl	800b670 <xTaskRemoveFromEventList>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aca4:	f000 fdc8 	bl	800b838 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	3b01      	subs	r3, #1
 800acac:	b2db      	uxtb	r3, r3
 800acae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	dce9      	bgt.n	800ac8c <prvUnlockQueue+0x60>
 800acb8:	e000      	b.n	800acbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	22ff      	movs	r2, #255	@ 0xff
 800acc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800acc4:	f001 fa28 	bl	800c118 <vPortExitCritical>
}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acd8:	f001 f9e8 	bl	800c0ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	60fb      	str	r3, [r7, #12]
 800ace8:	e001      	b.n	800acee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acee:	f001 fa13 	bl	800c118 <vPortExitCritical>

	return xReturn;
 800acf2:	68fb      	ldr	r3, [r7, #12]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad04:	f001 f9d2 	bl	800c0ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d102      	bne.n	800ad1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	e001      	b.n	800ad1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad1e:	f001 f9fb 	bl	800c118 <vPortExitCritical>

	return xReturn;
 800ad22:	68fb      	ldr	r3, [r7, #12]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad34:	2300      	movs	r3, #0
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	e016      	b.n	800ad68 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad3a:	4a10      	ldr	r2, [pc, #64]	@ (800ad7c <vQueueUnregisterQueue+0x50>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	4413      	add	r3, r2
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d10b      	bne.n	800ad62 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad7c <vQueueUnregisterQueue+0x50>)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2100      	movs	r1, #0
 800ad50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad54:	4a09      	ldr	r2, [pc, #36]	@ (800ad7c <vQueueUnregisterQueue+0x50>)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	4413      	add	r3, r2
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	605a      	str	r2, [r3, #4]
				break;
 800ad60:	e006      	b.n	800ad70 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3301      	adds	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b07      	cmp	r3, #7
 800ad6c:	d9e5      	bls.n	800ad3a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad6e:	bf00      	nop
 800ad70:	bf00      	nop
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	20002680 	.word	0x20002680

0800ad80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08e      	sub	sp, #56	@ 0x38
 800ad84:	af04      	add	r7, sp, #16
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10d      	bne.n	800adb0 <xTaskCreateStatic+0x30>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad98:	b672      	cpsid	i
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	b662      	cpsie	i
 800ada8:	623b      	str	r3, [r7, #32]
}
 800adaa:	bf00      	nop
 800adac:	bf00      	nop
 800adae:	e7fd      	b.n	800adac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800adb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10d      	bne.n	800add2 <xTaskCreateStatic+0x52>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adba:	b672      	cpsid	i
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	b662      	cpsie	i
 800adca:	61fb      	str	r3, [r7, #28]
}
 800adcc:	bf00      	nop
 800adce:	bf00      	nop
 800add0:	e7fd      	b.n	800adce <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800add2:	23a0      	movs	r3, #160	@ 0xa0
 800add4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	2ba0      	cmp	r3, #160	@ 0xa0
 800adda:	d00d      	beq.n	800adf8 <xTaskCreateStatic+0x78>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade0:	b672      	cpsid	i
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	b662      	cpsie	i
 800adf0:	61bb      	str	r3, [r7, #24]
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	e7fd      	b.n	800adf4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800adf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800adfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01e      	beq.n	800ae3e <xTaskCreateStatic+0xbe>
 800ae00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01b      	beq.n	800ae3e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae12:	2202      	movs	r2, #2
 800ae14:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae18:	2300      	movs	r3, #0
 800ae1a:	9303      	str	r3, [sp, #12]
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	9302      	str	r3, [sp, #8]
 800ae20:	f107 0314 	add.w	r3, r7, #20
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	68b9      	ldr	r1, [r7, #8]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 f851 	bl	800aed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae38:	f000 f8f0 	bl	800b01c <prvAddNewTaskToReadyList>
 800ae3c:	e001      	b.n	800ae42 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae42:	697b      	ldr	r3, [r7, #20]
	}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3728      	adds	r7, #40	@ 0x28
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08c      	sub	sp, #48	@ 0x30
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae5c:	88fb      	ldrh	r3, [r7, #6]
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f001 fa51 	bl	800c308 <pvPortMalloc>
 800ae66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00e      	beq.n	800ae8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae6e:	20a0      	movs	r0, #160	@ 0xa0
 800ae70:	f001 fa4a 	bl	800c308 <pvPortMalloc>
 800ae74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae82:	e005      	b.n	800ae90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae84:	6978      	ldr	r0, [r7, #20]
 800ae86:	f001 fb0d 	bl	800c4a4 <vPortFree>
 800ae8a:	e001      	b.n	800ae90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d017      	beq.n	800aec6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae9e:	88fa      	ldrh	r2, [r7, #6]
 800aea0:	2300      	movs	r3, #0
 800aea2:	9303      	str	r3, [sp, #12]
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	9302      	str	r3, [sp, #8]
 800aea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	68b9      	ldr	r1, [r7, #8]
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 f80f 	bl	800aed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeba:	69f8      	ldr	r0, [r7, #28]
 800aebc:	f000 f8ae 	bl	800b01c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aec0:	2301      	movs	r3, #1
 800aec2:	61bb      	str	r3, [r7, #24]
 800aec4:	e002      	b.n	800aecc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aec6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aecc:	69bb      	ldr	r3, [r7, #24]
	}
 800aece:	4618      	mov	r0, r3
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
 800aee4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeea:	6879      	ldr	r1, [r7, #4]
 800aeec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aef0:	440b      	add	r3, r1
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	f023 0307 	bic.w	r3, r3, #7
 800aefe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00d      	beq.n	800af26 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0e:	b672      	cpsid	i
 800af10:	f383 8811 	msr	BASEPRI, r3
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	b662      	cpsie	i
 800af1e:	617b      	str	r3, [r7, #20]
}
 800af20:	bf00      	nop
 800af22:	bf00      	nop
 800af24:	e7fd      	b.n	800af22 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d01f      	beq.n	800af6c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af2c:	2300      	movs	r3, #0
 800af2e:	61fb      	str	r3, [r7, #28]
 800af30:	e012      	b.n	800af58 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	4413      	add	r3, r2
 800af38:	7819      	ldrb	r1, [r3, #0]
 800af3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	4413      	add	r3, r2
 800af40:	3334      	adds	r3, #52	@ 0x34
 800af42:	460a      	mov	r2, r1
 800af44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	4413      	add	r3, r2
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d006      	beq.n	800af60 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	3301      	adds	r3, #1
 800af56:	61fb      	str	r3, [r7, #28]
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	2b0f      	cmp	r3, #15
 800af5c:	d9e9      	bls.n	800af32 <prvInitialiseNewTask+0x5a>
 800af5e:	e000      	b.n	800af62 <prvInitialiseNewTask+0x8a>
			{
				break;
 800af60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af6a:	e003      	b.n	800af74 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af76:	2b06      	cmp	r3, #6
 800af78:	d901      	bls.n	800af7e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af7a:	2306      	movs	r3, #6
 800af7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af88:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8c:	2200      	movs	r2, #0
 800af8e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af92:	3304      	adds	r3, #4
 800af94:	4618      	mov	r0, r3
 800af96:	f7fe fec3 	bl	8009d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	3318      	adds	r3, #24
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe febe 	bl	8009d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afa8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afac:	f1c3 0207 	rsb	r2, r3, #7
 800afb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afb8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbc:	2200      	movs	r2, #0
 800afbe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800afca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afcc:	334c      	adds	r3, #76	@ 0x4c
 800afce:	224c      	movs	r2, #76	@ 0x4c
 800afd0:	2100      	movs	r1, #0
 800afd2:	4618      	mov	r0, r3
 800afd4:	f001 fe6a 	bl	800ccac <memset>
 800afd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afda:	4a0d      	ldr	r2, [pc, #52]	@ (800b010 <prvInitialiseNewTask+0x138>)
 800afdc:	651a      	str	r2, [r3, #80]	@ 0x50
 800afde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe0:	4a0c      	ldr	r2, [pc, #48]	@ (800b014 <prvInitialiseNewTask+0x13c>)
 800afe2:	655a      	str	r2, [r3, #84]	@ 0x54
 800afe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe6:	4a0c      	ldr	r2, [pc, #48]	@ (800b018 <prvInitialiseNewTask+0x140>)
 800afe8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	68f9      	ldr	r1, [r7, #12]
 800afee:	69b8      	ldr	r0, [r7, #24]
 800aff0:	f000 ff50 	bl	800be94 <pxPortInitialiseStack>
 800aff4:	4602      	mov	r2, r0
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800affa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b006:	bf00      	nop
 800b008:	3720      	adds	r7, #32
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20006414 	.word	0x20006414
 800b014:	2000647c 	.word	0x2000647c
 800b018:	200064e4 	.word	0x200064e4

0800b01c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b024:	f001 f842 	bl	800c0ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b028:	4b2a      	ldr	r3, [pc, #168]	@ (800b0d4 <prvAddNewTaskToReadyList+0xb8>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3301      	adds	r3, #1
 800b02e:	4a29      	ldr	r2, [pc, #164]	@ (800b0d4 <prvAddNewTaskToReadyList+0xb8>)
 800b030:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b032:	4b29      	ldr	r3, [pc, #164]	@ (800b0d8 <prvAddNewTaskToReadyList+0xbc>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d109      	bne.n	800b04e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b03a:	4a27      	ldr	r2, [pc, #156]	@ (800b0d8 <prvAddNewTaskToReadyList+0xbc>)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b040:	4b24      	ldr	r3, [pc, #144]	@ (800b0d4 <prvAddNewTaskToReadyList+0xb8>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d110      	bne.n	800b06a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b048:	f000 fc1a 	bl	800b880 <prvInitialiseTaskLists>
 800b04c:	e00d      	b.n	800b06a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b04e:	4b23      	ldr	r3, [pc, #140]	@ (800b0dc <prvAddNewTaskToReadyList+0xc0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d109      	bne.n	800b06a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b056:	4b20      	ldr	r3, [pc, #128]	@ (800b0d8 <prvAddNewTaskToReadyList+0xbc>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b060:	429a      	cmp	r2, r3
 800b062:	d802      	bhi.n	800b06a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b064:	4a1c      	ldr	r2, [pc, #112]	@ (800b0d8 <prvAddNewTaskToReadyList+0xbc>)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b06a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e0 <prvAddNewTaskToReadyList+0xc4>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3301      	adds	r3, #1
 800b070:	4a1b      	ldr	r2, [pc, #108]	@ (800b0e0 <prvAddNewTaskToReadyList+0xc4>)
 800b072:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b078:	2201      	movs	r2, #1
 800b07a:	409a      	lsls	r2, r3
 800b07c:	4b19      	ldr	r3, [pc, #100]	@ (800b0e4 <prvAddNewTaskToReadyList+0xc8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4313      	orrs	r3, r2
 800b082:	4a18      	ldr	r2, [pc, #96]	@ (800b0e4 <prvAddNewTaskToReadyList+0xc8>)
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4a15      	ldr	r2, [pc, #84]	@ (800b0e8 <prvAddNewTaskToReadyList+0xcc>)
 800b094:	441a      	add	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3304      	adds	r3, #4
 800b09a:	4619      	mov	r1, r3
 800b09c:	4610      	mov	r0, r2
 800b09e:	f7fe fe4c 	bl	8009d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0a2:	f001 f839 	bl	800c118 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0dc <prvAddNewTaskToReadyList+0xc0>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00e      	beq.n	800b0cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b0d8 <prvAddNewTaskToReadyList+0xbc>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d207      	bcs.n	800b0cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b0ec <prvAddNewTaskToReadyList+0xd0>)
 800b0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	200027c0 	.word	0x200027c0
 800b0d8:	200026c0 	.word	0x200026c0
 800b0dc:	200027cc 	.word	0x200027cc
 800b0e0:	200027dc 	.word	0x200027dc
 800b0e4:	200027c8 	.word	0x200027c8
 800b0e8:	200026c4 	.word	0x200026c4
 800b0ec:	e000ed04 	.word	0xe000ed04

0800b0f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01a      	beq.n	800b138 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b102:	4b15      	ldr	r3, [pc, #84]	@ (800b158 <vTaskDelay+0x68>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00d      	beq.n	800b126 <vTaskDelay+0x36>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10e:	b672      	cpsid	i
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	b662      	cpsie	i
 800b11e:	60bb      	str	r3, [r7, #8]
}
 800b120:	bf00      	nop
 800b122:	bf00      	nop
 800b124:	e7fd      	b.n	800b122 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b126:	f000 f889 	bl	800b23c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b12a:	2100      	movs	r1, #0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fe4b 	bl	800bdc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b132:	f000 f891 	bl	800b258 <xTaskResumeAll>
 800b136:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d107      	bne.n	800b14e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800b13e:	4b07      	ldr	r3, [pc, #28]	@ (800b15c <vTaskDelay+0x6c>)
 800b140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	200027e8 	.word	0x200027e8
 800b15c:	e000ed04 	.word	0xe000ed04

0800b160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08a      	sub	sp, #40	@ 0x28
 800b164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b166:	2300      	movs	r3, #0
 800b168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b16e:	463a      	mov	r2, r7
 800b170:	1d39      	adds	r1, r7, #4
 800b172:	f107 0308 	add.w	r3, r7, #8
 800b176:	4618      	mov	r0, r3
 800b178:	f7f5 ff48 	bl	800100c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	9202      	str	r2, [sp, #8]
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	2300      	movs	r3, #0
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	2300      	movs	r3, #0
 800b18c:	460a      	mov	r2, r1
 800b18e:	4923      	ldr	r1, [pc, #140]	@ (800b21c <vTaskStartScheduler+0xbc>)
 800b190:	4823      	ldr	r0, [pc, #140]	@ (800b220 <vTaskStartScheduler+0xc0>)
 800b192:	f7ff fdf5 	bl	800ad80 <xTaskCreateStatic>
 800b196:	4603      	mov	r3, r0
 800b198:	4a22      	ldr	r2, [pc, #136]	@ (800b224 <vTaskStartScheduler+0xc4>)
 800b19a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b19c:	4b21      	ldr	r3, [pc, #132]	@ (800b224 <vTaskStartScheduler+0xc4>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	e001      	b.n	800b1ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d11d      	bne.n	800b1f0 <vTaskStartScheduler+0x90>
	__asm volatile
 800b1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b8:	b672      	cpsid	i
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	b662      	cpsie	i
 800b1c8:	613b      	str	r3, [r7, #16]
}
 800b1ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1cc:	4b16      	ldr	r3, [pc, #88]	@ (800b228 <vTaskStartScheduler+0xc8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	334c      	adds	r3, #76	@ 0x4c
 800b1d2:	4a16      	ldr	r2, [pc, #88]	@ (800b22c <vTaskStartScheduler+0xcc>)
 800b1d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1d6:	4b16      	ldr	r3, [pc, #88]	@ (800b230 <vTaskStartScheduler+0xd0>)
 800b1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1de:	4b15      	ldr	r3, [pc, #84]	@ (800b234 <vTaskStartScheduler+0xd4>)
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1e4:	4b14      	ldr	r3, [pc, #80]	@ (800b238 <vTaskStartScheduler+0xd8>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1ea:	f000 fee1 	bl	800bfb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1ee:	e011      	b.n	800b214 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f6:	d10d      	bne.n	800b214 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fc:	b672      	cpsid	i
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	b662      	cpsie	i
 800b20c:	60fb      	str	r3, [r7, #12]
}
 800b20e:	bf00      	nop
 800b210:	bf00      	nop
 800b212:	e7fd      	b.n	800b210 <vTaskStartScheduler+0xb0>
}
 800b214:	bf00      	nop
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	0800e070 	.word	0x0800e070
 800b220:	0800b851 	.word	0x0800b851
 800b224:	200027e4 	.word	0x200027e4
 800b228:	200026c0 	.word	0x200026c0
 800b22c:	2000001c 	.word	0x2000001c
 800b230:	200027e0 	.word	0x200027e0
 800b234:	200027cc 	.word	0x200027cc
 800b238:	200027c4 	.word	0x200027c4

0800b23c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b240:	4b04      	ldr	r3, [pc, #16]	@ (800b254 <vTaskSuspendAll+0x18>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3301      	adds	r3, #1
 800b246:	4a03      	ldr	r2, [pc, #12]	@ (800b254 <vTaskSuspendAll+0x18>)
 800b248:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b24a:	bf00      	nop
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	200027e8 	.word	0x200027e8

0800b258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b262:	2300      	movs	r3, #0
 800b264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b266:	4b43      	ldr	r3, [pc, #268]	@ (800b374 <xTaskResumeAll+0x11c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10d      	bne.n	800b28a <xTaskResumeAll+0x32>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b272:	b672      	cpsid	i
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	b662      	cpsie	i
 800b282:	603b      	str	r3, [r7, #0]
}
 800b284:	bf00      	nop
 800b286:	bf00      	nop
 800b288:	e7fd      	b.n	800b286 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b28a:	f000 ff0f 	bl	800c0ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b28e:	4b39      	ldr	r3, [pc, #228]	@ (800b374 <xTaskResumeAll+0x11c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3b01      	subs	r3, #1
 800b294:	4a37      	ldr	r2, [pc, #220]	@ (800b374 <xTaskResumeAll+0x11c>)
 800b296:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b298:	4b36      	ldr	r3, [pc, #216]	@ (800b374 <xTaskResumeAll+0x11c>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d161      	bne.n	800b364 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2a0:	4b35      	ldr	r3, [pc, #212]	@ (800b378 <xTaskResumeAll+0x120>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d05d      	beq.n	800b364 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2a8:	e02e      	b.n	800b308 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2aa:	4b34      	ldr	r3, [pc, #208]	@ (800b37c <xTaskResumeAll+0x124>)
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3318      	adds	r3, #24
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe fd9c 	bl	8009df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe fd97 	bl	8009df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	409a      	lsls	r2, r3
 800b2ce:	4b2c      	ldr	r3, [pc, #176]	@ (800b380 <xTaskResumeAll+0x128>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	4a2a      	ldr	r2, [pc, #168]	@ (800b380 <xTaskResumeAll+0x128>)
 800b2d6:	6013      	str	r3, [r2, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2dc:	4613      	mov	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4a27      	ldr	r2, [pc, #156]	@ (800b384 <xTaskResumeAll+0x12c>)
 800b2e6:	441a      	add	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	f7fe fd23 	bl	8009d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f8:	4b23      	ldr	r3, [pc, #140]	@ (800b388 <xTaskResumeAll+0x130>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d302      	bcc.n	800b308 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b302:	4b22      	ldr	r3, [pc, #136]	@ (800b38c <xTaskResumeAll+0x134>)
 800b304:	2201      	movs	r2, #1
 800b306:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b308:	4b1c      	ldr	r3, [pc, #112]	@ (800b37c <xTaskResumeAll+0x124>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1cc      	bne.n	800b2aa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b316:	f000 fb59 	bl	800b9cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b31a:	4b1d      	ldr	r3, [pc, #116]	@ (800b390 <xTaskResumeAll+0x138>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d010      	beq.n	800b348 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b326:	f000 f859 	bl	800b3dc <xTaskIncrementTick>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b330:	4b16      	ldr	r3, [pc, #88]	@ (800b38c <xTaskResumeAll+0x134>)
 800b332:	2201      	movs	r2, #1
 800b334:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3b01      	subs	r3, #1
 800b33a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1f1      	bne.n	800b326 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b342:	4b13      	ldr	r3, [pc, #76]	@ (800b390 <xTaskResumeAll+0x138>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b348:	4b10      	ldr	r3, [pc, #64]	@ (800b38c <xTaskResumeAll+0x134>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d009      	beq.n	800b364 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b350:	2301      	movs	r3, #1
 800b352:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b354:	4b0f      	ldr	r3, [pc, #60]	@ (800b394 <xTaskResumeAll+0x13c>)
 800b356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b364:	f000 fed8 	bl	800c118 <vPortExitCritical>

	return xAlreadyYielded;
 800b368:	68bb      	ldr	r3, [r7, #8]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	200027e8 	.word	0x200027e8
 800b378:	200027c0 	.word	0x200027c0
 800b37c:	20002780 	.word	0x20002780
 800b380:	200027c8 	.word	0x200027c8
 800b384:	200026c4 	.word	0x200026c4
 800b388:	200026c0 	.word	0x200026c0
 800b38c:	200027d4 	.word	0x200027d4
 800b390:	200027d0 	.word	0x200027d0
 800b394:	e000ed04 	.word	0xe000ed04

0800b398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b39e:	4b05      	ldr	r3, [pc, #20]	@ (800b3b4 <xTaskGetTickCount+0x1c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3a4:	687b      	ldr	r3, [r7, #4]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	200027c4 	.word	0x200027c4

0800b3b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3be:	f000 ff5d 	bl	800c27c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b3c6:	4b04      	ldr	r3, [pc, #16]	@ (800b3d8 <xTaskGetTickCountFromISR+0x20>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3cc:	683b      	ldr	r3, [r7, #0]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	200027c4 	.word	0x200027c4

0800b3dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3e6:	4b50      	ldr	r3, [pc, #320]	@ (800b528 <xTaskIncrementTick+0x14c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f040 808b 	bne.w	800b506 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3f0:	4b4e      	ldr	r3, [pc, #312]	@ (800b52c <xTaskIncrementTick+0x150>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3f8:	4a4c      	ldr	r2, [pc, #304]	@ (800b52c <xTaskIncrementTick+0x150>)
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d123      	bne.n	800b44c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b404:	4b4a      	ldr	r3, [pc, #296]	@ (800b530 <xTaskIncrementTick+0x154>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00d      	beq.n	800b42a <xTaskIncrementTick+0x4e>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b412:	b672      	cpsid	i
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	b662      	cpsie	i
 800b422:	603b      	str	r3, [r7, #0]
}
 800b424:	bf00      	nop
 800b426:	bf00      	nop
 800b428:	e7fd      	b.n	800b426 <xTaskIncrementTick+0x4a>
 800b42a:	4b41      	ldr	r3, [pc, #260]	@ (800b530 <xTaskIncrementTick+0x154>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	4b40      	ldr	r3, [pc, #256]	@ (800b534 <xTaskIncrementTick+0x158>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a3e      	ldr	r2, [pc, #248]	@ (800b530 <xTaskIncrementTick+0x154>)
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	4a3e      	ldr	r2, [pc, #248]	@ (800b534 <xTaskIncrementTick+0x158>)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	4b3e      	ldr	r3, [pc, #248]	@ (800b538 <xTaskIncrementTick+0x15c>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3301      	adds	r3, #1
 800b444:	4a3c      	ldr	r2, [pc, #240]	@ (800b538 <xTaskIncrementTick+0x15c>)
 800b446:	6013      	str	r3, [r2, #0]
 800b448:	f000 fac0 	bl	800b9cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b44c:	4b3b      	ldr	r3, [pc, #236]	@ (800b53c <xTaskIncrementTick+0x160>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	429a      	cmp	r2, r3
 800b454:	d348      	bcc.n	800b4e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b456:	4b36      	ldr	r3, [pc, #216]	@ (800b530 <xTaskIncrementTick+0x154>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d104      	bne.n	800b46a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b460:	4b36      	ldr	r3, [pc, #216]	@ (800b53c <xTaskIncrementTick+0x160>)
 800b462:	f04f 32ff 	mov.w	r2, #4294967295
 800b466:	601a      	str	r2, [r3, #0]
					break;
 800b468:	e03e      	b.n	800b4e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b46a:	4b31      	ldr	r3, [pc, #196]	@ (800b530 <xTaskIncrementTick+0x154>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d203      	bcs.n	800b48a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b482:	4a2e      	ldr	r2, [pc, #184]	@ (800b53c <xTaskIncrementTick+0x160>)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b488:	e02e      	b.n	800b4e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	3304      	adds	r3, #4
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fe fcb0 	bl	8009df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	3318      	adds	r3, #24
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe fca7 	bl	8009df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	409a      	lsls	r2, r3
 800b4ae:	4b24      	ldr	r3, [pc, #144]	@ (800b540 <xTaskIncrementTick+0x164>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	4a22      	ldr	r2, [pc, #136]	@ (800b540 <xTaskIncrementTick+0x164>)
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4a1f      	ldr	r2, [pc, #124]	@ (800b544 <xTaskIncrementTick+0x168>)
 800b4c6:	441a      	add	r2, r3
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	f7fe fc33 	bl	8009d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b548 <xTaskIncrementTick+0x16c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d3b9      	bcc.n	800b456 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4e6:	e7b6      	b.n	800b456 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4e8:	4b17      	ldr	r3, [pc, #92]	@ (800b548 <xTaskIncrementTick+0x16c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ee:	4915      	ldr	r1, [pc, #84]	@ (800b544 <xTaskIncrementTick+0x168>)
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	440b      	add	r3, r1
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d907      	bls.n	800b510 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b500:	2301      	movs	r3, #1
 800b502:	617b      	str	r3, [r7, #20]
 800b504:	e004      	b.n	800b510 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b506:	4b11      	ldr	r3, [pc, #68]	@ (800b54c <xTaskIncrementTick+0x170>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3301      	adds	r3, #1
 800b50c:	4a0f      	ldr	r2, [pc, #60]	@ (800b54c <xTaskIncrementTick+0x170>)
 800b50e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b510:	4b0f      	ldr	r3, [pc, #60]	@ (800b550 <xTaskIncrementTick+0x174>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b518:	2301      	movs	r3, #1
 800b51a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b51c:	697b      	ldr	r3, [r7, #20]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	200027e8 	.word	0x200027e8
 800b52c:	200027c4 	.word	0x200027c4
 800b530:	20002778 	.word	0x20002778
 800b534:	2000277c 	.word	0x2000277c
 800b538:	200027d8 	.word	0x200027d8
 800b53c:	200027e0 	.word	0x200027e0
 800b540:	200027c8 	.word	0x200027c8
 800b544:	200026c4 	.word	0x200026c4
 800b548:	200026c0 	.word	0x200026c0
 800b54c:	200027d0 	.word	0x200027d0
 800b550:	200027d4 	.word	0x200027d4

0800b554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b55a:	4b2b      	ldr	r3, [pc, #172]	@ (800b608 <vTaskSwitchContext+0xb4>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b562:	4b2a      	ldr	r3, [pc, #168]	@ (800b60c <vTaskSwitchContext+0xb8>)
 800b564:	2201      	movs	r2, #1
 800b566:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b568:	e047      	b.n	800b5fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b56a:	4b28      	ldr	r3, [pc, #160]	@ (800b60c <vTaskSwitchContext+0xb8>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b570:	4b27      	ldr	r3, [pc, #156]	@ (800b610 <vTaskSwitchContext+0xbc>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	fab3 f383 	clz	r3, r3
 800b57c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b57e:	7afb      	ldrb	r3, [r7, #11]
 800b580:	f1c3 031f 	rsb	r3, r3, #31
 800b584:	617b      	str	r3, [r7, #20]
 800b586:	4923      	ldr	r1, [pc, #140]	@ (800b614 <vTaskSwitchContext+0xc0>)
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	4613      	mov	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	440b      	add	r3, r1
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10d      	bne.n	800b5b6 <vTaskSwitchContext+0x62>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59e:	b672      	cpsid	i
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	b662      	cpsie	i
 800b5ae:	607b      	str	r3, [r7, #4]
}
 800b5b0:	bf00      	nop
 800b5b2:	bf00      	nop
 800b5b4:	e7fd      	b.n	800b5b2 <vTaskSwitchContext+0x5e>
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4413      	add	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4a14      	ldr	r2, [pc, #80]	@ (800b614 <vTaskSwitchContext+0xc0>)
 800b5c2:	4413      	add	r3, r2
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	605a      	str	r2, [r3, #4]
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d104      	bne.n	800b5e6 <vTaskSwitchContext+0x92>
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	605a      	str	r2, [r3, #4]
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	4a0a      	ldr	r2, [pc, #40]	@ (800b618 <vTaskSwitchContext+0xc4>)
 800b5ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5f0:	4b09      	ldr	r3, [pc, #36]	@ (800b618 <vTaskSwitchContext+0xc4>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	334c      	adds	r3, #76	@ 0x4c
 800b5f6:	4a09      	ldr	r2, [pc, #36]	@ (800b61c <vTaskSwitchContext+0xc8>)
 800b5f8:	6013      	str	r3, [r2, #0]
}
 800b5fa:	bf00      	nop
 800b5fc:	371c      	adds	r7, #28
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	200027e8 	.word	0x200027e8
 800b60c:	200027d4 	.word	0x200027d4
 800b610:	200027c8 	.word	0x200027c8
 800b614:	200026c4 	.word	0x200026c4
 800b618:	200026c0 	.word	0x200026c0
 800b61c:	2000001c 	.word	0x2000001c

0800b620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10d      	bne.n	800b64c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b634:	b672      	cpsid	i
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	b662      	cpsie	i
 800b644:	60fb      	str	r3, [r7, #12]
}
 800b646:	bf00      	nop
 800b648:	bf00      	nop
 800b64a:	e7fd      	b.n	800b648 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b64c:	4b07      	ldr	r3, [pc, #28]	@ (800b66c <vTaskPlaceOnEventList+0x4c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3318      	adds	r3, #24
 800b652:	4619      	mov	r1, r3
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7fe fb94 	bl	8009d82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b65a:	2101      	movs	r1, #1
 800b65c:	6838      	ldr	r0, [r7, #0]
 800b65e:	f000 fbb3 	bl	800bdc8 <prvAddCurrentTaskToDelayedList>
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	200026c0 	.word	0x200026c0

0800b670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10d      	bne.n	800b6a2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68a:	b672      	cpsid	i
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	b662      	cpsie	i
 800b69a:	60fb      	str	r3, [r7, #12]
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	e7fd      	b.n	800b69e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	3318      	adds	r3, #24
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fba4 	bl	8009df4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ac:	4b1d      	ldr	r3, [pc, #116]	@ (800b724 <xTaskRemoveFromEventList+0xb4>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11c      	bne.n	800b6ee <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe fb9b 	bl	8009df4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	409a      	lsls	r2, r3
 800b6c6:	4b18      	ldr	r3, [pc, #96]	@ (800b728 <xTaskRemoveFromEventList+0xb8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	4a16      	ldr	r2, [pc, #88]	@ (800b728 <xTaskRemoveFromEventList+0xb8>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4a13      	ldr	r2, [pc, #76]	@ (800b72c <xTaskRemoveFromEventList+0xbc>)
 800b6de:	441a      	add	r2, r3
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	f7fe fb27 	bl	8009d3a <vListInsertEnd>
 800b6ec:	e005      	b.n	800b6fa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	3318      	adds	r3, #24
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	480e      	ldr	r0, [pc, #56]	@ (800b730 <xTaskRemoveFromEventList+0xc0>)
 800b6f6:	f7fe fb20 	bl	8009d3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b734 <xTaskRemoveFromEventList+0xc4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b704:	429a      	cmp	r2, r3
 800b706:	d905      	bls.n	800b714 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b70c:	4b0a      	ldr	r3, [pc, #40]	@ (800b738 <xTaskRemoveFromEventList+0xc8>)
 800b70e:	2201      	movs	r2, #1
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	e001      	b.n	800b718 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b718:	697b      	ldr	r3, [r7, #20]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	200027e8 	.word	0x200027e8
 800b728:	200027c8 	.word	0x200027c8
 800b72c:	200026c4 	.word	0x200026c4
 800b730:	20002780 	.word	0x20002780
 800b734:	200026c0 	.word	0x200026c0
 800b738:	200027d4 	.word	0x200027d4

0800b73c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b744:	4b06      	ldr	r3, [pc, #24]	@ (800b760 <vTaskInternalSetTimeOutState+0x24>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b74c:	4b05      	ldr	r3, [pc, #20]	@ (800b764 <vTaskInternalSetTimeOutState+0x28>)
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	605a      	str	r2, [r3, #4]
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	200027d8 	.word	0x200027d8
 800b764:	200027c4 	.word	0x200027c4

0800b768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10d      	bne.n	800b794 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77c:	b672      	cpsid	i
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	b662      	cpsie	i
 800b78c:	613b      	str	r3, [r7, #16]
}
 800b78e:	bf00      	nop
 800b790:	bf00      	nop
 800b792:	e7fd      	b.n	800b790 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10d      	bne.n	800b7b6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79e:	b672      	cpsid	i
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	b662      	cpsie	i
 800b7ae:	60fb      	str	r3, [r7, #12]
}
 800b7b0:	bf00      	nop
 800b7b2:	bf00      	nop
 800b7b4:	e7fd      	b.n	800b7b2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800b7b6:	f000 fc79 	bl	800c0ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b830 <xTaskCheckForTimeOut+0xc8>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	69ba      	ldr	r2, [r7, #24]
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d2:	d102      	bne.n	800b7da <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61fb      	str	r3, [r7, #28]
 800b7d8:	e023      	b.n	800b822 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	4b15      	ldr	r3, [pc, #84]	@ (800b834 <xTaskCheckForTimeOut+0xcc>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d007      	beq.n	800b7f6 <xTaskCheckForTimeOut+0x8e>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	69ba      	ldr	r2, [r7, #24]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d302      	bcc.n	800b7f6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	61fb      	str	r3, [r7, #28]
 800b7f4:	e015      	b.n	800b822 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d20b      	bcs.n	800b818 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	1ad2      	subs	r2, r2, r3
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7ff ff95 	bl	800b73c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b812:	2300      	movs	r3, #0
 800b814:	61fb      	str	r3, [r7, #28]
 800b816:	e004      	b.n	800b822 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b81e:	2301      	movs	r3, #1
 800b820:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b822:	f000 fc79 	bl	800c118 <vPortExitCritical>

	return xReturn;
 800b826:	69fb      	ldr	r3, [r7, #28]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3720      	adds	r7, #32
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	200027c4 	.word	0x200027c4
 800b834:	200027d8 	.word	0x200027d8

0800b838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b838:	b480      	push	{r7}
 800b83a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b83c:	4b03      	ldr	r3, [pc, #12]	@ (800b84c <vTaskMissedYield+0x14>)
 800b83e:	2201      	movs	r2, #1
 800b840:	601a      	str	r2, [r3, #0]
}
 800b842:	bf00      	nop
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	200027d4 	.word	0x200027d4

0800b850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b858:	f000 f852 	bl	800b900 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b85c:	4b06      	ldr	r3, [pc, #24]	@ (800b878 <prvIdleTask+0x28>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d9f9      	bls.n	800b858 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b864:	4b05      	ldr	r3, [pc, #20]	@ (800b87c <prvIdleTask+0x2c>)
 800b866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b874:	e7f0      	b.n	800b858 <prvIdleTask+0x8>
 800b876:	bf00      	nop
 800b878:	200026c4 	.word	0x200026c4
 800b87c:	e000ed04 	.word	0xe000ed04

0800b880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b886:	2300      	movs	r3, #0
 800b888:	607b      	str	r3, [r7, #4]
 800b88a:	e00c      	b.n	800b8a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	4613      	mov	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4a12      	ldr	r2, [pc, #72]	@ (800b8e0 <prvInitialiseTaskLists+0x60>)
 800b898:	4413      	add	r3, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fa20 	bl	8009ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	607b      	str	r3, [r7, #4]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b06      	cmp	r3, #6
 800b8aa:	d9ef      	bls.n	800b88c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8ac:	480d      	ldr	r0, [pc, #52]	@ (800b8e4 <prvInitialiseTaskLists+0x64>)
 800b8ae:	f7fe fa17 	bl	8009ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8b2:	480d      	ldr	r0, [pc, #52]	@ (800b8e8 <prvInitialiseTaskLists+0x68>)
 800b8b4:	f7fe fa14 	bl	8009ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8b8:	480c      	ldr	r0, [pc, #48]	@ (800b8ec <prvInitialiseTaskLists+0x6c>)
 800b8ba:	f7fe fa11 	bl	8009ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8be:	480c      	ldr	r0, [pc, #48]	@ (800b8f0 <prvInitialiseTaskLists+0x70>)
 800b8c0:	f7fe fa0e 	bl	8009ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8c4:	480b      	ldr	r0, [pc, #44]	@ (800b8f4 <prvInitialiseTaskLists+0x74>)
 800b8c6:	f7fe fa0b 	bl	8009ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f8 <prvInitialiseTaskLists+0x78>)
 800b8cc:	4a05      	ldr	r2, [pc, #20]	@ (800b8e4 <prvInitialiseTaskLists+0x64>)
 800b8ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b8fc <prvInitialiseTaskLists+0x7c>)
 800b8d2:	4a05      	ldr	r2, [pc, #20]	@ (800b8e8 <prvInitialiseTaskLists+0x68>)
 800b8d4:	601a      	str	r2, [r3, #0]
}
 800b8d6:	bf00      	nop
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	200026c4 	.word	0x200026c4
 800b8e4:	20002750 	.word	0x20002750
 800b8e8:	20002764 	.word	0x20002764
 800b8ec:	20002780 	.word	0x20002780
 800b8f0:	20002794 	.word	0x20002794
 800b8f4:	200027ac 	.word	0x200027ac
 800b8f8:	20002778 	.word	0x20002778
 800b8fc:	2000277c 	.word	0x2000277c

0800b900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b906:	e019      	b.n	800b93c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b908:	f000 fbd0 	bl	800c0ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b90c:	4b10      	ldr	r3, [pc, #64]	@ (800b950 <prvCheckTasksWaitingTermination+0x50>)
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3304      	adds	r3, #4
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fe fa6b 	bl	8009df4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b91e:	4b0d      	ldr	r3, [pc, #52]	@ (800b954 <prvCheckTasksWaitingTermination+0x54>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3b01      	subs	r3, #1
 800b924:	4a0b      	ldr	r2, [pc, #44]	@ (800b954 <prvCheckTasksWaitingTermination+0x54>)
 800b926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b928:	4b0b      	ldr	r3, [pc, #44]	@ (800b958 <prvCheckTasksWaitingTermination+0x58>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3b01      	subs	r3, #1
 800b92e:	4a0a      	ldr	r2, [pc, #40]	@ (800b958 <prvCheckTasksWaitingTermination+0x58>)
 800b930:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b932:	f000 fbf1 	bl	800c118 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f810 	bl	800b95c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b93c:	4b06      	ldr	r3, [pc, #24]	@ (800b958 <prvCheckTasksWaitingTermination+0x58>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e1      	bne.n	800b908 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b944:	bf00      	nop
 800b946:	bf00      	nop
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20002794 	.word	0x20002794
 800b954:	200027c0 	.word	0x200027c0
 800b958:	200027a8 	.word	0x200027a8

0800b95c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	334c      	adds	r3, #76	@ 0x4c
 800b968:	4618      	mov	r0, r3
 800b96a:	f001 f9b7 	bl	800ccdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b974:	2b00      	cmp	r3, #0
 800b976:	d108      	bne.n	800b98a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b97c:	4618      	mov	r0, r3
 800b97e:	f000 fd91 	bl	800c4a4 <vPortFree>
				vPortFree( pxTCB );
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fd8e 	bl	800c4a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b988:	e01b      	b.n	800b9c2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b990:	2b01      	cmp	r3, #1
 800b992:	d103      	bne.n	800b99c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fd85 	bl	800c4a4 <vPortFree>
	}
 800b99a:	e012      	b.n	800b9c2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d00d      	beq.n	800b9c2 <prvDeleteTCB+0x66>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9aa:	b672      	cpsid	i
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	b662      	cpsie	i
 800b9ba:	60fb      	str	r3, [r7, #12]
}
 800b9bc:	bf00      	nop
 800b9be:	bf00      	nop
 800b9c0:	e7fd      	b.n	800b9be <prvDeleteTCB+0x62>
	}
 800b9c2:	bf00      	nop
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
	...

0800b9cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800ba04 <prvResetNextTaskUnblockTime+0x38>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba08 <prvResetNextTaskUnblockTime+0x3c>)
 800b9de:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9e4:	e008      	b.n	800b9f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9e6:	4b07      	ldr	r3, [pc, #28]	@ (800ba04 <prvResetNextTaskUnblockTime+0x38>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	4a04      	ldr	r2, [pc, #16]	@ (800ba08 <prvResetNextTaskUnblockTime+0x3c>)
 800b9f6:	6013      	str	r3, [r2, #0]
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	20002778 	.word	0x20002778
 800ba08:	200027e0 	.word	0x200027e0

0800ba0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba12:	4b0b      	ldr	r3, [pc, #44]	@ (800ba40 <xTaskGetSchedulerState+0x34>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d102      	bne.n	800ba20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	607b      	str	r3, [r7, #4]
 800ba1e:	e008      	b.n	800ba32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba20:	4b08      	ldr	r3, [pc, #32]	@ (800ba44 <xTaskGetSchedulerState+0x38>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d102      	bne.n	800ba2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba28:	2302      	movs	r3, #2
 800ba2a:	607b      	str	r3, [r7, #4]
 800ba2c:	e001      	b.n	800ba32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba32:	687b      	ldr	r3, [r7, #4]
	}
 800ba34:	4618      	mov	r0, r3
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	200027cc 	.word	0x200027cc
 800ba44:	200027e8 	.word	0x200027e8

0800ba48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba54:	2300      	movs	r3, #0
 800ba56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d069      	beq.n	800bb32 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba62:	4b36      	ldr	r3, [pc, #216]	@ (800bb3c <xTaskPriorityInherit+0xf4>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d259      	bcs.n	800bb20 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	699b      	ldr	r3, [r3, #24]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	db06      	blt.n	800ba82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba74:	4b31      	ldr	r3, [pc, #196]	@ (800bb3c <xTaskPriorityInherit+0xf4>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba7a:	f1c3 0207 	rsb	r2, r3, #7
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	6959      	ldr	r1, [r3, #20]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4a2b      	ldr	r2, [pc, #172]	@ (800bb40 <xTaskPriorityInherit+0xf8>)
 800ba94:	4413      	add	r3, r2
 800ba96:	4299      	cmp	r1, r3
 800ba98:	d13a      	bne.n	800bb10 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fe f9a8 	bl	8009df4 <uxListRemove>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d115      	bne.n	800bad6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baae:	4924      	ldr	r1, [pc, #144]	@ (800bb40 <xTaskPriorityInherit+0xf8>)
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	440b      	add	r3, r1
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10a      	bne.n	800bad6 <xTaskPriorityInherit+0x8e>
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac4:	2201      	movs	r2, #1
 800bac6:	fa02 f303 	lsl.w	r3, r2, r3
 800baca:	43da      	mvns	r2, r3
 800bacc:	4b1d      	ldr	r3, [pc, #116]	@ (800bb44 <xTaskPriorityInherit+0xfc>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4013      	ands	r3, r2
 800bad2:	4a1c      	ldr	r2, [pc, #112]	@ (800bb44 <xTaskPriorityInherit+0xfc>)
 800bad4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bad6:	4b19      	ldr	r3, [pc, #100]	@ (800bb3c <xTaskPriorityInherit+0xf4>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae4:	2201      	movs	r2, #1
 800bae6:	409a      	lsls	r2, r3
 800bae8:	4b16      	ldr	r3, [pc, #88]	@ (800bb44 <xTaskPriorityInherit+0xfc>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4313      	orrs	r3, r2
 800baee:	4a15      	ldr	r2, [pc, #84]	@ (800bb44 <xTaskPriorityInherit+0xfc>)
 800baf0:	6013      	str	r3, [r2, #0]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4a10      	ldr	r2, [pc, #64]	@ (800bb40 <xTaskPriorityInherit+0xf8>)
 800bb00:	441a      	add	r2, r3
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	3304      	adds	r3, #4
 800bb06:	4619      	mov	r1, r3
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f7fe f916 	bl	8009d3a <vListInsertEnd>
 800bb0e:	e004      	b.n	800bb1a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb10:	4b0a      	ldr	r3, [pc, #40]	@ (800bb3c <xTaskPriorityInherit+0xf4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	e008      	b.n	800bb32 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb24:	4b05      	ldr	r3, [pc, #20]	@ (800bb3c <xTaskPriorityInherit+0xf4>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d201      	bcs.n	800bb32 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb32:	68fb      	ldr	r3, [r7, #12]
	}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	200026c0 	.word	0x200026c0
 800bb40:	200026c4 	.word	0x200026c4
 800bb44:	200027c8 	.word	0x200027c8

0800bb48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d074      	beq.n	800bc48 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb5e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc54 <xTaskPriorityDisinherit+0x10c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d00d      	beq.n	800bb84 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6c:	b672      	cpsid	i
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	b662      	cpsie	i
 800bb7c:	60fb      	str	r3, [r7, #12]
}
 800bb7e:	bf00      	nop
 800bb80:	bf00      	nop
 800bb82:	e7fd      	b.n	800bb80 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10d      	bne.n	800bba8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb90:	b672      	cpsid	i
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	b662      	cpsie	i
 800bba0:	60bb      	str	r3, [r7, #8]
}
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
 800bba6:	e7fd      	b.n	800bba4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbac:	1e5a      	subs	r2, r3, #1
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d044      	beq.n	800bc48 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d140      	bne.n	800bc48 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fe f912 	bl	8009df4 <uxListRemove>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d115      	bne.n	800bc02 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbda:	491f      	ldr	r1, [pc, #124]	@ (800bc58 <xTaskPriorityDisinherit+0x110>)
 800bbdc:	4613      	mov	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	440b      	add	r3, r1
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10a      	bne.n	800bc02 <xTaskPriorityDisinherit+0xba>
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf6:	43da      	mvns	r2, r3
 800bbf8:	4b18      	ldr	r3, [pc, #96]	@ (800bc5c <xTaskPriorityDisinherit+0x114>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	4a17      	ldr	r2, [pc, #92]	@ (800bc5c <xTaskPriorityDisinherit+0x114>)
 800bc00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0e:	f1c3 0207 	rsb	r2, r3, #7
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	409a      	lsls	r2, r3
 800bc1e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc5c <xTaskPriorityDisinherit+0x114>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	4a0d      	ldr	r2, [pc, #52]	@ (800bc5c <xTaskPriorityDisinherit+0x114>)
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4a08      	ldr	r2, [pc, #32]	@ (800bc58 <xTaskPriorityDisinherit+0x110>)
 800bc36:	441a      	add	r2, r3
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	f7fe f87b 	bl	8009d3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc44:	2301      	movs	r3, #1
 800bc46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc48:	697b      	ldr	r3, [r7, #20]
	}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	200026c0 	.word	0x200026c0
 800bc58:	200026c4 	.word	0x200026c4
 800bc5c:	200027c8 	.word	0x200027c8

0800bc60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 8089 	beq.w	800bd8c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10d      	bne.n	800bc9e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc86:	b672      	cpsid	i
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	b662      	cpsie	i
 800bc96:	60fb      	str	r3, [r7, #12]
}
 800bc98:	bf00      	nop
 800bc9a:	bf00      	nop
 800bc9c:	e7fd      	b.n	800bc9a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d902      	bls.n	800bcae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e002      	b.n	800bcb4 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb8:	69fa      	ldr	r2, [r7, #28]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d066      	beq.n	800bd8c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d161      	bne.n	800bd8c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bcc8:	4b32      	ldr	r3, [pc, #200]	@ (800bd94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	69ba      	ldr	r2, [r7, #24]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d10d      	bne.n	800bcee <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd6:	b672      	cpsid	i
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	b662      	cpsie	i
 800bce6:	60bb      	str	r3, [r7, #8]
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	e7fd      	b.n	800bcea <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	69fa      	ldr	r2, [r7, #28]
 800bcf8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	db04      	blt.n	800bd0c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	f1c3 0207 	rsb	r2, r3, #7
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	6959      	ldr	r1, [r3, #20]
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	4613      	mov	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4413      	add	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4a1f      	ldr	r2, [pc, #124]	@ (800bd98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bd1c:	4413      	add	r3, r2
 800bd1e:	4299      	cmp	r1, r3
 800bd20:	d134      	bne.n	800bd8c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fe f864 	bl	8009df4 <uxListRemove>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d115      	bne.n	800bd5e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd36:	4918      	ldr	r1, [pc, #96]	@ (800bd98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	440b      	add	r3, r1
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10a      	bne.n	800bd5e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd52:	43da      	mvns	r2, r3
 800bd54:	4b11      	ldr	r3, [pc, #68]	@ (800bd9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4013      	ands	r3, r2
 800bd5a:	4a10      	ldr	r2, [pc, #64]	@ (800bd9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bd5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd62:	2201      	movs	r2, #1
 800bd64:	409a      	lsls	r2, r3
 800bd66:	4b0d      	ldr	r3, [pc, #52]	@ (800bd9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	4a0b      	ldr	r2, [pc, #44]	@ (800bd9c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd74:	4613      	mov	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4a06      	ldr	r2, [pc, #24]	@ (800bd98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bd7e:	441a      	add	r2, r3
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	3304      	adds	r3, #4
 800bd84:	4619      	mov	r1, r3
 800bd86:	4610      	mov	r0, r2
 800bd88:	f7fd ffd7 	bl	8009d3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd8c:	bf00      	nop
 800bd8e:	3720      	adds	r7, #32
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	200026c0 	.word	0x200026c0
 800bd98:	200026c4 	.word	0x200026c4
 800bd9c:	200027c8 	.word	0x200027c8

0800bda0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bda4:	4b07      	ldr	r3, [pc, #28]	@ (800bdc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d004      	beq.n	800bdb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bdac:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdb2:	3201      	adds	r2, #1
 800bdb4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800bdb6:	4b03      	ldr	r3, [pc, #12]	@ (800bdc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
	}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	200026c0 	.word	0x200026c0

0800bdc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdd2:	4b29      	ldr	r3, [pc, #164]	@ (800be78 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdd8:	4b28      	ldr	r3, [pc, #160]	@ (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe f808 	bl	8009df4 <uxListRemove>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10b      	bne.n	800be02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bdea:	4b24      	ldr	r3, [pc, #144]	@ (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf6:	43da      	mvns	r2, r3
 800bdf8:	4b21      	ldr	r3, [pc, #132]	@ (800be80 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	4a20      	ldr	r2, [pc, #128]	@ (800be80 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be08:	d10a      	bne.n	800be20 <prvAddCurrentTaskToDelayedList+0x58>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d007      	beq.n	800be20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be10:	4b1a      	ldr	r3, [pc, #104]	@ (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3304      	adds	r3, #4
 800be16:	4619      	mov	r1, r3
 800be18:	481a      	ldr	r0, [pc, #104]	@ (800be84 <prvAddCurrentTaskToDelayedList+0xbc>)
 800be1a:	f7fd ff8e 	bl	8009d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be1e:	e026      	b.n	800be6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4413      	add	r3, r2
 800be26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be28:	4b14      	ldr	r3, [pc, #80]	@ (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	429a      	cmp	r2, r3
 800be36:	d209      	bcs.n	800be4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be38:	4b13      	ldr	r3, [pc, #76]	@ (800be88 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	4b0f      	ldr	r3, [pc, #60]	@ (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3304      	adds	r3, #4
 800be42:	4619      	mov	r1, r3
 800be44:	4610      	mov	r0, r2
 800be46:	f7fd ff9c 	bl	8009d82 <vListInsert>
}
 800be4a:	e010      	b.n	800be6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be4c:	4b0f      	ldr	r3, [pc, #60]	@ (800be8c <prvAddCurrentTaskToDelayedList+0xc4>)
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	4b0a      	ldr	r3, [pc, #40]	@ (800be7c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3304      	adds	r3, #4
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7fd ff92 	bl	8009d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be5e:	4b0c      	ldr	r3, [pc, #48]	@ (800be90 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	429a      	cmp	r2, r3
 800be66:	d202      	bcs.n	800be6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be68:	4a09      	ldr	r2, [pc, #36]	@ (800be90 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	6013      	str	r3, [r2, #0]
}
 800be6e:	bf00      	nop
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	200027c4 	.word	0x200027c4
 800be7c:	200026c0 	.word	0x200026c0
 800be80:	200027c8 	.word	0x200027c8
 800be84:	200027ac 	.word	0x200027ac
 800be88:	2000277c 	.word	0x2000277c
 800be8c:	20002778 	.word	0x20002778
 800be90:	200027e0 	.word	0x200027e0

0800be94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3b04      	subs	r3, #4
 800bea4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800beac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3b04      	subs	r3, #4
 800beb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f023 0201 	bic.w	r2, r3, #1
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3b04      	subs	r3, #4
 800bec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bec4:	4a0c      	ldr	r2, [pc, #48]	@ (800bef8 <pxPortInitialiseStack+0x64>)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3b14      	subs	r3, #20
 800bece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3b04      	subs	r3, #4
 800beda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f06f 0202 	mvn.w	r2, #2
 800bee2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	3b20      	subs	r3, #32
 800bee8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800beea:	68fb      	ldr	r3, [r7, #12]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	0800befd 	.word	0x0800befd

0800befc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf06:	4b15      	ldr	r3, [pc, #84]	@ (800bf5c <prvTaskExitError+0x60>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0e:	d00d      	beq.n	800bf2c <prvTaskExitError+0x30>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf14:	b672      	cpsid	i
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	b662      	cpsie	i
 800bf24:	60fb      	str	r3, [r7, #12]
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	e7fd      	b.n	800bf28 <prvTaskExitError+0x2c>
	__asm volatile
 800bf2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf30:	b672      	cpsid	i
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	b662      	cpsie	i
 800bf40:	60bb      	str	r3, [r7, #8]
}
 800bf42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf44:	bf00      	nop
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0fc      	beq.n	800bf46 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf4c:	bf00      	nop
 800bf4e:	bf00      	nop
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	2000000c 	.word	0x2000000c

0800bf60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf60:	4b07      	ldr	r3, [pc, #28]	@ (800bf80 <pxCurrentTCBConst2>)
 800bf62:	6819      	ldr	r1, [r3, #0]
 800bf64:	6808      	ldr	r0, [r1, #0]
 800bf66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6a:	f380 8809 	msr	PSP, r0
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f04f 0000 	mov.w	r0, #0
 800bf76:	f380 8811 	msr	BASEPRI, r0
 800bf7a:	4770      	bx	lr
 800bf7c:	f3af 8000 	nop.w

0800bf80 <pxCurrentTCBConst2>:
 800bf80:	200026c0 	.word	0x200026c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf84:	bf00      	nop
 800bf86:	bf00      	nop

0800bf88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf88:	4808      	ldr	r0, [pc, #32]	@ (800bfac <prvPortStartFirstTask+0x24>)
 800bf8a:	6800      	ldr	r0, [r0, #0]
 800bf8c:	6800      	ldr	r0, [r0, #0]
 800bf8e:	f380 8808 	msr	MSP, r0
 800bf92:	f04f 0000 	mov.w	r0, #0
 800bf96:	f380 8814 	msr	CONTROL, r0
 800bf9a:	b662      	cpsie	i
 800bf9c:	b661      	cpsie	f
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	df00      	svc	0
 800bfa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bfaa:	bf00      	nop
 800bfac:	e000ed08 	.word	0xe000ed08

0800bfb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfb6:	4b37      	ldr	r3, [pc, #220]	@ (800c094 <xPortStartScheduler+0xe4>)
 800bfb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	22ff      	movs	r2, #255	@ 0xff
 800bfc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	4b2f      	ldr	r3, [pc, #188]	@ (800c098 <xPortStartScheduler+0xe8>)
 800bfdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfde:	4b2f      	ldr	r3, [pc, #188]	@ (800c09c <xPortStartScheduler+0xec>)
 800bfe0:	2207      	movs	r2, #7
 800bfe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfe4:	e009      	b.n	800bffa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bfe6:	4b2d      	ldr	r3, [pc, #180]	@ (800c09c <xPortStartScheduler+0xec>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	4a2b      	ldr	r2, [pc, #172]	@ (800c09c <xPortStartScheduler+0xec>)
 800bfee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bffa:	78fb      	ldrb	r3, [r7, #3]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c002:	2b80      	cmp	r3, #128	@ 0x80
 800c004:	d0ef      	beq.n	800bfe6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c006:	4b25      	ldr	r3, [pc, #148]	@ (800c09c <xPortStartScheduler+0xec>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f1c3 0307 	rsb	r3, r3, #7
 800c00e:	2b04      	cmp	r3, #4
 800c010:	d00d      	beq.n	800c02e <xPortStartScheduler+0x7e>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c016:	b672      	cpsid	i
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	b662      	cpsie	i
 800c026:	60bb      	str	r3, [r7, #8]
}
 800c028:	bf00      	nop
 800c02a:	bf00      	nop
 800c02c:	e7fd      	b.n	800c02a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c02e:	4b1b      	ldr	r3, [pc, #108]	@ (800c09c <xPortStartScheduler+0xec>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	021b      	lsls	r3, r3, #8
 800c034:	4a19      	ldr	r2, [pc, #100]	@ (800c09c <xPortStartScheduler+0xec>)
 800c036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c038:	4b18      	ldr	r3, [pc, #96]	@ (800c09c <xPortStartScheduler+0xec>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c040:	4a16      	ldr	r2, [pc, #88]	@ (800c09c <xPortStartScheduler+0xec>)
 800c042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	b2da      	uxtb	r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c04c:	4b14      	ldr	r3, [pc, #80]	@ (800c0a0 <xPortStartScheduler+0xf0>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a13      	ldr	r2, [pc, #76]	@ (800c0a0 <xPortStartScheduler+0xf0>)
 800c052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c058:	4b11      	ldr	r3, [pc, #68]	@ (800c0a0 <xPortStartScheduler+0xf0>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a10      	ldr	r2, [pc, #64]	@ (800c0a0 <xPortStartScheduler+0xf0>)
 800c05e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c064:	f000 f8dc 	bl	800c220 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c068:	4b0e      	ldr	r3, [pc, #56]	@ (800c0a4 <xPortStartScheduler+0xf4>)
 800c06a:	2200      	movs	r2, #0
 800c06c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c06e:	f000 f8fb 	bl	800c268 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c072:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a8 <xPortStartScheduler+0xf8>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a0c      	ldr	r2, [pc, #48]	@ (800c0a8 <xPortStartScheduler+0xf8>)
 800c078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c07c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c07e:	f7ff ff83 	bl	800bf88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c082:	f7ff fa67 	bl	800b554 <vTaskSwitchContext>
	prvTaskExitError();
 800c086:	f7ff ff39 	bl	800befc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	e000e400 	.word	0xe000e400
 800c098:	200027ec 	.word	0x200027ec
 800c09c:	200027f0 	.word	0x200027f0
 800c0a0:	e000ed20 	.word	0xe000ed20
 800c0a4:	2000000c 	.word	0x2000000c
 800c0a8:	e000ef34 	.word	0xe000ef34

0800c0ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
	__asm volatile
 800c0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b6:	b672      	cpsid	i
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	b662      	cpsie	i
 800c0c6:	607b      	str	r3, [r7, #4]
}
 800c0c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0ca:	4b11      	ldr	r3, [pc, #68]	@ (800c110 <vPortEnterCritical+0x64>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	4a0f      	ldr	r2, [pc, #60]	@ (800c110 <vPortEnterCritical+0x64>)
 800c0d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0d4:	4b0e      	ldr	r3, [pc, #56]	@ (800c110 <vPortEnterCritical+0x64>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d112      	bne.n	800c102 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c114 <vPortEnterCritical+0x68>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00d      	beq.n	800c102 <vPortEnterCritical+0x56>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ea:	b672      	cpsid	i
 800c0ec:	f383 8811 	msr	BASEPRI, r3
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	b662      	cpsie	i
 800c0fa:	603b      	str	r3, [r7, #0]
}
 800c0fc:	bf00      	nop
 800c0fe:	bf00      	nop
 800c100:	e7fd      	b.n	800c0fe <vPortEnterCritical+0x52>
	}
}
 800c102:	bf00      	nop
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	2000000c 	.word	0x2000000c
 800c114:	e000ed04 	.word	0xe000ed04

0800c118 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c11e:	4b13      	ldr	r3, [pc, #76]	@ (800c16c <vPortExitCritical+0x54>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10d      	bne.n	800c142 <vPortExitCritical+0x2a>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12a:	b672      	cpsid	i
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	b662      	cpsie	i
 800c13a:	607b      	str	r3, [r7, #4]
}
 800c13c:	bf00      	nop
 800c13e:	bf00      	nop
 800c140:	e7fd      	b.n	800c13e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c142:	4b0a      	ldr	r3, [pc, #40]	@ (800c16c <vPortExitCritical+0x54>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	3b01      	subs	r3, #1
 800c148:	4a08      	ldr	r2, [pc, #32]	@ (800c16c <vPortExitCritical+0x54>)
 800c14a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c14c:	4b07      	ldr	r3, [pc, #28]	@ (800c16c <vPortExitCritical+0x54>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d105      	bne.n	800c160 <vPortExitCritical+0x48>
 800c154:	2300      	movs	r3, #0
 800c156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	f383 8811 	msr	BASEPRI, r3
}
 800c15e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c160:	bf00      	nop
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	2000000c 	.word	0x2000000c

0800c170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c170:	f3ef 8009 	mrs	r0, PSP
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	4b15      	ldr	r3, [pc, #84]	@ (800c1d0 <pxCurrentTCBConst>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	f01e 0f10 	tst.w	lr, #16
 800c180:	bf08      	it	eq
 800c182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18a:	6010      	str	r0, [r2, #0]
 800c18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c194:	b672      	cpsid	i
 800c196:	f380 8811 	msr	BASEPRI, r0
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	b662      	cpsie	i
 800c1a4:	f7ff f9d6 	bl	800b554 <vTaskSwitchContext>
 800c1a8:	f04f 0000 	mov.w	r0, #0
 800c1ac:	f380 8811 	msr	BASEPRI, r0
 800c1b0:	bc09      	pop	{r0, r3}
 800c1b2:	6819      	ldr	r1, [r3, #0]
 800c1b4:	6808      	ldr	r0, [r1, #0]
 800c1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ba:	f01e 0f10 	tst.w	lr, #16
 800c1be:	bf08      	it	eq
 800c1c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1c4:	f380 8809 	msr	PSP, r0
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop

0800c1d0 <pxCurrentTCBConst>:
 800c1d0:	200026c0 	.word	0x200026c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1d4:	bf00      	nop
 800c1d6:	bf00      	nop

0800c1d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e2:	b672      	cpsid	i
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	b662      	cpsie	i
 800c1f2:	607b      	str	r3, [r7, #4]
}
 800c1f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1f6:	f7ff f8f1 	bl	800b3dc <xTaskIncrementTick>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d003      	beq.n	800c208 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c200:	4b06      	ldr	r3, [pc, #24]	@ (800c21c <SysTick_Handler+0x44>)
 800c202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	2300      	movs	r3, #0
 800c20a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	f383 8811 	msr	BASEPRI, r3
}
 800c212:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	e000ed04 	.word	0xe000ed04

0800c220 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c224:	4b0b      	ldr	r3, [pc, #44]	@ (800c254 <vPortSetupTimerInterrupt+0x34>)
 800c226:	2200      	movs	r2, #0
 800c228:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c22a:	4b0b      	ldr	r3, [pc, #44]	@ (800c258 <vPortSetupTimerInterrupt+0x38>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c230:	4b0a      	ldr	r3, [pc, #40]	@ (800c25c <vPortSetupTimerInterrupt+0x3c>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a0a      	ldr	r2, [pc, #40]	@ (800c260 <vPortSetupTimerInterrupt+0x40>)
 800c236:	fba2 2303 	umull	r2, r3, r2, r3
 800c23a:	099b      	lsrs	r3, r3, #6
 800c23c:	4a09      	ldr	r2, [pc, #36]	@ (800c264 <vPortSetupTimerInterrupt+0x44>)
 800c23e:	3b01      	subs	r3, #1
 800c240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c242:	4b04      	ldr	r3, [pc, #16]	@ (800c254 <vPortSetupTimerInterrupt+0x34>)
 800c244:	2207      	movs	r2, #7
 800c246:	601a      	str	r2, [r3, #0]
}
 800c248:	bf00      	nop
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	e000e010 	.word	0xe000e010
 800c258:	e000e018 	.word	0xe000e018
 800c25c:	20000000 	.word	0x20000000
 800c260:	10624dd3 	.word	0x10624dd3
 800c264:	e000e014 	.word	0xe000e014

0800c268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c268:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c278 <vPortEnableVFP+0x10>
 800c26c:	6801      	ldr	r1, [r0, #0]
 800c26e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c272:	6001      	str	r1, [r0, #0]
 800c274:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c276:	bf00      	nop
 800c278:	e000ed88 	.word	0xe000ed88

0800c27c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c282:	f3ef 8305 	mrs	r3, IPSR
 800c286:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b0f      	cmp	r3, #15
 800c28c:	d917      	bls.n	800c2be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c28e:	4a1a      	ldr	r2, [pc, #104]	@ (800c2f8 <vPortValidateInterruptPriority+0x7c>)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	4413      	add	r3, r2
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c298:	4b18      	ldr	r3, [pc, #96]	@ (800c2fc <vPortValidateInterruptPriority+0x80>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	7afa      	ldrb	r2, [r7, #11]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d20d      	bcs.n	800c2be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a6:	b672      	cpsid	i
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	b662      	cpsie	i
 800c2b6:	607b      	str	r3, [r7, #4]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2be:	4b10      	ldr	r3, [pc, #64]	@ (800c300 <vPortValidateInterruptPriority+0x84>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c304 <vPortValidateInterruptPriority+0x88>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d90d      	bls.n	800c2ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d2:	b672      	cpsid	i
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	b662      	cpsie	i
 800c2e2:	603b      	str	r3, [r7, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop
 800c2e8:	e7fd      	b.n	800c2e6 <vPortValidateInterruptPriority+0x6a>
	}
 800c2ea:	bf00      	nop
 800c2ec:	3714      	adds	r7, #20
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	e000e3f0 	.word	0xe000e3f0
 800c2fc:	200027ec 	.word	0x200027ec
 800c300:	e000ed0c 	.word	0xe000ed0c
 800c304:	200027f0 	.word	0x200027f0

0800c308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08a      	sub	sp, #40	@ 0x28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c310:	2300      	movs	r3, #0
 800c312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c314:	f7fe ff92 	bl	800b23c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c318:	4b5d      	ldr	r3, [pc, #372]	@ (800c490 <pvPortMalloc+0x188>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c320:	f000 f920 	bl	800c564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c324:	4b5b      	ldr	r3, [pc, #364]	@ (800c494 <pvPortMalloc+0x18c>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4013      	ands	r3, r2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f040 8094 	bne.w	800c45a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d020      	beq.n	800c37a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c338:	2208      	movs	r2, #8
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f003 0307 	and.w	r3, r3, #7
 800c346:	2b00      	cmp	r3, #0
 800c348:	d017      	beq.n	800c37a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f023 0307 	bic.w	r3, r3, #7
 800c350:	3308      	adds	r3, #8
 800c352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00d      	beq.n	800c37a <pvPortMalloc+0x72>
	__asm volatile
 800c35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c362:	b672      	cpsid	i
 800c364:	f383 8811 	msr	BASEPRI, r3
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	b662      	cpsie	i
 800c372:	617b      	str	r3, [r7, #20]
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	e7fd      	b.n	800c376 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d06c      	beq.n	800c45a <pvPortMalloc+0x152>
 800c380:	4b45      	ldr	r3, [pc, #276]	@ (800c498 <pvPortMalloc+0x190>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	429a      	cmp	r2, r3
 800c388:	d867      	bhi.n	800c45a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c38a:	4b44      	ldr	r3, [pc, #272]	@ (800c49c <pvPortMalloc+0x194>)
 800c38c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c38e:	4b43      	ldr	r3, [pc, #268]	@ (800c49c <pvPortMalloc+0x194>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c394:	e004      	b.n	800c3a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d903      	bls.n	800c3b2 <pvPortMalloc+0xaa>
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1f1      	bne.n	800c396 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3b2:	4b37      	ldr	r3, [pc, #220]	@ (800c490 <pvPortMalloc+0x188>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d04e      	beq.n	800c45a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2208      	movs	r2, #8
 800c3c2:	4413      	add	r3, r2
 800c3c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d0:	685a      	ldr	r2, [r3, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	1ad2      	subs	r2, r2, r3
 800c3d6:	2308      	movs	r3, #8
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d922      	bls.n	800c424 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	f003 0307 	and.w	r3, r3, #7
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00d      	beq.n	800c40c <pvPortMalloc+0x104>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f4:	b672      	cpsid	i
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	b662      	cpsie	i
 800c404:	613b      	str	r3, [r7, #16]
}
 800c406:	bf00      	nop
 800c408:	bf00      	nop
 800c40a:	e7fd      	b.n	800c408 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c41e:	69b8      	ldr	r0, [r7, #24]
 800c420:	f000 f902 	bl	800c628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c424:	4b1c      	ldr	r3, [pc, #112]	@ (800c498 <pvPortMalloc+0x190>)
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	4a1a      	ldr	r2, [pc, #104]	@ (800c498 <pvPortMalloc+0x190>)
 800c430:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c432:	4b19      	ldr	r3, [pc, #100]	@ (800c498 <pvPortMalloc+0x190>)
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a0 <pvPortMalloc+0x198>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d203      	bcs.n	800c446 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c43e:	4b16      	ldr	r3, [pc, #88]	@ (800c498 <pvPortMalloc+0x190>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a17      	ldr	r2, [pc, #92]	@ (800c4a0 <pvPortMalloc+0x198>)
 800c444:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	4b12      	ldr	r3, [pc, #72]	@ (800c494 <pvPortMalloc+0x18c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	431a      	orrs	r2, r3
 800c450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c452:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c456:	2200      	movs	r2, #0
 800c458:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c45a:	f7fe fefd 	bl	800b258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	f003 0307 	and.w	r3, r3, #7
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00d      	beq.n	800c484 <pvPortMalloc+0x17c>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46c:	b672      	cpsid	i
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	b662      	cpsie	i
 800c47c:	60fb      	str	r3, [r7, #12]
}
 800c47e:	bf00      	nop
 800c480:	bf00      	nop
 800c482:	e7fd      	b.n	800c480 <pvPortMalloc+0x178>
	return pvReturn;
 800c484:	69fb      	ldr	r3, [r7, #28]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3728      	adds	r7, #40	@ 0x28
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	200063fc 	.word	0x200063fc
 800c494:	20006408 	.word	0x20006408
 800c498:	20006400 	.word	0x20006400
 800c49c:	200063f4 	.word	0x200063f4
 800c4a0:	20006404 	.word	0x20006404

0800c4a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d04e      	beq.n	800c554 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4b6:	2308      	movs	r3, #8
 800c4b8:	425b      	negs	r3, r3
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	4413      	add	r3, r2
 800c4be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	685a      	ldr	r2, [r3, #4]
 800c4c8:	4b24      	ldr	r3, [pc, #144]	@ (800c55c <vPortFree+0xb8>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10d      	bne.n	800c4ee <vPortFree+0x4a>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d6:	b672      	cpsid	i
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	b662      	cpsie	i
 800c4e6:	60fb      	str	r3, [r7, #12]
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	e7fd      	b.n	800c4ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00d      	beq.n	800c512 <vPortFree+0x6e>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fa:	b672      	cpsid	i
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	b662      	cpsie	i
 800c50a:	60bb      	str	r3, [r7, #8]
}
 800c50c:	bf00      	nop
 800c50e:	bf00      	nop
 800c510:	e7fd      	b.n	800c50e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	4b11      	ldr	r3, [pc, #68]	@ (800c55c <vPortFree+0xb8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4013      	ands	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d019      	beq.n	800c554 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d115      	bne.n	800c554 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	4b0b      	ldr	r3, [pc, #44]	@ (800c55c <vPortFree+0xb8>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	43db      	mvns	r3, r3
 800c532:	401a      	ands	r2, r3
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c538:	f7fe fe80 	bl	800b23c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	4b07      	ldr	r3, [pc, #28]	@ (800c560 <vPortFree+0xbc>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4413      	add	r3, r2
 800c546:	4a06      	ldr	r2, [pc, #24]	@ (800c560 <vPortFree+0xbc>)
 800c548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f000 f86c 	bl	800c628 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c550:	f7fe fe82 	bl	800b258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c554:	bf00      	nop
 800c556:	3718      	adds	r7, #24
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	20006408 	.word	0x20006408
 800c560:	20006400 	.word	0x20006400

0800c564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c56a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c56e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c570:	4b27      	ldr	r3, [pc, #156]	@ (800c610 <prvHeapInit+0xac>)
 800c572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00c      	beq.n	800c598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3307      	adds	r3, #7
 800c582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f023 0307 	bic.w	r3, r3, #7
 800c58a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	4a1f      	ldr	r2, [pc, #124]	@ (800c610 <prvHeapInit+0xac>)
 800c594:	4413      	add	r3, r2
 800c596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c59c:	4a1d      	ldr	r2, [pc, #116]	@ (800c614 <prvHeapInit+0xb0>)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5a2:	4b1c      	ldr	r3, [pc, #112]	@ (800c614 <prvHeapInit+0xb0>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5b0:	2208      	movs	r2, #8
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	1a9b      	subs	r3, r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f023 0307 	bic.w	r3, r3, #7
 800c5be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4a15      	ldr	r2, [pc, #84]	@ (800c618 <prvHeapInit+0xb4>)
 800c5c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5c6:	4b14      	ldr	r3, [pc, #80]	@ (800c618 <prvHeapInit+0xb4>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5ce:	4b12      	ldr	r3, [pc, #72]	@ (800c618 <prvHeapInit+0xb4>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	1ad2      	subs	r2, r2, r3
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c618 <prvHeapInit+0xb4>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c61c <prvHeapInit+0xb8>)
 800c5f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	4a09      	ldr	r2, [pc, #36]	@ (800c620 <prvHeapInit+0xbc>)
 800c5fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5fc:	4b09      	ldr	r3, [pc, #36]	@ (800c624 <prvHeapInit+0xc0>)
 800c5fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c602:	601a      	str	r2, [r3, #0]
}
 800c604:	bf00      	nop
 800c606:	3714      	adds	r7, #20
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	200027f4 	.word	0x200027f4
 800c614:	200063f4 	.word	0x200063f4
 800c618:	200063fc 	.word	0x200063fc
 800c61c:	20006404 	.word	0x20006404
 800c620:	20006400 	.word	0x20006400
 800c624:	20006408 	.word	0x20006408

0800c628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c630:	4b28      	ldr	r3, [pc, #160]	@ (800c6d4 <prvInsertBlockIntoFreeList+0xac>)
 800c632:	60fb      	str	r3, [r7, #12]
 800c634:	e002      	b.n	800c63c <prvInsertBlockIntoFreeList+0x14>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	429a      	cmp	r2, r3
 800c644:	d8f7      	bhi.n	800c636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	4413      	add	r3, r2
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d108      	bne.n	800c66a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	441a      	add	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	441a      	add	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d118      	bne.n	800c6b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4b15      	ldr	r3, [pc, #84]	@ (800c6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d00d      	beq.n	800c6a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	441a      	add	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	e008      	b.n	800c6b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	e003      	b.n	800c6b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d002      	beq.n	800c6c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	200063f4 	.word	0x200063f4
 800c6d8:	200063fc 	.word	0x200063fc

0800c6dc <malloc>:
 800c6dc:	4b02      	ldr	r3, [pc, #8]	@ (800c6e8 <malloc+0xc>)
 800c6de:	4601      	mov	r1, r0
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	f000 b82d 	b.w	800c740 <_malloc_r>
 800c6e6:	bf00      	nop
 800c6e8:	2000001c 	.word	0x2000001c

0800c6ec <free>:
 800c6ec:	4b02      	ldr	r3, [pc, #8]	@ (800c6f8 <free+0xc>)
 800c6ee:	4601      	mov	r1, r0
 800c6f0:	6818      	ldr	r0, [r3, #0]
 800c6f2:	f000 bbcb 	b.w	800ce8c <_free_r>
 800c6f6:	bf00      	nop
 800c6f8:	2000001c 	.word	0x2000001c

0800c6fc <sbrk_aligned>:
 800c6fc:	b570      	push	{r4, r5, r6, lr}
 800c6fe:	4e0f      	ldr	r6, [pc, #60]	@ (800c73c <sbrk_aligned+0x40>)
 800c700:	460c      	mov	r4, r1
 800c702:	6831      	ldr	r1, [r6, #0]
 800c704:	4605      	mov	r5, r0
 800c706:	b911      	cbnz	r1, 800c70e <sbrk_aligned+0x12>
 800c708:	f000 fb62 	bl	800cdd0 <_sbrk_r>
 800c70c:	6030      	str	r0, [r6, #0]
 800c70e:	4621      	mov	r1, r4
 800c710:	4628      	mov	r0, r5
 800c712:	f000 fb5d 	bl	800cdd0 <_sbrk_r>
 800c716:	1c43      	adds	r3, r0, #1
 800c718:	d103      	bne.n	800c722 <sbrk_aligned+0x26>
 800c71a:	f04f 34ff 	mov.w	r4, #4294967295
 800c71e:	4620      	mov	r0, r4
 800c720:	bd70      	pop	{r4, r5, r6, pc}
 800c722:	1cc4      	adds	r4, r0, #3
 800c724:	f024 0403 	bic.w	r4, r4, #3
 800c728:	42a0      	cmp	r0, r4
 800c72a:	d0f8      	beq.n	800c71e <sbrk_aligned+0x22>
 800c72c:	1a21      	subs	r1, r4, r0
 800c72e:	4628      	mov	r0, r5
 800c730:	f000 fb4e 	bl	800cdd0 <_sbrk_r>
 800c734:	3001      	adds	r0, #1
 800c736:	d1f2      	bne.n	800c71e <sbrk_aligned+0x22>
 800c738:	e7ef      	b.n	800c71a <sbrk_aligned+0x1e>
 800c73a:	bf00      	nop
 800c73c:	2000640c 	.word	0x2000640c

0800c740 <_malloc_r>:
 800c740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c744:	1ccd      	adds	r5, r1, #3
 800c746:	f025 0503 	bic.w	r5, r5, #3
 800c74a:	3508      	adds	r5, #8
 800c74c:	2d0c      	cmp	r5, #12
 800c74e:	bf38      	it	cc
 800c750:	250c      	movcc	r5, #12
 800c752:	2d00      	cmp	r5, #0
 800c754:	4606      	mov	r6, r0
 800c756:	db01      	blt.n	800c75c <_malloc_r+0x1c>
 800c758:	42a9      	cmp	r1, r5
 800c75a:	d904      	bls.n	800c766 <_malloc_r+0x26>
 800c75c:	230c      	movs	r3, #12
 800c75e:	6033      	str	r3, [r6, #0]
 800c760:	2000      	movs	r0, #0
 800c762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c766:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c83c <_malloc_r+0xfc>
 800c76a:	f000 f869 	bl	800c840 <__malloc_lock>
 800c76e:	f8d8 3000 	ldr.w	r3, [r8]
 800c772:	461c      	mov	r4, r3
 800c774:	bb44      	cbnz	r4, 800c7c8 <_malloc_r+0x88>
 800c776:	4629      	mov	r1, r5
 800c778:	4630      	mov	r0, r6
 800c77a:	f7ff ffbf 	bl	800c6fc <sbrk_aligned>
 800c77e:	1c43      	adds	r3, r0, #1
 800c780:	4604      	mov	r4, r0
 800c782:	d158      	bne.n	800c836 <_malloc_r+0xf6>
 800c784:	f8d8 4000 	ldr.w	r4, [r8]
 800c788:	4627      	mov	r7, r4
 800c78a:	2f00      	cmp	r7, #0
 800c78c:	d143      	bne.n	800c816 <_malloc_r+0xd6>
 800c78e:	2c00      	cmp	r4, #0
 800c790:	d04b      	beq.n	800c82a <_malloc_r+0xea>
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	4639      	mov	r1, r7
 800c796:	4630      	mov	r0, r6
 800c798:	eb04 0903 	add.w	r9, r4, r3
 800c79c:	f000 fb18 	bl	800cdd0 <_sbrk_r>
 800c7a0:	4581      	cmp	r9, r0
 800c7a2:	d142      	bne.n	800c82a <_malloc_r+0xea>
 800c7a4:	6821      	ldr	r1, [r4, #0]
 800c7a6:	1a6d      	subs	r5, r5, r1
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f7ff ffa6 	bl	800c6fc <sbrk_aligned>
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	d03a      	beq.n	800c82a <_malloc_r+0xea>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	442b      	add	r3, r5
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c7be:	685a      	ldr	r2, [r3, #4]
 800c7c0:	bb62      	cbnz	r2, 800c81c <_malloc_r+0xdc>
 800c7c2:	f8c8 7000 	str.w	r7, [r8]
 800c7c6:	e00f      	b.n	800c7e8 <_malloc_r+0xa8>
 800c7c8:	6822      	ldr	r2, [r4, #0]
 800c7ca:	1b52      	subs	r2, r2, r5
 800c7cc:	d420      	bmi.n	800c810 <_malloc_r+0xd0>
 800c7ce:	2a0b      	cmp	r2, #11
 800c7d0:	d917      	bls.n	800c802 <_malloc_r+0xc2>
 800c7d2:	1961      	adds	r1, r4, r5
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	6025      	str	r5, [r4, #0]
 800c7d8:	bf18      	it	ne
 800c7da:	6059      	strne	r1, [r3, #4]
 800c7dc:	6863      	ldr	r3, [r4, #4]
 800c7de:	bf08      	it	eq
 800c7e0:	f8c8 1000 	streq.w	r1, [r8]
 800c7e4:	5162      	str	r2, [r4, r5]
 800c7e6:	604b      	str	r3, [r1, #4]
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f000 f82f 	bl	800c84c <__malloc_unlock>
 800c7ee:	f104 000b 	add.w	r0, r4, #11
 800c7f2:	1d23      	adds	r3, r4, #4
 800c7f4:	f020 0007 	bic.w	r0, r0, #7
 800c7f8:	1ac2      	subs	r2, r0, r3
 800c7fa:	bf1c      	itt	ne
 800c7fc:	1a1b      	subne	r3, r3, r0
 800c7fe:	50a3      	strne	r3, [r4, r2]
 800c800:	e7af      	b.n	800c762 <_malloc_r+0x22>
 800c802:	6862      	ldr	r2, [r4, #4]
 800c804:	42a3      	cmp	r3, r4
 800c806:	bf0c      	ite	eq
 800c808:	f8c8 2000 	streq.w	r2, [r8]
 800c80c:	605a      	strne	r2, [r3, #4]
 800c80e:	e7eb      	b.n	800c7e8 <_malloc_r+0xa8>
 800c810:	4623      	mov	r3, r4
 800c812:	6864      	ldr	r4, [r4, #4]
 800c814:	e7ae      	b.n	800c774 <_malloc_r+0x34>
 800c816:	463c      	mov	r4, r7
 800c818:	687f      	ldr	r7, [r7, #4]
 800c81a:	e7b6      	b.n	800c78a <_malloc_r+0x4a>
 800c81c:	461a      	mov	r2, r3
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	42a3      	cmp	r3, r4
 800c822:	d1fb      	bne.n	800c81c <_malloc_r+0xdc>
 800c824:	2300      	movs	r3, #0
 800c826:	6053      	str	r3, [r2, #4]
 800c828:	e7de      	b.n	800c7e8 <_malloc_r+0xa8>
 800c82a:	230c      	movs	r3, #12
 800c82c:	6033      	str	r3, [r6, #0]
 800c82e:	4630      	mov	r0, r6
 800c830:	f000 f80c 	bl	800c84c <__malloc_unlock>
 800c834:	e794      	b.n	800c760 <_malloc_r+0x20>
 800c836:	6005      	str	r5, [r0, #0]
 800c838:	e7d6      	b.n	800c7e8 <_malloc_r+0xa8>
 800c83a:	bf00      	nop
 800c83c:	20006410 	.word	0x20006410

0800c840 <__malloc_lock>:
 800c840:	4801      	ldr	r0, [pc, #4]	@ (800c848 <__malloc_lock+0x8>)
 800c842:	f000 bb12 	b.w	800ce6a <__retarget_lock_acquire_recursive>
 800c846:	bf00      	nop
 800c848:	20006554 	.word	0x20006554

0800c84c <__malloc_unlock>:
 800c84c:	4801      	ldr	r0, [pc, #4]	@ (800c854 <__malloc_unlock+0x8>)
 800c84e:	f000 bb0d 	b.w	800ce6c <__retarget_lock_release_recursive>
 800c852:	bf00      	nop
 800c854:	20006554 	.word	0x20006554

0800c858 <std>:
 800c858:	2300      	movs	r3, #0
 800c85a:	b510      	push	{r4, lr}
 800c85c:	4604      	mov	r4, r0
 800c85e:	e9c0 3300 	strd	r3, r3, [r0]
 800c862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c866:	6083      	str	r3, [r0, #8]
 800c868:	8181      	strh	r1, [r0, #12]
 800c86a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c86c:	81c2      	strh	r2, [r0, #14]
 800c86e:	6183      	str	r3, [r0, #24]
 800c870:	4619      	mov	r1, r3
 800c872:	2208      	movs	r2, #8
 800c874:	305c      	adds	r0, #92	@ 0x5c
 800c876:	f000 fa19 	bl	800ccac <memset>
 800c87a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b0 <std+0x58>)
 800c87c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c87e:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b4 <std+0x5c>)
 800c880:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c882:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b8 <std+0x60>)
 800c884:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c886:	4b0d      	ldr	r3, [pc, #52]	@ (800c8bc <std+0x64>)
 800c888:	6323      	str	r3, [r4, #48]	@ 0x30
 800c88a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c0 <std+0x68>)
 800c88c:	6224      	str	r4, [r4, #32]
 800c88e:	429c      	cmp	r4, r3
 800c890:	d006      	beq.n	800c8a0 <std+0x48>
 800c892:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c896:	4294      	cmp	r4, r2
 800c898:	d002      	beq.n	800c8a0 <std+0x48>
 800c89a:	33d0      	adds	r3, #208	@ 0xd0
 800c89c:	429c      	cmp	r4, r3
 800c89e:	d105      	bne.n	800c8ac <std+0x54>
 800c8a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a8:	f000 bade 	b.w	800ce68 <__retarget_lock_init_recursive>
 800c8ac:	bd10      	pop	{r4, pc}
 800c8ae:	bf00      	nop
 800c8b0:	0800cafd 	.word	0x0800cafd
 800c8b4:	0800cb1f 	.word	0x0800cb1f
 800c8b8:	0800cb57 	.word	0x0800cb57
 800c8bc:	0800cb7b 	.word	0x0800cb7b
 800c8c0:	20006414 	.word	0x20006414

0800c8c4 <stdio_exit_handler>:
 800c8c4:	4a02      	ldr	r2, [pc, #8]	@ (800c8d0 <stdio_exit_handler+0xc>)
 800c8c6:	4903      	ldr	r1, [pc, #12]	@ (800c8d4 <stdio_exit_handler+0x10>)
 800c8c8:	4803      	ldr	r0, [pc, #12]	@ (800c8d8 <stdio_exit_handler+0x14>)
 800c8ca:	f000 b869 	b.w	800c9a0 <_fwalk_sglue>
 800c8ce:	bf00      	nop
 800c8d0:	20000010 	.word	0x20000010
 800c8d4:	0800d879 	.word	0x0800d879
 800c8d8:	20000020 	.word	0x20000020

0800c8dc <cleanup_stdio>:
 800c8dc:	6841      	ldr	r1, [r0, #4]
 800c8de:	4b0c      	ldr	r3, [pc, #48]	@ (800c910 <cleanup_stdio+0x34>)
 800c8e0:	4299      	cmp	r1, r3
 800c8e2:	b510      	push	{r4, lr}
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	d001      	beq.n	800c8ec <cleanup_stdio+0x10>
 800c8e8:	f000 ffc6 	bl	800d878 <_fflush_r>
 800c8ec:	68a1      	ldr	r1, [r4, #8]
 800c8ee:	4b09      	ldr	r3, [pc, #36]	@ (800c914 <cleanup_stdio+0x38>)
 800c8f0:	4299      	cmp	r1, r3
 800c8f2:	d002      	beq.n	800c8fa <cleanup_stdio+0x1e>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 ffbf 	bl	800d878 <_fflush_r>
 800c8fa:	68e1      	ldr	r1, [r4, #12]
 800c8fc:	4b06      	ldr	r3, [pc, #24]	@ (800c918 <cleanup_stdio+0x3c>)
 800c8fe:	4299      	cmp	r1, r3
 800c900:	d004      	beq.n	800c90c <cleanup_stdio+0x30>
 800c902:	4620      	mov	r0, r4
 800c904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c908:	f000 bfb6 	b.w	800d878 <_fflush_r>
 800c90c:	bd10      	pop	{r4, pc}
 800c90e:	bf00      	nop
 800c910:	20006414 	.word	0x20006414
 800c914:	2000647c 	.word	0x2000647c
 800c918:	200064e4 	.word	0x200064e4

0800c91c <global_stdio_init.part.0>:
 800c91c:	b510      	push	{r4, lr}
 800c91e:	4b0b      	ldr	r3, [pc, #44]	@ (800c94c <global_stdio_init.part.0+0x30>)
 800c920:	4c0b      	ldr	r4, [pc, #44]	@ (800c950 <global_stdio_init.part.0+0x34>)
 800c922:	4a0c      	ldr	r2, [pc, #48]	@ (800c954 <global_stdio_init.part.0+0x38>)
 800c924:	601a      	str	r2, [r3, #0]
 800c926:	4620      	mov	r0, r4
 800c928:	2200      	movs	r2, #0
 800c92a:	2104      	movs	r1, #4
 800c92c:	f7ff ff94 	bl	800c858 <std>
 800c930:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c934:	2201      	movs	r2, #1
 800c936:	2109      	movs	r1, #9
 800c938:	f7ff ff8e 	bl	800c858 <std>
 800c93c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c940:	2202      	movs	r2, #2
 800c942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c946:	2112      	movs	r1, #18
 800c948:	f7ff bf86 	b.w	800c858 <std>
 800c94c:	2000654c 	.word	0x2000654c
 800c950:	20006414 	.word	0x20006414
 800c954:	0800c8c5 	.word	0x0800c8c5

0800c958 <__sfp_lock_acquire>:
 800c958:	4801      	ldr	r0, [pc, #4]	@ (800c960 <__sfp_lock_acquire+0x8>)
 800c95a:	f000 ba86 	b.w	800ce6a <__retarget_lock_acquire_recursive>
 800c95e:	bf00      	nop
 800c960:	20006555 	.word	0x20006555

0800c964 <__sfp_lock_release>:
 800c964:	4801      	ldr	r0, [pc, #4]	@ (800c96c <__sfp_lock_release+0x8>)
 800c966:	f000 ba81 	b.w	800ce6c <__retarget_lock_release_recursive>
 800c96a:	bf00      	nop
 800c96c:	20006555 	.word	0x20006555

0800c970 <__sinit>:
 800c970:	b510      	push	{r4, lr}
 800c972:	4604      	mov	r4, r0
 800c974:	f7ff fff0 	bl	800c958 <__sfp_lock_acquire>
 800c978:	6a23      	ldr	r3, [r4, #32]
 800c97a:	b11b      	cbz	r3, 800c984 <__sinit+0x14>
 800c97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c980:	f7ff bff0 	b.w	800c964 <__sfp_lock_release>
 800c984:	4b04      	ldr	r3, [pc, #16]	@ (800c998 <__sinit+0x28>)
 800c986:	6223      	str	r3, [r4, #32]
 800c988:	4b04      	ldr	r3, [pc, #16]	@ (800c99c <__sinit+0x2c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1f5      	bne.n	800c97c <__sinit+0xc>
 800c990:	f7ff ffc4 	bl	800c91c <global_stdio_init.part.0>
 800c994:	e7f2      	b.n	800c97c <__sinit+0xc>
 800c996:	bf00      	nop
 800c998:	0800c8dd 	.word	0x0800c8dd
 800c99c:	2000654c 	.word	0x2000654c

0800c9a0 <_fwalk_sglue>:
 800c9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a4:	4607      	mov	r7, r0
 800c9a6:	4688      	mov	r8, r1
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	2600      	movs	r6, #0
 800c9ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9b0:	f1b9 0901 	subs.w	r9, r9, #1
 800c9b4:	d505      	bpl.n	800c9c2 <_fwalk_sglue+0x22>
 800c9b6:	6824      	ldr	r4, [r4, #0]
 800c9b8:	2c00      	cmp	r4, #0
 800c9ba:	d1f7      	bne.n	800c9ac <_fwalk_sglue+0xc>
 800c9bc:	4630      	mov	r0, r6
 800c9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d907      	bls.n	800c9d8 <_fwalk_sglue+0x38>
 800c9c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	d003      	beq.n	800c9d8 <_fwalk_sglue+0x38>
 800c9d0:	4629      	mov	r1, r5
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	47c0      	blx	r8
 800c9d6:	4306      	orrs	r6, r0
 800c9d8:	3568      	adds	r5, #104	@ 0x68
 800c9da:	e7e9      	b.n	800c9b0 <_fwalk_sglue+0x10>

0800c9dc <iprintf>:
 800c9dc:	b40f      	push	{r0, r1, r2, r3}
 800c9de:	b507      	push	{r0, r1, r2, lr}
 800c9e0:	4906      	ldr	r1, [pc, #24]	@ (800c9fc <iprintf+0x20>)
 800c9e2:	ab04      	add	r3, sp, #16
 800c9e4:	6808      	ldr	r0, [r1, #0]
 800c9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ea:	6881      	ldr	r1, [r0, #8]
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	f000 fc19 	bl	800d224 <_vfiprintf_r>
 800c9f2:	b003      	add	sp, #12
 800c9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9f8:	b004      	add	sp, #16
 800c9fa:	4770      	bx	lr
 800c9fc:	2000001c 	.word	0x2000001c

0800ca00 <_puts_r>:
 800ca00:	6a03      	ldr	r3, [r0, #32]
 800ca02:	b570      	push	{r4, r5, r6, lr}
 800ca04:	6884      	ldr	r4, [r0, #8]
 800ca06:	4605      	mov	r5, r0
 800ca08:	460e      	mov	r6, r1
 800ca0a:	b90b      	cbnz	r3, 800ca10 <_puts_r+0x10>
 800ca0c:	f7ff ffb0 	bl	800c970 <__sinit>
 800ca10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca12:	07db      	lsls	r3, r3, #31
 800ca14:	d405      	bmi.n	800ca22 <_puts_r+0x22>
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	0598      	lsls	r0, r3, #22
 800ca1a:	d402      	bmi.n	800ca22 <_puts_r+0x22>
 800ca1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca1e:	f000 fa24 	bl	800ce6a <__retarget_lock_acquire_recursive>
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	0719      	lsls	r1, r3, #28
 800ca26:	d502      	bpl.n	800ca2e <_puts_r+0x2e>
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d135      	bne.n	800ca9a <_puts_r+0x9a>
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4628      	mov	r0, r5
 800ca32:	f000 f8e5 	bl	800cc00 <__swsetup_r>
 800ca36:	b380      	cbz	r0, 800ca9a <_puts_r+0x9a>
 800ca38:	f04f 35ff 	mov.w	r5, #4294967295
 800ca3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca3e:	07da      	lsls	r2, r3, #31
 800ca40:	d405      	bmi.n	800ca4e <_puts_r+0x4e>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	059b      	lsls	r3, r3, #22
 800ca46:	d402      	bmi.n	800ca4e <_puts_r+0x4e>
 800ca48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca4a:	f000 fa0f 	bl	800ce6c <__retarget_lock_release_recursive>
 800ca4e:	4628      	mov	r0, r5
 800ca50:	bd70      	pop	{r4, r5, r6, pc}
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	da04      	bge.n	800ca60 <_puts_r+0x60>
 800ca56:	69a2      	ldr	r2, [r4, #24]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	dc17      	bgt.n	800ca8c <_puts_r+0x8c>
 800ca5c:	290a      	cmp	r1, #10
 800ca5e:	d015      	beq.n	800ca8c <_puts_r+0x8c>
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	1c5a      	adds	r2, r3, #1
 800ca64:	6022      	str	r2, [r4, #0]
 800ca66:	7019      	strb	r1, [r3, #0]
 800ca68:	68a3      	ldr	r3, [r4, #8]
 800ca6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	60a3      	str	r3, [r4, #8]
 800ca72:	2900      	cmp	r1, #0
 800ca74:	d1ed      	bne.n	800ca52 <_puts_r+0x52>
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	da11      	bge.n	800ca9e <_puts_r+0x9e>
 800ca7a:	4622      	mov	r2, r4
 800ca7c:	210a      	movs	r1, #10
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f000 f87f 	bl	800cb82 <__swbuf_r>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d0d7      	beq.n	800ca38 <_puts_r+0x38>
 800ca88:	250a      	movs	r5, #10
 800ca8a:	e7d7      	b.n	800ca3c <_puts_r+0x3c>
 800ca8c:	4622      	mov	r2, r4
 800ca8e:	4628      	mov	r0, r5
 800ca90:	f000 f877 	bl	800cb82 <__swbuf_r>
 800ca94:	3001      	adds	r0, #1
 800ca96:	d1e7      	bne.n	800ca68 <_puts_r+0x68>
 800ca98:	e7ce      	b.n	800ca38 <_puts_r+0x38>
 800ca9a:	3e01      	subs	r6, #1
 800ca9c:	e7e4      	b.n	800ca68 <_puts_r+0x68>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	1c5a      	adds	r2, r3, #1
 800caa2:	6022      	str	r2, [r4, #0]
 800caa4:	220a      	movs	r2, #10
 800caa6:	701a      	strb	r2, [r3, #0]
 800caa8:	e7ee      	b.n	800ca88 <_puts_r+0x88>
	...

0800caac <puts>:
 800caac:	4b02      	ldr	r3, [pc, #8]	@ (800cab8 <puts+0xc>)
 800caae:	4601      	mov	r1, r0
 800cab0:	6818      	ldr	r0, [r3, #0]
 800cab2:	f7ff bfa5 	b.w	800ca00 <_puts_r>
 800cab6:	bf00      	nop
 800cab8:	2000001c 	.word	0x2000001c

0800cabc <siprintf>:
 800cabc:	b40e      	push	{r1, r2, r3}
 800cabe:	b500      	push	{lr}
 800cac0:	b09c      	sub	sp, #112	@ 0x70
 800cac2:	ab1d      	add	r3, sp, #116	@ 0x74
 800cac4:	9002      	str	r0, [sp, #8]
 800cac6:	9006      	str	r0, [sp, #24]
 800cac8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cacc:	4809      	ldr	r0, [pc, #36]	@ (800caf4 <siprintf+0x38>)
 800cace:	9107      	str	r1, [sp, #28]
 800cad0:	9104      	str	r1, [sp, #16]
 800cad2:	4909      	ldr	r1, [pc, #36]	@ (800caf8 <siprintf+0x3c>)
 800cad4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad8:	9105      	str	r1, [sp, #20]
 800cada:	6800      	ldr	r0, [r0, #0]
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	a902      	add	r1, sp, #8
 800cae0:	f000 fa7a 	bl	800cfd8 <_svfiprintf_r>
 800cae4:	9b02      	ldr	r3, [sp, #8]
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	b01c      	add	sp, #112	@ 0x70
 800caec:	f85d eb04 	ldr.w	lr, [sp], #4
 800caf0:	b003      	add	sp, #12
 800caf2:	4770      	bx	lr
 800caf4:	2000001c 	.word	0x2000001c
 800caf8:	ffff0208 	.word	0xffff0208

0800cafc <__sread>:
 800cafc:	b510      	push	{r4, lr}
 800cafe:	460c      	mov	r4, r1
 800cb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb04:	f000 f952 	bl	800cdac <_read_r>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	bfab      	itete	ge
 800cb0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cb0e:	89a3      	ldrhlt	r3, [r4, #12]
 800cb10:	181b      	addge	r3, r3, r0
 800cb12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cb16:	bfac      	ite	ge
 800cb18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cb1a:	81a3      	strhlt	r3, [r4, #12]
 800cb1c:	bd10      	pop	{r4, pc}

0800cb1e <__swrite>:
 800cb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb22:	461f      	mov	r7, r3
 800cb24:	898b      	ldrh	r3, [r1, #12]
 800cb26:	05db      	lsls	r3, r3, #23
 800cb28:	4605      	mov	r5, r0
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	4616      	mov	r6, r2
 800cb2e:	d505      	bpl.n	800cb3c <__swrite+0x1e>
 800cb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb34:	2302      	movs	r3, #2
 800cb36:	2200      	movs	r2, #0
 800cb38:	f000 f926 	bl	800cd88 <_lseek_r>
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb46:	81a3      	strh	r3, [r4, #12]
 800cb48:	4632      	mov	r2, r6
 800cb4a:	463b      	mov	r3, r7
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb52:	f000 b94d 	b.w	800cdf0 <_write_r>

0800cb56 <__sseek>:
 800cb56:	b510      	push	{r4, lr}
 800cb58:	460c      	mov	r4, r1
 800cb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb5e:	f000 f913 	bl	800cd88 <_lseek_r>
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	89a3      	ldrh	r3, [r4, #12]
 800cb66:	bf15      	itete	ne
 800cb68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb72:	81a3      	strheq	r3, [r4, #12]
 800cb74:	bf18      	it	ne
 800cb76:	81a3      	strhne	r3, [r4, #12]
 800cb78:	bd10      	pop	{r4, pc}

0800cb7a <__sclose>:
 800cb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb7e:	f000 b89d 	b.w	800ccbc <_close_r>

0800cb82 <__swbuf_r>:
 800cb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb84:	460e      	mov	r6, r1
 800cb86:	4614      	mov	r4, r2
 800cb88:	4605      	mov	r5, r0
 800cb8a:	b118      	cbz	r0, 800cb94 <__swbuf_r+0x12>
 800cb8c:	6a03      	ldr	r3, [r0, #32]
 800cb8e:	b90b      	cbnz	r3, 800cb94 <__swbuf_r+0x12>
 800cb90:	f7ff feee 	bl	800c970 <__sinit>
 800cb94:	69a3      	ldr	r3, [r4, #24]
 800cb96:	60a3      	str	r3, [r4, #8]
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	071a      	lsls	r2, r3, #28
 800cb9c:	d501      	bpl.n	800cba2 <__swbuf_r+0x20>
 800cb9e:	6923      	ldr	r3, [r4, #16]
 800cba0:	b943      	cbnz	r3, 800cbb4 <__swbuf_r+0x32>
 800cba2:	4621      	mov	r1, r4
 800cba4:	4628      	mov	r0, r5
 800cba6:	f000 f82b 	bl	800cc00 <__swsetup_r>
 800cbaa:	b118      	cbz	r0, 800cbb4 <__swbuf_r+0x32>
 800cbac:	f04f 37ff 	mov.w	r7, #4294967295
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	6922      	ldr	r2, [r4, #16]
 800cbb8:	1a98      	subs	r0, r3, r2
 800cbba:	6963      	ldr	r3, [r4, #20]
 800cbbc:	b2f6      	uxtb	r6, r6
 800cbbe:	4283      	cmp	r3, r0
 800cbc0:	4637      	mov	r7, r6
 800cbc2:	dc05      	bgt.n	800cbd0 <__swbuf_r+0x4e>
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f000 fe56 	bl	800d878 <_fflush_r>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d1ed      	bne.n	800cbac <__swbuf_r+0x2a>
 800cbd0:	68a3      	ldr	r3, [r4, #8]
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	60a3      	str	r3, [r4, #8]
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	6022      	str	r2, [r4, #0]
 800cbdc:	701e      	strb	r6, [r3, #0]
 800cbde:	6962      	ldr	r2, [r4, #20]
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d004      	beq.n	800cbf0 <__swbuf_r+0x6e>
 800cbe6:	89a3      	ldrh	r3, [r4, #12]
 800cbe8:	07db      	lsls	r3, r3, #31
 800cbea:	d5e1      	bpl.n	800cbb0 <__swbuf_r+0x2e>
 800cbec:	2e0a      	cmp	r6, #10
 800cbee:	d1df      	bne.n	800cbb0 <__swbuf_r+0x2e>
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f000 fe40 	bl	800d878 <_fflush_r>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d0d9      	beq.n	800cbb0 <__swbuf_r+0x2e>
 800cbfc:	e7d6      	b.n	800cbac <__swbuf_r+0x2a>
	...

0800cc00 <__swsetup_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	4b29      	ldr	r3, [pc, #164]	@ (800cca8 <__swsetup_r+0xa8>)
 800cc04:	4605      	mov	r5, r0
 800cc06:	6818      	ldr	r0, [r3, #0]
 800cc08:	460c      	mov	r4, r1
 800cc0a:	b118      	cbz	r0, 800cc14 <__swsetup_r+0x14>
 800cc0c:	6a03      	ldr	r3, [r0, #32]
 800cc0e:	b90b      	cbnz	r3, 800cc14 <__swsetup_r+0x14>
 800cc10:	f7ff feae 	bl	800c970 <__sinit>
 800cc14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc18:	0719      	lsls	r1, r3, #28
 800cc1a:	d422      	bmi.n	800cc62 <__swsetup_r+0x62>
 800cc1c:	06da      	lsls	r2, r3, #27
 800cc1e:	d407      	bmi.n	800cc30 <__swsetup_r+0x30>
 800cc20:	2209      	movs	r2, #9
 800cc22:	602a      	str	r2, [r5, #0]
 800cc24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc28:	81a3      	strh	r3, [r4, #12]
 800cc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2e:	e033      	b.n	800cc98 <__swsetup_r+0x98>
 800cc30:	0758      	lsls	r0, r3, #29
 800cc32:	d512      	bpl.n	800cc5a <__swsetup_r+0x5a>
 800cc34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc36:	b141      	cbz	r1, 800cc4a <__swsetup_r+0x4a>
 800cc38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc3c:	4299      	cmp	r1, r3
 800cc3e:	d002      	beq.n	800cc46 <__swsetup_r+0x46>
 800cc40:	4628      	mov	r0, r5
 800cc42:	f000 f923 	bl	800ce8c <_free_r>
 800cc46:	2300      	movs	r3, #0
 800cc48:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	2300      	movs	r3, #0
 800cc54:	6063      	str	r3, [r4, #4]
 800cc56:	6923      	ldr	r3, [r4, #16]
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	f043 0308 	orr.w	r3, r3, #8
 800cc60:	81a3      	strh	r3, [r4, #12]
 800cc62:	6923      	ldr	r3, [r4, #16]
 800cc64:	b94b      	cbnz	r3, 800cc7a <__swsetup_r+0x7a>
 800cc66:	89a3      	ldrh	r3, [r4, #12]
 800cc68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc70:	d003      	beq.n	800cc7a <__swsetup_r+0x7a>
 800cc72:	4621      	mov	r1, r4
 800cc74:	4628      	mov	r0, r5
 800cc76:	f000 fe4d 	bl	800d914 <__smakebuf_r>
 800cc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc7e:	f013 0201 	ands.w	r2, r3, #1
 800cc82:	d00a      	beq.n	800cc9a <__swsetup_r+0x9a>
 800cc84:	2200      	movs	r2, #0
 800cc86:	60a2      	str	r2, [r4, #8]
 800cc88:	6962      	ldr	r2, [r4, #20]
 800cc8a:	4252      	negs	r2, r2
 800cc8c:	61a2      	str	r2, [r4, #24]
 800cc8e:	6922      	ldr	r2, [r4, #16]
 800cc90:	b942      	cbnz	r2, 800cca4 <__swsetup_r+0xa4>
 800cc92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc96:	d1c5      	bne.n	800cc24 <__swsetup_r+0x24>
 800cc98:	bd38      	pop	{r3, r4, r5, pc}
 800cc9a:	0799      	lsls	r1, r3, #30
 800cc9c:	bf58      	it	pl
 800cc9e:	6962      	ldrpl	r2, [r4, #20]
 800cca0:	60a2      	str	r2, [r4, #8]
 800cca2:	e7f4      	b.n	800cc8e <__swsetup_r+0x8e>
 800cca4:	2000      	movs	r0, #0
 800cca6:	e7f7      	b.n	800cc98 <__swsetup_r+0x98>
 800cca8:	2000001c 	.word	0x2000001c

0800ccac <memset>:
 800ccac:	4402      	add	r2, r0
 800ccae:	4603      	mov	r3, r0
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d100      	bne.n	800ccb6 <memset+0xa>
 800ccb4:	4770      	bx	lr
 800ccb6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccba:	e7f9      	b.n	800ccb0 <memset+0x4>

0800ccbc <_close_r>:
 800ccbc:	b538      	push	{r3, r4, r5, lr}
 800ccbe:	4d06      	ldr	r5, [pc, #24]	@ (800ccd8 <_close_r+0x1c>)
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	4608      	mov	r0, r1
 800ccc6:	602b      	str	r3, [r5, #0]
 800ccc8:	f7f4 fe1b 	bl	8001902 <_close>
 800cccc:	1c43      	adds	r3, r0, #1
 800ccce:	d102      	bne.n	800ccd6 <_close_r+0x1a>
 800ccd0:	682b      	ldr	r3, [r5, #0]
 800ccd2:	b103      	cbz	r3, 800ccd6 <_close_r+0x1a>
 800ccd4:	6023      	str	r3, [r4, #0]
 800ccd6:	bd38      	pop	{r3, r4, r5, pc}
 800ccd8:	20006550 	.word	0x20006550

0800ccdc <_reclaim_reent>:
 800ccdc:	4b29      	ldr	r3, [pc, #164]	@ (800cd84 <_reclaim_reent+0xa8>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4283      	cmp	r3, r0
 800cce2:	b570      	push	{r4, r5, r6, lr}
 800cce4:	4604      	mov	r4, r0
 800cce6:	d04b      	beq.n	800cd80 <_reclaim_reent+0xa4>
 800cce8:	69c3      	ldr	r3, [r0, #28]
 800ccea:	b1ab      	cbz	r3, 800cd18 <_reclaim_reent+0x3c>
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	b16b      	cbz	r3, 800cd0c <_reclaim_reent+0x30>
 800ccf0:	2500      	movs	r5, #0
 800ccf2:	69e3      	ldr	r3, [r4, #28]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	5959      	ldr	r1, [r3, r5]
 800ccf8:	2900      	cmp	r1, #0
 800ccfa:	d13b      	bne.n	800cd74 <_reclaim_reent+0x98>
 800ccfc:	3504      	adds	r5, #4
 800ccfe:	2d80      	cmp	r5, #128	@ 0x80
 800cd00:	d1f7      	bne.n	800ccf2 <_reclaim_reent+0x16>
 800cd02:	69e3      	ldr	r3, [r4, #28]
 800cd04:	4620      	mov	r0, r4
 800cd06:	68d9      	ldr	r1, [r3, #12]
 800cd08:	f000 f8c0 	bl	800ce8c <_free_r>
 800cd0c:	69e3      	ldr	r3, [r4, #28]
 800cd0e:	6819      	ldr	r1, [r3, #0]
 800cd10:	b111      	cbz	r1, 800cd18 <_reclaim_reent+0x3c>
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 f8ba 	bl	800ce8c <_free_r>
 800cd18:	6961      	ldr	r1, [r4, #20]
 800cd1a:	b111      	cbz	r1, 800cd22 <_reclaim_reent+0x46>
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f000 f8b5 	bl	800ce8c <_free_r>
 800cd22:	69e1      	ldr	r1, [r4, #28]
 800cd24:	b111      	cbz	r1, 800cd2c <_reclaim_reent+0x50>
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 f8b0 	bl	800ce8c <_free_r>
 800cd2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cd2e:	b111      	cbz	r1, 800cd36 <_reclaim_reent+0x5a>
 800cd30:	4620      	mov	r0, r4
 800cd32:	f000 f8ab 	bl	800ce8c <_free_r>
 800cd36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd38:	b111      	cbz	r1, 800cd40 <_reclaim_reent+0x64>
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 f8a6 	bl	800ce8c <_free_r>
 800cd40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cd42:	b111      	cbz	r1, 800cd4a <_reclaim_reent+0x6e>
 800cd44:	4620      	mov	r0, r4
 800cd46:	f000 f8a1 	bl	800ce8c <_free_r>
 800cd4a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cd4c:	b111      	cbz	r1, 800cd54 <_reclaim_reent+0x78>
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 f89c 	bl	800ce8c <_free_r>
 800cd54:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cd56:	b111      	cbz	r1, 800cd5e <_reclaim_reent+0x82>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 f897 	bl	800ce8c <_free_r>
 800cd5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cd60:	b111      	cbz	r1, 800cd68 <_reclaim_reent+0x8c>
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 f892 	bl	800ce8c <_free_r>
 800cd68:	6a23      	ldr	r3, [r4, #32]
 800cd6a:	b14b      	cbz	r3, 800cd80 <_reclaim_reent+0xa4>
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd72:	4718      	bx	r3
 800cd74:	680e      	ldr	r6, [r1, #0]
 800cd76:	4620      	mov	r0, r4
 800cd78:	f000 f888 	bl	800ce8c <_free_r>
 800cd7c:	4631      	mov	r1, r6
 800cd7e:	e7bb      	b.n	800ccf8 <_reclaim_reent+0x1c>
 800cd80:	bd70      	pop	{r4, r5, r6, pc}
 800cd82:	bf00      	nop
 800cd84:	2000001c 	.word	0x2000001c

0800cd88 <_lseek_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4d07      	ldr	r5, [pc, #28]	@ (800cda8 <_lseek_r+0x20>)
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	4608      	mov	r0, r1
 800cd90:	4611      	mov	r1, r2
 800cd92:	2200      	movs	r2, #0
 800cd94:	602a      	str	r2, [r5, #0]
 800cd96:	461a      	mov	r2, r3
 800cd98:	f7f4 fdda 	bl	8001950 <_lseek>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_lseek_r+0x1e>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_lseek_r+0x1e>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	20006550 	.word	0x20006550

0800cdac <_read_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d07      	ldr	r5, [pc, #28]	@ (800cdcc <_read_r+0x20>)
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	602a      	str	r2, [r5, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f7f4 fd68 	bl	8001890 <_read>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_read_r+0x1e>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_read_r+0x1e>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	20006550 	.word	0x20006550

0800cdd0 <_sbrk_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d06      	ldr	r5, [pc, #24]	@ (800cdec <_sbrk_r+0x1c>)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4608      	mov	r0, r1
 800cdda:	602b      	str	r3, [r5, #0]
 800cddc:	f7f4 fdc6 	bl	800196c <_sbrk>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	d102      	bne.n	800cdea <_sbrk_r+0x1a>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	b103      	cbz	r3, 800cdea <_sbrk_r+0x1a>
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	20006550 	.word	0x20006550

0800cdf0 <_write_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	@ (800ce10 <_write_r+0x20>)
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	602a      	str	r2, [r5, #0]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f7f4 fd63 	bl	80018ca <_write>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_write_r+0x1e>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_write_r+0x1e>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	20006550 	.word	0x20006550

0800ce14 <__errno>:
 800ce14:	4b01      	ldr	r3, [pc, #4]	@ (800ce1c <__errno+0x8>)
 800ce16:	6818      	ldr	r0, [r3, #0]
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	2000001c 	.word	0x2000001c

0800ce20 <__libc_init_array>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	4d0d      	ldr	r5, [pc, #52]	@ (800ce58 <__libc_init_array+0x38>)
 800ce24:	4c0d      	ldr	r4, [pc, #52]	@ (800ce5c <__libc_init_array+0x3c>)
 800ce26:	1b64      	subs	r4, r4, r5
 800ce28:	10a4      	asrs	r4, r4, #2
 800ce2a:	2600      	movs	r6, #0
 800ce2c:	42a6      	cmp	r6, r4
 800ce2e:	d109      	bne.n	800ce44 <__libc_init_array+0x24>
 800ce30:	4d0b      	ldr	r5, [pc, #44]	@ (800ce60 <__libc_init_array+0x40>)
 800ce32:	4c0c      	ldr	r4, [pc, #48]	@ (800ce64 <__libc_init_array+0x44>)
 800ce34:	f000 fe1c 	bl	800da70 <_init>
 800ce38:	1b64      	subs	r4, r4, r5
 800ce3a:	10a4      	asrs	r4, r4, #2
 800ce3c:	2600      	movs	r6, #0
 800ce3e:	42a6      	cmp	r6, r4
 800ce40:	d105      	bne.n	800ce4e <__libc_init_array+0x2e>
 800ce42:	bd70      	pop	{r4, r5, r6, pc}
 800ce44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce48:	4798      	blx	r3
 800ce4a:	3601      	adds	r6, #1
 800ce4c:	e7ee      	b.n	800ce2c <__libc_init_array+0xc>
 800ce4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce52:	4798      	blx	r3
 800ce54:	3601      	adds	r6, #1
 800ce56:	e7f2      	b.n	800ce3e <__libc_init_array+0x1e>
 800ce58:	0800e168 	.word	0x0800e168
 800ce5c:	0800e168 	.word	0x0800e168
 800ce60:	0800e168 	.word	0x0800e168
 800ce64:	0800e16c 	.word	0x0800e16c

0800ce68 <__retarget_lock_init_recursive>:
 800ce68:	4770      	bx	lr

0800ce6a <__retarget_lock_acquire_recursive>:
 800ce6a:	4770      	bx	lr

0800ce6c <__retarget_lock_release_recursive>:
 800ce6c:	4770      	bx	lr

0800ce6e <memcpy>:
 800ce6e:	440a      	add	r2, r1
 800ce70:	4291      	cmp	r1, r2
 800ce72:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce76:	d100      	bne.n	800ce7a <memcpy+0xc>
 800ce78:	4770      	bx	lr
 800ce7a:	b510      	push	{r4, lr}
 800ce7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce84:	4291      	cmp	r1, r2
 800ce86:	d1f9      	bne.n	800ce7c <memcpy+0xe>
 800ce88:	bd10      	pop	{r4, pc}
	...

0800ce8c <_free_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4605      	mov	r5, r0
 800ce90:	2900      	cmp	r1, #0
 800ce92:	d041      	beq.n	800cf18 <_free_r+0x8c>
 800ce94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce98:	1f0c      	subs	r4, r1, #4
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	bfb8      	it	lt
 800ce9e:	18e4      	addlt	r4, r4, r3
 800cea0:	f7ff fcce 	bl	800c840 <__malloc_lock>
 800cea4:	4a1d      	ldr	r2, [pc, #116]	@ (800cf1c <_free_r+0x90>)
 800cea6:	6813      	ldr	r3, [r2, #0]
 800cea8:	b933      	cbnz	r3, 800ceb8 <_free_r+0x2c>
 800ceaa:	6063      	str	r3, [r4, #4]
 800ceac:	6014      	str	r4, [r2, #0]
 800ceae:	4628      	mov	r0, r5
 800ceb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceb4:	f7ff bcca 	b.w	800c84c <__malloc_unlock>
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	d908      	bls.n	800cece <_free_r+0x42>
 800cebc:	6820      	ldr	r0, [r4, #0]
 800cebe:	1821      	adds	r1, r4, r0
 800cec0:	428b      	cmp	r3, r1
 800cec2:	bf01      	itttt	eq
 800cec4:	6819      	ldreq	r1, [r3, #0]
 800cec6:	685b      	ldreq	r3, [r3, #4]
 800cec8:	1809      	addeq	r1, r1, r0
 800ceca:	6021      	streq	r1, [r4, #0]
 800cecc:	e7ed      	b.n	800ceaa <_free_r+0x1e>
 800cece:	461a      	mov	r2, r3
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	b10b      	cbz	r3, 800ced8 <_free_r+0x4c>
 800ced4:	42a3      	cmp	r3, r4
 800ced6:	d9fa      	bls.n	800cece <_free_r+0x42>
 800ced8:	6811      	ldr	r1, [r2, #0]
 800ceda:	1850      	adds	r0, r2, r1
 800cedc:	42a0      	cmp	r0, r4
 800cede:	d10b      	bne.n	800cef8 <_free_r+0x6c>
 800cee0:	6820      	ldr	r0, [r4, #0]
 800cee2:	4401      	add	r1, r0
 800cee4:	1850      	adds	r0, r2, r1
 800cee6:	4283      	cmp	r3, r0
 800cee8:	6011      	str	r1, [r2, #0]
 800ceea:	d1e0      	bne.n	800ceae <_free_r+0x22>
 800ceec:	6818      	ldr	r0, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	6053      	str	r3, [r2, #4]
 800cef2:	4408      	add	r0, r1
 800cef4:	6010      	str	r0, [r2, #0]
 800cef6:	e7da      	b.n	800ceae <_free_r+0x22>
 800cef8:	d902      	bls.n	800cf00 <_free_r+0x74>
 800cefa:	230c      	movs	r3, #12
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	e7d6      	b.n	800ceae <_free_r+0x22>
 800cf00:	6820      	ldr	r0, [r4, #0]
 800cf02:	1821      	adds	r1, r4, r0
 800cf04:	428b      	cmp	r3, r1
 800cf06:	bf04      	itt	eq
 800cf08:	6819      	ldreq	r1, [r3, #0]
 800cf0a:	685b      	ldreq	r3, [r3, #4]
 800cf0c:	6063      	str	r3, [r4, #4]
 800cf0e:	bf04      	itt	eq
 800cf10:	1809      	addeq	r1, r1, r0
 800cf12:	6021      	streq	r1, [r4, #0]
 800cf14:	6054      	str	r4, [r2, #4]
 800cf16:	e7ca      	b.n	800ceae <_free_r+0x22>
 800cf18:	bd38      	pop	{r3, r4, r5, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20006410 	.word	0x20006410

0800cf20 <__ssputs_r>:
 800cf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf24:	688e      	ldr	r6, [r1, #8]
 800cf26:	461f      	mov	r7, r3
 800cf28:	42be      	cmp	r6, r7
 800cf2a:	680b      	ldr	r3, [r1, #0]
 800cf2c:	4682      	mov	sl, r0
 800cf2e:	460c      	mov	r4, r1
 800cf30:	4690      	mov	r8, r2
 800cf32:	d82d      	bhi.n	800cf90 <__ssputs_r+0x70>
 800cf34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf3c:	d026      	beq.n	800cf8c <__ssputs_r+0x6c>
 800cf3e:	6965      	ldr	r5, [r4, #20]
 800cf40:	6909      	ldr	r1, [r1, #16]
 800cf42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf46:	eba3 0901 	sub.w	r9, r3, r1
 800cf4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf4e:	1c7b      	adds	r3, r7, #1
 800cf50:	444b      	add	r3, r9
 800cf52:	106d      	asrs	r5, r5, #1
 800cf54:	429d      	cmp	r5, r3
 800cf56:	bf38      	it	cc
 800cf58:	461d      	movcc	r5, r3
 800cf5a:	0553      	lsls	r3, r2, #21
 800cf5c:	d527      	bpl.n	800cfae <__ssputs_r+0x8e>
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f7ff fbee 	bl	800c740 <_malloc_r>
 800cf64:	4606      	mov	r6, r0
 800cf66:	b360      	cbz	r0, 800cfc2 <__ssputs_r+0xa2>
 800cf68:	6921      	ldr	r1, [r4, #16]
 800cf6a:	464a      	mov	r2, r9
 800cf6c:	f7ff ff7f 	bl	800ce6e <memcpy>
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf7a:	81a3      	strh	r3, [r4, #12]
 800cf7c:	6126      	str	r6, [r4, #16]
 800cf7e:	6165      	str	r5, [r4, #20]
 800cf80:	444e      	add	r6, r9
 800cf82:	eba5 0509 	sub.w	r5, r5, r9
 800cf86:	6026      	str	r6, [r4, #0]
 800cf88:	60a5      	str	r5, [r4, #8]
 800cf8a:	463e      	mov	r6, r7
 800cf8c:	42be      	cmp	r6, r7
 800cf8e:	d900      	bls.n	800cf92 <__ssputs_r+0x72>
 800cf90:	463e      	mov	r6, r7
 800cf92:	6820      	ldr	r0, [r4, #0]
 800cf94:	4632      	mov	r2, r6
 800cf96:	4641      	mov	r1, r8
 800cf98:	f000 fcf8 	bl	800d98c <memmove>
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	1b9b      	subs	r3, r3, r6
 800cfa0:	60a3      	str	r3, [r4, #8]
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	4433      	add	r3, r6
 800cfa6:	6023      	str	r3, [r4, #0]
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfae:	462a      	mov	r2, r5
 800cfb0:	f000 fd28 	bl	800da04 <_realloc_r>
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d1e0      	bne.n	800cf7c <__ssputs_r+0x5c>
 800cfba:	6921      	ldr	r1, [r4, #16]
 800cfbc:	4650      	mov	r0, sl
 800cfbe:	f7ff ff65 	bl	800ce8c <_free_r>
 800cfc2:	230c      	movs	r3, #12
 800cfc4:	f8ca 3000 	str.w	r3, [sl]
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfce:	81a3      	strh	r3, [r4, #12]
 800cfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd4:	e7e9      	b.n	800cfaa <__ssputs_r+0x8a>
	...

0800cfd8 <_svfiprintf_r>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	4698      	mov	r8, r3
 800cfde:	898b      	ldrh	r3, [r1, #12]
 800cfe0:	061b      	lsls	r3, r3, #24
 800cfe2:	b09d      	sub	sp, #116	@ 0x74
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	4614      	mov	r4, r2
 800cfea:	d510      	bpl.n	800d00e <_svfiprintf_r+0x36>
 800cfec:	690b      	ldr	r3, [r1, #16]
 800cfee:	b973      	cbnz	r3, 800d00e <_svfiprintf_r+0x36>
 800cff0:	2140      	movs	r1, #64	@ 0x40
 800cff2:	f7ff fba5 	bl	800c740 <_malloc_r>
 800cff6:	6028      	str	r0, [r5, #0]
 800cff8:	6128      	str	r0, [r5, #16]
 800cffa:	b930      	cbnz	r0, 800d00a <_svfiprintf_r+0x32>
 800cffc:	230c      	movs	r3, #12
 800cffe:	603b      	str	r3, [r7, #0]
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	b01d      	add	sp, #116	@ 0x74
 800d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00a:	2340      	movs	r3, #64	@ 0x40
 800d00c:	616b      	str	r3, [r5, #20]
 800d00e:	2300      	movs	r3, #0
 800d010:	9309      	str	r3, [sp, #36]	@ 0x24
 800d012:	2320      	movs	r3, #32
 800d014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d018:	f8cd 800c 	str.w	r8, [sp, #12]
 800d01c:	2330      	movs	r3, #48	@ 0x30
 800d01e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d1bc <_svfiprintf_r+0x1e4>
 800d022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d026:	f04f 0901 	mov.w	r9, #1
 800d02a:	4623      	mov	r3, r4
 800d02c:	469a      	mov	sl, r3
 800d02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d032:	b10a      	cbz	r2, 800d038 <_svfiprintf_r+0x60>
 800d034:	2a25      	cmp	r2, #37	@ 0x25
 800d036:	d1f9      	bne.n	800d02c <_svfiprintf_r+0x54>
 800d038:	ebba 0b04 	subs.w	fp, sl, r4
 800d03c:	d00b      	beq.n	800d056 <_svfiprintf_r+0x7e>
 800d03e:	465b      	mov	r3, fp
 800d040:	4622      	mov	r2, r4
 800d042:	4629      	mov	r1, r5
 800d044:	4638      	mov	r0, r7
 800d046:	f7ff ff6b 	bl	800cf20 <__ssputs_r>
 800d04a:	3001      	adds	r0, #1
 800d04c:	f000 80a7 	beq.w	800d19e <_svfiprintf_r+0x1c6>
 800d050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d052:	445a      	add	r2, fp
 800d054:	9209      	str	r2, [sp, #36]	@ 0x24
 800d056:	f89a 3000 	ldrb.w	r3, [sl]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f000 809f 	beq.w	800d19e <_svfiprintf_r+0x1c6>
 800d060:	2300      	movs	r3, #0
 800d062:	f04f 32ff 	mov.w	r2, #4294967295
 800d066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d06a:	f10a 0a01 	add.w	sl, sl, #1
 800d06e:	9304      	str	r3, [sp, #16]
 800d070:	9307      	str	r3, [sp, #28]
 800d072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d076:	931a      	str	r3, [sp, #104]	@ 0x68
 800d078:	4654      	mov	r4, sl
 800d07a:	2205      	movs	r2, #5
 800d07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d080:	484e      	ldr	r0, [pc, #312]	@ (800d1bc <_svfiprintf_r+0x1e4>)
 800d082:	f7f3 f8dd 	bl	8000240 <memchr>
 800d086:	9a04      	ldr	r2, [sp, #16]
 800d088:	b9d8      	cbnz	r0, 800d0c2 <_svfiprintf_r+0xea>
 800d08a:	06d0      	lsls	r0, r2, #27
 800d08c:	bf44      	itt	mi
 800d08e:	2320      	movmi	r3, #32
 800d090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d094:	0711      	lsls	r1, r2, #28
 800d096:	bf44      	itt	mi
 800d098:	232b      	movmi	r3, #43	@ 0x2b
 800d09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d09e:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0a4:	d015      	beq.n	800d0d2 <_svfiprintf_r+0xfa>
 800d0a6:	9a07      	ldr	r2, [sp, #28]
 800d0a8:	4654      	mov	r4, sl
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	f04f 0c0a 	mov.w	ip, #10
 800d0b0:	4621      	mov	r1, r4
 800d0b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0b6:	3b30      	subs	r3, #48	@ 0x30
 800d0b8:	2b09      	cmp	r3, #9
 800d0ba:	d94b      	bls.n	800d154 <_svfiprintf_r+0x17c>
 800d0bc:	b1b0      	cbz	r0, 800d0ec <_svfiprintf_r+0x114>
 800d0be:	9207      	str	r2, [sp, #28]
 800d0c0:	e014      	b.n	800d0ec <_svfiprintf_r+0x114>
 800d0c2:	eba0 0308 	sub.w	r3, r0, r8
 800d0c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	9304      	str	r3, [sp, #16]
 800d0ce:	46a2      	mov	sl, r4
 800d0d0:	e7d2      	b.n	800d078 <_svfiprintf_r+0xa0>
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	1d19      	adds	r1, r3, #4
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	9103      	str	r1, [sp, #12]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	bfbb      	ittet	lt
 800d0de:	425b      	neglt	r3, r3
 800d0e0:	f042 0202 	orrlt.w	r2, r2, #2
 800d0e4:	9307      	strge	r3, [sp, #28]
 800d0e6:	9307      	strlt	r3, [sp, #28]
 800d0e8:	bfb8      	it	lt
 800d0ea:	9204      	strlt	r2, [sp, #16]
 800d0ec:	7823      	ldrb	r3, [r4, #0]
 800d0ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0f0:	d10a      	bne.n	800d108 <_svfiprintf_r+0x130>
 800d0f2:	7863      	ldrb	r3, [r4, #1]
 800d0f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0f6:	d132      	bne.n	800d15e <_svfiprintf_r+0x186>
 800d0f8:	9b03      	ldr	r3, [sp, #12]
 800d0fa:	1d1a      	adds	r2, r3, #4
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	9203      	str	r2, [sp, #12]
 800d100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d104:	3402      	adds	r4, #2
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d1cc <_svfiprintf_r+0x1f4>
 800d10c:	7821      	ldrb	r1, [r4, #0]
 800d10e:	2203      	movs	r2, #3
 800d110:	4650      	mov	r0, sl
 800d112:	f7f3 f895 	bl	8000240 <memchr>
 800d116:	b138      	cbz	r0, 800d128 <_svfiprintf_r+0x150>
 800d118:	9b04      	ldr	r3, [sp, #16]
 800d11a:	eba0 000a 	sub.w	r0, r0, sl
 800d11e:	2240      	movs	r2, #64	@ 0x40
 800d120:	4082      	lsls	r2, r0
 800d122:	4313      	orrs	r3, r2
 800d124:	3401      	adds	r4, #1
 800d126:	9304      	str	r3, [sp, #16]
 800d128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12c:	4824      	ldr	r0, [pc, #144]	@ (800d1c0 <_svfiprintf_r+0x1e8>)
 800d12e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d132:	2206      	movs	r2, #6
 800d134:	f7f3 f884 	bl	8000240 <memchr>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d036      	beq.n	800d1aa <_svfiprintf_r+0x1d2>
 800d13c:	4b21      	ldr	r3, [pc, #132]	@ (800d1c4 <_svfiprintf_r+0x1ec>)
 800d13e:	bb1b      	cbnz	r3, 800d188 <_svfiprintf_r+0x1b0>
 800d140:	9b03      	ldr	r3, [sp, #12]
 800d142:	3307      	adds	r3, #7
 800d144:	f023 0307 	bic.w	r3, r3, #7
 800d148:	3308      	adds	r3, #8
 800d14a:	9303      	str	r3, [sp, #12]
 800d14c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d14e:	4433      	add	r3, r6
 800d150:	9309      	str	r3, [sp, #36]	@ 0x24
 800d152:	e76a      	b.n	800d02a <_svfiprintf_r+0x52>
 800d154:	fb0c 3202 	mla	r2, ip, r2, r3
 800d158:	460c      	mov	r4, r1
 800d15a:	2001      	movs	r0, #1
 800d15c:	e7a8      	b.n	800d0b0 <_svfiprintf_r+0xd8>
 800d15e:	2300      	movs	r3, #0
 800d160:	3401      	adds	r4, #1
 800d162:	9305      	str	r3, [sp, #20]
 800d164:	4619      	mov	r1, r3
 800d166:	f04f 0c0a 	mov.w	ip, #10
 800d16a:	4620      	mov	r0, r4
 800d16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d170:	3a30      	subs	r2, #48	@ 0x30
 800d172:	2a09      	cmp	r2, #9
 800d174:	d903      	bls.n	800d17e <_svfiprintf_r+0x1a6>
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0c6      	beq.n	800d108 <_svfiprintf_r+0x130>
 800d17a:	9105      	str	r1, [sp, #20]
 800d17c:	e7c4      	b.n	800d108 <_svfiprintf_r+0x130>
 800d17e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d182:	4604      	mov	r4, r0
 800d184:	2301      	movs	r3, #1
 800d186:	e7f0      	b.n	800d16a <_svfiprintf_r+0x192>
 800d188:	ab03      	add	r3, sp, #12
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	462a      	mov	r2, r5
 800d18e:	4b0e      	ldr	r3, [pc, #56]	@ (800d1c8 <_svfiprintf_r+0x1f0>)
 800d190:	a904      	add	r1, sp, #16
 800d192:	4638      	mov	r0, r7
 800d194:	f3af 8000 	nop.w
 800d198:	1c42      	adds	r2, r0, #1
 800d19a:	4606      	mov	r6, r0
 800d19c:	d1d6      	bne.n	800d14c <_svfiprintf_r+0x174>
 800d19e:	89ab      	ldrh	r3, [r5, #12]
 800d1a0:	065b      	lsls	r3, r3, #25
 800d1a2:	f53f af2d 	bmi.w	800d000 <_svfiprintf_r+0x28>
 800d1a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1a8:	e72c      	b.n	800d004 <_svfiprintf_r+0x2c>
 800d1aa:	ab03      	add	r3, sp, #12
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	462a      	mov	r2, r5
 800d1b0:	4b05      	ldr	r3, [pc, #20]	@ (800d1c8 <_svfiprintf_r+0x1f0>)
 800d1b2:	a904      	add	r1, sp, #16
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	f000 f9bb 	bl	800d530 <_printf_i>
 800d1ba:	e7ed      	b.n	800d198 <_svfiprintf_r+0x1c0>
 800d1bc:	0800e12c 	.word	0x0800e12c
 800d1c0:	0800e136 	.word	0x0800e136
 800d1c4:	00000000 	.word	0x00000000
 800d1c8:	0800cf21 	.word	0x0800cf21
 800d1cc:	0800e132 	.word	0x0800e132

0800d1d0 <__sfputc_r>:
 800d1d0:	6893      	ldr	r3, [r2, #8]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	b410      	push	{r4}
 800d1d8:	6093      	str	r3, [r2, #8]
 800d1da:	da08      	bge.n	800d1ee <__sfputc_r+0x1e>
 800d1dc:	6994      	ldr	r4, [r2, #24]
 800d1de:	42a3      	cmp	r3, r4
 800d1e0:	db01      	blt.n	800d1e6 <__sfputc_r+0x16>
 800d1e2:	290a      	cmp	r1, #10
 800d1e4:	d103      	bne.n	800d1ee <__sfputc_r+0x1e>
 800d1e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1ea:	f7ff bcca 	b.w	800cb82 <__swbuf_r>
 800d1ee:	6813      	ldr	r3, [r2, #0]
 800d1f0:	1c58      	adds	r0, r3, #1
 800d1f2:	6010      	str	r0, [r2, #0]
 800d1f4:	7019      	strb	r1, [r3, #0]
 800d1f6:	4608      	mov	r0, r1
 800d1f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <__sfputs_r>:
 800d1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d200:	4606      	mov	r6, r0
 800d202:	460f      	mov	r7, r1
 800d204:	4614      	mov	r4, r2
 800d206:	18d5      	adds	r5, r2, r3
 800d208:	42ac      	cmp	r4, r5
 800d20a:	d101      	bne.n	800d210 <__sfputs_r+0x12>
 800d20c:	2000      	movs	r0, #0
 800d20e:	e007      	b.n	800d220 <__sfputs_r+0x22>
 800d210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d214:	463a      	mov	r2, r7
 800d216:	4630      	mov	r0, r6
 800d218:	f7ff ffda 	bl	800d1d0 <__sfputc_r>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d1f3      	bne.n	800d208 <__sfputs_r+0xa>
 800d220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d224 <_vfiprintf_r>:
 800d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d228:	460d      	mov	r5, r1
 800d22a:	b09d      	sub	sp, #116	@ 0x74
 800d22c:	4614      	mov	r4, r2
 800d22e:	4698      	mov	r8, r3
 800d230:	4606      	mov	r6, r0
 800d232:	b118      	cbz	r0, 800d23c <_vfiprintf_r+0x18>
 800d234:	6a03      	ldr	r3, [r0, #32]
 800d236:	b90b      	cbnz	r3, 800d23c <_vfiprintf_r+0x18>
 800d238:	f7ff fb9a 	bl	800c970 <__sinit>
 800d23c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d23e:	07d9      	lsls	r1, r3, #31
 800d240:	d405      	bmi.n	800d24e <_vfiprintf_r+0x2a>
 800d242:	89ab      	ldrh	r3, [r5, #12]
 800d244:	059a      	lsls	r2, r3, #22
 800d246:	d402      	bmi.n	800d24e <_vfiprintf_r+0x2a>
 800d248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d24a:	f7ff fe0e 	bl	800ce6a <__retarget_lock_acquire_recursive>
 800d24e:	89ab      	ldrh	r3, [r5, #12]
 800d250:	071b      	lsls	r3, r3, #28
 800d252:	d501      	bpl.n	800d258 <_vfiprintf_r+0x34>
 800d254:	692b      	ldr	r3, [r5, #16]
 800d256:	b99b      	cbnz	r3, 800d280 <_vfiprintf_r+0x5c>
 800d258:	4629      	mov	r1, r5
 800d25a:	4630      	mov	r0, r6
 800d25c:	f7ff fcd0 	bl	800cc00 <__swsetup_r>
 800d260:	b170      	cbz	r0, 800d280 <_vfiprintf_r+0x5c>
 800d262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d264:	07dc      	lsls	r4, r3, #31
 800d266:	d504      	bpl.n	800d272 <_vfiprintf_r+0x4e>
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	b01d      	add	sp, #116	@ 0x74
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	89ab      	ldrh	r3, [r5, #12]
 800d274:	0598      	lsls	r0, r3, #22
 800d276:	d4f7      	bmi.n	800d268 <_vfiprintf_r+0x44>
 800d278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d27a:	f7ff fdf7 	bl	800ce6c <__retarget_lock_release_recursive>
 800d27e:	e7f3      	b.n	800d268 <_vfiprintf_r+0x44>
 800d280:	2300      	movs	r3, #0
 800d282:	9309      	str	r3, [sp, #36]	@ 0x24
 800d284:	2320      	movs	r3, #32
 800d286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d28e:	2330      	movs	r3, #48	@ 0x30
 800d290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d440 <_vfiprintf_r+0x21c>
 800d294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d298:	f04f 0901 	mov.w	r9, #1
 800d29c:	4623      	mov	r3, r4
 800d29e:	469a      	mov	sl, r3
 800d2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2a4:	b10a      	cbz	r2, 800d2aa <_vfiprintf_r+0x86>
 800d2a6:	2a25      	cmp	r2, #37	@ 0x25
 800d2a8:	d1f9      	bne.n	800d29e <_vfiprintf_r+0x7a>
 800d2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ae:	d00b      	beq.n	800d2c8 <_vfiprintf_r+0xa4>
 800d2b0:	465b      	mov	r3, fp
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f7ff ffa1 	bl	800d1fe <__sfputs_r>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	f000 80a7 	beq.w	800d410 <_vfiprintf_r+0x1ec>
 800d2c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2c4:	445a      	add	r2, fp
 800d2c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 809f 	beq.w	800d410 <_vfiprintf_r+0x1ec>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2dc:	f10a 0a01 	add.w	sl, sl, #1
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	9307      	str	r3, [sp, #28]
 800d2e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2ea:	4654      	mov	r4, sl
 800d2ec:	2205      	movs	r2, #5
 800d2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f2:	4853      	ldr	r0, [pc, #332]	@ (800d440 <_vfiprintf_r+0x21c>)
 800d2f4:	f7f2 ffa4 	bl	8000240 <memchr>
 800d2f8:	9a04      	ldr	r2, [sp, #16]
 800d2fa:	b9d8      	cbnz	r0, 800d334 <_vfiprintf_r+0x110>
 800d2fc:	06d1      	lsls	r1, r2, #27
 800d2fe:	bf44      	itt	mi
 800d300:	2320      	movmi	r3, #32
 800d302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d306:	0713      	lsls	r3, r2, #28
 800d308:	bf44      	itt	mi
 800d30a:	232b      	movmi	r3, #43	@ 0x2b
 800d30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d310:	f89a 3000 	ldrb.w	r3, [sl]
 800d314:	2b2a      	cmp	r3, #42	@ 0x2a
 800d316:	d015      	beq.n	800d344 <_vfiprintf_r+0x120>
 800d318:	9a07      	ldr	r2, [sp, #28]
 800d31a:	4654      	mov	r4, sl
 800d31c:	2000      	movs	r0, #0
 800d31e:	f04f 0c0a 	mov.w	ip, #10
 800d322:	4621      	mov	r1, r4
 800d324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d328:	3b30      	subs	r3, #48	@ 0x30
 800d32a:	2b09      	cmp	r3, #9
 800d32c:	d94b      	bls.n	800d3c6 <_vfiprintf_r+0x1a2>
 800d32e:	b1b0      	cbz	r0, 800d35e <_vfiprintf_r+0x13a>
 800d330:	9207      	str	r2, [sp, #28]
 800d332:	e014      	b.n	800d35e <_vfiprintf_r+0x13a>
 800d334:	eba0 0308 	sub.w	r3, r0, r8
 800d338:	fa09 f303 	lsl.w	r3, r9, r3
 800d33c:	4313      	orrs	r3, r2
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	46a2      	mov	sl, r4
 800d342:	e7d2      	b.n	800d2ea <_vfiprintf_r+0xc6>
 800d344:	9b03      	ldr	r3, [sp, #12]
 800d346:	1d19      	adds	r1, r3, #4
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	9103      	str	r1, [sp, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bfbb      	ittet	lt
 800d350:	425b      	neglt	r3, r3
 800d352:	f042 0202 	orrlt.w	r2, r2, #2
 800d356:	9307      	strge	r3, [sp, #28]
 800d358:	9307      	strlt	r3, [sp, #28]
 800d35a:	bfb8      	it	lt
 800d35c:	9204      	strlt	r2, [sp, #16]
 800d35e:	7823      	ldrb	r3, [r4, #0]
 800d360:	2b2e      	cmp	r3, #46	@ 0x2e
 800d362:	d10a      	bne.n	800d37a <_vfiprintf_r+0x156>
 800d364:	7863      	ldrb	r3, [r4, #1]
 800d366:	2b2a      	cmp	r3, #42	@ 0x2a
 800d368:	d132      	bne.n	800d3d0 <_vfiprintf_r+0x1ac>
 800d36a:	9b03      	ldr	r3, [sp, #12]
 800d36c:	1d1a      	adds	r2, r3, #4
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	9203      	str	r2, [sp, #12]
 800d372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d376:	3402      	adds	r4, #2
 800d378:	9305      	str	r3, [sp, #20]
 800d37a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d450 <_vfiprintf_r+0x22c>
 800d37e:	7821      	ldrb	r1, [r4, #0]
 800d380:	2203      	movs	r2, #3
 800d382:	4650      	mov	r0, sl
 800d384:	f7f2 ff5c 	bl	8000240 <memchr>
 800d388:	b138      	cbz	r0, 800d39a <_vfiprintf_r+0x176>
 800d38a:	9b04      	ldr	r3, [sp, #16]
 800d38c:	eba0 000a 	sub.w	r0, r0, sl
 800d390:	2240      	movs	r2, #64	@ 0x40
 800d392:	4082      	lsls	r2, r0
 800d394:	4313      	orrs	r3, r2
 800d396:	3401      	adds	r4, #1
 800d398:	9304      	str	r3, [sp, #16]
 800d39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d39e:	4829      	ldr	r0, [pc, #164]	@ (800d444 <_vfiprintf_r+0x220>)
 800d3a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3a4:	2206      	movs	r2, #6
 800d3a6:	f7f2 ff4b 	bl	8000240 <memchr>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d03f      	beq.n	800d42e <_vfiprintf_r+0x20a>
 800d3ae:	4b26      	ldr	r3, [pc, #152]	@ (800d448 <_vfiprintf_r+0x224>)
 800d3b0:	bb1b      	cbnz	r3, 800d3fa <_vfiprintf_r+0x1d6>
 800d3b2:	9b03      	ldr	r3, [sp, #12]
 800d3b4:	3307      	adds	r3, #7
 800d3b6:	f023 0307 	bic.w	r3, r3, #7
 800d3ba:	3308      	adds	r3, #8
 800d3bc:	9303      	str	r3, [sp, #12]
 800d3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3c0:	443b      	add	r3, r7
 800d3c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c4:	e76a      	b.n	800d29c <_vfiprintf_r+0x78>
 800d3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	e7a8      	b.n	800d322 <_vfiprintf_r+0xfe>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	3401      	adds	r4, #1
 800d3d4:	9305      	str	r3, [sp, #20]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	f04f 0c0a 	mov.w	ip, #10
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3e2:	3a30      	subs	r2, #48	@ 0x30
 800d3e4:	2a09      	cmp	r2, #9
 800d3e6:	d903      	bls.n	800d3f0 <_vfiprintf_r+0x1cc>
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d0c6      	beq.n	800d37a <_vfiprintf_r+0x156>
 800d3ec:	9105      	str	r1, [sp, #20]
 800d3ee:	e7c4      	b.n	800d37a <_vfiprintf_r+0x156>
 800d3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e7f0      	b.n	800d3dc <_vfiprintf_r+0x1b8>
 800d3fa:	ab03      	add	r3, sp, #12
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	462a      	mov	r2, r5
 800d400:	4b12      	ldr	r3, [pc, #72]	@ (800d44c <_vfiprintf_r+0x228>)
 800d402:	a904      	add	r1, sp, #16
 800d404:	4630      	mov	r0, r6
 800d406:	f3af 8000 	nop.w
 800d40a:	4607      	mov	r7, r0
 800d40c:	1c78      	adds	r0, r7, #1
 800d40e:	d1d6      	bne.n	800d3be <_vfiprintf_r+0x19a>
 800d410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d412:	07d9      	lsls	r1, r3, #31
 800d414:	d405      	bmi.n	800d422 <_vfiprintf_r+0x1fe>
 800d416:	89ab      	ldrh	r3, [r5, #12]
 800d418:	059a      	lsls	r2, r3, #22
 800d41a:	d402      	bmi.n	800d422 <_vfiprintf_r+0x1fe>
 800d41c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d41e:	f7ff fd25 	bl	800ce6c <__retarget_lock_release_recursive>
 800d422:	89ab      	ldrh	r3, [r5, #12]
 800d424:	065b      	lsls	r3, r3, #25
 800d426:	f53f af1f 	bmi.w	800d268 <_vfiprintf_r+0x44>
 800d42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d42c:	e71e      	b.n	800d26c <_vfiprintf_r+0x48>
 800d42e:	ab03      	add	r3, sp, #12
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	462a      	mov	r2, r5
 800d434:	4b05      	ldr	r3, [pc, #20]	@ (800d44c <_vfiprintf_r+0x228>)
 800d436:	a904      	add	r1, sp, #16
 800d438:	4630      	mov	r0, r6
 800d43a:	f000 f879 	bl	800d530 <_printf_i>
 800d43e:	e7e4      	b.n	800d40a <_vfiprintf_r+0x1e6>
 800d440:	0800e12c 	.word	0x0800e12c
 800d444:	0800e136 	.word	0x0800e136
 800d448:	00000000 	.word	0x00000000
 800d44c:	0800d1ff 	.word	0x0800d1ff
 800d450:	0800e132 	.word	0x0800e132

0800d454 <_printf_common>:
 800d454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d458:	4616      	mov	r6, r2
 800d45a:	4698      	mov	r8, r3
 800d45c:	688a      	ldr	r2, [r1, #8]
 800d45e:	690b      	ldr	r3, [r1, #16]
 800d460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d464:	4293      	cmp	r3, r2
 800d466:	bfb8      	it	lt
 800d468:	4613      	movlt	r3, r2
 800d46a:	6033      	str	r3, [r6, #0]
 800d46c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d470:	4607      	mov	r7, r0
 800d472:	460c      	mov	r4, r1
 800d474:	b10a      	cbz	r2, 800d47a <_printf_common+0x26>
 800d476:	3301      	adds	r3, #1
 800d478:	6033      	str	r3, [r6, #0]
 800d47a:	6823      	ldr	r3, [r4, #0]
 800d47c:	0699      	lsls	r1, r3, #26
 800d47e:	bf42      	ittt	mi
 800d480:	6833      	ldrmi	r3, [r6, #0]
 800d482:	3302      	addmi	r3, #2
 800d484:	6033      	strmi	r3, [r6, #0]
 800d486:	6825      	ldr	r5, [r4, #0]
 800d488:	f015 0506 	ands.w	r5, r5, #6
 800d48c:	d106      	bne.n	800d49c <_printf_common+0x48>
 800d48e:	f104 0a19 	add.w	sl, r4, #25
 800d492:	68e3      	ldr	r3, [r4, #12]
 800d494:	6832      	ldr	r2, [r6, #0]
 800d496:	1a9b      	subs	r3, r3, r2
 800d498:	42ab      	cmp	r3, r5
 800d49a:	dc26      	bgt.n	800d4ea <_printf_common+0x96>
 800d49c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4a0:	6822      	ldr	r2, [r4, #0]
 800d4a2:	3b00      	subs	r3, #0
 800d4a4:	bf18      	it	ne
 800d4a6:	2301      	movne	r3, #1
 800d4a8:	0692      	lsls	r2, r2, #26
 800d4aa:	d42b      	bmi.n	800d504 <_printf_common+0xb0>
 800d4ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4b0:	4641      	mov	r1, r8
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	47c8      	blx	r9
 800d4b6:	3001      	adds	r0, #1
 800d4b8:	d01e      	beq.n	800d4f8 <_printf_common+0xa4>
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	6922      	ldr	r2, [r4, #16]
 800d4be:	f003 0306 	and.w	r3, r3, #6
 800d4c2:	2b04      	cmp	r3, #4
 800d4c4:	bf02      	ittt	eq
 800d4c6:	68e5      	ldreq	r5, [r4, #12]
 800d4c8:	6833      	ldreq	r3, [r6, #0]
 800d4ca:	1aed      	subeq	r5, r5, r3
 800d4cc:	68a3      	ldr	r3, [r4, #8]
 800d4ce:	bf0c      	ite	eq
 800d4d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4d4:	2500      	movne	r5, #0
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	bfc4      	itt	gt
 800d4da:	1a9b      	subgt	r3, r3, r2
 800d4dc:	18ed      	addgt	r5, r5, r3
 800d4de:	2600      	movs	r6, #0
 800d4e0:	341a      	adds	r4, #26
 800d4e2:	42b5      	cmp	r5, r6
 800d4e4:	d11a      	bne.n	800d51c <_printf_common+0xc8>
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	e008      	b.n	800d4fc <_printf_common+0xa8>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	4652      	mov	r2, sl
 800d4ee:	4641      	mov	r1, r8
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	47c8      	blx	r9
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	d103      	bne.n	800d500 <_printf_common+0xac>
 800d4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d500:	3501      	adds	r5, #1
 800d502:	e7c6      	b.n	800d492 <_printf_common+0x3e>
 800d504:	18e1      	adds	r1, r4, r3
 800d506:	1c5a      	adds	r2, r3, #1
 800d508:	2030      	movs	r0, #48	@ 0x30
 800d50a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d50e:	4422      	add	r2, r4
 800d510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d518:	3302      	adds	r3, #2
 800d51a:	e7c7      	b.n	800d4ac <_printf_common+0x58>
 800d51c:	2301      	movs	r3, #1
 800d51e:	4622      	mov	r2, r4
 800d520:	4641      	mov	r1, r8
 800d522:	4638      	mov	r0, r7
 800d524:	47c8      	blx	r9
 800d526:	3001      	adds	r0, #1
 800d528:	d0e6      	beq.n	800d4f8 <_printf_common+0xa4>
 800d52a:	3601      	adds	r6, #1
 800d52c:	e7d9      	b.n	800d4e2 <_printf_common+0x8e>
	...

0800d530 <_printf_i>:
 800d530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d534:	7e0f      	ldrb	r7, [r1, #24]
 800d536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d538:	2f78      	cmp	r7, #120	@ 0x78
 800d53a:	4691      	mov	r9, r2
 800d53c:	4680      	mov	r8, r0
 800d53e:	460c      	mov	r4, r1
 800d540:	469a      	mov	sl, r3
 800d542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d546:	d807      	bhi.n	800d558 <_printf_i+0x28>
 800d548:	2f62      	cmp	r7, #98	@ 0x62
 800d54a:	d80a      	bhi.n	800d562 <_printf_i+0x32>
 800d54c:	2f00      	cmp	r7, #0
 800d54e:	f000 80d2 	beq.w	800d6f6 <_printf_i+0x1c6>
 800d552:	2f58      	cmp	r7, #88	@ 0x58
 800d554:	f000 80b9 	beq.w	800d6ca <_printf_i+0x19a>
 800d558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d55c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d560:	e03a      	b.n	800d5d8 <_printf_i+0xa8>
 800d562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d566:	2b15      	cmp	r3, #21
 800d568:	d8f6      	bhi.n	800d558 <_printf_i+0x28>
 800d56a:	a101      	add	r1, pc, #4	@ (adr r1, 800d570 <_printf_i+0x40>)
 800d56c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d570:	0800d5c9 	.word	0x0800d5c9
 800d574:	0800d5dd 	.word	0x0800d5dd
 800d578:	0800d559 	.word	0x0800d559
 800d57c:	0800d559 	.word	0x0800d559
 800d580:	0800d559 	.word	0x0800d559
 800d584:	0800d559 	.word	0x0800d559
 800d588:	0800d5dd 	.word	0x0800d5dd
 800d58c:	0800d559 	.word	0x0800d559
 800d590:	0800d559 	.word	0x0800d559
 800d594:	0800d559 	.word	0x0800d559
 800d598:	0800d559 	.word	0x0800d559
 800d59c:	0800d6dd 	.word	0x0800d6dd
 800d5a0:	0800d607 	.word	0x0800d607
 800d5a4:	0800d697 	.word	0x0800d697
 800d5a8:	0800d559 	.word	0x0800d559
 800d5ac:	0800d559 	.word	0x0800d559
 800d5b0:	0800d6ff 	.word	0x0800d6ff
 800d5b4:	0800d559 	.word	0x0800d559
 800d5b8:	0800d607 	.word	0x0800d607
 800d5bc:	0800d559 	.word	0x0800d559
 800d5c0:	0800d559 	.word	0x0800d559
 800d5c4:	0800d69f 	.word	0x0800d69f
 800d5c8:	6833      	ldr	r3, [r6, #0]
 800d5ca:	1d1a      	adds	r2, r3, #4
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6032      	str	r2, [r6, #0]
 800d5d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e09d      	b.n	800d718 <_printf_i+0x1e8>
 800d5dc:	6833      	ldr	r3, [r6, #0]
 800d5de:	6820      	ldr	r0, [r4, #0]
 800d5e0:	1d19      	adds	r1, r3, #4
 800d5e2:	6031      	str	r1, [r6, #0]
 800d5e4:	0606      	lsls	r6, r0, #24
 800d5e6:	d501      	bpl.n	800d5ec <_printf_i+0xbc>
 800d5e8:	681d      	ldr	r5, [r3, #0]
 800d5ea:	e003      	b.n	800d5f4 <_printf_i+0xc4>
 800d5ec:	0645      	lsls	r5, r0, #25
 800d5ee:	d5fb      	bpl.n	800d5e8 <_printf_i+0xb8>
 800d5f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5f4:	2d00      	cmp	r5, #0
 800d5f6:	da03      	bge.n	800d600 <_printf_i+0xd0>
 800d5f8:	232d      	movs	r3, #45	@ 0x2d
 800d5fa:	426d      	negs	r5, r5
 800d5fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d600:	4859      	ldr	r0, [pc, #356]	@ (800d768 <_printf_i+0x238>)
 800d602:	230a      	movs	r3, #10
 800d604:	e011      	b.n	800d62a <_printf_i+0xfa>
 800d606:	6821      	ldr	r1, [r4, #0]
 800d608:	6833      	ldr	r3, [r6, #0]
 800d60a:	0608      	lsls	r0, r1, #24
 800d60c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d610:	d402      	bmi.n	800d618 <_printf_i+0xe8>
 800d612:	0649      	lsls	r1, r1, #25
 800d614:	bf48      	it	mi
 800d616:	b2ad      	uxthmi	r5, r5
 800d618:	2f6f      	cmp	r7, #111	@ 0x6f
 800d61a:	4853      	ldr	r0, [pc, #332]	@ (800d768 <_printf_i+0x238>)
 800d61c:	6033      	str	r3, [r6, #0]
 800d61e:	bf14      	ite	ne
 800d620:	230a      	movne	r3, #10
 800d622:	2308      	moveq	r3, #8
 800d624:	2100      	movs	r1, #0
 800d626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d62a:	6866      	ldr	r6, [r4, #4]
 800d62c:	60a6      	str	r6, [r4, #8]
 800d62e:	2e00      	cmp	r6, #0
 800d630:	bfa2      	ittt	ge
 800d632:	6821      	ldrge	r1, [r4, #0]
 800d634:	f021 0104 	bicge.w	r1, r1, #4
 800d638:	6021      	strge	r1, [r4, #0]
 800d63a:	b90d      	cbnz	r5, 800d640 <_printf_i+0x110>
 800d63c:	2e00      	cmp	r6, #0
 800d63e:	d04b      	beq.n	800d6d8 <_printf_i+0x1a8>
 800d640:	4616      	mov	r6, r2
 800d642:	fbb5 f1f3 	udiv	r1, r5, r3
 800d646:	fb03 5711 	mls	r7, r3, r1, r5
 800d64a:	5dc7      	ldrb	r7, [r0, r7]
 800d64c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d650:	462f      	mov	r7, r5
 800d652:	42bb      	cmp	r3, r7
 800d654:	460d      	mov	r5, r1
 800d656:	d9f4      	bls.n	800d642 <_printf_i+0x112>
 800d658:	2b08      	cmp	r3, #8
 800d65a:	d10b      	bne.n	800d674 <_printf_i+0x144>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	07df      	lsls	r7, r3, #31
 800d660:	d508      	bpl.n	800d674 <_printf_i+0x144>
 800d662:	6923      	ldr	r3, [r4, #16]
 800d664:	6861      	ldr	r1, [r4, #4]
 800d666:	4299      	cmp	r1, r3
 800d668:	bfde      	ittt	le
 800d66a:	2330      	movle	r3, #48	@ 0x30
 800d66c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d670:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d674:	1b92      	subs	r2, r2, r6
 800d676:	6122      	str	r2, [r4, #16]
 800d678:	f8cd a000 	str.w	sl, [sp]
 800d67c:	464b      	mov	r3, r9
 800d67e:	aa03      	add	r2, sp, #12
 800d680:	4621      	mov	r1, r4
 800d682:	4640      	mov	r0, r8
 800d684:	f7ff fee6 	bl	800d454 <_printf_common>
 800d688:	3001      	adds	r0, #1
 800d68a:	d14a      	bne.n	800d722 <_printf_i+0x1f2>
 800d68c:	f04f 30ff 	mov.w	r0, #4294967295
 800d690:	b004      	add	sp, #16
 800d692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	f043 0320 	orr.w	r3, r3, #32
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	4833      	ldr	r0, [pc, #204]	@ (800d76c <_printf_i+0x23c>)
 800d6a0:	2778      	movs	r7, #120	@ 0x78
 800d6a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	6831      	ldr	r1, [r6, #0]
 800d6aa:	061f      	lsls	r7, r3, #24
 800d6ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6b0:	d402      	bmi.n	800d6b8 <_printf_i+0x188>
 800d6b2:	065f      	lsls	r7, r3, #25
 800d6b4:	bf48      	it	mi
 800d6b6:	b2ad      	uxthmi	r5, r5
 800d6b8:	6031      	str	r1, [r6, #0]
 800d6ba:	07d9      	lsls	r1, r3, #31
 800d6bc:	bf44      	itt	mi
 800d6be:	f043 0320 	orrmi.w	r3, r3, #32
 800d6c2:	6023      	strmi	r3, [r4, #0]
 800d6c4:	b11d      	cbz	r5, 800d6ce <_printf_i+0x19e>
 800d6c6:	2310      	movs	r3, #16
 800d6c8:	e7ac      	b.n	800d624 <_printf_i+0xf4>
 800d6ca:	4827      	ldr	r0, [pc, #156]	@ (800d768 <_printf_i+0x238>)
 800d6cc:	e7e9      	b.n	800d6a2 <_printf_i+0x172>
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	f023 0320 	bic.w	r3, r3, #32
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	e7f6      	b.n	800d6c6 <_printf_i+0x196>
 800d6d8:	4616      	mov	r6, r2
 800d6da:	e7bd      	b.n	800d658 <_printf_i+0x128>
 800d6dc:	6833      	ldr	r3, [r6, #0]
 800d6de:	6825      	ldr	r5, [r4, #0]
 800d6e0:	6961      	ldr	r1, [r4, #20]
 800d6e2:	1d18      	adds	r0, r3, #4
 800d6e4:	6030      	str	r0, [r6, #0]
 800d6e6:	062e      	lsls	r6, r5, #24
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	d501      	bpl.n	800d6f0 <_printf_i+0x1c0>
 800d6ec:	6019      	str	r1, [r3, #0]
 800d6ee:	e002      	b.n	800d6f6 <_printf_i+0x1c6>
 800d6f0:	0668      	lsls	r0, r5, #25
 800d6f2:	d5fb      	bpl.n	800d6ec <_printf_i+0x1bc>
 800d6f4:	8019      	strh	r1, [r3, #0]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	6123      	str	r3, [r4, #16]
 800d6fa:	4616      	mov	r6, r2
 800d6fc:	e7bc      	b.n	800d678 <_printf_i+0x148>
 800d6fe:	6833      	ldr	r3, [r6, #0]
 800d700:	1d1a      	adds	r2, r3, #4
 800d702:	6032      	str	r2, [r6, #0]
 800d704:	681e      	ldr	r6, [r3, #0]
 800d706:	6862      	ldr	r2, [r4, #4]
 800d708:	2100      	movs	r1, #0
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7f2 fd98 	bl	8000240 <memchr>
 800d710:	b108      	cbz	r0, 800d716 <_printf_i+0x1e6>
 800d712:	1b80      	subs	r0, r0, r6
 800d714:	6060      	str	r0, [r4, #4]
 800d716:	6863      	ldr	r3, [r4, #4]
 800d718:	6123      	str	r3, [r4, #16]
 800d71a:	2300      	movs	r3, #0
 800d71c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d720:	e7aa      	b.n	800d678 <_printf_i+0x148>
 800d722:	6923      	ldr	r3, [r4, #16]
 800d724:	4632      	mov	r2, r6
 800d726:	4649      	mov	r1, r9
 800d728:	4640      	mov	r0, r8
 800d72a:	47d0      	blx	sl
 800d72c:	3001      	adds	r0, #1
 800d72e:	d0ad      	beq.n	800d68c <_printf_i+0x15c>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	079b      	lsls	r3, r3, #30
 800d734:	d413      	bmi.n	800d75e <_printf_i+0x22e>
 800d736:	68e0      	ldr	r0, [r4, #12]
 800d738:	9b03      	ldr	r3, [sp, #12]
 800d73a:	4298      	cmp	r0, r3
 800d73c:	bfb8      	it	lt
 800d73e:	4618      	movlt	r0, r3
 800d740:	e7a6      	b.n	800d690 <_printf_i+0x160>
 800d742:	2301      	movs	r3, #1
 800d744:	4632      	mov	r2, r6
 800d746:	4649      	mov	r1, r9
 800d748:	4640      	mov	r0, r8
 800d74a:	47d0      	blx	sl
 800d74c:	3001      	adds	r0, #1
 800d74e:	d09d      	beq.n	800d68c <_printf_i+0x15c>
 800d750:	3501      	adds	r5, #1
 800d752:	68e3      	ldr	r3, [r4, #12]
 800d754:	9903      	ldr	r1, [sp, #12]
 800d756:	1a5b      	subs	r3, r3, r1
 800d758:	42ab      	cmp	r3, r5
 800d75a:	dcf2      	bgt.n	800d742 <_printf_i+0x212>
 800d75c:	e7eb      	b.n	800d736 <_printf_i+0x206>
 800d75e:	2500      	movs	r5, #0
 800d760:	f104 0619 	add.w	r6, r4, #25
 800d764:	e7f5      	b.n	800d752 <_printf_i+0x222>
 800d766:	bf00      	nop
 800d768:	0800e13d 	.word	0x0800e13d
 800d76c:	0800e14e 	.word	0x0800e14e

0800d770 <__sflush_r>:
 800d770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d778:	0716      	lsls	r6, r2, #28
 800d77a:	4605      	mov	r5, r0
 800d77c:	460c      	mov	r4, r1
 800d77e:	d454      	bmi.n	800d82a <__sflush_r+0xba>
 800d780:	684b      	ldr	r3, [r1, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	dc02      	bgt.n	800d78c <__sflush_r+0x1c>
 800d786:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d788:	2b00      	cmp	r3, #0
 800d78a:	dd48      	ble.n	800d81e <__sflush_r+0xae>
 800d78c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d78e:	2e00      	cmp	r6, #0
 800d790:	d045      	beq.n	800d81e <__sflush_r+0xae>
 800d792:	2300      	movs	r3, #0
 800d794:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d798:	682f      	ldr	r7, [r5, #0]
 800d79a:	6a21      	ldr	r1, [r4, #32]
 800d79c:	602b      	str	r3, [r5, #0]
 800d79e:	d030      	beq.n	800d802 <__sflush_r+0x92>
 800d7a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	0759      	lsls	r1, r3, #29
 800d7a6:	d505      	bpl.n	800d7b4 <__sflush_r+0x44>
 800d7a8:	6863      	ldr	r3, [r4, #4]
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7ae:	b10b      	cbz	r3, 800d7b4 <__sflush_r+0x44>
 800d7b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7b2:	1ad2      	subs	r2, r2, r3
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7b8:	6a21      	ldr	r1, [r4, #32]
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	47b0      	blx	r6
 800d7be:	1c43      	adds	r3, r0, #1
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	d106      	bne.n	800d7d2 <__sflush_r+0x62>
 800d7c4:	6829      	ldr	r1, [r5, #0]
 800d7c6:	291d      	cmp	r1, #29
 800d7c8:	d82b      	bhi.n	800d822 <__sflush_r+0xb2>
 800d7ca:	4a2a      	ldr	r2, [pc, #168]	@ (800d874 <__sflush_r+0x104>)
 800d7cc:	410a      	asrs	r2, r1
 800d7ce:	07d6      	lsls	r6, r2, #31
 800d7d0:	d427      	bmi.n	800d822 <__sflush_r+0xb2>
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	6062      	str	r2, [r4, #4]
 800d7d6:	04d9      	lsls	r1, r3, #19
 800d7d8:	6922      	ldr	r2, [r4, #16]
 800d7da:	6022      	str	r2, [r4, #0]
 800d7dc:	d504      	bpl.n	800d7e8 <__sflush_r+0x78>
 800d7de:	1c42      	adds	r2, r0, #1
 800d7e0:	d101      	bne.n	800d7e6 <__sflush_r+0x76>
 800d7e2:	682b      	ldr	r3, [r5, #0]
 800d7e4:	b903      	cbnz	r3, 800d7e8 <__sflush_r+0x78>
 800d7e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7ea:	602f      	str	r7, [r5, #0]
 800d7ec:	b1b9      	cbz	r1, 800d81e <__sflush_r+0xae>
 800d7ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7f2:	4299      	cmp	r1, r3
 800d7f4:	d002      	beq.n	800d7fc <__sflush_r+0x8c>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f7ff fb48 	bl	800ce8c <_free_r>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800d800:	e00d      	b.n	800d81e <__sflush_r+0xae>
 800d802:	2301      	movs	r3, #1
 800d804:	4628      	mov	r0, r5
 800d806:	47b0      	blx	r6
 800d808:	4602      	mov	r2, r0
 800d80a:	1c50      	adds	r0, r2, #1
 800d80c:	d1c9      	bne.n	800d7a2 <__sflush_r+0x32>
 800d80e:	682b      	ldr	r3, [r5, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d0c6      	beq.n	800d7a2 <__sflush_r+0x32>
 800d814:	2b1d      	cmp	r3, #29
 800d816:	d001      	beq.n	800d81c <__sflush_r+0xac>
 800d818:	2b16      	cmp	r3, #22
 800d81a:	d11e      	bne.n	800d85a <__sflush_r+0xea>
 800d81c:	602f      	str	r7, [r5, #0]
 800d81e:	2000      	movs	r0, #0
 800d820:	e022      	b.n	800d868 <__sflush_r+0xf8>
 800d822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d826:	b21b      	sxth	r3, r3
 800d828:	e01b      	b.n	800d862 <__sflush_r+0xf2>
 800d82a:	690f      	ldr	r7, [r1, #16]
 800d82c:	2f00      	cmp	r7, #0
 800d82e:	d0f6      	beq.n	800d81e <__sflush_r+0xae>
 800d830:	0793      	lsls	r3, r2, #30
 800d832:	680e      	ldr	r6, [r1, #0]
 800d834:	bf08      	it	eq
 800d836:	694b      	ldreq	r3, [r1, #20]
 800d838:	600f      	str	r7, [r1, #0]
 800d83a:	bf18      	it	ne
 800d83c:	2300      	movne	r3, #0
 800d83e:	eba6 0807 	sub.w	r8, r6, r7
 800d842:	608b      	str	r3, [r1, #8]
 800d844:	f1b8 0f00 	cmp.w	r8, #0
 800d848:	dde9      	ble.n	800d81e <__sflush_r+0xae>
 800d84a:	6a21      	ldr	r1, [r4, #32]
 800d84c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d84e:	4643      	mov	r3, r8
 800d850:	463a      	mov	r2, r7
 800d852:	4628      	mov	r0, r5
 800d854:	47b0      	blx	r6
 800d856:	2800      	cmp	r0, #0
 800d858:	dc08      	bgt.n	800d86c <__sflush_r+0xfc>
 800d85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d85e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d862:	81a3      	strh	r3, [r4, #12]
 800d864:	f04f 30ff 	mov.w	r0, #4294967295
 800d868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86c:	4407      	add	r7, r0
 800d86e:	eba8 0800 	sub.w	r8, r8, r0
 800d872:	e7e7      	b.n	800d844 <__sflush_r+0xd4>
 800d874:	dfbffffe 	.word	0xdfbffffe

0800d878 <_fflush_r>:
 800d878:	b538      	push	{r3, r4, r5, lr}
 800d87a:	690b      	ldr	r3, [r1, #16]
 800d87c:	4605      	mov	r5, r0
 800d87e:	460c      	mov	r4, r1
 800d880:	b913      	cbnz	r3, 800d888 <_fflush_r+0x10>
 800d882:	2500      	movs	r5, #0
 800d884:	4628      	mov	r0, r5
 800d886:	bd38      	pop	{r3, r4, r5, pc}
 800d888:	b118      	cbz	r0, 800d892 <_fflush_r+0x1a>
 800d88a:	6a03      	ldr	r3, [r0, #32]
 800d88c:	b90b      	cbnz	r3, 800d892 <_fflush_r+0x1a>
 800d88e:	f7ff f86f 	bl	800c970 <__sinit>
 800d892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d0f3      	beq.n	800d882 <_fflush_r+0xa>
 800d89a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d89c:	07d0      	lsls	r0, r2, #31
 800d89e:	d404      	bmi.n	800d8aa <_fflush_r+0x32>
 800d8a0:	0599      	lsls	r1, r3, #22
 800d8a2:	d402      	bmi.n	800d8aa <_fflush_r+0x32>
 800d8a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8a6:	f7ff fae0 	bl	800ce6a <__retarget_lock_acquire_recursive>
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	f7ff ff5f 	bl	800d770 <__sflush_r>
 800d8b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8b4:	07da      	lsls	r2, r3, #31
 800d8b6:	4605      	mov	r5, r0
 800d8b8:	d4e4      	bmi.n	800d884 <_fflush_r+0xc>
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	059b      	lsls	r3, r3, #22
 800d8be:	d4e1      	bmi.n	800d884 <_fflush_r+0xc>
 800d8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8c2:	f7ff fad3 	bl	800ce6c <__retarget_lock_release_recursive>
 800d8c6:	e7dd      	b.n	800d884 <_fflush_r+0xc>

0800d8c8 <__swhatbuf_r>:
 800d8c8:	b570      	push	{r4, r5, r6, lr}
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d0:	2900      	cmp	r1, #0
 800d8d2:	b096      	sub	sp, #88	@ 0x58
 800d8d4:	4615      	mov	r5, r2
 800d8d6:	461e      	mov	r6, r3
 800d8d8:	da0d      	bge.n	800d8f6 <__swhatbuf_r+0x2e>
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d8e0:	f04f 0100 	mov.w	r1, #0
 800d8e4:	bf14      	ite	ne
 800d8e6:	2340      	movne	r3, #64	@ 0x40
 800d8e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	6031      	str	r1, [r6, #0]
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	b016      	add	sp, #88	@ 0x58
 800d8f4:	bd70      	pop	{r4, r5, r6, pc}
 800d8f6:	466a      	mov	r2, sp
 800d8f8:	f000 f862 	bl	800d9c0 <_fstat_r>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	dbec      	blt.n	800d8da <__swhatbuf_r+0x12>
 800d900:	9901      	ldr	r1, [sp, #4]
 800d902:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d906:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d90a:	4259      	negs	r1, r3
 800d90c:	4159      	adcs	r1, r3
 800d90e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d912:	e7eb      	b.n	800d8ec <__swhatbuf_r+0x24>

0800d914 <__smakebuf_r>:
 800d914:	898b      	ldrh	r3, [r1, #12]
 800d916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d918:	079d      	lsls	r5, r3, #30
 800d91a:	4606      	mov	r6, r0
 800d91c:	460c      	mov	r4, r1
 800d91e:	d507      	bpl.n	800d930 <__smakebuf_r+0x1c>
 800d920:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	6123      	str	r3, [r4, #16]
 800d928:	2301      	movs	r3, #1
 800d92a:	6163      	str	r3, [r4, #20]
 800d92c:	b003      	add	sp, #12
 800d92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d930:	ab01      	add	r3, sp, #4
 800d932:	466a      	mov	r2, sp
 800d934:	f7ff ffc8 	bl	800d8c8 <__swhatbuf_r>
 800d938:	9f00      	ldr	r7, [sp, #0]
 800d93a:	4605      	mov	r5, r0
 800d93c:	4639      	mov	r1, r7
 800d93e:	4630      	mov	r0, r6
 800d940:	f7fe fefe 	bl	800c740 <_malloc_r>
 800d944:	b948      	cbnz	r0, 800d95a <__smakebuf_r+0x46>
 800d946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d94a:	059a      	lsls	r2, r3, #22
 800d94c:	d4ee      	bmi.n	800d92c <__smakebuf_r+0x18>
 800d94e:	f023 0303 	bic.w	r3, r3, #3
 800d952:	f043 0302 	orr.w	r3, r3, #2
 800d956:	81a3      	strh	r3, [r4, #12]
 800d958:	e7e2      	b.n	800d920 <__smakebuf_r+0xc>
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	6020      	str	r0, [r4, #0]
 800d95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d962:	81a3      	strh	r3, [r4, #12]
 800d964:	9b01      	ldr	r3, [sp, #4]
 800d966:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d96a:	b15b      	cbz	r3, 800d984 <__smakebuf_r+0x70>
 800d96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d970:	4630      	mov	r0, r6
 800d972:	f000 f837 	bl	800d9e4 <_isatty_r>
 800d976:	b128      	cbz	r0, 800d984 <__smakebuf_r+0x70>
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	f023 0303 	bic.w	r3, r3, #3
 800d97e:	f043 0301 	orr.w	r3, r3, #1
 800d982:	81a3      	strh	r3, [r4, #12]
 800d984:	89a3      	ldrh	r3, [r4, #12]
 800d986:	431d      	orrs	r5, r3
 800d988:	81a5      	strh	r5, [r4, #12]
 800d98a:	e7cf      	b.n	800d92c <__smakebuf_r+0x18>

0800d98c <memmove>:
 800d98c:	4288      	cmp	r0, r1
 800d98e:	b510      	push	{r4, lr}
 800d990:	eb01 0402 	add.w	r4, r1, r2
 800d994:	d902      	bls.n	800d99c <memmove+0x10>
 800d996:	4284      	cmp	r4, r0
 800d998:	4623      	mov	r3, r4
 800d99a:	d807      	bhi.n	800d9ac <memmove+0x20>
 800d99c:	1e43      	subs	r3, r0, #1
 800d99e:	42a1      	cmp	r1, r4
 800d9a0:	d008      	beq.n	800d9b4 <memmove+0x28>
 800d9a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9aa:	e7f8      	b.n	800d99e <memmove+0x12>
 800d9ac:	4402      	add	r2, r0
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	428a      	cmp	r2, r1
 800d9b2:	d100      	bne.n	800d9b6 <memmove+0x2a>
 800d9b4:	bd10      	pop	{r4, pc}
 800d9b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9be:	e7f7      	b.n	800d9b0 <memmove+0x24>

0800d9c0 <_fstat_r>:
 800d9c0:	b538      	push	{r3, r4, r5, lr}
 800d9c2:	4d07      	ldr	r5, [pc, #28]	@ (800d9e0 <_fstat_r+0x20>)
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	4608      	mov	r0, r1
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	602b      	str	r3, [r5, #0]
 800d9ce:	f7f3 ffa4 	bl	800191a <_fstat>
 800d9d2:	1c43      	adds	r3, r0, #1
 800d9d4:	d102      	bne.n	800d9dc <_fstat_r+0x1c>
 800d9d6:	682b      	ldr	r3, [r5, #0]
 800d9d8:	b103      	cbz	r3, 800d9dc <_fstat_r+0x1c>
 800d9da:	6023      	str	r3, [r4, #0]
 800d9dc:	bd38      	pop	{r3, r4, r5, pc}
 800d9de:	bf00      	nop
 800d9e0:	20006550 	.word	0x20006550

0800d9e4 <_isatty_r>:
 800d9e4:	b538      	push	{r3, r4, r5, lr}
 800d9e6:	4d06      	ldr	r5, [pc, #24]	@ (800da00 <_isatty_r+0x1c>)
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	602b      	str	r3, [r5, #0]
 800d9f0:	f7f3 ffa3 	bl	800193a <_isatty>
 800d9f4:	1c43      	adds	r3, r0, #1
 800d9f6:	d102      	bne.n	800d9fe <_isatty_r+0x1a>
 800d9f8:	682b      	ldr	r3, [r5, #0]
 800d9fa:	b103      	cbz	r3, 800d9fe <_isatty_r+0x1a>
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	bd38      	pop	{r3, r4, r5, pc}
 800da00:	20006550 	.word	0x20006550

0800da04 <_realloc_r>:
 800da04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da08:	4680      	mov	r8, r0
 800da0a:	4615      	mov	r5, r2
 800da0c:	460c      	mov	r4, r1
 800da0e:	b921      	cbnz	r1, 800da1a <_realloc_r+0x16>
 800da10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da14:	4611      	mov	r1, r2
 800da16:	f7fe be93 	b.w	800c740 <_malloc_r>
 800da1a:	b92a      	cbnz	r2, 800da28 <_realloc_r+0x24>
 800da1c:	f7ff fa36 	bl	800ce8c <_free_r>
 800da20:	2400      	movs	r4, #0
 800da22:	4620      	mov	r0, r4
 800da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da28:	f000 f81a 	bl	800da60 <_malloc_usable_size_r>
 800da2c:	4285      	cmp	r5, r0
 800da2e:	4606      	mov	r6, r0
 800da30:	d802      	bhi.n	800da38 <_realloc_r+0x34>
 800da32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da36:	d8f4      	bhi.n	800da22 <_realloc_r+0x1e>
 800da38:	4629      	mov	r1, r5
 800da3a:	4640      	mov	r0, r8
 800da3c:	f7fe fe80 	bl	800c740 <_malloc_r>
 800da40:	4607      	mov	r7, r0
 800da42:	2800      	cmp	r0, #0
 800da44:	d0ec      	beq.n	800da20 <_realloc_r+0x1c>
 800da46:	42b5      	cmp	r5, r6
 800da48:	462a      	mov	r2, r5
 800da4a:	4621      	mov	r1, r4
 800da4c:	bf28      	it	cs
 800da4e:	4632      	movcs	r2, r6
 800da50:	f7ff fa0d 	bl	800ce6e <memcpy>
 800da54:	4621      	mov	r1, r4
 800da56:	4640      	mov	r0, r8
 800da58:	f7ff fa18 	bl	800ce8c <_free_r>
 800da5c:	463c      	mov	r4, r7
 800da5e:	e7e0      	b.n	800da22 <_realloc_r+0x1e>

0800da60 <_malloc_usable_size_r>:
 800da60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da64:	1f18      	subs	r0, r3, #4
 800da66:	2b00      	cmp	r3, #0
 800da68:	bfbc      	itt	lt
 800da6a:	580b      	ldrlt	r3, [r1, r0]
 800da6c:	18c0      	addlt	r0, r0, r3
 800da6e:	4770      	bx	lr

0800da70 <_init>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr

0800da7c <_fini>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr
