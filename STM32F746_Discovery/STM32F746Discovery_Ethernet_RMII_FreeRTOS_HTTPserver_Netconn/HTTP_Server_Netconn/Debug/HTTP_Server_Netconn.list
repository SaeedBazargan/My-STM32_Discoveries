
HTTP_Server_Netconn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ea0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004604  08016070  08016070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a674  0801a674  0001c1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a674  0801a674  0001b674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a67c  0801a67c  0001c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a67c  0801a67c  0001b67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a680  0801a680  0001b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801a684  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801a710  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801a7b0  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000bf44  200001cc  0801a850  0001c1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000c110  0801a850  0001d110  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001c1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002e2c2  00000000  00000000  0001c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007957  00000000  00000000  0004a4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002168  00000000  00000000  00051e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a54  00000000  00000000  00053f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003796f  00000000  00000000  000559d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036a6c  00000000  00000000  0008d343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011054f  00000000  00000000  000c3daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d42fe  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000910c  00000000  00000000  001d4344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000d7  00000000  00000000  001dd450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016058 	.word	0x08016058

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08016058 	.word	0x08016058

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	@ (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200001e8 	.word	0x200001e8
 80005f0:	20000288 	.word	0x20000288

080005f4 <http_server>:
#include "httpserver.h"
#include "cmsis_os.h"


static void http_server(struct netconn *conn)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08e      	sub	sp, #56	@ 0x38
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	char* buf;
	u16_t buflen;
	struct fs_file file;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 80005fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000600:	4619      	mov	r1, r3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f007 fca6 	bl	8007f54 <netconn_recv>
 8000608:	4603      	mov	r3, r0
 800060a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (recv_err == ERR_OK)
 800060e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000612:	2b00      	cmp	r3, #0
 8000614:	d13f      	bne.n	8000696 <http_server+0xa2>
	{
		if (netconn_err(conn) == ERR_OK)
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f007 fe25 	bl	8008266 <netconn_err>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d139      	bne.n	8000696 <http_server+0xa2>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 8000622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000624:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8000628:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800062c:	4618      	mov	r0, r3
 800062e:	f009 fa2b 	bl	8009a88 <netbuf_data>

			/* Check if request to get the index.html */
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 8000632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000634:	220f      	movs	r2, #15
 8000636:	491d      	ldr	r1, [pc, #116]	@ (80006ac <http_server+0xb8>)
 8000638:	4618      	mov	r0, r3
 800063a:	f014 fe08 	bl	801524e <strncmp>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d114      	bne.n	800066e <http_server+0x7a>
			{
				fs_open(&file, "/index.html");
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4919      	ldr	r1, [pc, #100]	@ (80006b0 <http_server+0xbc>)
 800064a:	4618      	mov	r0, r3
 800064c:	f009 fc1e 	bl	8009e8c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000650:	68f9      	ldr	r1, [r7, #12]
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	461a      	mov	r2, r3
 8000656:	2300      	movs	r3, #0
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f007 fcf3 	bl	8008048 <netconn_write_partly>
				fs_close(&file);
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	4618      	mov	r0, r3
 8000668:	f009 fc4e 	bl	8009f08 <fs_close>
 800066c:	e013      	b.n	8000696 <http_server+0xa2>
			}
			else
			{
				/* Load Error page */
				fs_open(&file, "/404.html");
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4910      	ldr	r1, [pc, #64]	@ (80006b4 <http_server+0xc0>)
 8000674:	4618      	mov	r0, r3
 8000676:	f009 fc09 	bl	8009e8c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800067a:	68f9      	ldr	r1, [r7, #12]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	461a      	mov	r2, r3
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f007 fcde 	bl	8008048 <netconn_write_partly>
				fs_close(&file);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4618      	mov	r0, r3
 8000692:	f009 fc39 	bl	8009f08 <fs_close>
			}
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f007 fdd8 	bl	800824c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 800069c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800069e:	4618      	mov	r0, r3
 80006a0:	f009 f9d2 	bl	8009a48 <netbuf_delete>
}
 80006a4:	bf00      	nop
 80006a6:	3730      	adds	r7, #48	@ 0x30
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08016070 	.word	0x08016070
 80006b0:	08016080 	.word	0x08016080
 80006b4:	0801608c 	.word	0x0801608c

080006b8 <http_thread>:


static void http_thread(void *arg)
{ 
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2010      	movs	r0, #16
 80006c6:	f007 f91f 	bl	8007908 <netconn_new_with_proto_and_callback>
 80006ca:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d023      	beq.n	800071a <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80006d2:	2250      	movs	r2, #80	@ 0x50
 80006d4:	4913      	ldr	r1, [pc, #76]	@ (8000724 <http_thread+0x6c>)
 80006d6:	6978      	ldr	r0, [r7, #20]
 80006d8:	f007 f9d0 	bl	8007a7c <netconn_bind>
 80006dc:	4603      	mov	r3, r0
 80006de:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 80006e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d118      	bne.n	800071a <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 80006e8:	21ff      	movs	r1, #255	@ 0xff
 80006ea:	6978      	ldr	r0, [r7, #20]
 80006ec:	f007 f9fe 	bl	8007aec <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	6978      	ldr	r0, [r7, #20]
 80006f8:	f007 fa24 	bl	8007b44 <netconn_accept>
 80006fc:	4603      	mov	r3, r0
 80006fe:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8000700:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f3      	bne.n	80006f0 <http_thread+0x38>
        {
          /* serve connection */
          http_server(newconn);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff72 	bl	80005f4 <http_server>

          /* delete connection */
          netconn_delete(newconn);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4618      	mov	r0, r3
 8000714:	f007 f996 	bl	8007a44 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8000718:	e7ea      	b.n	80006f0 <http_thread+0x38>
        }
      }
    }
  }
}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	0801a578 	.word	0x0801a578

08000728 <http_server_init>:


void http_server_init()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 800072e:	2300      	movs	r3, #0
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000736:	2200      	movs	r2, #0
 8000738:	4903      	ldr	r1, [pc, #12]	@ (8000748 <http_server_init+0x20>)
 800073a:	4804      	ldr	r0, [pc, #16]	@ (800074c <http_server_init+0x24>)
 800073c:	f014 fbd6 	bl	8014eec <sys_thread_new>
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	080006b9 	.word	0x080006b9
 800074c:	08016098 	.word	0x08016098

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fbc6 	bl	8000ee6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f81b 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f000 f885 	bl	800086c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <main+0x3c>)
 8000764:	1d3c      	adds	r4, r7, #4
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f003 ffac 	bl	80046d6 <osThreadCreate>
 800077e:	4603      	mov	r3, r0
 8000780:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <main+0x40>)
 8000782:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000784:	f003 ff90 	bl	80046a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <main+0x38>
 800078c:	080160b0 	.word	0x080160b0
 8000790:	20000488 	.word	0x20000488

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	@ 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f014 fd4b 	bl	801523e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <SystemClock_Config+0xd0>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	4a29      	ldr	r2, [pc, #164]	@ (8000864 <SystemClock_Config+0xd0>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c4:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a24      	ldr	r2, [pc, #144]	@ (8000868 <SystemClock_Config+0xd4>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <SystemClock_Config+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007fc:	230f      	movs	r3, #15
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 252;
 8000800:	23fc      	movs	r3, #252	@ 0xfc
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f002 f919 	bl	8002a48 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800081c:	f000 f880 	bl	8000920 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000820:	f002 f8c2 	bl	80029a8 <HAL_PWREx_EnableOverDrive>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800082a:	f000 f879 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2106      	movs	r1, #6
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fb9f 	bl	8002f90 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000858:	f000 f862 	bl	8000920 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	@ 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_GPIO_Init+0x74>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a1a      	ldr	r2, [pc, #104]	@ (80008e0 <MX_GPIO_Init+0x74>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_GPIO_Init+0x74>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_GPIO_Init+0x74>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <MX_GPIO_Init+0x74>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_GPIO_Init+0x74>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_GPIO_Init+0x74>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a0e      	ldr	r2, [pc, #56]	@ (80008e0 <MX_GPIO_Init+0x74>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_GPIO_Init+0x74>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_GPIO_Init+0x74>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <MX_GPIO_Init+0x74>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_GPIO_Init+0x74>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008ec:	f003 f828 	bl	8003940 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 80008f0:	f7ff ff1a 	bl	8000728 <http_server_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f003 ff46 	bl	8004786 <osDelay>
 80008fa:	e7fb      	b.n	80008f4 <StartDefaultTask+0x10>

080008fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090e:	f000 faf7 	bl	8000f00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40001000 	.word	0x40001000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	f06f 0001 	mvn.w	r0, #1
 800096a:	f000 fbd1 	bl	8001110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	@ 0x38
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800098c:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <HAL_InitTick+0xe0>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	4a32      	ldr	r2, [pc, #200]	@ (8000a5c <HAL_InitTick+0xe0>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6413      	str	r3, [r2, #64]	@ 0x40
 8000998:	4b30      	ldr	r3, [pc, #192]	@ (8000a5c <HAL_InitTick+0xe0>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a4:	f107 0210 	add.w	r2, r7, #16
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 fcc0 	bl	8003334 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009be:	f002 fca5 	bl	800330c <HAL_RCC_GetPCLK1Freq>
 80009c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80009c4:	e004      	b.n	80009d0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009c6:	f002 fca1 	bl	800330c <HAL_RCC_GetPCLK1Freq>
 80009ca:	4603      	mov	r3, r0
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d2:	4a23      	ldr	r2, [pc, #140]	@ (8000a60 <HAL_InitTick+0xe4>)
 80009d4:	fba2 2303 	umull	r2, r3, r2, r3
 80009d8:	0c9b      	lsrs	r3, r3, #18
 80009da:	3b01      	subs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009de:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <HAL_InitTick+0xe8>)
 80009e0:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <HAL_InitTick+0xec>)
 80009e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <HAL_InitTick+0xe8>)
 80009e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000a64 <HAL_InitTick+0xe8>)
 80009ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <HAL_InitTick+0xe8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <HAL_InitTick+0xe8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <HAL_InitTick+0xe8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a04:	4817      	ldr	r0, [pc, #92]	@ (8000a64 <HAL_InitTick+0xe8>)
 8000a06:	f002 fcc7 	bl	8003398 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d11b      	bne.n	8000a50 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a18:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <HAL_InitTick+0xe8>)
 8000a1a:	f002 fd1f 	bl	800345c <HAL_TIM_Base_Start_IT>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d111      	bne.n	8000a50 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a2c:	2036      	movs	r0, #54	@ 0x36
 8000a2e:	f000 fb8b 	bl	8001148 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d808      	bhi.n	8000a4a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	2036      	movs	r0, #54	@ 0x36
 8000a3e:	f000 fb67 	bl	8001110 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <HAL_InitTick+0xf0>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	e002      	b.n	8000a50 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3738      	adds	r7, #56	@ 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	2000048c 	.word	0x2000048c
 8000a68:	40001000 	.word	0x40001000
 8000a6c:	20000004 	.word	0x20000004

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <NMI_Handler+0x4>

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <TIM6_DAC_IRQHandler+0x10>)
 8000aae:	f002 fd4d 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000048c 	.word	0x2000048c

08000abc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <ETH_IRQHandler+0x10>)
 8000ac2:	f000 fedd 	bl	8001880 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20004ec0 	.word	0x20004ec0

08000ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return 1;
 8000ad4:	2301      	movs	r3, #1
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_kill>:

int _kill(int pid, int sig)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aea:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <_kill+0x20>)
 8000aec:	2216      	movs	r2, #22
 8000aee:	601a      	str	r2, [r3, #0]
  return -1;
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	2000c100 	.word	0x2000c100

08000b04 <_exit>:

void _exit (int status)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ffe5 	bl	8000ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b16:	bf00      	nop
 8000b18:	e7fd      	b.n	8000b16 <_exit+0x12>

08000b1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e00a      	b.n	8000b42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2c:	f3af 8000 	nop.w
 8000b30:	4601      	mov	r1, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	60ba      	str	r2, [r7, #8]
 8000b38:	b2ca      	uxtb	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbf0      	blt.n	8000b2c <_read+0x12>
  }

  return len;
 8000b4a:	687b      	ldr	r3, [r7, #4]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e009      	b.n	8000b7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	60ba      	str	r2, [r7, #8]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	dbf1      	blt.n	8000b66 <_write+0x12>
  }
  return len;
 8000b82:	687b      	ldr	r3, [r7, #4]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_close>:

int _close(int file)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bb4:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_isatty>:

int _isatty(int file)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bcc:	2301      	movs	r3, #1
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b085      	sub	sp, #20
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	@ (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d205      	bcs.n	8000c30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <_sbrk+0x6c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	20050000 	.word	0x20050000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	200004d8 	.word	0x200004d8
 8000c5c:	2000c110 	.word	0x2000c110
 8000c60:	2000c100 	.word	0x2000c100

08000c64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f014 fb79 	bl	80153ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fd49 	bl	8000750 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000ccc:	0801a684 	.word	0x0801a684
  ldr r2, =_sbss
 8000cd0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000cd4:	2000c110 	.word	0x2000c110

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>

08000cda <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00b      	beq.n	8000d02 <LAN8742_RegisterBusIO+0x28>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <LAN8742_RegisterBusIO+0x28>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <LAN8742_RegisterBusIO+0x28>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e014      	b.n	8000d32 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d139      	bne.n	8000dce <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2220      	movs	r2, #32
 8000d6c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e01c      	b.n	8000dae <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	f107 020c 	add.w	r2, r7, #12
 8000d7c:	2112      	movs	r1, #18
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	4798      	blx	r3
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	da03      	bge.n	8000d90 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d88:	f06f 0304 	mvn.w	r3, #4
 8000d8c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d8e:	e00b      	b.n	8000da8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d105      	bne.n	8000da8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
         break;
 8000da6:	e005      	b.n	8000db4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2b1f      	cmp	r3, #31
 8000db2:	d9df      	bls.n	8000d74 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b1f      	cmp	r3, #31
 8000dba:	d902      	bls.n	8000dc2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000dbc:	f06f 0302 	mvn.w	r3, #2
 8000dc0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000dce:	693b      	ldr	r3, [r7, #16]
 }
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6810      	ldr	r0, [r2, #0]
 8000dec:	f107 020c 	add.w	r2, r7, #12
 8000df0:	2101      	movs	r1, #1
 8000df2:	4798      	blx	r3
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	da02      	bge.n	8000e00 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dfa:	f06f 0304 	mvn.w	r3, #4
 8000dfe:	e06e      	b.n	8000ede <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6810      	ldr	r0, [r2, #0]
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4798      	blx	r3
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da02      	bge.n	8000e1c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e16:	f06f 0304 	mvn.w	r3, #4
 8000e1a:	e060      	b.n	8000ede <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e059      	b.n	8000ede <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6810      	ldr	r0, [r2, #0]
 8000e32:	f107 020c 	add.w	r2, r7, #12
 8000e36:	2100      	movs	r1, #0
 8000e38:	4798      	blx	r3
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da02      	bge.n	8000e46 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e40:	f06f 0304 	mvn.w	r3, #4
 8000e44:	e04b      	b.n	8000ede <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d11b      	bne.n	8000e88 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <LAN8742_GetLinkState+0x90>
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e64:	2302      	movs	r3, #2
 8000e66:	e03a      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e033      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e80:	2304      	movs	r3, #4
 8000e82:	e02c      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e84:	2305      	movs	r3, #5
 8000e86:	e02a      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6810      	ldr	r0, [r2, #0]
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	211f      	movs	r1, #31
 8000e96:	4798      	blx	r3
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da02      	bge.n	8000ea4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e9e:	f06f 0304 	mvn.w	r3, #4
 8000ea2:	e01c      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e015      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f003 031c 	and.w	r3, r3, #28
 8000eb8:	2b18      	cmp	r3, #24
 8000eba:	d101      	bne.n	8000ec0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e00e      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 031c 	and.w	r3, r3, #28
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d101      	bne.n	8000ece <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e007      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f003 031c 	and.w	r3, r3, #28
 8000ed4:	2b14      	cmp	r3, #20
 8000ed6:	d101      	bne.n	8000edc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	e000      	b.n	8000ede <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000edc:	2305      	movs	r3, #5
    }
  }
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eea:	2003      	movs	r0, #3
 8000eec:	f000 f905 	bl	80010fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef0:	200f      	movs	r0, #15
 8000ef2:	f7ff fd43 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff fd19 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	200004dc 	.word	0x200004dc

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200004dc 	.word	0x200004dc

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ffee 	bl	8000f28 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_Delay+0x44>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffde 	bl	8000f28 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008

08000f88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetREVID+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0c1b      	lsrs	r3, r3, #16
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e0042000 	.word	0xe0042000

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	05fa0000 	.word	0x05fa0000

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	@ (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	@ (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	@ 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	@ 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff4c 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001122:	f7ff ff61 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001126:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff ffb1 	bl	8001094 <NVIC_EncodePriority>
 8001132:	4602      	mov	r2, r0
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff80 	bl	8001040 <__NVIC_SetPriority>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff54 	bl	8001004 <__NVIC_EnableIRQ>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e086      	b.n	8001284 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800117c:	2b00      	cmp	r3, #0
 800117e:	d106      	bne.n	800118e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2223      	movs	r2, #35	@ 0x23
 8001184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f003 f833 	bl	80041f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b3f      	ldr	r3, [pc, #252]	@ (800128c <HAL_ETH_Init+0x128>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a3e      	ldr	r2, [pc, #248]	@ (800128c <HAL_ETH_Init+0x128>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b3c      	ldr	r3, [pc, #240]	@ (800128c <HAL_ETH_Init+0x128>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001290 <HAL_ETH_Init+0x12c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a39      	ldr	r2, [pc, #228]	@ (8001290 <HAL_ETH_Init+0x12c>)
 80011ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80011b0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011b2:	4b37      	ldr	r3, [pc, #220]	@ (8001290 <HAL_ETH_Init+0x12c>)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	4935      	ldr	r1, [pc, #212]	@ (8001290 <HAL_ETH_Init+0x12c>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011c0:	4b33      	ldr	r3, [pc, #204]	@ (8001290 <HAL_ETH_Init+0x12c>)
 80011c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011dc:	f7ff fea4 	bl	8000f28 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011e2:	e011      	b.n	8001208 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011e4:	f7ff fea0 	bl	8000f28 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011f2:	d909      	bls.n	8001208 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2204      	movs	r2, #4
 80011f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	22e0      	movs	r2, #224	@ 0xe0
 8001200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e03d      	b.n	8001284 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1e4      	bne.n	80011e4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 ff5c 	bl	80020d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f001 f807 	bl	8002234 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f001 f85d 	bl	80022e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	461a      	mov	r2, r3
 8001232:	2100      	movs	r1, #0
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 ffc5 	bl	80021c4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001248:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_ETH_Init+0x130>)
 8001258:	430b      	orrs	r3, r1
 800125a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800126e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2210      	movs	r2, #16
 800127e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800
 8001294:	00020060 	.word	0x00020060

08001298 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d15f      	bne.n	800136a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2223      	movs	r2, #35	@ 0x23
 80012ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2204      	movs	r2, #4
 80012bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f9f6 	bl	80016b0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fe37 	bl	8000f40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012f0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001308:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fd80 	bl	8001e10 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0208 	orr.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff fe09 	bl	8000f40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0204 	orr.w	r2, r2, #4
 8001344:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800134e:	69d9      	ldr	r1, [r3, #28]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <HAL_ETH_Start_IT+0xdc>)
 8001356:	430b      	orrs	r3, r1
 8001358:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800135c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2223      	movs	r2, #35	@ 0x23
 8001362:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
  }
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0001a0c1 	.word	0x0001a0c1

08001378 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001386:	2b23      	cmp	r3, #35	@ 0x23
 8001388:	d16e      	bne.n	8001468 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2223      	movs	r2, #35	@ 0x23
 800138e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800139a:	69d9      	ldr	r1, [r3, #28]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b34      	ldr	r3, [pc, #208]	@ (8001474 <HAL_ETH_Stop_IT+0xfc>)
 80013a2:	400b      	ands	r3, r1
 80013a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013a8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80013bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013c0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	f023 0302 	bic.w	r3, r3, #2
 80013d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013d8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0204 	bic.w	r2, r2, #4
 80013e8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff fda4 	bl	8000f40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fd05 	bl	8001e10 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0208 	bic.w	r2, r2, #8
 8001414:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff fd8e 	bl	8000f40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	e00e      	b.n	8001450 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	3212      	adds	r2, #18
 8001438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d9ed      	bls.n	8001432 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2210      	movs	r2, #16
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
  }
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	fffe5f3e 	.word	0xfffe5f3e

08001478 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148e:	f043 0201 	orr.w	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e045      	b.n	8001528 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014a2:	2b23      	cmp	r3, #35	@ 0x23
 80014a4:	d13f      	bne.n	8001526 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80014ae:	2201      	movs	r2, #1
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 ff86 	bl	80023c4 <ETH_Prepare_Tx_Descriptors>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c4:	f043 0202 	orr.w	r2, r3, #2
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e02a      	b.n	8001528 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014d2:	f3bf 8f4f 	dsb	sy
}
 80014d6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d904      	bls.n	80014f4 <HAL_ETH_Transmit_IT+0x7c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ee:	1f1a      	subs	r2, r3, #4
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00d      	beq.n	8001522 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150e:	461a      	mov	r2, r3
 8001510:	2304      	movs	r3, #4
 8001512:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800151c:	461a      	mov	r2, r3
 800151e:	2300      	movs	r3, #0
 8001520:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
  }
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0a4      	b.n	80016a6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001562:	2b23      	cmp	r3, #35	@ 0x23
 8001564:	d001      	beq.n	800156a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e09d      	b.n	80016a6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	3212      	adds	r2, #18
 8001576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001580:	f1c3 0304 	rsb	r3, r3, #4
 8001584:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001586:	e066      	b.n	8001656 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	69da      	ldr	r2, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	699a      	ldr	r2, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d103      	bne.n	80015b8 <HAL_ETH_ReadData+0x88>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d03c      	beq.n	8001632 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015da:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800160c:	461a      	mov	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	b29b      	uxth	r3, r3
 8001612:	f002 ff9d 	bl	8004550 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	441a      	add	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d902      	bls.n	8001644 <HAL_ETH_ReadData+0x114>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b04      	subs	r3, #4
 8001642:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	3212      	adds	r2, #18
 800164a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800165a:	2b00      	cmp	r3, #0
 800165c:	db06      	blt.n	800166c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	429a      	cmp	r2, r3
 8001664:	d202      	bcs.n	800166c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001666:	7cfb      	ldrb	r3, [r7, #19]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d08d      	beq.n	8001588 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	441a      	add	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f815 	bl	80016b0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800168c:	7cfb      	ldrb	r3, [r7, #19]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d108      	bne.n	80016a4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e000      	b.n	80016a6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80016bc:	2301      	movs	r3, #1
 80016be:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016c4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	3212      	adds	r2, #18
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016d6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016d8:	e042      	b.n	8001760 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d112      	bne.n	8001708 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 ff02 	bl	80044f0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	74fb      	strb	r3, [r7, #19]
 80016f6:	e007      	b.n	8001708 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	461a      	mov	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	461a      	mov	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001708:	7cfb      	ldrb	r3, [r7, #19]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d028      	beq.n	8001760 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <ETH_UpdateDescriptor+0x104>)
 800171c:	4313      	orrs	r3, r2
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	6053      	str	r3, [r2, #4]
 8001722:	e005      	b.n	8001730 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	3301      	adds	r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d902      	bls.n	800174e <ETH_UpdateDescriptor+0x9e>
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3b04      	subs	r3, #4
 800174c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	3212      	adds	r2, #18
 8001754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001758:	617b      	str	r3, [r7, #20]
      desccount--;
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	3b01      	subs	r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <ETH_UpdateDescriptor+0xbc>
 8001766:	7cfb      	ldrb	r3, [r7, #19]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1b6      	bne.n	80016da <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	429a      	cmp	r2, r3
 8001774:	d01a      	beq.n	80017ac <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3301      	adds	r3, #1
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001780:	f3bf 8f5f 	dmb	sy
}
 8001784:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6919      	ldr	r1, [r3, #16]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	18ca      	adds	r2, r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800179e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80017ac:	bf00      	nop
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	80004000 	.word	0x80004000

080017b8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3318      	adds	r3, #24
 80017c4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ca:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80017d6:	e047      	b.n	8001868 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80017d8:	2301      	movs	r3, #1
 80017da:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3b01      	subs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	3304      	adds	r3, #4
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10a      	bne.n	8001808 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	3301      	adds	r3, #1
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d902      	bls.n	8001804 <HAL_ETH_ReleaseTxPacket+0x4c>
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	3b04      	subs	r3, #4
 8001802:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d02c      	beq.n	8001868 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db1f      	blt.n	8001864 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	3304      	adds	r3, #4
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fecf 	bl	80045d4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	3304      	adds	r3, #4
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	3301      	adds	r3, #1
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d902      	bls.n	8001856 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	3b04      	subs	r3, #4
 8001854:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001862:	e001      	b.n	8001868 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_ETH_ReleaseTxPacket+0xbc>
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1b1      	bne.n	80017d8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80018a8:	4b4b      	ldr	r3, [pc, #300]	@ (80019d8 <HAL_ETH_IRQHandler+0x158>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00e      	beq.n	80018d6 <HAL_ETH_IRQHandler+0x56>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b43      	ldr	r3, [pc, #268]	@ (80019dc <HAL_ETH_IRQHandler+0x15c>)
 80018ce:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f002 f9a3 	bl	8003c1c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00f      	beq.n	8001900 <HAL_ETH_IRQHandler+0x80>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f2:	461a      	mov	r2, r3
 80018f4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80018f8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f002 f99e 	bl	8003c3c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d042      	beq.n	8001990 <HAL_ETH_IRQHandler+0x110>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d03d      	beq.n	8001990 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191a:	f043 0208 	orr.w	r2, r3, #8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01a      	beq.n	8001964 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <HAL_ETH_IRQHandler+0x160>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001954:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001958:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	22e0      	movs	r2, #224	@ 0xe0
 800195e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001962:	e012      	b.n	800198a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001982:	461a      	mov	r2, r3
 8001984:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001988:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f002 f966 	bl	8003c5c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00e      	beq.n	80019b8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f81a 	bl	80019e4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_ETH_IRQHandler+0x158>)
 80019c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019c8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f814 	bl	80019f8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013c00 	.word	0x40013c00
 80019dc:	00010040 	.word	0x00010040
 80019e0:	007e2000 	.word	0x007e2000

080019e4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 031c 	and.w	r3, r3, #28
 8001a28:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	02db      	lsls	r3, r3, #11
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f023 0302 	bic.w	r3, r3, #2
 8001a4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a5c:	f7ff fa64 	bl	8000f28 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a62:	e00d      	b.n	8001a80 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a64:	f7ff fa60 	bl	8000f28 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a72:	d301      	bcc.n	8001a78 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e010      	b.n	8001a9a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ec      	bne.n	8001a64 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 031c 	and.w	r3, r3, #28
 8001abe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	02db      	lsls	r3, r3, #11
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	019b      	lsls	r3, r3, #6
 8001ad0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff fa14 	bl	8000f28 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b02:	e00d      	b.n	8001b20 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b04:	f7ff fa10 	bl	8000f28 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b12:	d301      	bcc.n	8001b18 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e009      	b.n	8001b2c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ec      	bne.n	8001b04 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0e6      	b.n	8001d16 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf0c      	ite	eq
 8001cb2:	2301      	moveq	r3, #1
 8001cb4:	2300      	movne	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00b      	b.n	8001d4e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d105      	bne.n	8001d4c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f88a 	bl	8001e5c <ETH_SetMACConfig>

    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e000      	b.n	8001d4e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
  }
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f023 031c 	bic.w	r3, r3, #28
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d70:	f001 fac0 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 8001d74:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <HAL_ETH_SetMDIOClockRange+0x74>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d804      	bhi.n	8001d88 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	e019      	b.n	8001dbc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d204      	bcs.n	8001d9a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f043 030c 	orr.w	r3, r3, #12
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e010      	b.n	8001dbc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d90c      	bls.n	8001dbc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d804      	bhi.n	8001db4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e003      	b.n	8001dbc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	02160ebf 	.word	0x02160ebf
 8001dd0:	03938700 	.word	0x03938700
 8001dd4:	05f5e0ff 	.word	0x05f5e0ff
 8001dd8:	08f0d17f 	.word	0x08f0d17f

08001ddc <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e32:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff f87d 	bl	8000f40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e50:	6193      	str	r3, [r2, #24]
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <ETH_SetMACConfig+0x164>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	7b9b      	ldrb	r3, [r3, #14]
 8001e7a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	7c12      	ldrb	r2, [r2, #16]
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	d102      	bne.n	8001e8a <ETH_SetMACConfig+0x2e>
 8001e84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e88:	e000      	b.n	8001e8c <ETH_SetMACConfig+0x30>
 8001e8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	7c52      	ldrb	r2, [r2, #17]
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d102      	bne.n	8001e9c <ETH_SetMACConfig+0x40>
 8001e96:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e9a:	e000      	b.n	8001e9e <ETH_SetMACConfig+0x42>
 8001e9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e9e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ea4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	7fdb      	ldrb	r3, [r3, #31]
 8001eaa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001eac:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	7f92      	ldrb	r2, [r2, #30]
 8001eb8:	2a00      	cmp	r2, #0
 8001eba:	d102      	bne.n	8001ec2 <ETH_SetMACConfig+0x66>
 8001ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec0:	e000      	b.n	8001ec4 <ETH_SetMACConfig+0x68>
 8001ec2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ec4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7f1b      	ldrb	r3, [r3, #28]
 8001eca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ecc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	791b      	ldrb	r3, [r3, #4]
 8001ed8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	d102      	bne.n	8001eec <ETH_SetMACConfig+0x90>
 8001ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eea:	e000      	b.n	8001eee <ETH_SetMACConfig+0x92>
 8001eec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7bdb      	ldrb	r3, [r3, #15]
 8001ef4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ef6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001efc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f04:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f06:	4313      	orrs	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff f80e 	bl	8000f40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f42:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f4a:	2a00      	cmp	r2, #0
 8001f4c:	d101      	bne.n	8001f52 <ETH_SetMACConfig+0xf6>
 8001f4e:	2280      	movs	r2, #128	@ 0x80
 8001f50:	e000      	b.n	8001f54 <ETH_SetMACConfig+0xf8>
 8001f52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f54:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f62:	2a01      	cmp	r2, #1
 8001f64:	d101      	bne.n	8001f6a <ETH_SetMACConfig+0x10e>
 8001f66:	2208      	movs	r2, #8
 8001f68:	e000      	b.n	8001f6c <ETH_SetMACConfig+0x110>
 8001f6a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f74:	2a01      	cmp	r2, #1
 8001f76:	d101      	bne.n	8001f7c <ETH_SetMACConfig+0x120>
 8001f78:	2204      	movs	r2, #4
 8001f7a:	e000      	b.n	8001f7e <ETH_SetMACConfig+0x122>
 8001f7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f86:	2a01      	cmp	r2, #1
 8001f88:	d101      	bne.n	8001f8e <ETH_SetMACConfig+0x132>
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	e000      	b.n	8001f90 <ETH_SetMACConfig+0x134>
 8001f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f90:	4313      	orrs	r3, r2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7fe ffc9 	bl	8000f40 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	fd20810f 	.word	0xfd20810f

08001fc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <ETH_SetDMAConfig+0x110>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7b1b      	ldrb	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <ETH_SetDMAConfig+0x2c>
 8001fea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fee:	e000      	b.n	8001ff2 <ETH_SetDMAConfig+0x2e>
 8001ff0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	7b5b      	ldrb	r3, [r3, #13]
 8001ff6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ff8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	7f52      	ldrb	r2, [r2, #29]
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d102      	bne.n	8002008 <ETH_SetDMAConfig+0x44>
 8002002:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002006:	e000      	b.n	800200a <ETH_SetDMAConfig+0x46>
 8002008:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800200a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7b9b      	ldrb	r3, [r3, #14]
 8002010:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002012:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002018:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	7f1b      	ldrb	r3, [r3, #28]
 800201e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002020:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7f9b      	ldrb	r3, [r3, #30]
 8002026:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002028:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800202e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002036:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002038:	4313      	orrs	r3, r2
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002048:	461a      	mov	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205a:	2001      	movs	r0, #1
 800205c:	f7fe ff70 	bl	8000f40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	461a      	mov	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002078:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800207e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002084:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800208c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800208e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002096:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800209c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7fe ff41 	bl	8000f40 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	f8de3f23 	.word	0xf8de3f23

080020d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0a6      	sub	sp, #152	@ 0x98
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002102:	2301      	movs	r3, #1
 8002104:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002108:	2301      	movs	r3, #1
 800210a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800211a:	2300      	movs	r3, #0
 800211c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002124:	2300      	movs	r3, #0
 8002126:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002140:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002144:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002146:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800214a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002152:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fe7f 	bl	8001e5c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800215e:	2301      	movs	r3, #1
 8002160:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002162:	2301      	movs	r3, #1
 8002164:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800216c:	2301      	movs	r3, #1
 800216e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800218a:	2301      	movs	r3, #1
 800218c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800218e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002192:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002194:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002198:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800219a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800219e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff05 	bl	8001fc4 <ETH_SetDMAConfig>
}
 80021ba:	bf00      	nop
 80021bc:	3798      	adds	r7, #152	@ 0x98
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3305      	adds	r3, #5
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	3204      	adds	r2, #4
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <ETH_MACAddressConfig+0x68>)
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3303      	adds	r3, #3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	061a      	lsls	r2, r3, #24
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3302      	adds	r3, #2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	4313      	orrs	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <ETH_MACAddressConfig+0x6c>)
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6013      	str	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40028040 	.word	0x40028040
 8002230:	40028044 	.word	0x40028044

08002234 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e03e      	b.n	80022c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68d9      	ldr	r1, [r3, #12]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	3206      	adds	r2, #6
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d80c      	bhi.n	80022a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68d9      	ldr	r1, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	e004      	b.n	80022ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3301      	adds	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d9bd      	bls.n	8002242 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d8:	611a      	str	r2, [r3, #16]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e048      	b.n	8002386 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2200      	movs	r2, #0
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002330:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	3212      	adds	r2, #18
 8002352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d80c      	bhi.n	8002376 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6919      	ldr	r1, [r3, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	461a      	mov	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	e004      	b.n	8002380 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	461a      	mov	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d9b3      	bls.n	80022f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b6:	60da      	str	r2, [r3, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b091      	sub	sp, #68	@ 0x44
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3318      	adds	r3, #24
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002406:	d007      	beq.n	8002418 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800240a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240c:	3304      	adds	r3, #4
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002418:	2302      	movs	r3, #2
 800241a:	e111      	b.n	8002640 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800241c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241e:	3301      	adds	r3, #1
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800242c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4b86      	ldr	r3, [pc, #536]	@ (800264c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002432:	4013      	ands	r3, r2
 8002434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002436:	6852      	ldr	r2, [r2, #4]
 8002438:	431a      	orrs	r2, r3
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800244a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	431a      	orrs	r2, r3
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	431a      	orrs	r2, r3
 8002476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002478:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800248e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800249e:	e082      	b.n	80025a6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024aa:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e005      	b.n	80024cc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ca:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ce:	3301      	adds	r3, #1
 80024d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d902      	bls.n	80024de <ETH_Prepare_Tx_Descriptors+0x11a>
 80024d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024da:	3b04      	subs	r3, #4
 80024dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024f4:	d007      	beq.n	8002506 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fa:	3304      	adds	r3, #4
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d029      	beq.n	800255a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800250e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002512:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002514:	2300      	movs	r3, #0
 8002516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002518:	e019      	b.n	800254e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800251a:	f3bf 8f5f 	dmb	sy
}
 800251e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800252c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252e:	3301      	adds	r3, #1
 8002530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002534:	2b03      	cmp	r3, #3
 8002536:	d902      	bls.n	800253e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800253a:	3b04      	subs	r3, #4
 800253c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254a:	3301      	adds	r3, #1
 800254c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800254e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002552:	429a      	cmp	r2, r3
 8002554:	d3e1      	bcc.n	800251a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	e072      	b.n	8002640 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800255a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002564:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002568:	3301      	adds	r3, #1
 800256a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800256c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800257c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4b32      	ldr	r3, [pc, #200]	@ (800264c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002582:	4013      	ands	r3, r2
 8002584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002586:	6852      	ldr	r2, [r2, #4]
 8002588:	431a      	orrs	r2, r3
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800258e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002590:	3301      	adds	r3, #1
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002594:	f3bf 8f5f 	dmb	sy
}
 8002598:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800259a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f47f af78 	bne.w	80024a0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e005      	b.n	80025d0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025da:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	6a3a      	ldr	r2, [r7, #32]
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80025e6:	f3bf 8f5f 	dmb	sy
}
 80025ea:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002600:	3304      	adds	r3, #4
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800260c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260e:	f3ef 8310 	mrs	r3, PRIMASK
 8002612:	613b      	str	r3, [r7, #16]
  return(result);
 8002614:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	2301      	movs	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f383 8810 	msr	PRIMASK, r3
}
 8002622:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	4413      	add	r3, r2
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f383 8810 	msr	PRIMASK, r3
}
 800263c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3744      	adds	r7, #68	@ 0x44
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	ffffe000 	.word	0xffffe000

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e175      	b.n	800295c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8164 	bne.w	8002956 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x56>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80be 	beq.w	8002956 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	4b66      	ldr	r3, [pc, #408]	@ (8002974 <HAL_GPIO_Init+0x324>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	4a65      	ldr	r2, [pc, #404]	@ (8002974 <HAL_GPIO_Init+0x324>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e6:	4b63      	ldr	r3, [pc, #396]	@ (8002974 <HAL_GPIO_Init+0x324>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027f2:	4a61      	ldr	r2, [pc, #388]	@ (8002978 <HAL_GPIO_Init+0x328>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a58      	ldr	r2, [pc, #352]	@ (800297c <HAL_GPIO_Init+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d037      	beq.n	800288e <HAL_GPIO_Init+0x23e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a57      	ldr	r2, [pc, #348]	@ (8002980 <HAL_GPIO_Init+0x330>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d031      	beq.n	800288a <HAL_GPIO_Init+0x23a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a56      	ldr	r2, [pc, #344]	@ (8002984 <HAL_GPIO_Init+0x334>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02b      	beq.n	8002886 <HAL_GPIO_Init+0x236>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a55      	ldr	r2, [pc, #340]	@ (8002988 <HAL_GPIO_Init+0x338>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x232>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a54      	ldr	r2, [pc, #336]	@ (800298c <HAL_GPIO_Init+0x33c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x22e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a53      	ldr	r2, [pc, #332]	@ (8002990 <HAL_GPIO_Init+0x340>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x22a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a52      	ldr	r2, [pc, #328]	@ (8002994 <HAL_GPIO_Init+0x344>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x226>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a51      	ldr	r2, [pc, #324]	@ (8002998 <HAL_GPIO_Init+0x348>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x222>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a50      	ldr	r2, [pc, #320]	@ (800299c <HAL_GPIO_Init+0x34c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x21e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4f      	ldr	r2, [pc, #316]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x21a>
 8002866:	2309      	movs	r3, #9
 8002868:	e012      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800286a:	230a      	movs	r3, #10
 800286c:	e010      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800286e:	2308      	movs	r3, #8
 8002870:	e00e      	b.n	8002890 <HAL_GPIO_Init+0x240>
 8002872:	2307      	movs	r3, #7
 8002874:	e00c      	b.n	8002890 <HAL_GPIO_Init+0x240>
 8002876:	2306      	movs	r3, #6
 8002878:	e00a      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800287a:	2305      	movs	r3, #5
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800287e:	2304      	movs	r3, #4
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x240>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x240>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800288e:	2300      	movs	r3, #0
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028a0:	4935      	ldr	r1, [pc, #212]	@ (8002978 <HAL_GPIO_Init+0x328>)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ae:	4b3d      	ldr	r3, [pc, #244]	@ (80029a4 <HAL_GPIO_Init+0x354>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d2:	4a34      	ldr	r2, [pc, #208]	@ (80029a4 <HAL_GPIO_Init+0x354>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d8:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <HAL_GPIO_Init+0x354>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028fc:	4a29      	ldr	r2, [pc, #164]	@ (80029a4 <HAL_GPIO_Init+0x354>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002902:	4b28      	ldr	r3, [pc, #160]	@ (80029a4 <HAL_GPIO_Init+0x354>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002926:	4a1f      	ldr	r2, [pc, #124]	@ (80029a4 <HAL_GPIO_Init+0x354>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292c:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HAL_GPIO_Init+0x354>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002950:	4a14      	ldr	r2, [pc, #80]	@ (80029a4 <HAL_GPIO_Init+0x354>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b0f      	cmp	r3, #15
 8002960:	f67f ae86 	bls.w	8002670 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3724      	adds	r7, #36	@ 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40013800 	.word	0x40013800
 800297c:	40020000 	.word	0x40020000
 8002980:	40020400 	.word	0x40020400
 8002984:	40020800 	.word	0x40020800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	40021000 	.word	0x40021000
 8002990:	40021400 	.word	0x40021400
 8002994:	40021800 	.word	0x40021800
 8002998:	40021c00 	.word	0x40021c00
 800299c:	40022000 	.word	0x40022000
 80029a0:	40022400 	.word	0x40022400
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b23      	ldr	r3, [pc, #140]	@ (8002a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	4a22      	ldr	r2, [pc, #136]	@ (8002a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029be:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d6:	f7fe faa7 	bl	8000f28 <HAL_GetTick>
 80029da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029dc:	e009      	b.n	80029f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029de:	f7fe faa3 	bl	8000f28 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029ec:	d901      	bls.n	80029f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e022      	b.n	8002a38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029f2:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fe:	d1ee      	bne.n	80029de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a00:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a0c:	f7fe fa8c 	bl	8000f28 <HAL_GetTick>
 8002a10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a12:	e009      	b.n	8002a28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a14:	f7fe fa88 	bl	8000f28 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a22:	d901      	bls.n	8002a28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e007      	b.n	8002a38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a34:	d1ee      	bne.n	8002a14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000

08002a48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e291      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8087 	beq.w	8002b7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a6c:	4b96      	ldr	r3, [pc, #600]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d00c      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a78:	4b93      	ldr	r3, [pc, #588]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d112      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62>
 8002a84:	4b90      	ldr	r3, [pc, #576]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a90:	d10b      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a92:	4b8d      	ldr	r3, [pc, #564]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d06c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x130>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d168      	bne.n	8002b78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e26b      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x7a>
 8002ab4:	4b84      	ldr	r3, [pc, #528]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a83      	ldr	r2, [pc, #524]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	e02e      	b.n	8002b20 <HAL_RCC_OscConfig+0xd8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x9c>
 8002aca:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7b      	ldr	r2, [pc, #492]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002adc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e01d      	b.n	8002b20 <HAL_RCC_OscConfig+0xd8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0xc0>
 8002aee:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a75      	ldr	r2, [pc, #468]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b73      	ldr	r3, [pc, #460]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a72      	ldr	r2, [pc, #456]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0xd8>
 8002b08:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6b      	ldr	r2, [pc, #428]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe f9fe 	bl	8000f28 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe f9fa 	bl	8000f28 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	@ 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e21f      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	4b61      	ldr	r3, [pc, #388]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe8>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe f9ea 	bl	8000f28 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe f9e6 	bl	8000f28 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	@ 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e20b      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	4b57      	ldr	r3, [pc, #348]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x110>
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d069      	beq.n	8002c5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b86:	4b50      	ldr	r3, [pc, #320]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b92:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d11c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x190>
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d116      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	4b47      	ldr	r3, [pc, #284]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x17a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e1df      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc2:	4b41      	ldr	r3, [pc, #260]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	493d      	ldr	r1, [pc, #244]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd6:	e040      	b.n	8002c5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be0:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a38      	ldr	r2, [pc, #224]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe f99c 	bl	8000f28 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7fe f998 	bl	8000f28 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1bd      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b30      	ldr	r3, [pc, #192]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4929      	ldr	r1, [pc, #164]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
 8002c26:	e018      	b.n	8002c5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c28:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a26      	ldr	r2, [pc, #152]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe f978 	bl	8000f28 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe f974 	bl	8000f28 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e199      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d038      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d019      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c72:	4a15      	ldr	r2, [pc, #84]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe f955 	bl	8000f28 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c82:	f7fe f951 	bl	8000f28 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e176      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c94:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x23a>
 8002ca0:	e01a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca6:	4a08      	ldr	r2, [pc, #32]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe f93b 	bl	8000f28 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe f937 	bl	8000f28 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d903      	bls.n	8002ccc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e15c      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
 8002cc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	4b91      	ldr	r3, [pc, #580]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80a4 	beq.w	8002e2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b88      	ldr	r3, [pc, #544]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	4a87      	ldr	r2, [pc, #540]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfe:	4b85      	ldr	r3, [pc, #532]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0e:	4b82      	ldr	r3, [pc, #520]	@ (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7fe f8ff 	bl	8000f28 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7fe f8fb 	bl	8000f28 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	@ 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e120      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d40:	4b75      	ldr	r3, [pc, #468]	@ (8002f18 <HAL_RCC_OscConfig+0x4d0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x31a>
 8002d54:	4b6f      	ldr	r3, [pc, #444]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d58:	4a6e      	ldr	r2, [pc, #440]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d60:	e02d      	b.n	8002dbe <HAL_RCC_OscConfig+0x376>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x33c>
 8002d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	4a69      	ldr	r2, [pc, #420]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d76:	4b67      	ldr	r3, [pc, #412]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	4a66      	ldr	r2, [pc, #408]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d82:	e01c      	b.n	8002dbe <HAL_RCC_OscConfig+0x376>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCC_OscConfig+0x35e>
 8002d8c:	4b61      	ldr	r3, [pc, #388]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	4a60      	ldr	r2, [pc, #384]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d98:	4b5e      	ldr	r3, [pc, #376]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_OscConfig+0x376>
 8002da6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a5a      	ldr	r2, [pc, #360]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db2:	4b58      	ldr	r3, [pc, #352]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	4a57      	ldr	r2, [pc, #348]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d015      	beq.n	8002df2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe f8af 	bl	8000f28 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe f8ab 	bl	8000f28 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0ce      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ee      	beq.n	8002dce <HAL_RCC_OscConfig+0x386>
 8002df0:	e014      	b.n	8002e1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7fe f899 	bl	8000f28 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fe f895 	bl	8000f28 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0b8      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ee      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d105      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e22:	4b3c      	ldr	r3, [pc, #240]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	4a3b      	ldr	r2, [pc, #236]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80a4 	beq.w	8002f80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e38:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d06b      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d149      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b31      	ldr	r3, [pc, #196]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a30      	ldr	r2, [pc, #192]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f866 	bl	8000f28 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe f862 	bl	8000f28 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e087      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b28      	ldr	r3, [pc, #160]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002eaa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eac:	4b19      	ldr	r3, [pc, #100]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f836 	bl	8000f28 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe f832 	bl	8000f28 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e057      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed2:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x478>
 8002ede:	e04f      	b.n	8002f80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe f81c 	bl	8000f28 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe f818 	bl	8000f28 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e03d      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4ac>
 8002f12:	e035      	b.n	8002f80 <HAL_RCC_OscConfig+0x538>
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <HAL_RCC_OscConfig+0x544>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d028      	beq.n	8002f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d121      	bne.n	8002f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d11a      	bne.n	8002f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d111      	bne.n	8002f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0d0      	b.n	800314a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d910      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b67      	ldr	r3, [pc, #412]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 020f 	bic.w	r2, r3, #15
 8002fbe:	4965      	ldr	r1, [pc, #404]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b63      	ldr	r3, [pc, #396]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b8      	b.n	800314a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff0:	4b59      	ldr	r3, [pc, #356]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003008:	4b53      	ldr	r3, [pc, #332]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a52      	ldr	r2, [pc, #328]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003012:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b50      	ldr	r3, [pc, #320]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	494d      	ldr	r1, [pc, #308]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d040      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d115      	bne.n	8003072 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e073      	b.n	800314a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	4b3d      	ldr	r3, [pc, #244]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06b      	b.n	800314a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003072:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f023 0203 	bic.w	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4936      	ldr	r1, [pc, #216]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	4313      	orrs	r3, r2
 8003082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003084:	f7fd ff50 	bl	8000f28 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308c:	f7fd ff4c 	bl	8000f28 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e053      	b.n	800314a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 020c 	and.w	r2, r3, #12
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d1eb      	bne.n	800308c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b4:	4b27      	ldr	r3, [pc, #156]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d210      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 020f 	bic.w	r2, r3, #15
 80030ca:	4922      	ldr	r1, [pc, #136]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e032      	b.n	800314a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b19      	ldr	r3, [pc, #100]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4916      	ldr	r1, [pc, #88]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800310e:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	490e      	ldr	r1, [pc, #56]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003122:	f000 f821 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003126:	4602      	mov	r2, r0
 8003128:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	490a      	ldr	r1, [pc, #40]	@ (800315c <HAL_RCC_ClockConfig+0x1cc>)
 8003134:	5ccb      	ldrb	r3, [r1, r3]
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a09      	ldr	r2, [pc, #36]	@ (8003160 <HAL_RCC_ClockConfig+0x1d0>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800313e:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_RCC_ClockConfig+0x1d4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd fc1a 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00
 8003158:	40023800 	.word	0x40023800
 800315c:	0801966c 	.word	0x0801966c
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b090      	sub	sp, #64	@ 0x40
 800316e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
 8003174:	2300      	movs	r3, #0
 8003176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003178:	2300      	movs	r3, #0
 800317a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d00d      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x40>
 800318c:	2b08      	cmp	r3, #8
 800318e:	f200 80a1 	bhi.w	80032d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x34>
 8003196:	2b04      	cmp	r3, #4
 8003198:	d003      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800319a:	e09b      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b53      	ldr	r3, [pc, #332]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x184>)
 800319e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031a0:	e09b      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a2:	4b53      	ldr	r3, [pc, #332]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031a6:	e098      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a8:	4b4f      	ldr	r3, [pc, #316]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031b2:	4b4d      	ldr	r3, [pc, #308]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d028      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031be:	4b4a      	ldr	r3, [pc, #296]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	2200      	movs	r2, #0
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031d0:	2100      	movs	r1, #0
 80031d2:	4b47      	ldr	r3, [pc, #284]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031d4:	fb03 f201 	mul.w	r2, r3, r1
 80031d8:	2300      	movs	r3, #0
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	4413      	add	r3, r2
 80031e0:	4a43      	ldr	r2, [pc, #268]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031e2:	fba0 1202 	umull	r1, r2, r0, r2
 80031e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e8:	460a      	mov	r2, r1
 80031ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ee:	4413      	add	r3, r2
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f4:	2200      	movs	r2, #0
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	61fa      	str	r2, [r7, #28]
 80031fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003202:	f7fd f865 	bl	80002d0 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4613      	mov	r3, r2
 800320c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800320e:	e053      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003210:	4b35      	ldr	r3, [pc, #212]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	2200      	movs	r2, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	617a      	str	r2, [r7, #20]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003222:	f04f 0b00 	mov.w	fp, #0
 8003226:	4652      	mov	r2, sl
 8003228:	465b      	mov	r3, fp
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	0159      	lsls	r1, r3, #5
 8003234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003238:	0150      	lsls	r0, r2, #5
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	ebb2 080a 	subs.w	r8, r2, sl
 8003242:	eb63 090b 	sbc.w	r9, r3, fp
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003252:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003256:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800325a:	ebb2 0408 	subs.w	r4, r2, r8
 800325e:	eb63 0509 	sbc.w	r5, r3, r9
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	00eb      	lsls	r3, r5, #3
 800326c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003270:	00e2      	lsls	r2, r4, #3
 8003272:	4614      	mov	r4, r2
 8003274:	461d      	mov	r5, r3
 8003276:	eb14 030a 	adds.w	r3, r4, sl
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	eb45 030b 	adc.w	r3, r5, fp
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328e:	4629      	mov	r1, r5
 8003290:	028b      	lsls	r3, r1, #10
 8003292:	4621      	mov	r1, r4
 8003294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003298:	4621      	mov	r1, r4
 800329a:	028a      	lsls	r2, r1, #10
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a2:	2200      	movs	r2, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	60fa      	str	r2, [r7, #12]
 80032a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ac:	f7fd f810 	bl	80002d0 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4613      	mov	r3, r2
 80032b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	3301      	adds	r3, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80032c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x184>)
 80032d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3740      	adds	r7, #64	@ 0x40
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	017d7840 	.word	0x017d7840

080032f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f8:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <HAL_RCC_GetHCLKFreq+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000000 	.word	0x20000000

0800330c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003310:	f7ff fff0 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	0a9b      	lsrs	r3, r3, #10
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4903      	ldr	r1, [pc, #12]	@ (8003330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	0801967c 	.word	0x0801967c

08003334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	220f      	movs	r2, #15
 8003342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <HAL_RCC_GetClockConfig+0x5c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0203 	and.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003350:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <HAL_RCC_GetClockConfig+0x5c>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800335c:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <HAL_RCC_GetClockConfig+0x5c>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003368:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <HAL_RCC_GetClockConfig+0x5c>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	08db      	lsrs	r3, r3, #3
 800336e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003376:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <HAL_RCC_GetClockConfig+0x60>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	601a      	str	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	40023c00 	.word	0x40023c00

08003398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e049      	b.n	800343e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f841 	bl	8003446 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f000 f9e8 	bl	80037ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d001      	beq.n	8003474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e054      	b.n	800351e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a26      	ldr	r2, [pc, #152]	@ (800352c <HAL_TIM_Base_Start_IT+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d022      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x80>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800349e:	d01d      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x80>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a22      	ldr	r2, [pc, #136]	@ (8003530 <HAL_TIM_Base_Start_IT+0xd4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d018      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x80>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <HAL_TIM_Base_Start_IT+0xd8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d013      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x80>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003538 <HAL_TIM_Base_Start_IT+0xdc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00e      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x80>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <HAL_TIM_Base_Start_IT+0xe0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d009      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x80>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <HAL_TIM_Base_Start_IT+0xe4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x80>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003544 <HAL_TIM_Base_Start_IT+0xe8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d115      	bne.n	8003508 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <HAL_TIM_Base_Start_IT+0xec>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d015      	beq.n	800351a <HAL_TIM_Base_Start_IT+0xbe>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f4:	d011      	beq.n	800351a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	e008      	b.n	800351a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e000      	b.n	800351c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40010400 	.word	0x40010400
 8003540:	40014000 	.word	0x40014000
 8003544:	40001800 	.word	0x40001800
 8003548:	00010007 	.word	0x00010007

0800354c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d020      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0202 	mvn.w	r2, #2
 8003580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8e9 	bl	800376e <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f8db 	bl	800375a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8ec 	bl	8003782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d020      	beq.n	80035fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0204 	mvn.w	r2, #4
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8c3 	bl	800376e <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8b5 	bl	800375a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8c6 	bl	8003782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d020      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0208 	mvn.w	r2, #8
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2204      	movs	r2, #4
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f89d 	bl	800376e <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f88f 	bl	800375a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f8a0 	bl	8003782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0210 	mvn.w	r2, #16
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2208      	movs	r2, #8
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f877 	bl	800376e <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f869 	bl	800375a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f87a 	bl	8003782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00c      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0201 	mvn.w	r2, #1
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd f922 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d104      	bne.n	80036cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f919 	bl	8003918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00c      	beq.n	800370a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f911 	bl	800392c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00c      	beq.n	800372e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f834 	bl	8003796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f06f 0220 	mvn.w	r2, #32
 800374a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8d9 	bl	8003904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a46      	ldr	r2, [pc, #280]	@ (80038d8 <TIM_Base_SetConfig+0x12c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ca:	d00f      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a43      	ldr	r2, [pc, #268]	@ (80038dc <TIM_Base_SetConfig+0x130>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00b      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a42      	ldr	r2, [pc, #264]	@ (80038e0 <TIM_Base_SetConfig+0x134>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d007      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a41      	ldr	r2, [pc, #260]	@ (80038e4 <TIM_Base_SetConfig+0x138>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a40      	ldr	r2, [pc, #256]	@ (80038e8 <TIM_Base_SetConfig+0x13c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d108      	bne.n	80037fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a35      	ldr	r2, [pc, #212]	@ (80038d8 <TIM_Base_SetConfig+0x12c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d02b      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380c:	d027      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a32      	ldr	r2, [pc, #200]	@ (80038dc <TIM_Base_SetConfig+0x130>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d023      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a31      	ldr	r2, [pc, #196]	@ (80038e0 <TIM_Base_SetConfig+0x134>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01f      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a30      	ldr	r2, [pc, #192]	@ (80038e4 <TIM_Base_SetConfig+0x138>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01b      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2f      	ldr	r2, [pc, #188]	@ (80038e8 <TIM_Base_SetConfig+0x13c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d017      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2e      	ldr	r2, [pc, #184]	@ (80038ec <TIM_Base_SetConfig+0x140>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2d      	ldr	r2, [pc, #180]	@ (80038f0 <TIM_Base_SetConfig+0x144>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00f      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2c      	ldr	r2, [pc, #176]	@ (80038f4 <TIM_Base_SetConfig+0x148>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00b      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2b      	ldr	r2, [pc, #172]	@ (80038f8 <TIM_Base_SetConfig+0x14c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2a      	ldr	r2, [pc, #168]	@ (80038fc <TIM_Base_SetConfig+0x150>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d003      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a29      	ldr	r2, [pc, #164]	@ (8003900 <TIM_Base_SetConfig+0x154>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a10      	ldr	r2, [pc, #64]	@ (80038d8 <TIM_Base_SetConfig+0x12c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0xf8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a12      	ldr	r2, [pc, #72]	@ (80038e8 <TIM_Base_SetConfig+0x13c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d103      	bne.n	80038ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f023 0201 	bic.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	611a      	str	r2, [r3, #16]
  }
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40010000 	.word	0x40010000
 80038dc:	40000400 	.word	0x40000400
 80038e0:	40000800 	.word	0x40000800
 80038e4:	40000c00 	.word	0x40000c00
 80038e8:	40010400 	.word	0x40010400
 80038ec:	40014000 	.word	0x40014000
 80038f0:	40014400 	.word	0x40014400
 80038f4:	40014800 	.word	0x40014800
 80038f8:	40001800 	.word	0x40001800
 80038fc:	40001c00 	.word	0x40001c00
 8003900:	40002000 	.word	0x40002000

08003904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003940:	b5b0      	push	{r4, r5, r7, lr}
 8003942:	b08c      	sub	sp, #48	@ 0x30
 8003944:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003946:	4b8f      	ldr	r3, [pc, #572]	@ (8003b84 <MX_LWIP_Init+0x244>)
 8003948:	22c0      	movs	r2, #192	@ 0xc0
 800394a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800394c:	4b8d      	ldr	r3, [pc, #564]	@ (8003b84 <MX_LWIP_Init+0x244>)
 800394e:	22a8      	movs	r2, #168	@ 0xa8
 8003950:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 123;
 8003952:	4b8c      	ldr	r3, [pc, #560]	@ (8003b84 <MX_LWIP_Init+0x244>)
 8003954:	227b      	movs	r2, #123	@ 0x7b
 8003956:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 101;
 8003958:	4b8a      	ldr	r3, [pc, #552]	@ (8003b84 <MX_LWIP_Init+0x244>)
 800395a:	2265      	movs	r2, #101	@ 0x65
 800395c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800395e:	4b8a      	ldr	r3, [pc, #552]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003960:	22ff      	movs	r2, #255	@ 0xff
 8003962:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003964:	4b88      	ldr	r3, [pc, #544]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003966:	22ff      	movs	r2, #255	@ 0xff
 8003968:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800396a:	4b87      	ldr	r3, [pc, #540]	@ (8003b88 <MX_LWIP_Init+0x248>)
 800396c:	22ff      	movs	r2, #255	@ 0xff
 800396e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003970:	4b85      	ldr	r3, [pc, #532]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003972:	2200      	movs	r2, #0
 8003974:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003976:	4b85      	ldr	r3, [pc, #532]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003978:	22c0      	movs	r2, #192	@ 0xc0
 800397a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800397c:	4b83      	ldr	r3, [pc, #524]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 800397e:	22a8      	movs	r2, #168	@ 0xa8
 8003980:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 123;
 8003982:	4b82      	ldr	r3, [pc, #520]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003984:	227b      	movs	r2, #123	@ 0x7b
 8003986:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003988:	4b80      	ldr	r3, [pc, #512]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 800398a:	2201      	movs	r2, #1
 800398c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800398e:	2100      	movs	r1, #0
 8003990:	2000      	movs	r0, #0
 8003992:	f006 fa31 	bl	8009df8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003996:	4b7b      	ldr	r3, [pc, #492]	@ (8003b84 <MX_LWIP_Init+0x244>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	061a      	lsls	r2, r3, #24
 800399c:	4b79      	ldr	r3, [pc, #484]	@ (8003b84 <MX_LWIP_Init+0x244>)
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	431a      	orrs	r2, r3
 80039a4:	4b77      	ldr	r3, [pc, #476]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039a6:	789b      	ldrb	r3, [r3, #2]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	4313      	orrs	r3, r2
 80039ac:	4a75      	ldr	r2, [pc, #468]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039ae:	78d2      	ldrb	r2, [r2, #3]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	061a      	lsls	r2, r3, #24
 80039b4:	4b73      	ldr	r3, [pc, #460]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	0619      	lsls	r1, r3, #24
 80039ba:	4b72      	ldr	r3, [pc, #456]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	4319      	orrs	r1, r3
 80039c2:	4b70      	ldr	r3, [pc, #448]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039c4:	789b      	ldrb	r3, [r3, #2]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	430b      	orrs	r3, r1
 80039ca:	496e      	ldr	r1, [pc, #440]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039cc:	78c9      	ldrb	r1, [r1, #3]
 80039ce:	430b      	orrs	r3, r1
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80039d6:	431a      	orrs	r2, r3
 80039d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	0619      	lsls	r1, r3, #24
 80039de:	4b69      	ldr	r3, [pc, #420]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	041b      	lsls	r3, r3, #16
 80039e4:	4319      	orrs	r1, r3
 80039e6:	4b67      	ldr	r3, [pc, #412]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039e8:	789b      	ldrb	r3, [r3, #2]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	430b      	orrs	r3, r1
 80039ee:	4965      	ldr	r1, [pc, #404]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039f0:	78c9      	ldrb	r1, [r1, #3]
 80039f2:	430b      	orrs	r3, r1
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80039fa:	431a      	orrs	r2, r3
 80039fc:	4b61      	ldr	r3, [pc, #388]	@ (8003b84 <MX_LWIP_Init+0x244>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	0619      	lsls	r1, r3, #24
 8003a02:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <MX_LWIP_Init+0x244>)
 8003a04:	785b      	ldrb	r3, [r3, #1]
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	4319      	orrs	r1, r3
 8003a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003b84 <MX_LWIP_Init+0x244>)
 8003a0c:	789b      	ldrb	r3, [r3, #2]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	430b      	orrs	r3, r1
 8003a12:	495c      	ldr	r1, [pc, #368]	@ (8003b84 <MX_LWIP_Init+0x244>)
 8003a14:	78c9      	ldrb	r1, [r1, #3]
 8003a16:	430b      	orrs	r3, r1
 8003a18:	0e1b      	lsrs	r3, r3, #24
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	4a5c      	ldr	r2, [pc, #368]	@ (8003b90 <MX_LWIP_Init+0x250>)
 8003a1e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003a20:	4b59      	ldr	r3, [pc, #356]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	061a      	lsls	r2, r3, #24
 8003a26:	4b58      	ldr	r3, [pc, #352]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	4b56      	ldr	r3, [pc, #344]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a30:	789b      	ldrb	r3, [r3, #2]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	4313      	orrs	r3, r2
 8003a36:	4a54      	ldr	r2, [pc, #336]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a38:	78d2      	ldrb	r2, [r2, #3]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	061a      	lsls	r2, r3, #24
 8003a3e:	4b52      	ldr	r3, [pc, #328]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	0619      	lsls	r1, r3, #24
 8003a44:	4b50      	ldr	r3, [pc, #320]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	4319      	orrs	r1, r3
 8003a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a4e:	789b      	ldrb	r3, [r3, #2]
 8003a50:	021b      	lsls	r3, r3, #8
 8003a52:	430b      	orrs	r3, r1
 8003a54:	494c      	ldr	r1, [pc, #304]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a56:	78c9      	ldrb	r1, [r1, #3]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a60:	431a      	orrs	r2, r3
 8003a62:	4b49      	ldr	r3, [pc, #292]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	0619      	lsls	r1, r3, #24
 8003a68:	4b47      	ldr	r3, [pc, #284]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	4319      	orrs	r1, r3
 8003a70:	4b45      	ldr	r3, [pc, #276]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a72:	789b      	ldrb	r3, [r3, #2]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	430b      	orrs	r3, r1
 8003a78:	4943      	ldr	r1, [pc, #268]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a7a:	78c9      	ldrb	r1, [r1, #3]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a84:	431a      	orrs	r2, r3
 8003a86:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	0619      	lsls	r1, r3, #24
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	4319      	orrs	r1, r3
 8003a94:	4b3c      	ldr	r3, [pc, #240]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a96:	789b      	ldrb	r3, [r3, #2]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	493a      	ldr	r1, [pc, #232]	@ (8003b88 <MX_LWIP_Init+0x248>)
 8003a9e:	78c9      	ldrb	r1, [r1, #3]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	0e1b      	lsrs	r3, r3, #24
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8003b94 <MX_LWIP_Init+0x254>)
 8003aa8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003aaa:	4b38      	ldr	r3, [pc, #224]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	061a      	lsls	r2, r3, #24
 8003ab0:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003aba:	789b      	ldrb	r3, [r3, #2]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	4a32      	ldr	r2, [pc, #200]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003ac2:	78d2      	ldrb	r2, [r2, #3]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	061a      	lsls	r2, r3, #24
 8003ac8:	4b30      	ldr	r3, [pc, #192]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	0619      	lsls	r1, r3, #24
 8003ace:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	4319      	orrs	r1, r3
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003ad8:	789b      	ldrb	r3, [r3, #2]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	430b      	orrs	r3, r1
 8003ade:	492b      	ldr	r1, [pc, #172]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003ae0:	78c9      	ldrb	r1, [r1, #3]
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003aea:	431a      	orrs	r2, r3
 8003aec:	4b27      	ldr	r3, [pc, #156]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	0619      	lsls	r1, r3, #24
 8003af2:	4b26      	ldr	r3, [pc, #152]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	4319      	orrs	r1, r3
 8003afa:	4b24      	ldr	r3, [pc, #144]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003afc:	789b      	ldrb	r3, [r3, #2]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	430b      	orrs	r3, r1
 8003b02:	4922      	ldr	r1, [pc, #136]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003b04:	78c9      	ldrb	r1, [r1, #3]
 8003b06:	430b      	orrs	r3, r1
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	4b1e      	ldr	r3, [pc, #120]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	0619      	lsls	r1, r3, #24
 8003b16:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	4319      	orrs	r1, r3
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003b20:	789b      	ldrb	r3, [r3, #2]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	430b      	orrs	r3, r1
 8003b26:	4919      	ldr	r1, [pc, #100]	@ (8003b8c <MX_LWIP_Init+0x24c>)
 8003b28:	78c9      	ldrb	r1, [r1, #3]
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	0e1b      	lsrs	r3, r3, #24
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	4a19      	ldr	r2, [pc, #100]	@ (8003b98 <MX_LWIP_Init+0x258>)
 8003b32:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003b34:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <MX_LWIP_Init+0x25c>)
 8003b36:	9302      	str	r3, [sp, #8]
 8003b38:	4b19      	ldr	r3, [pc, #100]	@ (8003ba0 <MX_LWIP_Init+0x260>)
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4b15      	ldr	r3, [pc, #84]	@ (8003b98 <MX_LWIP_Init+0x258>)
 8003b42:	4a14      	ldr	r2, [pc, #80]	@ (8003b94 <MX_LWIP_Init+0x254>)
 8003b44:	4912      	ldr	r1, [pc, #72]	@ (8003b90 <MX_LWIP_Init+0x250>)
 8003b46:	4817      	ldr	r0, [pc, #92]	@ (8003ba4 <MX_LWIP_Init+0x264>)
 8003b48:	f006 ff64 	bl	800aa14 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003b4c:	4815      	ldr	r0, [pc, #84]	@ (8003ba4 <MX_LWIP_Init+0x264>)
 8003b4e:	f007 f913 	bl	800ad78 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003b52:	4814      	ldr	r0, [pc, #80]	@ (8003ba4 <MX_LWIP_Init+0x264>)
 8003b54:	f007 f920 	bl	800ad98 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003b58:	4913      	ldr	r1, [pc, #76]	@ (8003ba8 <MX_LWIP_Init+0x268>)
 8003b5a:	4812      	ldr	r0, [pc, #72]	@ (8003ba4 <MX_LWIP_Init+0x264>)
 8003b5c:	f007 fa1e 	bl	800af9c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8003b60:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <MX_LWIP_Init+0x26c>)
 8003b62:	1d3c      	adds	r4, r7, #4
 8003b64:	461d      	mov	r5, r3
 8003b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	490b      	ldr	r1, [pc, #44]	@ (8003ba4 <MX_LWIP_Init+0x264>)
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fdad 	bl	80046d6 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003b7c:	bf00      	nop
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bdb0      	pop	{r4, r5, r7, pc}
 8003b84:	20000520 	.word	0x20000520
 8003b88:	20000524 	.word	0x20000524
 8003b8c:	20000528 	.word	0x20000528
 8003b90:	20000514 	.word	0x20000514
 8003b94:	20000518 	.word	0x20000518
 8003b98:	2000051c 	.word	0x2000051c
 8003b9c:	08009d09 	.word	0x08009d09
 8003ba0:	08004149 	.word	0x08004149
 8003ba4:	200004e0 	.word	0x200004e0
 8003ba8:	08003bb1 	.word	0x08003bb1
 8003bac:	080160d4 	.word	0x080160d4

08003bb0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003bd6:	2320      	movs	r3, #32
 8003bd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bda:	f3bf 8f4f 	dsb	sy
}
 8003bde:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8003be0:	e00b      	b.n	8003bfa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003be2:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <SCB_InvalidateDCache_by_Addr+0x54>)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	dcf0      	bgt.n	8003be2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c00:	f3bf 8f4f 	dsb	sy
}
 8003c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c06:	f3bf 8f6f 	isb	sy
}
 8003c0a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8003c0c:	bf00      	nop
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003c24:	4b04      	ldr	r3, [pc, #16]	@ (8003c38 <HAL_ETH_RxCpltCallback+0x1c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fedd 	bl	80049e8 <osSemaphoreRelease>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20004eb8 	.word	0x20004eb8

08003c3c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <HAL_ETH_TxCpltCallback+0x1c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fecd 	bl	80049e8 <osSemaphoreRelease>
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20004ebc 	.word	0x20004ebc

08003c5c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fe f8c6 	bl	8001df6 <HAL_ETH_GetDMAError>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c70:	2b80      	cmp	r3, #128	@ 0x80
 8003c72:	d104      	bne.n	8003c7e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <HAL_ETH_ErrorCallback+0x2c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 feb5 	bl	80049e8 <osSemaphoreRelease>
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20004eb8 	.word	0x20004eb8

08003c8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003c8c:	b5b0      	push	{r4, r5, r7, lr}
 8003c8e:	b0b4      	sub	sp, #208	@ 0xd0
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8003ca6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003caa:	2264      	movs	r2, #100	@ 0x64
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f011 fac5 	bl	801523e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003cb4:	4b9f      	ldr	r3, [pc, #636]	@ (8003f34 <low_level_init+0x2a8>)
 8003cb6:	4aa0      	ldr	r2, [pc, #640]	@ (8003f38 <low_level_init+0x2ac>)
 8003cb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8003cc0:	2380      	movs	r3, #128	@ 0x80
 8003cc2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8003cc6:	23e1      	movs	r3, #225	@ 0xe1
 8003cc8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8003cde:	4a95      	ldr	r2, [pc, #596]	@ (8003f34 <low_level_init+0x2a8>)
 8003ce0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ce4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003ce6:	4b93      	ldr	r3, [pc, #588]	@ (8003f34 <low_level_init+0x2a8>)
 8003ce8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cec:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003cee:	4b91      	ldr	r3, [pc, #580]	@ (8003f34 <low_level_init+0x2a8>)
 8003cf0:	4a92      	ldr	r2, [pc, #584]	@ (8003f3c <low_level_init+0x2b0>)
 8003cf2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8003f34 <low_level_init+0x2a8>)
 8003cf6:	4a92      	ldr	r2, [pc, #584]	@ (8003f40 <low_level_init+0x2b4>)
 8003cf8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003cfa:	4b8e      	ldr	r3, [pc, #568]	@ (8003f34 <low_level_init+0x2a8>)
 8003cfc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003d00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003d02:	488c      	ldr	r0, [pc, #560]	@ (8003f34 <low_level_init+0x2a8>)
 8003d04:	f7fd fa2e 	bl	8001164 <HAL_ETH_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003d0e:	2238      	movs	r2, #56	@ 0x38
 8003d10:	2100      	movs	r1, #0
 8003d12:	488c      	ldr	r0, [pc, #560]	@ (8003f44 <low_level_init+0x2b8>)
 8003d14:	f011 fa93 	bl	801523e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003d18:	4b8a      	ldr	r3, [pc, #552]	@ (8003f44 <low_level_init+0x2b8>)
 8003d1a:	2221      	movs	r2, #33	@ 0x21
 8003d1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003d1e:	4b89      	ldr	r3, [pc, #548]	@ (8003f44 <low_level_init+0x2b8>)
 8003d20:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003d24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003d26:	4b87      	ldr	r3, [pc, #540]	@ (8003f44 <low_level_init+0x2b8>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003d2c:	4886      	ldr	r0, [pc, #536]	@ (8003f48 <low_level_init+0x2bc>)
 8003d2e:	f006 fd2b 	bl	800a788 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2206      	movs	r2, #6
 8003d36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003d3a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f34 <low_level_init+0x2a8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003d46:	4b7b      	ldr	r3, [pc, #492]	@ (8003f34 <low_level_init+0x2a8>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	785a      	ldrb	r2, [r3, #1]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003d52:	4b78      	ldr	r3, [pc, #480]	@ (8003f34 <low_level_init+0x2a8>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	789a      	ldrb	r2, [r3, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003d5e:	4b75      	ldr	r3, [pc, #468]	@ (8003f34 <low_level_init+0x2a8>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	78da      	ldrb	r2, [r3, #3]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003d6a:	4b72      	ldr	r3, [pc, #456]	@ (8003f34 <low_level_init+0x2a8>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	791a      	ldrb	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003d76:	4b6f      	ldr	r3, [pc, #444]	@ (8003f34 <low_level_init+0x2a8>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	795a      	ldrb	r2, [r3, #5]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003d88:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003d90:	f043 030a 	orr.w	r3, r3, #10
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da0:	2300      	movs	r3, #0
 8003da2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8003da4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fd9c 	bl	80048e8 <osSemaphoreCreate>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a66      	ldr	r2, [pc, #408]	@ (8003f4c <low_level_init+0x2c0>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8003db6:	2300      	movs	r3, #0
 8003db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dba:	2300      	movs	r3, #0
 8003dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8003dbe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fd8f 	bl	80048e8 <osSemaphoreCreate>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4a60      	ldr	r2, [pc, #384]	@ (8003f50 <low_level_init+0x2c4>)
 8003dce:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8003dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8003f4c <low_level_init+0x2c0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fdb8 	bl	800494c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8003ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8003f50 <low_level_init+0x2c4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fdb2 	bl	800494c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003de8:	4b5a      	ldr	r3, [pc, #360]	@ (8003f54 <low_level_init+0x2c8>)
 8003dea:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003dee:	461d      	mov	r5, r3
 8003df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003df8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fc67 	bl	80046d6 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003e08:	4953      	ldr	r1, [pc, #332]	@ (8003f58 <low_level_init+0x2cc>)
 8003e0a:	4854      	ldr	r0, [pc, #336]	@ (8003f5c <low_level_init+0x2d0>)
 8003e0c:	f7fc ff65 	bl	8000cda <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003e10:	4852      	ldr	r0, [pc, #328]	@ (8003f5c <low_level_init+0x2d0>)
 8003e12:	f7fc ff94 	bl	8000d3e <LAN8742_Init>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d006      	beq.n	8003e2a <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f007 f88d 	bl	800af3c <netif_set_link_down>
    netif_set_down(netif);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f007 f824 	bl	800ae70 <netif_set_down>
 8003e28:	e081      	b.n	8003f2e <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003e2a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d165      	bne.n	8003efe <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003e32:	484a      	ldr	r0, [pc, #296]	@ (8003f5c <low_level_init+0x2d0>)
 8003e34:	f7fc ffd0 	bl	8000dd8 <LAN8742_GetLinkState>
 8003e38:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	dc06      	bgt.n	8003e52 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f007 f879 	bl	800af3c <netif_set_link_down>
      netif_set_down(netif);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f007 f810 	bl	800ae70 <netif_set_down>
 8003e50:	e057      	b.n	8003f02 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8003e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e56:	3b02      	subs	r3, #2
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d82b      	bhi.n	8003eb4 <low_level_init+0x228>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <low_level_init+0x1d8>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e75 	.word	0x08003e75
 8003e68:	08003e87 	.word	0x08003e87
 8003e6c:	08003e97 	.word	0x08003e97
 8003e70:	08003ea7 	.word	0x08003ea7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003e74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003e7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e84:	e01f      	b.n	8003ec6 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003e8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e94:	e017      	b.n	8003ec6 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003e96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003ea4:	e00f      	b.n	8003ec6 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003eb2:	e008      	b.n	8003ec6 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8003eb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003ebc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003ec4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003ec6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4819      	ldr	r0, [pc, #100]	@ (8003f34 <low_level_init+0x2a8>)
 8003ece:	f7fd fe31 	bl	8001b34 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003ed2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ed6:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8003ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003edc:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003ede:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4813      	ldr	r0, [pc, #76]	@ (8003f34 <low_level_init+0x2a8>)
 8003ee6:	f7fd ff1c 	bl	8001d22 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8003eea:	4812      	ldr	r0, [pc, #72]	@ (8003f34 <low_level_init+0x2a8>)
 8003eec:	f7fd f9d4 	bl	8001298 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f006 ff51 	bl	800ad98 <netif_set_up>
    netif_set_link_up(netif);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f006 ffec 	bl	800aed4 <netif_set_link_up>
 8003efc:	e001      	b.n	8003f02 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8003efe:	f7fc fd0f 	bl	8000920 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8003f02:	f7fd f841 	bl	8000f88 <HAL_GetREVID>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0c:	d10f      	bne.n	8003f2e <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <low_level_init+0x2d4>)
 8003f10:	f107 040c 	add.w	r4, r7, #12
 8003f14:	461d      	mov	r5, r3
 8003f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8003f22:	f107 030c 	add.w	r3, r7, #12
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fbd4 	bl	80046d6 <osThreadCreate>
  }
}
 8003f2e:	37d0      	adds	r7, #208	@ 0xd0
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bdb0      	pop	{r4, r5, r7, pc}
 8003f34:	20004ec0 	.word	0x20004ec0
 8003f38:	40028000 	.word	0x40028000
 8003f3c:	2000012c 	.word	0x2000012c
 8003f40:	2000008c 	.word	0x2000008c
 8003f44:	20004f70 	.word	0x20004f70
 8003f48:	08019684 	.word	0x08019684
 8003f4c:	20004eb8 	.word	0x20004eb8
 8003f50:	20004ebc 	.word	0x20004ebc
 8003f54:	080160f8 	.word	0x080160f8
 8003f58:	2000000c 	.word	0x2000000c
 8003f5c:	20004fa8 	.word	0x20004fa8
 8003f60:	08016124 	.word	0x08016124

08003f64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b092      	sub	sp, #72	@ 0x48
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	2230      	movs	r2, #48	@ 0x30
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f011 f95a 	bl	801523e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	2230      	movs	r2, #48	@ 0x30
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f011 f953 	bl	801523e <memset>

  for(q = p; q != NULL; q = q->next)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9c:	e045      	b.n	800402a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d902      	bls.n	8003faa <low_level_output+0x46>
      return ERR_IF;
 8003fa4:	f06f 030b 	mvn.w	r3, #11
 8003fa8:	e07f      	b.n	80040aa <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8003faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fac:	6859      	ldr	r1, [r3, #4]
 8003fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	3348      	adds	r3, #72	@ 0x48
 8003fba:	443b      	add	r3, r7
 8003fbc:	3b3c      	subs	r3, #60	@ 0x3c
 8003fbe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc2:	895b      	ldrh	r3, [r3, #10]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	3348      	adds	r3, #72	@ 0x48
 8003fd2:	443b      	add	r3, r7
 8003fd4:	3b38      	subs	r3, #56	@ 0x38
 8003fd6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	f107 000c 	add.w	r0, r7, #12
 8003fe6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fe8:	460b      	mov	r3, r1
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	440b      	add	r3, r1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	18c1      	adds	r1, r0, r3
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	3348      	adds	r3, #72	@ 0x48
 8003ffc:	443b      	add	r3, r7
 8003ffe:	3b34      	subs	r3, #52	@ 0x34
 8004000:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800400a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	3348      	adds	r3, #72	@ 0x48
 8004016:	443b      	add	r3, r7
 8004018:	3b34      	subs	r3, #52	@ 0x34
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800401e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004020:	3301      	adds	r3, #1
 8004022:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	643b      	str	r3, [r7, #64]	@ 0x40
 800402a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1b6      	bne.n	8003f9e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	891b      	ldrh	r3, [r3, #8]
 8004034:	461a      	mov	r2, r3
 8004036:	4b1f      	ldr	r3, [pc, #124]	@ (80040b4 <low_level_output+0x150>)
 8004038:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800403a:	4a1e      	ldr	r2, [pc, #120]	@ (80040b4 <low_level_output+0x150>)
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004042:	4a1c      	ldr	r2, [pc, #112]	@ (80040b4 <low_level_output+0x150>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004048:	6838      	ldr	r0, [r7, #0]
 800404a:	f007 fbfb 	bl	800b844 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800404e:	4919      	ldr	r1, [pc, #100]	@ (80040b4 <low_level_output+0x150>)
 8004050:	4819      	ldr	r0, [pc, #100]	@ (80040b8 <low_level_output+0x154>)
 8004052:	f7fd fa11 	bl	8001478 <HAL_ETH_Transmit_IT>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d103      	bne.n	8004064 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004062:	e01b      	b.n	800409c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004064:	4814      	ldr	r0, [pc, #80]	@ (80040b8 <low_level_output+0x154>)
 8004066:	f7fd feb9 	bl	8001ddc <HAL_ETH_GetError>
 800406a:	4603      	mov	r3, r0
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00d      	beq.n	8004090 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8004074:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <low_level_output+0x158>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fc65 	bl	800494c <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8004082:	480d      	ldr	r0, [pc, #52]	@ (80040b8 <low_level_output+0x154>)
 8004084:	f7fd fb98 	bl	80017b8 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8004088:	23fe      	movs	r3, #254	@ 0xfe
 800408a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800408e:	e005      	b.n	800409c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8004090:	6838      	ldr	r0, [r7, #0]
 8004092:	f007 fb31 	bl	800b6f8 <pbuf_free>
        errval =  ERR_IF;
 8004096:	23f4      	movs	r3, #244	@ 0xf4
 8004098:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800409c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80040a0:	f113 0f02 	cmn.w	r3, #2
 80040a4:	d0d3      	beq.n	800404e <low_level_output+0xea>

  return errval;
 80040a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3748      	adds	r7, #72	@ 0x48
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20004f70 	.word	0x20004f70
 80040b8:	20004ec0 	.word	0x20004ec0
 80040bc:	20004ebc 	.word	0x20004ebc

080040c0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80040cc:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <low_level_input+0x2c>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	4619      	mov	r1, r3
 80040da:	4805      	ldr	r0, [pc, #20]	@ (80040f0 <low_level_input+0x30>)
 80040dc:	f7fd fa28 	bl	8001530 <HAL_ETH_ReadData>
  }

  return p;
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20004eb4 	.word	0x20004eb4
 80040f0:	20004ec0 	.word	0x20004ec0

080040f4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004104:	4b0f      	ldr	r3, [pc, #60]	@ (8004144 <ethernetif_input+0x50>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f04f 31ff 	mov.w	r1, #4294967295
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fc1d 	bl	800494c <osSemaphoreWait>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f5      	bne.n	8004104 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004118:	68b8      	ldr	r0, [r7, #8]
 800411a:	f7ff ffd1 	bl	80040c0 <low_level_input>
 800411e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	4798      	blx	r3
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f007 fade 	bl	800b6f8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ea      	bne.n	8004118 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004142:	e7df      	b.n	8004104 <ethernetif_input+0x10>
 8004144:	20004eb8 	.word	0x20004eb8

08004148 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <ethernetif_init+0x1c>
 8004156:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <ethernetif_init+0x48>)
 8004158:	f240 2217 	movw	r2, #535	@ 0x217
 800415c:	490d      	ldr	r1, [pc, #52]	@ (8004194 <ethernetif_init+0x4c>)
 800415e:	480e      	ldr	r0, [pc, #56]	@ (8004198 <ethernetif_init+0x50>)
 8004160:	f011 f808 	bl	8015174 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2273      	movs	r2, #115	@ 0x73
 8004168:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2274      	movs	r2, #116	@ 0x74
 8004170:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a09      	ldr	r2, [pc, #36]	@ (800419c <ethernetif_init+0x54>)
 8004178:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a08      	ldr	r2, [pc, #32]	@ (80041a0 <ethernetif_init+0x58>)
 800417e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fd83 	bl	8003c8c <low_level_init>

  return ERR_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	08016140 	.word	0x08016140
 8004194:	0801615c 	.word	0x0801615c
 8004198:	0801616c 	.word	0x0801616c
 800419c:	08012ebd 	.word	0x08012ebd
 80041a0:	08003f65 	.word	0x08003f65

080041a4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80041b0:	68f9      	ldr	r1, [r7, #12]
 80041b2:	4809      	ldr	r0, [pc, #36]	@ (80041d8 <pbuf_free_custom+0x34>)
 80041b4:	f006 fbd8 	bl	800a968 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80041b8:	4b08      	ldr	r3, [pc, #32]	@ (80041dc <pbuf_free_custom+0x38>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d107      	bne.n	80041d0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80041c0:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <pbuf_free_custom+0x38>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80041c6:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <pbuf_free_custom+0x3c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fc0c 	bl	80049e8 <osSemaphoreRelease>
  }
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	08019684 	.word	0x08019684
 80041dc:	20004eb4 	.word	0x20004eb4
 80041e0:	20004eb8 	.word	0x20004eb8

080041e4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80041e8:	f7fc fe9e 	bl	8000f28 <HAL_GetTick>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	@ 0x38
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a44      	ldr	r2, [pc, #272]	@ (8004324 <HAL_ETH_MspInit+0x130>)
 8004212:	4293      	cmp	r3, r2
 8004214:	f040 8081 	bne.w	800431a <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004218:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	4a42      	ldr	r2, [pc, #264]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800421e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004222:	6313      	str	r3, [r2, #48]	@ 0x30
 8004224:	4b40      	ldr	r3, [pc, #256]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422c:	623b      	str	r3, [r7, #32]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	4b3d      	ldr	r3, [pc, #244]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	4a3c      	ldr	r2, [pc, #240]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004236:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800423a:	6313      	str	r3, [r2, #48]	@ 0x30
 800423c:	4b3a      	ldr	r3, [pc, #232]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4b37      	ldr	r3, [pc, #220]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	4a36      	ldr	r2, [pc, #216]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800424e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004252:	6313      	str	r3, [r2, #48]	@ 0x30
 8004254:	4b34      	ldr	r3, [pc, #208]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004260:	4b31      	ldr	r3, [pc, #196]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	4a30      	ldr	r2, [pc, #192]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800426a:	6313      	str	r3, [r2, #48]	@ 0x30
 800426c:	4b2e      	ldr	r3, [pc, #184]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004278:	4b2b      	ldr	r3, [pc, #172]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	4a2a      	ldr	r2, [pc, #168]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	6313      	str	r3, [r2, #48]	@ 0x30
 8004284:	4b28      	ldr	r3, [pc, #160]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004290:	4b25      	ldr	r3, [pc, #148]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004294:	4a24      	ldr	r2, [pc, #144]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6313      	str	r3, [r2, #48]	@ 0x30
 800429c:	4b22      	ldr	r3, [pc, #136]	@ (8004328 <HAL_ETH_MspInit+0x134>)
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 80042a8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b6:	2303      	movs	r3, #3
 80042b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042ba:	230b      	movs	r3, #11
 80042bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042c2:	4619      	mov	r1, r3
 80042c4:	4819      	ldr	r0, [pc, #100]	@ (800432c <HAL_ETH_MspInit+0x138>)
 80042c6:	f7fe f9c3 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80042ca:	2332      	movs	r3, #50	@ 0x32
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ce:	2302      	movs	r3, #2
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d6:	2303      	movs	r3, #3
 80042d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042da:	230b      	movs	r3, #11
 80042dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042e2:	4619      	mov	r1, r3
 80042e4:	4812      	ldr	r0, [pc, #72]	@ (8004330 <HAL_ETH_MspInit+0x13c>)
 80042e6:	f7fe f9b3 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80042ea:	2386      	movs	r3, #134	@ 0x86
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ee:	2302      	movs	r3, #2
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f6:	2303      	movs	r3, #3
 80042f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042fa:	230b      	movs	r3, #11
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004302:	4619      	mov	r1, r3
 8004304:	480b      	ldr	r0, [pc, #44]	@ (8004334 <HAL_ETH_MspInit+0x140>)
 8004306:	f7fe f9a3 	bl	8002650 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800430a:	2200      	movs	r2, #0
 800430c:	2105      	movs	r1, #5
 800430e:	203d      	movs	r0, #61	@ 0x3d
 8004310:	f7fc fefe 	bl	8001110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004314:	203d      	movs	r0, #61	@ 0x3d
 8004316:	f7fc ff17 	bl	8001148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800431a:	bf00      	nop
 800431c:	3738      	adds	r7, #56	@ 0x38
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40028000 	.word	0x40028000
 8004328:	40023800 	.word	0x40023800
 800432c:	40021800 	.word	0x40021800
 8004330:	40020800 	.word	0x40020800
 8004334:	40020000 	.word	0x40020000

08004338 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800433c:	4802      	ldr	r0, [pc, #8]	@ (8004348 <ETH_PHY_IO_Init+0x10>)
 800433e:	f7fd fd0b 	bl	8001d58 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20004ec0 	.word	0x20004ec0

0800434c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return 0;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	4807      	ldr	r0, [pc, #28]	@ (800438c <ETH_PHY_IO_ReadReg+0x30>)
 8004370:	f7fd fb4c 	bl	8001a0c <HAL_ETH_ReadPHYRegister>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e000      	b.n	8004382 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20004ec0 	.word	0x20004ec0

08004390 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	4807      	ldr	r0, [pc, #28]	@ (80043c0 <ETH_PHY_IO_WriteReg+0x30>)
 80043a4:	f7fd fb7d 	bl	8001aa2 <HAL_ETH_WritePHYRegister>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	e000      	b.n	80043b6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20004ec0 	.word	0x20004ec0

080043c4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80043c8:	f7fc fdae 	bl	8000f28 <HAL_GetTick>
 80043cc:	4603      	mov	r3, r0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b0a0      	sub	sp, #128	@ 0x80
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80043dc:	f107 0308 	add.w	r3, r7, #8
 80043e0:	2264      	movs	r2, #100	@ 0x64
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f010 ff2a 	bl	801523e <memset>
  int32_t PHYLinkState = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043f2:	2300      	movs	r3, #0
 80043f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043f6:	2300      	movs	r3, #0
 80043f8:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80043fe:	483a      	ldr	r0, [pc, #232]	@ (80044e8 <ethernet_link_thread+0x114>)
 8004400:	f7fc fcea 	bl	8000dd8 <LAN8742_GetLinkState>
 8004404:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004408:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00c      	beq.n	8004432 <ethernet_link_thread+0x5e>
 8004418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800441a:	2b01      	cmp	r3, #1
 800441c:	dc09      	bgt.n	8004432 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800441e:	4833      	ldr	r0, [pc, #204]	@ (80044ec <ethernet_link_thread+0x118>)
 8004420:	f7fc ffaa 	bl	8001378 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004424:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004426:	f006 fd23 	bl	800ae70 <netif_set_down>
    netif_set_link_down(netif);
 800442a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800442c:	f006 fd86 	bl	800af3c <netif_set_link_down>
 8004430:	e055      	b.n	80044de <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004434:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d14e      	bne.n	80044de <ethernet_link_thread+0x10a>
 8004440:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004442:	2b01      	cmp	r3, #1
 8004444:	dd4b      	ble.n	80044de <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004446:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004448:	3b02      	subs	r3, #2
 800444a:	2b03      	cmp	r3, #3
 800444c:	d82a      	bhi.n	80044a4 <ethernet_link_thread+0xd0>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <ethernet_link_thread+0x80>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004465 	.word	0x08004465
 8004458:	08004477 	.word	0x08004477
 800445c:	08004487 	.word	0x08004487
 8004460:	08004497 	.word	0x08004497
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004464:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004468:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800446a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800446e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004470:	2301      	movs	r3, #1
 8004472:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004474:	e017      	b.n	80044a6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004476:	2300      	movs	r3, #0
 8004478:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800447a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800447e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004480:	2301      	movs	r3, #1
 8004482:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004484:	e00f      	b.n	80044a6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004486:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800448a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800448c:	2300      	movs	r3, #0
 800448e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004490:	2301      	movs	r3, #1
 8004492:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004494:	e007      	b.n	80044a6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004496:	2300      	movs	r3, #0
 8004498:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800449a:	2300      	movs	r3, #0
 800449c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80044a2:	e000      	b.n	80044a6 <ethernet_link_thread+0xd2>
    default:
      break;
 80044a4:	bf00      	nop
    }

    if(linkchanged)
 80044a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d018      	beq.n	80044de <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	4619      	mov	r1, r3
 80044b2:	480e      	ldr	r0, [pc, #56]	@ (80044ec <ethernet_link_thread+0x118>)
 80044b4:	f7fd fb3e 	bl	8001b34 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80044b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ba:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80044bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044be:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80044c0:	f107 0308 	add.w	r3, r7, #8
 80044c4:	4619      	mov	r1, r3
 80044c6:	4809      	ldr	r0, [pc, #36]	@ (80044ec <ethernet_link_thread+0x118>)
 80044c8:	f7fd fc2b 	bl	8001d22 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80044cc:	4807      	ldr	r0, [pc, #28]	@ (80044ec <ethernet_link_thread+0x118>)
 80044ce:	f7fc fee3 	bl	8001298 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80044d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044d4:	f006 fc60 	bl	800ad98 <netif_set_up>
      netif_set_link_up(netif);
 80044d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044da:	f006 fcfb 	bl	800aed4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80044de:	2064      	movs	r0, #100	@ 0x64
 80044e0:	f000 f951 	bl	8004786 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80044e4:	e78b      	b.n	80043fe <ethernet_link_thread+0x2a>
 80044e6:	bf00      	nop
 80044e8:	20004fa8 	.word	0x20004fa8
 80044ec:	20004ec0 	.word	0x20004ec0

080044f0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80044f8:	4812      	ldr	r0, [pc, #72]	@ (8004544 <HAL_ETH_RxAllocateCallback+0x54>)
 80044fa:	f006 f9c1 	bl	800a880 <memp_malloc_pool>
 80044fe:	60f8      	str	r0, [r7, #12]
  if (p)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d014      	beq.n	8004530 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f103 0220 	add.w	r2, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4a0d      	ldr	r2, [pc, #52]	@ (8004548 <HAL_ETH_RxAllocateCallback+0x58>)
 8004514:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800451e:	9201      	str	r2, [sp, #4]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2241      	movs	r2, #65	@ 0x41
 8004526:	2100      	movs	r1, #0
 8004528:	2000      	movs	r0, #0
 800452a:	f006 ff2b 	bl	800b384 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800452e:	e005      	b.n	800453c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004530:	4b06      	ldr	r3, [pc, #24]	@ (800454c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	08019684 	.word	0x08019684
 8004548:	080041a5 	.word	0x080041a5
 800454c:	20004eb4 	.word	0x20004eb4

08004550 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3b20      	subs	r3, #32
 800456e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	2200      	movs	r2, #0
 800457a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	887a      	ldrh	r2, [r7, #2]
 8004580:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e003      	b.n	800459a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e009      	b.n	80045bc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	891a      	ldrh	r2, [r3, #8]
 80045ac:	887b      	ldrh	r3, [r7, #2]
 80045ae:	4413      	add	r3, r2
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f2      	bne.n	80045a8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80045c2:	887b      	ldrh	r3, [r7, #2]
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff fafc 	bl	8003bc4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80045cc:	bf00      	nop
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f007 f88b 	bl	800b6f8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 80045f4:	4b15      	ldr	r3, [pc, #84]	@ (800464c <RMII_Thread+0x60>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8004600:	2000      	movs	r0, #0
 8004602:	f000 f8b4 	bl	800476e <osThreadTerminate>
 8004606:	e7f5      	b.n	80045f4 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8004608:	4b10      	ldr	r3, [pc, #64]	@ (800464c <RMII_Thread+0x60>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8004610:	2b0a      	cmp	r3, #10
 8004612:	d916      	bls.n	8004642 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <RMII_Thread+0x64>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a0d      	ldr	r2, [pc, #52]	@ (8004650 <RMII_Thread+0x64>)
 800461a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800461e:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <RMII_Thread+0x64>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <RMII_Thread+0x64>)
 8004626:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800462a:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 800462c:	4b07      	ldr	r3, [pc, #28]	@ (800464c <RMII_Thread+0x60>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004634:	4b05      	ldr	r3, [pc, #20]	@ (800464c <RMII_Thread+0x60>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004640:	e7d8      	b.n	80045f4 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8004642:	20c8      	movs	r0, #200	@ 0xc8
 8004644:	f000 f89f 	bl	8004786 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8004648:	e7d4      	b.n	80045f4 <RMII_Thread+0x8>
 800464a:	bf00      	nop
 800464c:	20004ec0 	.word	0x20004ec0
 8004650:	40013800 	.word	0x40013800

08004654 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004666:	2b84      	cmp	r3, #132	@ 0x84
 8004668:	d005      	beq.n	8004676 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800466a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	3303      	adds	r3, #3
 8004674:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004676:	68fb      	ldr	r3, [r7, #12]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468a:	f3ef 8305 	mrs	r3, IPSR
 800468e:	607b      	str	r3, [r7, #4]
  return(result);
 8004690:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004692:	2b00      	cmp	r3, #0
 8004694:	bf14      	ite	ne
 8004696:	2301      	movne	r3, #1
 8004698:	2300      	moveq	r3, #0
 800469a:	b2db      	uxtb	r3, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80046ac:	f001 fe4c 	bl	8006348 <vTaskStartScheduler>
  
  return osOK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80046ba:	f7ff ffe3 	bl	8004684 <inHandlerMode>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80046c4:	f001 ff6c 	bl	80065a0 <xTaskGetTickCountFromISR>
 80046c8:	4603      	mov	r3, r0
 80046ca:	e002      	b.n	80046d2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80046cc:	f001 ff58 	bl	8006580 <xTaskGetTickCount>
 80046d0:	4603      	mov	r3, r0
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d8:	b089      	sub	sp, #36	@ 0x24
 80046da:	af04      	add	r7, sp, #16
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d020      	beq.n	800472a <osThreadCreate+0x54>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01c      	beq.n	800472a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685c      	ldr	r4, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691e      	ldr	r6, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ffa6 	bl	8004654 <makeFreeRtosPriority>
 8004708:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004712:	9202      	str	r2, [sp, #8]
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	9100      	str	r1, [sp, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	4632      	mov	r2, r6
 800471c:	4629      	mov	r1, r5
 800471e:	4620      	mov	r0, r4
 8004720:	f001 fb90 	bl	8005e44 <xTaskCreateStatic>
 8004724:	4603      	mov	r3, r0
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e01c      	b.n	8004764 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685c      	ldr	r4, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004736:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ff88 	bl	8004654 <makeFreeRtosPriority>
 8004744:	4602      	mov	r2, r0
 8004746:	f107 030c 	add.w	r3, r7, #12
 800474a:	9301      	str	r3, [sp, #4]
 800474c:	9200      	str	r2, [sp, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4632      	mov	r2, r6
 8004752:	4629      	mov	r1, r5
 8004754:	4620      	mov	r0, r4
 8004756:	f001 fbdb 	bl	8005f10 <xTaskCreate>
 800475a:	4603      	mov	r3, r0
 800475c:	2b01      	cmp	r3, #1
 800475e:	d001      	beq.n	8004764 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	e000      	b.n	8004766 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800476e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 fd1c 	bl	80061b4 <vTaskDelete>
  return osOK;
 800477c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <osDelay+0x16>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	e000      	b.n	800479e <osDelay+0x18>
 800479c:	2301      	movs	r3, #1
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 fd9a 	bl	80062d8 <vTaskDelay>
  
  return osOK;
 80047a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4619      	mov	r1, r3
 80047c4:	2001      	movs	r0, #1
 80047c6:	f000 fc9a 	bl	80050fe <xQueueCreateMutexStatic>
 80047ca:	4603      	mov	r3, r0
 80047cc:	e003      	b.n	80047d6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80047ce:	2001      	movs	r0, #1
 80047d0:	f000 fc7d 	bl	80050ce <xQueueCreateMutex>
 80047d4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <osMutexWait+0x18>
    return osErrorParameter;
 80047f4:	2380      	movs	r3, #128	@ 0x80
 80047f6:	e03a      	b.n	800486e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d103      	bne.n	800480c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004804:	f04f 33ff 	mov.w	r3, #4294967295
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e009      	b.n	8004820 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d006      	beq.n	8004820 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <osMutexWait+0x40>
      ticks = 1;
 800481c:	2301      	movs	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004820:	f7ff ff30 	bl	8004684 <inHandlerMode>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d017      	beq.n	800485a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	461a      	mov	r2, r3
 8004830:	2100      	movs	r1, #0
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 f8c4 	bl	80059c0 <xQueueReceiveFromISR>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <osMutexWait+0x62>
      return osErrorOS;
 800483e:	23ff      	movs	r3, #255	@ 0xff
 8004840:	e015      	b.n	800486e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d011      	beq.n	800486c <osMutexWait+0x8c>
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <osMutexWait+0x98>)
 800484a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	e008      	b.n	800486c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800485a:	68f9      	ldr	r1, [r7, #12]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 ff97 	bl	8005790 <xQueueSemaphoreTake>
 8004862:	4603      	mov	r3, r0
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <osMutexWait+0x8c>
    return osErrorOS;
 8004868:	23ff      	movs	r3, #255	@ 0xff
 800486a:	e000      	b.n	800486e <osMutexWait+0x8e>
  }
  
  return osOK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800488c:	f7ff fefa 	bl	8004684 <inHandlerMode>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004896:	f107 0308 	add.w	r3, r7, #8
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fdf6 	bl	800548e <xQueueGiveFromISR>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d001      	beq.n	80048ac <osMutexRelease+0x30>
      return osErrorOS;
 80048a8:	23ff      	movs	r3, #255	@ 0xff
 80048aa:	e017      	b.n	80048dc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d013      	beq.n	80048da <osMutexRelease+0x5e>
 80048b2:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <osMutexRelease+0x68>)
 80048b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	e00a      	b.n	80048da <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80048c4:	2300      	movs	r3, #0
 80048c6:	2200      	movs	r2, #0
 80048c8:	2100      	movs	r1, #0
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fc32 	bl	8005134 <xQueueGenericSend>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80048d6:	23ff      	movs	r3, #255	@ 0xff
 80048d8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00f      	beq.n	800491a <osSemaphoreCreate+0x32>
    if (count == 1) {
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10a      	bne.n	8004916 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2203      	movs	r2, #3
 8004906:	9200      	str	r2, [sp, #0]
 8004908:	2200      	movs	r2, #0
 800490a:	2100      	movs	r1, #0
 800490c:	2001      	movs	r0, #1
 800490e:	f000 fadb 	bl	8004ec8 <xQueueGenericCreateStatic>
 8004912:	4603      	mov	r3, r0
 8004914:	e016      	b.n	8004944 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	e014      	b.n	8004944 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d110      	bne.n	8004942 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004920:	2203      	movs	r2, #3
 8004922:	2100      	movs	r1, #0
 8004924:	2001      	movs	r0, #1
 8004926:	f000 fb56 	bl	8004fd6 <xQueueGenericCreate>
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <osSemaphoreCreate+0x56>
 8004932:	2300      	movs	r3, #0
 8004934:	2200      	movs	r2, #0
 8004936:	2100      	movs	r1, #0
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fbfb 	bl	8005134 <xQueueGenericSend>
      return sema;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	e000      	b.n	8004944 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004942:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004960:	2380      	movs	r3, #128	@ 0x80
 8004962:	e03a      	b.n	80049da <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d103      	bne.n	8004978 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004970:	f04f 33ff 	mov.w	r3, #4294967295
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e009      	b.n	800498c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d006      	beq.n	800498c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <osSemaphoreWait+0x40>
      ticks = 1;
 8004988:	2301      	movs	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800498c:	f7ff fe7a 	bl	8004684 <inHandlerMode>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d017      	beq.n	80049c6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	461a      	mov	r2, r3
 800499c:	2100      	movs	r1, #0
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f001 f80e 	bl	80059c0 <xQueueReceiveFromISR>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <osSemaphoreWait+0x62>
      return osErrorOS;
 80049aa:	23ff      	movs	r3, #255	@ 0xff
 80049ac:	e015      	b.n	80049da <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d011      	beq.n	80049d8 <osSemaphoreWait+0x8c>
 80049b4:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <osSemaphoreWait+0x98>)
 80049b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	e008      	b.n	80049d8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fee1 	bl	8005790 <xQueueSemaphoreTake>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d001      	beq.n	80049d8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80049d4:	23ff      	movs	r3, #255	@ 0xff
 80049d6:	e000      	b.n	80049da <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80049f8:	f7ff fe44 	bl	8004684 <inHandlerMode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fd40 	bl	800548e <xQueueGiveFromISR>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d001      	beq.n	8004a18 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004a14:	23ff      	movs	r3, #255	@ 0xff
 8004a16:	e017      	b.n	8004a48 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d013      	beq.n	8004a46 <osSemaphoreRelease+0x5e>
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <osSemaphoreRelease+0x68>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	e00a      	b.n	8004a46 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004a30:	2300      	movs	r3, #0
 8004a32:	2200      	movs	r2, #0
 8004a34:	2100      	movs	r1, #0
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fb7c 	bl	8005134 <xQueueGenericSend>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d001      	beq.n	8004a46 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004a42:	23ff      	movs	r3, #255	@ 0xff
 8004a44:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004a5c:	f7ff fe12 	bl	8004684 <inHandlerMode>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004a66:	2382      	movs	r3, #130	@ 0x82
 8004a68:	e003      	b.n	8004a72 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f001 f872 	bl	8005b54 <vQueueDelete>

  return osOK; 
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004a7a:	b590      	push	{r4, r7, lr}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af02      	add	r7, sp, #8
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <osMessageCreate+0x36>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00d      	beq.n	8004ab0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2400      	movs	r4, #0
 8004aa6:	9400      	str	r4, [sp, #0]
 8004aa8:	f000 fa0e 	bl	8004ec8 <xQueueGenericCreateStatic>
 8004aac:	4603      	mov	r3, r0
 8004aae:	e008      	b.n	8004ac2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4619      	mov	r1, r3
 8004abc:	f000 fa8b 	bl	8004fd6 <xQueueGenericCreate>
 8004ac0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd90      	pop	{r4, r7, pc}
	...

08004acc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <osMessagePut+0x1e>
    ticks = 1;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004aea:	f7ff fdcb 	bl	8004684 <inHandlerMode>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d018      	beq.n	8004b26 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004af4:	f107 0210 	add.w	r2, r7, #16
 8004af8:	f107 0108 	add.w	r1, r7, #8
 8004afc:	2300      	movs	r3, #0
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fc22 	bl	8005348 <xQueueGenericSendFromISR>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <osMessagePut+0x42>
      return osErrorOS;
 8004b0a:	23ff      	movs	r3, #255	@ 0xff
 8004b0c:	e018      	b.n	8004b40 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d014      	beq.n	8004b3e <osMessagePut+0x72>
 8004b14:	4b0c      	ldr	r3, [pc, #48]	@ (8004b48 <osMessagePut+0x7c>)
 8004b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	e00b      	b.n	8004b3e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004b26:	f107 0108 	add.w	r1, r7, #8
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fb00 	bl	8005134 <xQueueGenericSend>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <osMessagePut+0x72>
      return osErrorOS;
 8004b3a:	23ff      	movs	r3, #255	@ 0xff
 8004b3c:	e000      	b.n	8004b40 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b08b      	sub	sp, #44	@ 0x2c
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004b66:	2380      	movs	r3, #128	@ 0x80
 8004b68:	617b      	str	r3, [r7, #20]
    return event;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	461c      	mov	r4, r3
 8004b6e:	f107 0314 	add.w	r3, r7, #20
 8004b72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b7a:	e054      	b.n	8004c26 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d103      	bne.n	8004b94 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b92:	e009      	b.n	8004ba8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <osMessageGet+0x5c>
      ticks = 1;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004ba8:	f7ff fd6c 	bl	8004684 <inHandlerMode>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01c      	beq.n	8004bec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004bb2:	f107 0220 	add.w	r2, r7, #32
 8004bb6:	f107 0314 	add.w	r3, r7, #20
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	68b8      	ldr	r0, [r7, #8]
 8004bc0:	f000 fefe 	bl	80059c0 <xQueueReceiveFromISR>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d102      	bne.n	8004bd0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004bca:	2310      	movs	r3, #16
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e001      	b.n	8004bd4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01d      	beq.n	8004c16 <osMessageGet+0xca>
 8004bda:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <osMessageGet+0xe4>)
 8004bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	e014      	b.n	8004c16 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	68b8      	ldr	r0, [r7, #8]
 8004bf8:	f000 fce2 	bl	80055c0 <xQueueReceive>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d102      	bne.n	8004c08 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004c02:	2310      	movs	r3, #16
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e006      	b.n	8004c16 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <osMessageGet+0xc6>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e000      	b.n	8004c14 <osMessageGet+0xc8>
 8004c12:	2340      	movs	r3, #64	@ 0x40
 8004c14:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	461c      	mov	r4, r3
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	372c      	adds	r7, #44	@ 0x2c
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004c3c:	f7ff fd22 	bl	8004684 <inHandlerMode>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 ff63 	bl	8005b12 <uxQueueMessagesWaitingFromISR>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	e003      	b.n	8004c58 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 ff3d 	bl	8005ad0 <uxQueueMessagesWaiting>
 8004c56:	4603      	mov	r3, r0
  }
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004c68:	f7ff fd0c 	bl	8004684 <inHandlerMode>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <osMessageDelete+0x16>
    return osErrorISR;
 8004c72:	2382      	movs	r3, #130	@ 0x82
 8004c74:	e003      	b.n	8004c7e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 ff6c 	bl	8005b54 <vQueueDelete>

  return osOK; 
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f103 0208 	add.w	r2, r3, #8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f103 0208 	add.w	r2, r3, #8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f103 0208 	add.w	r2, r3, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	601a      	str	r2, [r3, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3e:	d103      	bne.n	8004d48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e00c      	b.n	8004d62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	e002      	b.n	8004d56 <vListInsert+0x2e>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d2f6      	bcs.n	8004d50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6892      	ldr	r2, [r2, #8]
 8004db0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6852      	ldr	r2, [r2, #4]
 8004dba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d103      	bne.n	8004dce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	1e5a      	subs	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10d      	bne.n	8004e20 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	b672      	cpsid	i
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	b662      	cpsie	i
 8004e18:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004e20:	f002 fa3c 	bl	800729c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e50:	3b01      	subs	r3, #1
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	441a      	add	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	22ff      	movs	r2, #255	@ 0xff
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	22ff      	movs	r2, #255	@ 0xff
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d114      	bne.n	8004ea0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01a      	beq.n	8004eb4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3310      	adds	r3, #16
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 fce8 	bl	8006858 <xTaskRemoveFromEventList>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <xQueueGenericReset+0xd4>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	e009      	b.n	8004eb4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3310      	adds	r3, #16
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff feee 	bl	8004c86 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3324      	adds	r3, #36	@ 0x24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fee9 	bl	8004c86 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004eb4:	f002 fa28 	bl	8007308 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004eb8:	2301      	movs	r3, #1
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08e      	sub	sp, #56	@ 0x38
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10d      	bne.n	8004ef8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	b672      	cpsid	i
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	b662      	cpsie	i
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10d      	bne.n	8004f1a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	b672      	cpsid	i
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	b662      	cpsie	i
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	e7fd      	b.n	8004f16 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <xQueueGenericCreateStatic+0x5e>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <xQueueGenericCreateStatic+0x62>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <xQueueGenericCreateStatic+0x64>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	b672      	cpsid	i
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	b662      	cpsie	i
 8004f44:	623b      	str	r3, [r7, #32]
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	e7fd      	b.n	8004f48 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <xQueueGenericCreateStatic+0x90>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <xQueueGenericCreateStatic+0x94>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <xQueueGenericCreateStatic+0x96>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	b672      	cpsid	i
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	b662      	cpsie	i
 8004f76:	61fb      	str	r3, [r7, #28]
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	e7fd      	b.n	8004f7a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f7e:	2348      	movs	r3, #72	@ 0x48
 8004f80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b48      	cmp	r3, #72	@ 0x48
 8004f86:	d00d      	beq.n	8004fa4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8c:	b672      	cpsid	i
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	b662      	cpsie	i
 8004f9c:	61bb      	str	r3, [r7, #24]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fa4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f848 	bl	800505c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3730      	adds	r7, #48	@ 0x30
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b08a      	sub	sp, #40	@ 0x28
 8004fda:	af02      	add	r7, sp, #8
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <xQueueGenericCreate+0x30>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	b672      	cpsid	i
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	b662      	cpsie	i
 8004ffe:	613b      	str	r3, [r7, #16]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	e004      	b.n	800501c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3348      	adds	r3, #72	@ 0x48
 8005020:	4618      	mov	r0, r3
 8005022:	f002 fa69 	bl	80074f8 <pvPortMalloc>
 8005026:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d011      	beq.n	8005052 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3348      	adds	r3, #72	@ 0x48
 8005036:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005040:	79fa      	ldrb	r2, [r7, #7]
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f805 	bl	800505c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005052:	69bb      	ldr	r3, [r7, #24]
	}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e002      	b.n	800507e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800508a:	2101      	movs	r1, #1
 800508c:	69b8      	ldr	r0, [r7, #24]
 800508e:	f7ff feaf 	bl	8004df0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80050ba:	2300      	movs	r3, #0
 80050bc:	2200      	movs	r2, #0
 80050be:	2100      	movs	r1, #0
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f837 	bl	8005134 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	4603      	mov	r3, r0
 80050d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6939      	ldr	r1, [r7, #16]
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f7ff ff75 	bl	8004fd6 <xQueueGenericCreate>
 80050ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ffd3 	bl	800509a <prvInitialiseMutex>

		return xNewQueue;
 80050f4:	68fb      	ldr	r3, [r7, #12]
	}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b088      	sub	sp, #32
 8005102:	af02      	add	r7, sp, #8
 8005104:	4603      	mov	r3, r0
 8005106:	6039      	str	r1, [r7, #0]
 8005108:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800510a:	2301      	movs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2200      	movs	r2, #0
 800511a:	6939      	ldr	r1, [r7, #16]
 800511c:	6978      	ldr	r0, [r7, #20]
 800511e:	f7ff fed3 	bl	8004ec8 <xQueueGenericCreateStatic>
 8005122:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ffb8 	bl	800509a <prvInitialiseMutex>

		return xNewQueue;
 800512a:	68fb      	ldr	r3, [r7, #12]
	}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08e      	sub	sp, #56	@ 0x38
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005142:	2300      	movs	r3, #0
 8005144:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10d      	bne.n	800516c <xQueueGenericSend+0x38>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	b672      	cpsid	i
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	b662      	cpsie	i
 8005164:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <xQueueGenericSend+0x46>
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <xQueueGenericSend+0x4a>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <xQueueGenericSend+0x4c>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10d      	bne.n	80051a0 <xQueueGenericSend+0x6c>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	b672      	cpsid	i
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	b662      	cpsie	i
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d103      	bne.n	80051ae <xQueueGenericSend+0x7a>
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <xQueueGenericSend+0x7e>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <xQueueGenericSend+0x80>
 80051b2:	2300      	movs	r3, #0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10d      	bne.n	80051d4 <xQueueGenericSend+0xa0>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	b672      	cpsid	i
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	b662      	cpsie	i
 80051cc:	623b      	str	r3, [r7, #32]
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051d4:	f001 fd0e 	bl	8006bf4 <xTaskGetSchedulerState>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <xQueueGenericSend+0xb0>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <xQueueGenericSend+0xb4>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <xQueueGenericSend+0xb6>
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <xQueueGenericSend+0xd6>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	b672      	cpsid	i
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	b662      	cpsie	i
 8005202:	61fb      	str	r3, [r7, #28]
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	e7fd      	b.n	8005206 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800520a:	f002 f847 	bl	800729c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <xQueueGenericSend+0xec>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d129      	bne.n	8005274 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005226:	f000 fcd3 	bl	8005bd0 <prvCopyDataToQueue>
 800522a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800522c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d010      	beq.n	8005256 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	3324      	adds	r3, #36	@ 0x24
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fb0d 	bl	8006858 <xTaskRemoveFromEventList>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d013      	beq.n	800526c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005244:	4b3f      	ldr	r3, [pc, #252]	@ (8005344 <xQueueGenericSend+0x210>)
 8005246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	e00a      	b.n	800526c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800525c:	4b39      	ldr	r3, [pc, #228]	@ (8005344 <xQueueGenericSend+0x210>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800526c:	f002 f84c 	bl	8007308 <vPortExitCritical>
				return pdPASS;
 8005270:	2301      	movs	r3, #1
 8005272:	e063      	b.n	800533c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800527a:	f002 f845 	bl	8007308 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800527e:	2300      	movs	r3, #0
 8005280:	e05c      	b.n	800533c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005288:	f107 0314 	add.w	r3, r7, #20
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fb49 	bl	8006924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005292:	2301      	movs	r3, #1
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005296:	f002 f837 	bl	8007308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800529a:	f001 f8c3 	bl	8006424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800529e:	f001 fffd 	bl	800729c <vPortEnterCritical>
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052a8:	b25b      	sxtb	r3, r3
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d103      	bne.n	80052b8 <xQueueGenericSend+0x184>
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d103      	bne.n	80052ce <xQueueGenericSend+0x19a>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052ce:	f002 f81b 	bl	8007308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052d2:	1d3a      	adds	r2, r7, #4
 80052d4:	f107 0314 	add.w	r3, r7, #20
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 fb38 	bl	8006950 <xTaskCheckForTimeOut>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d124      	bne.n	8005330 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052e8:	f000 fd6a 	bl	8005dc0 <prvIsQueueFull>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d018      	beq.n	8005324 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	3310      	adds	r3, #16
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fa84 	bl	8006808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005302:	f000 fcf5 	bl	8005cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005306:	f001 f89b 	bl	8006440 <xTaskResumeAll>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	f47f af7c 	bne.w	800520a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005312:	4b0c      	ldr	r3, [pc, #48]	@ (8005344 <xQueueGenericSend+0x210>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	e772      	b.n	800520a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005326:	f000 fce3 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800532a:	f001 f889 	bl	8006440 <xTaskResumeAll>
 800532e:	e76c      	b.n	800520a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005332:	f000 fcdd 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005336:	f001 f883 	bl	8006440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800533a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800533c:	4618      	mov	r0, r3
 800533e:	3738      	adds	r7, #56	@ 0x38
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08e      	sub	sp, #56	@ 0x38
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	b672      	cpsid	i
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	b662      	cpsie	i
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d103      	bne.n	800538a <xQueueGenericSendFromISR+0x42>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <xQueueGenericSendFromISR+0x46>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <xQueueGenericSendFromISR+0x48>
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10d      	bne.n	80053b0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	b672      	cpsid	i
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	b662      	cpsie	i
 80053a8:	623b      	str	r3, [r7, #32]
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d103      	bne.n	80053be <xQueueGenericSendFromISR+0x76>
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <xQueueGenericSendFromISR+0x7a>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <xQueueGenericSendFromISR+0x7c>
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10d      	bne.n	80053e4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	b672      	cpsid	i
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	b662      	cpsie	i
 80053dc:	61fb      	str	r3, [r7, #28]
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053e4:	f002 f842 	bl	800746c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053e8:	f3ef 8211 	mrs	r2, BASEPRI
 80053ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f0:	b672      	cpsid	i
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	b662      	cpsie	i
 8005400:	61ba      	str	r2, [r7, #24]
 8005402:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005404:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005406:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <xQueueGenericSendFromISR+0xd2>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d12c      	bne.n	8005474 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800542a:	f000 fbd1 	bl	8005bd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800542e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d112      	bne.n	800545e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d016      	beq.n	800546e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	3324      	adds	r3, #36	@ 0x24
 8005444:	4618      	mov	r0, r3
 8005446:	f001 fa07 	bl	8006858 <xTaskRemoveFromEventList>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	e007      	b.n	800546e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800545e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005462:	3301      	adds	r3, #1
 8005464:	b2db      	uxtb	r3, r3
 8005466:	b25a      	sxtb	r2, r3
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800546e:	2301      	movs	r3, #1
 8005470:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005472:	e001      	b.n	8005478 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005474:	2300      	movs	r3, #0
 8005476:	637b      	str	r3, [r7, #52]	@ 0x34
 8005478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005482:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005486:	4618      	mov	r0, r3
 8005488:	3738      	adds	r7, #56	@ 0x38
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b08e      	sub	sp, #56	@ 0x38
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <xQueueGiveFromISR+0x30>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a6:	b672      	cpsid	i
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	b662      	cpsie	i
 80054b6:	623b      	str	r3, [r7, #32]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00d      	beq.n	80054e2 <xQueueGiveFromISR+0x54>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	b672      	cpsid	i
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	b662      	cpsie	i
 80054da:	61fb      	str	r3, [r7, #28]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <xQueueGiveFromISR+0x64>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <xQueueGiveFromISR+0x68>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <xQueueGiveFromISR+0x6a>
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10d      	bne.n	8005518 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005500:	b672      	cpsid	i
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	b662      	cpsie	i
 8005510:	61bb      	str	r3, [r7, #24]
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	e7fd      	b.n	8005514 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005518:	f001 ffa8 	bl	800746c <vPortValidateInterruptPriority>
	__asm volatile
 800551c:	f3ef 8211 	mrs	r2, BASEPRI
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	b672      	cpsid	i
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	b662      	cpsie	i
 8005534:	617a      	str	r2, [r7, #20]
 8005536:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005538:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005548:	429a      	cmp	r2, r3
 800554a:	d22b      	bcs.n	80055a4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800555e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d112      	bne.n	800558e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	d016      	beq.n	800559e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	3324      	adds	r3, #36	@ 0x24
 8005574:	4618      	mov	r0, r3
 8005576:	f001 f96f 	bl	8006858 <xTaskRemoveFromEventList>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00e      	beq.n	800559e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e007      	b.n	800559e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800558e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005592:	3301      	adds	r3, #1
 8005594:	b2db      	uxtb	r3, r3
 8005596:	b25a      	sxtb	r2, r3
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800559e:	2301      	movs	r3, #1
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a2:	e001      	b.n	80055a8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f383 8811 	msr	BASEPRI, r3
}
 80055b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3738      	adds	r7, #56	@ 0x38
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	@ 0x30
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10d      	bne.n	80055f6 <xQueueReceive+0x36>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	b672      	cpsid	i
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	b662      	cpsie	i
 80055ee:	623b      	str	r3, [r7, #32]
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d103      	bne.n	8005604 <xQueueReceive+0x44>
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <xQueueReceive+0x48>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <xQueueReceive+0x4a>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10d      	bne.n	800562a <xQueueReceive+0x6a>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	b672      	cpsid	i
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	b662      	cpsie	i
 8005622:	61fb      	str	r3, [r7, #28]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800562a:	f001 fae3 	bl	8006bf4 <xTaskGetSchedulerState>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <xQueueReceive+0x7a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <xQueueReceive+0x7e>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <xQueueReceive+0x80>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10d      	bne.n	8005660 <xQueueReceive+0xa0>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005648:	b672      	cpsid	i
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	b662      	cpsie	i
 8005658:	61bb      	str	r3, [r7, #24]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005660:	f001 fe1c 	bl	800729c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01f      	beq.n	80056b0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005674:	f000 fb16 	bl	8005ca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	1e5a      	subs	r2, r3, #1
 800567c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00f      	beq.n	80056a8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568a:	3310      	adds	r3, #16
 800568c:	4618      	mov	r0, r3
 800568e:	f001 f8e3 	bl	8006858 <xTaskRemoveFromEventList>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005698:	4b3c      	ldr	r3, [pc, #240]	@ (800578c <xQueueReceive+0x1cc>)
 800569a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056a8:	f001 fe2e 	bl	8007308 <vPortExitCritical>
				return pdPASS;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e069      	b.n	8005784 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056b6:	f001 fe27 	bl	8007308 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e062      	b.n	8005784 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056c4:	f107 0310 	add.w	r3, r7, #16
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 f92b 	bl	8006924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056ce:	2301      	movs	r3, #1
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056d2:	f001 fe19 	bl	8007308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056d6:	f000 fea5 	bl	8006424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056da:	f001 fddf 	bl	800729c <vPortEnterCritical>
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d103      	bne.n	80056f4 <xQueueReceive+0x134>
 80056ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056fa:	b25b      	sxtb	r3, r3
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d103      	bne.n	800570a <xQueueReceive+0x14a>
 8005702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800570a:	f001 fdfd 	bl	8007308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800570e:	1d3a      	adds	r2, r7, #4
 8005710:	f107 0310 	add.w	r3, r7, #16
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f001 f91a 	bl	8006950 <xTaskCheckForTimeOut>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d123      	bne.n	800576a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005724:	f000 fb36 	bl	8005d94 <prvIsQueueEmpty>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d017      	beq.n	800575e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	3324      	adds	r3, #36	@ 0x24
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4611      	mov	r1, r2
 8005736:	4618      	mov	r0, r3
 8005738:	f001 f866 	bl	8006808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800573c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800573e:	f000 fad7 	bl	8005cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005742:	f000 fe7d 	bl	8006440 <xTaskResumeAll>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d189      	bne.n	8005660 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800574c:	4b0f      	ldr	r3, [pc, #60]	@ (800578c <xQueueReceive+0x1cc>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	e780      	b.n	8005660 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800575e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005760:	f000 fac6 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005764:	f000 fe6c 	bl	8006440 <xTaskResumeAll>
 8005768:	e77a      	b.n	8005660 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800576a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800576c:	f000 fac0 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005770:	f000 fe66 	bl	8006440 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005776:	f000 fb0d 	bl	8005d94 <prvIsQueueEmpty>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	f43f af6f 	beq.w	8005660 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005782:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005784:	4618      	mov	r0, r3
 8005786:	3730      	adds	r7, #48	@ 0x30
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	@ 0x38
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10d      	bne.n	80057c8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	b672      	cpsid	i
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	b662      	cpsie	i
 80057c0:	623b      	str	r3, [r7, #32]
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	e7fd      	b.n	80057c4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	b672      	cpsid	i
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	b662      	cpsie	i
 80057e4:	61fb      	str	r3, [r7, #28]
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ec:	f001 fa02 	bl	8006bf4 <xTaskGetSchedulerState>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <xQueueSemaphoreTake+0x6c>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <xQueueSemaphoreTake+0x70>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <xQueueSemaphoreTake+0x72>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10d      	bne.n	8005822 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	b672      	cpsid	i
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	b662      	cpsie	i
 800581a:	61bb      	str	r3, [r7, #24]
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	e7fd      	b.n	800581e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005822:	f001 fd3b 	bl	800729c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800582c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d024      	beq.n	800587c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	1e5a      	subs	r2, r3, #1
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005842:	f001 fba1 	bl	8006f88 <pvTaskIncrementMutexHeldCount>
 8005846:	4602      	mov	r2, r0
 8005848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00f      	beq.n	8005874 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005856:	3310      	adds	r3, #16
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fffd 	bl	8006858 <xTaskRemoveFromEventList>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005864:	4b55      	ldr	r3, [pc, #340]	@ (80059bc <xQueueSemaphoreTake+0x22c>)
 8005866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005874:	f001 fd48 	bl	8007308 <vPortExitCritical>
				return pdPASS;
 8005878:	2301      	movs	r3, #1
 800587a:	e09a      	b.n	80059b2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d114      	bne.n	80058ac <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00d      	beq.n	80058a4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588c:	b672      	cpsid	i
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	b662      	cpsie	i
 800589c:	617b      	str	r3, [r7, #20]
}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058a4:	f001 fd30 	bl	8007308 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e082      	b.n	80059b2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058b2:	f107 030c 	add.w	r3, r7, #12
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 f834 	bl	8006924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058bc:	2301      	movs	r3, #1
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058c0:	f001 fd22 	bl	8007308 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058c4:	f000 fdae 	bl	8006424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058c8:	f001 fce8 	bl	800729c <vPortEnterCritical>
 80058cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058d2:	b25b      	sxtb	r3, r3
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d103      	bne.n	80058e2 <xQueueSemaphoreTake+0x152>
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058e8:	b25b      	sxtb	r3, r3
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d103      	bne.n	80058f8 <xQueueSemaphoreTake+0x168>
 80058f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f8:	f001 fd06 	bl	8007308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058fc:	463a      	mov	r2, r7
 80058fe:	f107 030c 	add.w	r3, r7, #12
 8005902:	4611      	mov	r1, r2
 8005904:	4618      	mov	r0, r3
 8005906:	f001 f823 	bl	8006950 <xTaskCheckForTimeOut>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d132      	bne.n	8005976 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005910:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005912:	f000 fa3f 	bl	8005d94 <prvIsQueueEmpty>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d026      	beq.n	800596a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005924:	f001 fcba 	bl	800729c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4618      	mov	r0, r3
 800592e:	f001 f97f 	bl	8006c30 <xTaskPriorityInherit>
 8005932:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005934:	f001 fce8 	bl	8007308 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	3324      	adds	r3, #36	@ 0x24
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	4611      	mov	r1, r2
 8005940:	4618      	mov	r0, r3
 8005942:	f000 ff61 	bl	8006808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005946:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005948:	f000 f9d2 	bl	8005cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800594c:	f000 fd78 	bl	8006440 <xTaskResumeAll>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	f47f af65 	bne.w	8005822 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005958:	4b18      	ldr	r3, [pc, #96]	@ (80059bc <xQueueSemaphoreTake+0x22c>)
 800595a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	e75b      	b.n	8005822 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800596a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800596c:	f000 f9c0 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005970:	f000 fd66 	bl	8006440 <xTaskResumeAll>
 8005974:	e755      	b.n	8005822 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005978:	f000 f9ba 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800597c:	f000 fd60 	bl	8006440 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005980:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005982:	f000 fa07 	bl	8005d94 <prvIsQueueEmpty>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	f43f af4a 	beq.w	8005822 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005994:	f001 fc82 	bl	800729c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005998:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800599a:	f000 f901 	bl	8005ba0 <prvGetDisinheritPriorityAfterTimeout>
 800599e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fa4e 	bl	8006e48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059ac:	f001 fcac 	bl	8007308 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3738      	adds	r7, #56	@ 0x38
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	@ 0x38
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10d      	bne.n	80059f2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	b672      	cpsid	i
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	b662      	cpsie	i
 80059ea:	623b      	str	r3, [r7, #32]
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	e7fd      	b.n	80059ee <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d103      	bne.n	8005a00 <xQueueReceiveFromISR+0x40>
 80059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <xQueueReceiveFromISR+0x44>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <xQueueReceiveFromISR+0x46>
 8005a04:	2300      	movs	r3, #0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10d      	bne.n	8005a26 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0e:	b672      	cpsid	i
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	b662      	cpsie	i
 8005a1e:	61fb      	str	r3, [r7, #28]
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	e7fd      	b.n	8005a22 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a26:	f001 fd21 	bl	800746c <vPortValidateInterruptPriority>
	__asm volatile
 8005a2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	b672      	cpsid	i
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	b662      	cpsie	i
 8005a42:	61ba      	str	r2, [r7, #24]
 8005a44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02f      	beq.n	8005ab6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a64:	f000 f91e 	bl	8005ca4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	1e5a      	subs	r2, r3, #1
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a70:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d112      	bne.n	8005aa0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d016      	beq.n	8005ab0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	3310      	adds	r3, #16
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fee6 	bl	8006858 <xTaskRemoveFromEventList>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00e      	beq.n	8005ab0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e007      	b.n	8005ab0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	b25a      	sxtb	r2, r3
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab4:	e001      	b.n	8005aba <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
}
 8005ac4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3738      	adds	r7, #56	@ 0x38
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10d      	bne.n	8005afa <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae2:	b672      	cpsid	i
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	b662      	cpsie	i
 8005af2:	60bb      	str	r3, [r7, #8]
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	e7fd      	b.n	8005af6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005afa:	f001 fbcf 	bl	800729c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005b04:	f001 fc00 	bl	8007308 <vPortExitCritical>

	return uxReturn;
 8005b08:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005b12:	b480      	push	{r7}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10d      	bne.n	8005b40 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	b672      	cpsid	i
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	b662      	cpsie	i
 8005b38:	60fb      	str	r3, [r7, #12]
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	e7fd      	b.n	8005b3c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005b46:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b48:	4618      	mov	r0, r3
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10d      	bne.n	8005b82 <vQueueDelete+0x2e>
	__asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6a:	b672      	cpsid	i
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	b662      	cpsie	i
 8005b7a:	60bb      	str	r3, [r7, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	e7fd      	b.n	8005b7e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f934 	bl	8005df0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f001 fd7e 	bl	8007694 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d006      	beq.n	8005bbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f1c3 0307 	rsb	r3, r3, #7
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e001      	b.n	8005bc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
	}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d14d      	bne.n	8005c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 f898 	bl	8006d30 <xTaskPriorityDisinherit>
 8005c00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	e043      	b.n	8005c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d119      	bne.n	8005c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6858      	ldr	r0, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	f00f fbed 	bl	80153fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d32b      	bcc.n	8005c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	e026      	b.n	8005c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68d8      	ldr	r0, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	f00f fbd3 	bl	80153fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	425b      	negs	r3, r3
 8005c5e:	441a      	add	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d207      	bcs.n	8005c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	425b      	negs	r3, r3
 8005c7a:	441a      	add	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d105      	bne.n	8005c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c9a:	697b      	ldr	r3, [r7, #20]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d018      	beq.n	8005ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	441a      	add	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d303      	bcc.n	8005cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68d9      	ldr	r1, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6838      	ldr	r0, [r7, #0]
 8005ce4:	f00f fb89 	bl	80153fa <memcpy>
	}
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cf8:	f001 fad0 	bl	800729c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d04:	e011      	b.n	8005d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d012      	beq.n	8005d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3324      	adds	r3, #36	@ 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fda0 	bl	8006858 <xTaskRemoveFromEventList>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d1e:	f000 fe7f 	bl	8006a20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	dce9      	bgt.n	8005d06 <prvUnlockQueue+0x16>
 8005d32:	e000      	b.n	8005d36 <prvUnlockQueue+0x46>
					break;
 8005d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	22ff      	movs	r2, #255	@ 0xff
 8005d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d3e:	f001 fae3 	bl	8007308 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d42:	f001 faab 	bl	800729c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d4e:	e011      	b.n	8005d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3310      	adds	r3, #16
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fd7b 	bl	8006858 <xTaskRemoveFromEventList>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d68:	f000 fe5a 	bl	8006a20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dce9      	bgt.n	8005d50 <prvUnlockQueue+0x60>
 8005d7c:	e000      	b.n	8005d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	22ff      	movs	r2, #255	@ 0xff
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d88:	f001 fabe 	bl	8007308 <vPortExitCritical>
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d9c:	f001 fa7e 	bl	800729c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e001      	b.n	8005db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db2:	f001 faa9 	bl	8007308 <vPortExitCritical>

	return xReturn;
 8005db6:	68fb      	ldr	r3, [r7, #12]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dc8:	f001 fa68 	bl	800729c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d102      	bne.n	8005dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e001      	b.n	8005de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005de2:	f001 fa91 	bl	8007308 <vPortExitCritical>

	return xReturn;
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e016      	b.n	8005e2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005dfe:	4a10      	ldr	r2, [pc, #64]	@ (8005e40 <vQueueUnregisterQueue+0x50>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d10b      	bne.n	8005e26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e40 <vQueueUnregisterQueue+0x50>)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2100      	movs	r1, #0
 8005e14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e18:	4a09      	ldr	r2, [pc, #36]	@ (8005e40 <vQueueUnregisterQueue+0x50>)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
				break;
 8005e24:	e006      	b.n	8005e34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b07      	cmp	r3, #7
 8005e30:	d9e5      	bls.n	8005dfe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20004fc8 	.word	0x20004fc8

08005e44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08e      	sub	sp, #56	@ 0x38
 8005e48:	af04      	add	r7, sp, #16
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <xTaskCreateStatic+0x30>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	b672      	cpsid	i
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	b662      	cpsie	i
 8005e6c:	623b      	str	r3, [r7, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	e7fd      	b.n	8005e70 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10d      	bne.n	8005e96 <xTaskCreateStatic+0x52>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	b672      	cpsid	i
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	b662      	cpsie	i
 8005e8e:	61fb      	str	r3, [r7, #28]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e96:	23a0      	movs	r3, #160	@ 0xa0
 8005e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e9e:	d00d      	beq.n	8005ebc <xTaskCreateStatic+0x78>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	b672      	cpsid	i
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	b662      	cpsie	i
 8005eb4:	61bb      	str	r3, [r7, #24]
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	e7fd      	b.n	8005eb8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ebc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01e      	beq.n	8005f02 <xTaskCreateStatic+0xbe>
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01b      	beq.n	8005f02 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ed2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005edc:	2300      	movs	r3, #0
 8005ede:	9303      	str	r3, [sp, #12]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	9302      	str	r3, [sp, #8]
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f851 	bl	8005f9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005efc:	f000 f8f0 	bl	80060e0 <prvAddNewTaskToReadyList>
 8005f00:	e001      	b.n	8005f06 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f06:	697b      	ldr	r3, [r7, #20]
	}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3728      	adds	r7, #40	@ 0x28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	@ 0x30
 8005f14:	af04      	add	r7, sp, #16
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fae7 	bl	80074f8 <pvPortMalloc>
 8005f2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f32:	20a0      	movs	r0, #160	@ 0xa0
 8005f34:	f001 fae0 	bl	80074f8 <pvPortMalloc>
 8005f38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f46:	e005      	b.n	8005f54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f48:	6978      	ldr	r0, [r7, #20]
 8005f4a:	f001 fba3 	bl	8007694 <vPortFree>
 8005f4e:	e001      	b.n	8005f54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d017      	beq.n	8005f8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	2300      	movs	r3, #0
 8005f66:	9303      	str	r3, [sp, #12]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	9302      	str	r3, [sp, #8]
 8005f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f80f 	bl	8005f9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f7e:	69f8      	ldr	r0, [r7, #28]
 8005f80:	f000 f8ae 	bl	80060e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f84:	2301      	movs	r3, #1
 8005f86:	61bb      	str	r3, [r7, #24]
 8005f88:	e002      	b.n	8005f90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f90:	69bb      	ldr	r3, [r7, #24]
	}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005fb4:	440b      	add	r3, r1
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f023 0307 	bic.w	r3, r3, #7
 8005fc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00d      	beq.n	8005fea <prvInitialiseNewTask+0x4e>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	b672      	cpsid	i
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	b662      	cpsie	i
 8005fe2:	617b      	str	r3, [r7, #20]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01f      	beq.n	8006030 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	e012      	b.n	800601c <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	7819      	ldrb	r1, [r3, #0]
 8005ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	3334      	adds	r3, #52	@ 0x34
 8006006:	460a      	mov	r2, r1
 8006008:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d006      	beq.n	8006024 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3301      	adds	r3, #1
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d9e9      	bls.n	8005ff6 <prvInitialiseNewTask+0x5a>
 8006022:	e000      	b.n	8006026 <prvInitialiseNewTask+0x8a>
			{
				break;
 8006024:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800602e:	e003      	b.n	8006038 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	2b06      	cmp	r3, #6
 800603c:	d901      	bls.n	8006042 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800603e:	2306      	movs	r3, #6
 8006040:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006046:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800604c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	2200      	movs	r2, #0
 8006052:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	3304      	adds	r3, #4
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe fe34 	bl	8004cc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	3318      	adds	r3, #24
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fe2f 	bl	8004cc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800606c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	f1c3 0207 	rsb	r2, r3, #7
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800607c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006088:	2200      	movs	r2, #0
 800608a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	334c      	adds	r3, #76	@ 0x4c
 8006092:	224c      	movs	r2, #76	@ 0x4c
 8006094:	2100      	movs	r1, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f00f f8d1 	bl	801523e <memset>
 800609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609e:	4a0d      	ldr	r2, [pc, #52]	@ (80060d4 <prvInitialiseNewTask+0x138>)
 80060a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	4a0c      	ldr	r2, [pc, #48]	@ (80060d8 <prvInitialiseNewTask+0x13c>)
 80060a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	4a0c      	ldr	r2, [pc, #48]	@ (80060dc <prvInitialiseNewTask+0x140>)
 80060ac:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	68f9      	ldr	r1, [r7, #12]
 80060b2:	69b8      	ldr	r0, [r7, #24]
 80060b4:	f000 ffe2 	bl	800707c <pxPortInitialiseStack>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ca:	bf00      	nop
 80060cc:	3720      	adds	r7, #32
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	2000bfc4 	.word	0x2000bfc4
 80060d8:	2000c02c 	.word	0x2000c02c
 80060dc:	2000c094 	.word	0x2000c094

080060e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060e8:	f001 f8d8 	bl	800729c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006198 <prvAddNewTaskToReadyList+0xb8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a29      	ldr	r2, [pc, #164]	@ (8006198 <prvAddNewTaskToReadyList+0xb8>)
 80060f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060f6:	4b29      	ldr	r3, [pc, #164]	@ (800619c <prvAddNewTaskToReadyList+0xbc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060fe:	4a27      	ldr	r2, [pc, #156]	@ (800619c <prvAddNewTaskToReadyList+0xbc>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006104:	4b24      	ldr	r3, [pc, #144]	@ (8006198 <prvAddNewTaskToReadyList+0xb8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d110      	bne.n	800612e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800610c:	f000 fcac 	bl	8006a68 <prvInitialiseTaskLists>
 8006110:	e00d      	b.n	800612e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006112:	4b23      	ldr	r3, [pc, #140]	@ (80061a0 <prvAddNewTaskToReadyList+0xc0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800611a:	4b20      	ldr	r3, [pc, #128]	@ (800619c <prvAddNewTaskToReadyList+0xbc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	429a      	cmp	r2, r3
 8006126:	d802      	bhi.n	800612e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006128:	4a1c      	ldr	r2, [pc, #112]	@ (800619c <prvAddNewTaskToReadyList+0xbc>)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800612e:	4b1d      	ldr	r3, [pc, #116]	@ (80061a4 <prvAddNewTaskToReadyList+0xc4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a1b      	ldr	r2, [pc, #108]	@ (80061a4 <prvAddNewTaskToReadyList+0xc4>)
 8006136:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	2201      	movs	r2, #1
 800613e:	409a      	lsls	r2, r3
 8006140:	4b19      	ldr	r3, [pc, #100]	@ (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4313      	orrs	r3, r2
 8006146:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <prvAddNewTaskToReadyList+0xc8>)
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4a15      	ldr	r2, [pc, #84]	@ (80061ac <prvAddNewTaskToReadyList+0xcc>)
 8006158:	441a      	add	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f7fe fdbd 	bl	8004ce0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006166:	f001 f8cf 	bl	8007308 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <prvAddNewTaskToReadyList+0xc0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00e      	beq.n	8006190 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006172:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <prvAddNewTaskToReadyList+0xbc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	429a      	cmp	r2, r3
 800617e:	d207      	bcs.n	8006190 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006180:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <prvAddNewTaskToReadyList+0xd0>)
 8006182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20005108 	.word	0x20005108
 800619c:	20005008 	.word	0x20005008
 80061a0:	20005114 	.word	0x20005114
 80061a4:	20005124 	.word	0x20005124
 80061a8:	20005110 	.word	0x20005110
 80061ac:	2000500c 	.word	0x2000500c
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80061bc:	f001 f86e 	bl	800729c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <vTaskDelete+0x18>
 80061c6:	4b3a      	ldr	r3, [pc, #232]	@ (80062b0 <vTaskDelete+0xfc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	e000      	b.n	80061ce <vTaskDelete+0x1a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fde0 	bl	8004d9a <uxListRemove>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d115      	bne.n	800620c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e4:	4933      	ldr	r1, [pc, #204]	@ (80062b4 <vTaskDelete+0x100>)
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <vTaskDelete+0x58>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fa:	2201      	movs	r2, #1
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43da      	mvns	r2, r3
 8006202:	4b2d      	ldr	r3, [pc, #180]	@ (80062b8 <vTaskDelete+0x104>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4013      	ands	r3, r2
 8006208:	4a2b      	ldr	r2, [pc, #172]	@ (80062b8 <vTaskDelete+0x104>)
 800620a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3318      	adds	r3, #24
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe fdbe 	bl	8004d9a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800621e:	4b27      	ldr	r3, [pc, #156]	@ (80062bc <vTaskDelete+0x108>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	4a25      	ldr	r2, [pc, #148]	@ (80062bc <vTaskDelete+0x108>)
 8006226:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006228:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <vTaskDelete+0xfc>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	429a      	cmp	r2, r3
 8006230:	d10b      	bne.n	800624a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4821      	ldr	r0, [pc, #132]	@ (80062c0 <vTaskDelete+0x10c>)
 800623a:	f7fe fd51 	bl	8004ce0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800623e:	4b21      	ldr	r3, [pc, #132]	@ (80062c4 <vTaskDelete+0x110>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a1f      	ldr	r2, [pc, #124]	@ (80062c4 <vTaskDelete+0x110>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	e009      	b.n	800625e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800624a:	4b1f      	ldr	r3, [pc, #124]	@ (80062c8 <vTaskDelete+0x114>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3b01      	subs	r3, #1
 8006250:	4a1d      	ldr	r2, [pc, #116]	@ (80062c8 <vTaskDelete+0x114>)
 8006252:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fc75 	bl	8006b44 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800625a:	f000 fcab 	bl	8006bb4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800625e:	f001 f853 	bl	8007308 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006262:	4b1a      	ldr	r3, [pc, #104]	@ (80062cc <vTaskDelete+0x118>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01e      	beq.n	80062a8 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800626a:	4b11      	ldr	r3, [pc, #68]	@ (80062b0 <vTaskDelete+0xfc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	429a      	cmp	r2, r3
 8006272:	d119      	bne.n	80062a8 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006274:	4b16      	ldr	r3, [pc, #88]	@ (80062d0 <vTaskDelete+0x11c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00d      	beq.n	8006298 <vTaskDelete+0xe4>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	b672      	cpsid	i
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	b662      	cpsie	i
 8006290:	60bb      	str	r3, [r7, #8]
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8006298:	4b0e      	ldr	r3, [pc, #56]	@ (80062d4 <vTaskDelete+0x120>)
 800629a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062a8:	bf00      	nop
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20005008 	.word	0x20005008
 80062b4:	2000500c 	.word	0x2000500c
 80062b8:	20005110 	.word	0x20005110
 80062bc:	20005124 	.word	0x20005124
 80062c0:	200050dc 	.word	0x200050dc
 80062c4:	200050f0 	.word	0x200050f0
 80062c8:	20005108 	.word	0x20005108
 80062cc:	20005114 	.word	0x20005114
 80062d0:	20005130 	.word	0x20005130
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01a      	beq.n	8006320 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062ea:	4b15      	ldr	r3, [pc, #84]	@ (8006340 <vTaskDelay+0x68>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00d      	beq.n	800630e <vTaskDelay+0x36>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	b672      	cpsid	i
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	b662      	cpsie	i
 8006306:	60bb      	str	r3, [r7, #8]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800630e:	f000 f889 	bl	8006424 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006312:	2100      	movs	r1, #0
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fe4b 	bl	8006fb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800631a:	f000 f891 	bl	8006440 <xTaskResumeAll>
 800631e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d107      	bne.n	8006336 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006326:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <vTaskDelay+0x6c>)
 8006328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20005130 	.word	0x20005130
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	@ 0x28
 800634c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006356:	463a      	mov	r2, r7
 8006358:	1d39      	adds	r1, r7, #4
 800635a:	f107 0308 	add.w	r3, r7, #8
 800635e:	4618      	mov	r0, r3
 8006360:	f7fa f92e 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	9202      	str	r2, [sp, #8]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	2300      	movs	r3, #0
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	460a      	mov	r2, r1
 8006376:	4923      	ldr	r1, [pc, #140]	@ (8006404 <vTaskStartScheduler+0xbc>)
 8006378:	4823      	ldr	r0, [pc, #140]	@ (8006408 <vTaskStartScheduler+0xc0>)
 800637a:	f7ff fd63 	bl	8005e44 <xTaskCreateStatic>
 800637e:	4603      	mov	r3, r0
 8006380:	4a22      	ldr	r2, [pc, #136]	@ (800640c <vTaskStartScheduler+0xc4>)
 8006382:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006384:	4b21      	ldr	r3, [pc, #132]	@ (800640c <vTaskStartScheduler+0xc4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800638c:	2301      	movs	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e001      	b.n	8006396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d11d      	bne.n	80063d8 <vTaskStartScheduler+0x90>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a0:	b672      	cpsid	i
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	b662      	cpsie	i
 80063b0:	613b      	str	r3, [r7, #16]
}
 80063b2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063b4:	4b16      	ldr	r3, [pc, #88]	@ (8006410 <vTaskStartScheduler+0xc8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	334c      	adds	r3, #76	@ 0x4c
 80063ba:	4a16      	ldr	r2, [pc, #88]	@ (8006414 <vTaskStartScheduler+0xcc>)
 80063bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063be:	4b16      	ldr	r3, [pc, #88]	@ (8006418 <vTaskStartScheduler+0xd0>)
 80063c0:	f04f 32ff 	mov.w	r2, #4294967295
 80063c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063c6:	4b15      	ldr	r3, [pc, #84]	@ (800641c <vTaskStartScheduler+0xd4>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063cc:	4b14      	ldr	r3, [pc, #80]	@ (8006420 <vTaskStartScheduler+0xd8>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063d2:	f000 fee5 	bl	80071a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063d6:	e011      	b.n	80063fc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d10d      	bne.n	80063fc <vTaskStartScheduler+0xb4>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	b672      	cpsid	i
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	b662      	cpsie	i
 80063f4:	60fb      	str	r3, [r7, #12]
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	e7fd      	b.n	80063f8 <vTaskStartScheduler+0xb0>
}
 80063fc:	bf00      	nop
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	08016194 	.word	0x08016194
 8006408:	08006a39 	.word	0x08006a39
 800640c:	2000512c 	.word	0x2000512c
 8006410:	20005008 	.word	0x20005008
 8006414:	2000003c 	.word	0x2000003c
 8006418:	20005128 	.word	0x20005128
 800641c:	20005114 	.word	0x20005114
 8006420:	2000510c 	.word	0x2000510c

08006424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006428:	4b04      	ldr	r3, [pc, #16]	@ (800643c <vTaskSuspendAll+0x18>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	4a03      	ldr	r2, [pc, #12]	@ (800643c <vTaskSuspendAll+0x18>)
 8006430:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006432:	bf00      	nop
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20005130 	.word	0x20005130

08006440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800644e:	4b43      	ldr	r3, [pc, #268]	@ (800655c <xTaskResumeAll+0x11c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <xTaskResumeAll+0x32>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	b672      	cpsid	i
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	b662      	cpsie	i
 800646a:	603b      	str	r3, [r7, #0]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006472:	f000 ff13 	bl	800729c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006476:	4b39      	ldr	r3, [pc, #228]	@ (800655c <xTaskResumeAll+0x11c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3b01      	subs	r3, #1
 800647c:	4a37      	ldr	r2, [pc, #220]	@ (800655c <xTaskResumeAll+0x11c>)
 800647e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006480:	4b36      	ldr	r3, [pc, #216]	@ (800655c <xTaskResumeAll+0x11c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d161      	bne.n	800654c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006488:	4b35      	ldr	r3, [pc, #212]	@ (8006560 <xTaskResumeAll+0x120>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d05d      	beq.n	800654c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006490:	e02e      	b.n	80064f0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006492:	4b34      	ldr	r3, [pc, #208]	@ (8006564 <xTaskResumeAll+0x124>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3318      	adds	r3, #24
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fc7b 	bl	8004d9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe fc76 	bl	8004d9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b2:	2201      	movs	r2, #1
 80064b4:	409a      	lsls	r2, r3
 80064b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006568 <xTaskResumeAll+0x128>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006568 <xTaskResumeAll+0x128>)
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a27      	ldr	r2, [pc, #156]	@ (800656c <xTaskResumeAll+0x12c>)
 80064ce:	441a      	add	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7fe fc02 	bl	8004ce0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e0:	4b23      	ldr	r3, [pc, #140]	@ (8006570 <xTaskResumeAll+0x130>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80064ea:	4b22      	ldr	r3, [pc, #136]	@ (8006574 <xTaskResumeAll+0x134>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006564 <xTaskResumeAll+0x124>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1cc      	bne.n	8006492 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064fe:	f000 fb59 	bl	8006bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006502:	4b1d      	ldr	r3, [pc, #116]	@ (8006578 <xTaskResumeAll+0x138>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d010      	beq.n	8006530 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800650e:	f000 f859 	bl	80065c4 <xTaskIncrementTick>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006518:	4b16      	ldr	r3, [pc, #88]	@ (8006574 <xTaskResumeAll+0x134>)
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3b01      	subs	r3, #1
 8006522:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f1      	bne.n	800650e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800652a:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <xTaskResumeAll+0x138>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006530:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <xTaskResumeAll+0x134>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800653c:	4b0f      	ldr	r3, [pc, #60]	@ (800657c <xTaskResumeAll+0x13c>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800654c:	f000 fedc 	bl	8007308 <vPortExitCritical>

	return xAlreadyYielded;
 8006550:	68bb      	ldr	r3, [r7, #8]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20005130 	.word	0x20005130
 8006560:	20005108 	.word	0x20005108
 8006564:	200050c8 	.word	0x200050c8
 8006568:	20005110 	.word	0x20005110
 800656c:	2000500c 	.word	0x2000500c
 8006570:	20005008 	.word	0x20005008
 8006574:	2000511c 	.word	0x2000511c
 8006578:	20005118 	.word	0x20005118
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006586:	4b05      	ldr	r3, [pc, #20]	@ (800659c <xTaskGetTickCount+0x1c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800658c:	687b      	ldr	r3, [r7, #4]
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	2000510c 	.word	0x2000510c

080065a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065a6:	f000 ff61 	bl	800746c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80065aa:	2300      	movs	r3, #0
 80065ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80065ae:	4b04      	ldr	r3, [pc, #16]	@ (80065c0 <xTaskGetTickCountFromISR+0x20>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065b4:	683b      	ldr	r3, [r7, #0]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	2000510c 	.word	0x2000510c

080065c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ce:	4b50      	ldr	r3, [pc, #320]	@ (8006710 <xTaskIncrementTick+0x14c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 808b 	bne.w	80066ee <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065d8:	4b4e      	ldr	r3, [pc, #312]	@ (8006714 <xTaskIncrementTick+0x150>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065e0:	4a4c      	ldr	r2, [pc, #304]	@ (8006714 <xTaskIncrementTick+0x150>)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d123      	bne.n	8006634 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80065ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006718 <xTaskIncrementTick+0x154>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00d      	beq.n	8006612 <xTaskIncrementTick+0x4e>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	b672      	cpsid	i
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	b662      	cpsie	i
 800660a:	603b      	str	r3, [r7, #0]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <xTaskIncrementTick+0x4a>
 8006612:	4b41      	ldr	r3, [pc, #260]	@ (8006718 <xTaskIncrementTick+0x154>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	4b40      	ldr	r3, [pc, #256]	@ (800671c <xTaskIncrementTick+0x158>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a3e      	ldr	r2, [pc, #248]	@ (8006718 <xTaskIncrementTick+0x154>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	4a3e      	ldr	r2, [pc, #248]	@ (800671c <xTaskIncrementTick+0x158>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	4b3e      	ldr	r3, [pc, #248]	@ (8006720 <xTaskIncrementTick+0x15c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3301      	adds	r3, #1
 800662c:	4a3c      	ldr	r2, [pc, #240]	@ (8006720 <xTaskIncrementTick+0x15c>)
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	f000 fac0 	bl	8006bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006634:	4b3b      	ldr	r3, [pc, #236]	@ (8006724 <xTaskIncrementTick+0x160>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	d348      	bcc.n	80066d0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800663e:	4b36      	ldr	r3, [pc, #216]	@ (8006718 <xTaskIncrementTick+0x154>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006648:	4b36      	ldr	r3, [pc, #216]	@ (8006724 <xTaskIncrementTick+0x160>)
 800664a:	f04f 32ff 	mov.w	r2, #4294967295
 800664e:	601a      	str	r2, [r3, #0]
					break;
 8006650:	e03e      	b.n	80066d0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006652:	4b31      	ldr	r3, [pc, #196]	@ (8006718 <xTaskIncrementTick+0x154>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d203      	bcs.n	8006672 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800666a:	4a2e      	ldr	r2, [pc, #184]	@ (8006724 <xTaskIncrementTick+0x160>)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006670:	e02e      	b.n	80066d0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fb8f 	bl	8004d9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3318      	adds	r3, #24
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe fb86 	bl	8004d9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	2201      	movs	r2, #1
 8006694:	409a      	lsls	r2, r3
 8006696:	4b24      	ldr	r3, [pc, #144]	@ (8006728 <xTaskIncrementTick+0x164>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4313      	orrs	r3, r2
 800669c:	4a22      	ldr	r2, [pc, #136]	@ (8006728 <xTaskIncrementTick+0x164>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4a1f      	ldr	r2, [pc, #124]	@ (800672c <xTaskIncrementTick+0x168>)
 80066ae:	441a      	add	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f7fe fb12 	bl	8004ce0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006730 <xTaskIncrementTick+0x16c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d3b9      	bcc.n	800663e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80066ca:	2301      	movs	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ce:	e7b6      	b.n	800663e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066d0:	4b17      	ldr	r3, [pc, #92]	@ (8006730 <xTaskIncrementTick+0x16c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d6:	4915      	ldr	r1, [pc, #84]	@ (800672c <xTaskIncrementTick+0x168>)
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	440b      	add	r3, r1
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d907      	bls.n	80066f8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e004      	b.n	80066f8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066ee:	4b11      	ldr	r3, [pc, #68]	@ (8006734 <xTaskIncrementTick+0x170>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006734 <xTaskIncrementTick+0x170>)
 80066f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006738 <xTaskIncrementTick+0x174>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006700:	2301      	movs	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006704:	697b      	ldr	r3, [r7, #20]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20005130 	.word	0x20005130
 8006714:	2000510c 	.word	0x2000510c
 8006718:	200050c0 	.word	0x200050c0
 800671c:	200050c4 	.word	0x200050c4
 8006720:	20005120 	.word	0x20005120
 8006724:	20005128 	.word	0x20005128
 8006728:	20005110 	.word	0x20005110
 800672c:	2000500c 	.word	0x2000500c
 8006730:	20005008 	.word	0x20005008
 8006734:	20005118 	.word	0x20005118
 8006738:	2000511c 	.word	0x2000511c

0800673c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006742:	4b2b      	ldr	r3, [pc, #172]	@ (80067f0 <vTaskSwitchContext+0xb4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800674a:	4b2a      	ldr	r3, [pc, #168]	@ (80067f4 <vTaskSwitchContext+0xb8>)
 800674c:	2201      	movs	r2, #1
 800674e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006750:	e047      	b.n	80067e2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006752:	4b28      	ldr	r3, [pc, #160]	@ (80067f4 <vTaskSwitchContext+0xb8>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006758:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <vTaskSwitchContext+0xbc>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	fab3 f383 	clz	r3, r3
 8006764:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006766:	7afb      	ldrb	r3, [r7, #11]
 8006768:	f1c3 031f 	rsb	r3, r3, #31
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	4923      	ldr	r1, [pc, #140]	@ (80067fc <vTaskSwitchContext+0xc0>)
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10d      	bne.n	800679e <vTaskSwitchContext+0x62>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	607b      	str	r3, [r7, #4]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <vTaskSwitchContext+0x5e>
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4a14      	ldr	r2, [pc, #80]	@ (80067fc <vTaskSwitchContext+0xc0>)
 80067aa:	4413      	add	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	605a      	str	r2, [r3, #4]
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	3308      	adds	r3, #8
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d104      	bne.n	80067ce <vTaskSwitchContext+0x92>
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006800 <vTaskSwitchContext+0xc4>)
 80067d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067d8:	4b09      	ldr	r3, [pc, #36]	@ (8006800 <vTaskSwitchContext+0xc4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	334c      	adds	r3, #76	@ 0x4c
 80067de:	4a09      	ldr	r2, [pc, #36]	@ (8006804 <vTaskSwitchContext+0xc8>)
 80067e0:	6013      	str	r3, [r2, #0]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20005130 	.word	0x20005130
 80067f4:	2000511c 	.word	0x2000511c
 80067f8:	20005110 	.word	0x20005110
 80067fc:	2000500c 	.word	0x2000500c
 8006800:	20005008 	.word	0x20005008
 8006804:	2000003c 	.word	0x2000003c

08006808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10d      	bne.n	8006834 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681c:	b672      	cpsid	i
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	b662      	cpsie	i
 800682c:	60fb      	str	r3, [r7, #12]
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	e7fd      	b.n	8006830 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006834:	4b07      	ldr	r3, [pc, #28]	@ (8006854 <vTaskPlaceOnEventList+0x4c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3318      	adds	r3, #24
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fe fa73 	bl	8004d28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006842:	2101      	movs	r1, #1
 8006844:	6838      	ldr	r0, [r7, #0]
 8006846:	f000 fbb3 	bl	8006fb0 <prvAddCurrentTaskToDelayedList>
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20005008 	.word	0x20005008

08006858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	b672      	cpsid	i
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	b662      	cpsie	i
 8006882:	60fb      	str	r3, [r7, #12]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	3318      	adds	r3, #24
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fa83 	bl	8004d9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006894:	4b1d      	ldr	r3, [pc, #116]	@ (800690c <xTaskRemoveFromEventList+0xb4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d11c      	bne.n	80068d6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	3304      	adds	r3, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fa7a 	bl	8004d9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068aa:	2201      	movs	r2, #1
 80068ac:	409a      	lsls	r2, r3
 80068ae:	4b18      	ldr	r3, [pc, #96]	@ (8006910 <xTaskRemoveFromEventList+0xb8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	4a16      	ldr	r2, [pc, #88]	@ (8006910 <xTaskRemoveFromEventList+0xb8>)
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4a13      	ldr	r2, [pc, #76]	@ (8006914 <xTaskRemoveFromEventList+0xbc>)
 80068c6:	441a      	add	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f7fe fa06 	bl	8004ce0 <vListInsertEnd>
 80068d4:	e005      	b.n	80068e2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	3318      	adds	r3, #24
 80068da:	4619      	mov	r1, r3
 80068dc:	480e      	ldr	r0, [pc, #56]	@ (8006918 <xTaskRemoveFromEventList+0xc0>)
 80068de:	f7fe f9ff 	bl	8004ce0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e6:	4b0d      	ldr	r3, [pc, #52]	@ (800691c <xTaskRemoveFromEventList+0xc4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d905      	bls.n	80068fc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068f0:	2301      	movs	r3, #1
 80068f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006920 <xTaskRemoveFromEventList+0xc8>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e001      	b.n	8006900 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006900:	697b      	ldr	r3, [r7, #20]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20005130 	.word	0x20005130
 8006910:	20005110 	.word	0x20005110
 8006914:	2000500c 	.word	0x2000500c
 8006918:	200050c8 	.word	0x200050c8
 800691c:	20005008 	.word	0x20005008
 8006920:	2000511c 	.word	0x2000511c

08006924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800692c:	4b06      	ldr	r3, [pc, #24]	@ (8006948 <vTaskInternalSetTimeOutState+0x24>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006934:	4b05      	ldr	r3, [pc, #20]	@ (800694c <vTaskInternalSetTimeOutState+0x28>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	605a      	str	r2, [r3, #4]
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	20005120 	.word	0x20005120
 800694c:	2000510c 	.word	0x2000510c

08006950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10d      	bne.n	800697c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006964:	b672      	cpsid	i
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	b662      	cpsie	i
 8006974:	613b      	str	r3, [r7, #16]
}
 8006976:	bf00      	nop
 8006978:	bf00      	nop
 800697a:	e7fd      	b.n	8006978 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10d      	bne.n	800699e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	b672      	cpsid	i
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	b662      	cpsie	i
 8006996:	60fb      	str	r3, [r7, #12]
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800699e:	f000 fc7d 	bl	800729c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a18 <xTaskCheckForTimeOut+0xc8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d102      	bne.n	80069c2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069bc:	2300      	movs	r3, #0
 80069be:	61fb      	str	r3, [r7, #28]
 80069c0:	e023      	b.n	8006a0a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4b15      	ldr	r3, [pc, #84]	@ (8006a1c <xTaskCheckForTimeOut+0xcc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d007      	beq.n	80069de <xTaskCheckForTimeOut+0x8e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069d8:	2301      	movs	r3, #1
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	e015      	b.n	8006a0a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d20b      	bcs.n	8006a00 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ff95 	bl	8006924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	e004      	b.n	8006a0a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a0a:	f000 fc7d 	bl	8007308 <vPortExitCritical>

	return xReturn;
 8006a0e:	69fb      	ldr	r3, [r7, #28]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	2000510c 	.word	0x2000510c
 8006a1c:	20005120 	.word	0x20005120

08006a20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a24:	4b03      	ldr	r3, [pc, #12]	@ (8006a34 <vTaskMissedYield+0x14>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	2000511c 	.word	0x2000511c

08006a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a40:	f000 f852 	bl	8006ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a44:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <prvIdleTask+0x28>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d9f9      	bls.n	8006a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a4c:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <prvIdleTask+0x2c>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a5c:	e7f0      	b.n	8006a40 <prvIdleTask+0x8>
 8006a5e:	bf00      	nop
 8006a60:	2000500c 	.word	0x2000500c
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	e00c      	b.n	8006a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4a12      	ldr	r2, [pc, #72]	@ (8006ac8 <prvInitialiseTaskLists+0x60>)
 8006a80:	4413      	add	r3, r2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe f8ff 	bl	8004c86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b06      	cmp	r3, #6
 8006a92:	d9ef      	bls.n	8006a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a94:	480d      	ldr	r0, [pc, #52]	@ (8006acc <prvInitialiseTaskLists+0x64>)
 8006a96:	f7fe f8f6 	bl	8004c86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a9a:	480d      	ldr	r0, [pc, #52]	@ (8006ad0 <prvInitialiseTaskLists+0x68>)
 8006a9c:	f7fe f8f3 	bl	8004c86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006aa0:	480c      	ldr	r0, [pc, #48]	@ (8006ad4 <prvInitialiseTaskLists+0x6c>)
 8006aa2:	f7fe f8f0 	bl	8004c86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aa6:	480c      	ldr	r0, [pc, #48]	@ (8006ad8 <prvInitialiseTaskLists+0x70>)
 8006aa8:	f7fe f8ed 	bl	8004c86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006aac:	480b      	ldr	r0, [pc, #44]	@ (8006adc <prvInitialiseTaskLists+0x74>)
 8006aae:	f7fe f8ea 	bl	8004c86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <prvInitialiseTaskLists+0x78>)
 8006ab4:	4a05      	ldr	r2, [pc, #20]	@ (8006acc <prvInitialiseTaskLists+0x64>)
 8006ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <prvInitialiseTaskLists+0x7c>)
 8006aba:	4a05      	ldr	r2, [pc, #20]	@ (8006ad0 <prvInitialiseTaskLists+0x68>)
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	2000500c 	.word	0x2000500c
 8006acc:	20005098 	.word	0x20005098
 8006ad0:	200050ac 	.word	0x200050ac
 8006ad4:	200050c8 	.word	0x200050c8
 8006ad8:	200050dc 	.word	0x200050dc
 8006adc:	200050f4 	.word	0x200050f4
 8006ae0:	200050c0 	.word	0x200050c0
 8006ae4:	200050c4 	.word	0x200050c4

08006ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aee:	e019      	b.n	8006b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006af0:	f000 fbd4 	bl	800729c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af4:	4b10      	ldr	r3, [pc, #64]	@ (8006b38 <prvCheckTasksWaitingTermination+0x50>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe f94a 	bl	8004d9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b06:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <prvCheckTasksWaitingTermination+0x54>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8006b3c <prvCheckTasksWaitingTermination+0x54>)
 8006b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b10:	4b0b      	ldr	r3, [pc, #44]	@ (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	4a0a      	ldr	r2, [pc, #40]	@ (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b1a:	f000 fbf5 	bl	8007308 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f810 	bl	8006b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b24:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e1      	bne.n	8006af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	200050dc 	.word	0x200050dc
 8006b3c:	20005108 	.word	0x20005108
 8006b40:	200050f0 	.word	0x200050f0

08006b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	334c      	adds	r3, #76	@ 0x4c
 8006b50:	4618      	mov	r0, r3
 8006b52:	f00e fb9f 	bl	8015294 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d108      	bne.n	8006b72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fd95 	bl	8007694 <vPortFree>
				vPortFree( pxTCB );
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fd92 	bl	8007694 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b70:	e01b      	b.n	8006baa <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d103      	bne.n	8006b84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fd89 	bl	8007694 <vPortFree>
	}
 8006b82:	e012      	b.n	8006baa <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d00d      	beq.n	8006baa <prvDeleteTCB+0x66>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
 8006ba2:	60fb      	str	r3, [r7, #12]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <prvDeleteTCB+0x62>
	}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bba:	4b0c      	ldr	r3, [pc, #48]	@ (8006bec <prvResetNextTaskUnblockTime+0x38>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bcc:	e008      	b.n	8006be0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bce:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <prvResetNextTaskUnblockTime+0x38>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	4a04      	ldr	r2, [pc, #16]	@ (8006bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	200050c0 	.word	0x200050c0
 8006bf0:	20005128 	.word	0x20005128

08006bf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <xTaskGetSchedulerState+0x34>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d102      	bne.n	8006c08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c02:	2301      	movs	r3, #1
 8006c04:	607b      	str	r3, [r7, #4]
 8006c06:	e008      	b.n	8006c1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c08:	4b08      	ldr	r3, [pc, #32]	@ (8006c2c <xTaskGetSchedulerState+0x38>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c10:	2302      	movs	r3, #2
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	e001      	b.n	8006c1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c1a:	687b      	ldr	r3, [r7, #4]
	}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20005114 	.word	0x20005114
 8006c2c:	20005130 	.word	0x20005130

08006c30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d069      	beq.n	8006d1a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4a:	4b36      	ldr	r3, [pc, #216]	@ (8006d24 <xTaskPriorityInherit+0xf4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d259      	bcs.n	8006d08 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	db06      	blt.n	8006c6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c5c:	4b31      	ldr	r3, [pc, #196]	@ (8006d24 <xTaskPriorityInherit+0xf4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	f1c3 0207 	rsb	r2, r3, #7
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6959      	ldr	r1, [r3, #20]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8006d28 <xTaskPriorityInherit+0xf8>)
 8006c7c:	4413      	add	r3, r2
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d13a      	bne.n	8006cf8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe f887 	bl	8004d9a <uxListRemove>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d115      	bne.n	8006cbe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c96:	4924      	ldr	r1, [pc, #144]	@ (8006d28 <xTaskPriorityInherit+0xf8>)
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xTaskPriorityInherit+0x8e>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cac:	2201      	movs	r2, #1
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	43da      	mvns	r2, r3
 8006cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d2c <xTaskPriorityInherit+0xfc>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	4a1c      	ldr	r2, [pc, #112]	@ (8006d2c <xTaskPriorityInherit+0xfc>)
 8006cbc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cbe:	4b19      	ldr	r3, [pc, #100]	@ (8006d24 <xTaskPriorityInherit+0xf4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ccc:	2201      	movs	r2, #1
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	4b16      	ldr	r3, [pc, #88]	@ (8006d2c <xTaskPriorityInherit+0xfc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	4a15      	ldr	r2, [pc, #84]	@ (8006d2c <xTaskPriorityInherit+0xfc>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4a10      	ldr	r2, [pc, #64]	@ (8006d28 <xTaskPriorityInherit+0xf8>)
 8006ce8:	441a      	add	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7fd fff5 	bl	8004ce0 <vListInsertEnd>
 8006cf6:	e004      	b.n	8006d02 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d24 <xTaskPriorityInherit+0xf4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e008      	b.n	8006d1a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d0c:	4b05      	ldr	r3, [pc, #20]	@ (8006d24 <xTaskPriorityInherit+0xf4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d201      	bcs.n	8006d1a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d16:	2301      	movs	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20005008 	.word	0x20005008
 8006d28:	2000500c 	.word	0x2000500c
 8006d2c:	20005110 	.word	0x20005110

08006d30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d074      	beq.n	8006e30 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d46:	4b3d      	ldr	r3, [pc, #244]	@ (8006e3c <xTaskPriorityDisinherit+0x10c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d00d      	beq.n	8006d6c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	b672      	cpsid	i
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	b662      	cpsie	i
 8006d64:	60fb      	str	r3, [r7, #12]
}
 8006d66:	bf00      	nop
 8006d68:	bf00      	nop
 8006d6a:	e7fd      	b.n	8006d68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10d      	bne.n	8006d90 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d78:	b672      	cpsid	i
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	b662      	cpsie	i
 8006d88:	60bb      	str	r3, [r7, #8]
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	e7fd      	b.n	8006d8c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d94:	1e5a      	subs	r2, r3, #1
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d044      	beq.n	8006e30 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d140      	bne.n	8006e30 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fd fff1 	bl	8004d9a <uxListRemove>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d115      	bne.n	8006dea <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc2:	491f      	ldr	r1, [pc, #124]	@ (8006e40 <xTaskPriorityDisinherit+0x110>)
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <xTaskPriorityDisinherit+0xba>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd8:	2201      	movs	r2, #1
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	43da      	mvns	r2, r3
 8006de0:	4b18      	ldr	r3, [pc, #96]	@ (8006e44 <xTaskPriorityDisinherit+0x114>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4013      	ands	r3, r2
 8006de6:	4a17      	ldr	r2, [pc, #92]	@ (8006e44 <xTaskPriorityDisinherit+0x114>)
 8006de8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	f1c3 0207 	rsb	r2, r3, #7
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e02:	2201      	movs	r2, #1
 8006e04:	409a      	lsls	r2, r3
 8006e06:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <xTaskPriorityDisinherit+0x114>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e44 <xTaskPriorityDisinherit+0x114>)
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4a08      	ldr	r2, [pc, #32]	@ (8006e40 <xTaskPriorityDisinherit+0x110>)
 8006e1e:	441a      	add	r2, r3
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	f7fd ff5a 	bl	8004ce0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e30:	697b      	ldr	r3, [r7, #20]
	}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20005008 	.word	0x20005008
 8006e40:	2000500c 	.word	0x2000500c
 8006e44:	20005110 	.word	0x20005110

08006e48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e56:	2301      	movs	r3, #1
 8006e58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8089 	beq.w	8006f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	b672      	cpsid	i
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	b662      	cpsie	i
 8006e7e:	60fb      	str	r3, [r7, #12]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d902      	bls.n	8006e96 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e002      	b.n	8006e9c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d066      	beq.n	8006f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d161      	bne.n	8006f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006eb0:	4b32      	ldr	r3, [pc, #200]	@ (8006f7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d10d      	bne.n	8006ed6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	b672      	cpsid	i
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	b662      	cpsie	i
 8006ece:	60bb      	str	r3, [r7, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eda:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	db04      	blt.n	8006ef4 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	f1c3 0207 	rsb	r2, r3, #7
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	6959      	ldr	r1, [r3, #20]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4a1f      	ldr	r2, [pc, #124]	@ (8006f80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006f04:	4413      	add	r3, r2
 8006f06:	4299      	cmp	r1, r3
 8006f08:	d134      	bne.n	8006f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fd ff43 	bl	8004d9a <uxListRemove>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d115      	bne.n	8006f46 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1e:	4918      	ldr	r1, [pc, #96]	@ (8006f80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	2201      	movs	r2, #1
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	43da      	mvns	r2, r3
 8006f3c:	4b11      	ldr	r3, [pc, #68]	@ (8006f84 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4013      	ands	r3, r2
 8006f42:	4a10      	ldr	r2, [pc, #64]	@ (8006f84 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f44:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f84 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	4a0b      	ldr	r2, [pc, #44]	@ (8006f84 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4a06      	ldr	r2, [pc, #24]	@ (8006f80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006f66:	441a      	add	r2, r3
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fd feb6 	bl	8004ce0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f74:	bf00      	nop
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20005008 	.word	0x20005008
 8006f80:	2000500c 	.word	0x2000500c
 8006f84:	20005110 	.word	0x20005110

08006f88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f8c:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <pvTaskIncrementMutexHeldCount+0x24>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f94:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <pvTaskIncrementMutexHeldCount+0x24>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f9a:	3201      	adds	r2, #1
 8006f9c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	@ (8006fac <pvTaskIncrementMutexHeldCount+0x24>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
	}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	20005008 	.word	0x20005008

08006fb0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fba:	4b29      	ldr	r3, [pc, #164]	@ (8007060 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fc0:	4b28      	ldr	r3, [pc, #160]	@ (8007064 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fd fee7 	bl	8004d9a <uxListRemove>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10b      	bne.n	8006fea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006fd2:	4b24      	ldr	r3, [pc, #144]	@ (8007064 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	2201      	movs	r2, #1
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	43da      	mvns	r2, r3
 8006fe0:	4b21      	ldr	r3, [pc, #132]	@ (8007068 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	4a20      	ldr	r2, [pc, #128]	@ (8007068 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fe8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d10a      	bne.n	8007008 <prvAddCurrentTaskToDelayedList+0x58>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8007064 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	481a      	ldr	r0, [pc, #104]	@ (800706c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007002:	f7fd fe6d 	bl	8004ce0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007006:	e026      	b.n	8007056 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007010:	4b14      	ldr	r3, [pc, #80]	@ (8007064 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	429a      	cmp	r2, r3
 800701e:	d209      	bcs.n	8007034 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007020:	4b13      	ldr	r3, [pc, #76]	@ (8007070 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4b0f      	ldr	r3, [pc, #60]	@ (8007064 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3304      	adds	r3, #4
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f7fd fe7b 	bl	8004d28 <vListInsert>
}
 8007032:	e010      	b.n	8007056 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007034:	4b0f      	ldr	r3, [pc, #60]	@ (8007074 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b0a      	ldr	r3, [pc, #40]	@ (8007064 <prvAddCurrentTaskToDelayedList+0xb4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fd fe71 	bl	8004d28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007046:	4b0c      	ldr	r3, [pc, #48]	@ (8007078 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	429a      	cmp	r2, r3
 800704e:	d202      	bcs.n	8007056 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007050:	4a09      	ldr	r2, [pc, #36]	@ (8007078 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6013      	str	r3, [r2, #0]
}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	2000510c 	.word	0x2000510c
 8007064:	20005008 	.word	0x20005008
 8007068:	20005110 	.word	0x20005110
 800706c:	200050f4 	.word	0x200050f4
 8007070:	200050c4 	.word	0x200050c4
 8007074:	200050c0 	.word	0x200050c0
 8007078:	20005128 	.word	0x20005128

0800707c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3b04      	subs	r3, #4
 800708c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3b04      	subs	r3, #4
 800709a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3b04      	subs	r3, #4
 80070aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070ac:	4a0c      	ldr	r2, [pc, #48]	@ (80070e0 <pxPortInitialiseStack+0x64>)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3b14      	subs	r3, #20
 80070b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3b04      	subs	r3, #4
 80070c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f06f 0202 	mvn.w	r2, #2
 80070ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3b20      	subs	r3, #32
 80070d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070d2:	68fb      	ldr	r3, [r7, #12]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	080070e5 	.word	0x080070e5

080070e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070ee:	4b15      	ldr	r3, [pc, #84]	@ (8007144 <prvTaskExitError+0x60>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f6:	d00d      	beq.n	8007114 <prvTaskExitError+0x30>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fc:	b672      	cpsid	i
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	b662      	cpsie	i
 800710c:	60fb      	str	r3, [r7, #12]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <prvTaskExitError+0x2c>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	b672      	cpsid	i
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	b662      	cpsie	i
 8007128:	60bb      	str	r3, [r7, #8]
}
 800712a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800712c:	bf00      	nop
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0fc      	beq.n	800712e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20000020 	.word	0x20000020
	...

08007150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007150:	4b07      	ldr	r3, [pc, #28]	@ (8007170 <pxCurrentTCBConst2>)
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	6808      	ldr	r0, [r1, #0]
 8007156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	f380 8809 	msr	PSP, r0
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f04f 0000 	mov.w	r0, #0
 8007166:	f380 8811 	msr	BASEPRI, r0
 800716a:	4770      	bx	lr
 800716c:	f3af 8000 	nop.w

08007170 <pxCurrentTCBConst2>:
 8007170:	20005008 	.word	0x20005008
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop

08007178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007178:	4808      	ldr	r0, [pc, #32]	@ (800719c <prvPortStartFirstTask+0x24>)
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	6800      	ldr	r0, [r0, #0]
 800717e:	f380 8808 	msr	MSP, r0
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8814 	msr	CONTROL, r0
 800718a:	b662      	cpsie	i
 800718c:	b661      	cpsie	f
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	df00      	svc	0
 8007198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800719a:	bf00      	nop
 800719c:	e000ed08 	.word	0xe000ed08

080071a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071a6:	4b37      	ldr	r3, [pc, #220]	@ (8007284 <xPortStartScheduler+0xe4>)
 80071a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	22ff      	movs	r2, #255	@ 0xff
 80071b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007288 <xPortStartScheduler+0xe8>)
 80071cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071ce:	4b2f      	ldr	r3, [pc, #188]	@ (800728c <xPortStartScheduler+0xec>)
 80071d0:	2207      	movs	r2, #7
 80071d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071d4:	e009      	b.n	80071ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80071d6:	4b2d      	ldr	r3, [pc, #180]	@ (800728c <xPortStartScheduler+0xec>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3b01      	subs	r3, #1
 80071dc:	4a2b      	ldr	r2, [pc, #172]	@ (800728c <xPortStartScheduler+0xec>)
 80071de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ea:	78fb      	ldrb	r3, [r7, #3]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f2:	2b80      	cmp	r3, #128	@ 0x80
 80071f4:	d0ef      	beq.n	80071d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071f6:	4b25      	ldr	r3, [pc, #148]	@ (800728c <xPortStartScheduler+0xec>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f1c3 0307 	rsb	r3, r3, #7
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d00d      	beq.n	800721e <xPortStartScheduler+0x7e>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	b672      	cpsid	i
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	b662      	cpsie	i
 8007216:	60bb      	str	r3, [r7, #8]
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	e7fd      	b.n	800721a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800721e:	4b1b      	ldr	r3, [pc, #108]	@ (800728c <xPortStartScheduler+0xec>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	4a19      	ldr	r2, [pc, #100]	@ (800728c <xPortStartScheduler+0xec>)
 8007226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007228:	4b18      	ldr	r3, [pc, #96]	@ (800728c <xPortStartScheduler+0xec>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007230:	4a16      	ldr	r2, [pc, #88]	@ (800728c <xPortStartScheduler+0xec>)
 8007232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800723c:	4b14      	ldr	r3, [pc, #80]	@ (8007290 <xPortStartScheduler+0xf0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a13      	ldr	r2, [pc, #76]	@ (8007290 <xPortStartScheduler+0xf0>)
 8007242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007248:	4b11      	ldr	r3, [pc, #68]	@ (8007290 <xPortStartScheduler+0xf0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a10      	ldr	r2, [pc, #64]	@ (8007290 <xPortStartScheduler+0xf0>)
 800724e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007254:	f000 f8dc 	bl	8007410 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007258:	4b0e      	ldr	r3, [pc, #56]	@ (8007294 <xPortStartScheduler+0xf4>)
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800725e:	f000 f8fb 	bl	8007458 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007262:	4b0d      	ldr	r3, [pc, #52]	@ (8007298 <xPortStartScheduler+0xf8>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a0c      	ldr	r2, [pc, #48]	@ (8007298 <xPortStartScheduler+0xf8>)
 8007268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800726c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800726e:	f7ff ff83 	bl	8007178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007272:	f7ff fa63 	bl	800673c <vTaskSwitchContext>
	prvTaskExitError();
 8007276:	f7ff ff35 	bl	80070e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	e000e400 	.word	0xe000e400
 8007288:	20005134 	.word	0x20005134
 800728c:	20005138 	.word	0x20005138
 8007290:	e000ed20 	.word	0xe000ed20
 8007294:	20000020 	.word	0x20000020
 8007298:	e000ef34 	.word	0xe000ef34

0800729c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a6:	b672      	cpsid	i
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	b662      	cpsie	i
 80072b6:	607b      	str	r3, [r7, #4]
}
 80072b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072ba:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <vPortEnterCritical+0x64>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3301      	adds	r3, #1
 80072c0:	4a0f      	ldr	r2, [pc, #60]	@ (8007300 <vPortEnterCritical+0x64>)
 80072c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007300 <vPortEnterCritical+0x64>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d112      	bne.n	80072f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <vPortEnterCritical+0x68>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00d      	beq.n	80072f2 <vPortEnterCritical+0x56>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072da:	b672      	cpsid	i
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	b662      	cpsie	i
 80072ea:	603b      	str	r3, [r7, #0]
}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	e7fd      	b.n	80072ee <vPortEnterCritical+0x52>
	}
}
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	20000020 	.word	0x20000020
 8007304:	e000ed04 	.word	0xe000ed04

08007308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800730e:	4b13      	ldr	r3, [pc, #76]	@ (800735c <vPortExitCritical+0x54>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10d      	bne.n	8007332 <vPortExitCritical+0x2a>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731a:	b672      	cpsid	i
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	b662      	cpsie	i
 800732a:	607b      	str	r3, [r7, #4]
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	e7fd      	b.n	800732e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007332:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <vPortExitCritical+0x54>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3b01      	subs	r3, #1
 8007338:	4a08      	ldr	r2, [pc, #32]	@ (800735c <vPortExitCritical+0x54>)
 800733a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800733c:	4b07      	ldr	r3, [pc, #28]	@ (800735c <vPortExitCritical+0x54>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d105      	bne.n	8007350 <vPortExitCritical+0x48>
 8007344:	2300      	movs	r3, #0
 8007346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f383 8811 	msr	BASEPRI, r3
}
 800734e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20000020 	.word	0x20000020

08007360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007360:	f3ef 8009 	mrs	r0, PSP
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	4b15      	ldr	r3, [pc, #84]	@ (80073c0 <pxCurrentTCBConst>)
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	f01e 0f10 	tst.w	lr, #16
 8007370:	bf08      	it	eq
 8007372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737a:	6010      	str	r0, [r2, #0]
 800737c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007384:	b672      	cpsid	i
 8007386:	f380 8811 	msr	BASEPRI, r0
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	b662      	cpsie	i
 8007394:	f7ff f9d2 	bl	800673c <vTaskSwitchContext>
 8007398:	f04f 0000 	mov.w	r0, #0
 800739c:	f380 8811 	msr	BASEPRI, r0
 80073a0:	bc09      	pop	{r0, r3}
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	6808      	ldr	r0, [r1, #0]
 80073a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	f01e 0f10 	tst.w	lr, #16
 80073ae:	bf08      	it	eq
 80073b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073b4:	f380 8809 	msr	PSP, r0
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop

080073c0 <pxCurrentTCBConst>:
 80073c0:	20005008 	.word	0x20005008
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop

080073c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	607b      	str	r3, [r7, #4]
}
 80073e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073e6:	f7ff f8ed 	bl	80065c4 <xTaskIncrementTick>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073f0:	4b06      	ldr	r3, [pc, #24]	@ (800740c <SysTick_Handler+0x44>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	f383 8811 	msr	BASEPRI, r3
}
 8007402:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	e000ed04 	.word	0xe000ed04

08007410 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007414:	4b0b      	ldr	r3, [pc, #44]	@ (8007444 <vPortSetupTimerInterrupt+0x34>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800741a:	4b0b      	ldr	r3, [pc, #44]	@ (8007448 <vPortSetupTimerInterrupt+0x38>)
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007420:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <vPortSetupTimerInterrupt+0x3c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a0a      	ldr	r2, [pc, #40]	@ (8007450 <vPortSetupTimerInterrupt+0x40>)
 8007426:	fba2 2303 	umull	r2, r3, r2, r3
 800742a:	099b      	lsrs	r3, r3, #6
 800742c:	4a09      	ldr	r2, [pc, #36]	@ (8007454 <vPortSetupTimerInterrupt+0x44>)
 800742e:	3b01      	subs	r3, #1
 8007430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007432:	4b04      	ldr	r3, [pc, #16]	@ (8007444 <vPortSetupTimerInterrupt+0x34>)
 8007434:	2207      	movs	r2, #7
 8007436:	601a      	str	r2, [r3, #0]
}
 8007438:	bf00      	nop
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	e000e010 	.word	0xe000e010
 8007448:	e000e018 	.word	0xe000e018
 800744c:	20000000 	.word	0x20000000
 8007450:	10624dd3 	.word	0x10624dd3
 8007454:	e000e014 	.word	0xe000e014

08007458 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007458:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007468 <vPortEnableVFP+0x10>
 800745c:	6801      	ldr	r1, [r0, #0]
 800745e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007462:	6001      	str	r1, [r0, #0]
 8007464:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007466:	bf00      	nop
 8007468:	e000ed88 	.word	0xe000ed88

0800746c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007472:	f3ef 8305 	mrs	r3, IPSR
 8007476:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b0f      	cmp	r3, #15
 800747c:	d917      	bls.n	80074ae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800747e:	4a1a      	ldr	r2, [pc, #104]	@ (80074e8 <vPortValidateInterruptPriority+0x7c>)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007488:	4b18      	ldr	r3, [pc, #96]	@ (80074ec <vPortValidateInterruptPriority+0x80>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	7afa      	ldrb	r2, [r7, #11]
 800748e:	429a      	cmp	r2, r3
 8007490:	d20d      	bcs.n	80074ae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007496:	b672      	cpsid	i
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	b662      	cpsie	i
 80074a6:	607b      	str	r3, [r7, #4]
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	e7fd      	b.n	80074aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074ae:	4b10      	ldr	r3, [pc, #64]	@ (80074f0 <vPortValidateInterruptPriority+0x84>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074b6:	4b0f      	ldr	r3, [pc, #60]	@ (80074f4 <vPortValidateInterruptPriority+0x88>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d90d      	bls.n	80074da <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	b672      	cpsid	i
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	b662      	cpsie	i
 80074d2:	603b      	str	r3, [r7, #0]
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <vPortValidateInterruptPriority+0x6a>
	}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	e000e3f0 	.word	0xe000e3f0
 80074ec:	20005134 	.word	0x20005134
 80074f0:	e000ed0c 	.word	0xe000ed0c
 80074f4:	20005138 	.word	0x20005138

080074f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	@ 0x28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007500:	2300      	movs	r3, #0
 8007502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007504:	f7fe ff8e 	bl	8006424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007508:	4b5d      	ldr	r3, [pc, #372]	@ (8007680 <pvPortMalloc+0x188>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007510:	f000 f920 	bl	8007754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007514:	4b5b      	ldr	r3, [pc, #364]	@ (8007684 <pvPortMalloc+0x18c>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	f040 8094 	bne.w	800764a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d020      	beq.n	800756a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007528:	2208      	movs	r2, #8
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	2b00      	cmp	r3, #0
 8007538:	d017      	beq.n	800756a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	3308      	adds	r3, #8
 8007542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00d      	beq.n	800756a <pvPortMalloc+0x72>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007552:	b672      	cpsid	i
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	b662      	cpsie	i
 8007562:	617b      	str	r3, [r7, #20]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d06c      	beq.n	800764a <pvPortMalloc+0x152>
 8007570:	4b45      	ldr	r3, [pc, #276]	@ (8007688 <pvPortMalloc+0x190>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	d867      	bhi.n	800764a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800757a:	4b44      	ldr	r3, [pc, #272]	@ (800768c <pvPortMalloc+0x194>)
 800757c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800757e:	4b43      	ldr	r3, [pc, #268]	@ (800768c <pvPortMalloc+0x194>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007584:	e004      	b.n	8007590 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d903      	bls.n	80075a2 <pvPortMalloc+0xaa>
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f1      	bne.n	8007586 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075a2:	4b37      	ldr	r3, [pc, #220]	@ (8007680 <pvPortMalloc+0x188>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d04e      	beq.n	800764a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2208      	movs	r2, #8
 80075b2:	4413      	add	r3, r2
 80075b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1ad2      	subs	r2, r2, r3
 80075c6:	2308      	movs	r3, #8
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d922      	bls.n	8007614 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4413      	add	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <pvPortMalloc+0x104>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	b672      	cpsid	i
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	b662      	cpsie	i
 80075f4:	613b      	str	r3, [r7, #16]
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800760e:	69b8      	ldr	r0, [r7, #24]
 8007610:	f000 f902 	bl	8007818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007614:	4b1c      	ldr	r3, [pc, #112]	@ (8007688 <pvPortMalloc+0x190>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	4a1a      	ldr	r2, [pc, #104]	@ (8007688 <pvPortMalloc+0x190>)
 8007620:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007622:	4b19      	ldr	r3, [pc, #100]	@ (8007688 <pvPortMalloc+0x190>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b1a      	ldr	r3, [pc, #104]	@ (8007690 <pvPortMalloc+0x198>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d203      	bcs.n	8007636 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800762e:	4b16      	ldr	r3, [pc, #88]	@ (8007688 <pvPortMalloc+0x190>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a17      	ldr	r2, [pc, #92]	@ (8007690 <pvPortMalloc+0x198>)
 8007634:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	4b12      	ldr	r3, [pc, #72]	@ (8007684 <pvPortMalloc+0x18c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	431a      	orrs	r2, r3
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800764a:	f7fe fef9 	bl	8006440 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <pvPortMalloc+0x17c>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	b672      	cpsid	i
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	b662      	cpsie	i
 800766c:	60fb      	str	r3, [r7, #12]
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	e7fd      	b.n	8007670 <pvPortMalloc+0x178>
	return pvReturn;
 8007674:	69fb      	ldr	r3, [r7, #28]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3728      	adds	r7, #40	@ 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20008d44 	.word	0x20008d44
 8007684:	20008d50 	.word	0x20008d50
 8007688:	20008d48 	.word	0x20008d48
 800768c:	20008d3c 	.word	0x20008d3c
 8007690:	20008d4c 	.word	0x20008d4c

08007694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d04e      	beq.n	8007744 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076a6:	2308      	movs	r3, #8
 80076a8:	425b      	negs	r3, r3
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	4b24      	ldr	r3, [pc, #144]	@ (800774c <vPortFree+0xb8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10d      	bne.n	80076de <vPortFree+0x4a>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	b672      	cpsid	i
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	b662      	cpsie	i
 80076d6:	60fb      	str	r3, [r7, #12]
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00d      	beq.n	8007702 <vPortFree+0x6e>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ea:	b672      	cpsid	i
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	b662      	cpsie	i
 80076fa:	60bb      	str	r3, [r7, #8]
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	e7fd      	b.n	80076fe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	4b11      	ldr	r3, [pc, #68]	@ (800774c <vPortFree+0xb8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d019      	beq.n	8007744 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d115      	bne.n	8007744 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	4b0b      	ldr	r3, [pc, #44]	@ (800774c <vPortFree+0xb8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	43db      	mvns	r3, r3
 8007722:	401a      	ands	r2, r3
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007728:	f7fe fe7c 	bl	8006424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	4b07      	ldr	r3, [pc, #28]	@ (8007750 <vPortFree+0xbc>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4413      	add	r3, r2
 8007736:	4a06      	ldr	r2, [pc, #24]	@ (8007750 <vPortFree+0xbc>)
 8007738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800773a:	6938      	ldr	r0, [r7, #16]
 800773c:	f000 f86c 	bl	8007818 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007740:	f7fe fe7e 	bl	8006440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007744:	bf00      	nop
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20008d50 	.word	0x20008d50
 8007750:	20008d48 	.word	0x20008d48

08007754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800775a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800775e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007760:	4b27      	ldr	r3, [pc, #156]	@ (8007800 <prvHeapInit+0xac>)
 8007762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00c      	beq.n	8007788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3307      	adds	r3, #7
 8007772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0307 	bic.w	r3, r3, #7
 800777a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	4a1f      	ldr	r2, [pc, #124]	@ (8007800 <prvHeapInit+0xac>)
 8007784:	4413      	add	r3, r2
 8007786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800778c:	4a1d      	ldr	r2, [pc, #116]	@ (8007804 <prvHeapInit+0xb0>)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007792:	4b1c      	ldr	r3, [pc, #112]	@ (8007804 <prvHeapInit+0xb0>)
 8007794:	2200      	movs	r2, #0
 8007796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	4413      	add	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077a0:	2208      	movs	r2, #8
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	1a9b      	subs	r3, r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0307 	bic.w	r3, r3, #7
 80077ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4a15      	ldr	r2, [pc, #84]	@ (8007808 <prvHeapInit+0xb4>)
 80077b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077b6:	4b14      	ldr	r3, [pc, #80]	@ (8007808 <prvHeapInit+0xb4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077be:	4b12      	ldr	r3, [pc, #72]	@ (8007808 <prvHeapInit+0xb4>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	1ad2      	subs	r2, r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007808 <prvHeapInit+0xb4>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	4a0a      	ldr	r2, [pc, #40]	@ (800780c <prvHeapInit+0xb8>)
 80077e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4a09      	ldr	r2, [pc, #36]	@ (8007810 <prvHeapInit+0xbc>)
 80077ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077ec:	4b09      	ldr	r3, [pc, #36]	@ (8007814 <prvHeapInit+0xc0>)
 80077ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80077f2:	601a      	str	r2, [r3, #0]
}
 80077f4:	bf00      	nop
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	2000513c 	.word	0x2000513c
 8007804:	20008d3c 	.word	0x20008d3c
 8007808:	20008d44 	.word	0x20008d44
 800780c:	20008d4c 	.word	0x20008d4c
 8007810:	20008d48 	.word	0x20008d48
 8007814:	20008d50 	.word	0x20008d50

08007818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007820:	4b28      	ldr	r3, [pc, #160]	@ (80078c4 <prvInsertBlockIntoFreeList+0xac>)
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e002      	b.n	800782c <prvInsertBlockIntoFreeList+0x14>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d8f7      	bhi.n	8007826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	4413      	add	r3, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	429a      	cmp	r2, r3
 8007846:	d108      	bne.n	800785a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	441a      	add	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d118      	bne.n	80078a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4b15      	ldr	r3, [pc, #84]	@ (80078c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d00d      	beq.n	8007896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	441a      	add	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e008      	b.n	80078a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007896:	4b0c      	ldr	r3, [pc, #48]	@ (80078c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e003      	b.n	80078a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d002      	beq.n	80078b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078b6:	bf00      	nop
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20008d3c 	.word	0x20008d3c
 80078c8:	20008d44 	.word	0x20008d44

080078cc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	461a      	mov	r2, r3
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f002 fa73 	bl	8009dcc <tcpip_send_msg_wait_sem>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80078ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d103      	bne.n	80078fa <netconn_apimsg+0x2e>
    return apimsg->err;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80078f8:	e001      	b.n	80078fe <netconn_apimsg+0x32>
  }
  return err;
 80078fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	@ 0x30
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	603a      	str	r2, [r7, #0]
 8007912:	71fb      	strb	r3, [r7, #7]
 8007914:	460b      	mov	r3, r1
 8007916:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f001 f923 	bl	8008b68 <netconn_alloc>
 8007922:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8007924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d054      	beq.n	80079d4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800792a:	79bb      	ldrb	r3, [r7, #6]
 800792c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800792e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007930:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	4619      	mov	r1, r3
 8007938:	4829      	ldr	r0, [pc, #164]	@ (80079e0 <netconn_new_with_proto_and_callback+0xd8>)
 800793a:	f7ff ffc7 	bl	80078cc <netconn_apimsg>
 800793e:	4603      	mov	r3, r0
 8007940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8007944:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007948:	2b00      	cmp	r3, #0
 800794a:	d043      	beq.n	80079d4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <netconn_new_with_proto_and_callback+0x58>
 8007954:	4b23      	ldr	r3, [pc, #140]	@ (80079e4 <netconn_new_with_proto_and_callback+0xdc>)
 8007956:	22a3      	movs	r2, #163	@ 0xa3
 8007958:	4923      	ldr	r1, [pc, #140]	@ (80079e8 <netconn_new_with_proto_and_callback+0xe0>)
 800795a:	4824      	ldr	r0, [pc, #144]	@ (80079ec <netconn_new_with_proto_and_callback+0xe4>)
 800795c:	f00d fc0a 	bl	8015174 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007962:	3310      	adds	r3, #16
 8007964:	4618      	mov	r0, r3
 8007966:	f00d f9cc 	bl	8014d02 <sys_mbox_valid>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d105      	bne.n	800797c <netconn_new_with_proto_and_callback+0x74>
 8007970:	4b1c      	ldr	r3, [pc, #112]	@ (80079e4 <netconn_new_with_proto_and_callback+0xdc>)
 8007972:	22a4      	movs	r2, #164	@ 0xa4
 8007974:	491e      	ldr	r1, [pc, #120]	@ (80079f0 <netconn_new_with_proto_and_callback+0xe8>)
 8007976:	481d      	ldr	r0, [pc, #116]	@ (80079ec <netconn_new_with_proto_and_callback+0xe4>)
 8007978:	f00d fbfc 	bl	8015174 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800797c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797e:	3314      	adds	r3, #20
 8007980:	4618      	mov	r0, r3
 8007982:	f00d f9be 	bl	8014d02 <sys_mbox_valid>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <netconn_new_with_proto_and_callback+0x90>
 800798c:	4b15      	ldr	r3, [pc, #84]	@ (80079e4 <netconn_new_with_proto_and_callback+0xdc>)
 800798e:	22a6      	movs	r2, #166	@ 0xa6
 8007990:	4918      	ldr	r1, [pc, #96]	@ (80079f4 <netconn_new_with_proto_and_callback+0xec>)
 8007992:	4816      	ldr	r0, [pc, #88]	@ (80079ec <netconn_new_with_proto_and_callback+0xe4>)
 8007994:	f00d fbee 	bl	8015174 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799a:	330c      	adds	r3, #12
 800799c:	4618      	mov	r0, r3
 800799e:	f00d fa41 	bl	8014e24 <sys_sem_valid>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d105      	bne.n	80079b4 <netconn_new_with_proto_and_callback+0xac>
 80079a8:	4b0e      	ldr	r3, [pc, #56]	@ (80079e4 <netconn_new_with_proto_and_callback+0xdc>)
 80079aa:	22a9      	movs	r2, #169	@ 0xa9
 80079ac:	4912      	ldr	r1, [pc, #72]	@ (80079f8 <netconn_new_with_proto_and_callback+0xf0>)
 80079ae:	480f      	ldr	r0, [pc, #60]	@ (80079ec <netconn_new_with_proto_and_callback+0xe4>)
 80079b0:	f00d fbe0 	bl	8015174 <iprintf>
      sys_sem_free(&conn->op_completed);
 80079b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b6:	330c      	adds	r3, #12
 80079b8:	4618      	mov	r0, r3
 80079ba:	f00d fa26 	bl	8014e0a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80079be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c0:	3310      	adds	r3, #16
 80079c2:	4618      	mov	r0, r3
 80079c4:	f00d f916 	bl	8014bf4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80079c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ca:	2007      	movs	r0, #7
 80079cc:	f002 fff0 	bl	800a9b0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	e000      	b.n	80079d6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80079d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3730      	adds	r7, #48	@ 0x30
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	08008b3d 	.word	0x08008b3d
 80079e4:	0801619c 	.word	0x0801619c
 80079e8:	080161d0 	.word	0x080161d0
 80079ec:	080161f4 	.word	0x080161f4
 80079f0:	0801621c 	.word	0x0801621c
 80079f4:	08016234 	.word	0x08016234
 80079f8:	08016258 	.word	0x08016258

080079fc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08c      	sub	sp, #48	@ 0x30
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e014      	b.n	8007a38 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007a12:	2329      	movs	r3, #41	@ 0x29
 8007a14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007a16:	f107 030c 	add.w	r3, r7, #12
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4808      	ldr	r0, [pc, #32]	@ (8007a40 <netconn_prepare_delete+0x44>)
 8007a1e:	f7ff ff55 	bl	80078cc <netconn_apimsg>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007a28:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <netconn_prepare_delete+0x3a>
    return err;
 8007a30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007a34:	e000      	b.n	8007a38 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3730      	adds	r7, #48	@ 0x30
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	080090a9 	.word	0x080090a9

08007a44 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <netconn_delete+0x12>
    return ERR_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	e00d      	b.n	8007a72 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff ffd0 	bl	80079fc <netconn_prepare_delete>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <netconn_delete+0x2a>
    netconn_free(conn);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f8eb 	bl	8008c44 <netconn_free>
  }
  return err;
 8007a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08e      	sub	sp, #56	@ 0x38
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d109      	bne.n	8007aa4 <netconn_bind+0x28>
 8007a90:	4b11      	ldr	r3, [pc, #68]	@ (8007ad8 <netconn_bind+0x5c>)
 8007a92:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8007a96:	4911      	ldr	r1, [pc, #68]	@ (8007adc <netconn_bind+0x60>)
 8007a98:	4811      	ldr	r0, [pc, #68]	@ (8007ae0 <netconn_bind+0x64>)
 8007a9a:	f00d fb6b 	bl	8015174 <iprintf>
 8007a9e:	f06f 030f 	mvn.w	r3, #15
 8007aa2:	e015      	b.n	8007ad0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae4 <netconn_bind+0x68>)
 8007aac:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007aba:	f107 0314 	add.w	r3, r7, #20
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4809      	ldr	r0, [pc, #36]	@ (8007ae8 <netconn_bind+0x6c>)
 8007ac2:	f7ff ff03 	bl	80078cc <netconn_apimsg>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007acc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3738      	adds	r7, #56	@ 0x38
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	0801619c 	.word	0x0801619c
 8007adc:	080162d4 	.word	0x080162d4
 8007ae0:	080161f4 	.word	0x080161f4
 8007ae4:	0801a578 	.word	0x0801a578
 8007ae8:	08009271 	.word	0x08009271

08007aec <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08c      	sub	sp, #48	@ 0x30
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <netconn_listen_with_backlog+0x26>
 8007afe:	4b0d      	ldr	r3, [pc, #52]	@ (8007b34 <netconn_listen_with_backlog+0x48>)
 8007b00:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8007b04:	490c      	ldr	r1, [pc, #48]	@ (8007b38 <netconn_listen_with_backlog+0x4c>)
 8007b06:	480d      	ldr	r0, [pc, #52]	@ (8007b3c <netconn_listen_with_backlog+0x50>)
 8007b08:	f00d fb34 	bl	8015174 <iprintf>
 8007b0c:	f06f 030f 	mvn.w	r3, #15
 8007b10:	e00c      	b.n	8007b2c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007b16:	f107 030c 	add.w	r3, r7, #12
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4808      	ldr	r0, [pc, #32]	@ (8007b40 <netconn_listen_with_backlog+0x54>)
 8007b1e:	f7ff fed5 	bl	80078cc <netconn_apimsg>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007b28:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3730      	adds	r7, #48	@ 0x30
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	0801619c 	.word	0x0801619c
 8007b38:	08016354 	.word	0x08016354
 8007b3c:	080161f4 	.word	0x080161f4
 8007b40:	080092e5 	.word	0x080092e5

08007b44 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d109      	bne.n	8007b68 <netconn_accept+0x24>
 8007b54:	4b3d      	ldr	r3, [pc, #244]	@ (8007c4c <netconn_accept+0x108>)
 8007b56:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8007b5a:	493d      	ldr	r1, [pc, #244]	@ (8007c50 <netconn_accept+0x10c>)
 8007b5c:	483d      	ldr	r0, [pc, #244]	@ (8007c54 <netconn_accept+0x110>)
 8007b5e:	f00d fb09 	bl	8015174 <iprintf>
 8007b62:	f06f 030f 	mvn.w	r3, #15
 8007b66:	e06c      	b.n	8007c42 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d109      	bne.n	8007b88 <netconn_accept+0x44>
 8007b74:	4b35      	ldr	r3, [pc, #212]	@ (8007c4c <netconn_accept+0x108>)
 8007b76:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8007b7a:	4937      	ldr	r1, [pc, #220]	@ (8007c58 <netconn_accept+0x114>)
 8007b7c:	4835      	ldr	r0, [pc, #212]	@ (8007c54 <netconn_accept+0x110>)
 8007b7e:	f00d faf9 	bl	8015174 <iprintf>
 8007b82:	f06f 030f 	mvn.w	r3, #15
 8007b86:	e05c      	b.n	8007c42 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fb6c 	bl	8008266 <netconn_err>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007b92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b9e:	e050      	b.n	8007c42 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3314      	adds	r3, #20
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f00d f8ac 	bl	8014d02 <sys_mbox_valid>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <netconn_accept+0x78>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7f1b      	ldrb	r3, [r3, #28]
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007bbc:	f06f 030e 	mvn.w	r3, #14
 8007bc0:	e03f      	b.n	8007c42 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	7f1b      	ldrb	r3, [r3, #28]
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00e      	beq.n	8007bec <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3314      	adds	r3, #20
 8007bd2:	f107 020c 	add.w	r2, r7, #12
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f00d f876 	bl	8014cca <sys_arch_mbox_tryfetch>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d10a      	bne.n	8007bfc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007be6:	f06f 0306 	mvn.w	r3, #6
 8007bea:	e02a      	b.n	8007c42 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	f107 010c 	add.w	r1, r7, #12
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f00d f828 	bl	8014c4c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <netconn_accept+0xcc>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f107 0213 	add.w	r2, r7, #19
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fb75 	bl	8008308 <lwip_netconn_is_err_msg>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007c24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c28:	e00b      	b.n	8007c42 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007c30:	f06f 030e 	mvn.w	r3, #14
 8007c34:	e005      	b.n	8007c42 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007c40:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	0801619c 	.word	0x0801619c
 8007c50:	08016374 	.word	0x08016374
 8007c54:	080161f4 	.word	0x080161f4
 8007c58:	08016394 	.word	0x08016394

08007c5c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d109      	bne.n	8007c88 <netconn_recv_data+0x2c>
 8007c74:	4b58      	ldr	r3, [pc, #352]	@ (8007dd8 <netconn_recv_data+0x17c>)
 8007c76:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8007c7a:	4958      	ldr	r1, [pc, #352]	@ (8007ddc <netconn_recv_data+0x180>)
 8007c7c:	4858      	ldr	r0, [pc, #352]	@ (8007de0 <netconn_recv_data+0x184>)
 8007c7e:	f00d fa79 	bl	8015174 <iprintf>
 8007c82:	f06f 030f 	mvn.w	r3, #15
 8007c86:	e0a2      	b.n	8007dce <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d109      	bne.n	8007ca8 <netconn_recv_data+0x4c>
 8007c94:	4b50      	ldr	r3, [pc, #320]	@ (8007dd8 <netconn_recv_data+0x17c>)
 8007c96:	f240 224a 	movw	r2, #586	@ 0x24a
 8007c9a:	4952      	ldr	r1, [pc, #328]	@ (8007de4 <netconn_recv_data+0x188>)
 8007c9c:	4850      	ldr	r0, [pc, #320]	@ (8007de0 <netconn_recv_data+0x184>)
 8007c9e:	f00d fa69 	bl	8015174 <iprintf>
 8007ca2:	f06f 030f 	mvn.w	r3, #15
 8007ca6:	e092      	b.n	8007dce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3310      	adds	r3, #16
 8007cac:	4618      	mov	r0, r3
 8007cae:	f00d f828 	bl	8014d02 <sys_mbox_valid>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10e      	bne.n	8007cd6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fad4 	bl	8008266 <netconn_err>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007cc2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007cca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007cce:	e07e      	b.n	8007dce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007cd0:	f06f 030a 	mvn.w	r3, #10
 8007cd4:	e07b      	b.n	8007dce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	7f1b      	ldrb	r3, [r3, #28]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10f      	bne.n	8007d02 <netconn_recv_data+0xa6>
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	7f1b      	ldrb	r3, [r3, #28]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d104      	bne.n	8007d02 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d023      	beq.n	8007d4a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3310      	adds	r3, #16
 8007d06:	f107 0218 	add.w	r2, r7, #24
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f00c ffdc 	bl	8014cca <sys_arch_mbox_tryfetch>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d11f      	bne.n	8007d5a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 faa3 	bl	8008266 <netconn_err>
 8007d20:	4603      	mov	r3, r0
 8007d22:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007d24:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007d2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007d30:	e04d      	b.n	8007dce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	7f1b      	ldrb	r3, [r3, #28]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007d3e:	f06f 030a 	mvn.w	r3, #10
 8007d42:	e044      	b.n	8007dce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007d44:	f06f 0306 	mvn.w	r3, #6
 8007d48:	e041      	b.n	8007dce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3310      	adds	r3, #16
 8007d4e:	f107 0118 	add.w	r1, r7, #24
 8007d52:	2200      	movs	r2, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f00c ff79 	bl	8014c4c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d62:	2b10      	cmp	r3, #16
 8007d64:	d117      	bne.n	8007d96 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	f107 0217 	add.w	r2, r7, #23
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 faca 	bl	8008308 <lwip_netconn_is_err_msg>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d7e:	f113 0f0f 	cmn.w	r3, #15
 8007d82:	d101      	bne.n	8007d88 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	e022      	b.n	8007dce <netconn_recv_data+0x172>
      }
      return err;
 8007d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d8c:	e01f      	b.n	8007dce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	891b      	ldrh	r3, [r3, #8]
 8007d92:	83fb      	strh	r3, [r7, #30]
 8007d94:	e00d      	b.n	8007db2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <netconn_recv_data+0x14e>
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd8 <netconn_recv_data+0x17c>)
 8007d9e:	f240 2291 	movw	r2, #657	@ 0x291
 8007da2:	4911      	ldr	r1, [pc, #68]	@ (8007de8 <netconn_recv_data+0x18c>)
 8007da4:	480e      	ldr	r0, [pc, #56]	@ (8007de0 <netconn_recv_data+0x184>)
 8007da6:	f00d f9e5 	bl	8015174 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	891b      	ldrh	r3, [r3, #8]
 8007db0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <netconn_recv_data+0x16a>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dbe:	8bfa      	ldrh	r2, [r7, #30]
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	0801619c 	.word	0x0801619c
 8007ddc:	080163b4 	.word	0x080163b4
 8007de0:	080161f4 	.word	0x080161f4
 8007de4:	080163d4 	.word	0x080163d4
 8007de8:	080163f0 	.word	0x080163f0

08007dec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <netconn_tcp_recvd_msg+0x1e>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d009      	beq.n	8007e1e <netconn_tcp_recvd_msg+0x32>
 8007e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e3c <netconn_tcp_recvd_msg+0x50>)
 8007e0c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8007e10:	490b      	ldr	r1, [pc, #44]	@ (8007e40 <netconn_tcp_recvd_msg+0x54>)
 8007e12:	480c      	ldr	r0, [pc, #48]	@ (8007e44 <netconn_tcp_recvd_msg+0x58>)
 8007e14:	f00d f9ae 	bl	8015174 <iprintf>
 8007e18:	f06f 030f 	mvn.w	r3, #15
 8007e1c:	e00a      	b.n	8007e34 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	4806      	ldr	r0, [pc, #24]	@ (8007e48 <netconn_tcp_recvd_msg+0x5c>)
 8007e2e:	f7ff fd4d 	bl	80078cc <netconn_apimsg>
 8007e32:	4603      	mov	r3, r0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	0801619c 	.word	0x0801619c
 8007e40:	080163fc 	.word	0x080163fc
 8007e44:	080161f4 	.word	0x080161f4
 8007e48:	08009415 	.word	0x08009415

08007e4c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b090      	sub	sp, #64	@ 0x40
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4613      	mov	r3, r2
 8007e58:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3310      	adds	r3, #16
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f00c ff4f 	bl	8014d02 <sys_mbox_valid>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007e6a:	f06f 030a 	mvn.w	r3, #10
 8007e6e:	e06d      	b.n	8007f4c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	7f1b      	ldrb	r3, [r3, #28]
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	da07      	bge.n	8007e8a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	7f1b      	ldrb	r3, [r3, #28]
 8007e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007e88:	e039      	b.n	8007efe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	68b9      	ldr	r1, [r7, #8]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff fee3 	bl	8007c5c <netconn_recv_data>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8007e9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007ea4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007ea8:	e050      	b.n	8007f4c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10e      	bne.n	8007ed8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <netconn_recv_data_tcp+0x7a>
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec2:	891b      	ldrh	r3, [r3, #8]
 8007ec4:	e000      	b.n	8007ec8 <netconn_recv_data_tcp+0x7c>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007eca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ecc:	f107 0214 	add.w	r2, r7, #20
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff ff8a 	bl	8007dec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d134      	bne.n	8007f48 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	7f1b      	ldrb	r3, [r3, #28]
 8007eec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007ef6:	f06f 0306 	mvn.w	r3, #6
 8007efa:	e027      	b.n	8007f4c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007efc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <netconn_recv_data_tcp+0xc6>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10f      	bne.n	8007f3a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f9a3 	bl	8008266 <netconn_err>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8007f26:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <netconn_recv_data_tcp+0xe8>
          return err;
 8007f2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f32:	e00b      	b.n	8007f4c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8007f34:	f06f 030d 	mvn.w	r3, #13
 8007f38:	e008      	b.n	8007f4c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f955 	bl	80081ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007f42:	f06f 030e 	mvn.w	r3, #14
 8007f46:	e001      	b.n	8007f4c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8007f48:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3740      	adds	r7, #64	@ 0x40
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <netconn_recv+0x28>
 8007f68:	4b32      	ldr	r3, [pc, #200]	@ (8008034 <netconn_recv+0xe0>)
 8007f6a:	f240 3263 	movw	r2, #867	@ 0x363
 8007f6e:	4932      	ldr	r1, [pc, #200]	@ (8008038 <netconn_recv+0xe4>)
 8007f70:	4832      	ldr	r0, [pc, #200]	@ (800803c <netconn_recv+0xe8>)
 8007f72:	f00d f8ff 	bl	8015174 <iprintf>
 8007f76:	f06f 030f 	mvn.w	r3, #15
 8007f7a:	e056      	b.n	800802a <netconn_recv+0xd6>
  *new_buf = NULL;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d109      	bne.n	8007f9c <netconn_recv+0x48>
 8007f88:	4b2a      	ldr	r3, [pc, #168]	@ (8008034 <netconn_recv+0xe0>)
 8007f8a:	f240 3265 	movw	r2, #869	@ 0x365
 8007f8e:	492c      	ldr	r1, [pc, #176]	@ (8008040 <netconn_recv+0xec>)
 8007f90:	482a      	ldr	r0, [pc, #168]	@ (800803c <netconn_recv+0xe8>)
 8007f92:	f00d f8ef 	bl	8015174 <iprintf>
 8007f96:	f06f 030f 	mvn.w	r3, #15
 8007f9a:	e046      	b.n	800802a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d13a      	bne.n	800801e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007fac:	2006      	movs	r0, #6
 8007fae:	f002 fc89 	bl	800a8c4 <memp_malloc>
 8007fb2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <netconn_recv+0x6c>
      return ERR_MEM;
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbe:	e034      	b.n	800802a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8007fc0:	f107 030c 	add.w	r3, r7, #12
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ff3f 	bl	8007e4c <netconn_recv_data_tcp>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007fd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d006      	beq.n	8007fe8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8007fda:	6979      	ldr	r1, [r7, #20]
 8007fdc:	2006      	movs	r0, #6
 8007fde:	f002 fce7 	bl	800a9b0 <memp_free>
      return err;
 8007fe2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fe6:	e020      	b.n	800802a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d106      	bne.n	8007ffc <netconn_recv+0xa8>
 8007fee:	4b11      	ldr	r3, [pc, #68]	@ (8008034 <netconn_recv+0xe0>)
 8007ff0:	f240 3279 	movw	r2, #889	@ 0x379
 8007ff4:	4913      	ldr	r1, [pc, #76]	@ (8008044 <netconn_recv+0xf0>)
 8007ff6:	4811      	ldr	r0, [pc, #68]	@ (800803c <netconn_recv+0xe8>)
 8007ff8:	f00d f8bc 	bl	8015174 <iprintf>

    buf->p = p;
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2200      	movs	r2, #0
 800800c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2200      	movs	r2, #0
 8008012:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	e005      	b.n	800802a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800801e:	2200      	movs	r2, #0
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fe1a 	bl	8007c5c <netconn_recv_data>
 8008028:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	0801619c 	.word	0x0801619c
 8008038:	080163b4 	.word	0x080163b4
 800803c:	080161f4 	.word	0x080161f4
 8008040:	080163d4 	.word	0x080163d4
 8008044:	0801644c 	.word	0x0801644c

08008048 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800805e:	78fa      	ldrb	r2, [r7, #3]
 8008060:	f107 0110 	add.w	r1, r7, #16
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	4613      	mov	r3, r2
 800806a:	2201      	movs	r2, #1
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f805 	bl	800807c <netconn_write_vectors_partly>
 8008072:	4603      	mov	r3, r0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b092      	sub	sp, #72	@ 0x48
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4611      	mov	r1, r2
 8008088:	461a      	mov	r2, r3
 800808a:	460b      	mov	r3, r1
 800808c:	80fb      	strh	r3, [r7, #6]
 800808e:	4613      	mov	r3, r2
 8008090:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d109      	bne.n	80080ac <netconn_write_vectors_partly+0x30>
 8008098:	4b4e      	ldr	r3, [pc, #312]	@ (80081d4 <netconn_write_vectors_partly+0x158>)
 800809a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800809e:	494e      	ldr	r1, [pc, #312]	@ (80081d8 <netconn_write_vectors_partly+0x15c>)
 80080a0:	484e      	ldr	r0, [pc, #312]	@ (80081dc <netconn_write_vectors_partly+0x160>)
 80080a2:	f00d f867 	bl	8015174 <iprintf>
 80080a6:	f06f 030f 	mvn.w	r3, #15
 80080aa:	e08e      	b.n	80081ca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080b4:	2b10      	cmp	r3, #16
 80080b6:	d009      	beq.n	80080cc <netconn_write_vectors_partly+0x50>
 80080b8:	4b46      	ldr	r3, [pc, #280]	@ (80081d4 <netconn_write_vectors_partly+0x158>)
 80080ba:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80080be:	4948      	ldr	r1, [pc, #288]	@ (80081e0 <netconn_write_vectors_partly+0x164>)
 80080c0:	4846      	ldr	r0, [pc, #280]	@ (80081dc <netconn_write_vectors_partly+0x160>)
 80080c2:	f00d f857 	bl	8015174 <iprintf>
 80080c6:	f06f 0305 	mvn.w	r3, #5
 80080ca:	e07e      	b.n	80081ca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	7f1b      	ldrb	r3, [r3, #28]
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <netconn_write_vectors_partly+0x66>
 80080d8:	797b      	ldrb	r3, [r7, #5]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <netconn_write_vectors_partly+0x6a>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <netconn_write_vectors_partly+0x6c>
 80080e6:	2300      	movs	r3, #0
 80080e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80080ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <netconn_write_vectors_partly+0x84>
 80080f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80080fa:	f06f 0305 	mvn.w	r3, #5
 80080fe:	e064      	b.n	80081ca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008104:	2300      	movs	r3, #0
 8008106:	643b      	str	r3, [r7, #64]	@ 0x40
 8008108:	e015      	b.n	8008136 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800810a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008116:	4413      	add	r3, r2
 8008118:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800811a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4413      	add	r3, r2
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008126:	429a      	cmp	r2, r3
 8008128:	d202      	bcs.n	8008130 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800812a:	f06f 0305 	mvn.w	r3, #5
 800812e:	e04c      	b.n	80081ca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008132:	3301      	adds	r3, #1
 8008134:	643b      	str	r3, [r7, #64]	@ 0x40
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800813a:	429a      	cmp	r2, r3
 800813c:	dbe5      	blt.n	800810a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800813e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	e040      	b.n	80081ca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800814a:	2b00      	cmp	r3, #0
 800814c:	da0a      	bge.n	8008164 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800814e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008154:	f06f 0305 	mvn.w	r3, #5
 8008158:	e037      	b.n	80081ca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800815a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800815e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8008160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008162:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008174:	797b      	ldrb	r3, [r7, #5]
 8008176:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800817a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800817c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008182:	f107 0314 	add.w	r3, r7, #20
 8008186:	4619      	mov	r1, r3
 8008188:	4816      	ldr	r0, [pc, #88]	@ (80081e4 <netconn_write_vectors_partly+0x168>)
 800818a:	f7ff fb9f 	bl	80078cc <netconn_apimsg>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8008194:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008198:	2b00      	cmp	r3, #0
 800819a:	d114      	bne.n	80081c6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800819c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80081a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081a6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80081a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80081b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d006      	beq.n	80081c6 <netconn_write_vectors_partly+0x14a>
 80081b8:	4b06      	ldr	r3, [pc, #24]	@ (80081d4 <netconn_write_vectors_partly+0x158>)
 80081ba:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80081be:	490a      	ldr	r1, [pc, #40]	@ (80081e8 <netconn_write_vectors_partly+0x16c>)
 80081c0:	4806      	ldr	r0, [pc, #24]	@ (80081dc <netconn_write_vectors_partly+0x160>)
 80081c2:	f00c ffd7 	bl	8015174 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80081c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3748      	adds	r7, #72	@ 0x48
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	0801619c 	.word	0x0801619c
 80081d8:	08016474 	.word	0x08016474
 80081dc:	080161f4 	.word	0x080161f4
 80081e0:	08016490 	.word	0x08016490
 80081e4:	08009819 	.word	0x08009819
 80081e8:	080164b4 	.word	0x080164b4

080081ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08c      	sub	sp, #48	@ 0x30
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <netconn_close_shutdown+0x26>
 80081fe:	4b0f      	ldr	r3, [pc, #60]	@ (800823c <netconn_close_shutdown+0x50>)
 8008200:	f240 4247 	movw	r2, #1095	@ 0x447
 8008204:	490e      	ldr	r1, [pc, #56]	@ (8008240 <netconn_close_shutdown+0x54>)
 8008206:	480f      	ldr	r0, [pc, #60]	@ (8008244 <netconn_close_shutdown+0x58>)
 8008208:	f00c ffb4 	bl	8015174 <iprintf>
 800820c:	f06f 030f 	mvn.w	r3, #15
 8008210:	e010      	b.n	8008234 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008216:	78fb      	ldrb	r3, [r7, #3]
 8008218:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800821a:	2329      	movs	r3, #41	@ 0x29
 800821c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800821e:	f107 030c 	add.w	r3, r7, #12
 8008222:	4619      	mov	r1, r3
 8008224:	4808      	ldr	r0, [pc, #32]	@ (8008248 <netconn_close_shutdown+0x5c>)
 8008226:	f7ff fb51 	bl	80078cc <netconn_apimsg>
 800822a:	4603      	mov	r3, r0
 800822c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008230:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008234:	4618      	mov	r0, r3
 8008236:	3730      	adds	r7, #48	@ 0x30
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	0801619c 	.word	0x0801619c
 8008240:	080164d8 	.word	0x080164d8
 8008244:	080161f4 	.word	0x080161f4
 8008248:	08009931 	.word	0x08009931

0800824c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008254:	2103      	movs	r1, #3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff ffc8 	bl	80081ec <netconn_close_shutdown>
 800825c:	4603      	mov	r3, r0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <netconn_err+0x12>
    return ERR_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	e00d      	b.n	8008294 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008278:	f00c fe5e 	bl	8014f38 <sys_arch_protect>
 800827c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	7a1b      	ldrb	r3, [r3, #8]
 8008282:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f00c fe62 	bl	8014f54 <sys_arch_unprotect>
  return err;
 8008290:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80082a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082aa:	f113 0f0d 	cmn.w	r3, #13
 80082ae:	d009      	beq.n	80082c4 <lwip_netconn_err_to_msg+0x28>
 80082b0:	f113 0f0d 	cmn.w	r3, #13
 80082b4:	dc0c      	bgt.n	80082d0 <lwip_netconn_err_to_msg+0x34>
 80082b6:	f113 0f0f 	cmn.w	r3, #15
 80082ba:	d007      	beq.n	80082cc <lwip_netconn_err_to_msg+0x30>
 80082bc:	f113 0f0e 	cmn.w	r3, #14
 80082c0:	d002      	beq.n	80082c8 <lwip_netconn_err_to_msg+0x2c>
 80082c2:	e005      	b.n	80082d0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80082c4:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <lwip_netconn_err_to_msg+0x54>)
 80082c6:	e00e      	b.n	80082e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80082c8:	4b0a      	ldr	r3, [pc, #40]	@ (80082f4 <lwip_netconn_err_to_msg+0x58>)
 80082ca:	e00c      	b.n	80082e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80082cc:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <lwip_netconn_err_to_msg+0x5c>)
 80082ce:	e00a      	b.n	80082e6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80082d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d005      	beq.n	80082e4 <lwip_netconn_err_to_msg+0x48>
 80082d8:	4b08      	ldr	r3, [pc, #32]	@ (80082fc <lwip_netconn_err_to_msg+0x60>)
 80082da:	227d      	movs	r2, #125	@ 0x7d
 80082dc:	4908      	ldr	r1, [pc, #32]	@ (8008300 <lwip_netconn_err_to_msg+0x64>)
 80082de:	4809      	ldr	r0, [pc, #36]	@ (8008304 <lwip_netconn_err_to_msg+0x68>)
 80082e0:	f00c ff48 	bl	8015174 <iprintf>
      return NULL;
 80082e4:	2300      	movs	r3, #0
  }
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	08019690 	.word	0x08019690
 80082f4:	08019691 	.word	0x08019691
 80082f8:	08019692 	.word	0x08019692
 80082fc:	080164f4 	.word	0x080164f4
 8008300:	08016528 	.word	0x08016528
 8008304:	08016538 	.word	0x08016538

08008308 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <lwip_netconn_is_err_msg+0x1c>
 8008318:	4b12      	ldr	r3, [pc, #72]	@ (8008364 <lwip_netconn_is_err_msg+0x5c>)
 800831a:	2285      	movs	r2, #133	@ 0x85
 800831c:	4912      	ldr	r1, [pc, #72]	@ (8008368 <lwip_netconn_is_err_msg+0x60>)
 800831e:	4813      	ldr	r0, [pc, #76]	@ (800836c <lwip_netconn_is_err_msg+0x64>)
 8008320:	f00c ff28 	bl	8015174 <iprintf>

  if (msg == &netconn_aborted) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a12      	ldr	r2, [pc, #72]	@ (8008370 <lwip_netconn_is_err_msg+0x68>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d104      	bne.n	8008336 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	22f3      	movs	r2, #243	@ 0xf3
 8008330:	701a      	strb	r2, [r3, #0]
    return 1;
 8008332:	2301      	movs	r3, #1
 8008334:	e012      	b.n	800835c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a0e      	ldr	r2, [pc, #56]	@ (8008374 <lwip_netconn_is_err_msg+0x6c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d104      	bne.n	8008348 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	22f2      	movs	r2, #242	@ 0xf2
 8008342:	701a      	strb	r2, [r3, #0]
    return 1;
 8008344:	2301      	movs	r3, #1
 8008346:	e009      	b.n	800835c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a0b      	ldr	r2, [pc, #44]	@ (8008378 <lwip_netconn_is_err_msg+0x70>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d104      	bne.n	800835a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	22f1      	movs	r2, #241	@ 0xf1
 8008354:	701a      	strb	r2, [r3, #0]
    return 1;
 8008356:	2301      	movs	r3, #1
 8008358:	e000      	b.n	800835c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	080164f4 	.word	0x080164f4
 8008368:	08016560 	.word	0x08016560
 800836c:	08016538 	.word	0x08016538
 8008370:	08019690 	.word	0x08019690
 8008374:	08019691 	.word	0x08019691
 8008378:	08019692 	.word	0x08019692

0800837c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d105      	bne.n	800839c <recv_udp+0x20>
 8008390:	4b34      	ldr	r3, [pc, #208]	@ (8008464 <recv_udp+0xe8>)
 8008392:	22e5      	movs	r2, #229	@ 0xe5
 8008394:	4934      	ldr	r1, [pc, #208]	@ (8008468 <recv_udp+0xec>)
 8008396:	4835      	ldr	r0, [pc, #212]	@ (800846c <recv_udp+0xf0>)
 8008398:	f00c feec 	bl	8015174 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d105      	bne.n	80083ae <recv_udp+0x32>
 80083a2:	4b30      	ldr	r3, [pc, #192]	@ (8008464 <recv_udp+0xe8>)
 80083a4:	22e6      	movs	r2, #230	@ 0xe6
 80083a6:	4932      	ldr	r1, [pc, #200]	@ (8008470 <recv_udp+0xf4>)
 80083a8:	4830      	ldr	r0, [pc, #192]	@ (800846c <recv_udp+0xf0>)
 80083aa:	f00c fee3 	bl	8015174 <iprintf>
  conn = (struct netconn *)arg;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d103      	bne.n	80083c0 <recv_udp+0x44>
    pbuf_free(p);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f003 f99d 	bl	800b6f8 <pbuf_free>
    return;
 80083be:	e04d      	b.n	800845c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d005      	beq.n	80083d6 <recv_udp+0x5a>
 80083ca:	4b26      	ldr	r3, [pc, #152]	@ (8008464 <recv_udp+0xe8>)
 80083cc:	22ee      	movs	r2, #238	@ 0xee
 80083ce:	4929      	ldr	r1, [pc, #164]	@ (8008474 <recv_udp+0xf8>)
 80083d0:	4826      	ldr	r0, [pc, #152]	@ (800846c <recv_udp+0xf0>)
 80083d2:	f00c fecf 	bl	8015174 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	3310      	adds	r3, #16
 80083da:	4618      	mov	r0, r3
 80083dc:	f00c fc91 	bl	8014d02 <sys_mbox_valid>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f003 f986 	bl	800b6f8 <pbuf_free>
    return;
 80083ec:	e036      	b.n	800845c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80083ee:	2006      	movs	r0, #6
 80083f0:	f002 fa68 	bl	800a8c4 <memp_malloc>
 80083f4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <recv_udp+0x88>
    pbuf_free(p);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f003 f97b 	bl	800b6f8 <pbuf_free>
    return;
 8008402:	e02b      	b.n	800845c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <recv_udp+0xa0>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	e000      	b.n	800841e <recv_udp+0xa2>
 800841c:	2300      	movs	r3, #0
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008426:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	891b      	ldrh	r3, [r3, #8]
 800842c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	3310      	adds	r3, #16
 8008432:	69b9      	ldr	r1, [r7, #24]
 8008434:	4618      	mov	r0, r3
 8008436:	f00c fbef 	bl	8014c18 <sys_mbox_trypost>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008440:	69b8      	ldr	r0, [r7, #24]
 8008442:	f001 fb01 	bl	8009a48 <netbuf_delete>
    return;
 8008446:	e009      	b.n	800845c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	d005      	beq.n	800845c <recv_udp+0xe0>
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	8afa      	ldrh	r2, [r7, #22]
 8008456:	2100      	movs	r1, #0
 8008458:	69f8      	ldr	r0, [r7, #28]
 800845a:	4798      	blx	r3
  }
}
 800845c:	3720      	adds	r7, #32
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	080164f4 	.word	0x080164f4
 8008468:	0801656c 	.word	0x0801656c
 800846c:	08016538 	.word	0x08016538
 8008470:	08016590 	.word	0x08016590
 8008474:	080165b0 	.word	0x080165b0

08008478 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d106      	bne.n	800849a <recv_tcp+0x22>
 800848c:	4b36      	ldr	r3, [pc, #216]	@ (8008568 <recv_tcp+0xf0>)
 800848e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008492:	4936      	ldr	r1, [pc, #216]	@ (800856c <recv_tcp+0xf4>)
 8008494:	4836      	ldr	r0, [pc, #216]	@ (8008570 <recv_tcp+0xf8>)
 8008496:	f00c fe6d 	bl	8015174 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <recv_tcp+0x36>
 80084a0:	4b31      	ldr	r3, [pc, #196]	@ (8008568 <recv_tcp+0xf0>)
 80084a2:	f240 122d 	movw	r2, #301	@ 0x12d
 80084a6:	4933      	ldr	r1, [pc, #204]	@ (8008574 <recv_tcp+0xfc>)
 80084a8:	4831      	ldr	r0, [pc, #196]	@ (8008570 <recv_tcp+0xf8>)
 80084aa:	f00c fe63 	bl	8015174 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80084ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d006      	beq.n	80084c4 <recv_tcp+0x4c>
 80084b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008568 <recv_tcp+0xf0>)
 80084b8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80084bc:	492e      	ldr	r1, [pc, #184]	@ (8008578 <recv_tcp+0x100>)
 80084be:	482c      	ldr	r0, [pc, #176]	@ (8008570 <recv_tcp+0xf8>)
 80084c0:	f00c fe58 	bl	8015174 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d102      	bne.n	80084d4 <recv_tcp+0x5c>
    return ERR_VAL;
 80084ce:	f06f 0305 	mvn.w	r3, #5
 80084d2:	e045      	b.n	8008560 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d006      	beq.n	80084ec <recv_tcp+0x74>
 80084de:	4b22      	ldr	r3, [pc, #136]	@ (8008568 <recv_tcp+0xf0>)
 80084e0:	f240 1235 	movw	r2, #309	@ 0x135
 80084e4:	4925      	ldr	r1, [pc, #148]	@ (800857c <recv_tcp+0x104>)
 80084e6:	4822      	ldr	r0, [pc, #136]	@ (8008570 <recv_tcp+0xf8>)
 80084e8:	f00c fe44 	bl	8015174 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	3310      	adds	r3, #16
 80084f0:	4618      	mov	r0, r3
 80084f2:	f00c fc06 	bl	8014d02 <sys_mbox_valid>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10d      	bne.n	8008518 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d008      	beq.n	8008514 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	891b      	ldrh	r3, [r3, #8]
 8008506:	4619      	mov	r1, r3
 8008508:	68b8      	ldr	r0, [r7, #8]
 800850a:	f004 f8ad 	bl	800c668 <tcp_recved>
      pbuf_free(p);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f003 f8f2 	bl	800b6f8 <pbuf_free>
    }
    return ERR_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e023      	b.n	8008560 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <recv_tcp+0xb2>
    msg = p;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	891b      	ldrh	r3, [r3, #8]
 8008526:	83fb      	strh	r3, [r7, #30]
 8008528:	e003      	b.n	8008532 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800852a:	4b15      	ldr	r3, [pc, #84]	@ (8008580 <recv_tcp+0x108>)
 800852c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	3310      	adds	r3, #16
 8008536:	69b9      	ldr	r1, [r7, #24]
 8008538:	4618      	mov	r0, r3
 800853a:	f00c fb6d 	bl	8014c18 <sys_mbox_trypost>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008544:	f04f 33ff 	mov.w	r3, #4294967295
 8008548:	e00a      	b.n	8008560 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854e:	2b00      	cmp	r3, #0
 8008550:	d005      	beq.n	800855e <recv_tcp+0xe6>
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008556:	8bfa      	ldrh	r2, [r7, #30]
 8008558:	2100      	movs	r1, #0
 800855a:	6978      	ldr	r0, [r7, #20]
 800855c:	4798      	blx	r3
  }

  return ERR_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	080164f4 	.word	0x080164f4
 800856c:	080165d0 	.word	0x080165d0
 8008570:	08016538 	.word	0x08016538
 8008574:	080165f4 	.word	0x080165f4
 8008578:	08016614 	.word	0x08016614
 800857c:	0801662c 	.word	0x0801662c
 8008580:	08019692 	.word	0x08019692

08008584 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <poll_tcp+0x22>
 8008598:	4b29      	ldr	r3, [pc, #164]	@ (8008640 <poll_tcp+0xbc>)
 800859a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800859e:	4929      	ldr	r1, [pc, #164]	@ (8008644 <poll_tcp+0xc0>)
 80085a0:	4829      	ldr	r0, [pc, #164]	@ (8008648 <poll_tcp+0xc4>)
 80085a2:	f00c fde7 	bl	8015174 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d104      	bne.n	80085b8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80085ae:	2101      	movs	r1, #1
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 ff65 	bl	8009480 <lwip_netconn_do_writemore>
 80085b6:	e016      	b.n	80085e6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	785b      	ldrb	r3, [r3, #1]
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d112      	bne.n	80085e6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <poll_tcp+0x5a>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	7a5b      	ldrb	r3, [r3, #9]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	7a5a      	ldrb	r2, [r3, #9]
 80085d8:	3a01      	subs	r2, #1
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80085de:	2101      	movs	r1, #1
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fbf7 	bl	8008dd4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	7f1b      	ldrb	r3, [r3, #28]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d021      	beq.n	8008636 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d01d      	beq.n	8008636 <poll_tcp+0xb2>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8008602:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8008606:	d316      	bcc.n	8008636 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008610:	2b04      	cmp	r3, #4
 8008612:	d810      	bhi.n	8008636 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	7f1b      	ldrb	r3, [r3, #28]
 8008618:	f023 0310 	bic.w	r3, r3, #16
 800861c:	b2da      	uxtb	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <poll_tcp+0xb2>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862e:	2200      	movs	r2, #0
 8008630:	2102      	movs	r1, #2
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	080164f4 	.word	0x080164f4
 8008644:	0801664c 	.word	0x0801664c
 8008648:	08016538 	.word	0x08016538

0800864c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d106      	bne.n	8008672 <sent_tcp+0x26>
 8008664:	4b20      	ldr	r3, [pc, #128]	@ (80086e8 <sent_tcp+0x9c>)
 8008666:	f240 1293 	movw	r2, #403	@ 0x193
 800866a:	4920      	ldr	r1, [pc, #128]	@ (80086ec <sent_tcp+0xa0>)
 800866c:	4820      	ldr	r0, [pc, #128]	@ (80086f0 <sent_tcp+0xa4>)
 800866e:	f00c fd81 	bl	8015174 <iprintf>

  if (conn) {
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d032      	beq.n	80086de <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d104      	bne.n	800868a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008680:	2101      	movs	r1, #1
 8008682:	6978      	ldr	r0, [r7, #20]
 8008684:	f000 fefc 	bl	8009480 <lwip_netconn_do_writemore>
 8008688:	e007      	b.n	800869a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	2b04      	cmp	r3, #4
 8008690:	d103      	bne.n	800869a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008692:	2101      	movs	r1, #1
 8008694:	6978      	ldr	r0, [r7, #20]
 8008696:	f000 fb9d 	bl	8008dd4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01d      	beq.n	80086de <sent_tcp+0x92>
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80086aa:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80086ae:	d316      	bcc.n	80086de <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d810      	bhi.n	80086de <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	7f1b      	ldrb	r3, [r3, #28]
 80086c0:	f023 0310 	bic.w	r3, r3, #16
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <sent_tcp+0x92>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	88fa      	ldrh	r2, [r7, #6]
 80086d8:	2102      	movs	r1, #2
 80086da:	6978      	ldr	r0, [r7, #20]
 80086dc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	080164f4 	.word	0x080164f4
 80086ec:	0801664c 	.word	0x0801664c
 80086f0:	08016538 	.word	0x08016538

080086f4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <err_tcp+0x24>
 800870a:	4b5f      	ldr	r3, [pc, #380]	@ (8008888 <err_tcp+0x194>)
 800870c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8008710:	495e      	ldr	r1, [pc, #376]	@ (800888c <err_tcp+0x198>)
 8008712:	485f      	ldr	r0, [pc, #380]	@ (8008890 <err_tcp+0x19c>)
 8008714:	f00c fd2e 	bl	8015174 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008718:	f00c fc0e 	bl	8014f38 <sys_arch_protect>
 800871c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2200      	movs	r2, #0
 8008722:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	7f1b      	ldrb	r3, [r3, #28]
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	b2da      	uxtb	r2, r3
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	2200      	movs	r2, #0
 8008742:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008744:	69b8      	ldr	r0, [r7, #24]
 8008746:	f00c fc05 	bl	8014f54 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <err_tcp+0x6a>
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008756:	2200      	movs	r2, #0
 8008758:	2104      	movs	r1, #4
 800875a:	69f8      	ldr	r0, [r7, #28]
 800875c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008762:	2b00      	cmp	r3, #0
 8008764:	d005      	beq.n	8008772 <err_tcp+0x7e>
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876a:	2200      	movs	r2, #0
 800876c:	2100      	movs	r1, #0
 800876e:	69f8      	ldr	r0, [r7, #28]
 8008770:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <err_tcp+0x92>
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877e:	2200      	movs	r2, #0
 8008780:	2102      	movs	r1, #2
 8008782:	69f8      	ldr	r0, [r7, #28]
 8008784:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fd86 	bl	800829c <lwip_netconn_err_to_msg>
 8008790:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	3310      	adds	r3, #16
 8008796:	4618      	mov	r0, r3
 8008798:	f00c fab3 	bl	8014d02 <sys_mbox_valid>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	3310      	adds	r3, #16
 80087a6:	6939      	ldr	r1, [r7, #16]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f00c fa35 	bl	8014c18 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	3314      	adds	r3, #20
 80087b2:	4618      	mov	r0, r3
 80087b4:	f00c faa5 	bl	8014d02 <sys_mbox_valid>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d005      	beq.n	80087ca <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	3314      	adds	r3, #20
 80087c2:	6939      	ldr	r1, [r7, #16]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f00c fa27 	bl	8014c18 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d005      	beq.n	80087dc <err_tcp+0xe8>
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d002      	beq.n	80087dc <err_tcp+0xe8>
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d143      	bne.n	8008864 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	7f1b      	ldrb	r3, [r3, #28]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf14      	ite	ne
 80087e8:	2301      	movne	r3, #1
 80087ea:	2300      	moveq	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	7f1b      	ldrb	r3, [r3, #28]
 80087f4:	f023 0304 	bic.w	r3, r3, #4
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d13b      	bne.n	800887c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <err_tcp+0x126>
 800880c:	4b1e      	ldr	r3, [pc, #120]	@ (8008888 <err_tcp+0x194>)
 800880e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008812:	4920      	ldr	r1, [pc, #128]	@ (8008894 <err_tcp+0x1a0>)
 8008814:	481e      	ldr	r0, [pc, #120]	@ (8008890 <err_tcp+0x19c>)
 8008816:	f00c fcad 	bl	8015174 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d104      	bne.n	800882a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	6a1b      	ldr	r3, [r3, #32]
 8008824:	2200      	movs	r2, #0
 8008826:	711a      	strb	r2, [r3, #4]
 8008828:	e003      	b.n	8008832 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	330c      	adds	r3, #12
 800883a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800883c:	68b8      	ldr	r0, [r7, #8]
 800883e:	f00c faf1 	bl	8014e24 <sys_sem_valid>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d106      	bne.n	8008856 <err_tcp+0x162>
 8008848:	4b0f      	ldr	r3, [pc, #60]	@ (8008888 <err_tcp+0x194>)
 800884a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800884e:	4912      	ldr	r1, [pc, #72]	@ (8008898 <err_tcp+0x1a4>)
 8008850:	480f      	ldr	r0, [pc, #60]	@ (8008890 <err_tcp+0x19c>)
 8008852:	f00c fc8f 	bl	8015174 <iprintf>
      conn->current_msg = NULL;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	2200      	movs	r2, #0
 800885a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800885c:	68b8      	ldr	r0, [r7, #8]
 800885e:	f00c fac7 	bl	8014df0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008862:	e00b      	b.n	800887c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <err_tcp+0x18a>
 800886c:	4b06      	ldr	r3, [pc, #24]	@ (8008888 <err_tcp+0x194>)
 800886e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8008872:	490a      	ldr	r1, [pc, #40]	@ (800889c <err_tcp+0x1a8>)
 8008874:	4806      	ldr	r0, [pc, #24]	@ (8008890 <err_tcp+0x19c>)
 8008876:	f00c fc7d 	bl	8015174 <iprintf>
  }
}
 800887a:	e000      	b.n	800887e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800887c:	bf00      	nop
}
 800887e:	bf00      	nop
 8008880:	3720      	adds	r7, #32
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	080164f4 	.word	0x080164f4
 800888c:	0801664c 	.word	0x0801664c
 8008890:	08016538 	.word	0x08016538
 8008894:	0801665c 	.word	0x0801665c
 8008898:	08016678 	.word	0x08016678
 800889c:	08016694 	.word	0x08016694

080088a0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f004 fda1 	bl	800d3f8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80088b6:	490a      	ldr	r1, [pc, #40]	@ (80088e0 <setup_tcp+0x40>)
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f004 fdaf 	bl	800d41c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80088be:	4909      	ldr	r1, [pc, #36]	@ (80088e4 <setup_tcp+0x44>)
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f004 fdcd 	bl	800d460 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80088c6:	2202      	movs	r2, #2
 80088c8:	4907      	ldr	r1, [pc, #28]	@ (80088e8 <setup_tcp+0x48>)
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f004 fe24 	bl	800d518 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80088d0:	4906      	ldr	r1, [pc, #24]	@ (80088ec <setup_tcp+0x4c>)
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f004 fde6 	bl	800d4a4 <tcp_err>
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	08008479 	.word	0x08008479
 80088e4:	0800864d 	.word	0x0800864d
 80088e8:	08008585 	.word	0x08008585
 80088ec:	080086f5 	.word	0x080086f5

080088f0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80088f0:	b590      	push	{r4, r7, lr}
 80088f2:	b089      	sub	sp, #36	@ 0x24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4613      	mov	r3, r2
 80088fc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <accept_function+0x1e>
    return ERR_VAL;
 8008908:	f06f 0305 	mvn.w	r3, #5
 800890c:	e0a1      	b.n	8008a52 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	3314      	adds	r3, #20
 8008912:	4618      	mov	r0, r3
 8008914:	f00c f9f5 	bl	8014d02 <sys_mbox_valid>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800891e:	f06f 0305 	mvn.w	r3, #5
 8008922:	e096      	b.n	8008a52 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d11b      	bne.n	8008962 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	f103 0414 	add.w	r4, r3, #20
 8008930:	f06f 000c 	mvn.w	r0, #12
 8008934:	f7ff fcb2 	bl	800829c <lwip_netconn_err_to_msg>
 8008938:	4603      	mov	r3, r0
 800893a:	4619      	mov	r1, r3
 800893c:	4620      	mov	r0, r4
 800893e:	f00c f96b 	bl	8014c18 <sys_mbox_trypost>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <accept_function+0x6c>
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008954:	2200      	movs	r2, #0
 8008956:	2100      	movs	r1, #0
 8008958:	69f8      	ldr	r0, [r7, #28]
 800895a:	4798      	blx	r3
    }
    return ERR_VAL;
 800895c:	f06f 0305 	mvn.w	r3, #5
 8008960:	e077      	b.n	8008a52 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d006      	beq.n	8008978 <accept_function+0x88>
 800896a:	4b3c      	ldr	r3, [pc, #240]	@ (8008a5c <accept_function+0x16c>)
 800896c:	f240 222a 	movw	r2, #554	@ 0x22a
 8008970:	493b      	ldr	r1, [pc, #236]	@ (8008a60 <accept_function+0x170>)
 8008972:	483c      	ldr	r0, [pc, #240]	@ (8008a64 <accept_function+0x174>)
 8008974:	f00c fbfe 	bl	8015174 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	781a      	ldrb	r2, [r3, #0]
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008980:	4619      	mov	r1, r3
 8008982:	4610      	mov	r0, r2
 8008984:	f000 f8f0 	bl	8008b68 <netconn_alloc>
 8008988:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d11b      	bne.n	80089c8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f103 0414 	add.w	r4, r3, #20
 8008996:	f06f 000c 	mvn.w	r0, #12
 800899a:	f7ff fc7f 	bl	800829c <lwip_netconn_err_to_msg>
 800899e:	4603      	mov	r3, r0
 80089a0:	4619      	mov	r1, r3
 80089a2:	4620      	mov	r0, r4
 80089a4:	f00c f938 	bl	8014c18 <sys_mbox_trypost>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d005      	beq.n	80089c2 <accept_function+0xd2>
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	69f8      	ldr	r0, [r7, #28]
 80089c0:	4798      	blx	r3
    }
    return ERR_MEM;
 80089c2:	f04f 33ff 	mov.w	r3, #4294967295
 80089c6:	e044      	b.n	8008a52 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80089ce:	69b8      	ldr	r0, [r7, #24]
 80089d0:	f7ff ff66 	bl	80088a0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	3314      	adds	r3, #20
 80089d8:	69b9      	ldr	r1, [r7, #24]
 80089da:	4618      	mov	r0, r3
 80089dc:	f00c f91c 	bl	8014c18 <sys_mbox_trypost>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d02a      	beq.n	8008a3c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80089ec:	2100      	movs	r1, #0
 80089ee:	6978      	ldr	r0, [r7, #20]
 80089f0:	f004 fd02 	bl	800d3f8 <tcp_arg>
    tcp_recv(pcb, NULL);
 80089f4:	2100      	movs	r1, #0
 80089f6:	6978      	ldr	r0, [r7, #20]
 80089f8:	f004 fd10 	bl	800d41c <tcp_recv>
    tcp_sent(pcb, NULL);
 80089fc:	2100      	movs	r1, #0
 80089fe:	6978      	ldr	r0, [r7, #20]
 8008a00:	f004 fd2e 	bl	800d460 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	6978      	ldr	r0, [r7, #20]
 8008a0a:	f004 fd85 	bl	800d518 <tcp_poll>
    tcp_err(pcb, NULL);
 8008a0e:	2100      	movs	r1, #0
 8008a10:	6978      	ldr	r0, [r7, #20]
 8008a12:	f004 fd47 	bl	800d4a4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	3310      	adds	r3, #16
 8008a20:	4618      	mov	r0, r3
 8008a22:	f00c f8e7 	bl	8014bf4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	3310      	adds	r3, #16
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f00c f97a 	bl	8014d24 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008a30:	69b8      	ldr	r0, [r7, #24]
 8008a32:	f000 f907 	bl	8008c44 <netconn_free>
    return ERR_MEM;
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3a:	e00a      	b.n	8008a52 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <accept_function+0x160>
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	69f8      	ldr	r0, [r7, #28]
 8008a4e:	4798      	blx	r3
  }

  return ERR_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3724      	adds	r7, #36	@ 0x24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd90      	pop	{r4, r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	080164f4 	.word	0x080164f4
 8008a60:	080166b0 	.word	0x080166b0
 8008a64:	08016538 	.word	0x08016538

08008a68 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d006      	beq.n	8008a8c <pcb_new+0x24>
 8008a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8008b2c <pcb_new+0xc4>)
 8008a80:	f240 2265 	movw	r2, #613	@ 0x265
 8008a84:	492a      	ldr	r1, [pc, #168]	@ (8008b30 <pcb_new+0xc8>)
 8008a86:	482b      	ldr	r0, [pc, #172]	@ (8008b34 <pcb_new+0xcc>)
 8008a88:	f00c fb74 	bl	8015174 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a96:	2b10      	cmp	r3, #16
 8008a98:	d022      	beq.n	8008ae0 <pcb_new+0x78>
 8008a9a:	2b20      	cmp	r3, #32
 8008a9c:	d133      	bne.n	8008b06 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681c      	ldr	r4, [r3, #0]
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f009 fd80 	bl	80125aa <udp_new_ip_type>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d02a      	beq.n	8008b0e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b22      	cmp	r3, #34	@ 0x22
 8008ac0:	d104      	bne.n	8008acc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6858      	ldr	r0, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4917      	ldr	r1, [pc, #92]	@ (8008b38 <pcb_new+0xd0>)
 8008ada:	f009 fced 	bl	80124b8 <udp_recv>
      }
      break;
 8008ade:	e016      	b.n	8008b0e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681c      	ldr	r4, [r3, #0]
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f004 fc78 	bl	800d3dc <tcp_new_ip_type>
 8008aec:	4603      	mov	r3, r0
 8008aee:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00b      	beq.n	8008b12 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fece 	bl	80088a0 <setup_tcp>
      }
      break;
 8008b04:	e005      	b.n	8008b12 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	22fa      	movs	r2, #250	@ 0xfa
 8008b0a:	711a      	strb	r2, [r3, #4]
      return;
 8008b0c:	e00a      	b.n	8008b24 <pcb_new+0xbc>
      break;
 8008b0e:	bf00      	nop
 8008b10:	e000      	b.n	8008b14 <pcb_new+0xac>
      break;
 8008b12:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d102      	bne.n	8008b24 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	22ff      	movs	r2, #255	@ 0xff
 8008b22:	711a      	strb	r2, [r3, #4]
  }
}
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd90      	pop	{r4, r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	080164f4 	.word	0x080164f4
 8008b30:	080166d8 	.word	0x080166d8
 8008b34:	08016538 	.word	0x08016538
 8008b38:	0800837d 	.word	0x0800837d

08008b3c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7ff ff85 	bl	8008a68 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008b78:	2007      	movs	r0, #7
 8008b7a:	f001 fea3 	bl	800a8c4 <memp_malloc>
 8008b7e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <netconn_alloc+0x22>
    return NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e052      	b.n	8008c30 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	79fa      	ldrb	r2, [r7, #7]
 8008b94:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d004      	beq.n	8008bb0 <netconn_alloc+0x48>
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	d105      	bne.n	8008bb6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008baa:	2306      	movs	r3, #6
 8008bac:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008bae:	e00a      	b.n	8008bc6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008bb0:	2306      	movs	r3, #6
 8008bb2:	617b      	str	r3, [r7, #20]
      break;
 8008bb4:	e007      	b.n	8008bc6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008bb6:	4b20      	ldr	r3, [pc, #128]	@ (8008c38 <netconn_alloc+0xd0>)
 8008bb8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8008bbc:	491f      	ldr	r1, [pc, #124]	@ (8008c3c <netconn_alloc+0xd4>)
 8008bbe:	4820      	ldr	r0, [pc, #128]	@ (8008c40 <netconn_alloc+0xd8>)
 8008bc0:	f00c fad8 	bl	8015174 <iprintf>
      goto free_and_return;
 8008bc4:	e02f      	b.n	8008c26 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3310      	adds	r3, #16
 8008bca:	6979      	ldr	r1, [r7, #20]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f00b ffef 	bl	8014bb0 <sys_mbox_new>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d125      	bne.n	8008c24 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	330c      	adds	r3, #12
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f00c f8ad 	bl	8014d3e <sys_sem_new>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d005      	beq.n	8008bf6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3310      	adds	r3, #16
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f00c f800 	bl	8014bf4 <sys_mbox_free>
    goto free_and_return;
 8008bf4:	e017      	b.n	8008c26 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3314      	adds	r3, #20
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f00c f892 	bl	8014d24 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	7cfa      	ldrb	r2, [r7, #19]
 8008c1e:	771a      	strb	r2, [r3, #28]
  return conn;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	e005      	b.n	8008c30 <netconn_alloc+0xc8>
    goto free_and_return;
 8008c24:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008c26:	68f9      	ldr	r1, [r7, #12]
 8008c28:	2007      	movs	r0, #7
 8008c2a:	f001 fec1 	bl	800a9b0 <memp_free>
  return NULL;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	080164f4 	.word	0x080164f4
 8008c3c:	080166f8 	.word	0x080166f8
 8008c40:	08016538 	.word	0x08016538

08008c44 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d006      	beq.n	8008c62 <netconn_free+0x1e>
 8008c54:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc4 <netconn_free+0x80>)
 8008c56:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008c5a:	491b      	ldr	r1, [pc, #108]	@ (8008cc8 <netconn_free+0x84>)
 8008c5c:	481b      	ldr	r0, [pc, #108]	@ (8008ccc <netconn_free+0x88>)
 8008c5e:	f00c fa89 	bl	8015174 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3310      	adds	r3, #16
 8008c66:	4618      	mov	r0, r3
 8008c68:	f00c f84b 	bl	8014d02 <sys_mbox_valid>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <netconn_free+0x3c>
 8008c72:	4b14      	ldr	r3, [pc, #80]	@ (8008cc4 <netconn_free+0x80>)
 8008c74:	f240 3223 	movw	r2, #803	@ 0x323
 8008c78:	4915      	ldr	r1, [pc, #84]	@ (8008cd0 <netconn_free+0x8c>)
 8008c7a:	4814      	ldr	r0, [pc, #80]	@ (8008ccc <netconn_free+0x88>)
 8008c7c:	f00c fa7a 	bl	8015174 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3314      	adds	r3, #20
 8008c84:	4618      	mov	r0, r3
 8008c86:	f00c f83c 	bl	8014d02 <sys_mbox_valid>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d006      	beq.n	8008c9e <netconn_free+0x5a>
 8008c90:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc4 <netconn_free+0x80>)
 8008c92:	f240 3226 	movw	r2, #806	@ 0x326
 8008c96:	490f      	ldr	r1, [pc, #60]	@ (8008cd4 <netconn_free+0x90>)
 8008c98:	480c      	ldr	r0, [pc, #48]	@ (8008ccc <netconn_free+0x88>)
 8008c9a:	f00c fa6b 	bl	8015174 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	330c      	adds	r3, #12
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f00c f8b1 	bl	8014e0a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	330c      	adds	r3, #12
 8008cac:	4618      	mov	r0, r3
 8008cae:	f00c f8ca 	bl	8014e46 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	2007      	movs	r0, #7
 8008cb6:	f001 fe7b 	bl	800a9b0 <memp_free>
}
 8008cba:	bf00      	nop
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	080164f4 	.word	0x080164f4
 8008cc8:	08016720 	.word	0x08016720
 8008ccc:	08016538 	.word	0x08016538
 8008cd0:	08016750 	.word	0x08016750
 8008cd4:	0801678c 	.word	0x0801678c

08008cd8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f00c f80c 	bl	8014d02 <sys_mbox_valid>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d02f      	beq.n	8008d50 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008cf0:	e018      	b.n	8008d24 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008cfa:	2b10      	cmp	r3, #16
 8008cfc:	d10e      	bne.n	8008d1c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f107 020f 	add.w	r2, r7, #15
 8008d04:	4611      	mov	r1, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fafe 	bl	8008308 <lwip_netconn_is_err_msg>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d108      	bne.n	8008d24 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f002 fcef 	bl	800b6f8 <pbuf_free>
 8008d1a:	e003      	b.n	8008d24 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fe92 	bl	8009a48 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3310      	adds	r3, #16
 8008d28:	f107 0210 	add.w	r2, r7, #16
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f00b ffcb 	bl	8014cca <sys_arch_mbox_tryfetch>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	d1da      	bne.n	8008cf2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3310      	adds	r3, #16
 8008d40:	4618      	mov	r0, r3
 8008d42:	f00b ff57 	bl	8014bf4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3310      	adds	r3, #16
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f00b ffea 	bl	8014d24 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3314      	adds	r3, #20
 8008d54:	4618      	mov	r0, r3
 8008d56:	f00b ffd4 	bl	8014d02 <sys_mbox_valid>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d034      	beq.n	8008dca <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d60:	e01d      	b.n	8008d9e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f107 020e 	add.w	r2, r7, #14
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff facc 	bl	8008308 <lwip_netconn_is_err_msg>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d113      	bne.n	8008d9e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008d7a:	6978      	ldr	r0, [r7, #20]
 8008d7c:	f7ff ffac 	bl	8008cd8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d007      	beq.n	8008d98 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f003 faa3 	bl	800c2d8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2200      	movs	r2, #0
 8008d96:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008d98:	6978      	ldr	r0, [r7, #20]
 8008d9a:	f7ff ff53 	bl	8008c44 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3314      	adds	r3, #20
 8008da2:	f107 0210 	add.w	r2, r7, #16
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f00b ff8e 	bl	8014cca <sys_arch_mbox_tryfetch>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db4:	d1d5      	bne.n	8008d62 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3314      	adds	r3, #20
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f00b ff1a 	bl	8014bf4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3314      	adds	r3, #20
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f00b ffad 	bl	8014d24 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008dca:	bf00      	nop
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <lwip_netconn_do_close_internal+0x24>
 8008dea:	4b87      	ldr	r3, [pc, #540]	@ (8009008 <lwip_netconn_do_close_internal+0x234>)
 8008dec:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8008df0:	4986      	ldr	r1, [pc, #536]	@ (800900c <lwip_netconn_do_close_internal+0x238>)
 8008df2:	4887      	ldr	r0, [pc, #540]	@ (8009010 <lwip_netconn_do_close_internal+0x23c>)
 8008df4:	f00c f9be 	bl	8015174 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e00:	2b10      	cmp	r3, #16
 8008e02:	d006      	beq.n	8008e12 <lwip_netconn_do_close_internal+0x3e>
 8008e04:	4b80      	ldr	r3, [pc, #512]	@ (8009008 <lwip_netconn_do_close_internal+0x234>)
 8008e06:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8008e0a:	4982      	ldr	r1, [pc, #520]	@ (8009014 <lwip_netconn_do_close_internal+0x240>)
 8008e0c:	4880      	ldr	r0, [pc, #512]	@ (8009010 <lwip_netconn_do_close_internal+0x23c>)
 8008e0e:	f00c f9b1 	bl	8015174 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d006      	beq.n	8008e28 <lwip_netconn_do_close_internal+0x54>
 8008e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8009008 <lwip_netconn_do_close_internal+0x234>)
 8008e1c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8008e20:	497d      	ldr	r1, [pc, #500]	@ (8009018 <lwip_netconn_do_close_internal+0x244>)
 8008e22:	487b      	ldr	r0, [pc, #492]	@ (8009010 <lwip_netconn_do_close_internal+0x23c>)
 8008e24:	f00c f9a6 	bl	8015174 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <lwip_netconn_do_close_internal+0x6a>
 8008e30:	4b75      	ldr	r3, [pc, #468]	@ (8009008 <lwip_netconn_do_close_internal+0x234>)
 8008e32:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8008e36:	4979      	ldr	r1, [pc, #484]	@ (800901c <lwip_netconn_do_close_internal+0x248>)
 8008e38:	4875      	ldr	r0, [pc, #468]	@ (8009010 <lwip_netconn_do_close_internal+0x23c>)
 8008e3a:	f00c f99b 	bl	8015174 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <lwip_netconn_do_close_internal+0x80>
 8008e46:	4b70      	ldr	r3, [pc, #448]	@ (8009008 <lwip_netconn_do_close_internal+0x234>)
 8008e48:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008e4c:	4974      	ldr	r1, [pc, #464]	@ (8009020 <lwip_netconn_do_close_internal+0x24c>)
 8008e4e:	4870      	ldr	r0, [pc, #448]	@ (8009010 <lwip_netconn_do_close_internal+0x23c>)
 8008e50:	f00c f990 	bl	8015174 <iprintf>

  tpcb = conn->pcb.tcp;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	7a1b      	ldrb	r3, [r3, #8]
 8008e60:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d102      	bne.n	8008e7e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75bb      	strb	r3, [r7, #22]
 8008e7c:	e01f      	b.n	8008ebe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00e      	beq.n	8008ea2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008e88:	2b05      	cmp	r3, #5
 8008e8a:	d007      	beq.n	8008e9c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008e90:	2b06      	cmp	r3, #6
 8008e92:	d003      	beq.n	8008e9c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d102      	bne.n	8008ea2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	75bb      	strb	r3, [r7, #22]
 8008ea0:	e00d      	b.n	8008ebe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008ea2:	7b7b      	ldrb	r3, [r7, #13]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d008      	beq.n	8008eba <lwip_netconn_do_close_internal+0xe6>
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	8b5b      	ldrh	r3, [r3, #26]
 8008eac:	f003 0310 	and.w	r3, r3, #16
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	75bb      	strb	r3, [r7, #22]
 8008eb8:	e001      	b.n	8008ebe <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008ebe:	7dbb      	ldrb	r3, [r7, #22]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6938      	ldr	r0, [r7, #16]
 8008ec8:	f004 fa96 	bl	800d3f8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	7d1b      	ldrb	r3, [r3, #20]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d104      	bne.n	8008ede <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6938      	ldr	r0, [r7, #16]
 8008ed8:	f004 fb06 	bl	800d4e8 <tcp_accept>
 8008edc:	e01d      	b.n	8008f1a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d007      	beq.n	8008ef4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	6938      	ldr	r0, [r7, #16]
 8008ee8:	f004 fa98 	bl	800d41c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008eec:	2100      	movs	r1, #0
 8008eee:	6938      	ldr	r0, [r7, #16]
 8008ef0:	f004 fafa 	bl	800d4e8 <tcp_accept>
    }
    if (shut_tx) {
 8008ef4:	7b7b      	ldrb	r3, [r7, #13]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008efa:	2100      	movs	r1, #0
 8008efc:	6938      	ldr	r0, [r7, #16]
 8008efe:	f004 faaf 	bl	800d460 <tcp_sent>
    }
    if (shut_close) {
 8008f02:	7dbb      	ldrb	r3, [r7, #22]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d008      	beq.n	8008f1a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	6938      	ldr	r0, [r7, #16]
 8008f0e:	f004 fb03 	bl	800d518 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008f12:	2100      	movs	r1, #0
 8008f14:	6938      	ldr	r0, [r7, #16]
 8008f16:	f004 fac5 	bl	800d4a4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008f1a:	7dbb      	ldrb	r3, [r7, #22]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d005      	beq.n	8008f2c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008f20:	6938      	ldr	r0, [r7, #16]
 8008f22:	f003 f893 	bl	800c04c <tcp_close>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]
 8008f2a:	e007      	b.n	8008f3c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	7b7a      	ldrb	r2, [r7, #13]
 8008f30:	4619      	mov	r1, r3
 8008f32:	6938      	ldr	r0, [r7, #16]
 8008f34:	f003 f8b6 	bl	800c0a4 <tcp_shutdown>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008f3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d102      	bne.n	8008f4a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008f44:	2301      	movs	r3, #1
 8008f46:	757b      	strb	r3, [r7, #21]
 8008f48:	e016      	b.n	8008f78 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f52:	d10f      	bne.n	8008f74 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	7a5b      	ldrb	r3, [r3, #9]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10c      	bne.n	8008f78 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8008f62:	7dbb      	ldrb	r3, [r7, #22]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d007      	beq.n	8008f78 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008f68:	6938      	ldr	r0, [r7, #16]
 8008f6a:	f003 f9b5 	bl	800c2d8 <tcp_abort>
          err = ERR_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	75fb      	strb	r3, [r7, #23]
 8008f72:	e001      	b.n	8008f78 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008f74:	2301      	movs	r3, #1
 8008f76:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008f78:	7d7b      	ldrb	r3, [r7, #21]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d052      	beq.n	8009024 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	330c      	adds	r3, #12
 8008f86:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	7dfa      	ldrb	r2, [r7, #23]
 8008f8e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d129      	bne.n	8008ff8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008fa4:	7dbb      	ldrb	r3, [r7, #22]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00c      	beq.n	8008fc4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <lwip_netconn_do_close_internal+0x1f0>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2104      	movs	r1, #4
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	4798      	blx	r3
      }
      if (shut_rx) {
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d009      	beq.n	8008fde <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <lwip_netconn_do_close_internal+0x20a>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	4798      	blx	r3
      }
      if (shut_tx) {
 8008fde:	7b7b      	ldrb	r3, [r7, #13]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d009      	beq.n	8008ff8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <lwip_netconn_do_close_internal+0x224>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2102      	movs	r1, #2
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008ffe:	68b8      	ldr	r0, [r7, #8]
 8009000:	f00b fef6 	bl	8014df0 <sys_sem_signal>
    }
    return ERR_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	e03c      	b.n	8009082 <lwip_netconn_do_close_internal+0x2ae>
 8009008:	080164f4 	.word	0x080164f4
 800900c:	080167c8 	.word	0x080167c8
 8009010:	08016538 	.word	0x08016538
 8009014:	080167d8 	.word	0x080167d8
 8009018:	080167f8 	.word	0x080167f8
 800901c:	0801681c 	.word	0x0801681c
 8009020:	0801665c 	.word	0x0801665c
  }
  if (!close_finished) {
 8009024:	7d7b      	ldrb	r3, [r7, #21]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d11e      	bne.n	8009068 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	7d1b      	ldrb	r3, [r3, #20]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d106      	bne.n	8009040 <lwip_netconn_do_close_internal+0x26c>
 8009032:	4b16      	ldr	r3, [pc, #88]	@ (800908c <lwip_netconn_do_close_internal+0x2b8>)
 8009034:	f240 4241 	movw	r2, #1089	@ 0x441
 8009038:	4915      	ldr	r1, [pc, #84]	@ (8009090 <lwip_netconn_do_close_internal+0x2bc>)
 800903a:	4816      	ldr	r0, [pc, #88]	@ (8009094 <lwip_netconn_do_close_internal+0x2c0>)
 800903c:	f00c f89a 	bl	8015174 <iprintf>
    if (shut_tx) {
 8009040:	7b7b      	ldrb	r3, [r7, #13]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009046:	4914      	ldr	r1, [pc, #80]	@ (8009098 <lwip_netconn_do_close_internal+0x2c4>)
 8009048:	6938      	ldr	r0, [r7, #16]
 800904a:	f004 fa09 	bl	800d460 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800904e:	2201      	movs	r2, #1
 8009050:	4912      	ldr	r1, [pc, #72]	@ (800909c <lwip_netconn_do_close_internal+0x2c8>)
 8009052:	6938      	ldr	r0, [r7, #16]
 8009054:	f004 fa60 	bl	800d518 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009058:	4911      	ldr	r1, [pc, #68]	@ (80090a0 <lwip_netconn_do_close_internal+0x2cc>)
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f004 fa22 	bl	800d4a4 <tcp_err>
    tcp_arg(tpcb, conn);
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	6938      	ldr	r0, [r7, #16]
 8009064:	f004 f9c8 	bl	800d3f8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d106      	bne.n	800907e <lwip_netconn_do_close_internal+0x2aa>
 8009070:	4b06      	ldr	r3, [pc, #24]	@ (800908c <lwip_netconn_do_close_internal+0x2b8>)
 8009072:	f240 424d 	movw	r2, #1101	@ 0x44d
 8009076:	490b      	ldr	r1, [pc, #44]	@ (80090a4 <lwip_netconn_do_close_internal+0x2d0>)
 8009078:	4806      	ldr	r0, [pc, #24]	@ (8009094 <lwip_netconn_do_close_internal+0x2c0>)
 800907a:	f00c f87b 	bl	8015174 <iprintf>
  return err;
 800907e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	080164f4 	.word	0x080164f4
 8009090:	08016830 	.word	0x08016830
 8009094:	08016538 	.word	0x08016538
 8009098:	0800864d 	.word	0x0800864d
 800909c:	08008585 	.word	0x08008585
 80090a0:	080086f5 	.word	0x080086f5
 80090a4:	08016854 	.word	0x08016854

080090a8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	785b      	ldrb	r3, [r3, #1]
 80090ba:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00d      	beq.n	80090de <lwip_netconn_do_delconn+0x36>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090cc:	2b10      	cmp	r3, #16
 80090ce:	d006      	beq.n	80090de <lwip_netconn_do_delconn+0x36>
 80090d0:	4b60      	ldr	r3, [pc, #384]	@ (8009254 <lwip_netconn_do_delconn+0x1ac>)
 80090d2:	f240 425e 	movw	r2, #1118	@ 0x45e
 80090d6:	4960      	ldr	r1, [pc, #384]	@ (8009258 <lwip_netconn_do_delconn+0x1b0>)
 80090d8:	4860      	ldr	r0, [pc, #384]	@ (800925c <lwip_netconn_do_delconn+0x1b4>)
 80090da:	f00c f84b 	bl	8015174 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80090de:	7afb      	ldrb	r3, [r7, #11]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <lwip_netconn_do_delconn+0x48>
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d002      	beq.n	80090f0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d109      	bne.n	8009104 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80090f0:	7afb      	ldrb	r3, [r7, #11]
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d10a      	bne.n	800910c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	7f1b      	ldrb	r3, [r3, #28]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	22fb      	movs	r2, #251	@ 0xfb
 8009108:	711a      	strb	r2, [r3, #4]
 800910a:	e097      	b.n	800923c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	2b03      	cmp	r3, #3
 8009110:	d10d      	bne.n	800912e <lwip_netconn_do_delconn+0x86>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	7f1b      	ldrb	r3, [r3, #28]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <lwip_netconn_do_delconn+0x86>
 8009120:	4b4c      	ldr	r3, [pc, #304]	@ (8009254 <lwip_netconn_do_delconn+0x1ac>)
 8009122:	f240 427a 	movw	r2, #1146	@ 0x47a
 8009126:	494e      	ldr	r1, [pc, #312]	@ (8009260 <lwip_netconn_do_delconn+0x1b8>)
 8009128:	484c      	ldr	r0, [pc, #304]	@ (800925c <lwip_netconn_do_delconn+0x1b4>)
 800912a:	f00c f823 	bl	8015174 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff fdcd 	bl	8008cd8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d05f      	beq.n	8009208 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009152:	2b10      	cmp	r3, #16
 8009154:	d00d      	beq.n	8009172 <lwip_netconn_do_delconn+0xca>
 8009156:	2b20      	cmp	r3, #32
 8009158:	d151      	bne.n	80091fe <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	4618      	mov	r0, r3
 800916c:	f009 f9c4 	bl	80124f8 <udp_remove>
          break;
 8009170:	e046      	b.n	8009200 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d006      	beq.n	800918a <lwip_netconn_do_delconn+0xe2>
 800917c:	4b35      	ldr	r3, [pc, #212]	@ (8009254 <lwip_netconn_do_delconn+0x1ac>)
 800917e:	f240 4294 	movw	r2, #1172	@ 0x494
 8009182:	4938      	ldr	r1, [pc, #224]	@ (8009264 <lwip_netconn_do_delconn+0x1bc>)
 8009184:	4835      	ldr	r0, [pc, #212]	@ (800925c <lwip_netconn_do_delconn+0x1b4>)
 8009186:	f00b fff5 	bl	8015174 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2204      	movs	r2, #4
 8009190:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2203      	movs	r2, #3
 8009196:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff fe14 	bl	8008dd4 <lwip_netconn_do_close_internal>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d04b      	beq.n	800924a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d006      	beq.n	80091ca <lwip_netconn_do_delconn+0x122>
 80091bc:	4b25      	ldr	r3, [pc, #148]	@ (8009254 <lwip_netconn_do_delconn+0x1ac>)
 80091be:	f240 429a 	movw	r2, #1178	@ 0x49a
 80091c2:	4929      	ldr	r1, [pc, #164]	@ (8009268 <lwip_netconn_do_delconn+0x1c0>)
 80091c4:	4825      	ldr	r0, [pc, #148]	@ (800925c <lwip_netconn_do_delconn+0x1b4>)
 80091c6:	f00b ffd5 	bl	8015174 <iprintf>
            UNLOCK_TCPIP_CORE();
 80091ca:	4828      	ldr	r0, [pc, #160]	@ (800926c <lwip_netconn_do_delconn+0x1c4>)
 80091cc:	f00b fe81 	bl	8014ed2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f00b fdd8 	bl	8014d8e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80091de:	4823      	ldr	r0, [pc, #140]	@ (800926c <lwip_netconn_do_delconn+0x1c4>)
 80091e0:	f00b fe68 	bl	8014eb4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d02d      	beq.n	800924a <lwip_netconn_do_delconn+0x1a2>
 80091ee:	4b19      	ldr	r3, [pc, #100]	@ (8009254 <lwip_netconn_do_delconn+0x1ac>)
 80091f0:	f240 429e 	movw	r2, #1182	@ 0x49e
 80091f4:	491c      	ldr	r1, [pc, #112]	@ (8009268 <lwip_netconn_do_delconn+0x1c0>)
 80091f6:	4819      	ldr	r0, [pc, #100]	@ (800925c <lwip_netconn_do_delconn+0x1b4>)
 80091f8:	f00b ffbc 	bl	8015174 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80091fc:	e025      	b.n	800924a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80091fe:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2200      	movs	r2, #0
 8009206:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <lwip_netconn_do_delconn+0x17a>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	6810      	ldr	r0, [r2, #0]
 800921c:	2200      	movs	r2, #0
 800921e:	2100      	movs	r1, #0
 8009220:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	d007      	beq.n	800923c <lwip_netconn_do_delconn+0x194>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	6810      	ldr	r0, [r2, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	2102      	movs	r1, #2
 800923a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	330c      	adds	r3, #12
 8009242:	4618      	mov	r0, r3
 8009244:	f00b fdee 	bl	8014e24 <sys_sem_valid>
 8009248:	e000      	b.n	800924c <lwip_netconn_do_delconn+0x1a4>
          return;
 800924a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	080164f4 	.word	0x080164f4
 8009258:	08016864 	.word	0x08016864
 800925c:	08016538 	.word	0x08016538
 8009260:	08016878 	.word	0x08016878
 8009264:	08016898 	.word	0x08016898
 8009268:	080168b4 	.word	0x080168b4
 800926c:	20008d60 	.word	0x20008d60

08009270 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d025      	beq.n	80092d2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009290:	2b10      	cmp	r3, #16
 8009292:	d00e      	beq.n	80092b2 <lwip_netconn_do_bind+0x42>
 8009294:	2b20      	cmp	r3, #32
 8009296:	d119      	bne.n	80092cc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6858      	ldr	r0, [r3, #4]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6899      	ldr	r1, [r3, #8]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	899b      	ldrh	r3, [r3, #12]
 80092a6:	461a      	mov	r2, r3
 80092a8:	f009 f87e 	bl	80123a8 <udp_bind>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
        break;
 80092b0:	e011      	b.n	80092d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6858      	ldr	r0, [r3, #4]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	6899      	ldr	r1, [r3, #8]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	899b      	ldrh	r3, [r3, #12]
 80092c0:	461a      	mov	r2, r3
 80092c2:	f003 f815 	bl	800c2f0 <tcp_bind>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73fb      	strb	r3, [r7, #15]
        break;
 80092ca:	e004      	b.n	80092d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80092cc:	23fa      	movs	r3, #250	@ 0xfa
 80092ce:	73fb      	strb	r3, [r7, #15]
        break;
 80092d0:	e001      	b.n	80092d6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80092d2:	23fa      	movs	r3, #250	@ 0xfa
 80092d4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	7bfa      	ldrb	r2, [r7, #15]
 80092da:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80092dc:	bf00      	nop
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d07f      	beq.n	80093fa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009304:	2b10      	cmp	r3, #16
 8009306:	d175      	bne.n	80093f4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d165      	bne.n	80093de <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	7d1b      	ldrb	r3, [r3, #20]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800931e:	23fa      	movs	r3, #250	@ 0xfa
 8009320:	72fb      	strb	r3, [r7, #11]
 8009322:	e06c      	b.n	80093fe <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009324:	23ff      	movs	r3, #255	@ 0xff
 8009326:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f107 020b 	add.w	r2, r7, #11
 8009332:	7cf9      	ldrb	r1, [r7, #19]
 8009334:	4618      	mov	r0, r3
 8009336:	f003 f893 	bl	800c460 <tcp_listen_with_backlog_and_err>
 800933a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d05d      	beq.n	80093fe <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3310      	adds	r3, #16
 8009348:	4618      	mov	r0, r3
 800934a:	f00b fcda 	bl	8014d02 <sys_mbox_valid>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3310      	adds	r3, #16
 800935a:	4618      	mov	r0, r3
 800935c:	f00b fc4a 	bl	8014bf4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3310      	adds	r3, #16
 8009366:	4618      	mov	r0, r3
 8009368:	f00b fcdc 	bl	8014d24 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3314      	adds	r3, #20
 8009376:	4618      	mov	r0, r3
 8009378:	f00b fcc3 	bl	8014d02 <sys_mbox_valid>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d108      	bne.n	8009394 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3314      	adds	r3, #20
 8009388:	2106      	movs	r1, #6
 800938a:	4618      	mov	r0, r3
 800938c:	f00b fc10 	bl	8014bb0 <sys_mbox_new>
 8009390:	4603      	mov	r3, r0
 8009392:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009394:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d118      	bne.n	80093ce <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2202      	movs	r2, #2
 80093a2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f004 f81d 	bl	800d3f8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	4912      	ldr	r1, [pc, #72]	@ (8009410 <lwip_netconn_do_listen+0x12c>)
 80093c6:	4618      	mov	r0, r3
 80093c8:	f004 f88e 	bl	800d4e8 <tcp_accept>
 80093cc:	e017      	b.n	80093fe <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f002 fe3c 	bl	800c04c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2200      	movs	r2, #0
 80093da:	605a      	str	r2, [r3, #4]
 80093dc:	e00f      	b.n	80093fe <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d102      	bne.n	80093ee <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	72fb      	strb	r3, [r7, #11]
 80093ec:	e007      	b.n	80093fe <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80093ee:	23f5      	movs	r3, #245	@ 0xf5
 80093f0:	72fb      	strb	r3, [r7, #11]
 80093f2:	e004      	b.n	80093fe <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80093f4:	23f0      	movs	r3, #240	@ 0xf0
 80093f6:	72fb      	strb	r3, [r7, #11]
 80093f8:	e001      	b.n	80093fe <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80093fa:	23f5      	movs	r3, #245	@ 0xf5
 80093fc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80093fe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009406:	bf00      	nop
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	080088f1 	.word	0x080088f1

08009414 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2200      	movs	r2, #0
 8009424:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d022      	beq.n	8009476 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800943a:	2b10      	cmp	r3, #16
 800943c:	d11b      	bne.n	8009476 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800944a:	d202      	bcs.n	8009452 <lwip_netconn_do_recv+0x3e>
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	b29b      	uxth	r3, r3
 8009450:	e001      	b.n	8009456 <lwip_netconn_do_recv+0x42>
 8009452:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009456:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	89fa      	ldrh	r2, [r7, #14]
 8009460:	4611      	mov	r1, r2
 8009462:	4618      	mov	r0, r3
 8009464:	f003 f900 	bl	800c668 <tcp_recved>
        remaining -= recved;
 8009468:	89fb      	ldrh	r3, [r7, #14]
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e6      	bne.n	8009444 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009476:	bf00      	nop
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b088      	sub	sp, #32
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d106      	bne.n	80094a4 <lwip_netconn_do_writemore+0x24>
 8009496:	4b96      	ldr	r3, [pc, #600]	@ (80096f0 <lwip_netconn_do_writemore+0x270>)
 8009498:	f240 6273 	movw	r2, #1651	@ 0x673
 800949c:	4995      	ldr	r1, [pc, #596]	@ (80096f4 <lwip_netconn_do_writemore+0x274>)
 800949e:	4896      	ldr	r0, [pc, #600]	@ (80096f8 <lwip_netconn_do_writemore+0x278>)
 80094a0:	f00b fe68 	bl	8015174 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d006      	beq.n	80094ba <lwip_netconn_do_writemore+0x3a>
 80094ac:	4b90      	ldr	r3, [pc, #576]	@ (80096f0 <lwip_netconn_do_writemore+0x270>)
 80094ae:	f240 6274 	movw	r2, #1652	@ 0x674
 80094b2:	4992      	ldr	r1, [pc, #584]	@ (80096fc <lwip_netconn_do_writemore+0x27c>)
 80094b4:	4890      	ldr	r0, [pc, #576]	@ (80096f8 <lwip_netconn_do_writemore+0x278>)
 80094b6:	f00b fe5d 	bl	8015174 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <lwip_netconn_do_writemore+0x50>
 80094c2:	4b8b      	ldr	r3, [pc, #556]	@ (80096f0 <lwip_netconn_do_writemore+0x270>)
 80094c4:	f240 6275 	movw	r2, #1653	@ 0x675
 80094c8:	498d      	ldr	r1, [pc, #564]	@ (8009700 <lwip_netconn_do_writemore+0x280>)
 80094ca:	488b      	ldr	r0, [pc, #556]	@ (80096f8 <lwip_netconn_do_writemore+0x278>)
 80094cc:	f00b fe52 	bl	8015174 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d106      	bne.n	80094e6 <lwip_netconn_do_writemore+0x66>
 80094d8:	4b85      	ldr	r3, [pc, #532]	@ (80096f0 <lwip_netconn_do_writemore+0x270>)
 80094da:	f240 6276 	movw	r2, #1654	@ 0x676
 80094de:	4989      	ldr	r1, [pc, #548]	@ (8009704 <lwip_netconn_do_writemore+0x284>)
 80094e0:	4885      	ldr	r0, [pc, #532]	@ (80096f8 <lwip_netconn_do_writemore+0x278>)
 80094e2:	f00b fe47 	bl	8015174 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d306      	bcc.n	8009504 <lwip_netconn_do_writemore+0x84>
 80094f6:	4b7e      	ldr	r3, [pc, #504]	@ (80096f0 <lwip_netconn_do_writemore+0x270>)
 80094f8:	f240 6277 	movw	r2, #1655	@ 0x677
 80094fc:	4982      	ldr	r1, [pc, #520]	@ (8009708 <lwip_netconn_do_writemore+0x288>)
 80094fe:	487e      	ldr	r0, [pc, #504]	@ (80096f8 <lwip_netconn_do_writemore+0x278>)
 8009500:	f00b fe38 	bl	8015174 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	899b      	ldrh	r3, [r3, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <lwip_netconn_do_writemore+0x9c>
 800950e:	4b78      	ldr	r3, [pc, #480]	@ (80096f0 <lwip_netconn_do_writemore+0x270>)
 8009510:	f240 6279 	movw	r2, #1657	@ 0x679
 8009514:	497d      	ldr	r1, [pc, #500]	@ (800970c <lwip_netconn_do_writemore+0x28c>)
 8009516:	4878      	ldr	r0, [pc, #480]	@ (80096f8 <lwip_netconn_do_writemore+0x278>)
 8009518:	f00b fe2c 	bl	8015174 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a1b      	ldr	r3, [r3, #32]
 8009520:	7f1b      	ldrb	r3, [r3, #28]
 8009522:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7f1b      	ldrb	r3, [r3, #28]
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <lwip_netconn_do_writemore+0xba>
 8009530:	7ebb      	ldrb	r3, [r7, #26]
 8009532:	f003 0304 	and.w	r3, r3, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <lwip_netconn_do_writemore+0xbe>
 800953a:	2301      	movs	r3, #1
 800953c:	e000      	b.n	8009540 <lwip_netconn_do_writemore+0xc0>
 800953e:	2300      	movs	r3, #0
 8009540:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	4413      	add	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800956c:	d307      	bcc.n	800957e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800956e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009572:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009574:	7ebb      	ldrb	r3, [r7, #26]
 8009576:	f043 0302 	orr.w	r3, r3, #2
 800957a:	76bb      	strb	r3, [r7, #26]
 800957c:	e001      	b.n	8009582 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800958a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800958c:	89fa      	ldrh	r2, [r7, #14]
 800958e:	8bbb      	ldrh	r3, [r7, #28]
 8009590:	429a      	cmp	r2, r3
 8009592:	d216      	bcs.n	80095c2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009594:	89fb      	ldrh	r3, [r7, #14]
 8009596:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009598:	7e3b      	ldrb	r3, [r7, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00d      	beq.n	80095ba <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800959e:	8bbb      	ldrh	r3, [r7, #28]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10e      	bne.n	80095c2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d102      	bne.n	80095b4 <lwip_netconn_do_writemore+0x134>
 80095ae:	f06f 0306 	mvn.w	r3, #6
 80095b2:	e000      	b.n	80095b6 <lwip_netconn_do_writemore+0x136>
 80095b4:	2300      	movs	r3, #0
 80095b6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80095b8:	e07d      	b.n	80096b6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80095ba:	7ebb      	ldrb	r3, [r7, #26]
 80095bc:	f043 0302 	orr.w	r3, r3, #2
 80095c0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	691a      	ldr	r2, [r3, #16]
 80095c8:	8bbb      	ldrh	r3, [r7, #28]
 80095ca:	441a      	add	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d906      	bls.n	80095e6 <lwip_netconn_do_writemore+0x166>
 80095d8:	4b45      	ldr	r3, [pc, #276]	@ (80096f0 <lwip_netconn_do_writemore+0x270>)
 80095da:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80095de:	494c      	ldr	r1, [pc, #304]	@ (8009710 <lwip_netconn_do_writemore+0x290>)
 80095e0:	4845      	ldr	r0, [pc, #276]	@ (80096f8 <lwip_netconn_do_writemore+0x278>)
 80095e2:	f00b fdc7 	bl	8015174 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80095e6:	8bbb      	ldrh	r3, [r7, #28]
 80095e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d103      	bne.n	80095f8 <lwip_netconn_do_writemore+0x178>
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f6:	d209      	bcs.n	800960c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80095fc:	8bba      	ldrh	r2, [r7, #28]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d10b      	bne.n	800961a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	899b      	ldrh	r3, [r3, #12]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d906      	bls.n	800961a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800960c:	2301      	movs	r3, #1
 800960e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009610:	7ebb      	ldrb	r3, [r7, #26]
 8009612:	f043 0302 	orr.w	r3, r3, #2
 8009616:	76bb      	strb	r3, [r7, #26]
 8009618:	e001      	b.n	800961e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6858      	ldr	r0, [r3, #4]
 8009622:	7ebb      	ldrb	r3, [r7, #26]
 8009624:	8bba      	ldrh	r2, [r7, #28]
 8009626:	6979      	ldr	r1, [r7, #20]
 8009628:	f006 fe22 	bl	8010270 <tcp_write>
 800962c:	4603      	mov	r3, r0
 800962e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009630:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d12c      	bne.n	8009692 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	6999      	ldr	r1, [r3, #24]
 800963e:	8bba      	ldrh	r2, [r7, #28]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	440a      	add	r2, r1
 8009646:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	6919      	ldr	r1, [r3, #16]
 800964e:	8bba      	ldrh	r2, [r7, #28]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	440a      	add	r2, r1
 8009656:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a1b      	ldr	r3, [r3, #32]
 800965c:	691a      	ldr	r2, [r3, #16]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d113      	bne.n	8009692 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	899a      	ldrh	r2, [r3, #12]
 8009670:	3a01      	subs	r2, #1
 8009672:	b292      	uxth	r2, r2
 8009674:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	899b      	ldrh	r3, [r3, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d008      	beq.n	8009692 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	689a      	ldr	r2, [r3, #8]
 8009686:	3208      	adds	r2, #8
 8009688:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	2200      	movs	r2, #0
 8009690:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009692:	7e7b      	ldrb	r3, [r7, #25]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d004      	beq.n	80096a2 <lwip_netconn_do_writemore+0x222>
 8009698:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f43f af50 	beq.w	8009542 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80096a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d004      	beq.n	80096b4 <lwip_netconn_do_writemore+0x234>
 80096aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80096ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b2:	d146      	bne.n	8009742 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80096b4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80096b6:	7e3b      	ldrb	r3, [r7, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d02b      	beq.n	8009714 <lwip_netconn_do_writemore+0x294>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	699a      	ldr	r2, [r3, #24]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d223      	bcs.n	8009714 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <lwip_netconn_do_writemore+0x260>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d8:	2200      	movs	r2, #0
 80096da:	2103      	movs	r1, #3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	7f1b      	ldrb	r3, [r3, #28]
 80096e4:	f043 0310 	orr.w	r3, r3, #16
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	771a      	strb	r2, [r3, #28]
 80096ee:	e028      	b.n	8009742 <lwip_netconn_do_writemore+0x2c2>
 80096f0:	080164f4 	.word	0x080164f4
 80096f4:	0801664c 	.word	0x0801664c
 80096f8:	08016538 	.word	0x08016538
 80096fc:	08016954 	.word	0x08016954
 8009700:	0801665c 	.word	0x0801665c
 8009704:	08016974 	.word	0x08016974
 8009708:	0801698c 	.word	0x0801698c
 800970c:	080169cc 	.word	0x080169cc
 8009710:	080169f4 	.word	0x080169f4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800971c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009720:	d305      	bcc.n	800972e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800972a:	2b04      	cmp	r3, #4
 800972c:	d909      	bls.n	8009742 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <lwip_netconn_do_writemore+0x2c2>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973a:	2200      	movs	r2, #0
 800973c:	2103      	movs	r1, #3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d11d      	bne.n	8009786 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	699a      	ldr	r2, [r3, #24]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	429a      	cmp	r2, r3
 8009758:	d002      	beq.n	8009760 <lwip_netconn_do_writemore+0x2e0>
 800975a:	7e3b      	ldrb	r3, [r7, #24]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009760:	2301      	movs	r3, #1
 8009762:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4618      	mov	r0, r3
 800976a:	f007 fb6b 	bl	8010e44 <tcp_output>
 800976e:	4603      	mov	r3, r0
 8009770:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009772:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009776:	f113 0f04 	cmn.w	r3, #4
 800977a:	d12c      	bne.n	80097d6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800977c:	7b3b      	ldrb	r3, [r7, #12]
 800977e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009780:	2301      	movs	r3, #1
 8009782:	76fb      	strb	r3, [r7, #27]
 8009784:	e027      	b.n	80097d6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009786:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d120      	bne.n	80097d2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	4618      	mov	r0, r3
 8009796:	f007 fb55 	bl	8010e44 <tcp_output>
 800979a:	4603      	mov	r3, r0
 800979c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800979e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80097a2:	f113 0f04 	cmn.w	r3, #4
 80097a6:	d104      	bne.n	80097b2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80097a8:	7b7b      	ldrb	r3, [r7, #13]
 80097aa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80097ac:	2301      	movs	r3, #1
 80097ae:	76fb      	strb	r3, [r7, #27]
 80097b0:	e011      	b.n	80097d6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80097b2:	7e3b      	ldrb	r3, [r7, #24]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00e      	beq.n	80097d6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d102      	bne.n	80097c8 <lwip_netconn_do_writemore+0x348>
 80097c2:	f06f 0306 	mvn.w	r3, #6
 80097c6:	e000      	b.n	80097ca <lwip_netconn_do_writemore+0x34a>
 80097c8:	2300      	movs	r3, #0
 80097ca:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80097cc:	2301      	movs	r3, #1
 80097ce:	76fb      	strb	r3, [r7, #27]
 80097d0:	e001      	b.n	80097d6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80097d2:	2301      	movs	r3, #1
 80097d4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80097d6:	7efb      	ldrb	r3, [r7, #27]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d015      	beq.n	8009808 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	330c      	adds	r3, #12
 80097e4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	7ffa      	ldrb	r2, [r7, #31]
 80097ec:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d006      	beq.n	800980e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009800:	68b8      	ldr	r0, [r7, #8]
 8009802:	f00b faf5 	bl	8014df0 <sys_sem_signal>
 8009806:	e002      	b.n	800980e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009808:	f04f 33ff 	mov.w	r3, #4294967295
 800980c:	e000      	b.n	8009810 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3720      	adds	r7, #32
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fd1c 	bl	8008266 <netconn_err>
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d166      	bne.n	8009908 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009844:	2b10      	cmp	r3, #16
 8009846:	d15d      	bne.n	8009904 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	785b      	ldrb	r3, [r3, #1]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009852:	23fb      	movs	r3, #251	@ 0xfb
 8009854:	73fb      	strb	r3, [r7, #15]
 8009856:	e057      	b.n	8009908 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d04d      	beq.n	80098fe <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2201      	movs	r2, #1
 8009868:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <lwip_netconn_do_write+0x6a>
 8009874:	4b28      	ldr	r3, [pc, #160]	@ (8009918 <lwip_netconn_do_write+0x100>)
 8009876:	f240 7223 	movw	r2, #1827	@ 0x723
 800987a:	4928      	ldr	r1, [pc, #160]	@ (800991c <lwip_netconn_do_write+0x104>)
 800987c:	4828      	ldr	r0, [pc, #160]	@ (8009920 <lwip_netconn_do_write+0x108>)
 800987e:	f00b fc79 	bl	8015174 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <lwip_netconn_do_write+0x80>
 800988a:	4b23      	ldr	r3, [pc, #140]	@ (8009918 <lwip_netconn_do_write+0x100>)
 800988c:	f240 7224 	movw	r2, #1828	@ 0x724
 8009890:	4924      	ldr	r1, [pc, #144]	@ (8009924 <lwip_netconn_do_write+0x10c>)
 8009892:	4823      	ldr	r0, [pc, #140]	@ (8009920 <lwip_netconn_do_write+0x108>)
 8009894:	f00b fc6e 	bl	8015174 <iprintf>
        msg->conn->current_msg = msg;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fdea 	bl	8009480 <lwip_netconn_do_writemore>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d02e      	beq.n	8009910 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d006      	beq.n	80098ca <lwip_netconn_do_write+0xb2>
 80098bc:	4b16      	ldr	r3, [pc, #88]	@ (8009918 <lwip_netconn_do_write+0x100>)
 80098be:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80098c2:	4919      	ldr	r1, [pc, #100]	@ (8009928 <lwip_netconn_do_write+0x110>)
 80098c4:	4816      	ldr	r0, [pc, #88]	@ (8009920 <lwip_netconn_do_write+0x108>)
 80098c6:	f00b fc55 	bl	8015174 <iprintf>
          UNLOCK_TCPIP_CORE();
 80098ca:	4818      	ldr	r0, [pc, #96]	@ (800992c <lwip_netconn_do_write+0x114>)
 80098cc:	f00b fb01 	bl	8014ed2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	330c      	adds	r3, #12
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f00b fa58 	bl	8014d8e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80098de:	4813      	ldr	r0, [pc, #76]	@ (800992c <lwip_netconn_do_write+0x114>)
 80098e0:	f00b fae8 	bl	8014eb4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d110      	bne.n	8009910 <lwip_netconn_do_write+0xf8>
 80098ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009918 <lwip_netconn_do_write+0x100>)
 80098f0:	f240 722c 	movw	r2, #1836	@ 0x72c
 80098f4:	490c      	ldr	r1, [pc, #48]	@ (8009928 <lwip_netconn_do_write+0x110>)
 80098f6:	480a      	ldr	r0, [pc, #40]	@ (8009920 <lwip_netconn_do_write+0x108>)
 80098f8:	f00b fc3c 	bl	8015174 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80098fc:	e008      	b.n	8009910 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80098fe:	23f5      	movs	r3, #245	@ 0xf5
 8009900:	73fb      	strb	r3, [r7, #15]
 8009902:	e001      	b.n	8009908 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009904:	23fa      	movs	r3, #250	@ 0xfa
 8009906:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	7bfa      	ldrb	r2, [r7, #15]
 800990c:	711a      	strb	r2, [r3, #4]
 800990e:	e000      	b.n	8009912 <lwip_netconn_do_write+0xfa>
        return;
 8009910:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	080164f4 	.word	0x080164f4
 800991c:	08016898 	.word	0x08016898
 8009920:	08016538 	.word	0x08016538
 8009924:	08016a20 	.word	0x08016a20
 8009928:	080168b4 	.word	0x080168b4
 800992c:	20008d60 	.word	0x20008d60

08009930 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d069      	beq.n	8009a22 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009958:	2b10      	cmp	r3, #16
 800995a:	d162      	bne.n	8009a22 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009960:	2b03      	cmp	r3, #3
 8009962:	d002      	beq.n	800996a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009964:	7afb      	ldrb	r3, [r7, #11]
 8009966:	2b02      	cmp	r3, #2
 8009968:	d05b      	beq.n	8009a22 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d103      	bne.n	8009978 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	22f5      	movs	r2, #245	@ 0xf5
 8009974:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009976:	e059      	b.n	8009a2c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009978:	7afb      	ldrb	r3, [r7, #11]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d103      	bne.n	8009986 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	22fb      	movs	r2, #251	@ 0xfb
 8009982:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009984:	e052      	b.n	8009a2c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	7a1b      	ldrb	r3, [r3, #8]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d004      	beq.n	800999c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff f99e 	bl	8008cd8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d006      	beq.n	80099b4 <lwip_netconn_do_close+0x84>
 80099a6:	4b23      	ldr	r3, [pc, #140]	@ (8009a34 <lwip_netconn_do_close+0x104>)
 80099a8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80099ac:	4922      	ldr	r1, [pc, #136]	@ (8009a38 <lwip_netconn_do_close+0x108>)
 80099ae:	4823      	ldr	r0, [pc, #140]	@ (8009a3c <lwip_netconn_do_close+0x10c>)
 80099b0:	f00b fbe0 	bl	8015174 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2204      	movs	r2, #4
 80099ba:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2100      	movs	r1, #0
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff fa02 	bl	8008dd4 <lwip_netconn_do_close_internal>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d029      	beq.n	8009a2a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	785b      	ldrb	r3, [r3, #1]
 80099dc:	2b04      	cmp	r3, #4
 80099de:	d006      	beq.n	80099ee <lwip_netconn_do_close+0xbe>
 80099e0:	4b14      	ldr	r3, [pc, #80]	@ (8009a34 <lwip_netconn_do_close+0x104>)
 80099e2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80099e6:	4916      	ldr	r1, [pc, #88]	@ (8009a40 <lwip_netconn_do_close+0x110>)
 80099e8:	4814      	ldr	r0, [pc, #80]	@ (8009a3c <lwip_netconn_do_close+0x10c>)
 80099ea:	f00b fbc3 	bl	8015174 <iprintf>
        UNLOCK_TCPIP_CORE();
 80099ee:	4815      	ldr	r0, [pc, #84]	@ (8009a44 <lwip_netconn_do_close+0x114>)
 80099f0:	f00b fa6f 	bl	8014ed2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	330c      	adds	r3, #12
 80099fa:	2100      	movs	r1, #0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f00b f9c6 	bl	8014d8e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009a02:	4810      	ldr	r0, [pc, #64]	@ (8009a44 <lwip_netconn_do_close+0x114>)
 8009a04:	f00b fa56 	bl	8014eb4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00b      	beq.n	8009a2a <lwip_netconn_do_close+0xfa>
 8009a12:	4b08      	ldr	r3, [pc, #32]	@ (8009a34 <lwip_netconn_do_close+0x104>)
 8009a14:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8009a18:	4909      	ldr	r1, [pc, #36]	@ (8009a40 <lwip_netconn_do_close+0x110>)
 8009a1a:	4808      	ldr	r0, [pc, #32]	@ (8009a3c <lwip_netconn_do_close+0x10c>)
 8009a1c:	f00b fbaa 	bl	8015174 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009a20:	e003      	b.n	8009a2a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	22f5      	movs	r2, #245	@ 0xf5
 8009a26:	711a      	strb	r2, [r3, #4]
 8009a28:	e000      	b.n	8009a2c <lwip_netconn_do_close+0xfc>
      return;
 8009a2a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	080164f4 	.word	0x080164f4
 8009a38:	08016898 	.word	0x08016898
 8009a3c:	08016538 	.word	0x08016538
 8009a40:	080168b4 	.word	0x080168b4
 8009a44:	20008d60 	.word	0x20008d60

08009a48 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d013      	beq.n	8009a7e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00b      	beq.n	8009a76 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 fe48 	bl	800b6f8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	605a      	str	r2, [r3, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	2006      	movs	r0, #6
 8009a7a:	f000 ff99 	bl	800a9b0 <memp_free>
  }
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d108      	bne.n	8009aac <netbuf_data+0x24>
 8009a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009b08 <netbuf_data+0x80>)
 8009a9c:	22c6      	movs	r2, #198	@ 0xc6
 8009a9e:	491b      	ldr	r1, [pc, #108]	@ (8009b0c <netbuf_data+0x84>)
 8009aa0:	481b      	ldr	r0, [pc, #108]	@ (8009b10 <netbuf_data+0x88>)
 8009aa2:	f00b fb67 	bl	8015174 <iprintf>
 8009aa6:	f06f 030f 	mvn.w	r3, #15
 8009aaa:	e029      	b.n	8009b00 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d108      	bne.n	8009ac4 <netbuf_data+0x3c>
 8009ab2:	4b15      	ldr	r3, [pc, #84]	@ (8009b08 <netbuf_data+0x80>)
 8009ab4:	22c7      	movs	r2, #199	@ 0xc7
 8009ab6:	4917      	ldr	r1, [pc, #92]	@ (8009b14 <netbuf_data+0x8c>)
 8009ab8:	4815      	ldr	r0, [pc, #84]	@ (8009b10 <netbuf_data+0x88>)
 8009aba:	f00b fb5b 	bl	8015174 <iprintf>
 8009abe:	f06f 030f 	mvn.w	r3, #15
 8009ac2:	e01d      	b.n	8009b00 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d108      	bne.n	8009adc <netbuf_data+0x54>
 8009aca:	4b0f      	ldr	r3, [pc, #60]	@ (8009b08 <netbuf_data+0x80>)
 8009acc:	22c8      	movs	r2, #200	@ 0xc8
 8009ace:	4912      	ldr	r1, [pc, #72]	@ (8009b18 <netbuf_data+0x90>)
 8009ad0:	480f      	ldr	r0, [pc, #60]	@ (8009b10 <netbuf_data+0x88>)
 8009ad2:	f00b fb4f 	bl	8015174 <iprintf>
 8009ad6:	f06f 030f 	mvn.w	r3, #15
 8009ada:	e011      	b.n	8009b00 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <netbuf_data+0x62>
    return ERR_BUF;
 8009ae4:	f06f 0301 	mvn.w	r3, #1
 8009ae8:	e00a      	b.n	8009b00 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	895a      	ldrh	r2, [r3, #10]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	08016a4c 	.word	0x08016a4c
 8009b0c:	08016b54 	.word	0x08016b54
 8009b10:	08016a9c 	.word	0x08016a9c
 8009b14:	08016b70 	.word	0x08016b70
 8009b18:	08016b90 	.word	0x08016b90

08009b1c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009b26:	f008 fa45 	bl	8011fb4 <sys_timeouts_sleeptime>
 8009b2a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b32:	d10b      	bne.n	8009b4c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009b34:	4813      	ldr	r0, [pc, #76]	@ (8009b84 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b36:	f00b f9cc 	bl	8014ed2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f00b f884 	bl	8014c4c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009b44:	480f      	ldr	r0, [pc, #60]	@ (8009b84 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b46:	f00b f9b5 	bl	8014eb4 <sys_mutex_lock>
    return;
 8009b4a:	e018      	b.n	8009b7e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d102      	bne.n	8009b58 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009b52:	f008 f9f5 	bl	8011f40 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b56:	e7e6      	b.n	8009b26 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009b58:	480a      	ldr	r0, [pc, #40]	@ (8009b84 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b5a:	f00b f9ba 	bl	8014ed2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f00b f872 	bl	8014c4c <sys_arch_mbox_fetch>
 8009b68:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009b6a:	4806      	ldr	r0, [pc, #24]	@ (8009b84 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b6c:	f00b f9a2 	bl	8014eb4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b76:	d102      	bne.n	8009b7e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009b78:	f008 f9e2 	bl	8011f40 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b7c:	e7d3      	b.n	8009b26 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20008d60 	.word	0x20008d60

08009b88 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009b90:	4810      	ldr	r0, [pc, #64]	@ (8009bd4 <tcpip_thread+0x4c>)
 8009b92:	f00b f98f 	bl	8014eb4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009b96:	4b10      	ldr	r3, [pc, #64]	@ (8009bd8 <tcpip_thread+0x50>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd8 <tcpip_thread+0x50>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8009bdc <tcpip_thread+0x54>)
 8009ba4:	6812      	ldr	r2, [r2, #0]
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009baa:	f107 030c 	add.w	r3, r7, #12
 8009bae:	4619      	mov	r1, r3
 8009bb0:	480b      	ldr	r0, [pc, #44]	@ (8009be0 <tcpip_thread+0x58>)
 8009bb2:	f7ff ffb3 	bl	8009b1c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009bbc:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <tcpip_thread+0x5c>)
 8009bbe:	2291      	movs	r2, #145	@ 0x91
 8009bc0:	4909      	ldr	r1, [pc, #36]	@ (8009be8 <tcpip_thread+0x60>)
 8009bc2:	480a      	ldr	r0, [pc, #40]	@ (8009bec <tcpip_thread+0x64>)
 8009bc4:	f00b fad6 	bl	8015174 <iprintf>
      continue;
 8009bc8:	e003      	b.n	8009bd2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f80f 	bl	8009bf0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009bd2:	e7ea      	b.n	8009baa <tcpip_thread+0x22>
 8009bd4:	20008d60 	.word	0x20008d60
 8009bd8:	20008d54 	.word	0x20008d54
 8009bdc:	20008d58 	.word	0x20008d58
 8009be0:	20008d5c 	.word	0x20008d5c
 8009be4:	08016be4 	.word	0x08016be4
 8009be8:	08016c14 	.word	0x08016c14
 8009bec:	08016c34 	.word	0x08016c34

08009bf0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d026      	beq.n	8009c4e <tcpip_thread_handle_msg+0x5e>
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	dc2b      	bgt.n	8009c5c <tcpip_thread_handle_msg+0x6c>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <tcpip_thread_handle_msg+0x1e>
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d015      	beq.n	8009c38 <tcpip_thread_handle_msg+0x48>
 8009c0c:	e026      	b.n	8009c5c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	6850      	ldr	r0, [r2, #4]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	6892      	ldr	r2, [r2, #8]
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4798      	blx	r3
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f001 fd65 	bl	800b6f8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	2009      	movs	r0, #9
 8009c32:	f000 febd 	bl	800a9b0 <memp_free>
      break;
 8009c36:	e018      	b.n	8009c6a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6892      	ldr	r2, [r2, #8]
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	2008      	movs	r0, #8
 8009c48:	f000 feb2 	bl	800a9b0 <memp_free>
      break;
 8009c4c:	e00d      	b.n	8009c6a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	6892      	ldr	r2, [r2, #8]
 8009c56:	4610      	mov	r0, r2
 8009c58:	4798      	blx	r3
      break;
 8009c5a:	e006      	b.n	8009c6a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c5c:	4b05      	ldr	r3, [pc, #20]	@ (8009c74 <tcpip_thread_handle_msg+0x84>)
 8009c5e:	22cf      	movs	r2, #207	@ 0xcf
 8009c60:	4905      	ldr	r1, [pc, #20]	@ (8009c78 <tcpip_thread_handle_msg+0x88>)
 8009c62:	4806      	ldr	r0, [pc, #24]	@ (8009c7c <tcpip_thread_handle_msg+0x8c>)
 8009c64:	f00b fa86 	bl	8015174 <iprintf>
      break;
 8009c68:	bf00      	nop
  }
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	08016be4 	.word	0x08016be4
 8009c78:	08016c14 	.word	0x08016c14
 8009c7c:	08016c34 	.word	0x08016c34

08009c80 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009c8c:	481a      	ldr	r0, [pc, #104]	@ (8009cf8 <tcpip_inpkt+0x78>)
 8009c8e:	f00b f838 	bl	8014d02 <sys_mbox_valid>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d105      	bne.n	8009ca4 <tcpip_inpkt+0x24>
 8009c98:	4b18      	ldr	r3, [pc, #96]	@ (8009cfc <tcpip_inpkt+0x7c>)
 8009c9a:	22fc      	movs	r2, #252	@ 0xfc
 8009c9c:	4918      	ldr	r1, [pc, #96]	@ (8009d00 <tcpip_inpkt+0x80>)
 8009c9e:	4819      	ldr	r0, [pc, #100]	@ (8009d04 <tcpip_inpkt+0x84>)
 8009ca0:	f00b fa68 	bl	8015174 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009ca4:	2009      	movs	r0, #9
 8009ca6:	f000 fe0d 	bl	800a8c4 <memp_malloc>
 8009caa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d102      	bne.n	8009cb8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb6:	e01a      	b.n	8009cee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009cd0:	6979      	ldr	r1, [r7, #20]
 8009cd2:	4809      	ldr	r0, [pc, #36]	@ (8009cf8 <tcpip_inpkt+0x78>)
 8009cd4:	f00a ffa0 	bl	8014c18 <sys_mbox_trypost>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d006      	beq.n	8009cec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009cde:	6979      	ldr	r1, [r7, #20]
 8009ce0:	2009      	movs	r0, #9
 8009ce2:	f000 fe65 	bl	800a9b0 <memp_free>
    return ERR_MEM;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cea:	e000      	b.n	8009cee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009cec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20008d5c 	.word	0x20008d5c
 8009cfc:	08016be4 	.word	0x08016be4
 8009d00:	08016c5c 	.word	0x08016c5c
 8009d04:	08016c34 	.word	0x08016c34

08009d08 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d18:	f003 0318 	and.w	r3, r3, #24
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d006      	beq.n	8009d2e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009d20:	4a08      	ldr	r2, [pc, #32]	@ (8009d44 <tcpip_input+0x3c>)
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff ffab 	bl	8009c80 <tcpip_inpkt>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	e005      	b.n	8009d3a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009d2e:	4a06      	ldr	r2, [pc, #24]	@ (8009d48 <tcpip_input+0x40>)
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff ffa4 	bl	8009c80 <tcpip_inpkt>
 8009d38:	4603      	mov	r3, r0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	08014a05 	.word	0x08014a05
 8009d48:	0801390d 	.word	0x0801390d

08009d4c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009d56:	4819      	ldr	r0, [pc, #100]	@ (8009dbc <tcpip_try_callback+0x70>)
 8009d58:	f00a ffd3 	bl	8014d02 <sys_mbox_valid>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d106      	bne.n	8009d70 <tcpip_try_callback+0x24>
 8009d62:	4b17      	ldr	r3, [pc, #92]	@ (8009dc0 <tcpip_try_callback+0x74>)
 8009d64:	f240 125d 	movw	r2, #349	@ 0x15d
 8009d68:	4916      	ldr	r1, [pc, #88]	@ (8009dc4 <tcpip_try_callback+0x78>)
 8009d6a:	4817      	ldr	r0, [pc, #92]	@ (8009dc8 <tcpip_try_callback+0x7c>)
 8009d6c:	f00b fa02 	bl	8015174 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009d70:	2008      	movs	r0, #8
 8009d72:	f000 fda7 	bl	800a8c4 <memp_malloc>
 8009d76:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d82:	e017      	b.n	8009db4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2201      	movs	r2, #1
 8009d88:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d96:	68f9      	ldr	r1, [r7, #12]
 8009d98:	4808      	ldr	r0, [pc, #32]	@ (8009dbc <tcpip_try_callback+0x70>)
 8009d9a:	f00a ff3d 	bl	8014c18 <sys_mbox_trypost>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009da4:	68f9      	ldr	r1, [r7, #12]
 8009da6:	2008      	movs	r0, #8
 8009da8:	f000 fe02 	bl	800a9b0 <memp_free>
    return ERR_MEM;
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295
 8009db0:	e000      	b.n	8009db4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20008d5c 	.word	0x20008d5c
 8009dc0:	08016be4 	.word	0x08016be4
 8009dc4:	08016c5c 	.word	0x08016c5c
 8009dc8:	08016c34 	.word	0x08016c34

08009dcc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009dd8:	4806      	ldr	r0, [pc, #24]	@ (8009df4 <tcpip_send_msg_wait_sem+0x28>)
 8009dda:	f00b f86b 	bl	8014eb4 <sys_mutex_lock>
  fn(apimsg);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68b8      	ldr	r0, [r7, #8]
 8009de2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009de4:	4803      	ldr	r0, [pc, #12]	@ (8009df4 <tcpip_send_msg_wait_sem+0x28>)
 8009de6:	f00b f874 	bl	8014ed2 <sys_mutex_unlock>
  return ERR_OK;
 8009dea:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	20008d60 	.word	0x20008d60

08009df8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009e02:	f000 f8b9 	bl	8009f78 <lwip_init>

  tcpip_init_done = initfunc;
 8009e06:	4a17      	ldr	r2, [pc, #92]	@ (8009e64 <tcpip_init+0x6c>)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009e0c:	4a16      	ldr	r2, [pc, #88]	@ (8009e68 <tcpip_init+0x70>)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009e12:	2106      	movs	r1, #6
 8009e14:	4815      	ldr	r0, [pc, #84]	@ (8009e6c <tcpip_init+0x74>)
 8009e16:	f00a fecb 	bl	8014bb0 <sys_mbox_new>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d006      	beq.n	8009e2e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009e20:	4b13      	ldr	r3, [pc, #76]	@ (8009e70 <tcpip_init+0x78>)
 8009e22:	f240 2261 	movw	r2, #609	@ 0x261
 8009e26:	4913      	ldr	r1, [pc, #76]	@ (8009e74 <tcpip_init+0x7c>)
 8009e28:	4813      	ldr	r0, [pc, #76]	@ (8009e78 <tcpip_init+0x80>)
 8009e2a:	f00b f9a3 	bl	8015174 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009e2e:	4813      	ldr	r0, [pc, #76]	@ (8009e7c <tcpip_init+0x84>)
 8009e30:	f00b f824 	bl	8014e7c <sys_mutex_new>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d006      	beq.n	8009e48 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e70 <tcpip_init+0x78>)
 8009e3c:	f240 2265 	movw	r2, #613	@ 0x265
 8009e40:	490f      	ldr	r1, [pc, #60]	@ (8009e80 <tcpip_init+0x88>)
 8009e42:	480d      	ldr	r0, [pc, #52]	@ (8009e78 <tcpip_init+0x80>)
 8009e44:	f00b f996 	bl	8015174 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009e48:	2300      	movs	r3, #0
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e50:	2200      	movs	r2, #0
 8009e52:	490c      	ldr	r1, [pc, #48]	@ (8009e84 <tcpip_init+0x8c>)
 8009e54:	480c      	ldr	r0, [pc, #48]	@ (8009e88 <tcpip_init+0x90>)
 8009e56:	f00b f849 	bl	8014eec <sys_thread_new>
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20008d54 	.word	0x20008d54
 8009e68:	20008d58 	.word	0x20008d58
 8009e6c:	20008d5c 	.word	0x20008d5c
 8009e70:	08016be4 	.word	0x08016be4
 8009e74:	08016c6c 	.word	0x08016c6c
 8009e78:	08016c34 	.word	0x08016c34
 8009e7c:	20008d60 	.word	0x20008d60
 8009e80:	08016c90 	.word	0x08016c90
 8009e84:	08009b89 	.word	0x08009b89
 8009e88:	08016cb4 	.word	0x08016cb4

08009e8c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <fs_open+0x16>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <fs_open+0x1c>
    return ERR_ARG;
 8009ea2:	f06f 030f 	mvn.w	r3, #15
 8009ea6:	e028      	b.n	8009efa <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009ea8:	4b16      	ldr	r3, [pc, #88]	@ (8009f04 <fs_open+0x78>)
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e020      	b.n	8009ef0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6838      	ldr	r0, [r7, #0]
 8009eb6:	f7f6 f9ab 	bl	8000210 <strcmp>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d114      	bne.n	8009eea <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	68da      	ldr	r2, [r3, #12]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	68da      	ldr	r2, [r3, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	7c1a      	ldrb	r2, [r3, #16]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e007      	b.n	8009efa <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1db      	bne.n	8009eae <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009ef6:	f06f 0305 	mvn.w	r3, #5
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	0801a454 	.word	0x0801a454

08009f08 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009f26:	88fb      	ldrh	r3, [r7, #6]
 8009f28:	021b      	lsls	r3, r3, #8
 8009f2a:	b21a      	sxth	r2, r3
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	0a1b      	lsrs	r3, r3, #8
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	b21b      	sxth	r3, r3
 8009f34:	4313      	orrs	r3, r2
 8009f36:	b21b      	sxth	r3, r3
 8009f38:	b29b      	uxth	r3, r3
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b083      	sub	sp, #12
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	061a      	lsls	r2, r3, #24
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	021b      	lsls	r3, r3, #8
 8009f56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	0a1b      	lsrs	r3, r3, #8
 8009f60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f64:	431a      	orrs	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	0e1b      	lsrs	r3, r3, #24
 8009f6a:	4313      	orrs	r3, r2
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009f82:	f00a ff6d 	bl	8014e60 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009f86:	f000 f8d5 	bl	800a134 <mem_init>
  memp_init();
 8009f8a:	f000 fc2d 	bl	800a7e8 <memp_init>
  pbuf_init();
  netif_init();
 8009f8e:	f000 fd39 	bl	800aa04 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009f92:	f008 f847 	bl	8012024 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009f96:	f001 fe49 	bl	800bc2c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009f9a:	f007 ff89 	bl	8011eb0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009fb2:	4b05      	ldr	r3, [pc, #20]	@ (8009fc8 <ptr_to_mem+0x20>)
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	4413      	add	r3, r2
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	20008d7c 	.word	0x20008d7c

08009fcc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009fd4:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <mem_to_ptr+0x20>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	b29b      	uxth	r3, r3
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20008d7c 	.word	0x20008d7c

08009ff0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009ff0:	b590      	push	{r4, r7, lr}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009ff8:	4b45      	ldr	r3, [pc, #276]	@ (800a110 <plug_holes+0x120>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d206      	bcs.n	800a010 <plug_holes+0x20>
 800a002:	4b44      	ldr	r3, [pc, #272]	@ (800a114 <plug_holes+0x124>)
 800a004:	f240 12df 	movw	r2, #479	@ 0x1df
 800a008:	4943      	ldr	r1, [pc, #268]	@ (800a118 <plug_holes+0x128>)
 800a00a:	4844      	ldr	r0, [pc, #272]	@ (800a11c <plug_holes+0x12c>)
 800a00c:	f00b f8b2 	bl	8015174 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a010:	4b43      	ldr	r3, [pc, #268]	@ (800a120 <plug_holes+0x130>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	429a      	cmp	r2, r3
 800a018:	d306      	bcc.n	800a028 <plug_holes+0x38>
 800a01a:	4b3e      	ldr	r3, [pc, #248]	@ (800a114 <plug_holes+0x124>)
 800a01c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a020:	4940      	ldr	r1, [pc, #256]	@ (800a124 <plug_holes+0x134>)
 800a022:	483e      	ldr	r0, [pc, #248]	@ (800a11c <plug_holes+0x12c>)
 800a024:	f00b f8a6 	bl	8015174 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	791b      	ldrb	r3, [r3, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d006      	beq.n	800a03e <plug_holes+0x4e>
 800a030:	4b38      	ldr	r3, [pc, #224]	@ (800a114 <plug_holes+0x124>)
 800a032:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a036:	493c      	ldr	r1, [pc, #240]	@ (800a128 <plug_holes+0x138>)
 800a038:	4838      	ldr	r0, [pc, #224]	@ (800a11c <plug_holes+0x12c>)
 800a03a:	f00b f89b 	bl	8015174 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a046:	d906      	bls.n	800a056 <plug_holes+0x66>
 800a048:	4b32      	ldr	r3, [pc, #200]	@ (800a114 <plug_holes+0x124>)
 800a04a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a04e:	4937      	ldr	r1, [pc, #220]	@ (800a12c <plug_holes+0x13c>)
 800a050:	4832      	ldr	r0, [pc, #200]	@ (800a11c <plug_holes+0x12c>)
 800a052:	f00b f88f 	bl	8015174 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7ff ffa4 	bl	8009fa8 <ptr_to_mem>
 800a060:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	429a      	cmp	r2, r3
 800a068:	d024      	beq.n	800a0b4 <plug_holes+0xc4>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	791b      	ldrb	r3, [r3, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d120      	bne.n	800a0b4 <plug_holes+0xc4>
 800a072:	4b2b      	ldr	r3, [pc, #172]	@ (800a120 <plug_holes+0x130>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d01b      	beq.n	800a0b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a07c:	4b2c      	ldr	r3, [pc, #176]	@ (800a130 <plug_holes+0x140>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	429a      	cmp	r2, r3
 800a084:	d102      	bne.n	800a08c <plug_holes+0x9c>
      lfree = mem;
 800a086:	4a2a      	ldr	r2, [pc, #168]	@ (800a130 <plug_holes+0x140>)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	881a      	ldrh	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a09c:	d00a      	beq.n	800a0b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff ff80 	bl	8009fa8 <ptr_to_mem>
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff ff8e 	bl	8009fcc <mem_to_ptr>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	885b      	ldrh	r3, [r3, #2]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7ff ff75 	bl	8009fa8 <ptr_to_mem>
 800a0be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d01f      	beq.n	800a108 <plug_holes+0x118>
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	791b      	ldrb	r3, [r3, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d11b      	bne.n	800a108 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a0d0:	4b17      	ldr	r3, [pc, #92]	@ (800a130 <plug_holes+0x140>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d102      	bne.n	800a0e0 <plug_holes+0xf0>
      lfree = pmem;
 800a0da:	4a15      	ldr	r2, [pc, #84]	@ (800a130 <plug_holes+0x140>)
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	881a      	ldrh	r2, [r3, #0]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a0f0:	d00a      	beq.n	800a108 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff ff56 	bl	8009fa8 <ptr_to_mem>
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	68b8      	ldr	r0, [r7, #8]
 800a100:	f7ff ff64 	bl	8009fcc <mem_to_ptr>
 800a104:	4603      	mov	r3, r0
 800a106:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a108:	bf00      	nop
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd90      	pop	{r4, r7, pc}
 800a110:	20008d7c 	.word	0x20008d7c
 800a114:	08016cc4 	.word	0x08016cc4
 800a118:	08016cf4 	.word	0x08016cf4
 800a11c:	08016d0c 	.word	0x08016d0c
 800a120:	20008d80 	.word	0x20008d80
 800a124:	08016d34 	.word	0x08016d34
 800a128:	08016d50 	.word	0x08016d50
 800a12c:	08016d6c 	.word	0x08016d6c
 800a130:	20008d88 	.word	0x20008d88

0800a134 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a13a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b0 <mem_init+0x7c>)
 800a13c:	4a1d      	ldr	r2, [pc, #116]	@ (800a1b4 <mem_init+0x80>)
 800a13e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a140:	4b1b      	ldr	r3, [pc, #108]	@ (800a1b0 <mem_init+0x7c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a14c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a15a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800a15e:	f7ff ff23 	bl	8009fa8 <ptr_to_mem>
 800a162:	4603      	mov	r3, r0
 800a164:	4a14      	ldr	r2, [pc, #80]	@ (800a1b8 <mem_init+0x84>)
 800a166:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a168:	4b13      	ldr	r3, [pc, #76]	@ (800a1b8 <mem_init+0x84>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2201      	movs	r2, #1
 800a16e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a170:	4b11      	ldr	r3, [pc, #68]	@ (800a1b8 <mem_init+0x84>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a178:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a17a:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b8 <mem_init+0x84>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a182:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a184:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b0 <mem_init+0x7c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a0c      	ldr	r2, [pc, #48]	@ (800a1bc <mem_init+0x88>)
 800a18a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a18c:	480c      	ldr	r0, [pc, #48]	@ (800a1c0 <mem_init+0x8c>)
 800a18e:	f00a fe75 	bl	8014e7c <sys_mutex_new>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d006      	beq.n	800a1a6 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a198:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c4 <mem_init+0x90>)
 800a19a:	f240 221f 	movw	r2, #543	@ 0x21f
 800a19e:	490a      	ldr	r1, [pc, #40]	@ (800a1c8 <mem_init+0x94>)
 800a1a0:	480a      	ldr	r0, [pc, #40]	@ (800a1cc <mem_init+0x98>)
 800a1a2:	f00a ffe7 	bl	8015174 <iprintf>
  }
}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20008d7c 	.word	0x20008d7c
 800a1b4:	20010000 	.word	0x20010000
 800a1b8:	20008d80 	.word	0x20008d80
 800a1bc:	20008d88 	.word	0x20008d88
 800a1c0:	20008d84 	.word	0x20008d84
 800a1c4:	08016cc4 	.word	0x08016cc4
 800a1c8:	08016d98 	.word	0x08016d98
 800a1cc:	08016d0c 	.word	0x08016d0c

0800a1d0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff fef7 	bl	8009fcc <mem_to_ptr>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff fede 	bl	8009fa8 <ptr_to_mem>
 800a1ec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	885b      	ldrh	r3, [r3, #2]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff fed8 	bl	8009fa8 <ptr_to_mem>
 800a1f8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a202:	d818      	bhi.n	800a236 <mem_link_valid+0x66>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	885b      	ldrh	r3, [r3, #2]
 800a208:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a20c:	d813      	bhi.n	800a236 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a212:	8afa      	ldrh	r2, [r7, #22]
 800a214:	429a      	cmp	r2, r3
 800a216:	d004      	beq.n	800a222 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	8afa      	ldrh	r2, [r7, #22]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d109      	bne.n	800a236 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a222:	4b08      	ldr	r3, [pc, #32]	@ (800a244 <mem_link_valid+0x74>)
 800a224:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d006      	beq.n	800a23a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	885b      	ldrh	r3, [r3, #2]
 800a230:	8afa      	ldrh	r2, [r7, #22]
 800a232:	429a      	cmp	r2, r3
 800a234:	d001      	beq.n	800a23a <mem_link_valid+0x6a>
    return 0;
 800a236:	2300      	movs	r3, #0
 800a238:	e000      	b.n	800a23c <mem_link_valid+0x6c>
  }
  return 1;
 800a23a:	2301      	movs	r3, #1
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20008d80 	.word	0x20008d80

0800a248 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d070      	beq.n	800a338 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f003 0303 	and.w	r3, r3, #3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00d      	beq.n	800a27c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a260:	4b37      	ldr	r3, [pc, #220]	@ (800a340 <mem_free+0xf8>)
 800a262:	f240 2273 	movw	r2, #627	@ 0x273
 800a266:	4937      	ldr	r1, [pc, #220]	@ (800a344 <mem_free+0xfc>)
 800a268:	4837      	ldr	r0, [pc, #220]	@ (800a348 <mem_free+0x100>)
 800a26a:	f00a ff83 	bl	8015174 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a26e:	f00a fe63 	bl	8014f38 <sys_arch_protect>
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f00a fe6d 	bl	8014f54 <sys_arch_unprotect>
    return;
 800a27a:	e05e      	b.n	800a33a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3b08      	subs	r3, #8
 800a280:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a282:	4b32      	ldr	r3, [pc, #200]	@ (800a34c <mem_free+0x104>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69fa      	ldr	r2, [r7, #28]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d306      	bcc.n	800a29a <mem_free+0x52>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f103 020c 	add.w	r2, r3, #12
 800a292:	4b2f      	ldr	r3, [pc, #188]	@ (800a350 <mem_free+0x108>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	d90d      	bls.n	800a2b6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a29a:	4b29      	ldr	r3, [pc, #164]	@ (800a340 <mem_free+0xf8>)
 800a29c:	f240 227f 	movw	r2, #639	@ 0x27f
 800a2a0:	492c      	ldr	r1, [pc, #176]	@ (800a354 <mem_free+0x10c>)
 800a2a2:	4829      	ldr	r0, [pc, #164]	@ (800a348 <mem_free+0x100>)
 800a2a4:	f00a ff66 	bl	8015174 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2a8:	f00a fe46 	bl	8014f38 <sys_arch_protect>
 800a2ac:	6138      	str	r0, [r7, #16]
 800a2ae:	6938      	ldr	r0, [r7, #16]
 800a2b0:	f00a fe50 	bl	8014f54 <sys_arch_unprotect>
    return;
 800a2b4:	e041      	b.n	800a33a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a2b6:	4828      	ldr	r0, [pc, #160]	@ (800a358 <mem_free+0x110>)
 800a2b8:	f00a fdfc 	bl	8014eb4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	791b      	ldrb	r3, [r3, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d110      	bne.n	800a2e6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a2c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a340 <mem_free+0xf8>)
 800a2c6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a2ca:	4924      	ldr	r1, [pc, #144]	@ (800a35c <mem_free+0x114>)
 800a2cc:	481e      	ldr	r0, [pc, #120]	@ (800a348 <mem_free+0x100>)
 800a2ce:	f00a ff51 	bl	8015174 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a2d2:	4821      	ldr	r0, [pc, #132]	@ (800a358 <mem_free+0x110>)
 800a2d4:	f00a fdfd 	bl	8014ed2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2d8:	f00a fe2e 	bl	8014f38 <sys_arch_protect>
 800a2dc:	6178      	str	r0, [r7, #20]
 800a2de:	6978      	ldr	r0, [r7, #20]
 800a2e0:	f00a fe38 	bl	8014f54 <sys_arch_unprotect>
    return;
 800a2e4:	e029      	b.n	800a33a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a2e6:	69f8      	ldr	r0, [r7, #28]
 800a2e8:	f7ff ff72 	bl	800a1d0 <mem_link_valid>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d110      	bne.n	800a314 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a2f2:	4b13      	ldr	r3, [pc, #76]	@ (800a340 <mem_free+0xf8>)
 800a2f4:	f240 2295 	movw	r2, #661	@ 0x295
 800a2f8:	4919      	ldr	r1, [pc, #100]	@ (800a360 <mem_free+0x118>)
 800a2fa:	4813      	ldr	r0, [pc, #76]	@ (800a348 <mem_free+0x100>)
 800a2fc:	f00a ff3a 	bl	8015174 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a300:	4815      	ldr	r0, [pc, #84]	@ (800a358 <mem_free+0x110>)
 800a302:	f00a fde6 	bl	8014ed2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a306:	f00a fe17 	bl	8014f38 <sys_arch_protect>
 800a30a:	61b8      	str	r0, [r7, #24]
 800a30c:	69b8      	ldr	r0, [r7, #24]
 800a30e:	f00a fe21 	bl	8014f54 <sys_arch_unprotect>
    return;
 800a312:	e012      	b.n	800a33a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2200      	movs	r2, #0
 800a318:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a31a:	4b12      	ldr	r3, [pc, #72]	@ (800a364 <mem_free+0x11c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	429a      	cmp	r2, r3
 800a322:	d202      	bcs.n	800a32a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a324:	4a0f      	ldr	r2, [pc, #60]	@ (800a364 <mem_free+0x11c>)
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a32a:	69f8      	ldr	r0, [r7, #28]
 800a32c:	f7ff fe60 	bl	8009ff0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a330:	4809      	ldr	r0, [pc, #36]	@ (800a358 <mem_free+0x110>)
 800a332:	f00a fdce 	bl	8014ed2 <sys_mutex_unlock>
 800a336:	e000      	b.n	800a33a <mem_free+0xf2>
    return;
 800a338:	bf00      	nop
}
 800a33a:	3720      	adds	r7, #32
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	08016cc4 	.word	0x08016cc4
 800a344:	08016db4 	.word	0x08016db4
 800a348:	08016d0c 	.word	0x08016d0c
 800a34c:	20008d7c 	.word	0x20008d7c
 800a350:	20008d80 	.word	0x20008d80
 800a354:	08016dd8 	.word	0x08016dd8
 800a358:	20008d84 	.word	0x20008d84
 800a35c:	08016df4 	.word	0x08016df4
 800a360:	08016e1c 	.word	0x08016e1c
 800a364:	20008d88 	.word	0x20008d88

0800a368 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	460b      	mov	r3, r1
 800a372:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a374:	887b      	ldrh	r3, [r7, #2]
 800a376:	3303      	adds	r3, #3
 800a378:	b29b      	uxth	r3, r3
 800a37a:	f023 0303 	bic.w	r3, r3, #3
 800a37e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a380:	8bfb      	ldrh	r3, [r7, #30]
 800a382:	2b0b      	cmp	r3, #11
 800a384:	d801      	bhi.n	800a38a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a386:	230c      	movs	r3, #12
 800a388:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a38a:	8bfb      	ldrh	r3, [r7, #30]
 800a38c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a390:	d803      	bhi.n	800a39a <mem_trim+0x32>
 800a392:	8bfa      	ldrh	r2, [r7, #30]
 800a394:	887b      	ldrh	r3, [r7, #2]
 800a396:	429a      	cmp	r2, r3
 800a398:	d201      	bcs.n	800a39e <mem_trim+0x36>
    return NULL;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e0d8      	b.n	800a550 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a39e:	4b6e      	ldr	r3, [pc, #440]	@ (800a558 <mem_trim+0x1f0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d304      	bcc.n	800a3b2 <mem_trim+0x4a>
 800a3a8:	4b6c      	ldr	r3, [pc, #432]	@ (800a55c <mem_trim+0x1f4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d306      	bcc.n	800a3c0 <mem_trim+0x58>
 800a3b2:	4b6b      	ldr	r3, [pc, #428]	@ (800a560 <mem_trim+0x1f8>)
 800a3b4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a3b8:	496a      	ldr	r1, [pc, #424]	@ (800a564 <mem_trim+0x1fc>)
 800a3ba:	486b      	ldr	r0, [pc, #428]	@ (800a568 <mem_trim+0x200>)
 800a3bc:	f00a feda 	bl	8015174 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a3c0:	4b65      	ldr	r3, [pc, #404]	@ (800a558 <mem_trim+0x1f0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d304      	bcc.n	800a3d4 <mem_trim+0x6c>
 800a3ca:	4b64      	ldr	r3, [pc, #400]	@ (800a55c <mem_trim+0x1f4>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d307      	bcc.n	800a3e4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3d4:	f00a fdb0 	bl	8014f38 <sys_arch_protect>
 800a3d8:	60b8      	str	r0, [r7, #8]
 800a3da:	68b8      	ldr	r0, [r7, #8]
 800a3dc:	f00a fdba 	bl	8014f54 <sys_arch_unprotect>
    return rmem;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	e0b5      	b.n	800a550 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3b08      	subs	r3, #8
 800a3e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a3ea:	69b8      	ldr	r0, [r7, #24]
 800a3ec:	f7ff fdee 	bl	8009fcc <mem_to_ptr>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	881a      	ldrh	r2, [r3, #0]
 800a3f8:	8afb      	ldrh	r3, [r7, #22]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	3b08      	subs	r3, #8
 800a400:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a402:	8bfa      	ldrh	r2, [r7, #30]
 800a404:	8abb      	ldrh	r3, [r7, #20]
 800a406:	429a      	cmp	r2, r3
 800a408:	d906      	bls.n	800a418 <mem_trim+0xb0>
 800a40a:	4b55      	ldr	r3, [pc, #340]	@ (800a560 <mem_trim+0x1f8>)
 800a40c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a410:	4956      	ldr	r1, [pc, #344]	@ (800a56c <mem_trim+0x204>)
 800a412:	4855      	ldr	r0, [pc, #340]	@ (800a568 <mem_trim+0x200>)
 800a414:	f00a feae 	bl	8015174 <iprintf>
  if (newsize > size) {
 800a418:	8bfa      	ldrh	r2, [r7, #30]
 800a41a:	8abb      	ldrh	r3, [r7, #20]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d901      	bls.n	800a424 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a420:	2300      	movs	r3, #0
 800a422:	e095      	b.n	800a550 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a424:	8bfa      	ldrh	r2, [r7, #30]
 800a426:	8abb      	ldrh	r3, [r7, #20]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d101      	bne.n	800a430 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	e08f      	b.n	800a550 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a430:	484f      	ldr	r0, [pc, #316]	@ (800a570 <mem_trim+0x208>)
 800a432:	f00a fd3f 	bl	8014eb4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	881b      	ldrh	r3, [r3, #0]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fdb4 	bl	8009fa8 <ptr_to_mem>
 800a440:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	791b      	ldrb	r3, [r3, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d13f      	bne.n	800a4ca <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a452:	d106      	bne.n	800a462 <mem_trim+0xfa>
 800a454:	4b42      	ldr	r3, [pc, #264]	@ (800a560 <mem_trim+0x1f8>)
 800a456:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a45a:	4946      	ldr	r1, [pc, #280]	@ (800a574 <mem_trim+0x20c>)
 800a45c:	4842      	ldr	r0, [pc, #264]	@ (800a568 <mem_trim+0x200>)
 800a45e:	f00a fe89 	bl	8015174 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a468:	8afa      	ldrh	r2, [r7, #22]
 800a46a:	8bfb      	ldrh	r3, [r7, #30]
 800a46c:	4413      	add	r3, r2
 800a46e:	b29b      	uxth	r3, r3
 800a470:	3308      	adds	r3, #8
 800a472:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a474:	4b40      	ldr	r3, [pc, #256]	@ (800a578 <mem_trim+0x210>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d106      	bne.n	800a48c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a47e:	89fb      	ldrh	r3, [r7, #14]
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fd91 	bl	8009fa8 <ptr_to_mem>
 800a486:	4603      	mov	r3, r0
 800a488:	4a3b      	ldr	r2, [pc, #236]	@ (800a578 <mem_trim+0x210>)
 800a48a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a48c:	89fb      	ldrh	r3, [r7, #14]
 800a48e:	4618      	mov	r0, r3
 800a490:	f7ff fd8a 	bl	8009fa8 <ptr_to_mem>
 800a494:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2200      	movs	r2, #0
 800a49a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	89ba      	ldrh	r2, [r7, #12]
 800a4a0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	8afa      	ldrh	r2, [r7, #22]
 800a4a6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	89fa      	ldrh	r2, [r7, #14]
 800a4ac:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a4b6:	d047      	beq.n	800a548 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7ff fd73 	bl	8009fa8 <ptr_to_mem>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	89fb      	ldrh	r3, [r7, #14]
 800a4c6:	8053      	strh	r3, [r2, #2]
 800a4c8:	e03e      	b.n	800a548 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a4ca:	8bfb      	ldrh	r3, [r7, #30]
 800a4cc:	f103 0214 	add.w	r2, r3, #20
 800a4d0:	8abb      	ldrh	r3, [r7, #20]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d838      	bhi.n	800a548 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a4d6:	8afa      	ldrh	r2, [r7, #22]
 800a4d8:	8bfb      	ldrh	r3, [r7, #30]
 800a4da:	4413      	add	r3, r2
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	3308      	adds	r3, #8
 800a4e0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a4ea:	d106      	bne.n	800a4fa <mem_trim+0x192>
 800a4ec:	4b1c      	ldr	r3, [pc, #112]	@ (800a560 <mem_trim+0x1f8>)
 800a4ee:	f240 3216 	movw	r2, #790	@ 0x316
 800a4f2:	4920      	ldr	r1, [pc, #128]	@ (800a574 <mem_trim+0x20c>)
 800a4f4:	481c      	ldr	r0, [pc, #112]	@ (800a568 <mem_trim+0x200>)
 800a4f6:	f00a fe3d 	bl	8015174 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a4fa:	89fb      	ldrh	r3, [r7, #14]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff fd53 	bl	8009fa8 <ptr_to_mem>
 800a502:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a504:	4b1c      	ldr	r3, [pc, #112]	@ (800a578 <mem_trim+0x210>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d202      	bcs.n	800a514 <mem_trim+0x1ac>
      lfree = mem2;
 800a50e:	4a1a      	ldr	r2, [pc, #104]	@ (800a578 <mem_trim+0x210>)
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	2200      	movs	r2, #0
 800a518:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	881a      	ldrh	r2, [r3, #0]
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	8afa      	ldrh	r2, [r7, #22]
 800a526:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	89fa      	ldrh	r2, [r7, #14]
 800a52c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a536:	d007      	beq.n	800a548 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff fd33 	bl	8009fa8 <ptr_to_mem>
 800a542:	4602      	mov	r2, r0
 800a544:	89fb      	ldrh	r3, [r7, #14]
 800a546:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a548:	4809      	ldr	r0, [pc, #36]	@ (800a570 <mem_trim+0x208>)
 800a54a:	f00a fcc2 	bl	8014ed2 <sys_mutex_unlock>
  return rmem;
 800a54e:	687b      	ldr	r3, [r7, #4]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3720      	adds	r7, #32
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20008d7c 	.word	0x20008d7c
 800a55c:	20008d80 	.word	0x20008d80
 800a560:	08016cc4 	.word	0x08016cc4
 800a564:	08016e50 	.word	0x08016e50
 800a568:	08016d0c 	.word	0x08016d0c
 800a56c:	08016e68 	.word	0x08016e68
 800a570:	20008d84 	.word	0x20008d84
 800a574:	08016e88 	.word	0x08016e88
 800a578:	20008d88 	.word	0x20008d88

0800a57c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a586:	88fb      	ldrh	r3, [r7, #6]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <mem_malloc+0x14>
    return NULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	e0e2      	b.n	800a756 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a590:	88fb      	ldrh	r3, [r7, #6]
 800a592:	3303      	adds	r3, #3
 800a594:	b29b      	uxth	r3, r3
 800a596:	f023 0303 	bic.w	r3, r3, #3
 800a59a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a59c:	8bbb      	ldrh	r3, [r7, #28]
 800a59e:	2b0b      	cmp	r3, #11
 800a5a0:	d801      	bhi.n	800a5a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a5a6:	8bbb      	ldrh	r3, [r7, #28]
 800a5a8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a5ac:	d803      	bhi.n	800a5b6 <mem_malloc+0x3a>
 800a5ae:	8bba      	ldrh	r2, [r7, #28]
 800a5b0:	88fb      	ldrh	r3, [r7, #6]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d201      	bcs.n	800a5ba <mem_malloc+0x3e>
    return NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e0cd      	b.n	800a756 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a5ba:	4869      	ldr	r0, [pc, #420]	@ (800a760 <mem_malloc+0x1e4>)
 800a5bc:	f00a fc7a 	bl	8014eb4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a5c0:	4b68      	ldr	r3, [pc, #416]	@ (800a764 <mem_malloc+0x1e8>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7ff fd01 	bl	8009fcc <mem_to_ptr>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	83fb      	strh	r3, [r7, #30]
 800a5ce:	e0b7      	b.n	800a740 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a5d0:	8bfb      	ldrh	r3, [r7, #30]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7ff fce8 	bl	8009fa8 <ptr_to_mem>
 800a5d8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	791b      	ldrb	r3, [r3, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f040 80a7 	bne.w	800a732 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	8bfb      	ldrh	r3, [r7, #30]
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	f1a3 0208 	sub.w	r2, r3, #8
 800a5f2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	f0c0 809c 	bcc.w	800a732 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	8bfb      	ldrh	r3, [r7, #30]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	f1a3 0208 	sub.w	r2, r3, #8
 800a608:	8bbb      	ldrh	r3, [r7, #28]
 800a60a:	3314      	adds	r3, #20
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d333      	bcc.n	800a678 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a610:	8bfa      	ldrh	r2, [r7, #30]
 800a612:	8bbb      	ldrh	r3, [r7, #28]
 800a614:	4413      	add	r3, r2
 800a616:	b29b      	uxth	r3, r3
 800a618:	3308      	adds	r3, #8
 800a61a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a61c:	8a7b      	ldrh	r3, [r7, #18]
 800a61e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a622:	d106      	bne.n	800a632 <mem_malloc+0xb6>
 800a624:	4b50      	ldr	r3, [pc, #320]	@ (800a768 <mem_malloc+0x1ec>)
 800a626:	f240 3287 	movw	r2, #903	@ 0x387
 800a62a:	4950      	ldr	r1, [pc, #320]	@ (800a76c <mem_malloc+0x1f0>)
 800a62c:	4850      	ldr	r0, [pc, #320]	@ (800a770 <mem_malloc+0x1f4>)
 800a62e:	f00a fda1 	bl	8015174 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a632:	8a7b      	ldrh	r3, [r7, #18]
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff fcb7 	bl	8009fa8 <ptr_to_mem>
 800a63a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	881a      	ldrh	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	8bfa      	ldrh	r2, [r7, #30]
 800a64e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	8a7a      	ldrh	r2, [r7, #18]
 800a654:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	2201      	movs	r2, #1
 800a65a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a664:	d00b      	beq.n	800a67e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff fc9c 	bl	8009fa8 <ptr_to_mem>
 800a670:	4602      	mov	r2, r0
 800a672:	8a7b      	ldrh	r3, [r7, #18]
 800a674:	8053      	strh	r3, [r2, #2]
 800a676:	e002      	b.n	800a67e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2201      	movs	r2, #1
 800a67c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a67e:	4b39      	ldr	r3, [pc, #228]	@ (800a764 <mem_malloc+0x1e8>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	429a      	cmp	r2, r3
 800a686:	d127      	bne.n	800a6d8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a688:	4b36      	ldr	r3, [pc, #216]	@ (800a764 <mem_malloc+0x1e8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a68e:	e005      	b.n	800a69c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fc87 	bl	8009fa8 <ptr_to_mem>
 800a69a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	791b      	ldrb	r3, [r3, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d004      	beq.n	800a6ae <mem_malloc+0x132>
 800a6a4:	4b33      	ldr	r3, [pc, #204]	@ (800a774 <mem_malloc+0x1f8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d1f0      	bne.n	800a690 <mem_malloc+0x114>
          }
          lfree = cur;
 800a6ae:	4a2d      	ldr	r2, [pc, #180]	@ (800a764 <mem_malloc+0x1e8>)
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a6b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a764 <mem_malloc+0x1e8>)
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	4b2e      	ldr	r3, [pc, #184]	@ (800a774 <mem_malloc+0x1f8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d00b      	beq.n	800a6d8 <mem_malloc+0x15c>
 800a6c0:	4b28      	ldr	r3, [pc, #160]	@ (800a764 <mem_malloc+0x1e8>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	791b      	ldrb	r3, [r3, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d006      	beq.n	800a6d8 <mem_malloc+0x15c>
 800a6ca:	4b27      	ldr	r3, [pc, #156]	@ (800a768 <mem_malloc+0x1ec>)
 800a6cc:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a6d0:	4929      	ldr	r1, [pc, #164]	@ (800a778 <mem_malloc+0x1fc>)
 800a6d2:	4827      	ldr	r0, [pc, #156]	@ (800a770 <mem_malloc+0x1f4>)
 800a6d4:	f00a fd4e 	bl	8015174 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a6d8:	4821      	ldr	r0, [pc, #132]	@ (800a760 <mem_malloc+0x1e4>)
 800a6da:	f00a fbfa 	bl	8014ed2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a6de:	8bba      	ldrh	r2, [r7, #28]
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	4a23      	ldr	r2, [pc, #140]	@ (800a774 <mem_malloc+0x1f8>)
 800a6e8:	6812      	ldr	r2, [r2, #0]
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d906      	bls.n	800a6fc <mem_malloc+0x180>
 800a6ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a768 <mem_malloc+0x1ec>)
 800a6f0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a6f4:	4921      	ldr	r1, [pc, #132]	@ (800a77c <mem_malloc+0x200>)
 800a6f6:	481e      	ldr	r0, [pc, #120]	@ (800a770 <mem_malloc+0x1f4>)
 800a6f8:	f00a fd3c 	bl	8015174 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f003 0303 	and.w	r3, r3, #3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d006      	beq.n	800a714 <mem_malloc+0x198>
 800a706:	4b18      	ldr	r3, [pc, #96]	@ (800a768 <mem_malloc+0x1ec>)
 800a708:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a70c:	491c      	ldr	r1, [pc, #112]	@ (800a780 <mem_malloc+0x204>)
 800a70e:	4818      	ldr	r0, [pc, #96]	@ (800a770 <mem_malloc+0x1f4>)
 800a710:	f00a fd30 	bl	8015174 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f003 0303 	and.w	r3, r3, #3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d006      	beq.n	800a72c <mem_malloc+0x1b0>
 800a71e:	4b12      	ldr	r3, [pc, #72]	@ (800a768 <mem_malloc+0x1ec>)
 800a720:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a724:	4917      	ldr	r1, [pc, #92]	@ (800a784 <mem_malloc+0x208>)
 800a726:	4812      	ldr	r0, [pc, #72]	@ (800a770 <mem_malloc+0x1f4>)
 800a728:	f00a fd24 	bl	8015174 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	3308      	adds	r3, #8
 800a730:	e011      	b.n	800a756 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a732:	8bfb      	ldrh	r3, [r7, #30]
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fc37 	bl	8009fa8 <ptr_to_mem>
 800a73a:	4603      	mov	r3, r0
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a740:	8bfa      	ldrh	r2, [r7, #30]
 800a742:	8bbb      	ldrh	r3, [r7, #28]
 800a744:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800a748:	429a      	cmp	r2, r3
 800a74a:	f4ff af41 	bcc.w	800a5d0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a74e:	4804      	ldr	r0, [pc, #16]	@ (800a760 <mem_malloc+0x1e4>)
 800a750:	f00a fbbf 	bl	8014ed2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3720      	adds	r7, #32
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20008d84 	.word	0x20008d84
 800a764:	20008d88 	.word	0x20008d88
 800a768:	08016cc4 	.word	0x08016cc4
 800a76c:	08016e88 	.word	0x08016e88
 800a770:	08016d0c 	.word	0x08016d0c
 800a774:	20008d80 	.word	0x20008d80
 800a778:	08016e9c 	.word	0x08016e9c
 800a77c:	08016eb8 	.word	0x08016eb8
 800a780:	08016ee8 	.word	0x08016ee8
 800a784:	08016f18 	.word	0x08016f18

0800a788 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	3303      	adds	r3, #3
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	e011      	b.n	800a7ce <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	60fb      	str	r3, [r7, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	885b      	ldrh	r3, [r3, #2]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	dbe7      	blt.n	800a7aa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a7da:	bf00      	nop
 800a7dc:	bf00      	nop
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	80fb      	strh	r3, [r7, #6]
 800a7f2:	e009      	b.n	800a808 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a7f4:	88fb      	ldrh	r3, [r7, #6]
 800a7f6:	4a08      	ldr	r2, [pc, #32]	@ (800a818 <memp_init+0x30>)
 800a7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7ff ffc3 	bl	800a788 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a802:	88fb      	ldrh	r3, [r7, #6]
 800a804:	3301      	adds	r3, #1
 800a806:	80fb      	strh	r3, [r7, #6]
 800a808:	88fb      	ldrh	r3, [r7, #6]
 800a80a:	2b0c      	cmp	r3, #12
 800a80c:	d9f2      	bls.n	800a7f4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a80e:	bf00      	nop
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	0801a504 	.word	0x0801a504

0800a81c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a824:	f00a fb88 	bl	8014f38 <sys_arch_protect>
 800a828:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d015      	beq.n	800a864 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	6812      	ldr	r2, [r2, #0]
 800a840:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f003 0303 	and.w	r3, r3, #3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d006      	beq.n	800a85a <do_memp_malloc_pool+0x3e>
 800a84c:	4b09      	ldr	r3, [pc, #36]	@ (800a874 <do_memp_malloc_pool+0x58>)
 800a84e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a852:	4909      	ldr	r1, [pc, #36]	@ (800a878 <do_memp_malloc_pool+0x5c>)
 800a854:	4809      	ldr	r0, [pc, #36]	@ (800a87c <do_memp_malloc_pool+0x60>)
 800a856:	f00a fc8d 	bl	8015174 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f00a fb7a 	bl	8014f54 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	e003      	b.n	800a86c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f00a fb75 	bl	8014f54 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	08016f3c 	.word	0x08016f3c
 800a878:	08016f6c 	.word	0x08016f6c
 800a87c:	08016f90 	.word	0x08016f90

0800a880 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d106      	bne.n	800a89c <memp_malloc_pool+0x1c>
 800a88e:	4b0a      	ldr	r3, [pc, #40]	@ (800a8b8 <memp_malloc_pool+0x38>)
 800a890:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a894:	4909      	ldr	r1, [pc, #36]	@ (800a8bc <memp_malloc_pool+0x3c>)
 800a896:	480a      	ldr	r0, [pc, #40]	@ (800a8c0 <memp_malloc_pool+0x40>)
 800a898:	f00a fc6c 	bl	8015174 <iprintf>
  if (desc == NULL) {
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <memp_malloc_pool+0x26>
    return NULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e003      	b.n	800a8ae <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff ffb8 	bl	800a81c <do_memp_malloc_pool>
 800a8ac:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	08016f3c 	.word	0x08016f3c
 800a8bc:	08016fb8 	.word	0x08016fb8
 800a8c0:	08016f90 	.word	0x08016f90

0800a8c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	2b0c      	cmp	r3, #12
 800a8d2:	d908      	bls.n	800a8e6 <memp_malloc+0x22>
 800a8d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a900 <memp_malloc+0x3c>)
 800a8d6:	f240 1257 	movw	r2, #343	@ 0x157
 800a8da:	490a      	ldr	r1, [pc, #40]	@ (800a904 <memp_malloc+0x40>)
 800a8dc:	480a      	ldr	r0, [pc, #40]	@ (800a908 <memp_malloc+0x44>)
 800a8de:	f00a fc49 	bl	8015174 <iprintf>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e008      	b.n	800a8f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	4a08      	ldr	r2, [pc, #32]	@ (800a90c <memp_malloc+0x48>)
 800a8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff ff94 	bl	800a81c <do_memp_malloc_pool>
 800a8f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	08016f3c 	.word	0x08016f3c
 800a904:	08016fcc 	.word	0x08016fcc
 800a908:	08016f90 	.word	0x08016f90
 800a90c:	0801a504 	.word	0x0801a504

0800a910 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	f003 0303 	and.w	r3, r3, #3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d006      	beq.n	800a932 <do_memp_free_pool+0x22>
 800a924:	4b0d      	ldr	r3, [pc, #52]	@ (800a95c <do_memp_free_pool+0x4c>)
 800a926:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a92a:	490d      	ldr	r1, [pc, #52]	@ (800a960 <do_memp_free_pool+0x50>)
 800a92c:	480d      	ldr	r0, [pc, #52]	@ (800a964 <do_memp_free_pool+0x54>)
 800a92e:	f00a fc21 	bl	8015174 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a936:	f00a faff 	bl	8014f38 <sys_arch_protect>
 800a93a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a94e:	68b8      	ldr	r0, [r7, #8]
 800a950:	f00a fb00 	bl	8014f54 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	08016f3c 	.word	0x08016f3c
 800a960:	08016fec 	.word	0x08016fec
 800a964:	08016f90 	.word	0x08016f90

0800a968 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <memp_free_pool+0x1e>
 800a978:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a4 <memp_free_pool+0x3c>)
 800a97a:	f240 1295 	movw	r2, #405	@ 0x195
 800a97e:	490a      	ldr	r1, [pc, #40]	@ (800a9a8 <memp_free_pool+0x40>)
 800a980:	480a      	ldr	r0, [pc, #40]	@ (800a9ac <memp_free_pool+0x44>)
 800a982:	f00a fbf7 	bl	8015174 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d007      	beq.n	800a99c <memp_free_pool+0x34>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7ff ffbb 	bl	800a910 <do_memp_free_pool>
 800a99a:	e000      	b.n	800a99e <memp_free_pool+0x36>
    return;
 800a99c:	bf00      	nop
}
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	08016f3c 	.word	0x08016f3c
 800a9a8:	08016fb8 	.word	0x08016fb8
 800a9ac:	08016f90 	.word	0x08016f90

0800a9b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	6039      	str	r1, [r7, #0]
 800a9ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
 800a9be:	2b0c      	cmp	r3, #12
 800a9c0:	d907      	bls.n	800a9d2 <memp_free+0x22>
 800a9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f4 <memp_free+0x44>)
 800a9c4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a9c8:	490b      	ldr	r1, [pc, #44]	@ (800a9f8 <memp_free+0x48>)
 800a9ca:	480c      	ldr	r0, [pc, #48]	@ (800a9fc <memp_free+0x4c>)
 800a9cc:	f00a fbd2 	bl	8015174 <iprintf>
 800a9d0:	e00c      	b.n	800a9ec <memp_free+0x3c>

  if (mem == NULL) {
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d008      	beq.n	800a9ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	4a09      	ldr	r2, [pc, #36]	@ (800aa00 <memp_free+0x50>)
 800a9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7ff ff94 	bl	800a910 <do_memp_free_pool>
 800a9e8:	e000      	b.n	800a9ec <memp_free+0x3c>
    return;
 800a9ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	08016f3c 	.word	0x08016f3c
 800a9f8:	0801700c 	.word	0x0801700c
 800a9fc:	08016f90 	.word	0x08016f90
 800aa00:	0801a504 	.word	0x0801a504

0800aa04 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aa08:	bf00      	nop
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
	...

0800aa14 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d108      	bne.n	800aa3a <netif_add+0x26>
 800aa28:	4b57      	ldr	r3, [pc, #348]	@ (800ab88 <netif_add+0x174>)
 800aa2a:	f240 1227 	movw	r2, #295	@ 0x127
 800aa2e:	4957      	ldr	r1, [pc, #348]	@ (800ab8c <netif_add+0x178>)
 800aa30:	4857      	ldr	r0, [pc, #348]	@ (800ab90 <netif_add+0x17c>)
 800aa32:	f00a fb9f 	bl	8015174 <iprintf>
 800aa36:	2300      	movs	r3, #0
 800aa38:	e0a2      	b.n	800ab80 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d108      	bne.n	800aa52 <netif_add+0x3e>
 800aa40:	4b51      	ldr	r3, [pc, #324]	@ (800ab88 <netif_add+0x174>)
 800aa42:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800aa46:	4953      	ldr	r1, [pc, #332]	@ (800ab94 <netif_add+0x180>)
 800aa48:	4851      	ldr	r0, [pc, #324]	@ (800ab90 <netif_add+0x17c>)
 800aa4a:	f00a fb93 	bl	8015174 <iprintf>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e096      	b.n	800ab80 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aa58:	4b4f      	ldr	r3, [pc, #316]	@ (800ab98 <netif_add+0x184>)
 800aa5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aa62:	4b4d      	ldr	r3, [pc, #308]	@ (800ab98 <netif_add+0x184>)
 800aa64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aa6c:	4b4a      	ldr	r3, [pc, #296]	@ (800ab98 <netif_add+0x184>)
 800aa6e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4a45      	ldr	r2, [pc, #276]	@ (800ab9c <netif_add+0x188>)
 800aa86:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a3a      	ldr	r2, [r7, #32]
 800aaa0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aaa2:	4b3f      	ldr	r3, [pc, #252]	@ (800aba0 <netif_add+0x18c>)
 800aaa4:	781a      	ldrb	r2, [r3, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aab0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f913 	bl	800ace4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	4798      	blx	r3
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <netif_add+0xba>
    return NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	e058      	b.n	800ab80 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aad4:	2bff      	cmp	r3, #255	@ 0xff
 800aad6:	d103      	bne.n	800aae0 <netif_add+0xcc>
        netif->num = 0;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aae4:	4b2f      	ldr	r3, [pc, #188]	@ (800aba4 <netif_add+0x190>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	617b      	str	r3, [r7, #20]
 800aaea:	e02b      	b.n	800ab44 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d106      	bne.n	800ab02 <netif_add+0xee>
 800aaf4:	4b24      	ldr	r3, [pc, #144]	@ (800ab88 <netif_add+0x174>)
 800aaf6:	f240 128b 	movw	r2, #395	@ 0x18b
 800aafa:	492b      	ldr	r1, [pc, #172]	@ (800aba8 <netif_add+0x194>)
 800aafc:	4824      	ldr	r0, [pc, #144]	@ (800ab90 <netif_add+0x17c>)
 800aafe:	f00a fb39 	bl	8015174 <iprintf>
        num_netifs++;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	3301      	adds	r3, #1
 800ab06:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	2bff      	cmp	r3, #255	@ 0xff
 800ab0c:	dd06      	ble.n	800ab1c <netif_add+0x108>
 800ab0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ab88 <netif_add+0x174>)
 800ab10:	f240 128d 	movw	r2, #397	@ 0x18d
 800ab14:	4925      	ldr	r1, [pc, #148]	@ (800abac <netif_add+0x198>)
 800ab16:	481e      	ldr	r0, [pc, #120]	@ (800ab90 <netif_add+0x17c>)
 800ab18:	f00a fb2c 	bl	8015174 <iprintf>
        if (netif2->num == netif->num) {
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d108      	bne.n	800ab3e <netif_add+0x12a>
          netif->num++;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab32:	3301      	adds	r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800ab3c:	e005      	b.n	800ab4a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1d0      	bne.n	800aaec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1be      	bne.n	800aace <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab56:	2bfe      	cmp	r3, #254	@ 0xfe
 800ab58:	d103      	bne.n	800ab62 <netif_add+0x14e>
    netif_num = 0;
 800ab5a:	4b11      	ldr	r3, [pc, #68]	@ (800aba0 <netif_add+0x18c>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	e006      	b.n	800ab70 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab68:	3301      	adds	r3, #1
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	4b0c      	ldr	r3, [pc, #48]	@ (800aba0 <netif_add+0x18c>)
 800ab6e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ab70:	4b0c      	ldr	r3, [pc, #48]	@ (800aba4 <netif_add+0x190>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ab78:	4a0a      	ldr	r2, [pc, #40]	@ (800aba4 <netif_add+0x190>)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3718      	adds	r7, #24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	08017028 	.word	0x08017028
 800ab8c:	080170bc 	.word	0x080170bc
 800ab90:	08017078 	.word	0x08017078
 800ab94:	080170d8 	.word	0x080170d8
 800ab98:	0801a578 	.word	0x0801a578
 800ab9c:	0800afbf 	.word	0x0800afbf
 800aba0:	2000be60 	.word	0x2000be60
 800aba4:	2000be58 	.word	0x2000be58
 800aba8:	080170fc 	.word	0x080170fc
 800abac:	08017110 	.word	0x08017110

0800abb0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f002 fe51 	bl	800d864 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f007 fcfd 	bl	80125c4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800abca:	bf00      	nop
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
	...

0800abd4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d106      	bne.n	800abf4 <netif_do_set_ipaddr+0x20>
 800abe6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac5c <netif_do_set_ipaddr+0x88>)
 800abe8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800abec:	491c      	ldr	r1, [pc, #112]	@ (800ac60 <netif_do_set_ipaddr+0x8c>)
 800abee:	481d      	ldr	r0, [pc, #116]	@ (800ac64 <netif_do_set_ipaddr+0x90>)
 800abf0:	f00a fac0 	bl	8015174 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d106      	bne.n	800ac08 <netif_do_set_ipaddr+0x34>
 800abfa:	4b18      	ldr	r3, [pc, #96]	@ (800ac5c <netif_do_set_ipaddr+0x88>)
 800abfc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ac00:	4917      	ldr	r1, [pc, #92]	@ (800ac60 <netif_do_set_ipaddr+0x8c>)
 800ac02:	4818      	ldr	r0, [pc, #96]	@ (800ac64 <netif_do_set_ipaddr+0x90>)
 800ac04:	f00a fab6 	bl	8015174 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	3304      	adds	r3, #4
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d01c      	beq.n	800ac50 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ac26:	f107 0314 	add.w	r3, r7, #20
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff ffbf 	bl	800abb0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <netif_do_set_ipaddr+0x6a>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	e000      	b.n	800ac40 <netif_do_set_ipaddr+0x6c>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ac44:	2101      	movs	r1, #1
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 f8d2 	bl	800adf0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e000      	b.n	800ac52 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	08017028 	.word	0x08017028
 800ac60:	08017140 	.word	0x08017140
 800ac64:	08017078 	.word	0x08017078

0800ac68 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d00a      	beq.n	800ac98 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <netif_do_set_netmask+0x26>
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	e000      	b.n	800ac90 <netif_do_set_netmask+0x28>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ac94:	2301      	movs	r3, #1
 800ac96:	e000      	b.n	800ac9a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b085      	sub	sp, #20
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	330c      	adds	r3, #12
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d00a      	beq.n	800acd6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <netif_do_set_gw+0x26>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	e000      	b.n	800acce <netif_do_set_gw+0x28>
 800accc:	2300      	movs	r3, #0
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800acd2:	2301      	movs	r3, #1
 800acd4:	e000      	b.n	800acd8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800acf2:	2300      	movs	r3, #0
 800acf4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ad00:	4b1c      	ldr	r3, [pc, #112]	@ (800ad74 <netif_set_addr+0x90>)
 800ad02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ad0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ad74 <netif_set_addr+0x90>)
 800ad0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ad14:	4b17      	ldr	r3, [pc, #92]	@ (800ad74 <netif_set_addr+0x90>)
 800ad16:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <netif_set_addr+0x42>
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <netif_set_addr+0x46>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <netif_set_addr+0x48>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d006      	beq.n	800ad42 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad34:	f107 0310 	add.w	r3, r7, #16
 800ad38:	461a      	mov	r2, r3
 800ad3a:	68b9      	ldr	r1, [r7, #8]
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff ff49 	bl	800abd4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff ff8e 	bl	800ac68 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff ffa8 	bl	800aca6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d106      	bne.n	800ad6a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad5c:	f107 0310 	add.w	r3, r7, #16
 800ad60:	461a      	mov	r2, r3
 800ad62:	68b9      	ldr	r1, [r7, #8]
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f7ff ff35 	bl	800abd4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ad6a:	bf00      	nop
 800ad6c:	3720      	adds	r7, #32
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	0801a578 	.word	0x0801a578

0800ad78 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ad80:	4a04      	ldr	r2, [pc, #16]	@ (800ad94 <netif_set_default+0x1c>)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	2000be5c 	.word	0x2000be5c

0800ad98 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d107      	bne.n	800adb6 <netif_set_up+0x1e>
 800ada6:	4b0f      	ldr	r3, [pc, #60]	@ (800ade4 <netif_set_up+0x4c>)
 800ada8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800adac:	490e      	ldr	r1, [pc, #56]	@ (800ade8 <netif_set_up+0x50>)
 800adae:	480f      	ldr	r0, [pc, #60]	@ (800adec <netif_set_up+0x54>)
 800adb0:	f00a f9e0 	bl	8015174 <iprintf>
 800adb4:	e013      	b.n	800adde <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10c      	bne.n	800adde <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adca:	f043 0301 	orr.w	r3, r3, #1
 800adce:	b2da      	uxtb	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800add6:	2103      	movs	r1, #3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f809 	bl	800adf0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	08017028 	.word	0x08017028
 800ade8:	080171b0 	.word	0x080171b0
 800adec:	08017078 	.word	0x08017078

0800adf0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <netif_issue_reports+0x20>
 800ae02:	4b18      	ldr	r3, [pc, #96]	@ (800ae64 <netif_issue_reports+0x74>)
 800ae04:	f240 326d 	movw	r2, #877	@ 0x36d
 800ae08:	4917      	ldr	r1, [pc, #92]	@ (800ae68 <netif_issue_reports+0x78>)
 800ae0a:	4818      	ldr	r0, [pc, #96]	@ (800ae6c <netif_issue_reports+0x7c>)
 800ae0c:	f00a f9b2 	bl	8015174 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae16:	f003 0304 	and.w	r3, r3, #4
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01e      	beq.n	800ae5c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae24:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d017      	beq.n	800ae5c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d013      	beq.n	800ae5e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00e      	beq.n	800ae5e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae46:	f003 0308 	and.w	r3, r3, #8
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d007      	beq.n	800ae5e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3304      	adds	r3, #4
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f008 fb1f 	bl	8013498 <etharp_request>
 800ae5a:	e000      	b.n	800ae5e <netif_issue_reports+0x6e>
    return;
 800ae5c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	08017028 	.word	0x08017028
 800ae68:	080171cc 	.word	0x080171cc
 800ae6c:	08017078 	.word	0x08017078

0800ae70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d107      	bne.n	800ae8e <netif_set_down+0x1e>
 800ae7e:	4b12      	ldr	r3, [pc, #72]	@ (800aec8 <netif_set_down+0x58>)
 800ae80:	f240 329b 	movw	r2, #923	@ 0x39b
 800ae84:	4911      	ldr	r1, [pc, #68]	@ (800aecc <netif_set_down+0x5c>)
 800ae86:	4812      	ldr	r0, [pc, #72]	@ (800aed0 <netif_set_down+0x60>)
 800ae88:	f00a f974 	bl	8015174 <iprintf>
 800ae8c:	e019      	b.n	800aec2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d012      	beq.n	800aec2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aea2:	f023 0301 	bic.w	r3, r3, #1
 800aea6:	b2da      	uxtb	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aeb4:	f003 0308 	and.w	r3, r3, #8
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f007 fea9 	bl	8012c14 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	08017028 	.word	0x08017028
 800aecc:	080171f0 	.word	0x080171f0
 800aed0:	08017078 	.word	0x08017078

0800aed4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d107      	bne.n	800aef2 <netif_set_link_up+0x1e>
 800aee2:	4b13      	ldr	r3, [pc, #76]	@ (800af30 <netif_set_link_up+0x5c>)
 800aee4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800aee8:	4912      	ldr	r1, [pc, #72]	@ (800af34 <netif_set_link_up+0x60>)
 800aeea:	4813      	ldr	r0, [pc, #76]	@ (800af38 <netif_set_link_up+0x64>)
 800aeec:	f00a f942 	bl	8015174 <iprintf>
 800aef0:	e01b      	b.n	800af2a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aef8:	f003 0304 	and.w	r3, r3, #4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d114      	bne.n	800af2a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af06:	f043 0304 	orr.w	r3, r3, #4
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800af12:	2103      	movs	r1, #3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff ff6b 	bl	800adf0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <netif_set_link_up+0x56>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	08017028 	.word	0x08017028
 800af34:	08017210 	.word	0x08017210
 800af38:	08017078 	.word	0x08017078

0800af3c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d107      	bne.n	800af5a <netif_set_link_down+0x1e>
 800af4a:	4b11      	ldr	r3, [pc, #68]	@ (800af90 <netif_set_link_down+0x54>)
 800af4c:	f240 4206 	movw	r2, #1030	@ 0x406
 800af50:	4910      	ldr	r1, [pc, #64]	@ (800af94 <netif_set_link_down+0x58>)
 800af52:	4811      	ldr	r0, [pc, #68]	@ (800af98 <netif_set_link_down+0x5c>)
 800af54:	f00a f90e 	bl	8015174 <iprintf>
 800af58:	e017      	b.n	800af8a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af60:	f003 0304 	and.w	r3, r3, #4
 800af64:	2b00      	cmp	r3, #0
 800af66:	d010      	beq.n	800af8a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af6e:	f023 0304 	bic.w	r3, r3, #4
 800af72:	b2da      	uxtb	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <netif_set_link_down+0x4e>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	08017028 	.word	0x08017028
 800af94:	08017234 	.word	0x08017234
 800af98:	08017078 	.word	0x08017078

0800af9c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	61da      	str	r2, [r3, #28]
  }
}
 800afb2:	bf00      	nop
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b085      	sub	sp, #20
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	60f8      	str	r0, [r7, #12]
 800afc6:	60b9      	str	r1, [r7, #8]
 800afc8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800afca:	f06f 030b 	mvn.w	r3, #11
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d013      	beq.n	800b014 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800afec:	4b0d      	ldr	r3, [pc, #52]	@ (800b024 <netif_get_by_index+0x48>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	e00c      	b.n	800b00e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800affa:	3301      	adds	r3, #1
 800affc:	b2db      	uxtb	r3, r3
 800affe:	79fa      	ldrb	r2, [r7, #7]
 800b000:	429a      	cmp	r2, r3
 800b002:	d101      	bne.n	800b008 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	e006      	b.n	800b016 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1ef      	bne.n	800aff4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	2000be58 	.word	0x2000be58

0800b028 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b02e:	f009 ff83 	bl	8014f38 <sys_arch_protect>
 800b032:	6038      	str	r0, [r7, #0]
 800b034:	4b0d      	ldr	r3, [pc, #52]	@ (800b06c <pbuf_free_ooseq+0x44>)
 800b036:	2200      	movs	r2, #0
 800b038:	701a      	strb	r2, [r3, #0]
 800b03a:	6838      	ldr	r0, [r7, #0]
 800b03c:	f009 ff8a 	bl	8014f54 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b040:	4b0b      	ldr	r3, [pc, #44]	@ (800b070 <pbuf_free_ooseq+0x48>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	607b      	str	r3, [r7, #4]
 800b046:	e00a      	b.n	800b05e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f002 fc45 	bl	800d8e0 <tcp_free_ooseq>
      return;
 800b056:	e005      	b.n	800b064 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	607b      	str	r3, [r7, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1f1      	bne.n	800b048 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	2000be61 	.word	0x2000be61
 800b070:	2000be70 	.word	0x2000be70

0800b074 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b07c:	f7ff ffd4 	bl	800b028 <pbuf_free_ooseq>
}
 800b080:	bf00      	nop
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b08e:	f009 ff53 	bl	8014f38 <sys_arch_protect>
 800b092:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b094:	4b0f      	ldr	r3, [pc, #60]	@ (800b0d4 <pbuf_pool_is_empty+0x4c>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b09a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0d4 <pbuf_pool_is_empty+0x4c>)
 800b09c:	2201      	movs	r2, #1
 800b09e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f009 ff57 	bl	8014f54 <sys_arch_unprotect>

  if (!queued) {
 800b0a6:	78fb      	ldrb	r3, [r7, #3]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10f      	bne.n	800b0cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	480a      	ldr	r0, [pc, #40]	@ (800b0d8 <pbuf_pool_is_empty+0x50>)
 800b0b0:	f7fe fe4c 	bl	8009d4c <tcpip_try_callback>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d008      	beq.n	800b0cc <pbuf_pool_is_empty+0x44>
 800b0ba:	f009 ff3d 	bl	8014f38 <sys_arch_protect>
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	4b04      	ldr	r3, [pc, #16]	@ (800b0d4 <pbuf_pool_is_empty+0x4c>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f009 ff44 	bl	8014f54 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	2000be61 	.word	0x2000be61
 800b0d8:	0800b075 	.word	0x0800b075

0800b0dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	80fb      	strh	r3, [r7, #6]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	88fa      	ldrh	r2, [r7, #6]
 800b102:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	88ba      	ldrh	r2, [r7, #4]
 800b108:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b10a:	8b3b      	ldrh	r3, [r7, #24]
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	7f3a      	ldrb	r2, [r7, #28]
 800b116:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2201      	movs	r2, #1
 800b11c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	73da      	strb	r2, [r3, #15]
}
 800b124:	bf00      	nop
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08c      	sub	sp, #48	@ 0x30
 800b134:	af02      	add	r7, sp, #8
 800b136:	4603      	mov	r3, r0
 800b138:	71fb      	strb	r3, [r7, #7]
 800b13a:	460b      	mov	r3, r1
 800b13c:	80bb      	strh	r3, [r7, #4]
 800b13e:	4613      	mov	r3, r2
 800b140:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b146:	887b      	ldrh	r3, [r7, #2]
 800b148:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b14c:	d07f      	beq.n	800b24e <pbuf_alloc+0x11e>
 800b14e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b152:	f300 80c8 	bgt.w	800b2e6 <pbuf_alloc+0x1b6>
 800b156:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b15a:	d010      	beq.n	800b17e <pbuf_alloc+0x4e>
 800b15c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b160:	f300 80c1 	bgt.w	800b2e6 <pbuf_alloc+0x1b6>
 800b164:	2b01      	cmp	r3, #1
 800b166:	d002      	beq.n	800b16e <pbuf_alloc+0x3e>
 800b168:	2b41      	cmp	r3, #65	@ 0x41
 800b16a:	f040 80bc 	bne.w	800b2e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b16e:	887a      	ldrh	r2, [r7, #2]
 800b170:	88bb      	ldrh	r3, [r7, #4]
 800b172:	4619      	mov	r1, r3
 800b174:	2000      	movs	r0, #0
 800b176:	f000 f8d1 	bl	800b31c <pbuf_alloc_reference>
 800b17a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b17c:	e0bd      	b.n	800b2fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b17e:	2300      	movs	r3, #0
 800b180:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b182:	2300      	movs	r3, #0
 800b184:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b186:	88bb      	ldrh	r3, [r7, #4]
 800b188:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b18a:	200c      	movs	r0, #12
 800b18c:	f7ff fb9a 	bl	800a8c4 <memp_malloc>
 800b190:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d109      	bne.n	800b1ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b198:	f7ff ff76 	bl	800b088 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d002      	beq.n	800b1a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b1a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1a4:	f000 faa8 	bl	800b6f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e0a7      	b.n	800b2fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b1ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b1ae:	3303      	adds	r3, #3
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	8b7a      	ldrh	r2, [r7, #26]
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	bf28      	it	cs
 800b1c4:	4613      	movcs	r3, r2
 800b1c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b1c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b1ca:	3310      	adds	r3, #16
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	3303      	adds	r3, #3
 800b1d2:	f023 0303 	bic.w	r3, r3, #3
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	89f9      	ldrh	r1, [r7, #14]
 800b1da:	8b7a      	ldrh	r2, [r7, #26]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	887b      	ldrh	r3, [r7, #2]
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	6938      	ldr	r0, [r7, #16]
 800b1ea:	f7ff ff77 	bl	800b0dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d006      	beq.n	800b208 <pbuf_alloc+0xd8>
 800b1fa:	4b42      	ldr	r3, [pc, #264]	@ (800b304 <pbuf_alloc+0x1d4>)
 800b1fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b200:	4941      	ldr	r1, [pc, #260]	@ (800b308 <pbuf_alloc+0x1d8>)
 800b202:	4842      	ldr	r0, [pc, #264]	@ (800b30c <pbuf_alloc+0x1dc>)
 800b204:	f009 ffb6 	bl	8015174 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b208:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b20a:	3303      	adds	r3, #3
 800b20c:	f023 0303 	bic.w	r3, r3, #3
 800b210:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b214:	d106      	bne.n	800b224 <pbuf_alloc+0xf4>
 800b216:	4b3b      	ldr	r3, [pc, #236]	@ (800b304 <pbuf_alloc+0x1d4>)
 800b218:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b21c:	493c      	ldr	r1, [pc, #240]	@ (800b310 <pbuf_alloc+0x1e0>)
 800b21e:	483b      	ldr	r0, [pc, #236]	@ (800b30c <pbuf_alloc+0x1dc>)
 800b220:	f009 ffa8 	bl	8015174 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b22e:	e002      	b.n	800b236 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b23a:	8b7a      	ldrh	r2, [r7, #26]
 800b23c:	89fb      	ldrh	r3, [r7, #14]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b246:	8b7b      	ldrh	r3, [r7, #26]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d19e      	bne.n	800b18a <pbuf_alloc+0x5a>
      break;
 800b24c:	e055      	b.n	800b2fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b24e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b250:	3303      	adds	r3, #3
 800b252:	b29b      	uxth	r3, r3
 800b254:	f023 0303 	bic.w	r3, r3, #3
 800b258:	b29a      	uxth	r2, r3
 800b25a:	88bb      	ldrh	r3, [r7, #4]
 800b25c:	3303      	adds	r3, #3
 800b25e:	b29b      	uxth	r3, r3
 800b260:	f023 0303 	bic.w	r3, r3, #3
 800b264:	b29b      	uxth	r3, r3
 800b266:	4413      	add	r3, r2
 800b268:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b26a:	8b3b      	ldrh	r3, [r7, #24]
 800b26c:	3310      	adds	r3, #16
 800b26e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b270:	8b3a      	ldrh	r2, [r7, #24]
 800b272:	88bb      	ldrh	r3, [r7, #4]
 800b274:	3303      	adds	r3, #3
 800b276:	f023 0303 	bic.w	r3, r3, #3
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d306      	bcc.n	800b28c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b27e:	8afa      	ldrh	r2, [r7, #22]
 800b280:	88bb      	ldrh	r3, [r7, #4]
 800b282:	3303      	adds	r3, #3
 800b284:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b288:	429a      	cmp	r2, r3
 800b28a:	d201      	bcs.n	800b290 <pbuf_alloc+0x160>
        return NULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	e035      	b.n	800b2fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b290:	8afb      	ldrh	r3, [r7, #22]
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff f972 	bl	800a57c <mem_malloc>
 800b298:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <pbuf_alloc+0x174>
        return NULL;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	e02b      	b.n	800b2fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b2a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2a6:	3310      	adds	r3, #16
 800b2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2aa:	4413      	add	r3, r2
 800b2ac:	3303      	adds	r3, #3
 800b2ae:	f023 0303 	bic.w	r3, r3, #3
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	88b9      	ldrh	r1, [r7, #4]
 800b2b6:	88ba      	ldrh	r2, [r7, #4]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	887b      	ldrh	r3, [r7, #2]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b2c6:	f7ff ff09 	bl	800b0dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d010      	beq.n	800b2f8 <pbuf_alloc+0x1c8>
 800b2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b304 <pbuf_alloc+0x1d4>)
 800b2d8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b2dc:	490d      	ldr	r1, [pc, #52]	@ (800b314 <pbuf_alloc+0x1e4>)
 800b2de:	480b      	ldr	r0, [pc, #44]	@ (800b30c <pbuf_alloc+0x1dc>)
 800b2e0:	f009 ff48 	bl	8015174 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b2e4:	e008      	b.n	800b2f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b2e6:	4b07      	ldr	r3, [pc, #28]	@ (800b304 <pbuf_alloc+0x1d4>)
 800b2e8:	f240 1227 	movw	r2, #295	@ 0x127
 800b2ec:	490a      	ldr	r1, [pc, #40]	@ (800b318 <pbuf_alloc+0x1e8>)
 800b2ee:	4807      	ldr	r0, [pc, #28]	@ (800b30c <pbuf_alloc+0x1dc>)
 800b2f0:	f009 ff40 	bl	8015174 <iprintf>
      return NULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	e001      	b.n	800b2fc <pbuf_alloc+0x1cc>
      break;
 800b2f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3728      	adds	r7, #40	@ 0x28
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	08017258 	.word	0x08017258
 800b308:	08017288 	.word	0x08017288
 800b30c:	080172b8 	.word	0x080172b8
 800b310:	080172e0 	.word	0x080172e0
 800b314:	08017314 	.word	0x08017314
 800b318:	08017340 	.word	0x08017340

0800b31c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af02      	add	r7, sp, #8
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	460b      	mov	r3, r1
 800b326:	807b      	strh	r3, [r7, #2]
 800b328:	4613      	mov	r3, r2
 800b32a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b32c:	883b      	ldrh	r3, [r7, #0]
 800b32e:	2b41      	cmp	r3, #65	@ 0x41
 800b330:	d009      	beq.n	800b346 <pbuf_alloc_reference+0x2a>
 800b332:	883b      	ldrh	r3, [r7, #0]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d006      	beq.n	800b346 <pbuf_alloc_reference+0x2a>
 800b338:	4b0f      	ldr	r3, [pc, #60]	@ (800b378 <pbuf_alloc_reference+0x5c>)
 800b33a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b33e:	490f      	ldr	r1, [pc, #60]	@ (800b37c <pbuf_alloc_reference+0x60>)
 800b340:	480f      	ldr	r0, [pc, #60]	@ (800b380 <pbuf_alloc_reference+0x64>)
 800b342:	f009 ff17 	bl	8015174 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b346:	200b      	movs	r0, #11
 800b348:	f7ff fabc 	bl	800a8c4 <memp_malloc>
 800b34c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b354:	2300      	movs	r3, #0
 800b356:	e00b      	b.n	800b370 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b358:	8879      	ldrh	r1, [r7, #2]
 800b35a:	887a      	ldrh	r2, [r7, #2]
 800b35c:	2300      	movs	r3, #0
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	883b      	ldrh	r3, [r7, #0]
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	460b      	mov	r3, r1
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7ff feb7 	bl	800b0dc <pbuf_init_alloced_pbuf>
  return p;
 800b36e:	68fb      	ldr	r3, [r7, #12]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	08017258 	.word	0x08017258
 800b37c:	0801735c 	.word	0x0801735c
 800b380:	080172b8 	.word	0x080172b8

0800b384 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af02      	add	r7, sp, #8
 800b38a:	607b      	str	r3, [r7, #4]
 800b38c:	4603      	mov	r3, r0
 800b38e:	73fb      	strb	r3, [r7, #15]
 800b390:	460b      	mov	r3, r1
 800b392:	81bb      	strh	r3, [r7, #12]
 800b394:	4613      	mov	r3, r2
 800b396:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b39c:	8a7b      	ldrh	r3, [r7, #18]
 800b39e:	3303      	adds	r3, #3
 800b3a0:	f023 0203 	bic.w	r2, r3, #3
 800b3a4:	89bb      	ldrh	r3, [r7, #12]
 800b3a6:	441a      	add	r2, r3
 800b3a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d901      	bls.n	800b3b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	e018      	b.n	800b3e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d007      	beq.n	800b3c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b3b8:	8a7b      	ldrh	r3, [r7, #18]
 800b3ba:	3303      	adds	r3, #3
 800b3bc:	f023 0303 	bic.w	r3, r3, #3
 800b3c0:	6a3a      	ldr	r2, [r7, #32]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	e001      	b.n	800b3cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	89b9      	ldrh	r1, [r7, #12]
 800b3d0:	89ba      	ldrh	r2, [r7, #12]
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	897b      	ldrh	r3, [r7, #10]
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	6979      	ldr	r1, [r7, #20]
 800b3de:	f7ff fe7d 	bl	800b0dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b3e2:	687b      	ldr	r3, [r7, #4]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d106      	bne.n	800b40c <pbuf_realloc+0x20>
 800b3fe:	4b3a      	ldr	r3, [pc, #232]	@ (800b4e8 <pbuf_realloc+0xfc>)
 800b400:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b404:	4939      	ldr	r1, [pc, #228]	@ (800b4ec <pbuf_realloc+0x100>)
 800b406:	483a      	ldr	r0, [pc, #232]	@ (800b4f0 <pbuf_realloc+0x104>)
 800b408:	f009 feb4 	bl	8015174 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	891b      	ldrh	r3, [r3, #8]
 800b410:	887a      	ldrh	r2, [r7, #2]
 800b412:	429a      	cmp	r2, r3
 800b414:	d263      	bcs.n	800b4de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	891a      	ldrh	r2, [r3, #8]
 800b41a:	887b      	ldrh	r3, [r7, #2]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b420:	887b      	ldrh	r3, [r7, #2]
 800b422:	817b      	strh	r3, [r7, #10]
  q = p;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b428:	e018      	b.n	800b45c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	895b      	ldrh	r3, [r3, #10]
 800b42e:	897a      	ldrh	r2, [r7, #10]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	891a      	ldrh	r2, [r3, #8]
 800b438:	893b      	ldrh	r3, [r7, #8]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <pbuf_realloc+0x70>
 800b44e:	4b26      	ldr	r3, [pc, #152]	@ (800b4e8 <pbuf_realloc+0xfc>)
 800b450:	f240 12af 	movw	r2, #431	@ 0x1af
 800b454:	4927      	ldr	r1, [pc, #156]	@ (800b4f4 <pbuf_realloc+0x108>)
 800b456:	4826      	ldr	r0, [pc, #152]	@ (800b4f0 <pbuf_realloc+0x104>)
 800b458:	f009 fe8c 	bl	8015174 <iprintf>
  while (rem_len > q->len) {
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	895b      	ldrh	r3, [r3, #10]
 800b460:	897a      	ldrh	r2, [r7, #10]
 800b462:	429a      	cmp	r2, r3
 800b464:	d8e1      	bhi.n	800b42a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	7b1b      	ldrb	r3, [r3, #12]
 800b46a:	f003 030f 	and.w	r3, r3, #15
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d121      	bne.n	800b4b6 <pbuf_realloc+0xca>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	895b      	ldrh	r3, [r3, #10]
 800b476:	897a      	ldrh	r2, [r7, #10]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d01c      	beq.n	800b4b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	7b5b      	ldrb	r3, [r3, #13]
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d116      	bne.n	800b4b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	b29a      	uxth	r2, r3
 800b492:	897b      	ldrh	r3, [r7, #10]
 800b494:	4413      	add	r3, r2
 800b496:	b29b      	uxth	r3, r3
 800b498:	4619      	mov	r1, r3
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7fe ff64 	bl	800a368 <mem_trim>
 800b4a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d106      	bne.n	800b4b6 <pbuf_realloc+0xca>
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e8 <pbuf_realloc+0xfc>)
 800b4aa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b4ae:	4912      	ldr	r1, [pc, #72]	@ (800b4f8 <pbuf_realloc+0x10c>)
 800b4b0:	480f      	ldr	r0, [pc, #60]	@ (800b4f0 <pbuf_realloc+0x104>)
 800b4b2:	f009 fe5f 	bl	8015174 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	897a      	ldrh	r2, [r7, #10]
 800b4ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	895a      	ldrh	r2, [r3, #10]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d004      	beq.n	800b4d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f000 f911 	bl	800b6f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	e000      	b.n	800b4e0 <pbuf_realloc+0xf4>
    return;
 800b4de:	bf00      	nop

}
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	08017258 	.word	0x08017258
 800b4ec:	08017370 	.word	0x08017370
 800b4f0:	080172b8 	.word	0x080172b8
 800b4f4:	08017388 	.word	0x08017388
 800b4f8:	080173a0 	.word	0x080173a0

0800b4fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	4613      	mov	r3, r2
 800b508:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d106      	bne.n	800b51e <pbuf_add_header_impl+0x22>
 800b510:	4b2b      	ldr	r3, [pc, #172]	@ (800b5c0 <pbuf_add_header_impl+0xc4>)
 800b512:	f240 12df 	movw	r2, #479	@ 0x1df
 800b516:	492b      	ldr	r1, [pc, #172]	@ (800b5c4 <pbuf_add_header_impl+0xc8>)
 800b518:	482b      	ldr	r0, [pc, #172]	@ (800b5c8 <pbuf_add_header_impl+0xcc>)
 800b51a:	f009 fe2b 	bl	8015174 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d003      	beq.n	800b52c <pbuf_add_header_impl+0x30>
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b52a:	d301      	bcc.n	800b530 <pbuf_add_header_impl+0x34>
    return 1;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e043      	b.n	800b5b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <pbuf_add_header_impl+0x3e>
    return 0;
 800b536:	2300      	movs	r3, #0
 800b538:	e03e      	b.n	800b5b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	891a      	ldrh	r2, [r3, #8]
 800b542:	8a7b      	ldrh	r3, [r7, #18]
 800b544:	4413      	add	r3, r2
 800b546:	b29b      	uxth	r3, r3
 800b548:	8a7a      	ldrh	r2, [r7, #18]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d901      	bls.n	800b552 <pbuf_add_header_impl+0x56>
    return 1;
 800b54e:	2301      	movs	r3, #1
 800b550:	e032      	b.n	800b5b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	7b1b      	ldrb	r3, [r3, #12]
 800b556:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b558:	8a3b      	ldrh	r3, [r7, #16]
 800b55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00c      	beq.n	800b57c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	425b      	negs	r3, r3
 800b56a:	4413      	add	r3, r2
 800b56c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3310      	adds	r3, #16
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	429a      	cmp	r2, r3
 800b576:	d20d      	bcs.n	800b594 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b578:	2301      	movs	r3, #1
 800b57a:	e01d      	b.n	800b5b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b57c:	79fb      	ldrb	r3, [r7, #7]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d006      	beq.n	800b590 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	425b      	negs	r3, r3
 800b58a:	4413      	add	r3, r2
 800b58c:	617b      	str	r3, [r7, #20]
 800b58e:	e001      	b.n	800b594 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b590:	2301      	movs	r3, #1
 800b592:	e011      	b.n	800b5b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	895a      	ldrh	r2, [r3, #10]
 800b59e:	8a7b      	ldrh	r3, [r7, #18]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	891a      	ldrh	r2, [r3, #8]
 800b5ac:	8a7b      	ldrh	r3, [r7, #18]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3718      	adds	r7, #24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	08017258 	.word	0x08017258
 800b5c4:	080173bc 	.word	0x080173bc
 800b5c8:	080172b8 	.word	0x080172b8

0800b5cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff ff8e 	bl	800b4fc <pbuf_add_header_impl>
 800b5e0:	4603      	mov	r3, r0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d106      	bne.n	800b60a <pbuf_remove_header+0x1e>
 800b5fc:	4b20      	ldr	r3, [pc, #128]	@ (800b680 <pbuf_remove_header+0x94>)
 800b5fe:	f240 224b 	movw	r2, #587	@ 0x24b
 800b602:	4920      	ldr	r1, [pc, #128]	@ (800b684 <pbuf_remove_header+0x98>)
 800b604:	4820      	ldr	r0, [pc, #128]	@ (800b688 <pbuf_remove_header+0x9c>)
 800b606:	f009 fdb5 	bl	8015174 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d003      	beq.n	800b618 <pbuf_remove_header+0x2c>
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b616:	d301      	bcc.n	800b61c <pbuf_remove_header+0x30>
    return 1;
 800b618:	2301      	movs	r3, #1
 800b61a:	e02c      	b.n	800b676 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <pbuf_remove_header+0x3a>
    return 0;
 800b622:	2300      	movs	r3, #0
 800b624:	e027      	b.n	800b676 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	895b      	ldrh	r3, [r3, #10]
 800b62e:	89fa      	ldrh	r2, [r7, #14]
 800b630:	429a      	cmp	r2, r3
 800b632:	d908      	bls.n	800b646 <pbuf_remove_header+0x5a>
 800b634:	4b12      	ldr	r3, [pc, #72]	@ (800b680 <pbuf_remove_header+0x94>)
 800b636:	f240 2255 	movw	r2, #597	@ 0x255
 800b63a:	4914      	ldr	r1, [pc, #80]	@ (800b68c <pbuf_remove_header+0xa0>)
 800b63c:	4812      	ldr	r0, [pc, #72]	@ (800b688 <pbuf_remove_header+0x9c>)
 800b63e:	f009 fd99 	bl	8015174 <iprintf>
 800b642:	2301      	movs	r3, #1
 800b644:	e017      	b.n	800b676 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	441a      	add	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	895a      	ldrh	r2, [r3, #10]
 800b65c:	89fb      	ldrh	r3, [r7, #14]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	b29a      	uxth	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	891a      	ldrh	r2, [r3, #8]
 800b66a:	89fb      	ldrh	r3, [r7, #14]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	b29a      	uxth	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	08017258 	.word	0x08017258
 800b684:	080173bc 	.word	0x080173bc
 800b688:	080172b8 	.word	0x080172b8
 800b68c:	080173c8 	.word	0x080173c8

0800b690 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	807b      	strh	r3, [r7, #2]
 800b69c:	4613      	mov	r3, r2
 800b69e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b6a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	da08      	bge.n	800b6ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b6a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6ac:	425b      	negs	r3, r3
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff ff9b 	bl	800b5ec <pbuf_remove_header>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	e007      	b.n	800b6ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b6ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6be:	787a      	ldrb	r2, [r7, #1]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff ff1a 	bl	800b4fc <pbuf_add_header_impl>
 800b6c8:	4603      	mov	r3, r0
  }
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b6de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7ff ffd2 	bl	800b690 <pbuf_header_impl>
 800b6ec:	4603      	mov	r3, r0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d106      	bne.n	800b71a <pbuf_free+0x22>
 800b70c:	4b3b      	ldr	r3, [pc, #236]	@ (800b7fc <pbuf_free+0x104>)
 800b70e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b712:	493b      	ldr	r1, [pc, #236]	@ (800b800 <pbuf_free+0x108>)
 800b714:	483b      	ldr	r0, [pc, #236]	@ (800b804 <pbuf_free+0x10c>)
 800b716:	f009 fd2d 	bl	8015174 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	e069      	b.n	800b7f2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b722:	e062      	b.n	800b7ea <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b724:	f009 fc08 	bl	8014f38 <sys_arch_protect>
 800b728:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	7b9b      	ldrb	r3, [r3, #14]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <pbuf_free+0x48>
 800b732:	4b32      	ldr	r3, [pc, #200]	@ (800b7fc <pbuf_free+0x104>)
 800b734:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b738:	4933      	ldr	r1, [pc, #204]	@ (800b808 <pbuf_free+0x110>)
 800b73a:	4832      	ldr	r0, [pc, #200]	@ (800b804 <pbuf_free+0x10c>)
 800b73c:	f009 fd1a 	bl	8015174 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	7b9b      	ldrb	r3, [r3, #14]
 800b744:	3b01      	subs	r3, #1
 800b746:	b2da      	uxtb	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	739a      	strb	r2, [r3, #14]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	7b9b      	ldrb	r3, [r3, #14]
 800b750:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b752:	69b8      	ldr	r0, [r7, #24]
 800b754:	f009 fbfe 	bl	8014f54 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b758:	7dfb      	ldrb	r3, [r7, #23]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d143      	bne.n	800b7e6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	7b1b      	ldrb	r3, [r3, #12]
 800b768:	f003 030f 	and.w	r3, r3, #15
 800b76c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	7b5b      	ldrb	r3, [r3, #13]
 800b772:	f003 0302 	and.w	r3, r3, #2
 800b776:	2b00      	cmp	r3, #0
 800b778:	d011      	beq.n	800b79e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <pbuf_free+0x9c>
 800b786:	4b1d      	ldr	r3, [pc, #116]	@ (800b7fc <pbuf_free+0x104>)
 800b788:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b78c:	491f      	ldr	r1, [pc, #124]	@ (800b80c <pbuf_free+0x114>)
 800b78e:	481d      	ldr	r0, [pc, #116]	@ (800b804 <pbuf_free+0x10c>)
 800b790:	f009 fcf0 	bl	8015174 <iprintf>
        pc->custom_free_function(p);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	4798      	blx	r3
 800b79c:	e01d      	b.n	800b7da <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d104      	bne.n	800b7ae <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	200c      	movs	r0, #12
 800b7a8:	f7ff f902 	bl	800a9b0 <memp_free>
 800b7ac:	e015      	b.n	800b7da <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d104      	bne.n	800b7be <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b7b4:	6879      	ldr	r1, [r7, #4]
 800b7b6:	200b      	movs	r0, #11
 800b7b8:	f7ff f8fa 	bl	800a9b0 <memp_free>
 800b7bc:	e00d      	b.n	800b7da <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d103      	bne.n	800b7cc <pbuf_free+0xd4>
          mem_free(p);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7fe fd3f 	bl	800a248 <mem_free>
 800b7ca:	e006      	b.n	800b7da <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b7cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b7fc <pbuf_free+0x104>)
 800b7ce:	f240 320f 	movw	r2, #783	@ 0x30f
 800b7d2:	490f      	ldr	r1, [pc, #60]	@ (800b810 <pbuf_free+0x118>)
 800b7d4:	480b      	ldr	r0, [pc, #44]	@ (800b804 <pbuf_free+0x10c>)
 800b7d6:	f009 fccd 	bl	8015174 <iprintf>
        }
      }
      count++;
 800b7da:	7ffb      	ldrb	r3, [r7, #31]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	607b      	str	r3, [r7, #4]
 800b7e4:	e001      	b.n	800b7ea <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d199      	bne.n	800b724 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b7f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	08017258 	.word	0x08017258
 800b800:	080173bc 	.word	0x080173bc
 800b804:	080172b8 	.word	0x080172b8
 800b808:	080173e8 	.word	0x080173e8
 800b80c:	08017400 	.word	0x08017400
 800b810:	08017424 	.word	0x08017424

0800b814 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b820:	e005      	b.n	800b82e <pbuf_clen+0x1a>
    ++len;
 800b822:	89fb      	ldrh	r3, [r7, #14]
 800b824:	3301      	adds	r3, #1
 800b826:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1f6      	bne.n	800b822 <pbuf_clen+0xe>
  }
  return len;
 800b834:	89fb      	ldrh	r3, [r7, #14]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
	...

0800b844 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d016      	beq.n	800b880 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b852:	f009 fb71 	bl	8014f38 <sys_arch_protect>
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	7b9b      	ldrb	r3, [r3, #14]
 800b85c:	3301      	adds	r3, #1
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	739a      	strb	r2, [r3, #14]
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f009 fb75 	bl	8014f54 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	7b9b      	ldrb	r3, [r3, #14]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d106      	bne.n	800b880 <pbuf_ref+0x3c>
 800b872:	4b05      	ldr	r3, [pc, #20]	@ (800b888 <pbuf_ref+0x44>)
 800b874:	f240 3242 	movw	r2, #834	@ 0x342
 800b878:	4904      	ldr	r1, [pc, #16]	@ (800b88c <pbuf_ref+0x48>)
 800b87a:	4805      	ldr	r0, [pc, #20]	@ (800b890 <pbuf_ref+0x4c>)
 800b87c:	f009 fc7a 	bl	8015174 <iprintf>
  }
}
 800b880:	bf00      	nop
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	08017258 	.word	0x08017258
 800b88c:	08017438 	.word	0x08017438
 800b890:	080172b8 	.word	0x080172b8

0800b894 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <pbuf_cat+0x16>
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d107      	bne.n	800b8ba <pbuf_cat+0x26>
 800b8aa:	4b20      	ldr	r3, [pc, #128]	@ (800b92c <pbuf_cat+0x98>)
 800b8ac:	f240 3259 	movw	r2, #857	@ 0x359
 800b8b0:	491f      	ldr	r1, [pc, #124]	@ (800b930 <pbuf_cat+0x9c>)
 800b8b2:	4820      	ldr	r0, [pc, #128]	@ (800b934 <pbuf_cat+0xa0>)
 800b8b4:	f009 fc5e 	bl	8015174 <iprintf>
 800b8b8:	e034      	b.n	800b924 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	60fb      	str	r3, [r7, #12]
 800b8be:	e00a      	b.n	800b8d6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	891a      	ldrh	r2, [r3, #8]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	891b      	ldrh	r3, [r3, #8]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1f0      	bne.n	800b8c0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	891a      	ldrh	r2, [r3, #8]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	895b      	ldrh	r3, [r3, #10]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d006      	beq.n	800b8f8 <pbuf_cat+0x64>
 800b8ea:	4b10      	ldr	r3, [pc, #64]	@ (800b92c <pbuf_cat+0x98>)
 800b8ec:	f240 3262 	movw	r2, #866	@ 0x362
 800b8f0:	4911      	ldr	r1, [pc, #68]	@ (800b938 <pbuf_cat+0xa4>)
 800b8f2:	4810      	ldr	r0, [pc, #64]	@ (800b934 <pbuf_cat+0xa0>)
 800b8f4:	f009 fc3e 	bl	8015174 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d006      	beq.n	800b90e <pbuf_cat+0x7a>
 800b900:	4b0a      	ldr	r3, [pc, #40]	@ (800b92c <pbuf_cat+0x98>)
 800b902:	f240 3263 	movw	r2, #867	@ 0x363
 800b906:	490d      	ldr	r1, [pc, #52]	@ (800b93c <pbuf_cat+0xa8>)
 800b908:	480a      	ldr	r0, [pc, #40]	@ (800b934 <pbuf_cat+0xa0>)
 800b90a:	f009 fc33 	bl	8015174 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	891a      	ldrh	r2, [r3, #8]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	891b      	ldrh	r3, [r3, #8]
 800b916:	4413      	add	r3, r2
 800b918:	b29a      	uxth	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	683a      	ldr	r2, [r7, #0]
 800b922:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	08017258 	.word	0x08017258
 800b930:	0801744c 	.word	0x0801744c
 800b934:	080172b8 	.word	0x080172b8
 800b938:	08017484 	.word	0x08017484
 800b93c:	080174b4 	.word	0x080174b4

0800b940 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b94a:	2300      	movs	r3, #0
 800b94c:	617b      	str	r3, [r7, #20]
 800b94e:	2300      	movs	r3, #0
 800b950:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d008      	beq.n	800b96a <pbuf_copy+0x2a>
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d005      	beq.n	800b96a <pbuf_copy+0x2a>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	891a      	ldrh	r2, [r3, #8]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	891b      	ldrh	r3, [r3, #8]
 800b966:	429a      	cmp	r2, r3
 800b968:	d209      	bcs.n	800b97e <pbuf_copy+0x3e>
 800b96a:	4b57      	ldr	r3, [pc, #348]	@ (800bac8 <pbuf_copy+0x188>)
 800b96c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800b970:	4956      	ldr	r1, [pc, #344]	@ (800bacc <pbuf_copy+0x18c>)
 800b972:	4857      	ldr	r0, [pc, #348]	@ (800bad0 <pbuf_copy+0x190>)
 800b974:	f009 fbfe 	bl	8015174 <iprintf>
 800b978:	f06f 030f 	mvn.w	r3, #15
 800b97c:	e09f      	b.n	800babe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	895b      	ldrh	r3, [r3, #10]
 800b982:	461a      	mov	r2, r3
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	1ad2      	subs	r2, r2, r3
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	895b      	ldrh	r3, [r3, #10]
 800b98c:	4619      	mov	r1, r3
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	1acb      	subs	r3, r1, r3
 800b992:	429a      	cmp	r2, r3
 800b994:	d306      	bcc.n	800b9a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	895b      	ldrh	r3, [r3, #10]
 800b99a:	461a      	mov	r2, r3
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	e005      	b.n	800b9b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	895b      	ldrh	r3, [r3, #10]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	18d0      	adds	r0, r2, r3
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	4413      	add	r3, r2
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	f009 fd19 	bl	80153fa <memcpy>
    offset_to += len;
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	895b      	ldrh	r3, [r3, #10]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d906      	bls.n	800b9f2 <pbuf_copy+0xb2>
 800b9e4:	4b38      	ldr	r3, [pc, #224]	@ (800bac8 <pbuf_copy+0x188>)
 800b9e6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b9ea:	493a      	ldr	r1, [pc, #232]	@ (800bad4 <pbuf_copy+0x194>)
 800b9ec:	4838      	ldr	r0, [pc, #224]	@ (800bad0 <pbuf_copy+0x190>)
 800b9ee:	f009 fbc1 	bl	8015174 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	895b      	ldrh	r3, [r3, #10]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d906      	bls.n	800ba0c <pbuf_copy+0xcc>
 800b9fe:	4b32      	ldr	r3, [pc, #200]	@ (800bac8 <pbuf_copy+0x188>)
 800ba00:	f240 32da 	movw	r2, #986	@ 0x3da
 800ba04:	4934      	ldr	r1, [pc, #208]	@ (800bad8 <pbuf_copy+0x198>)
 800ba06:	4832      	ldr	r0, [pc, #200]	@ (800bad0 <pbuf_copy+0x190>)
 800ba08:	f009 fbb4 	bl	8015174 <iprintf>
    if (offset_from >= p_from->len) {
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	895b      	ldrh	r3, [r3, #10]
 800ba10:	461a      	mov	r2, r3
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d304      	bcc.n	800ba22 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	895b      	ldrh	r3, [r3, #10]
 800ba26:	461a      	mov	r2, r3
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d114      	bne.n	800ba58 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10c      	bne.n	800ba58 <pbuf_copy+0x118>
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d009      	beq.n	800ba58 <pbuf_copy+0x118>
 800ba44:	4b20      	ldr	r3, [pc, #128]	@ (800bac8 <pbuf_copy+0x188>)
 800ba46:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800ba4a:	4924      	ldr	r1, [pc, #144]	@ (800badc <pbuf_copy+0x19c>)
 800ba4c:	4820      	ldr	r0, [pc, #128]	@ (800bad0 <pbuf_copy+0x190>)
 800ba4e:	f009 fb91 	bl	8015174 <iprintf>
 800ba52:	f06f 030f 	mvn.w	r3, #15
 800ba56:	e032      	b.n	800babe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d013      	beq.n	800ba86 <pbuf_copy+0x146>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	895a      	ldrh	r2, [r3, #10]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	891b      	ldrh	r3, [r3, #8]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d10d      	bne.n	800ba86 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d009      	beq.n	800ba86 <pbuf_copy+0x146>
 800ba72:	4b15      	ldr	r3, [pc, #84]	@ (800bac8 <pbuf_copy+0x188>)
 800ba74:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800ba78:	4919      	ldr	r1, [pc, #100]	@ (800bae0 <pbuf_copy+0x1a0>)
 800ba7a:	4815      	ldr	r0, [pc, #84]	@ (800bad0 <pbuf_copy+0x190>)
 800ba7c:	f009 fb7a 	bl	8015174 <iprintf>
 800ba80:	f06f 0305 	mvn.w	r3, #5
 800ba84:	e01b      	b.n	800babe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d013      	beq.n	800bab4 <pbuf_copy+0x174>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	895a      	ldrh	r2, [r3, #10]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	891b      	ldrh	r3, [r3, #8]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d10d      	bne.n	800bab4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d009      	beq.n	800bab4 <pbuf_copy+0x174>
 800baa0:	4b09      	ldr	r3, [pc, #36]	@ (800bac8 <pbuf_copy+0x188>)
 800baa2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800baa6:	490e      	ldr	r1, [pc, #56]	@ (800bae0 <pbuf_copy+0x1a0>)
 800baa8:	4809      	ldr	r0, [pc, #36]	@ (800bad0 <pbuf_copy+0x190>)
 800baaa:	f009 fb63 	bl	8015174 <iprintf>
 800baae:	f06f 0305 	mvn.w	r3, #5
 800bab2:	e004      	b.n	800babe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f47f af61 	bne.w	800b97e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	08017258 	.word	0x08017258
 800bacc:	08017500 	.word	0x08017500
 800bad0:	080172b8 	.word	0x080172b8
 800bad4:	08017530 	.word	0x08017530
 800bad8:	08017548 	.word	0x08017548
 800badc:	08017564 	.word	0x08017564
 800bae0:	08017574 	.word	0x08017574

0800bae4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b088      	sub	sp, #32
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	4611      	mov	r1, r2
 800baf0:	461a      	mov	r2, r3
 800baf2:	460b      	mov	r3, r1
 800baf4:	80fb      	strh	r3, [r7, #6]
 800baf6:	4613      	mov	r3, r2
 800baf8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d108      	bne.n	800bb1a <pbuf_copy_partial+0x36>
 800bb08:	4b2b      	ldr	r3, [pc, #172]	@ (800bbb8 <pbuf_copy_partial+0xd4>)
 800bb0a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bb0e:	492b      	ldr	r1, [pc, #172]	@ (800bbbc <pbuf_copy_partial+0xd8>)
 800bb10:	482b      	ldr	r0, [pc, #172]	@ (800bbc0 <pbuf_copy_partial+0xdc>)
 800bb12:	f009 fb2f 	bl	8015174 <iprintf>
 800bb16:	2300      	movs	r3, #0
 800bb18:	e04a      	b.n	800bbb0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d108      	bne.n	800bb32 <pbuf_copy_partial+0x4e>
 800bb20:	4b25      	ldr	r3, [pc, #148]	@ (800bbb8 <pbuf_copy_partial+0xd4>)
 800bb22:	f240 420b 	movw	r2, #1035	@ 0x40b
 800bb26:	4927      	ldr	r1, [pc, #156]	@ (800bbc4 <pbuf_copy_partial+0xe0>)
 800bb28:	4825      	ldr	r0, [pc, #148]	@ (800bbc0 <pbuf_copy_partial+0xdc>)
 800bb2a:	f009 fb23 	bl	8015174 <iprintf>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e03e      	b.n	800bbb0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	61fb      	str	r3, [r7, #28]
 800bb36:	e034      	b.n	800bba2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bb38:	88bb      	ldrh	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <pbuf_copy_partial+0x70>
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	895b      	ldrh	r3, [r3, #10]
 800bb42:	88ba      	ldrh	r2, [r7, #4]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d305      	bcc.n	800bb54 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	895b      	ldrh	r3, [r3, #10]
 800bb4c:	88ba      	ldrh	r2, [r7, #4]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	80bb      	strh	r3, [r7, #4]
 800bb52:	e023      	b.n	800bb9c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	895a      	ldrh	r2, [r3, #10]
 800bb58:	88bb      	ldrh	r3, [r7, #4]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bb5e:	8b3a      	ldrh	r2, [r7, #24]
 800bb60:	88fb      	ldrh	r3, [r7, #6]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d901      	bls.n	800bb6a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bb66:	88fb      	ldrh	r3, [r7, #6]
 800bb68:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bb6a:	8b7b      	ldrh	r3, [r7, #26]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	18d0      	adds	r0, r2, r3
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	88bb      	ldrh	r3, [r7, #4]
 800bb76:	4413      	add	r3, r2
 800bb78:	8b3a      	ldrh	r2, [r7, #24]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	f009 fc3d 	bl	80153fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bb80:	8afa      	ldrh	r2, [r7, #22]
 800bb82:	8b3b      	ldrh	r3, [r7, #24]
 800bb84:	4413      	add	r3, r2
 800bb86:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bb88:	8b7a      	ldrh	r2, [r7, #26]
 800bb8a:	8b3b      	ldrh	r3, [r7, #24]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bb90:	88fa      	ldrh	r2, [r7, #6]
 800bb92:	8b3b      	ldrh	r3, [r7, #24]
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	61fb      	str	r3, [r7, #28]
 800bba2:	88fb      	ldrh	r3, [r7, #6]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <pbuf_copy_partial+0xca>
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1c4      	bne.n	800bb38 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bbae:	8afb      	ldrh	r3, [r7, #22]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3720      	adds	r7, #32
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	08017258 	.word	0x08017258
 800bbbc:	080175a0 	.word	0x080175a0
 800bbc0:	080172b8 	.word	0x080172b8
 800bbc4:	080175c0 	.word	0x080175c0

0800bbc8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	603a      	str	r2, [r7, #0]
 800bbd2:	71fb      	strb	r3, [r7, #7]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	8919      	ldrh	r1, [r3, #8]
 800bbdc:	88ba      	ldrh	r2, [r7, #4]
 800bbde:	79fb      	ldrb	r3, [r7, #7]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7ff faa5 	bl	800b130 <pbuf_alloc>
 800bbe6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <pbuf_clone+0x2a>
    return NULL;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	e011      	b.n	800bc16 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff fea3 	bl	800b940 <pbuf_copy>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bbfe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d006      	beq.n	800bc14 <pbuf_clone+0x4c>
 800bc06:	4b06      	ldr	r3, [pc, #24]	@ (800bc20 <pbuf_clone+0x58>)
 800bc08:	f240 5224 	movw	r2, #1316	@ 0x524
 800bc0c:	4905      	ldr	r1, [pc, #20]	@ (800bc24 <pbuf_clone+0x5c>)
 800bc0e:	4806      	ldr	r0, [pc, #24]	@ (800bc28 <pbuf_clone+0x60>)
 800bc10:	f009 fab0 	bl	8015174 <iprintf>
  return q;
 800bc14:	68fb      	ldr	r3, [r7, #12]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	08017258 	.word	0x08017258
 800bc24:	080176cc 	.word	0x080176cc
 800bc28:	080172b8 	.word	0x080172b8

0800bc2c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bc30:	f009 f9a0 	bl	8014f74 <rand>
 800bc34:	4603      	mov	r3, r0
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	4b01      	ldr	r3, [pc, #4]	@ (800bc4c <tcp_init+0x20>)
 800bc46:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bc48:	bf00      	nop
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	20000024 	.word	0x20000024

0800bc50 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	7d1b      	ldrb	r3, [r3, #20]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d105      	bne.n	800bc6c <tcp_free+0x1c>
 800bc60:	4b06      	ldr	r3, [pc, #24]	@ (800bc7c <tcp_free+0x2c>)
 800bc62:	22d4      	movs	r2, #212	@ 0xd4
 800bc64:	4906      	ldr	r1, [pc, #24]	@ (800bc80 <tcp_free+0x30>)
 800bc66:	4807      	ldr	r0, [pc, #28]	@ (800bc84 <tcp_free+0x34>)
 800bc68:	f009 fa84 	bl	8015174 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	2001      	movs	r0, #1
 800bc70:	f7fe fe9e 	bl	800a9b0 <memp_free>
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	08017758 	.word	0x08017758
 800bc80:	08017788 	.word	0x08017788
 800bc84:	0801779c 	.word	0x0801779c

0800bc88 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	7d1b      	ldrb	r3, [r3, #20]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d105      	bne.n	800bca4 <tcp_free_listen+0x1c>
 800bc98:	4b06      	ldr	r3, [pc, #24]	@ (800bcb4 <tcp_free_listen+0x2c>)
 800bc9a:	22df      	movs	r2, #223	@ 0xdf
 800bc9c:	4906      	ldr	r1, [pc, #24]	@ (800bcb8 <tcp_free_listen+0x30>)
 800bc9e:	4807      	ldr	r0, [pc, #28]	@ (800bcbc <tcp_free_listen+0x34>)
 800bca0:	f009 fa68 	bl	8015174 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bca4:	6879      	ldr	r1, [r7, #4]
 800bca6:	2002      	movs	r0, #2
 800bca8:	f7fe fe82 	bl	800a9b0 <memp_free>
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	08017758 	.word	0x08017758
 800bcb8:	080177c4 	.word	0x080177c4
 800bcbc:	0801779c 	.word	0x0801779c

0800bcc0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bcc4:	f001 f8a8 	bl	800ce18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bcc8:	4b07      	ldr	r3, [pc, #28]	@ (800bce8 <tcp_tmr+0x28>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	3301      	adds	r3, #1
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	4b05      	ldr	r3, [pc, #20]	@ (800bce8 <tcp_tmr+0x28>)
 800bcd2:	701a      	strb	r2, [r3, #0]
 800bcd4:	4b04      	ldr	r3, [pc, #16]	@ (800bce8 <tcp_tmr+0x28>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bce0:	f000 fd58 	bl	800c794 <tcp_slowtmr>
  }
}
 800bce4:	bf00      	nop
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	2000be79 	.word	0x2000be79

0800bcec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d105      	bne.n	800bd08 <tcp_remove_listener+0x1c>
 800bcfc:	4b0d      	ldr	r3, [pc, #52]	@ (800bd34 <tcp_remove_listener+0x48>)
 800bcfe:	22ff      	movs	r2, #255	@ 0xff
 800bd00:	490d      	ldr	r1, [pc, #52]	@ (800bd38 <tcp_remove_listener+0x4c>)
 800bd02:	480e      	ldr	r0, [pc, #56]	@ (800bd3c <tcp_remove_listener+0x50>)
 800bd04:	f009 fa36 	bl	8015174 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	60fb      	str	r3, [r7, #12]
 800bd0c:	e00a      	b.n	800bd24 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d102      	bne.n	800bd1e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1f1      	bne.n	800bd0e <tcp_remove_listener+0x22>
    }
  }
}
 800bd2a:	bf00      	nop
 800bd2c:	bf00      	nop
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	08017758 	.word	0x08017758
 800bd38:	080177e0 	.word	0x080177e0
 800bd3c:	0801779c 	.word	0x0801779c

0800bd40 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d106      	bne.n	800bd5c <tcp_listen_closed+0x1c>
 800bd4e:	4b14      	ldr	r3, [pc, #80]	@ (800bda0 <tcp_listen_closed+0x60>)
 800bd50:	f240 1211 	movw	r2, #273	@ 0x111
 800bd54:	4913      	ldr	r1, [pc, #76]	@ (800bda4 <tcp_listen_closed+0x64>)
 800bd56:	4814      	ldr	r0, [pc, #80]	@ (800bda8 <tcp_listen_closed+0x68>)
 800bd58:	f009 fa0c 	bl	8015174 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	7d1b      	ldrb	r3, [r3, #20]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d006      	beq.n	800bd72 <tcp_listen_closed+0x32>
 800bd64:	4b0e      	ldr	r3, [pc, #56]	@ (800bda0 <tcp_listen_closed+0x60>)
 800bd66:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800bd6a:	4910      	ldr	r1, [pc, #64]	@ (800bdac <tcp_listen_closed+0x6c>)
 800bd6c:	480e      	ldr	r0, [pc, #56]	@ (800bda8 <tcp_listen_closed+0x68>)
 800bd6e:	f009 fa01 	bl	8015174 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bd72:	2301      	movs	r3, #1
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	e00b      	b.n	800bd90 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bd78:	4a0d      	ldr	r2, [pc, #52]	@ (800bdb0 <tcp_listen_closed+0x70>)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6879      	ldr	r1, [r7, #4]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff ffb1 	bl	800bcec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	60fb      	str	r3, [r7, #12]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2b03      	cmp	r3, #3
 800bd94:	d9f0      	bls.n	800bd78 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bd96:	bf00      	nop
 800bd98:	bf00      	nop
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	08017758 	.word	0x08017758
 800bda4:	08017808 	.word	0x08017808
 800bda8:	0801779c 	.word	0x0801779c
 800bdac:	08017814 	.word	0x08017814
 800bdb0:	0801a550 	.word	0x0801a550

0800bdb4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bdb4:	b5b0      	push	{r4, r5, r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af04      	add	r7, sp, #16
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d106      	bne.n	800bdd4 <tcp_close_shutdown+0x20>
 800bdc6:	4b63      	ldr	r3, [pc, #396]	@ (800bf54 <tcp_close_shutdown+0x1a0>)
 800bdc8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800bdcc:	4962      	ldr	r1, [pc, #392]	@ (800bf58 <tcp_close_shutdown+0x1a4>)
 800bdce:	4863      	ldr	r0, [pc, #396]	@ (800bf5c <tcp_close_shutdown+0x1a8>)
 800bdd0:	f009 f9d0 	bl	8015174 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bdd4:	78fb      	ldrb	r3, [r7, #3]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d066      	beq.n	800bea8 <tcp_close_shutdown+0xf4>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7d1b      	ldrb	r3, [r3, #20]
 800bdde:	2b04      	cmp	r3, #4
 800bde0:	d003      	beq.n	800bdea <tcp_close_shutdown+0x36>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	7d1b      	ldrb	r3, [r3, #20]
 800bde6:	2b07      	cmp	r3, #7
 800bde8:	d15e      	bne.n	800bea8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d104      	bne.n	800bdfc <tcp_close_shutdown+0x48>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdf6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bdfa:	d055      	beq.n	800bea8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	8b5b      	ldrh	r3, [r3, #26]
 800be00:	f003 0310 	and.w	r3, r3, #16
 800be04:	2b00      	cmp	r3, #0
 800be06:	d106      	bne.n	800be16 <tcp_close_shutdown+0x62>
 800be08:	4b52      	ldr	r3, [pc, #328]	@ (800bf54 <tcp_close_shutdown+0x1a0>)
 800be0a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800be0e:	4954      	ldr	r1, [pc, #336]	@ (800bf60 <tcp_close_shutdown+0x1ac>)
 800be10:	4852      	ldr	r0, [pc, #328]	@ (800bf5c <tcp_close_shutdown+0x1a8>)
 800be12:	f009 f9af 	bl	8015174 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800be1e:	687d      	ldr	r5, [r7, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3304      	adds	r3, #4
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	8ad2      	ldrh	r2, [r2, #22]
 800be28:	6879      	ldr	r1, [r7, #4]
 800be2a:	8b09      	ldrh	r1, [r1, #24]
 800be2c:	9102      	str	r1, [sp, #8]
 800be2e:	9201      	str	r2, [sp, #4]
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	462b      	mov	r3, r5
 800be34:	4622      	mov	r2, r4
 800be36:	4601      	mov	r1, r0
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f005 fdb7 	bl	80119ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f001 fb9a 	bl	800d578 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800be44:	4b47      	ldr	r3, [pc, #284]	@ (800bf64 <tcp_close_shutdown+0x1b0>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d105      	bne.n	800be5a <tcp_close_shutdown+0xa6>
 800be4e:	4b45      	ldr	r3, [pc, #276]	@ (800bf64 <tcp_close_shutdown+0x1b0>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	4a43      	ldr	r2, [pc, #268]	@ (800bf64 <tcp_close_shutdown+0x1b0>)
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	e013      	b.n	800be82 <tcp_close_shutdown+0xce>
 800be5a:	4b42      	ldr	r3, [pc, #264]	@ (800bf64 <tcp_close_shutdown+0x1b0>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	e00c      	b.n	800be7c <tcp_close_shutdown+0xc8>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d104      	bne.n	800be76 <tcp_close_shutdown+0xc2>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68da      	ldr	r2, [r3, #12]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	60da      	str	r2, [r3, #12]
 800be74:	e005      	b.n	800be82 <tcp_close_shutdown+0xce>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1ef      	bne.n	800be62 <tcp_close_shutdown+0xae>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	60da      	str	r2, [r3, #12]
 800be88:	4b37      	ldr	r3, [pc, #220]	@ (800bf68 <tcp_close_shutdown+0x1b4>)
 800be8a:	2201      	movs	r2, #1
 800be8c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800be8e:	4b37      	ldr	r3, [pc, #220]	@ (800bf6c <tcp_close_shutdown+0x1b8>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d102      	bne.n	800be9e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800be98:	f004 f82e 	bl	800fef8 <tcp_trigger_input_pcb_close>
 800be9c:	e002      	b.n	800bea4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7ff fed6 	bl	800bc50 <tcp_free>
      }
      return ERR_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	e050      	b.n	800bf4a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7d1b      	ldrb	r3, [r3, #20]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d03b      	beq.n	800bf28 <tcp_close_shutdown+0x174>
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	dc44      	bgt.n	800bf3e <tcp_close_shutdown+0x18a>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <tcp_close_shutdown+0x10a>
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d02a      	beq.n	800bf12 <tcp_close_shutdown+0x15e>
 800bebc:	e03f      	b.n	800bf3e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	8adb      	ldrh	r3, [r3, #22]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d021      	beq.n	800bf0a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bec6:	4b2a      	ldr	r3, [pc, #168]	@ (800bf70 <tcp_close_shutdown+0x1bc>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	429a      	cmp	r2, r3
 800bece:	d105      	bne.n	800bedc <tcp_close_shutdown+0x128>
 800bed0:	4b27      	ldr	r3, [pc, #156]	@ (800bf70 <tcp_close_shutdown+0x1bc>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	4a26      	ldr	r2, [pc, #152]	@ (800bf70 <tcp_close_shutdown+0x1bc>)
 800bed8:	6013      	str	r3, [r2, #0]
 800beda:	e013      	b.n	800bf04 <tcp_close_shutdown+0x150>
 800bedc:	4b24      	ldr	r3, [pc, #144]	@ (800bf70 <tcp_close_shutdown+0x1bc>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	60bb      	str	r3, [r7, #8]
 800bee2:	e00c      	b.n	800befe <tcp_close_shutdown+0x14a>
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	429a      	cmp	r2, r3
 800beec:	d104      	bne.n	800bef8 <tcp_close_shutdown+0x144>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68da      	ldr	r2, [r3, #12]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	60da      	str	r2, [r3, #12]
 800bef6:	e005      	b.n	800bf04 <tcp_close_shutdown+0x150>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	60bb      	str	r3, [r7, #8]
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1ef      	bne.n	800bee4 <tcp_close_shutdown+0x130>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff fea0 	bl	800bc50 <tcp_free>
      break;
 800bf10:	e01a      	b.n	800bf48 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff ff14 	bl	800bd40 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bf18:	6879      	ldr	r1, [r7, #4]
 800bf1a:	4816      	ldr	r0, [pc, #88]	@ (800bf74 <tcp_close_shutdown+0x1c0>)
 800bf1c:	f001 fb7c 	bl	800d618 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f7ff feb1 	bl	800bc88 <tcp_free_listen>
      break;
 800bf26:	e00f      	b.n	800bf48 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bf28:	6879      	ldr	r1, [r7, #4]
 800bf2a:	480e      	ldr	r0, [pc, #56]	@ (800bf64 <tcp_close_shutdown+0x1b0>)
 800bf2c:	f001 fb74 	bl	800d618 <tcp_pcb_remove>
 800bf30:	4b0d      	ldr	r3, [pc, #52]	@ (800bf68 <tcp_close_shutdown+0x1b4>)
 800bf32:	2201      	movs	r2, #1
 800bf34:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff fe8a 	bl	800bc50 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bf3c:	e004      	b.n	800bf48 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f81a 	bl	800bf78 <tcp_close_shutdown_fin>
 800bf44:	4603      	mov	r3, r0
 800bf46:	e000      	b.n	800bf4a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bdb0      	pop	{r4, r5, r7, pc}
 800bf52:	bf00      	nop
 800bf54:	08017758 	.word	0x08017758
 800bf58:	0801782c 	.word	0x0801782c
 800bf5c:	0801779c 	.word	0x0801779c
 800bf60:	0801784c 	.word	0x0801784c
 800bf64:	2000be70 	.word	0x2000be70
 800bf68:	2000be78 	.word	0x2000be78
 800bf6c:	2000beb0 	.word	0x2000beb0
 800bf70:	2000be68 	.word	0x2000be68
 800bf74:	2000be6c 	.word	0x2000be6c

0800bf78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d106      	bne.n	800bf94 <tcp_close_shutdown_fin+0x1c>
 800bf86:	4b2e      	ldr	r3, [pc, #184]	@ (800c040 <tcp_close_shutdown_fin+0xc8>)
 800bf88:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800bf8c:	492d      	ldr	r1, [pc, #180]	@ (800c044 <tcp_close_shutdown_fin+0xcc>)
 800bf8e:	482e      	ldr	r0, [pc, #184]	@ (800c048 <tcp_close_shutdown_fin+0xd0>)
 800bf90:	f009 f8f0 	bl	8015174 <iprintf>

  switch (pcb->state) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	7d1b      	ldrb	r3, [r3, #20]
 800bf98:	2b07      	cmp	r3, #7
 800bf9a:	d020      	beq.n	800bfde <tcp_close_shutdown_fin+0x66>
 800bf9c:	2b07      	cmp	r3, #7
 800bf9e:	dc2b      	bgt.n	800bff8 <tcp_close_shutdown_fin+0x80>
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d002      	beq.n	800bfaa <tcp_close_shutdown_fin+0x32>
 800bfa4:	2b04      	cmp	r3, #4
 800bfa6:	d00d      	beq.n	800bfc4 <tcp_close_shutdown_fin+0x4c>
 800bfa8:	e026      	b.n	800bff8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f004 fe0c 	bl	8010bc8 <tcp_send_fin>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bfb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d11f      	bne.n	800bffc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2205      	movs	r2, #5
 800bfc0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bfc2:	e01b      	b.n	800bffc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f004 fdff 	bl	8010bc8 <tcp_send_fin>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d114      	bne.n	800c000 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2205      	movs	r2, #5
 800bfda:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bfdc:	e010      	b.n	800c000 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f004 fdf2 	bl	8010bc8 <tcp_send_fin>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bfe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d109      	bne.n	800c004 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2209      	movs	r2, #9
 800bff4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bff6:	e005      	b.n	800c004 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	e01c      	b.n	800c036 <tcp_close_shutdown_fin+0xbe>
      break;
 800bffc:	bf00      	nop
 800bffe:	e002      	b.n	800c006 <tcp_close_shutdown_fin+0x8e>
      break;
 800c000:	bf00      	nop
 800c002:	e000      	b.n	800c006 <tcp_close_shutdown_fin+0x8e>
      break;
 800c004:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d103      	bne.n	800c016 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f004 ff18 	bl	8010e44 <tcp_output>
 800c014:	e00d      	b.n	800c032 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01e:	d108      	bne.n	800c032 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	8b5b      	ldrh	r3, [r3, #26]
 800c024:	f043 0308 	orr.w	r3, r3, #8
 800c028:	b29a      	uxth	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	e001      	b.n	800c036 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	08017758 	.word	0x08017758
 800c044:	08017808 	.word	0x08017808
 800c048:	0801779c 	.word	0x0801779c

0800c04c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d109      	bne.n	800c06e <tcp_close+0x22>
 800c05a:	4b0f      	ldr	r3, [pc, #60]	@ (800c098 <tcp_close+0x4c>)
 800c05c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c060:	490e      	ldr	r1, [pc, #56]	@ (800c09c <tcp_close+0x50>)
 800c062:	480f      	ldr	r0, [pc, #60]	@ (800c0a0 <tcp_close+0x54>)
 800c064:	f009 f886 	bl	8015174 <iprintf>
 800c068:	f06f 030f 	mvn.w	r3, #15
 800c06c:	e00f      	b.n	800c08e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	7d1b      	ldrb	r3, [r3, #20]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d006      	beq.n	800c084 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	8b5b      	ldrh	r3, [r3, #26]
 800c07a:	f043 0310 	orr.w	r3, r3, #16
 800c07e:	b29a      	uxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c084:	2101      	movs	r1, #1
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff fe94 	bl	800bdb4 <tcp_close_shutdown>
 800c08c:	4603      	mov	r3, r0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	08017758 	.word	0x08017758
 800c09c:	08017868 	.word	0x08017868
 800c0a0:	0801779c 	.word	0x0801779c

0800c0a4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d109      	bne.n	800c0ca <tcp_shutdown+0x26>
 800c0b6:	4b26      	ldr	r3, [pc, #152]	@ (800c150 <tcp_shutdown+0xac>)
 800c0b8:	f240 2207 	movw	r2, #519	@ 0x207
 800c0bc:	4925      	ldr	r1, [pc, #148]	@ (800c154 <tcp_shutdown+0xb0>)
 800c0be:	4826      	ldr	r0, [pc, #152]	@ (800c158 <tcp_shutdown+0xb4>)
 800c0c0:	f009 f858 	bl	8015174 <iprintf>
 800c0c4:	f06f 030f 	mvn.w	r3, #15
 800c0c8:	e03d      	b.n	800c146 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	7d1b      	ldrb	r3, [r3, #20]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d102      	bne.n	800c0d8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c0d2:	f06f 030a 	mvn.w	r3, #10
 800c0d6:	e036      	b.n	800c146 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d01b      	beq.n	800c116 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	8b5b      	ldrh	r3, [r3, #26]
 800c0e2:	f043 0310 	orr.w	r3, r3, #16
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d005      	beq.n	800c0fe <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f7ff fe5d 	bl	800bdb4 <tcp_close_shutdown>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	e023      	b.n	800c146 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c102:	2b00      	cmp	r3, #0
 800c104:	d007      	beq.n	800c116 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff faf4 	bl	800b6f8 <pbuf_free>
      pcb->refused_data = NULL;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d013      	beq.n	800c144 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	7d1b      	ldrb	r3, [r3, #20]
 800c120:	2b04      	cmp	r3, #4
 800c122:	dc02      	bgt.n	800c12a <tcp_shutdown+0x86>
 800c124:	2b03      	cmp	r3, #3
 800c126:	da02      	bge.n	800c12e <tcp_shutdown+0x8a>
 800c128:	e009      	b.n	800c13e <tcp_shutdown+0x9a>
 800c12a:	2b07      	cmp	r3, #7
 800c12c:	d107      	bne.n	800c13e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	b2db      	uxtb	r3, r3
 800c132:	4619      	mov	r1, r3
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7ff fe3d 	bl	800bdb4 <tcp_close_shutdown>
 800c13a:	4603      	mov	r3, r0
 800c13c:	e003      	b.n	800c146 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c13e:	f06f 030a 	mvn.w	r3, #10
 800c142:	e000      	b.n	800c146 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	08017758 	.word	0x08017758
 800c154:	08017880 	.word	0x08017880
 800c158:	0801779c 	.word	0x0801779c

0800c15c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08e      	sub	sp, #56	@ 0x38
 800c160:	af04      	add	r7, sp, #16
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d107      	bne.n	800c17c <tcp_abandon+0x20>
 800c16c:	4b52      	ldr	r3, [pc, #328]	@ (800c2b8 <tcp_abandon+0x15c>)
 800c16e:	f240 223d 	movw	r2, #573	@ 0x23d
 800c172:	4952      	ldr	r1, [pc, #328]	@ (800c2bc <tcp_abandon+0x160>)
 800c174:	4852      	ldr	r0, [pc, #328]	@ (800c2c0 <tcp_abandon+0x164>)
 800c176:	f008 fffd 	bl	8015174 <iprintf>
 800c17a:	e099      	b.n	800c2b0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7d1b      	ldrb	r3, [r3, #20]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d106      	bne.n	800c192 <tcp_abandon+0x36>
 800c184:	4b4c      	ldr	r3, [pc, #304]	@ (800c2b8 <tcp_abandon+0x15c>)
 800c186:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c18a:	494e      	ldr	r1, [pc, #312]	@ (800c2c4 <tcp_abandon+0x168>)
 800c18c:	484c      	ldr	r0, [pc, #304]	@ (800c2c0 <tcp_abandon+0x164>)
 800c18e:	f008 fff1 	bl	8015174 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	7d1b      	ldrb	r3, [r3, #20]
 800c196:	2b0a      	cmp	r3, #10
 800c198:	d107      	bne.n	800c1aa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	484a      	ldr	r0, [pc, #296]	@ (800c2c8 <tcp_abandon+0x16c>)
 800c19e:	f001 fa3b 	bl	800d618 <tcp_pcb_remove>
    tcp_free(pcb);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff fd54 	bl	800bc50 <tcp_free>
 800c1a8:	e082      	b.n	800c2b0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1b6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1bc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7d1b      	ldrb	r3, [r3, #20]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d126      	bne.n	800c222 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	8adb      	ldrh	r3, [r3, #22]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d02e      	beq.n	800c23a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c1dc:	4b3b      	ldr	r3, [pc, #236]	@ (800c2cc <tcp_abandon+0x170>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d105      	bne.n	800c1f2 <tcp_abandon+0x96>
 800c1e6:	4b39      	ldr	r3, [pc, #228]	@ (800c2cc <tcp_abandon+0x170>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	4a37      	ldr	r2, [pc, #220]	@ (800c2cc <tcp_abandon+0x170>)
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	e013      	b.n	800c21a <tcp_abandon+0xbe>
 800c1f2:	4b36      	ldr	r3, [pc, #216]	@ (800c2cc <tcp_abandon+0x170>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	61fb      	str	r3, [r7, #28]
 800c1f8:	e00c      	b.n	800c214 <tcp_abandon+0xb8>
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	429a      	cmp	r2, r3
 800c202:	d104      	bne.n	800c20e <tcp_abandon+0xb2>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	60da      	str	r2, [r3, #12]
 800c20c:	e005      	b.n	800c21a <tcp_abandon+0xbe>
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	61fb      	str	r3, [r7, #28]
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1ef      	bne.n	800c1fa <tcp_abandon+0x9e>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	60da      	str	r2, [r3, #12]
 800c220:	e00b      	b.n	800c23a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	8adb      	ldrh	r3, [r3, #22]
 800c22a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c22c:	6879      	ldr	r1, [r7, #4]
 800c22e:	4828      	ldr	r0, [pc, #160]	@ (800c2d0 <tcp_abandon+0x174>)
 800c230:	f001 f9f2 	bl	800d618 <tcp_pcb_remove>
 800c234:	4b27      	ldr	r3, [pc, #156]	@ (800c2d4 <tcp_abandon+0x178>)
 800c236:	2201      	movs	r2, #1
 800c238:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d004      	beq.n	800c24c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fec6 	bl	800cfd8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c250:	2b00      	cmp	r3, #0
 800c252:	d004      	beq.n	800c25e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 febd 	bl	800cfd8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c262:	2b00      	cmp	r3, #0
 800c264:	d004      	beq.n	800c270 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 feb4 	bl	800cfd8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00e      	beq.n	800c294 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	3304      	adds	r3, #4
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	8b12      	ldrh	r2, [r2, #24]
 800c280:	9202      	str	r2, [sp, #8]
 800c282:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c284:	9201      	str	r2, [sp, #4]
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	460b      	mov	r3, r1
 800c28a:	697a      	ldr	r2, [r7, #20]
 800c28c:	69b9      	ldr	r1, [r7, #24]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f005 fb8c 	bl	80119ac <tcp_rst>
    }
    last_state = pcb->state;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	7d1b      	ldrb	r3, [r3, #20]
 800c298:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fcd8 	bl	800bc50 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d004      	beq.n	800c2b0 <tcp_abandon+0x154>
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f06f 010c 	mvn.w	r1, #12
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	4798      	blx	r3
  }
}
 800c2b0:	3728      	adds	r7, #40	@ 0x28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	08017758 	.word	0x08017758
 800c2bc:	0801789c 	.word	0x0801789c
 800c2c0:	0801779c 	.word	0x0801779c
 800c2c4:	080178b8 	.word	0x080178b8
 800c2c8:	2000be74 	.word	0x2000be74
 800c2cc:	2000be68 	.word	0x2000be68
 800c2d0:	2000be70 	.word	0x2000be70
 800c2d4:	2000be78 	.word	0x2000be78

0800c2d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c2e0:	2101      	movs	r1, #1
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff ff3a 	bl	800c15c <tcp_abandon>
}
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b088      	sub	sp, #32
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c2fe:	2304      	movs	r3, #4
 800c300:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d101      	bne.n	800c30c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c308:	4b3e      	ldr	r3, [pc, #248]	@ (800c404 <tcp_bind+0x114>)
 800c30a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d109      	bne.n	800c326 <tcp_bind+0x36>
 800c312:	4b3d      	ldr	r3, [pc, #244]	@ (800c408 <tcp_bind+0x118>)
 800c314:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800c318:	493c      	ldr	r1, [pc, #240]	@ (800c40c <tcp_bind+0x11c>)
 800c31a:	483d      	ldr	r0, [pc, #244]	@ (800c410 <tcp_bind+0x120>)
 800c31c:	f008 ff2a 	bl	8015174 <iprintf>
 800c320:	f06f 030f 	mvn.w	r3, #15
 800c324:	e06a      	b.n	800c3fc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	7d1b      	ldrb	r3, [r3, #20]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d009      	beq.n	800c342 <tcp_bind+0x52>
 800c32e:	4b36      	ldr	r3, [pc, #216]	@ (800c408 <tcp_bind+0x118>)
 800c330:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c334:	4937      	ldr	r1, [pc, #220]	@ (800c414 <tcp_bind+0x124>)
 800c336:	4836      	ldr	r0, [pc, #216]	@ (800c410 <tcp_bind+0x120>)
 800c338:	f008 ff1c 	bl	8015174 <iprintf>
 800c33c:	f06f 0305 	mvn.w	r3, #5
 800c340:	e05c      	b.n	800c3fc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c342:	88fb      	ldrh	r3, [r7, #6]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d109      	bne.n	800c35c <tcp_bind+0x6c>
    port = tcp_new_port();
 800c348:	f000 f9de 	bl	800c708 <tcp_new_port>
 800c34c:	4603      	mov	r3, r0
 800c34e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c350:	88fb      	ldrh	r3, [r7, #6]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d135      	bne.n	800c3c2 <tcp_bind+0xd2>
      return ERR_BUF;
 800c356:	f06f 0301 	mvn.w	r3, #1
 800c35a:	e04f      	b.n	800c3fc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c35c:	2300      	movs	r3, #0
 800c35e:	61fb      	str	r3, [r7, #28]
 800c360:	e02b      	b.n	800c3ba <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c362:	4a2d      	ldr	r2, [pc, #180]	@ (800c418 <tcp_bind+0x128>)
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	61bb      	str	r3, [r7, #24]
 800c36e:	e01e      	b.n	800c3ae <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	8adb      	ldrh	r3, [r3, #22]
 800c374:	88fa      	ldrh	r2, [r7, #6]
 800c376:	429a      	cmp	r2, r3
 800c378:	d116      	bne.n	800c3a8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c37a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d010      	beq.n	800c3a2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00c      	beq.n	800c3a2 <tcp_bind+0xb2>
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d009      	beq.n	800c3a2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d005      	beq.n	800c3a2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d102      	bne.n	800c3a8 <tcp_bind+0xb8>
              return ERR_USE;
 800c3a2:	f06f 0307 	mvn.w	r3, #7
 800c3a6:	e029      	b.n	800c3fc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	61bb      	str	r3, [r7, #24]
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1dd      	bne.n	800c370 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	69fa      	ldr	r2, [r7, #28]
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	dbcf      	blt.n	800c362 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00c      	beq.n	800c3e2 <tcp_bind+0xf2>
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d008      	beq.n	800c3e2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d002      	beq.n	800c3dc <tcp_bind+0xec>
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	e000      	b.n	800c3de <tcp_bind+0xee>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	88fa      	ldrh	r2, [r7, #6]
 800c3e6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c3e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c41c <tcp_bind+0x12c>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	60da      	str	r2, [r3, #12]
 800c3f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c41c <tcp_bind+0x12c>)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6013      	str	r3, [r2, #0]
 800c3f6:	f005 fc9b 	bl	8011d30 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3720      	adds	r7, #32
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	0801a578 	.word	0x0801a578
 800c408:	08017758 	.word	0x08017758
 800c40c:	080178ec 	.word	0x080178ec
 800c410:	0801779c 	.word	0x0801779c
 800c414:	08017904 	.word	0x08017904
 800c418:	0801a550 	.word	0x0801a550
 800c41c:	2000be68 	.word	0x2000be68

0800c420 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	4613      	mov	r3, r2
 800c42c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d106      	bne.n	800c442 <tcp_accept_null+0x22>
 800c434:	4b07      	ldr	r3, [pc, #28]	@ (800c454 <tcp_accept_null+0x34>)
 800c436:	f240 320f 	movw	r2, #783	@ 0x30f
 800c43a:	4907      	ldr	r1, [pc, #28]	@ (800c458 <tcp_accept_null+0x38>)
 800c43c:	4807      	ldr	r0, [pc, #28]	@ (800c45c <tcp_accept_null+0x3c>)
 800c43e:	f008 fe99 	bl	8015174 <iprintf>

  tcp_abort(pcb);
 800c442:	68b8      	ldr	r0, [r7, #8]
 800c444:	f7ff ff48 	bl	800c2d8 <tcp_abort>

  return ERR_ABRT;
 800c448:	f06f 030c 	mvn.w	r3, #12
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	08017758 	.word	0x08017758
 800c458:	0801792c 	.word	0x0801792c
 800c45c:	0801779c 	.word	0x0801779c

0800c460 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	460b      	mov	r3, r1
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c46e:	2300      	movs	r3, #0
 800c470:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d109      	bne.n	800c48c <tcp_listen_with_backlog_and_err+0x2c>
 800c478:	4b47      	ldr	r3, [pc, #284]	@ (800c598 <tcp_listen_with_backlog_and_err+0x138>)
 800c47a:	f240 3259 	movw	r2, #857	@ 0x359
 800c47e:	4947      	ldr	r1, [pc, #284]	@ (800c59c <tcp_listen_with_backlog_and_err+0x13c>)
 800c480:	4847      	ldr	r0, [pc, #284]	@ (800c5a0 <tcp_listen_with_backlog_and_err+0x140>)
 800c482:	f008 fe77 	bl	8015174 <iprintf>
 800c486:	23f0      	movs	r3, #240	@ 0xf0
 800c488:	76fb      	strb	r3, [r7, #27]
 800c48a:	e079      	b.n	800c580 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	7d1b      	ldrb	r3, [r3, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d009      	beq.n	800c4a8 <tcp_listen_with_backlog_and_err+0x48>
 800c494:	4b40      	ldr	r3, [pc, #256]	@ (800c598 <tcp_listen_with_backlog_and_err+0x138>)
 800c496:	f240 325a 	movw	r2, #858	@ 0x35a
 800c49a:	4942      	ldr	r1, [pc, #264]	@ (800c5a4 <tcp_listen_with_backlog_and_err+0x144>)
 800c49c:	4840      	ldr	r0, [pc, #256]	@ (800c5a0 <tcp_listen_with_backlog_and_err+0x140>)
 800c49e:	f008 fe69 	bl	8015174 <iprintf>
 800c4a2:	23f1      	movs	r3, #241	@ 0xf1
 800c4a4:	76fb      	strb	r3, [r7, #27]
 800c4a6:	e06b      	b.n	800c580 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	7d1b      	ldrb	r3, [r3, #20]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d104      	bne.n	800c4ba <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c4b4:	23f7      	movs	r3, #247	@ 0xf7
 800c4b6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c4b8:	e062      	b.n	800c580 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c4ba:	2002      	movs	r0, #2
 800c4bc:	f7fe fa02 	bl	800a8c4 <memp_malloc>
 800c4c0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c4c8:	23ff      	movs	r3, #255	@ 0xff
 800c4ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c4cc:	e058      	b.n	800c580 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	691a      	ldr	r2, [r3, #16]
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	8ada      	ldrh	r2, [r3, #22]
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	7d5a      	ldrb	r2, [r3, #21]
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	7a5a      	ldrb	r2, [r3, #9]
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	7ada      	ldrb	r2, [r3, #11]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	7a9a      	ldrb	r2, [r3, #10]
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	8adb      	ldrh	r3, [r3, #22]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d021      	beq.n	800c55e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c51a:	4b23      	ldr	r3, [pc, #140]	@ (800c5a8 <tcp_listen_with_backlog_and_err+0x148>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	429a      	cmp	r2, r3
 800c522:	d105      	bne.n	800c530 <tcp_listen_with_backlog_and_err+0xd0>
 800c524:	4b20      	ldr	r3, [pc, #128]	@ (800c5a8 <tcp_listen_with_backlog_and_err+0x148>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	4a1f      	ldr	r2, [pc, #124]	@ (800c5a8 <tcp_listen_with_backlog_and_err+0x148>)
 800c52c:	6013      	str	r3, [r2, #0]
 800c52e:	e013      	b.n	800c558 <tcp_listen_with_backlog_and_err+0xf8>
 800c530:	4b1d      	ldr	r3, [pc, #116]	@ (800c5a8 <tcp_listen_with_backlog_and_err+0x148>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	617b      	str	r3, [r7, #20]
 800c536:	e00c      	b.n	800c552 <tcp_listen_with_backlog_and_err+0xf2>
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d104      	bne.n	800c54c <tcp_listen_with_backlog_and_err+0xec>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	68da      	ldr	r2, [r3, #12]
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	60da      	str	r2, [r3, #12]
 800c54a:	e005      	b.n	800c558 <tcp_listen_with_backlog_and_err+0xf8>
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	617b      	str	r3, [r7, #20]
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1ef      	bne.n	800c538 <tcp_listen_with_backlog_and_err+0xd8>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f7ff fb76 	bl	800bc50 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	4a11      	ldr	r2, [pc, #68]	@ (800c5ac <tcp_listen_with_backlog_and_err+0x14c>)
 800c568:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c56a:	4b11      	ldr	r3, [pc, #68]	@ (800c5b0 <tcp_listen_with_backlog_and_err+0x150>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	60da      	str	r2, [r3, #12]
 800c572:	4a0f      	ldr	r2, [pc, #60]	@ (800c5b0 <tcp_listen_with_backlog_and_err+0x150>)
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	f005 fbda 	bl	8011d30 <tcp_timer_needed>
  res = ERR_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	7efa      	ldrb	r2, [r7, #27]
 800c58a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c58c:	69fb      	ldr	r3, [r7, #28]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	08017758 	.word	0x08017758
 800c59c:	0801794c 	.word	0x0801794c
 800c5a0:	0801779c 	.word	0x0801779c
 800c5a4:	0801797c 	.word	0x0801797c
 800c5a8:	2000be68 	.word	0x2000be68
 800c5ac:	0800c421 	.word	0x0800c421
 800c5b0:	2000be6c 	.word	0x2000be6c

0800c5b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d106      	bne.n	800c5d0 <tcp_update_rcv_ann_wnd+0x1c>
 800c5c2:	4b25      	ldr	r3, [pc, #148]	@ (800c658 <tcp_update_rcv_ann_wnd+0xa4>)
 800c5c4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c5c8:	4924      	ldr	r1, [pc, #144]	@ (800c65c <tcp_update_rcv_ann_wnd+0xa8>)
 800c5ca:	4825      	ldr	r0, [pc, #148]	@ (800c660 <tcp_update_rcv_ann_wnd+0xac>)
 800c5cc:	f008 fdd2 	bl	8015174 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c5d8:	4413      	add	r3, r2
 800c5da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c5e4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c5e8:	bf28      	it	cs
 800c5ea:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c5ee:	b292      	uxth	r2, r2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	db08      	blt.n	800c60c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	e020      	b.n	800c64e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	dd03      	ble.n	800c622 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c620:	e014      	b.n	800c64c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c634:	d306      	bcc.n	800c644 <tcp_update_rcv_ann_wnd+0x90>
 800c636:	4b08      	ldr	r3, [pc, #32]	@ (800c658 <tcp_update_rcv_ann_wnd+0xa4>)
 800c638:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c63c:	4909      	ldr	r1, [pc, #36]	@ (800c664 <tcp_update_rcv_ann_wnd+0xb0>)
 800c63e:	4808      	ldr	r0, [pc, #32]	@ (800c660 <tcp_update_rcv_ann_wnd+0xac>)
 800c640:	f008 fd98 	bl	8015174 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	b29a      	uxth	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c64c:	2300      	movs	r3, #0
  }
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	08017758 	.word	0x08017758
 800c65c:	080179b4 	.word	0x080179b4
 800c660:	0801779c 	.word	0x0801779c
 800c664:	080179d8 	.word	0x080179d8

0800c668 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d107      	bne.n	800c68a <tcp_recved+0x22>
 800c67a:	4b1f      	ldr	r3, [pc, #124]	@ (800c6f8 <tcp_recved+0x90>)
 800c67c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c680:	491e      	ldr	r1, [pc, #120]	@ (800c6fc <tcp_recved+0x94>)
 800c682:	481f      	ldr	r0, [pc, #124]	@ (800c700 <tcp_recved+0x98>)
 800c684:	f008 fd76 	bl	8015174 <iprintf>
 800c688:	e032      	b.n	800c6f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7d1b      	ldrb	r3, [r3, #20]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d106      	bne.n	800c6a0 <tcp_recved+0x38>
 800c692:	4b19      	ldr	r3, [pc, #100]	@ (800c6f8 <tcp_recved+0x90>)
 800c694:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c698:	491a      	ldr	r1, [pc, #104]	@ (800c704 <tcp_recved+0x9c>)
 800c69a:	4819      	ldr	r0, [pc, #100]	@ (800c700 <tcp_recved+0x98>)
 800c69c:	f008 fd6a 	bl	8015174 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c6a4:	887b      	ldrh	r3, [r7, #2]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c6aa:	89fb      	ldrh	r3, [r7, #14]
 800c6ac:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c6b0:	d804      	bhi.n	800c6bc <tcp_recved+0x54>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6b6:	89fa      	ldrh	r2, [r7, #14]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d204      	bcs.n	800c6c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c6c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c6c4:	e002      	b.n	800c6cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	89fa      	ldrh	r2, [r7, #14]
 800c6ca:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f7ff ff71 	bl	800c5b4 <tcp_update_rcv_ann_wnd>
 800c6d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c6da:	d309      	bcc.n	800c6f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	8b5b      	ldrh	r3, [r3, #26]
 800c6e0:	f043 0302 	orr.w	r3, r3, #2
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f004 fbaa 	bl	8010e44 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	08017758 	.word	0x08017758
 800c6fc:	080179f4 	.word	0x080179f4
 800c700:	0801779c 	.word	0x0801779c
 800c704:	08017a0c 	.word	0x08017a0c

0800c708 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c70e:	2300      	movs	r3, #0
 800c710:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c712:	4b1e      	ldr	r3, [pc, #120]	@ (800c78c <tcp_new_port+0x84>)
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	3301      	adds	r3, #1
 800c718:	b29a      	uxth	r2, r3
 800c71a:	4b1c      	ldr	r3, [pc, #112]	@ (800c78c <tcp_new_port+0x84>)
 800c71c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c71e:	4b1b      	ldr	r3, [pc, #108]	@ (800c78c <tcp_new_port+0x84>)
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c726:	4293      	cmp	r3, r2
 800c728:	d103      	bne.n	800c732 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c72a:	4b18      	ldr	r3, [pc, #96]	@ (800c78c <tcp_new_port+0x84>)
 800c72c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c730:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c732:	2300      	movs	r3, #0
 800c734:	71fb      	strb	r3, [r7, #7]
 800c736:	e01e      	b.n	800c776 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c738:	79fb      	ldrb	r3, [r7, #7]
 800c73a:	4a15      	ldr	r2, [pc, #84]	@ (800c790 <tcp_new_port+0x88>)
 800c73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	603b      	str	r3, [r7, #0]
 800c744:	e011      	b.n	800c76a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	8ada      	ldrh	r2, [r3, #22]
 800c74a:	4b10      	ldr	r3, [pc, #64]	@ (800c78c <tcp_new_port+0x84>)
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d108      	bne.n	800c764 <tcp_new_port+0x5c>
        n++;
 800c752:	88bb      	ldrh	r3, [r7, #4]
 800c754:	3301      	adds	r3, #1
 800c756:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c758:	88bb      	ldrh	r3, [r7, #4]
 800c75a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c75e:	d3d8      	bcc.n	800c712 <tcp_new_port+0xa>
          return 0;
 800c760:	2300      	movs	r3, #0
 800c762:	e00d      	b.n	800c780 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	603b      	str	r3, [r7, #0]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1ea      	bne.n	800c746 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	3301      	adds	r3, #1
 800c774:	71fb      	strb	r3, [r7, #7]
 800c776:	79fb      	ldrb	r3, [r7, #7]
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d9dd      	bls.n	800c738 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c77c:	4b03      	ldr	r3, [pc, #12]	@ (800c78c <tcp_new_port+0x84>)
 800c77e:	881b      	ldrh	r3, [r3, #0]
}
 800c780:	4618      	mov	r0, r3
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr
 800c78c:	20000024 	.word	0x20000024
 800c790:	0801a550 	.word	0x0801a550

0800c794 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c794:	b5b0      	push	{r4, r5, r7, lr}
 800c796:	b090      	sub	sp, #64	@ 0x40
 800c798:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c79a:	2300      	movs	r3, #0
 800c79c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c7a0:	4b95      	ldr	r3, [pc, #596]	@ (800c9f8 <tcp_slowtmr+0x264>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	4a94      	ldr	r2, [pc, #592]	@ (800c9f8 <tcp_slowtmr+0x264>)
 800c7a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c7aa:	4b94      	ldr	r3, [pc, #592]	@ (800c9fc <tcp_slowtmr+0x268>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	4b92      	ldr	r3, [pc, #584]	@ (800c9fc <tcp_slowtmr+0x268>)
 800c7b4:	701a      	strb	r2, [r3, #0]
 800c7b6:	e000      	b.n	800c7ba <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c7b8:	bf00      	nop
  prev = NULL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c7be:	4b90      	ldr	r3, [pc, #576]	@ (800ca00 <tcp_slowtmr+0x26c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c7c4:	e29d      	b.n	800cd02 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c8:	7d1b      	ldrb	r3, [r3, #20]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d106      	bne.n	800c7dc <tcp_slowtmr+0x48>
 800c7ce:	4b8d      	ldr	r3, [pc, #564]	@ (800ca04 <tcp_slowtmr+0x270>)
 800c7d0:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c7d4:	498c      	ldr	r1, [pc, #560]	@ (800ca08 <tcp_slowtmr+0x274>)
 800c7d6:	488d      	ldr	r0, [pc, #564]	@ (800ca0c <tcp_slowtmr+0x278>)
 800c7d8:	f008 fccc 	bl	8015174 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7de:	7d1b      	ldrb	r3, [r3, #20]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d106      	bne.n	800c7f2 <tcp_slowtmr+0x5e>
 800c7e4:	4b87      	ldr	r3, [pc, #540]	@ (800ca04 <tcp_slowtmr+0x270>)
 800c7e6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c7ea:	4989      	ldr	r1, [pc, #548]	@ (800ca10 <tcp_slowtmr+0x27c>)
 800c7ec:	4887      	ldr	r0, [pc, #540]	@ (800ca0c <tcp_slowtmr+0x278>)
 800c7ee:	f008 fcc1 	bl	8015174 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f4:	7d1b      	ldrb	r3, [r3, #20]
 800c7f6:	2b0a      	cmp	r3, #10
 800c7f8:	d106      	bne.n	800c808 <tcp_slowtmr+0x74>
 800c7fa:	4b82      	ldr	r3, [pc, #520]	@ (800ca04 <tcp_slowtmr+0x270>)
 800c7fc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c800:	4984      	ldr	r1, [pc, #528]	@ (800ca14 <tcp_slowtmr+0x280>)
 800c802:	4882      	ldr	r0, [pc, #520]	@ (800ca0c <tcp_slowtmr+0x278>)
 800c804:	f008 fcb6 	bl	8015174 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c80a:	7f9a      	ldrb	r2, [r3, #30]
 800c80c:	4b7b      	ldr	r3, [pc, #492]	@ (800c9fc <tcp_slowtmr+0x268>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	429a      	cmp	r2, r3
 800c812:	d105      	bne.n	800c820 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c816:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c81e:	e270      	b.n	800cd02 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800c820:	4b76      	ldr	r3, [pc, #472]	@ (800c9fc <tcp_slowtmr+0x268>)
 800c822:	781a      	ldrb	r2, [r3, #0]
 800c824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c826:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c836:	7d1b      	ldrb	r3, [r3, #20]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d10a      	bne.n	800c852 <tcp_slowtmr+0xbe>
 800c83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c83e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c842:	2b05      	cmp	r3, #5
 800c844:	d905      	bls.n	800c852 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c84a:	3301      	adds	r3, #1
 800c84c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c850:	e11e      	b.n	800ca90 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c854:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c858:	2b0b      	cmp	r3, #11
 800c85a:	d905      	bls.n	800c868 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c85c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c860:	3301      	adds	r3, #1
 800c862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c866:	e113      	b.n	800ca90 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d075      	beq.n	800c95e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c876:	2b00      	cmp	r3, #0
 800c878:	d006      	beq.n	800c888 <tcp_slowtmr+0xf4>
 800c87a:	4b62      	ldr	r3, [pc, #392]	@ (800ca04 <tcp_slowtmr+0x270>)
 800c87c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c880:	4965      	ldr	r1, [pc, #404]	@ (800ca18 <tcp_slowtmr+0x284>)
 800c882:	4862      	ldr	r0, [pc, #392]	@ (800ca0c <tcp_slowtmr+0x278>)
 800c884:	f008 fc76 	bl	8015174 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <tcp_slowtmr+0x10a>
 800c890:	4b5c      	ldr	r3, [pc, #368]	@ (800ca04 <tcp_slowtmr+0x270>)
 800c892:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c896:	4961      	ldr	r1, [pc, #388]	@ (800ca1c <tcp_slowtmr+0x288>)
 800c898:	485c      	ldr	r0, [pc, #368]	@ (800ca0c <tcp_slowtmr+0x278>)
 800c89a:	f008 fc6b 	bl	8015174 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c8a4:	2b0b      	cmp	r3, #11
 800c8a6:	d905      	bls.n	800c8b4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8b2:	e0ed      	b.n	800ca90 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	4a58      	ldr	r2, [pc, #352]	@ (800ca20 <tcp_slowtmr+0x28c>)
 800c8be:	5cd3      	ldrb	r3, [r2, r3]
 800c8c0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c8c8:	7c7a      	ldrb	r2, [r7, #17]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d907      	bls.n	800c8de <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8da:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c8e4:	7c7a      	ldrb	r2, [r7, #17]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	f200 80d2 	bhi.w	800ca90 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d108      	bne.n	800c90c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c8fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8fc:	f005 f94a 	bl	8011b94 <tcp_zero_window_probe>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d014      	beq.n	800c930 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c906:	2300      	movs	r3, #0
 800c908:	623b      	str	r3, [r7, #32]
 800c90a:	e011      	b.n	800c930 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c912:	4619      	mov	r1, r3
 800c914:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c916:	f004 f80f 	bl	8010938 <tcp_split_unsent_seg>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d107      	bne.n	800c930 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c922:	f004 fa8f 	bl	8010e44 <tcp_output>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d101      	bne.n	800c930 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	2b00      	cmp	r3, #0
 800c934:	f000 80ac 	beq.w	800ca90 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c942:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c946:	2b06      	cmp	r3, #6
 800c948:	f200 80a2 	bhi.w	800ca90 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c952:	3301      	adds	r3, #1
 800c954:	b2da      	uxtb	r2, r3
 800c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c958:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c95c:	e098      	b.n	800ca90 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c964:	2b00      	cmp	r3, #0
 800c966:	db0f      	blt.n	800c988 <tcp_slowtmr+0x1f4>
 800c968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c96e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c972:	4293      	cmp	r3, r2
 800c974:	d008      	beq.n	800c988 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c978:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	3301      	adds	r3, #1
 800c980:	b29b      	uxth	r3, r3
 800c982:	b21a      	sxth	r2, r3
 800c984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c986:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c990:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c994:	429a      	cmp	r2, r3
 800c996:	db7b      	blt.n	800ca90 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c998:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c99a:	f004 fd47 	bl	801142c <tcp_rexmit_rto_prepare>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d007      	beq.n	800c9b4 <tcp_slowtmr+0x220>
 800c9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d171      	bne.n	800ca90 <tcp_slowtmr+0x2fc>
 800c9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d06d      	beq.n	800ca90 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800c9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b6:	7d1b      	ldrb	r3, [r3, #20]
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	d03a      	beq.n	800ca32 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c9c2:	2b0c      	cmp	r3, #12
 800c9c4:	bf28      	it	cs
 800c9c6:	230c      	movcs	r3, #12
 800c9c8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c9d0:	10db      	asrs	r3, r3, #3
 800c9d2:	b21b      	sxth	r3, r3
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c9dc:	4413      	add	r3, r2
 800c9de:	7efa      	ldrb	r2, [r7, #27]
 800c9e0:	4910      	ldr	r1, [pc, #64]	@ (800ca24 <tcp_slowtmr+0x290>)
 800c9e2:	5c8a      	ldrb	r2, [r1, r2]
 800c9e4:	4093      	lsls	r3, r2
 800c9e6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	dc1a      	bgt.n	800ca28 <tcp_slowtmr+0x294>
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	b21a      	sxth	r2, r3
 800c9f6:	e019      	b.n	800ca2c <tcp_slowtmr+0x298>
 800c9f8:	2000be64 	.word	0x2000be64
 800c9fc:	2000be7a 	.word	0x2000be7a
 800ca00:	2000be70 	.word	0x2000be70
 800ca04:	08017758 	.word	0x08017758
 800ca08:	08017a9c 	.word	0x08017a9c
 800ca0c:	0801779c 	.word	0x0801779c
 800ca10:	08017ac8 	.word	0x08017ac8
 800ca14:	08017af4 	.word	0x08017af4
 800ca18:	08017b24 	.word	0x08017b24
 800ca1c:	08017b58 	.word	0x08017b58
 800ca20:	0801a548 	.word	0x0801a548
 800ca24:	0801a538 	.word	0x0801a538
 800ca28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ca2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ca32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca34:	2200      	movs	r2, #0
 800ca36:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ca38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ca3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ca44:	4293      	cmp	r3, r2
 800ca46:	bf28      	it	cs
 800ca48:	4613      	movcs	r3, r2
 800ca4a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ca4c:	8a7b      	ldrh	r3, [r7, #18]
 800ca4e:	085b      	lsrs	r3, r3, #1
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ca58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ca5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d206      	bcs.n	800ca78 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ca6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca6e:	005b      	lsls	r3, r3, #1
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ca78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ca7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ca82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca84:	2200      	movs	r2, #0
 800ca86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ca8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca8c:	f004 fd3e 	bl	801150c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ca90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca92:	7d1b      	ldrb	r3, [r3, #20]
 800ca94:	2b06      	cmp	r3, #6
 800ca96:	d111      	bne.n	800cabc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ca98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9a:	8b5b      	ldrh	r3, [r3, #26]
 800ca9c:	f003 0310 	and.w	r3, r3, #16
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00b      	beq.n	800cabc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800caa4:	4b9c      	ldr	r3, [pc, #624]	@ (800cd18 <tcp_slowtmr+0x584>)
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caaa:	6a1b      	ldr	r3, [r3, #32]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	2b28      	cmp	r3, #40	@ 0x28
 800cab0:	d904      	bls.n	800cabc <tcp_slowtmr+0x328>
          ++pcb_remove;
 800cab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cab6:	3301      	adds	r3, #1
 800cab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabe:	7a5b      	ldrb	r3, [r3, #9]
 800cac0:	f003 0308 	and.w	r3, r3, #8
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d04a      	beq.n	800cb5e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d003      	beq.n	800cad8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800cad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cad4:	2b07      	cmp	r3, #7
 800cad6:	d142      	bne.n	800cb5e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cad8:	4b8f      	ldr	r3, [pc, #572]	@ (800cd18 <tcp_slowtmr+0x584>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cade:	6a1b      	ldr	r3, [r3, #32]
 800cae0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cae8:	4b8c      	ldr	r3, [pc, #560]	@ (800cd1c <tcp_slowtmr+0x588>)
 800caea:	440b      	add	r3, r1
 800caec:	498c      	ldr	r1, [pc, #560]	@ (800cd20 <tcp_slowtmr+0x58c>)
 800caee:	fba1 1303 	umull	r1, r3, r1, r3
 800caf2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d90a      	bls.n	800cb0e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800caf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cafc:	3301      	adds	r3, #1
 800cafe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800cb02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb06:	3301      	adds	r3, #1
 800cb08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb0c:	e027      	b.n	800cb5e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb0e:	4b82      	ldr	r3, [pc, #520]	@ (800cd18 <tcp_slowtmr+0x584>)
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb20:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cb24:	4618      	mov	r0, r3
 800cb26:	4b7f      	ldr	r3, [pc, #508]	@ (800cd24 <tcp_slowtmr+0x590>)
 800cb28:	fb00 f303 	mul.w	r3, r0, r3
 800cb2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cb2e:	497c      	ldr	r1, [pc, #496]	@ (800cd20 <tcp_slowtmr+0x58c>)
 800cb30:	fba1 1303 	umull	r1, r3, r1, r3
 800cb34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d911      	bls.n	800cb5e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cb3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb3c:	f004 ffea 	bl	8011b14 <tcp_keepalive>
 800cb40:	4603      	mov	r3, r0
 800cb42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cb46:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d107      	bne.n	800cb5e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb50:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cb54:	3301      	adds	r3, #1
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d011      	beq.n	800cb8a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cb66:	4b6c      	ldr	r3, [pc, #432]	@ (800cd18 <tcp_slowtmr+0x584>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	1ad2      	subs	r2, r2, r3
 800cb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cb76:	4619      	mov	r1, r3
 800cb78:	460b      	mov	r3, r1
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	440b      	add	r3, r1
 800cb7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d302      	bcc.n	800cb8a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800cb84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb86:	f000 feab 	bl	800d8e0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8c:	7d1b      	ldrb	r3, [r3, #20]
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d10b      	bne.n	800cbaa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb92:	4b61      	ldr	r3, [pc, #388]	@ (800cd18 <tcp_slowtmr+0x584>)
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb98:	6a1b      	ldr	r3, [r3, #32]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b28      	cmp	r3, #40	@ 0x28
 800cb9e:	d904      	bls.n	800cbaa <tcp_slowtmr+0x416>
        ++pcb_remove;
 800cba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cba4:	3301      	adds	r3, #1
 800cba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbac:	7d1b      	ldrb	r3, [r3, #20]
 800cbae:	2b09      	cmp	r3, #9
 800cbb0:	d10b      	bne.n	800cbca <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cbb2:	4b59      	ldr	r3, [pc, #356]	@ (800cd18 <tcp_slowtmr+0x584>)
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	2bf0      	cmp	r3, #240	@ 0xf0
 800cbbe:	d904      	bls.n	800cbca <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cbc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800cbca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d060      	beq.n	800cc94 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800cbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbd8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800cbda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cbdc:	f000 fccc 	bl	800d578 <tcp_pcb_purge>
      if (prev != NULL) {
 800cbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d010      	beq.n	800cc08 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cbe6:	4b50      	ldr	r3, [pc, #320]	@ (800cd28 <tcp_slowtmr+0x594>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d106      	bne.n	800cbfe <tcp_slowtmr+0x46a>
 800cbf0:	4b4e      	ldr	r3, [pc, #312]	@ (800cd2c <tcp_slowtmr+0x598>)
 800cbf2:	f240 526d 	movw	r2, #1389	@ 0x56d
 800cbf6:	494e      	ldr	r1, [pc, #312]	@ (800cd30 <tcp_slowtmr+0x59c>)
 800cbf8:	484e      	ldr	r0, [pc, #312]	@ (800cd34 <tcp_slowtmr+0x5a0>)
 800cbfa:	f008 fabb 	bl	8015174 <iprintf>
        prev->next = pcb->next;
 800cbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc00:	68da      	ldr	r2, [r3, #12]
 800cc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc04:	60da      	str	r2, [r3, #12]
 800cc06:	e00f      	b.n	800cc28 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cc08:	4b47      	ldr	r3, [pc, #284]	@ (800cd28 <tcp_slowtmr+0x594>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d006      	beq.n	800cc20 <tcp_slowtmr+0x48c>
 800cc12:	4b46      	ldr	r3, [pc, #280]	@ (800cd2c <tcp_slowtmr+0x598>)
 800cc14:	f240 5271 	movw	r2, #1393	@ 0x571
 800cc18:	4947      	ldr	r1, [pc, #284]	@ (800cd38 <tcp_slowtmr+0x5a4>)
 800cc1a:	4846      	ldr	r0, [pc, #280]	@ (800cd34 <tcp_slowtmr+0x5a0>)
 800cc1c:	f008 faaa 	bl	8015174 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	4a40      	ldr	r2, [pc, #256]	@ (800cd28 <tcp_slowtmr+0x594>)
 800cc26:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cc28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d013      	beq.n	800cc58 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc32:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc36:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cc38:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800cc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc40:	8ad2      	ldrh	r2, [r2, #22]
 800cc42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc44:	8b09      	ldrh	r1, [r1, #24]
 800cc46:	9102      	str	r1, [sp, #8]
 800cc48:	9201      	str	r2, [sp, #4]
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	462b      	mov	r3, r5
 800cc4e:	4622      	mov	r2, r4
 800cc50:	4601      	mov	r1, r0
 800cc52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc54:	f004 feaa 	bl	80119ac <tcp_rst>
      err_arg = pcb->callback_arg;
 800cc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc60:	7d1b      	ldrb	r3, [r3, #20]
 800cc62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cc6e:	6838      	ldr	r0, [r7, #0]
 800cc70:	f7fe ffee 	bl	800bc50 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800cc74:	4b31      	ldr	r3, [pc, #196]	@ (800cd3c <tcp_slowtmr+0x5a8>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d004      	beq.n	800cc8a <tcp_slowtmr+0x4f6>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f06f 010c 	mvn.w	r1, #12
 800cc86:	68b8      	ldr	r0, [r7, #8]
 800cc88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cc8a:	4b2c      	ldr	r3, [pc, #176]	@ (800cd3c <tcp_slowtmr+0x5a8>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d037      	beq.n	800cd02 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cc92:	e592      	b.n	800c7ba <tcp_slowtmr+0x26>
      prev = pcb;
 800cc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc96:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800cc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca0:	7f1b      	ldrb	r3, [r3, #28]
 800cca2:	3301      	adds	r3, #1
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ccaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccac:	7f1a      	ldrb	r2, [r3, #28]
 800ccae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb0:	7f5b      	ldrb	r3, [r3, #29]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d325      	bcc.n	800cd02 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ccb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb8:	2200      	movs	r2, #0
 800ccba:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ccbc:	4b1f      	ldr	r3, [pc, #124]	@ (800cd3c <tcp_slowtmr+0x5a8>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ccc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00b      	beq.n	800cce4 <tcp_slowtmr+0x550>
 800cccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ccd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccd4:	6912      	ldr	r2, [r2, #16]
 800ccd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccd8:	4610      	mov	r0, r2
 800ccda:	4798      	blx	r3
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cce2:	e002      	b.n	800ccea <tcp_slowtmr+0x556>
 800cce4:	2300      	movs	r3, #0
 800cce6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800ccea:	4b14      	ldr	r3, [pc, #80]	@ (800cd3c <tcp_slowtmr+0x5a8>)
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f47f ad62 	bne.w	800c7b8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ccf4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ccfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccfe:	f004 f8a1 	bl	8010e44 <tcp_output>
  while (pcb != NULL) {
 800cd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f47f ad5e 	bne.w	800c7c6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800cd0e:	4b0c      	ldr	r3, [pc, #48]	@ (800cd40 <tcp_slowtmr+0x5ac>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cd14:	e069      	b.n	800cdea <tcp_slowtmr+0x656>
 800cd16:	bf00      	nop
 800cd18:	2000be64 	.word	0x2000be64
 800cd1c:	000a4cb8 	.word	0x000a4cb8
 800cd20:	10624dd3 	.word	0x10624dd3
 800cd24:	000124f8 	.word	0x000124f8
 800cd28:	2000be70 	.word	0x2000be70
 800cd2c:	08017758 	.word	0x08017758
 800cd30:	08017b90 	.word	0x08017b90
 800cd34:	0801779c 	.word	0x0801779c
 800cd38:	08017bbc 	.word	0x08017bbc
 800cd3c:	2000be78 	.word	0x2000be78
 800cd40:	2000be74 	.word	0x2000be74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd46:	7d1b      	ldrb	r3, [r3, #20]
 800cd48:	2b0a      	cmp	r3, #10
 800cd4a:	d006      	beq.n	800cd5a <tcp_slowtmr+0x5c6>
 800cd4c:	4b2b      	ldr	r3, [pc, #172]	@ (800cdfc <tcp_slowtmr+0x668>)
 800cd4e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800cd52:	492b      	ldr	r1, [pc, #172]	@ (800ce00 <tcp_slowtmr+0x66c>)
 800cd54:	482b      	ldr	r0, [pc, #172]	@ (800ce04 <tcp_slowtmr+0x670>)
 800cd56:	f008 fa0d 	bl	8015174 <iprintf>
    pcb_remove = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd60:	4b29      	ldr	r3, [pc, #164]	@ (800ce08 <tcp_slowtmr+0x674>)
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd66:	6a1b      	ldr	r3, [r3, #32]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	2bf0      	cmp	r3, #240	@ 0xf0
 800cd6c:	d904      	bls.n	800cd78 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800cd6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd72:	3301      	adds	r3, #1
 800cd74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d02f      	beq.n	800cde0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cd80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd82:	f000 fbf9 	bl	800d578 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d010      	beq.n	800cdae <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cd8c:	4b1f      	ldr	r3, [pc, #124]	@ (800ce0c <tcp_slowtmr+0x678>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d106      	bne.n	800cda4 <tcp_slowtmr+0x610>
 800cd96:	4b19      	ldr	r3, [pc, #100]	@ (800cdfc <tcp_slowtmr+0x668>)
 800cd98:	f240 52af 	movw	r2, #1455	@ 0x5af
 800cd9c:	491c      	ldr	r1, [pc, #112]	@ (800ce10 <tcp_slowtmr+0x67c>)
 800cd9e:	4819      	ldr	r0, [pc, #100]	@ (800ce04 <tcp_slowtmr+0x670>)
 800cda0:	f008 f9e8 	bl	8015174 <iprintf>
        prev->next = pcb->next;
 800cda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda6:	68da      	ldr	r2, [r3, #12]
 800cda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdaa:	60da      	str	r2, [r3, #12]
 800cdac:	e00f      	b.n	800cdce <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cdae:	4b17      	ldr	r3, [pc, #92]	@ (800ce0c <tcp_slowtmr+0x678>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d006      	beq.n	800cdc6 <tcp_slowtmr+0x632>
 800cdb8:	4b10      	ldr	r3, [pc, #64]	@ (800cdfc <tcp_slowtmr+0x668>)
 800cdba:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800cdbe:	4915      	ldr	r1, [pc, #84]	@ (800ce14 <tcp_slowtmr+0x680>)
 800cdc0:	4810      	ldr	r0, [pc, #64]	@ (800ce04 <tcp_slowtmr+0x670>)
 800cdc2:	f008 f9d7 	bl	8015174 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	4a10      	ldr	r2, [pc, #64]	@ (800ce0c <tcp_slowtmr+0x678>)
 800cdcc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cdd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cdd8:	69f8      	ldr	r0, [r7, #28]
 800cdda:	f7fe ff39 	bl	800bc50 <tcp_free>
 800cdde:	e004      	b.n	800cdea <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800cde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1a9      	bne.n	800cd44 <tcp_slowtmr+0x5b0>
    }
  }
}
 800cdf0:	bf00      	nop
 800cdf2:	bf00      	nop
 800cdf4:	3730      	adds	r7, #48	@ 0x30
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bdb0      	pop	{r4, r5, r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	08017758 	.word	0x08017758
 800ce00:	08017be8 	.word	0x08017be8
 800ce04:	0801779c 	.word	0x0801779c
 800ce08:	2000be64 	.word	0x2000be64
 800ce0c:	2000be74 	.word	0x2000be74
 800ce10:	08017c18 	.word	0x08017c18
 800ce14:	08017c40 	.word	0x08017c40

0800ce18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ce1e:	4b2d      	ldr	r3, [pc, #180]	@ (800ced4 <tcp_fasttmr+0xbc>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	4b2b      	ldr	r3, [pc, #172]	@ (800ced4 <tcp_fasttmr+0xbc>)
 800ce28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ce2a:	4b2b      	ldr	r3, [pc, #172]	@ (800ced8 <tcp_fasttmr+0xc0>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ce30:	e048      	b.n	800cec4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	7f9a      	ldrb	r2, [r3, #30]
 800ce36:	4b27      	ldr	r3, [pc, #156]	@ (800ced4 <tcp_fasttmr+0xbc>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d03f      	beq.n	800cebe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ce3e:	4b25      	ldr	r3, [pc, #148]	@ (800ced4 <tcp_fasttmr+0xbc>)
 800ce40:	781a      	ldrb	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	8b5b      	ldrh	r3, [r3, #26]
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d010      	beq.n	800ce74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	8b5b      	ldrh	r3, [r3, #26]
 800ce56:	f043 0302 	orr.w	r3, r3, #2
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f003 ffef 	bl	8010e44 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	8b5b      	ldrh	r3, [r3, #26]
 800ce6a:	f023 0303 	bic.w	r3, r3, #3
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	8b5b      	ldrh	r3, [r3, #26]
 800ce78:	f003 0308 	and.w	r3, r3, #8
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d009      	beq.n	800ce94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	8b5b      	ldrh	r3, [r3, #26]
 800ce84:	f023 0308 	bic.w	r3, r3, #8
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7ff f872 	bl	800bf78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00a      	beq.n	800ceb8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cea2:	4b0e      	ldr	r3, [pc, #56]	@ (800cedc <tcp_fasttmr+0xc4>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f819 	bl	800cee0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ceae:	4b0b      	ldr	r3, [pc, #44]	@ (800cedc <tcp_fasttmr+0xc4>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d000      	beq.n	800ceb8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ceb6:	e7b8      	b.n	800ce2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	607b      	str	r3, [r7, #4]
 800cebc:	e002      	b.n	800cec4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1b3      	bne.n	800ce32 <tcp_fasttmr+0x1a>
    }
  }
}
 800ceca:	bf00      	nop
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	2000be7a 	.word	0x2000be7a
 800ced8:	2000be70 	.word	0x2000be70
 800cedc:	2000be78 	.word	0x2000be78

0800cee0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cee0:	b590      	push	{r4, r7, lr}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d109      	bne.n	800cf02 <tcp_process_refused_data+0x22>
 800ceee:	4b37      	ldr	r3, [pc, #220]	@ (800cfcc <tcp_process_refused_data+0xec>)
 800cef0:	f240 6209 	movw	r2, #1545	@ 0x609
 800cef4:	4936      	ldr	r1, [pc, #216]	@ (800cfd0 <tcp_process_refused_data+0xf0>)
 800cef6:	4837      	ldr	r0, [pc, #220]	@ (800cfd4 <tcp_process_refused_data+0xf4>)
 800cef8:	f008 f93c 	bl	8015174 <iprintf>
 800cefc:	f06f 030f 	mvn.w	r3, #15
 800cf00:	e060      	b.n	800cfc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf06:	7b5b      	ldrb	r3, [r3, #13]
 800cf08:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf0e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <tcp_process_refused_data+0x58>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6918      	ldr	r0, [r3, #16]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	6879      	ldr	r1, [r7, #4]
 800cf30:	47a0      	blx	r4
 800cf32:	4603      	mov	r3, r0
 800cf34:	73fb      	strb	r3, [r7, #15]
 800cf36:	e007      	b.n	800cf48 <tcp_process_refused_data+0x68>
 800cf38:	2300      	movs	r3, #0
 800cf3a:	68ba      	ldr	r2, [r7, #8]
 800cf3c:	6879      	ldr	r1, [r7, #4]
 800cf3e:	2000      	movs	r0, #0
 800cf40:	f000 f8a4 	bl	800d08c <tcp_recv_null>
 800cf44:	4603      	mov	r3, r0
 800cf46:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cf48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d12a      	bne.n	800cfa6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cf50:	7bbb      	ldrb	r3, [r7, #14]
 800cf52:	f003 0320 	and.w	r3, r3, #32
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d033      	beq.n	800cfc2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf5e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cf62:	d005      	beq.n	800cf70 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf68:	3301      	adds	r3, #1
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00b      	beq.n	800cf92 <tcp_process_refused_data+0xb2>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6918      	ldr	r0, [r3, #16]
 800cf84:	2300      	movs	r3, #0
 800cf86:	2200      	movs	r2, #0
 800cf88:	6879      	ldr	r1, [r7, #4]
 800cf8a:	47a0      	blx	r4
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	73fb      	strb	r3, [r7, #15]
 800cf90:	e001      	b.n	800cf96 <tcp_process_refused_data+0xb6>
 800cf92:	2300      	movs	r3, #0
 800cf94:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cf96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf9a:	f113 0f0d 	cmn.w	r3, #13
 800cf9e:	d110      	bne.n	800cfc2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cfa0:	f06f 030c 	mvn.w	r3, #12
 800cfa4:	e00e      	b.n	800cfc4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cfa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfaa:	f113 0f0d 	cmn.w	r3, #13
 800cfae:	d102      	bne.n	800cfb6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cfb0:	f06f 030c 	mvn.w	r3, #12
 800cfb4:	e006      	b.n	800cfc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800cfbc:	f06f 0304 	mvn.w	r3, #4
 800cfc0:	e000      	b.n	800cfc4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd90      	pop	{r4, r7, pc}
 800cfcc:	08017758 	.word	0x08017758
 800cfd0:	08017c68 	.word	0x08017c68
 800cfd4:	0801779c 	.word	0x0801779c

0800cfd8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cfe0:	e007      	b.n	800cff2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f80a 	bl	800d002 <tcp_seg_free>
    seg = next;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1f4      	bne.n	800cfe2 <tcp_segs_free+0xa>
  }
}
 800cff8:	bf00      	nop
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00c      	beq.n	800d02a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d004      	beq.n	800d022 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fe fb6b 	bl	800b6f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	2003      	movs	r0, #3
 800d026:	f7fd fcc3 	bl	800a9b0 <memp_free>
  }
}
 800d02a:	bf00      	nop
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
	...

0800d034 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <tcp_seg_copy+0x1c>
 800d042:	4b0f      	ldr	r3, [pc, #60]	@ (800d080 <tcp_seg_copy+0x4c>)
 800d044:	f240 6282 	movw	r2, #1666	@ 0x682
 800d048:	490e      	ldr	r1, [pc, #56]	@ (800d084 <tcp_seg_copy+0x50>)
 800d04a:	480f      	ldr	r0, [pc, #60]	@ (800d088 <tcp_seg_copy+0x54>)
 800d04c:	f008 f892 	bl	8015174 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d050:	2003      	movs	r0, #3
 800d052:	f7fd fc37 	bl	800a8c4 <memp_malloc>
 800d056:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <tcp_seg_copy+0x2e>
    return NULL;
 800d05e:	2300      	movs	r3, #0
 800d060:	e00a      	b.n	800d078 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d062:	2210      	movs	r2, #16
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f008 f9c7 	bl	80153fa <memcpy>
  pbuf_ref(cseg->p);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	4618      	mov	r0, r3
 800d072:	f7fe fbe7 	bl	800b844 <pbuf_ref>
  return cseg;
 800d076:	68fb      	ldr	r3, [r7, #12]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	08017758 	.word	0x08017758
 800d084:	08017cac 	.word	0x08017cac
 800d088:	0801779c 	.word	0x0801779c

0800d08c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d109      	bne.n	800d0b4 <tcp_recv_null+0x28>
 800d0a0:	4b12      	ldr	r3, [pc, #72]	@ (800d0ec <tcp_recv_null+0x60>)
 800d0a2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d0a6:	4912      	ldr	r1, [pc, #72]	@ (800d0f0 <tcp_recv_null+0x64>)
 800d0a8:	4812      	ldr	r0, [pc, #72]	@ (800d0f4 <tcp_recv_null+0x68>)
 800d0aa:	f008 f863 	bl	8015174 <iprintf>
 800d0ae:	f06f 030f 	mvn.w	r3, #15
 800d0b2:	e016      	b.n	800d0e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d009      	beq.n	800d0ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	891b      	ldrh	r3, [r3, #8]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	68b8      	ldr	r0, [r7, #8]
 800d0c2:	f7ff fad1 	bl	800c668 <tcp_recved>
    pbuf_free(p);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7fe fb16 	bl	800b6f8 <pbuf_free>
 800d0cc:	e008      	b.n	800d0e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d0ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d104      	bne.n	800d0e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d0d6:	68b8      	ldr	r0, [r7, #8]
 800d0d8:	f7fe ffb8 	bl	800c04c <tcp_close>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	e000      	b.n	800d0e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	08017758 	.word	0x08017758
 800d0f0:	08017cc8 	.word	0x08017cc8
 800d0f4:	0801779c 	.word	0x0801779c

0800d0f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d106:	2b00      	cmp	r3, #0
 800d108:	db01      	blt.n	800d10e <tcp_kill_prio+0x16>
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	e000      	b.n	800d110 <tcp_kill_prio+0x18>
 800d10e:	237f      	movs	r3, #127	@ 0x7f
 800d110:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d112:	7afb      	ldrb	r3, [r7, #11]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d034      	beq.n	800d182 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d118:	7afb      	ldrb	r3, [r7, #11]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d126:	4b19      	ldr	r3, [pc, #100]	@ (800d18c <tcp_kill_prio+0x94>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	617b      	str	r3, [r7, #20]
 800d12c:	e01f      	b.n	800d16e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	7d5b      	ldrb	r3, [r3, #21]
 800d132:	7afa      	ldrb	r2, [r7, #11]
 800d134:	429a      	cmp	r2, r3
 800d136:	d80c      	bhi.n	800d152 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d13c:	7afa      	ldrb	r2, [r7, #11]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d112      	bne.n	800d168 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d142:	4b13      	ldr	r3, [pc, #76]	@ (800d190 <tcp_kill_prio+0x98>)
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d80a      	bhi.n	800d168 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d152:	4b0f      	ldr	r3, [pc, #60]	@ (800d190 <tcp_kill_prio+0x98>)
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	6a1b      	ldr	r3, [r3, #32]
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	7d5b      	ldrb	r3, [r3, #21]
 800d166:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	617b      	str	r3, [r7, #20]
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1dc      	bne.n	800d12e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d004      	beq.n	800d184 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d17a:	6938      	ldr	r0, [r7, #16]
 800d17c:	f7ff f8ac 	bl	800c2d8 <tcp_abort>
 800d180:	e000      	b.n	800d184 <tcp_kill_prio+0x8c>
    return;
 800d182:	bf00      	nop
  }
}
 800d184:	3718      	adds	r7, #24
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	2000be70 	.word	0x2000be70
 800d190:	2000be64 	.word	0x2000be64

0800d194 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4603      	mov	r3, r0
 800d19c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d19e:	79fb      	ldrb	r3, [r7, #7]
 800d1a0:	2b08      	cmp	r3, #8
 800d1a2:	d009      	beq.n	800d1b8 <tcp_kill_state+0x24>
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	d006      	beq.n	800d1b8 <tcp_kill_state+0x24>
 800d1aa:	4b1a      	ldr	r3, [pc, #104]	@ (800d214 <tcp_kill_state+0x80>)
 800d1ac:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d1b0:	4919      	ldr	r1, [pc, #100]	@ (800d218 <tcp_kill_state+0x84>)
 800d1b2:	481a      	ldr	r0, [pc, #104]	@ (800d21c <tcp_kill_state+0x88>)
 800d1b4:	f007 ffde 	bl	8015174 <iprintf>

  inactivity = 0;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1c0:	4b17      	ldr	r3, [pc, #92]	@ (800d220 <tcp_kill_state+0x8c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	617b      	str	r3, [r7, #20]
 800d1c6:	e017      	b.n	800d1f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	7d1b      	ldrb	r3, [r3, #20]
 800d1cc:	79fa      	ldrb	r2, [r7, #7]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d10f      	bne.n	800d1f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d1d2:	4b14      	ldr	r3, [pc, #80]	@ (800d224 <tcp_kill_state+0x90>)
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	6a1b      	ldr	r3, [r3, #32]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d807      	bhi.n	800d1f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d1e2:	4b10      	ldr	r3, [pc, #64]	@ (800d224 <tcp_kill_state+0x90>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1e4      	bne.n	800d1c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d003      	beq.n	800d20c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d204:	2100      	movs	r1, #0
 800d206:	6938      	ldr	r0, [r7, #16]
 800d208:	f7fe ffa8 	bl	800c15c <tcp_abandon>
  }
}
 800d20c:	bf00      	nop
 800d20e:	3718      	adds	r7, #24
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	08017758 	.word	0x08017758
 800d218:	08017ce4 	.word	0x08017ce4
 800d21c:	0801779c 	.word	0x0801779c
 800d220:	2000be70 	.word	0x2000be70
 800d224:	2000be64 	.word	0x2000be64

0800d228 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d232:	2300      	movs	r3, #0
 800d234:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d236:	4b12      	ldr	r3, [pc, #72]	@ (800d280 <tcp_kill_timewait+0x58>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	e012      	b.n	800d264 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d23e:	4b11      	ldr	r3, [pc, #68]	@ (800d284 <tcp_kill_timewait+0x5c>)
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d807      	bhi.n	800d25e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d24e:	4b0d      	ldr	r3, [pc, #52]	@ (800d284 <tcp_kill_timewait+0x5c>)
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1e9      	bne.n	800d23e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d270:	68b8      	ldr	r0, [r7, #8]
 800d272:	f7ff f831 	bl	800c2d8 <tcp_abort>
  }
}
 800d276:	bf00      	nop
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	2000be74 	.word	0x2000be74
 800d284:	2000be64 	.word	0x2000be64

0800d288 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d28e:	4b10      	ldr	r3, [pc, #64]	@ (800d2d0 <tcp_handle_closepend+0x48>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d294:	e014      	b.n	800d2c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	8b5b      	ldrh	r3, [r3, #26]
 800d2a0:	f003 0308 	and.w	r3, r3, #8
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d009      	beq.n	800d2bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	8b5b      	ldrh	r3, [r3, #26]
 800d2ac:	f023 0308 	bic.w	r3, r3, #8
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7fe fe5e 	bl	800bf78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e7      	bne.n	800d296 <tcp_handle_closepend+0xe>
  }
}
 800d2c6:	bf00      	nop
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	2000be70 	.word	0x2000be70

0800d2d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d2de:	2001      	movs	r0, #1
 800d2e0:	f7fd faf0 	bl	800a8c4 <memp_malloc>
 800d2e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d126      	bne.n	800d33a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d2ec:	f7ff ffcc 	bl	800d288 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d2f0:	f7ff ff9a 	bl	800d228 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d2f4:	2001      	movs	r0, #1
 800d2f6:	f7fd fae5 	bl	800a8c4 <memp_malloc>
 800d2fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d11b      	bne.n	800d33a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d302:	2009      	movs	r0, #9
 800d304:	f7ff ff46 	bl	800d194 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d308:	2001      	movs	r0, #1
 800d30a:	f7fd fadb 	bl	800a8c4 <memp_malloc>
 800d30e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d111      	bne.n	800d33a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d316:	2008      	movs	r0, #8
 800d318:	f7ff ff3c 	bl	800d194 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d31c:	2001      	movs	r0, #1
 800d31e:	f7fd fad1 	bl	800a8c4 <memp_malloc>
 800d322:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d107      	bne.n	800d33a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff fee3 	bl	800d0f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d332:	2001      	movs	r0, #1
 800d334:	f7fd fac6 	bl	800a8c4 <memp_malloc>
 800d338:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d03f      	beq.n	800d3c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d340:	229c      	movs	r2, #156	@ 0x9c
 800d342:	2100      	movs	r1, #0
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f007 ff7a 	bl	801523e <memset>
    pcb->prio = prio;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	79fa      	ldrb	r2, [r7, #7]
 800d34e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d356:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d360:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	22ff      	movs	r2, #255	@ 0xff
 800d36e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d376:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2206      	movs	r2, #6
 800d37c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2206      	movs	r2, #6
 800d384:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d38c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2201      	movs	r2, #1
 800d392:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d396:	4b0d      	ldr	r3, [pc, #52]	@ (800d3cc <tcp_alloc+0xf8>)
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d39e:	4b0c      	ldr	r3, [pc, #48]	@ (800d3d0 <tcp_alloc+0xfc>)
 800d3a0:	781a      	ldrb	r2, [r3, #0]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d3ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	4a08      	ldr	r2, [pc, #32]	@ (800d3d4 <tcp_alloc+0x100>)
 800d3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	4a07      	ldr	r2, [pc, #28]	@ (800d3d8 <tcp_alloc+0x104>)
 800d3bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	2000be64 	.word	0x2000be64
 800d3d0:	2000be7a 	.word	0x2000be7a
 800d3d4:	0800d08d 	.word	0x0800d08d
 800d3d8:	006ddd00 	.word	0x006ddd00

0800d3dc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d3e6:	2040      	movs	r0, #64	@ 0x40
 800d3e8:	f7ff ff74 	bl	800d2d4 <tcp_alloc>
 800d3ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	683a      	ldr	r2, [r7, #0]
 800d40c:	611a      	str	r2, [r3, #16]
  }
}
 800d40e:	bf00      	nop
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
	...

0800d41c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00e      	beq.n	800d44a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	7d1b      	ldrb	r3, [r3, #20]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d106      	bne.n	800d442 <tcp_recv+0x26>
 800d434:	4b07      	ldr	r3, [pc, #28]	@ (800d454 <tcp_recv+0x38>)
 800d436:	f240 72df 	movw	r2, #2015	@ 0x7df
 800d43a:	4907      	ldr	r1, [pc, #28]	@ (800d458 <tcp_recv+0x3c>)
 800d43c:	4807      	ldr	r0, [pc, #28]	@ (800d45c <tcp_recv+0x40>)
 800d43e:	f007 fe99 	bl	8015174 <iprintf>
    pcb->recv = recv;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800d44a:	bf00      	nop
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	08017758 	.word	0x08017758
 800d458:	08017cf4 	.word	0x08017cf4
 800d45c:	0801779c 	.word	0x0801779c

0800d460 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00e      	beq.n	800d48e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	7d1b      	ldrb	r3, [r3, #20]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d106      	bne.n	800d486 <tcp_sent+0x26>
 800d478:	4b07      	ldr	r3, [pc, #28]	@ (800d498 <tcp_sent+0x38>)
 800d47a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800d47e:	4907      	ldr	r1, [pc, #28]	@ (800d49c <tcp_sent+0x3c>)
 800d480:	4807      	ldr	r0, [pc, #28]	@ (800d4a0 <tcp_sent+0x40>)
 800d482:	f007 fe77 	bl	8015174 <iprintf>
    pcb->sent = sent;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	683a      	ldr	r2, [r7, #0]
 800d48a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800d48e:	bf00      	nop
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	08017758 	.word	0x08017758
 800d49c:	08017d1c 	.word	0x08017d1c
 800d4a0:	0801779c 	.word	0x0801779c

0800d4a4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d00e      	beq.n	800d4d2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	7d1b      	ldrb	r3, [r3, #20]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d106      	bne.n	800d4ca <tcp_err+0x26>
 800d4bc:	4b07      	ldr	r3, [pc, #28]	@ (800d4dc <tcp_err+0x38>)
 800d4be:	f640 020d 	movw	r2, #2061	@ 0x80d
 800d4c2:	4907      	ldr	r1, [pc, #28]	@ (800d4e0 <tcp_err+0x3c>)
 800d4c4:	4807      	ldr	r0, [pc, #28]	@ (800d4e4 <tcp_err+0x40>)
 800d4c6:	f007 fe55 	bl	8015174 <iprintf>
    pcb->errf = err;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800d4d2:	bf00      	nop
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	08017758 	.word	0x08017758
 800d4e0:	08017d44 	.word	0x08017d44
 800d4e4:	0801779c 	.word	0x0801779c

0800d4e8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d008      	beq.n	800d50a <tcp_accept+0x22>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	7d1b      	ldrb	r3, [r3, #20]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d104      	bne.n	800d50a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	619a      	str	r2, [r3, #24]
  }
}
 800d50a:	bf00      	nop
 800d50c:	3714      	adds	r7, #20
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
	...

0800d518 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	4613      	mov	r3, r2
 800d524:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d107      	bne.n	800d53c <tcp_poll+0x24>
 800d52c:	4b0e      	ldr	r3, [pc, #56]	@ (800d568 <tcp_poll+0x50>)
 800d52e:	f640 023d 	movw	r2, #2109	@ 0x83d
 800d532:	490e      	ldr	r1, [pc, #56]	@ (800d56c <tcp_poll+0x54>)
 800d534:	480e      	ldr	r0, [pc, #56]	@ (800d570 <tcp_poll+0x58>)
 800d536:	f007 fe1d 	bl	8015174 <iprintf>
 800d53a:	e011      	b.n	800d560 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	7d1b      	ldrb	r3, [r3, #20]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d106      	bne.n	800d552 <tcp_poll+0x3a>
 800d544:	4b08      	ldr	r3, [pc, #32]	@ (800d568 <tcp_poll+0x50>)
 800d546:	f640 023e 	movw	r2, #2110	@ 0x83e
 800d54a:	490a      	ldr	r1, [pc, #40]	@ (800d574 <tcp_poll+0x5c>)
 800d54c:	4808      	ldr	r0, [pc, #32]	@ (800d570 <tcp_poll+0x58>)
 800d54e:	f007 fe11 	bl	8015174 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	79fa      	ldrb	r2, [r7, #7]
 800d55e:	775a      	strb	r2, [r3, #29]
}
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	08017758 	.word	0x08017758
 800d56c:	08017d6c 	.word	0x08017d6c
 800d570:	0801779c 	.word	0x0801779c
 800d574:	08017d84 	.word	0x08017d84

0800d578 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d107      	bne.n	800d596 <tcp_pcb_purge+0x1e>
 800d586:	4b21      	ldr	r3, [pc, #132]	@ (800d60c <tcp_pcb_purge+0x94>)
 800d588:	f640 0251 	movw	r2, #2129	@ 0x851
 800d58c:	4920      	ldr	r1, [pc, #128]	@ (800d610 <tcp_pcb_purge+0x98>)
 800d58e:	4821      	ldr	r0, [pc, #132]	@ (800d614 <tcp_pcb_purge+0x9c>)
 800d590:	f007 fdf0 	bl	8015174 <iprintf>
 800d594:	e037      	b.n	800d606 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	7d1b      	ldrb	r3, [r3, #20]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d033      	beq.n	800d606 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d5a2:	2b0a      	cmp	r3, #10
 800d5a4:	d02f      	beq.n	800d606 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d02b      	beq.n	800d606 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d007      	beq.n	800d5c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe f89c 	bl	800b6f8 <pbuf_free>
      pcb->refused_data = NULL;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f986 	bl	800d8e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d5da:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff fcf9 	bl	800cfd8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7ff fcf4 	bl	800cfd8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	08017758 	.word	0x08017758
 800d610:	08017da4 	.word	0x08017da4
 800d614:	0801779c 	.word	0x0801779c

0800d618 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d106      	bne.n	800d636 <tcp_pcb_remove+0x1e>
 800d628:	4b3e      	ldr	r3, [pc, #248]	@ (800d724 <tcp_pcb_remove+0x10c>)
 800d62a:	f640 0283 	movw	r2, #2179	@ 0x883
 800d62e:	493e      	ldr	r1, [pc, #248]	@ (800d728 <tcp_pcb_remove+0x110>)
 800d630:	483e      	ldr	r0, [pc, #248]	@ (800d72c <tcp_pcb_remove+0x114>)
 800d632:	f007 fd9f 	bl	8015174 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d106      	bne.n	800d64a <tcp_pcb_remove+0x32>
 800d63c:	4b39      	ldr	r3, [pc, #228]	@ (800d724 <tcp_pcb_remove+0x10c>)
 800d63e:	f640 0284 	movw	r2, #2180	@ 0x884
 800d642:	493b      	ldr	r1, [pc, #236]	@ (800d730 <tcp_pcb_remove+0x118>)
 800d644:	4839      	ldr	r0, [pc, #228]	@ (800d72c <tcp_pcb_remove+0x114>)
 800d646:	f007 fd95 	bl	8015174 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d105      	bne.n	800d660 <tcp_pcb_remove+0x48>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	68da      	ldr	r2, [r3, #12]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	e013      	b.n	800d688 <tcp_pcb_remove+0x70>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	60fb      	str	r3, [r7, #12]
 800d666:	e00c      	b.n	800d682 <tcp_pcb_remove+0x6a>
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d104      	bne.n	800d67c <tcp_pcb_remove+0x64>
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	68da      	ldr	r2, [r3, #12]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	60da      	str	r2, [r3, #12]
 800d67a:	e005      	b.n	800d688 <tcp_pcb_remove+0x70>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1ef      	bne.n	800d668 <tcp_pcb_remove+0x50>
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	2200      	movs	r2, #0
 800d68c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d68e:	6838      	ldr	r0, [r7, #0]
 800d690:	f7ff ff72 	bl	800d578 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	7d1b      	ldrb	r3, [r3, #20]
 800d698:	2b0a      	cmp	r3, #10
 800d69a:	d013      	beq.n	800d6c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d00f      	beq.n	800d6c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	8b5b      	ldrh	r3, [r3, #26]
 800d6a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d009      	beq.n	800d6c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	8b5b      	ldrh	r3, [r3, #26]
 800d6b4:	f043 0302 	orr.w	r3, r3, #2
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d6be:	6838      	ldr	r0, [r7, #0]
 800d6c0:	f003 fbc0 	bl	8010e44 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	7d1b      	ldrb	r3, [r3, #20]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d020      	beq.n	800d70e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d006      	beq.n	800d6e2 <tcp_pcb_remove+0xca>
 800d6d4:	4b13      	ldr	r3, [pc, #76]	@ (800d724 <tcp_pcb_remove+0x10c>)
 800d6d6:	f640 0293 	movw	r2, #2195	@ 0x893
 800d6da:	4916      	ldr	r1, [pc, #88]	@ (800d734 <tcp_pcb_remove+0x11c>)
 800d6dc:	4813      	ldr	r0, [pc, #76]	@ (800d72c <tcp_pcb_remove+0x114>)
 800d6de:	f007 fd49 	bl	8015174 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d006      	beq.n	800d6f8 <tcp_pcb_remove+0xe0>
 800d6ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d724 <tcp_pcb_remove+0x10c>)
 800d6ec:	f640 0294 	movw	r2, #2196	@ 0x894
 800d6f0:	4911      	ldr	r1, [pc, #68]	@ (800d738 <tcp_pcb_remove+0x120>)
 800d6f2:	480e      	ldr	r0, [pc, #56]	@ (800d72c <tcp_pcb_remove+0x114>)
 800d6f4:	f007 fd3e 	bl	8015174 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d006      	beq.n	800d70e <tcp_pcb_remove+0xf6>
 800d700:	4b08      	ldr	r3, [pc, #32]	@ (800d724 <tcp_pcb_remove+0x10c>)
 800d702:	f640 0296 	movw	r2, #2198	@ 0x896
 800d706:	490d      	ldr	r1, [pc, #52]	@ (800d73c <tcp_pcb_remove+0x124>)
 800d708:	4808      	ldr	r0, [pc, #32]	@ (800d72c <tcp_pcb_remove+0x114>)
 800d70a:	f007 fd33 	bl	8015174 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2200      	movs	r2, #0
 800d712:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	2200      	movs	r2, #0
 800d718:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d71a:	bf00      	nop
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	08017758 	.word	0x08017758
 800d728:	08017dc0 	.word	0x08017dc0
 800d72c:	0801779c 	.word	0x0801779c
 800d730:	08017ddc 	.word	0x08017ddc
 800d734:	08017dfc 	.word	0x08017dfc
 800d738:	08017e14 	.word	0x08017e14
 800d73c:	08017e30 	.word	0x08017e30

0800d740 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <tcp_next_iss+0x1c>
 800d74e:	4b0a      	ldr	r3, [pc, #40]	@ (800d778 <tcp_next_iss+0x38>)
 800d750:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d754:	4909      	ldr	r1, [pc, #36]	@ (800d77c <tcp_next_iss+0x3c>)
 800d756:	480a      	ldr	r0, [pc, #40]	@ (800d780 <tcp_next_iss+0x40>)
 800d758:	f007 fd0c 	bl	8015174 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d75c:	4b09      	ldr	r3, [pc, #36]	@ (800d784 <tcp_next_iss+0x44>)
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	4b09      	ldr	r3, [pc, #36]	@ (800d788 <tcp_next_iss+0x48>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4413      	add	r3, r2
 800d766:	4a07      	ldr	r2, [pc, #28]	@ (800d784 <tcp_next_iss+0x44>)
 800d768:	6013      	str	r3, [r2, #0]
  return iss;
 800d76a:	4b06      	ldr	r3, [pc, #24]	@ (800d784 <tcp_next_iss+0x44>)
 800d76c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	08017758 	.word	0x08017758
 800d77c:	08017e48 	.word	0x08017e48
 800d780:	0801779c 	.word	0x0801779c
 800d784:	20000028 	.word	0x20000028
 800d788:	2000be64 	.word	0x2000be64

0800d78c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d106      	bne.n	800d7ae <tcp_eff_send_mss_netif+0x22>
 800d7a0:	4b14      	ldr	r3, [pc, #80]	@ (800d7f4 <tcp_eff_send_mss_netif+0x68>)
 800d7a2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d7a6:	4914      	ldr	r1, [pc, #80]	@ (800d7f8 <tcp_eff_send_mss_netif+0x6c>)
 800d7a8:	4814      	ldr	r0, [pc, #80]	@ (800d7fc <tcp_eff_send_mss_netif+0x70>)
 800d7aa:	f007 fce3 	bl	8015174 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d101      	bne.n	800d7b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d7b4:	89fb      	ldrh	r3, [r7, #14]
 800d7b6:	e019      	b.n	800d7ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d7bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d7be:	8afb      	ldrh	r3, [r7, #22]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d012      	beq.n	800d7ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d7c4:	2328      	movs	r3, #40	@ 0x28
 800d7c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d7c8:	8afa      	ldrh	r2, [r7, #22]
 800d7ca:	8abb      	ldrh	r3, [r7, #20]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d904      	bls.n	800d7da <tcp_eff_send_mss_netif+0x4e>
 800d7d0:	8afa      	ldrh	r2, [r7, #22]
 800d7d2:	8abb      	ldrh	r3, [r7, #20]
 800d7d4:	1ad3      	subs	r3, r2, r3
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	e000      	b.n	800d7dc <tcp_eff_send_mss_netif+0x50>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d7de:	8a7a      	ldrh	r2, [r7, #18]
 800d7e0:	89fb      	ldrh	r3, [r7, #14]
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	bf28      	it	cs
 800d7e6:	4613      	movcs	r3, r2
 800d7e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d7ea:	89fb      	ldrh	r3, [r7, #14]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3718      	adds	r7, #24
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	08017758 	.word	0x08017758
 800d7f8:	08017e64 	.word	0x08017e64
 800d7fc:	0801779c 	.word	0x0801779c

0800d800 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d119      	bne.n	800d848 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d814:	4b10      	ldr	r3, [pc, #64]	@ (800d858 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d816:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d81a:	4910      	ldr	r1, [pc, #64]	@ (800d85c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d81c:	4810      	ldr	r0, [pc, #64]	@ (800d860 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d81e:	f007 fca9 	bl	8015174 <iprintf>

  while (pcb != NULL) {
 800d822:	e011      	b.n	800d848 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d108      	bne.n	800d842 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f7fe fd4e 	bl	800c2d8 <tcp_abort>
      pcb = next;
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	60fb      	str	r3, [r7, #12]
 800d840:	e002      	b.n	800d848 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1ea      	bne.n	800d824 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d84e:	bf00      	nop
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	08017758 	.word	0x08017758
 800d85c:	08017e8c 	.word	0x08017e8c
 800d860:	0801779c 	.word	0x0801779c

0800d864 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d02a      	beq.n	800d8ca <tcp_netif_ip_addr_changed+0x66>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d026      	beq.n	800d8ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d87c:	4b15      	ldr	r3, [pc, #84]	@ (800d8d4 <tcp_netif_ip_addr_changed+0x70>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4619      	mov	r1, r3
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7ff ffbc 	bl	800d800 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d888:	4b13      	ldr	r3, [pc, #76]	@ (800d8d8 <tcp_netif_ip_addr_changed+0x74>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4619      	mov	r1, r3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7ff ffb6 	bl	800d800 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d017      	beq.n	800d8ca <tcp_netif_ip_addr_changed+0x66>
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d013      	beq.n	800d8ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d8dc <tcp_netif_ip_addr_changed+0x78>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	e00c      	b.n	800d8c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d103      	bne.n	800d8be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1ef      	bne.n	800d8aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d8ca:	bf00      	nop
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	2000be70 	.word	0x2000be70
 800d8d8:	2000be68 	.word	0x2000be68
 800d8dc:	2000be6c 	.word	0x2000be6c

0800d8e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d007      	beq.n	800d900 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff fb6f 	bl	800cfd8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d900:	bf00      	nop
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d908:	b590      	push	{r4, r7, lr}
 800d90a:	b08d      	sub	sp, #52	@ 0x34
 800d90c:	af04      	add	r7, sp, #16
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d105      	bne.n	800d924 <tcp_input+0x1c>
 800d918:	4b9b      	ldr	r3, [pc, #620]	@ (800db88 <tcp_input+0x280>)
 800d91a:	2283      	movs	r2, #131	@ 0x83
 800d91c:	499b      	ldr	r1, [pc, #620]	@ (800db8c <tcp_input+0x284>)
 800d91e:	489c      	ldr	r0, [pc, #624]	@ (800db90 <tcp_input+0x288>)
 800d920:	f007 fc28 	bl	8015174 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	4a9a      	ldr	r2, [pc, #616]	@ (800db94 <tcp_input+0x28c>)
 800d92a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	895b      	ldrh	r3, [r3, #10]
 800d930:	2b13      	cmp	r3, #19
 800d932:	f240 83d1 	bls.w	800e0d8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d936:	4b98      	ldr	r3, [pc, #608]	@ (800db98 <tcp_input+0x290>)
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	4a97      	ldr	r2, [pc, #604]	@ (800db98 <tcp_input+0x290>)
 800d93c:	6812      	ldr	r2, [r2, #0]
 800d93e:	4611      	mov	r1, r2
 800d940:	4618      	mov	r0, r3
 800d942:	f006 f9df 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f040 83c7 	bne.w	800e0dc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d94e:	4b92      	ldr	r3, [pc, #584]	@ (800db98 <tcp_input+0x290>)
 800d950:	695b      	ldr	r3, [r3, #20]
 800d952:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d956:	2be0      	cmp	r3, #224	@ 0xe0
 800d958:	f000 83c0 	beq.w	800e0dc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d95c:	4b8d      	ldr	r3, [pc, #564]	@ (800db94 <tcp_input+0x28c>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	899b      	ldrh	r3, [r3, #12]
 800d962:	b29b      	uxth	r3, r3
 800d964:	4618      	mov	r0, r3
 800d966:	f7fc fad9 	bl	8009f1c <lwip_htons>
 800d96a:	4603      	mov	r3, r0
 800d96c:	0b1b      	lsrs	r3, r3, #12
 800d96e:	b29b      	uxth	r3, r3
 800d970:	b2db      	uxtb	r3, r3
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d976:	7cbb      	ldrb	r3, [r7, #18]
 800d978:	2b13      	cmp	r3, #19
 800d97a:	f240 83b1 	bls.w	800e0e0 <tcp_input+0x7d8>
 800d97e:	7cbb      	ldrb	r3, [r7, #18]
 800d980:	b29a      	uxth	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	891b      	ldrh	r3, [r3, #8]
 800d986:	429a      	cmp	r2, r3
 800d988:	f200 83aa 	bhi.w	800e0e0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d98c:	7cbb      	ldrb	r3, [r7, #18]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	3b14      	subs	r3, #20
 800d992:	b29a      	uxth	r2, r3
 800d994:	4b81      	ldr	r3, [pc, #516]	@ (800db9c <tcp_input+0x294>)
 800d996:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d998:	4b81      	ldr	r3, [pc, #516]	@ (800dba0 <tcp_input+0x298>)
 800d99a:	2200      	movs	r2, #0
 800d99c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	895a      	ldrh	r2, [r3, #10]
 800d9a2:	7cbb      	ldrb	r3, [r7, #18]
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d309      	bcc.n	800d9be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d9aa:	4b7c      	ldr	r3, [pc, #496]	@ (800db9c <tcp_input+0x294>)
 800d9ac:	881a      	ldrh	r2, [r3, #0]
 800d9ae:	4b7d      	ldr	r3, [pc, #500]	@ (800dba4 <tcp_input+0x29c>)
 800d9b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d9b2:	7cbb      	ldrb	r3, [r7, #18]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7fd fe18 	bl	800b5ec <pbuf_remove_header>
 800d9bc:	e04e      	b.n	800da5c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d105      	bne.n	800d9d2 <tcp_input+0xca>
 800d9c6:	4b70      	ldr	r3, [pc, #448]	@ (800db88 <tcp_input+0x280>)
 800d9c8:	22c2      	movs	r2, #194	@ 0xc2
 800d9ca:	4977      	ldr	r1, [pc, #476]	@ (800dba8 <tcp_input+0x2a0>)
 800d9cc:	4870      	ldr	r0, [pc, #448]	@ (800db90 <tcp_input+0x288>)
 800d9ce:	f007 fbd1 	bl	8015174 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d9d2:	2114      	movs	r1, #20
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7fd fe09 	bl	800b5ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	895a      	ldrh	r2, [r3, #10]
 800d9de:	4b71      	ldr	r3, [pc, #452]	@ (800dba4 <tcp_input+0x29c>)
 800d9e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d9e2:	4b6e      	ldr	r3, [pc, #440]	@ (800db9c <tcp_input+0x294>)
 800d9e4:	881a      	ldrh	r2, [r3, #0]
 800d9e6:	4b6f      	ldr	r3, [pc, #444]	@ (800dba4 <tcp_input+0x29c>)
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d9ee:	4b6d      	ldr	r3, [pc, #436]	@ (800dba4 <tcp_input+0x29c>)
 800d9f0:	881b      	ldrh	r3, [r3, #0]
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7fd fdf9 	bl	800b5ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	895b      	ldrh	r3, [r3, #10]
 800da00:	8a3a      	ldrh	r2, [r7, #16]
 800da02:	429a      	cmp	r2, r3
 800da04:	f200 836e 	bhi.w	800e0e4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	4a64      	ldr	r2, [pc, #400]	@ (800dba0 <tcp_input+0x298>)
 800da10:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	8a3a      	ldrh	r2, [r7, #16]
 800da18:	4611      	mov	r1, r2
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fd fde6 	bl	800b5ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	891a      	ldrh	r2, [r3, #8]
 800da24:	8a3b      	ldrh	r3, [r7, #16]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	b29a      	uxth	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	895b      	ldrh	r3, [r3, #10]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d005      	beq.n	800da42 <tcp_input+0x13a>
 800da36:	4b54      	ldr	r3, [pc, #336]	@ (800db88 <tcp_input+0x280>)
 800da38:	22df      	movs	r2, #223	@ 0xdf
 800da3a:	495c      	ldr	r1, [pc, #368]	@ (800dbac <tcp_input+0x2a4>)
 800da3c:	4854      	ldr	r0, [pc, #336]	@ (800db90 <tcp_input+0x288>)
 800da3e:	f007 fb99 	bl	8015174 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	891a      	ldrh	r2, [r3, #8]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	891b      	ldrh	r3, [r3, #8]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d005      	beq.n	800da5c <tcp_input+0x154>
 800da50:	4b4d      	ldr	r3, [pc, #308]	@ (800db88 <tcp_input+0x280>)
 800da52:	22e0      	movs	r2, #224	@ 0xe0
 800da54:	4956      	ldr	r1, [pc, #344]	@ (800dbb0 <tcp_input+0x2a8>)
 800da56:	484e      	ldr	r0, [pc, #312]	@ (800db90 <tcp_input+0x288>)
 800da58:	f007 fb8c 	bl	8015174 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800da5c:	4b4d      	ldr	r3, [pc, #308]	@ (800db94 <tcp_input+0x28c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	881b      	ldrh	r3, [r3, #0]
 800da62:	b29b      	uxth	r3, r3
 800da64:	4a4b      	ldr	r2, [pc, #300]	@ (800db94 <tcp_input+0x28c>)
 800da66:	6814      	ldr	r4, [r2, #0]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fc fa57 	bl	8009f1c <lwip_htons>
 800da6e:	4603      	mov	r3, r0
 800da70:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800da72:	4b48      	ldr	r3, [pc, #288]	@ (800db94 <tcp_input+0x28c>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	885b      	ldrh	r3, [r3, #2]
 800da78:	b29b      	uxth	r3, r3
 800da7a:	4a46      	ldr	r2, [pc, #280]	@ (800db94 <tcp_input+0x28c>)
 800da7c:	6814      	ldr	r4, [r2, #0]
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fc fa4c 	bl	8009f1c <lwip_htons>
 800da84:	4603      	mov	r3, r0
 800da86:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800da88:	4b42      	ldr	r3, [pc, #264]	@ (800db94 <tcp_input+0x28c>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	4a41      	ldr	r2, [pc, #260]	@ (800db94 <tcp_input+0x28c>)
 800da90:	6814      	ldr	r4, [r2, #0]
 800da92:	4618      	mov	r0, r3
 800da94:	f7fc fa57 	bl	8009f46 <lwip_htonl>
 800da98:	4603      	mov	r3, r0
 800da9a:	6063      	str	r3, [r4, #4]
 800da9c:	6863      	ldr	r3, [r4, #4]
 800da9e:	4a45      	ldr	r2, [pc, #276]	@ (800dbb4 <tcp_input+0x2ac>)
 800daa0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800daa2:	4b3c      	ldr	r3, [pc, #240]	@ (800db94 <tcp_input+0x28c>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	4a3a      	ldr	r2, [pc, #232]	@ (800db94 <tcp_input+0x28c>)
 800daaa:	6814      	ldr	r4, [r2, #0]
 800daac:	4618      	mov	r0, r3
 800daae:	f7fc fa4a 	bl	8009f46 <lwip_htonl>
 800dab2:	4603      	mov	r3, r0
 800dab4:	60a3      	str	r3, [r4, #8]
 800dab6:	68a3      	ldr	r3, [r4, #8]
 800dab8:	4a3f      	ldr	r2, [pc, #252]	@ (800dbb8 <tcp_input+0x2b0>)
 800daba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dabc:	4b35      	ldr	r3, [pc, #212]	@ (800db94 <tcp_input+0x28c>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	89db      	ldrh	r3, [r3, #14]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	4a33      	ldr	r2, [pc, #204]	@ (800db94 <tcp_input+0x28c>)
 800dac6:	6814      	ldr	r4, [r2, #0]
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fc fa27 	bl	8009f1c <lwip_htons>
 800dace:	4603      	mov	r3, r0
 800dad0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dad2:	4b30      	ldr	r3, [pc, #192]	@ (800db94 <tcp_input+0x28c>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	899b      	ldrh	r3, [r3, #12]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fc fa1e 	bl	8009f1c <lwip_htons>
 800dae0:	4603      	mov	r3, r0
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	4b34      	ldr	r3, [pc, #208]	@ (800dbbc <tcp_input+0x2b4>)
 800daec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	891a      	ldrh	r2, [r3, #8]
 800daf2:	4b33      	ldr	r3, [pc, #204]	@ (800dbc0 <tcp_input+0x2b8>)
 800daf4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800daf6:	4b31      	ldr	r3, [pc, #196]	@ (800dbbc <tcp_input+0x2b4>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	f003 0303 	and.w	r3, r3, #3
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00c      	beq.n	800db1c <tcp_input+0x214>
    tcplen++;
 800db02:	4b2f      	ldr	r3, [pc, #188]	@ (800dbc0 <tcp_input+0x2b8>)
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	3301      	adds	r3, #1
 800db08:	b29a      	uxth	r2, r3
 800db0a:	4b2d      	ldr	r3, [pc, #180]	@ (800dbc0 <tcp_input+0x2b8>)
 800db0c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	891a      	ldrh	r2, [r3, #8]
 800db12:	4b2b      	ldr	r3, [pc, #172]	@ (800dbc0 <tcp_input+0x2b8>)
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	429a      	cmp	r2, r3
 800db18:	f200 82e6 	bhi.w	800e0e8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800db1c:	2300      	movs	r3, #0
 800db1e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db20:	4b28      	ldr	r3, [pc, #160]	@ (800dbc4 <tcp_input+0x2bc>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	61fb      	str	r3, [r7, #28]
 800db26:	e09d      	b.n	800dc64 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	7d1b      	ldrb	r3, [r3, #20]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d105      	bne.n	800db3c <tcp_input+0x234>
 800db30:	4b15      	ldr	r3, [pc, #84]	@ (800db88 <tcp_input+0x280>)
 800db32:	22fb      	movs	r2, #251	@ 0xfb
 800db34:	4924      	ldr	r1, [pc, #144]	@ (800dbc8 <tcp_input+0x2c0>)
 800db36:	4816      	ldr	r0, [pc, #88]	@ (800db90 <tcp_input+0x288>)
 800db38:	f007 fb1c 	bl	8015174 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	7d1b      	ldrb	r3, [r3, #20]
 800db40:	2b0a      	cmp	r3, #10
 800db42:	d105      	bne.n	800db50 <tcp_input+0x248>
 800db44:	4b10      	ldr	r3, [pc, #64]	@ (800db88 <tcp_input+0x280>)
 800db46:	22fc      	movs	r2, #252	@ 0xfc
 800db48:	4920      	ldr	r1, [pc, #128]	@ (800dbcc <tcp_input+0x2c4>)
 800db4a:	4811      	ldr	r0, [pc, #68]	@ (800db90 <tcp_input+0x288>)
 800db4c:	f007 fb12 	bl	8015174 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	7d1b      	ldrb	r3, [r3, #20]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d105      	bne.n	800db64 <tcp_input+0x25c>
 800db58:	4b0b      	ldr	r3, [pc, #44]	@ (800db88 <tcp_input+0x280>)
 800db5a:	22fd      	movs	r2, #253	@ 0xfd
 800db5c:	491c      	ldr	r1, [pc, #112]	@ (800dbd0 <tcp_input+0x2c8>)
 800db5e:	480c      	ldr	r0, [pc, #48]	@ (800db90 <tcp_input+0x288>)
 800db60:	f007 fb08 	bl	8015174 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	7a1b      	ldrb	r3, [r3, #8]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d033      	beq.n	800dbd4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	7a1a      	ldrb	r2, [r3, #8]
 800db70:	4b09      	ldr	r3, [pc, #36]	@ (800db98 <tcp_input+0x290>)
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db78:	3301      	adds	r3, #1
 800db7a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d029      	beq.n	800dbd4 <tcp_input+0x2cc>
      prev = pcb;
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	61bb      	str	r3, [r7, #24]
      continue;
 800db84:	e06b      	b.n	800dc5e <tcp_input+0x356>
 800db86:	bf00      	nop
 800db88:	08017ec0 	.word	0x08017ec0
 800db8c:	08017ef4 	.word	0x08017ef4
 800db90:	08017f0c 	.word	0x08017f0c
 800db94:	2000be8c 	.word	0x2000be8c
 800db98:	20008d64 	.word	0x20008d64
 800db9c:	2000be90 	.word	0x2000be90
 800dba0:	2000be94 	.word	0x2000be94
 800dba4:	2000be92 	.word	0x2000be92
 800dba8:	08017f34 	.word	0x08017f34
 800dbac:	08017f44 	.word	0x08017f44
 800dbb0:	08017f50 	.word	0x08017f50
 800dbb4:	2000be9c 	.word	0x2000be9c
 800dbb8:	2000bea0 	.word	0x2000bea0
 800dbbc:	2000bea8 	.word	0x2000bea8
 800dbc0:	2000bea6 	.word	0x2000bea6
 800dbc4:	2000be70 	.word	0x2000be70
 800dbc8:	08017f70 	.word	0x08017f70
 800dbcc:	08017f98 	.word	0x08017f98
 800dbd0:	08017fc4 	.word	0x08017fc4
    }

    if (pcb->remote_port == tcphdr->src &&
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	8b1a      	ldrh	r2, [r3, #24]
 800dbd8:	4b72      	ldr	r3, [pc, #456]	@ (800dda4 <tcp_input+0x49c>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d13a      	bne.n	800dc5a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	8ada      	ldrh	r2, [r3, #22]
 800dbe8:	4b6e      	ldr	r3, [pc, #440]	@ (800dda4 <tcp_input+0x49c>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	885b      	ldrh	r3, [r3, #2]
 800dbee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d132      	bne.n	800dc5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	4b6b      	ldr	r3, [pc, #428]	@ (800dda8 <tcp_input+0x4a0>)
 800dbfa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d12c      	bne.n	800dc5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	4b68      	ldr	r3, [pc, #416]	@ (800dda8 <tcp_input+0x4a0>)
 800dc06:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d126      	bne.n	800dc5a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	69fa      	ldr	r2, [r7, #28]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d106      	bne.n	800dc24 <tcp_input+0x31c>
 800dc16:	4b65      	ldr	r3, [pc, #404]	@ (800ddac <tcp_input+0x4a4>)
 800dc18:	f240 120d 	movw	r2, #269	@ 0x10d
 800dc1c:	4964      	ldr	r1, [pc, #400]	@ (800ddb0 <tcp_input+0x4a8>)
 800dc1e:	4865      	ldr	r0, [pc, #404]	@ (800ddb4 <tcp_input+0x4ac>)
 800dc20:	f007 faa8 	bl	8015174 <iprintf>
      if (prev != NULL) {
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00a      	beq.n	800dc40 <tcp_input+0x338>
        prev->next = pcb->next;
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	68da      	ldr	r2, [r3, #12]
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dc32:	4b61      	ldr	r3, [pc, #388]	@ (800ddb8 <tcp_input+0x4b0>)
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dc3a:	4a5f      	ldr	r2, [pc, #380]	@ (800ddb8 <tcp_input+0x4b0>)
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	69fa      	ldr	r2, [r7, #28]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d111      	bne.n	800dc6e <tcp_input+0x366>
 800dc4a:	4b58      	ldr	r3, [pc, #352]	@ (800ddac <tcp_input+0x4a4>)
 800dc4c:	f240 1215 	movw	r2, #277	@ 0x115
 800dc50:	495a      	ldr	r1, [pc, #360]	@ (800ddbc <tcp_input+0x4b4>)
 800dc52:	4858      	ldr	r0, [pc, #352]	@ (800ddb4 <tcp_input+0x4ac>)
 800dc54:	f007 fa8e 	bl	8015174 <iprintf>
      break;
 800dc58:	e009      	b.n	800dc6e <tcp_input+0x366>
    }
    prev = pcb;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	61fb      	str	r3, [r7, #28]
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f47f af5e 	bne.w	800db28 <tcp_input+0x220>
 800dc6c:	e000      	b.n	800dc70 <tcp_input+0x368>
      break;
 800dc6e:	bf00      	nop
  }

  if (pcb == NULL) {
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f040 80aa 	bne.w	800ddcc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc78:	4b51      	ldr	r3, [pc, #324]	@ (800ddc0 <tcp_input+0x4b8>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	61fb      	str	r3, [r7, #28]
 800dc7e:	e03f      	b.n	800dd00 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	7d1b      	ldrb	r3, [r3, #20]
 800dc84:	2b0a      	cmp	r3, #10
 800dc86:	d006      	beq.n	800dc96 <tcp_input+0x38e>
 800dc88:	4b48      	ldr	r3, [pc, #288]	@ (800ddac <tcp_input+0x4a4>)
 800dc8a:	f240 121f 	movw	r2, #287	@ 0x11f
 800dc8e:	494d      	ldr	r1, [pc, #308]	@ (800ddc4 <tcp_input+0x4bc>)
 800dc90:	4848      	ldr	r0, [pc, #288]	@ (800ddb4 <tcp_input+0x4ac>)
 800dc92:	f007 fa6f 	bl	8015174 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	7a1b      	ldrb	r3, [r3, #8]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d009      	beq.n	800dcb2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	7a1a      	ldrb	r2, [r3, #8]
 800dca2:	4b41      	ldr	r3, [pc, #260]	@ (800dda8 <tcp_input+0x4a0>)
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dcaa:	3301      	adds	r3, #1
 800dcac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d122      	bne.n	800dcf8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	8b1a      	ldrh	r2, [r3, #24]
 800dcb6:	4b3b      	ldr	r3, [pc, #236]	@ (800dda4 <tcp_input+0x49c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d11b      	bne.n	800dcfa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	8ada      	ldrh	r2, [r3, #22]
 800dcc6:	4b37      	ldr	r3, [pc, #220]	@ (800dda4 <tcp_input+0x49c>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	885b      	ldrh	r3, [r3, #2]
 800dccc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d113      	bne.n	800dcfa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	685a      	ldr	r2, [r3, #4]
 800dcd6:	4b34      	ldr	r3, [pc, #208]	@ (800dda8 <tcp_input+0x4a0>)
 800dcd8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d10d      	bne.n	800dcfa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	4b31      	ldr	r3, [pc, #196]	@ (800dda8 <tcp_input+0x4a0>)
 800dce4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d107      	bne.n	800dcfa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dcea:	69f8      	ldr	r0, [r7, #28]
 800dcec:	f000 fb56 	bl	800e39c <tcp_timewait_input>
        }
        pbuf_free(p);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7fd fd01 	bl	800b6f8 <pbuf_free>
        return;
 800dcf6:	e1fd      	b.n	800e0f4 <tcp_input+0x7ec>
        continue;
 800dcf8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	61fb      	str	r3, [r7, #28]
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1bc      	bne.n	800dc80 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd0a:	4b2f      	ldr	r3, [pc, #188]	@ (800ddc8 <tcp_input+0x4c0>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	617b      	str	r3, [r7, #20]
 800dd10:	e02a      	b.n	800dd68 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	7a1b      	ldrb	r3, [r3, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00c      	beq.n	800dd34 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	7a1a      	ldrb	r2, [r3, #8]
 800dd1e:	4b22      	ldr	r3, [pc, #136]	@ (800dda8 <tcp_input+0x4a0>)
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd26:	3301      	adds	r3, #1
 800dd28:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d002      	beq.n	800dd34 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	61bb      	str	r3, [r7, #24]
        continue;
 800dd32:	e016      	b.n	800dd62 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	8ada      	ldrh	r2, [r3, #22]
 800dd38:	4b1a      	ldr	r3, [pc, #104]	@ (800dda4 <tcp_input+0x49c>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	885b      	ldrh	r3, [r3, #2]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d10c      	bne.n	800dd5e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	4b17      	ldr	r3, [pc, #92]	@ (800dda8 <tcp_input+0x4a0>)
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d00f      	beq.n	800dd70 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00d      	beq.n	800dd72 <tcp_input+0x46a>
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d009      	beq.n	800dd72 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	617b      	str	r3, [r7, #20]
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1d1      	bne.n	800dd12 <tcp_input+0x40a>
 800dd6e:	e000      	b.n	800dd72 <tcp_input+0x46a>
            break;
 800dd70:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d029      	beq.n	800ddcc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00a      	beq.n	800dd94 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	68da      	ldr	r2, [r3, #12]
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dd86:	4b10      	ldr	r3, [pc, #64]	@ (800ddc8 <tcp_input+0x4c0>)
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dd8e:	4a0e      	ldr	r2, [pc, #56]	@ (800ddc8 <tcp_input+0x4c0>)
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dd94:	6978      	ldr	r0, [r7, #20]
 800dd96:	f000 fa03 	bl	800e1a0 <tcp_listen_input>
      }
      pbuf_free(p);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7fd fcac 	bl	800b6f8 <pbuf_free>
      return;
 800dda0:	e1a8      	b.n	800e0f4 <tcp_input+0x7ec>
 800dda2:	bf00      	nop
 800dda4:	2000be8c 	.word	0x2000be8c
 800dda8:	20008d64 	.word	0x20008d64
 800ddac:	08017ec0 	.word	0x08017ec0
 800ddb0:	08017fec 	.word	0x08017fec
 800ddb4:	08017f0c 	.word	0x08017f0c
 800ddb8:	2000be70 	.word	0x2000be70
 800ddbc:	08018018 	.word	0x08018018
 800ddc0:	2000be74 	.word	0x2000be74
 800ddc4:	08018044 	.word	0x08018044
 800ddc8:	2000be6c 	.word	0x2000be6c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8158 	beq.w	800e084 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ddd4:	4b95      	ldr	r3, [pc, #596]	@ (800e02c <tcp_input+0x724>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	891a      	ldrh	r2, [r3, #8]
 800ddde:	4b93      	ldr	r3, [pc, #588]	@ (800e02c <tcp_input+0x724>)
 800dde0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dde2:	4a92      	ldr	r2, [pc, #584]	@ (800e02c <tcp_input+0x724>)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dde8:	4b91      	ldr	r3, [pc, #580]	@ (800e030 <tcp_input+0x728>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a8f      	ldr	r2, [pc, #572]	@ (800e02c <tcp_input+0x724>)
 800ddee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ddf0:	4b90      	ldr	r3, [pc, #576]	@ (800e034 <tcp_input+0x72c>)
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ddf6:	4b90      	ldr	r3, [pc, #576]	@ (800e038 <tcp_input+0x730>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ddfc:	4b8f      	ldr	r3, [pc, #572]	@ (800e03c <tcp_input+0x734>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800de02:	4b8f      	ldr	r3, [pc, #572]	@ (800e040 <tcp_input+0x738>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	f003 0308 	and.w	r3, r3, #8
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d006      	beq.n	800de1c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	7b5b      	ldrb	r3, [r3, #13]
 800de12:	f043 0301 	orr.w	r3, r3, #1
 800de16:	b2da      	uxtb	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de20:	2b00      	cmp	r3, #0
 800de22:	d017      	beq.n	800de54 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de24:	69f8      	ldr	r0, [r7, #28]
 800de26:	f7ff f85b 	bl	800cee0 <tcp_process_refused_data>
 800de2a:	4603      	mov	r3, r0
 800de2c:	f113 0f0d 	cmn.w	r3, #13
 800de30:	d007      	beq.n	800de42 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00c      	beq.n	800de54 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de3a:	4b82      	ldr	r3, [pc, #520]	@ (800e044 <tcp_input+0x73c>)
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d008      	beq.n	800de54 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de46:	2b00      	cmp	r3, #0
 800de48:	f040 80e3 	bne.w	800e012 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800de4c:	69f8      	ldr	r0, [r7, #28]
 800de4e:	f003 fdff 	bl	8011a50 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800de52:	e0de      	b.n	800e012 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800de54:	4a7c      	ldr	r2, [pc, #496]	@ (800e048 <tcp_input+0x740>)
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800de5a:	69f8      	ldr	r0, [r7, #28]
 800de5c:	f000 fb18 	bl	800e490 <tcp_process>
 800de60:	4603      	mov	r3, r0
 800de62:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800de64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de68:	f113 0f0d 	cmn.w	r3, #13
 800de6c:	f000 80d3 	beq.w	800e016 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800de70:	4b71      	ldr	r3, [pc, #452]	@ (800e038 <tcp_input+0x730>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	f003 0308 	and.w	r3, r3, #8
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d015      	beq.n	800dea8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de82:	2b00      	cmp	r3, #0
 800de84:	d008      	beq.n	800de98 <tcp_input+0x590>
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de8c:	69fa      	ldr	r2, [r7, #28]
 800de8e:	6912      	ldr	r2, [r2, #16]
 800de90:	f06f 010d 	mvn.w	r1, #13
 800de94:	4610      	mov	r0, r2
 800de96:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800de98:	69f9      	ldr	r1, [r7, #28]
 800de9a:	486c      	ldr	r0, [pc, #432]	@ (800e04c <tcp_input+0x744>)
 800de9c:	f7ff fbbc 	bl	800d618 <tcp_pcb_remove>
        tcp_free(pcb);
 800dea0:	69f8      	ldr	r0, [r7, #28]
 800dea2:	f7fd fed5 	bl	800bc50 <tcp_free>
 800dea6:	e0da      	b.n	800e05e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dea8:	2300      	movs	r3, #0
 800deaa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800deac:	4b63      	ldr	r3, [pc, #396]	@ (800e03c <tcp_input+0x734>)
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d01d      	beq.n	800def0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800deb4:	4b61      	ldr	r3, [pc, #388]	@ (800e03c <tcp_input+0x734>)
 800deb6:	881b      	ldrh	r3, [r3, #0]
 800deb8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00a      	beq.n	800deda <tcp_input+0x5d2>
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800deca:	69fa      	ldr	r2, [r7, #28]
 800decc:	6910      	ldr	r0, [r2, #16]
 800dece:	89fa      	ldrh	r2, [r7, #14]
 800ded0:	69f9      	ldr	r1, [r7, #28]
 800ded2:	4798      	blx	r3
 800ded4:	4603      	mov	r3, r0
 800ded6:	74fb      	strb	r3, [r7, #19]
 800ded8:	e001      	b.n	800dede <tcp_input+0x5d6>
 800deda:	2300      	movs	r3, #0
 800dedc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dede:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dee2:	f113 0f0d 	cmn.w	r3, #13
 800dee6:	f000 8098 	beq.w	800e01a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800deea:	4b54      	ldr	r3, [pc, #336]	@ (800e03c <tcp_input+0x734>)
 800deec:	2200      	movs	r2, #0
 800deee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800def0:	69f8      	ldr	r0, [r7, #28]
 800def2:	f000 f915 	bl	800e120 <tcp_input_delayed_close>
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	f040 8090 	bne.w	800e01e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800defe:	4b4d      	ldr	r3, [pc, #308]	@ (800e034 <tcp_input+0x72c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d041      	beq.n	800df8a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d006      	beq.n	800df1c <tcp_input+0x614>
 800df0e:	4b50      	ldr	r3, [pc, #320]	@ (800e050 <tcp_input+0x748>)
 800df10:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800df14:	494f      	ldr	r1, [pc, #316]	@ (800e054 <tcp_input+0x74c>)
 800df16:	4850      	ldr	r0, [pc, #320]	@ (800e058 <tcp_input+0x750>)
 800df18:	f007 f92c 	bl	8015174 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	8b5b      	ldrh	r3, [r3, #26]
 800df20:	f003 0310 	and.w	r3, r3, #16
 800df24:	2b00      	cmp	r3, #0
 800df26:	d008      	beq.n	800df3a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800df28:	4b42      	ldr	r3, [pc, #264]	@ (800e034 <tcp_input+0x72c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fd fbe3 	bl	800b6f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800df32:	69f8      	ldr	r0, [r7, #28]
 800df34:	f7fe f9d0 	bl	800c2d8 <tcp_abort>
            goto aborted;
 800df38:	e091      	b.n	800e05e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00c      	beq.n	800df5e <tcp_input+0x656>
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	6918      	ldr	r0, [r3, #16]
 800df4e:	4b39      	ldr	r3, [pc, #228]	@ (800e034 <tcp_input+0x72c>)
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	2300      	movs	r3, #0
 800df54:	69f9      	ldr	r1, [r7, #28]
 800df56:	47a0      	blx	r4
 800df58:	4603      	mov	r3, r0
 800df5a:	74fb      	strb	r3, [r7, #19]
 800df5c:	e008      	b.n	800df70 <tcp_input+0x668>
 800df5e:	4b35      	ldr	r3, [pc, #212]	@ (800e034 <tcp_input+0x72c>)
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	2300      	movs	r3, #0
 800df64:	69f9      	ldr	r1, [r7, #28]
 800df66:	2000      	movs	r0, #0
 800df68:	f7ff f890 	bl	800d08c <tcp_recv_null>
 800df6c:	4603      	mov	r3, r0
 800df6e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800df70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df74:	f113 0f0d 	cmn.w	r3, #13
 800df78:	d053      	beq.n	800e022 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800df7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d003      	beq.n	800df8a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800df82:	4b2c      	ldr	r3, [pc, #176]	@ (800e034 <tcp_input+0x72c>)
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800df8a:	4b2b      	ldr	r3, [pc, #172]	@ (800e038 <tcp_input+0x730>)
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	f003 0320 	and.w	r3, r3, #32
 800df92:	2b00      	cmp	r3, #0
 800df94:	d030      	beq.n	800dff8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d009      	beq.n	800dfb2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dfa2:	7b5a      	ldrb	r2, [r3, #13]
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dfa8:	f042 0220 	orr.w	r2, r2, #32
 800dfac:	b2d2      	uxtb	r2, r2
 800dfae:	735a      	strb	r2, [r3, #13]
 800dfb0:	e022      	b.n	800dff8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfb6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dfba:	d005      	beq.n	800dfc8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00b      	beq.n	800dfea <tcp_input+0x6e2>
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	6918      	ldr	r0, [r3, #16]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	2200      	movs	r2, #0
 800dfe0:	69f9      	ldr	r1, [r7, #28]
 800dfe2:	47a0      	blx	r4
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	74fb      	strb	r3, [r7, #19]
 800dfe8:	e001      	b.n	800dfee <tcp_input+0x6e6>
 800dfea:	2300      	movs	r3, #0
 800dfec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dfee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dff2:	f113 0f0d 	cmn.w	r3, #13
 800dff6:	d016      	beq.n	800e026 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dff8:	4b13      	ldr	r3, [pc, #76]	@ (800e048 <tcp_input+0x740>)
 800dffa:	2200      	movs	r2, #0
 800dffc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dffe:	69f8      	ldr	r0, [r7, #28]
 800e000:	f000 f88e 	bl	800e120 <tcp_input_delayed_close>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d128      	bne.n	800e05c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e00a:	69f8      	ldr	r0, [r7, #28]
 800e00c:	f002 ff1a 	bl	8010e44 <tcp_output>
 800e010:	e025      	b.n	800e05e <tcp_input+0x756>
        goto aborted;
 800e012:	bf00      	nop
 800e014:	e023      	b.n	800e05e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e016:	bf00      	nop
 800e018:	e021      	b.n	800e05e <tcp_input+0x756>
              goto aborted;
 800e01a:	bf00      	nop
 800e01c:	e01f      	b.n	800e05e <tcp_input+0x756>
          goto aborted;
 800e01e:	bf00      	nop
 800e020:	e01d      	b.n	800e05e <tcp_input+0x756>
            goto aborted;
 800e022:	bf00      	nop
 800e024:	e01b      	b.n	800e05e <tcp_input+0x756>
              goto aborted;
 800e026:	bf00      	nop
 800e028:	e019      	b.n	800e05e <tcp_input+0x756>
 800e02a:	bf00      	nop
 800e02c:	2000be7c 	.word	0x2000be7c
 800e030:	2000be8c 	.word	0x2000be8c
 800e034:	2000beac 	.word	0x2000beac
 800e038:	2000bea9 	.word	0x2000bea9
 800e03c:	2000bea4 	.word	0x2000bea4
 800e040:	2000bea8 	.word	0x2000bea8
 800e044:	2000bea6 	.word	0x2000bea6
 800e048:	2000beb0 	.word	0x2000beb0
 800e04c:	2000be70 	.word	0x2000be70
 800e050:	08017ec0 	.word	0x08017ec0
 800e054:	08018074 	.word	0x08018074
 800e058:	08017f0c 	.word	0x08017f0c
          goto aborted;
 800e05c:	bf00      	nop
    tcp_input_pcb = NULL;
 800e05e:	4b27      	ldr	r3, [pc, #156]	@ (800e0fc <tcp_input+0x7f4>)
 800e060:	2200      	movs	r2, #0
 800e062:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e064:	4b26      	ldr	r3, [pc, #152]	@ (800e100 <tcp_input+0x7f8>)
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e06a:	4b26      	ldr	r3, [pc, #152]	@ (800e104 <tcp_input+0x7fc>)
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d03f      	beq.n	800e0f2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e072:	4b24      	ldr	r3, [pc, #144]	@ (800e104 <tcp_input+0x7fc>)
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	4618      	mov	r0, r3
 800e078:	f7fd fb3e 	bl	800b6f8 <pbuf_free>
      inseg.p = NULL;
 800e07c:	4b21      	ldr	r3, [pc, #132]	@ (800e104 <tcp_input+0x7fc>)
 800e07e:	2200      	movs	r2, #0
 800e080:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e082:	e036      	b.n	800e0f2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e084:	4b20      	ldr	r3, [pc, #128]	@ (800e108 <tcp_input+0x800>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	899b      	ldrh	r3, [r3, #12]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fb ff45 	bl	8009f1c <lwip_htons>
 800e092:	4603      	mov	r3, r0
 800e094:	b2db      	uxtb	r3, r3
 800e096:	f003 0304 	and.w	r3, r3, #4
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d118      	bne.n	800e0d0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e09e:	4b1b      	ldr	r3, [pc, #108]	@ (800e10c <tcp_input+0x804>)
 800e0a0:	6819      	ldr	r1, [r3, #0]
 800e0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e110 <tcp_input+0x808>)
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	4b1a      	ldr	r3, [pc, #104]	@ (800e114 <tcp_input+0x80c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0ae:	4b16      	ldr	r3, [pc, #88]	@ (800e108 <tcp_input+0x800>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0b2:	885b      	ldrh	r3, [r3, #2]
 800e0b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0b6:	4a14      	ldr	r2, [pc, #80]	@ (800e108 <tcp_input+0x800>)
 800e0b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0ba:	8812      	ldrh	r2, [r2, #0]
 800e0bc:	b292      	uxth	r2, r2
 800e0be:	9202      	str	r2, [sp, #8]
 800e0c0:	9301      	str	r3, [sp, #4]
 800e0c2:	4b15      	ldr	r3, [pc, #84]	@ (800e118 <tcp_input+0x810>)
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	4b15      	ldr	r3, [pc, #84]	@ (800e11c <tcp_input+0x814>)
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	f003 fc6e 	bl	80119ac <tcp_rst>
    pbuf_free(p);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7fd fb11 	bl	800b6f8 <pbuf_free>
  return;
 800e0d6:	e00c      	b.n	800e0f2 <tcp_input+0x7ea>
    goto dropped;
 800e0d8:	bf00      	nop
 800e0da:	e006      	b.n	800e0ea <tcp_input+0x7e2>
    goto dropped;
 800e0dc:	bf00      	nop
 800e0de:	e004      	b.n	800e0ea <tcp_input+0x7e2>
    goto dropped;
 800e0e0:	bf00      	nop
 800e0e2:	e002      	b.n	800e0ea <tcp_input+0x7e2>
      goto dropped;
 800e0e4:	bf00      	nop
 800e0e6:	e000      	b.n	800e0ea <tcp_input+0x7e2>
      goto dropped;
 800e0e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7fd fb04 	bl	800b6f8 <pbuf_free>
 800e0f0:	e000      	b.n	800e0f4 <tcp_input+0x7ec>
  return;
 800e0f2:	bf00      	nop
}
 800e0f4:	3724      	adds	r7, #36	@ 0x24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd90      	pop	{r4, r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	2000beb0 	.word	0x2000beb0
 800e100:	2000beac 	.word	0x2000beac
 800e104:	2000be7c 	.word	0x2000be7c
 800e108:	2000be8c 	.word	0x2000be8c
 800e10c:	2000bea0 	.word	0x2000bea0
 800e110:	2000bea6 	.word	0x2000bea6
 800e114:	2000be9c 	.word	0x2000be9c
 800e118:	20008d74 	.word	0x20008d74
 800e11c:	20008d78 	.word	0x20008d78

0800e120 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d106      	bne.n	800e13c <tcp_input_delayed_close+0x1c>
 800e12e:	4b17      	ldr	r3, [pc, #92]	@ (800e18c <tcp_input_delayed_close+0x6c>)
 800e130:	f240 225a 	movw	r2, #602	@ 0x25a
 800e134:	4916      	ldr	r1, [pc, #88]	@ (800e190 <tcp_input_delayed_close+0x70>)
 800e136:	4817      	ldr	r0, [pc, #92]	@ (800e194 <tcp_input_delayed_close+0x74>)
 800e138:	f007 f81c 	bl	8015174 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e13c:	4b16      	ldr	r3, [pc, #88]	@ (800e198 <tcp_input_delayed_close+0x78>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f003 0310 	and.w	r3, r3, #16
 800e144:	2b00      	cmp	r3, #0
 800e146:	d01c      	beq.n	800e182 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	8b5b      	ldrh	r3, [r3, #26]
 800e14c:	f003 0310 	and.w	r3, r3, #16
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10d      	bne.n	800e170 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d008      	beq.n	800e170 <tcp_input_delayed_close+0x50>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	6912      	ldr	r2, [r2, #16]
 800e168:	f06f 010e 	mvn.w	r1, #14
 800e16c:	4610      	mov	r0, r2
 800e16e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e170:	6879      	ldr	r1, [r7, #4]
 800e172:	480a      	ldr	r0, [pc, #40]	@ (800e19c <tcp_input_delayed_close+0x7c>)
 800e174:	f7ff fa50 	bl	800d618 <tcp_pcb_remove>
    tcp_free(pcb);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7fd fd69 	bl	800bc50 <tcp_free>
    return 1;
 800e17e:	2301      	movs	r3, #1
 800e180:	e000      	b.n	800e184 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	08017ec0 	.word	0x08017ec0
 800e190:	08018090 	.word	0x08018090
 800e194:	08017f0c 	.word	0x08017f0c
 800e198:	2000bea9 	.word	0x2000bea9
 800e19c:	2000be70 	.word	0x2000be70

0800e1a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e1a0:	b590      	push	{r4, r7, lr}
 800e1a2:	b08b      	sub	sp, #44	@ 0x2c
 800e1a4:	af04      	add	r7, sp, #16
 800e1a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e1a8:	4b6f      	ldr	r3, [pc, #444]	@ (800e368 <tcp_listen_input+0x1c8>)
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f040 80d2 	bne.w	800e35a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d106      	bne.n	800e1ca <tcp_listen_input+0x2a>
 800e1bc:	4b6b      	ldr	r3, [pc, #428]	@ (800e36c <tcp_listen_input+0x1cc>)
 800e1be:	f240 2281 	movw	r2, #641	@ 0x281
 800e1c2:	496b      	ldr	r1, [pc, #428]	@ (800e370 <tcp_listen_input+0x1d0>)
 800e1c4:	486b      	ldr	r0, [pc, #428]	@ (800e374 <tcp_listen_input+0x1d4>)
 800e1c6:	f006 ffd5 	bl	8015174 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e1ca:	4b67      	ldr	r3, [pc, #412]	@ (800e368 <tcp_listen_input+0x1c8>)
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	f003 0310 	and.w	r3, r3, #16
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d019      	beq.n	800e20a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1d6:	4b68      	ldr	r3, [pc, #416]	@ (800e378 <tcp_listen_input+0x1d8>)
 800e1d8:	6819      	ldr	r1, [r3, #0]
 800e1da:	4b68      	ldr	r3, [pc, #416]	@ (800e37c <tcp_listen_input+0x1dc>)
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4b67      	ldr	r3, [pc, #412]	@ (800e380 <tcp_listen_input+0x1e0>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1e6:	4b67      	ldr	r3, [pc, #412]	@ (800e384 <tcp_listen_input+0x1e4>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1ea:	885b      	ldrh	r3, [r3, #2]
 800e1ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1ee:	4a65      	ldr	r2, [pc, #404]	@ (800e384 <tcp_listen_input+0x1e4>)
 800e1f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1f2:	8812      	ldrh	r2, [r2, #0]
 800e1f4:	b292      	uxth	r2, r2
 800e1f6:	9202      	str	r2, [sp, #8]
 800e1f8:	9301      	str	r3, [sp, #4]
 800e1fa:	4b63      	ldr	r3, [pc, #396]	@ (800e388 <tcp_listen_input+0x1e8>)
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	4b63      	ldr	r3, [pc, #396]	@ (800e38c <tcp_listen_input+0x1ec>)
 800e200:	4602      	mov	r2, r0
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f003 fbd2 	bl	80119ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e208:	e0a9      	b.n	800e35e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e20a:	4b57      	ldr	r3, [pc, #348]	@ (800e368 <tcp_listen_input+0x1c8>)
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	f003 0302 	and.w	r3, r3, #2
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 80a3 	beq.w	800e35e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	7d5b      	ldrb	r3, [r3, #21]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7ff f859 	bl	800d2d4 <tcp_alloc>
 800e222:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d111      	bne.n	800e24e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00a      	beq.n	800e248 <tcp_listen_input+0xa8>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	699b      	ldr	r3, [r3, #24]
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	6910      	ldr	r0, [r2, #16]
 800e23a:	f04f 32ff 	mov.w	r2, #4294967295
 800e23e:	2100      	movs	r1, #0
 800e240:	4798      	blx	r3
 800e242:	4603      	mov	r3, r0
 800e244:	73bb      	strb	r3, [r7, #14]
      return;
 800e246:	e08b      	b.n	800e360 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e248:	23f0      	movs	r3, #240	@ 0xf0
 800e24a:	73bb      	strb	r3, [r7, #14]
      return;
 800e24c:	e088      	b.n	800e360 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e24e:	4b50      	ldr	r3, [pc, #320]	@ (800e390 <tcp_listen_input+0x1f0>)
 800e250:	695a      	ldr	r2, [r3, #20]
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e256:	4b4e      	ldr	r3, [pc, #312]	@ (800e390 <tcp_listen_input+0x1f0>)
 800e258:	691a      	ldr	r2, [r3, #16]
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	8ada      	ldrh	r2, [r3, #22]
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e266:	4b47      	ldr	r3, [pc, #284]	@ (800e384 <tcp_listen_input+0x1e4>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	881b      	ldrh	r3, [r3, #0]
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2203      	movs	r2, #3
 800e276:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e278:	4b41      	ldr	r3, [pc, #260]	@ (800e380 <tcp_listen_input+0x1e0>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	1c5a      	adds	r2, r3, #1
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e28a:	6978      	ldr	r0, [r7, #20]
 800e28c:	f7ff fa58 	bl	800d740 <tcp_next_iss>
 800e290:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	693a      	ldr	r2, [r7, #16]
 800e296:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	693a      	ldr	r2, [r7, #16]
 800e2a2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	693a      	ldr	r2, [r7, #16]
 800e2a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e2aa:	4b35      	ldr	r3, [pc, #212]	@ (800e380 <tcp_listen_input+0x1e0>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	1e5a      	subs	r2, r3, #1
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	691a      	ldr	r2, [r3, #16]
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7a5b      	ldrb	r3, [r3, #9]
 800e2c6:	f003 030c 	and.w	r3, r3, #12
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	7a1a      	ldrb	r2, [r3, #8]
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e2d8:	4b2e      	ldr	r3, [pc, #184]	@ (800e394 <tcp_listen_input+0x1f4>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	60da      	str	r2, [r3, #12]
 800e2e0:	4a2c      	ldr	r2, [pc, #176]	@ (800e394 <tcp_listen_input+0x1f4>)
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	6013      	str	r3, [r2, #0]
 800e2e6:	f003 fd23 	bl	8011d30 <tcp_timer_needed>
 800e2ea:	4b2b      	ldr	r3, [pc, #172]	@ (800e398 <tcp_listen_input+0x1f8>)
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e2f0:	6978      	ldr	r0, [r7, #20]
 800e2f2:	f001 fd8b 	bl	800fe0c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e2f6:	4b23      	ldr	r3, [pc, #140]	@ (800e384 <tcp_listen_input+0x1e4>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	89db      	ldrh	r3, [r3, #14]
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	3304      	adds	r3, #4
 800e318:	4618      	mov	r0, r3
 800e31a:	f005 fa5d 	bl	80137d8 <ip4_route>
 800e31e:	4601      	mov	r1, r0
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	3304      	adds	r3, #4
 800e324:	461a      	mov	r2, r3
 800e326:	4620      	mov	r0, r4
 800e328:	f7ff fa30 	bl	800d78c <tcp_eff_send_mss_netif>
 800e32c:	4603      	mov	r3, r0
 800e32e:	461a      	mov	r2, r3
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e334:	2112      	movs	r1, #18
 800e336:	6978      	ldr	r0, [r7, #20]
 800e338:	f002 fc96 	bl	8010c68 <tcp_enqueue_flags>
 800e33c:	4603      	mov	r3, r0
 800e33e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e348:	2100      	movs	r1, #0
 800e34a:	6978      	ldr	r0, [r7, #20]
 800e34c:	f7fd ff06 	bl	800c15c <tcp_abandon>
      return;
 800e350:	e006      	b.n	800e360 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e352:	6978      	ldr	r0, [r7, #20]
 800e354:	f002 fd76 	bl	8010e44 <tcp_output>
  return;
 800e358:	e001      	b.n	800e35e <tcp_listen_input+0x1be>
    return;
 800e35a:	bf00      	nop
 800e35c:	e000      	b.n	800e360 <tcp_listen_input+0x1c0>
  return;
 800e35e:	bf00      	nop
}
 800e360:	371c      	adds	r7, #28
 800e362:	46bd      	mov	sp, r7
 800e364:	bd90      	pop	{r4, r7, pc}
 800e366:	bf00      	nop
 800e368:	2000bea8 	.word	0x2000bea8
 800e36c:	08017ec0 	.word	0x08017ec0
 800e370:	080180b8 	.word	0x080180b8
 800e374:	08017f0c 	.word	0x08017f0c
 800e378:	2000bea0 	.word	0x2000bea0
 800e37c:	2000bea6 	.word	0x2000bea6
 800e380:	2000be9c 	.word	0x2000be9c
 800e384:	2000be8c 	.word	0x2000be8c
 800e388:	20008d74 	.word	0x20008d74
 800e38c:	20008d78 	.word	0x20008d78
 800e390:	20008d64 	.word	0x20008d64
 800e394:	2000be70 	.word	0x2000be70
 800e398:	2000be78 	.word	0x2000be78

0800e39c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af04      	add	r7, sp, #16
 800e3a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e3a4:	4b2f      	ldr	r3, [pc, #188]	@ (800e464 <tcp_timewait_input+0xc8>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	f003 0304 	and.w	r3, r3, #4
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d153      	bne.n	800e458 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <tcp_timewait_input+0x28>
 800e3b6:	4b2c      	ldr	r3, [pc, #176]	@ (800e468 <tcp_timewait_input+0xcc>)
 800e3b8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e3bc:	492b      	ldr	r1, [pc, #172]	@ (800e46c <tcp_timewait_input+0xd0>)
 800e3be:	482c      	ldr	r0, [pc, #176]	@ (800e470 <tcp_timewait_input+0xd4>)
 800e3c0:	f006 fed8 	bl	8015174 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e3c4:	4b27      	ldr	r3, [pc, #156]	@ (800e464 <tcp_timewait_input+0xc8>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	f003 0302 	and.w	r3, r3, #2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d02a      	beq.n	800e426 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e3d0:	4b28      	ldr	r3, [pc, #160]	@ (800e474 <tcp_timewait_input+0xd8>)
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	db2d      	blt.n	800e43a <tcp_timewait_input+0x9e>
 800e3de:	4b25      	ldr	r3, [pc, #148]	@ (800e474 <tcp_timewait_input+0xd8>)
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3e6:	6879      	ldr	r1, [r7, #4]
 800e3e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e3ea:	440b      	add	r3, r1
 800e3ec:	1ad3      	subs	r3, r2, r3
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	dc23      	bgt.n	800e43a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3f2:	4b21      	ldr	r3, [pc, #132]	@ (800e478 <tcp_timewait_input+0xdc>)
 800e3f4:	6819      	ldr	r1, [r3, #0]
 800e3f6:	4b21      	ldr	r3, [pc, #132]	@ (800e47c <tcp_timewait_input+0xe0>)
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	4b1d      	ldr	r3, [pc, #116]	@ (800e474 <tcp_timewait_input+0xd8>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e402:	4b1f      	ldr	r3, [pc, #124]	@ (800e480 <tcp_timewait_input+0xe4>)
 800e404:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e406:	885b      	ldrh	r3, [r3, #2]
 800e408:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e40a:	4a1d      	ldr	r2, [pc, #116]	@ (800e480 <tcp_timewait_input+0xe4>)
 800e40c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e40e:	8812      	ldrh	r2, [r2, #0]
 800e410:	b292      	uxth	r2, r2
 800e412:	9202      	str	r2, [sp, #8]
 800e414:	9301      	str	r3, [sp, #4]
 800e416:	4b1b      	ldr	r3, [pc, #108]	@ (800e484 <tcp_timewait_input+0xe8>)
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	4b1b      	ldr	r3, [pc, #108]	@ (800e488 <tcp_timewait_input+0xec>)
 800e41c:	4602      	mov	r2, r0
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f003 fac4 	bl	80119ac <tcp_rst>
      return;
 800e424:	e01b      	b.n	800e45e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e426:	4b0f      	ldr	r3, [pc, #60]	@ (800e464 <tcp_timewait_input+0xc8>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d003      	beq.n	800e43a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e432:	4b16      	ldr	r3, [pc, #88]	@ (800e48c <tcp_timewait_input+0xf0>)
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e43a:	4b10      	ldr	r3, [pc, #64]	@ (800e47c <tcp_timewait_input+0xe0>)
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00c      	beq.n	800e45c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8b5b      	ldrh	r3, [r3, #26]
 800e446:	f043 0302 	orr.w	r3, r3, #2
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f002 fcf7 	bl	8010e44 <tcp_output>
  }
  return;
 800e456:	e001      	b.n	800e45c <tcp_timewait_input+0xc0>
    return;
 800e458:	bf00      	nop
 800e45a:	e000      	b.n	800e45e <tcp_timewait_input+0xc2>
  return;
 800e45c:	bf00      	nop
}
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	2000bea8 	.word	0x2000bea8
 800e468:	08017ec0 	.word	0x08017ec0
 800e46c:	080180d8 	.word	0x080180d8
 800e470:	08017f0c 	.word	0x08017f0c
 800e474:	2000be9c 	.word	0x2000be9c
 800e478:	2000bea0 	.word	0x2000bea0
 800e47c:	2000bea6 	.word	0x2000bea6
 800e480:	2000be8c 	.word	0x2000be8c
 800e484:	20008d74 	.word	0x20008d74
 800e488:	20008d78 	.word	0x20008d78
 800e48c:	2000be64 	.word	0x2000be64

0800e490 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b08d      	sub	sp, #52	@ 0x34
 800e494:	af04      	add	r7, sp, #16
 800e496:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e498:	2300      	movs	r3, #0
 800e49a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d106      	bne.n	800e4b4 <tcp_process+0x24>
 800e4a6:	4b9d      	ldr	r3, [pc, #628]	@ (800e71c <tcp_process+0x28c>)
 800e4a8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e4ac:	499c      	ldr	r1, [pc, #624]	@ (800e720 <tcp_process+0x290>)
 800e4ae:	489d      	ldr	r0, [pc, #628]	@ (800e724 <tcp_process+0x294>)
 800e4b0:	f006 fe60 	bl	8015174 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e4b4:	4b9c      	ldr	r3, [pc, #624]	@ (800e728 <tcp_process+0x298>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	f003 0304 	and.w	r3, r3, #4
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d04e      	beq.n	800e55e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	7d1b      	ldrb	r3, [r3, #20]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d108      	bne.n	800e4da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e4cc:	4b97      	ldr	r3, [pc, #604]	@ (800e72c <tcp_process+0x29c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d123      	bne.n	800e51c <tcp_process+0x8c>
        acceptable = 1;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	76fb      	strb	r3, [r7, #27]
 800e4d8:	e020      	b.n	800e51c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4de:	4b94      	ldr	r3, [pc, #592]	@ (800e730 <tcp_process+0x2a0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d102      	bne.n	800e4ec <tcp_process+0x5c>
        acceptable = 1;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	76fb      	strb	r3, [r7, #27]
 800e4ea:	e017      	b.n	800e51c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e4ec:	4b90      	ldr	r3, [pc, #576]	@ (800e730 <tcp_process+0x2a0>)
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4f4:	1ad3      	subs	r3, r2, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	db10      	blt.n	800e51c <tcp_process+0x8c>
 800e4fa:	4b8d      	ldr	r3, [pc, #564]	@ (800e730 <tcp_process+0x2a0>)
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e502:	6879      	ldr	r1, [r7, #4]
 800e504:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e506:	440b      	add	r3, r1
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	dc06      	bgt.n	800e51c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	8b5b      	ldrh	r3, [r3, #26]
 800e512:	f043 0302 	orr.w	r3, r3, #2
 800e516:	b29a      	uxth	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e51c:	7efb      	ldrb	r3, [r7, #27]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d01b      	beq.n	800e55a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7d1b      	ldrb	r3, [r3, #20]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d106      	bne.n	800e538 <tcp_process+0xa8>
 800e52a:	4b7c      	ldr	r3, [pc, #496]	@ (800e71c <tcp_process+0x28c>)
 800e52c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e530:	4980      	ldr	r1, [pc, #512]	@ (800e734 <tcp_process+0x2a4>)
 800e532:	487c      	ldr	r0, [pc, #496]	@ (800e724 <tcp_process+0x294>)
 800e534:	f006 fe1e 	bl	8015174 <iprintf>
      recv_flags |= TF_RESET;
 800e538:	4b7f      	ldr	r3, [pc, #508]	@ (800e738 <tcp_process+0x2a8>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	f043 0308 	orr.w	r3, r3, #8
 800e540:	b2da      	uxtb	r2, r3
 800e542:	4b7d      	ldr	r3, [pc, #500]	@ (800e738 <tcp_process+0x2a8>)
 800e544:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	8b5b      	ldrh	r3, [r3, #26]
 800e54a:	f023 0301 	bic.w	r3, r3, #1
 800e54e:	b29a      	uxth	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e554:	f06f 030d 	mvn.w	r3, #13
 800e558:	e37a      	b.n	800ec50 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e55a:	2300      	movs	r3, #0
 800e55c:	e378      	b.n	800ec50 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e55e:	4b72      	ldr	r3, [pc, #456]	@ (800e728 <tcp_process+0x298>)
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	f003 0302 	and.w	r3, r3, #2
 800e566:	2b00      	cmp	r3, #0
 800e568:	d010      	beq.n	800e58c <tcp_process+0xfc>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7d1b      	ldrb	r3, [r3, #20]
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d00c      	beq.n	800e58c <tcp_process+0xfc>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7d1b      	ldrb	r3, [r3, #20]
 800e576:	2b03      	cmp	r3, #3
 800e578:	d008      	beq.n	800e58c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	8b5b      	ldrh	r3, [r3, #26]
 800e57e:	f043 0302 	orr.w	r3, r3, #2
 800e582:	b29a      	uxth	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	e361      	b.n	800ec50 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	8b5b      	ldrh	r3, [r3, #26]
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	d103      	bne.n	800e5a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e598:	4b68      	ldr	r3, [pc, #416]	@ (800e73c <tcp_process+0x2ac>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 fc2b 	bl	800fe0c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	7d1b      	ldrb	r3, [r3, #20]
 800e5ba:	3b02      	subs	r3, #2
 800e5bc:	2b07      	cmp	r3, #7
 800e5be:	f200 8337 	bhi.w	800ec30 <tcp_process+0x7a0>
 800e5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c8 <tcp_process+0x138>)
 800e5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c8:	0800e5e9 	.word	0x0800e5e9
 800e5cc:	0800e819 	.word	0x0800e819
 800e5d0:	0800e991 	.word	0x0800e991
 800e5d4:	0800e9bb 	.word	0x0800e9bb
 800e5d8:	0800eadf 	.word	0x0800eadf
 800e5dc:	0800e991 	.word	0x0800e991
 800e5e0:	0800eb6b 	.word	0x0800eb6b
 800e5e4:	0800ebfb 	.word	0x0800ebfb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e5e8:	4b4f      	ldr	r3, [pc, #316]	@ (800e728 <tcp_process+0x298>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	f003 0310 	and.w	r3, r3, #16
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 80e4 	beq.w	800e7be <tcp_process+0x32e>
 800e5f6:	4b4c      	ldr	r3, [pc, #304]	@ (800e728 <tcp_process+0x298>)
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f000 80dd 	beq.w	800e7be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e608:	1c5a      	adds	r2, r3, #1
 800e60a:	4b48      	ldr	r3, [pc, #288]	@ (800e72c <tcp_process+0x29c>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	429a      	cmp	r2, r3
 800e610:	f040 80d5 	bne.w	800e7be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e614:	4b46      	ldr	r3, [pc, #280]	@ (800e730 <tcp_process+0x2a0>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e626:	4b41      	ldr	r3, [pc, #260]	@ (800e72c <tcp_process+0x29c>)
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e62e:	4b44      	ldr	r3, [pc, #272]	@ (800e740 <tcp_process+0x2b0>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	89db      	ldrh	r3, [r3, #14]
 800e634:	b29a      	uxth	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e648:	4b39      	ldr	r3, [pc, #228]	@ (800e730 <tcp_process+0x2a0>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	1e5a      	subs	r2, r3, #1
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2204      	movs	r2, #4
 800e656:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	3304      	adds	r3, #4
 800e660:	4618      	mov	r0, r3
 800e662:	f005 f8b9 	bl	80137d8 <ip4_route>
 800e666:	4601      	mov	r1, r0
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3304      	adds	r3, #4
 800e66c:	461a      	mov	r2, r3
 800e66e:	4620      	mov	r0, r4
 800e670:	f7ff f88c 	bl	800d78c <tcp_eff_send_mss_netif>
 800e674:	4603      	mov	r3, r0
 800e676:	461a      	mov	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e680:	009a      	lsls	r2, r3, #2
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e686:	005b      	lsls	r3, r3, #1
 800e688:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e68c:	428b      	cmp	r3, r1
 800e68e:	bf38      	it	cc
 800e690:	460b      	movcc	r3, r1
 800e692:	429a      	cmp	r2, r3
 800e694:	d204      	bcs.n	800e6a0 <tcp_process+0x210>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	e00d      	b.n	800e6bc <tcp_process+0x22c>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6a4:	005b      	lsls	r3, r3, #1
 800e6a6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d904      	bls.n	800e6b8 <tcp_process+0x228>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	e001      	b.n	800e6bc <tcp_process+0x22c>
 800e6b8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d106      	bne.n	800e6da <tcp_process+0x24a>
 800e6cc:	4b13      	ldr	r3, [pc, #76]	@ (800e71c <tcp_process+0x28c>)
 800e6ce:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e6d2:	491c      	ldr	r1, [pc, #112]	@ (800e744 <tcp_process+0x2b4>)
 800e6d4:	4813      	ldr	r0, [pc, #76]	@ (800e724 <tcp_process+0x294>)
 800e6d6:	f006 fd4d 	bl	8015174 <iprintf>
        --pcb->snd_queuelen;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d12a      	bne.n	800e74c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <tcp_process+0x280>
 800e702:	4b06      	ldr	r3, [pc, #24]	@ (800e71c <tcp_process+0x28c>)
 800e704:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e708:	490f      	ldr	r1, [pc, #60]	@ (800e748 <tcp_process+0x2b8>)
 800e70a:	4806      	ldr	r0, [pc, #24]	@ (800e724 <tcp_process+0x294>)
 800e70c:	f006 fd32 	bl	8015174 <iprintf>
          pcb->unsent = rseg->next;
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e718:	e01c      	b.n	800e754 <tcp_process+0x2c4>
 800e71a:	bf00      	nop
 800e71c:	08017ec0 	.word	0x08017ec0
 800e720:	080180f8 	.word	0x080180f8
 800e724:	08017f0c 	.word	0x08017f0c
 800e728:	2000bea8 	.word	0x2000bea8
 800e72c:	2000bea0 	.word	0x2000bea0
 800e730:	2000be9c 	.word	0x2000be9c
 800e734:	08018114 	.word	0x08018114
 800e738:	2000bea9 	.word	0x2000bea9
 800e73c:	2000be64 	.word	0x2000be64
 800e740:	2000be8c 	.word	0x2000be8c
 800e744:	08018134 	.word	0x08018134
 800e748:	0801814c 	.word	0x0801814c
        } else {
          pcb->unacked = rseg->next;
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e754:	69f8      	ldr	r0, [r7, #28]
 800e756:	f7fe fc54 	bl	800d002 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d104      	bne.n	800e76c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e768:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e76a:	e006      	b.n	800e77a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00a      	beq.n	800e79a <tcp_process+0x30a>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	6910      	ldr	r0, [r2, #16]
 800e78e:	2200      	movs	r2, #0
 800e790:	6879      	ldr	r1, [r7, #4]
 800e792:	4798      	blx	r3
 800e794:	4603      	mov	r3, r0
 800e796:	76bb      	strb	r3, [r7, #26]
 800e798:	e001      	b.n	800e79e <tcp_process+0x30e>
 800e79a:	2300      	movs	r3, #0
 800e79c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e79e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e7a2:	f113 0f0d 	cmn.w	r3, #13
 800e7a6:	d102      	bne.n	800e7ae <tcp_process+0x31e>
          return ERR_ABRT;
 800e7a8:	f06f 030c 	mvn.w	r3, #12
 800e7ac:	e250      	b.n	800ec50 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	8b5b      	ldrh	r3, [r3, #26]
 800e7b2:	f043 0302 	orr.w	r3, r3, #2
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e7bc:	e23a      	b.n	800ec34 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e7be:	4b98      	ldr	r3, [pc, #608]	@ (800ea20 <tcp_process+0x590>)
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	f003 0310 	and.w	r3, r3, #16
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f000 8234 	beq.w	800ec34 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7cc:	4b95      	ldr	r3, [pc, #596]	@ (800ea24 <tcp_process+0x594>)
 800e7ce:	6819      	ldr	r1, [r3, #0]
 800e7d0:	4b95      	ldr	r3, [pc, #596]	@ (800ea28 <tcp_process+0x598>)
 800e7d2:	881b      	ldrh	r3, [r3, #0]
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	4b95      	ldr	r3, [pc, #596]	@ (800ea2c <tcp_process+0x59c>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7dc:	4b94      	ldr	r3, [pc, #592]	@ (800ea30 <tcp_process+0x5a0>)
 800e7de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7e0:	885b      	ldrh	r3, [r3, #2]
 800e7e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7e4:	4a92      	ldr	r2, [pc, #584]	@ (800ea30 <tcp_process+0x5a0>)
 800e7e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7e8:	8812      	ldrh	r2, [r2, #0]
 800e7ea:	b292      	uxth	r2, r2
 800e7ec:	9202      	str	r2, [sp, #8]
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	4b90      	ldr	r3, [pc, #576]	@ (800ea34 <tcp_process+0x5a4>)
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	4b90      	ldr	r3, [pc, #576]	@ (800ea38 <tcp_process+0x5a8>)
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f003 f8d7 	bl	80119ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e804:	2b05      	cmp	r3, #5
 800e806:	f200 8215 	bhi.w	800ec34 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f002 fea3 	bl	801155c <tcp_rexmit_rto>
      break;
 800e816:	e20d      	b.n	800ec34 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e818:	4b81      	ldr	r3, [pc, #516]	@ (800ea20 <tcp_process+0x590>)
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	f003 0310 	and.w	r3, r3, #16
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 80a1 	beq.w	800e968 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e826:	4b7f      	ldr	r3, [pc, #508]	@ (800ea24 <tcp_process+0x594>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	3b01      	subs	r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	db7e      	blt.n	800e934 <tcp_process+0x4a4>
 800e836:	4b7b      	ldr	r3, [pc, #492]	@ (800ea24 <tcp_process+0x594>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	2b00      	cmp	r3, #0
 800e842:	dc77      	bgt.n	800e934 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2204      	movs	r2, #4
 800e848:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d102      	bne.n	800e858 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e852:	23fa      	movs	r3, #250	@ 0xfa
 800e854:	76bb      	strb	r3, [r7, #26]
 800e856:	e01d      	b.n	800e894 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e85c:	699b      	ldr	r3, [r3, #24]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <tcp_process+0x3e0>
 800e862:	4b76      	ldr	r3, [pc, #472]	@ (800ea3c <tcp_process+0x5ac>)
 800e864:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e868:	4975      	ldr	r1, [pc, #468]	@ (800ea40 <tcp_process+0x5b0>)
 800e86a:	4876      	ldr	r0, [pc, #472]	@ (800ea44 <tcp_process+0x5b4>)
 800e86c:	f006 fc82 	bl	8015174 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00a      	beq.n	800e890 <tcp_process+0x400>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e87e:	699b      	ldr	r3, [r3, #24]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	6910      	ldr	r0, [r2, #16]
 800e884:	2200      	movs	r2, #0
 800e886:	6879      	ldr	r1, [r7, #4]
 800e888:	4798      	blx	r3
 800e88a:	4603      	mov	r3, r0
 800e88c:	76bb      	strb	r3, [r7, #26]
 800e88e:	e001      	b.n	800e894 <tcp_process+0x404>
 800e890:	23f0      	movs	r3, #240	@ 0xf0
 800e892:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e894:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00a      	beq.n	800e8b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e89c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e8a0:	f113 0f0d 	cmn.w	r3, #13
 800e8a4:	d002      	beq.n	800e8ac <tcp_process+0x41c>
              tcp_abort(pcb);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7fd fd16 	bl	800c2d8 <tcp_abort>
            }
            return ERR_ABRT;
 800e8ac:	f06f 030c 	mvn.w	r3, #12
 800e8b0:	e1ce      	b.n	800ec50 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 fae0 	bl	800ee78 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e8b8:	4b63      	ldr	r3, [pc, #396]	@ (800ea48 <tcp_process+0x5b8>)
 800e8ba:	881b      	ldrh	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d005      	beq.n	800e8cc <tcp_process+0x43c>
            recv_acked--;
 800e8c0:	4b61      	ldr	r3, [pc, #388]	@ (800ea48 <tcp_process+0x5b8>)
 800e8c2:	881b      	ldrh	r3, [r3, #0]
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	b29a      	uxth	r2, r3
 800e8c8:	4b5f      	ldr	r3, [pc, #380]	@ (800ea48 <tcp_process+0x5b8>)
 800e8ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e8d0:	009a      	lsls	r2, r3, #2
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e8d6:	005b      	lsls	r3, r3, #1
 800e8d8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e8dc:	428b      	cmp	r3, r1
 800e8de:	bf38      	it	cc
 800e8e0:	460b      	movcc	r3, r1
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d204      	bcs.n	800e8f0 <tcp_process+0x460>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	e00d      	b.n	800e90c <tcp_process+0x47c>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e8f4:	005b      	lsls	r3, r3, #1
 800e8f6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d904      	bls.n	800e908 <tcp_process+0x478>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	b29b      	uxth	r3, r3
 800e906:	e001      	b.n	800e90c <tcp_process+0x47c>
 800e908:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e912:	4b4e      	ldr	r3, [pc, #312]	@ (800ea4c <tcp_process+0x5bc>)
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	f003 0320 	and.w	r3, r3, #32
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d037      	beq.n	800e98e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8b5b      	ldrh	r3, [r3, #26]
 800e922:	f043 0302 	orr.w	r3, r3, #2
 800e926:	b29a      	uxth	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2207      	movs	r2, #7
 800e930:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e932:	e02c      	b.n	800e98e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e934:	4b3b      	ldr	r3, [pc, #236]	@ (800ea24 <tcp_process+0x594>)
 800e936:	6819      	ldr	r1, [r3, #0]
 800e938:	4b3b      	ldr	r3, [pc, #236]	@ (800ea28 <tcp_process+0x598>)
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	461a      	mov	r2, r3
 800e93e:	4b3b      	ldr	r3, [pc, #236]	@ (800ea2c <tcp_process+0x59c>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e944:	4b3a      	ldr	r3, [pc, #232]	@ (800ea30 <tcp_process+0x5a0>)
 800e946:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e948:	885b      	ldrh	r3, [r3, #2]
 800e94a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e94c:	4a38      	ldr	r2, [pc, #224]	@ (800ea30 <tcp_process+0x5a0>)
 800e94e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e950:	8812      	ldrh	r2, [r2, #0]
 800e952:	b292      	uxth	r2, r2
 800e954:	9202      	str	r2, [sp, #8]
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	4b36      	ldr	r3, [pc, #216]	@ (800ea34 <tcp_process+0x5a4>)
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	4b36      	ldr	r3, [pc, #216]	@ (800ea38 <tcp_process+0x5a8>)
 800e95e:	4602      	mov	r2, r0
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f003 f823 	bl	80119ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e966:	e167      	b.n	800ec38 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e968:	4b2d      	ldr	r3, [pc, #180]	@ (800ea20 <tcp_process+0x590>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f003 0302 	and.w	r3, r3, #2
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 8161 	beq.w	800ec38 <tcp_process+0x7a8>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e97a:	1e5a      	subs	r2, r3, #1
 800e97c:	4b2b      	ldr	r3, [pc, #172]	@ (800ea2c <tcp_process+0x59c>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	429a      	cmp	r2, r3
 800e982:	f040 8159 	bne.w	800ec38 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f002 fe0a 	bl	80115a0 <tcp_rexmit>
      break;
 800e98c:	e154      	b.n	800ec38 <tcp_process+0x7a8>
 800e98e:	e153      	b.n	800ec38 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fa71 	bl	800ee78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e996:	4b2d      	ldr	r3, [pc, #180]	@ (800ea4c <tcp_process+0x5bc>)
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	f003 0320 	and.w	r3, r3, #32
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f000 814c 	beq.w	800ec3c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	8b5b      	ldrh	r3, [r3, #26]
 800e9a8:	f043 0302 	orr.w	r3, r3, #2
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2207      	movs	r2, #7
 800e9b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9b8:	e140      	b.n	800ec3c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 fa5c 	bl	800ee78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e9c0:	4b22      	ldr	r3, [pc, #136]	@ (800ea4c <tcp_process+0x5bc>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	f003 0320 	and.w	r3, r3, #32
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d071      	beq.n	800eab0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9cc:	4b14      	ldr	r3, [pc, #80]	@ (800ea20 <tcp_process+0x590>)
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	f003 0310 	and.w	r3, r3, #16
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d060      	beq.n	800ea9a <tcp_process+0x60a>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9dc:	4b11      	ldr	r3, [pc, #68]	@ (800ea24 <tcp_process+0x594>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d15a      	bne.n	800ea9a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d156      	bne.n	800ea9a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	8b5b      	ldrh	r3, [r3, #26]
 800e9f0:	f043 0302 	orr.w	r3, r3, #2
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f7fe fdbc 	bl	800d578 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ea00:	4b13      	ldr	r3, [pc, #76]	@ (800ea50 <tcp_process+0x5c0>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d105      	bne.n	800ea16 <tcp_process+0x586>
 800ea0a:	4b11      	ldr	r3, [pc, #68]	@ (800ea50 <tcp_process+0x5c0>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	4a0f      	ldr	r2, [pc, #60]	@ (800ea50 <tcp_process+0x5c0>)
 800ea12:	6013      	str	r3, [r2, #0]
 800ea14:	e02e      	b.n	800ea74 <tcp_process+0x5e4>
 800ea16:	4b0e      	ldr	r3, [pc, #56]	@ (800ea50 <tcp_process+0x5c0>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	617b      	str	r3, [r7, #20]
 800ea1c:	e027      	b.n	800ea6e <tcp_process+0x5de>
 800ea1e:	bf00      	nop
 800ea20:	2000bea8 	.word	0x2000bea8
 800ea24:	2000bea0 	.word	0x2000bea0
 800ea28:	2000bea6 	.word	0x2000bea6
 800ea2c:	2000be9c 	.word	0x2000be9c
 800ea30:	2000be8c 	.word	0x2000be8c
 800ea34:	20008d74 	.word	0x20008d74
 800ea38:	20008d78 	.word	0x20008d78
 800ea3c:	08017ec0 	.word	0x08017ec0
 800ea40:	08018160 	.word	0x08018160
 800ea44:	08017f0c 	.word	0x08017f0c
 800ea48:	2000bea4 	.word	0x2000bea4
 800ea4c:	2000bea9 	.word	0x2000bea9
 800ea50:	2000be70 	.word	0x2000be70
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d104      	bne.n	800ea68 <tcp_process+0x5d8>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	68da      	ldr	r2, [r3, #12]
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	60da      	str	r2, [r3, #12]
 800ea66:	e005      	b.n	800ea74 <tcp_process+0x5e4>
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	617b      	str	r3, [r7, #20]
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1ef      	bne.n	800ea54 <tcp_process+0x5c4>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	60da      	str	r2, [r3, #12]
 800ea7a:	4b77      	ldr	r3, [pc, #476]	@ (800ec58 <tcp_process+0x7c8>)
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	220a      	movs	r2, #10
 800ea84:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ea86:	4b75      	ldr	r3, [pc, #468]	@ (800ec5c <tcp_process+0x7cc>)
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	60da      	str	r2, [r3, #12]
 800ea8e:	4a73      	ldr	r2, [pc, #460]	@ (800ec5c <tcp_process+0x7cc>)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6013      	str	r3, [r2, #0]
 800ea94:	f003 f94c 	bl	8011d30 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ea98:	e0d2      	b.n	800ec40 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	8b5b      	ldrh	r3, [r3, #26]
 800ea9e:	f043 0302 	orr.w	r3, r3, #2
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2208      	movs	r2, #8
 800eaac:	751a      	strb	r2, [r3, #20]
      break;
 800eaae:	e0c7      	b.n	800ec40 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eab0:	4b6b      	ldr	r3, [pc, #428]	@ (800ec60 <tcp_process+0x7d0>)
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	f003 0310 	and.w	r3, r3, #16
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f000 80c1 	beq.w	800ec40 <tcp_process+0x7b0>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eac2:	4b68      	ldr	r3, [pc, #416]	@ (800ec64 <tcp_process+0x7d4>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	f040 80ba 	bne.w	800ec40 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f040 80b5 	bne.w	800ec40 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2206      	movs	r2, #6
 800eada:	751a      	strb	r2, [r3, #20]
      break;
 800eadc:	e0b0      	b.n	800ec40 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f9ca 	bl	800ee78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eae4:	4b60      	ldr	r3, [pc, #384]	@ (800ec68 <tcp_process+0x7d8>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	f003 0320 	and.w	r3, r3, #32
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 80a9 	beq.w	800ec44 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	8b5b      	ldrh	r3, [r3, #26]
 800eaf6:	f043 0302 	orr.w	r3, r3, #2
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7fe fd39 	bl	800d578 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb06:	4b59      	ldr	r3, [pc, #356]	@ (800ec6c <tcp_process+0x7dc>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d105      	bne.n	800eb1c <tcp_process+0x68c>
 800eb10:	4b56      	ldr	r3, [pc, #344]	@ (800ec6c <tcp_process+0x7dc>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	4a55      	ldr	r2, [pc, #340]	@ (800ec6c <tcp_process+0x7dc>)
 800eb18:	6013      	str	r3, [r2, #0]
 800eb1a:	e013      	b.n	800eb44 <tcp_process+0x6b4>
 800eb1c:	4b53      	ldr	r3, [pc, #332]	@ (800ec6c <tcp_process+0x7dc>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	613b      	str	r3, [r7, #16]
 800eb22:	e00c      	b.n	800eb3e <tcp_process+0x6ae>
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d104      	bne.n	800eb38 <tcp_process+0x6a8>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68da      	ldr	r2, [r3, #12]
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	60da      	str	r2, [r3, #12]
 800eb36:	e005      	b.n	800eb44 <tcp_process+0x6b4>
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	613b      	str	r3, [r7, #16]
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1ef      	bne.n	800eb24 <tcp_process+0x694>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	60da      	str	r2, [r3, #12]
 800eb4a:	4b43      	ldr	r3, [pc, #268]	@ (800ec58 <tcp_process+0x7c8>)
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	220a      	movs	r2, #10
 800eb54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eb56:	4b41      	ldr	r3, [pc, #260]	@ (800ec5c <tcp_process+0x7cc>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	60da      	str	r2, [r3, #12]
 800eb5e:	4a3f      	ldr	r2, [pc, #252]	@ (800ec5c <tcp_process+0x7cc>)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6013      	str	r3, [r2, #0]
 800eb64:	f003 f8e4 	bl	8011d30 <tcp_timer_needed>
      }
      break;
 800eb68:	e06c      	b.n	800ec44 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 f984 	bl	800ee78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eb70:	4b3b      	ldr	r3, [pc, #236]	@ (800ec60 <tcp_process+0x7d0>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f003 0310 	and.w	r3, r3, #16
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d065      	beq.n	800ec48 <tcp_process+0x7b8>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb80:	4b38      	ldr	r3, [pc, #224]	@ (800ec64 <tcp_process+0x7d4>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d15f      	bne.n	800ec48 <tcp_process+0x7b8>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d15b      	bne.n	800ec48 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7fe fcf1 	bl	800d578 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb96:	4b35      	ldr	r3, [pc, #212]	@ (800ec6c <tcp_process+0x7dc>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d105      	bne.n	800ebac <tcp_process+0x71c>
 800eba0:	4b32      	ldr	r3, [pc, #200]	@ (800ec6c <tcp_process+0x7dc>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	4a31      	ldr	r2, [pc, #196]	@ (800ec6c <tcp_process+0x7dc>)
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	e013      	b.n	800ebd4 <tcp_process+0x744>
 800ebac:	4b2f      	ldr	r3, [pc, #188]	@ (800ec6c <tcp_process+0x7dc>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	60fb      	str	r3, [r7, #12]
 800ebb2:	e00c      	b.n	800ebce <tcp_process+0x73e>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d104      	bne.n	800ebc8 <tcp_process+0x738>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	68da      	ldr	r2, [r3, #12]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	60da      	str	r2, [r3, #12]
 800ebc6:	e005      	b.n	800ebd4 <tcp_process+0x744>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1ef      	bne.n	800ebb4 <tcp_process+0x724>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	60da      	str	r2, [r3, #12]
 800ebda:	4b1f      	ldr	r3, [pc, #124]	@ (800ec58 <tcp_process+0x7c8>)
 800ebdc:	2201      	movs	r2, #1
 800ebde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	220a      	movs	r2, #10
 800ebe4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ebe6:	4b1d      	ldr	r3, [pc, #116]	@ (800ec5c <tcp_process+0x7cc>)
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	60da      	str	r2, [r3, #12]
 800ebee:	4a1b      	ldr	r2, [pc, #108]	@ (800ec5c <tcp_process+0x7cc>)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	f003 f89c 	bl	8011d30 <tcp_timer_needed>
      }
      break;
 800ebf8:	e026      	b.n	800ec48 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 f93c 	bl	800ee78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec00:	4b17      	ldr	r3, [pc, #92]	@ (800ec60 <tcp_process+0x7d0>)
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	f003 0310 	and.w	r3, r3, #16
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d01f      	beq.n	800ec4c <tcp_process+0x7bc>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec10:	4b14      	ldr	r3, [pc, #80]	@ (800ec64 <tcp_process+0x7d4>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d119      	bne.n	800ec4c <tcp_process+0x7bc>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d115      	bne.n	800ec4c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ec20:	4b11      	ldr	r3, [pc, #68]	@ (800ec68 <tcp_process+0x7d8>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	f043 0310 	orr.w	r3, r3, #16
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ec68 <tcp_process+0x7d8>)
 800ec2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ec2e:	e00d      	b.n	800ec4c <tcp_process+0x7bc>
    default:
      break;
 800ec30:	bf00      	nop
 800ec32:	e00c      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec34:	bf00      	nop
 800ec36:	e00a      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec38:	bf00      	nop
 800ec3a:	e008      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec3c:	bf00      	nop
 800ec3e:	e006      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec40:	bf00      	nop
 800ec42:	e004      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec44:	bf00      	nop
 800ec46:	e002      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec48:	bf00      	nop
 800ec4a:	e000      	b.n	800ec4e <tcp_process+0x7be>
      break;
 800ec4c:	bf00      	nop
  }
  return ERR_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3724      	adds	r7, #36	@ 0x24
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd90      	pop	{r4, r7, pc}
 800ec58:	2000be78 	.word	0x2000be78
 800ec5c:	2000be74 	.word	0x2000be74
 800ec60:	2000bea8 	.word	0x2000bea8
 800ec64:	2000bea0 	.word	0x2000bea0
 800ec68:	2000bea9 	.word	0x2000bea9
 800ec6c:	2000be70 	.word	0x2000be70

0800ec70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ec70:	b590      	push	{r4, r7, lr}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d106      	bne.n	800ec8e <tcp_oos_insert_segment+0x1e>
 800ec80:	4b3b      	ldr	r3, [pc, #236]	@ (800ed70 <tcp_oos_insert_segment+0x100>)
 800ec82:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ec86:	493b      	ldr	r1, [pc, #236]	@ (800ed74 <tcp_oos_insert_segment+0x104>)
 800ec88:	483b      	ldr	r0, [pc, #236]	@ (800ed78 <tcp_oos_insert_segment+0x108>)
 800ec8a:	f006 fa73 	bl	8015174 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	899b      	ldrh	r3, [r3, #12]
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fb f940 	bl	8009f1c <lwip_htons>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d028      	beq.n	800ecfa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eca8:	6838      	ldr	r0, [r7, #0]
 800ecaa:	f7fe f995 	bl	800cfd8 <tcp_segs_free>
    next = NULL;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	603b      	str	r3, [r7, #0]
 800ecb2:	e056      	b.n	800ed62 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	899b      	ldrh	r3, [r3, #12]
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fb f92d 	bl	8009f1c <lwip_htons>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	f003 0301 	and.w	r3, r3, #1
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00d      	beq.n	800ecea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	899b      	ldrh	r3, [r3, #12]
 800ecd4:	b29c      	uxth	r4, r3
 800ecd6:	2001      	movs	r0, #1
 800ecd8:	f7fb f920 	bl	8009f1c <lwip_htons>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	461a      	mov	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	4322      	orrs	r2, r4
 800ece6:	b292      	uxth	r2, r2
 800ece8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f7fe f984 	bl	800d002 <tcp_seg_free>
    while (next &&
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00e      	beq.n	800ed1e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	891b      	ldrh	r3, [r3, #8]
 800ed04:	461a      	mov	r2, r3
 800ed06:	4b1d      	ldr	r3, [pc, #116]	@ (800ed7c <tcp_oos_insert_segment+0x10c>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	441a      	add	r2, r3
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	8909      	ldrh	r1, [r1, #8]
 800ed16:	440b      	add	r3, r1
 800ed18:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	daca      	bge.n	800ecb4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d01e      	beq.n	800ed62 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	891b      	ldrh	r3, [r3, #8]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	4b14      	ldr	r3, [pc, #80]	@ (800ed7c <tcp_oos_insert_segment+0x10c>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	441a      	add	r2, r3
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	dd12      	ble.n	800ed62 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	4b0d      	ldr	r3, [pc, #52]	@ (800ed7c <tcp_oos_insert_segment+0x10c>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	1ad3      	subs	r3, r2, r3
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	685a      	ldr	r2, [r3, #4]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	891b      	ldrh	r3, [r3, #8]
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	f7fc fb45 	bl	800b3ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	683a      	ldr	r2, [r7, #0]
 800ed66:	601a      	str	r2, [r3, #0]
}
 800ed68:	bf00      	nop
 800ed6a:	3714      	adds	r7, #20
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd90      	pop	{r4, r7, pc}
 800ed70:	08017ec0 	.word	0x08017ec0
 800ed74:	08018180 	.word	0x08018180
 800ed78:	08017f0c 	.word	0x08017f0c
 800ed7c:	2000be9c 	.word	0x2000be9c

0800ed80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ed80:	b5b0      	push	{r4, r5, r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ed8e:	e03e      	b.n	800ee0e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fc fd38 	bl	800b814 <pbuf_clen>
 800eda4:	4603      	mov	r3, r0
 800eda6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800edae:	8a7a      	ldrh	r2, [r7, #18]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d906      	bls.n	800edc2 <tcp_free_acked_segments+0x42>
 800edb4:	4b2a      	ldr	r3, [pc, #168]	@ (800ee60 <tcp_free_acked_segments+0xe0>)
 800edb6:	f240 4257 	movw	r2, #1111	@ 0x457
 800edba:	492a      	ldr	r1, [pc, #168]	@ (800ee64 <tcp_free_acked_segments+0xe4>)
 800edbc:	482a      	ldr	r0, [pc, #168]	@ (800ee68 <tcp_free_acked_segments+0xe8>)
 800edbe:	f006 f9d9 	bl	8015174 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800edc8:	8a7b      	ldrh	r3, [r7, #18]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	b29a      	uxth	r2, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	891a      	ldrh	r2, [r3, #8]
 800edd8:	4b24      	ldr	r3, [pc, #144]	@ (800ee6c <tcp_free_acked_segments+0xec>)
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	4413      	add	r3, r2
 800edde:	b29a      	uxth	r2, r3
 800ede0:	4b22      	ldr	r3, [pc, #136]	@ (800ee6c <tcp_free_acked_segments+0xec>)
 800ede2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ede4:	6978      	ldr	r0, [r7, #20]
 800ede6:	f7fe f90c 	bl	800d002 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00c      	beq.n	800ee0e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d109      	bne.n	800ee0e <tcp_free_acked_segments+0x8e>
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <tcp_free_acked_segments+0x8e>
 800ee00:	4b17      	ldr	r3, [pc, #92]	@ (800ee60 <tcp_free_acked_segments+0xe0>)
 800ee02:	f240 4261 	movw	r2, #1121	@ 0x461
 800ee06:	491a      	ldr	r1, [pc, #104]	@ (800ee70 <tcp_free_acked_segments+0xf0>)
 800ee08:	4817      	ldr	r0, [pc, #92]	@ (800ee68 <tcp_free_acked_segments+0xe8>)
 800ee0a:	f006 f9b3 	bl	8015174 <iprintf>
  while (seg_list != NULL &&
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d020      	beq.n	800ee56 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fb f893 	bl	8009f46 <lwip_htonl>
 800ee20:	4604      	mov	r4, r0
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	891b      	ldrh	r3, [r3, #8]
 800ee26:	461d      	mov	r5, r3
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	899b      	ldrh	r3, [r3, #12]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fb f873 	bl	8009f1c <lwip_htons>
 800ee36:	4603      	mov	r3, r0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f003 0303 	and.w	r3, r3, #3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <tcp_free_acked_segments+0xc6>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <tcp_free_acked_segments+0xc8>
 800ee46:	2300      	movs	r3, #0
 800ee48:	442b      	add	r3, r5
 800ee4a:	18e2      	adds	r2, r4, r3
 800ee4c:	4b09      	ldr	r3, [pc, #36]	@ (800ee74 <tcp_free_acked_segments+0xf4>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	dd9c      	ble.n	800ed90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ee56:	68bb      	ldr	r3, [r7, #8]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ee60:	08017ec0 	.word	0x08017ec0
 800ee64:	080181a8 	.word	0x080181a8
 800ee68:	08017f0c 	.word	0x08017f0c
 800ee6c:	2000bea4 	.word	0x2000bea4
 800ee70:	080181d0 	.word	0x080181d0
 800ee74:	2000bea0 	.word	0x2000bea0

0800ee78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ee78:	b5b0      	push	{r4, r5, r7, lr}
 800ee7a:	b094      	sub	sp, #80	@ 0x50
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ee80:	2300      	movs	r3, #0
 800ee82:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d106      	bne.n	800ee98 <tcp_receive+0x20>
 800ee8a:	4b91      	ldr	r3, [pc, #580]	@ (800f0d0 <tcp_receive+0x258>)
 800ee8c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ee90:	4990      	ldr	r1, [pc, #576]	@ (800f0d4 <tcp_receive+0x25c>)
 800ee92:	4891      	ldr	r0, [pc, #580]	@ (800f0d8 <tcp_receive+0x260>)
 800ee94:	f006 f96e 	bl	8015174 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	d806      	bhi.n	800eeae <tcp_receive+0x36>
 800eea0:	4b8b      	ldr	r3, [pc, #556]	@ (800f0d0 <tcp_receive+0x258>)
 800eea2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800eea6:	498d      	ldr	r1, [pc, #564]	@ (800f0dc <tcp_receive+0x264>)
 800eea8:	488b      	ldr	r0, [pc, #556]	@ (800f0d8 <tcp_receive+0x260>)
 800eeaa:	f006 f963 	bl	8015174 <iprintf>

  if (flags & TCP_ACK) {
 800eeae:	4b8c      	ldr	r3, [pc, #560]	@ (800f0e0 <tcp_receive+0x268>)
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	f003 0310 	and.w	r3, r3, #16
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f000 8264 	beq.w	800f384 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eec2:	461a      	mov	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eec8:	4413      	add	r3, r2
 800eeca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eed0:	4b84      	ldr	r3, [pc, #528]	@ (800f0e4 <tcp_receive+0x26c>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	db1b      	blt.n	800ef12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eede:	4b81      	ldr	r3, [pc, #516]	@ (800f0e4 <tcp_receive+0x26c>)
 800eee0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d106      	bne.n	800eef4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eeea:	4b7f      	ldr	r3, [pc, #508]	@ (800f0e8 <tcp_receive+0x270>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	db0e      	blt.n	800ef12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eef8:	4b7b      	ldr	r3, [pc, #492]	@ (800f0e8 <tcp_receive+0x270>)
 800eefa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d125      	bne.n	800ef4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ef00:	4b7a      	ldr	r3, [pc, #488]	@ (800f0ec <tcp_receive+0x274>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	89db      	ldrh	r3, [r3, #14]
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d91c      	bls.n	800ef4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ef12:	4b76      	ldr	r3, [pc, #472]	@ (800f0ec <tcp_receive+0x274>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	89db      	ldrh	r3, [r3, #14]
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d205      	bcs.n	800ef3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ef3c:	4b69      	ldr	r3, [pc, #420]	@ (800f0e4 <tcp_receive+0x26c>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ef44:	4b68      	ldr	r3, [pc, #416]	@ (800f0e8 <tcp_receive+0x270>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ef4c:	4b66      	ldr	r3, [pc, #408]	@ (800f0e8 <tcp_receive+0x270>)
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	dc58      	bgt.n	800f00c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ef5a:	4b65      	ldr	r3, [pc, #404]	@ (800f0f0 <tcp_receive+0x278>)
 800ef5c:	881b      	ldrh	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d14b      	bne.n	800effa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ef6c:	4413      	add	r3, r2
 800ef6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d142      	bne.n	800effa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	db3d      	blt.n	800effa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ef82:	4b59      	ldr	r3, [pc, #356]	@ (800f0e8 <tcp_receive+0x270>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d137      	bne.n	800effa <tcp_receive+0x182>
              found_dupack = 1;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ef94:	2bff      	cmp	r3, #255	@ 0xff
 800ef96:	d007      	beq.n	800efa8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ef9e:	3301      	adds	r3, #1
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800efae:	2b03      	cmp	r3, #3
 800efb0:	d91b      	bls.n	800efea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800efbc:	4413      	add	r3, r2
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d30a      	bcc.n	800efe0 <tcp_receive+0x168>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800efd4:	4413      	add	r3, r2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800efde:	e004      	b.n	800efea <tcp_receive+0x172>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efe6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d902      	bls.n	800effa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f002 fb3f 	bl	8011678 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800effa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800effc:	2b00      	cmp	r3, #0
 800effe:	f040 8161 	bne.w	800f2c4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f00a:	e15b      	b.n	800f2c4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f00c:	4b36      	ldr	r3, [pc, #216]	@ (800f0e8 <tcp_receive+0x270>)
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	3b01      	subs	r3, #1
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f2c0 814e 	blt.w	800f2ba <tcp_receive+0x442>
 800f01e:	4b32      	ldr	r3, [pc, #200]	@ (800f0e8 <tcp_receive+0x270>)
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f026:	1ad3      	subs	r3, r2, r3
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f300 8146 	bgt.w	800f2ba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	8b5b      	ldrh	r3, [r3, #26]
 800f032:	f003 0304 	and.w	r3, r3, #4
 800f036:	2b00      	cmp	r3, #0
 800f038:	d010      	beq.n	800f05c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	8b5b      	ldrh	r3, [r3, #26]
 800f03e:	f023 0304 	bic.w	r3, r3, #4
 800f042:	b29a      	uxth	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f06a:	10db      	asrs	r3, r3, #3
 800f06c:	b21b      	sxth	r3, r3
 800f06e:	b29a      	uxth	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f076:	b29b      	uxth	r3, r3
 800f078:	4413      	add	r3, r2
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	b21a      	sxth	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f084:	4b18      	ldr	r3, [pc, #96]	@ (800f0e8 <tcp_receive+0x270>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	b29a      	uxth	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f08e:	b29b      	uxth	r3, r3
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f09c:	4b12      	ldr	r3, [pc, #72]	@ (800f0e8 <tcp_receive+0x270>)
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7d1b      	ldrb	r3, [r3, #20]
 800f0a8:	2b03      	cmp	r3, #3
 800f0aa:	f240 8097 	bls.w	800f1dc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d245      	bcs.n	800f14a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	8b5b      	ldrh	r3, [r3, #26]
 800f0c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d014      	beq.n	800f0f4 <tcp_receive+0x27c>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e013      	b.n	800f0f6 <tcp_receive+0x27e>
 800f0ce:	bf00      	nop
 800f0d0:	08017ec0 	.word	0x08017ec0
 800f0d4:	080181f0 	.word	0x080181f0
 800f0d8:	08017f0c 	.word	0x08017f0c
 800f0dc:	0801820c 	.word	0x0801820c
 800f0e0:	2000bea8 	.word	0x2000bea8
 800f0e4:	2000be9c 	.word	0x2000be9c
 800f0e8:	2000bea0 	.word	0x2000bea0
 800f0ec:	2000be8c 	.word	0x2000be8c
 800f0f0:	2000bea6 	.word	0x2000bea6
 800f0f4:	2302      	movs	r3, #2
 800f0f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f0fa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f104:	fb12 f303 	smulbb	r3, r2, r3
 800f108:	b29b      	uxth	r3, r3
 800f10a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f10c:	4293      	cmp	r3, r2
 800f10e:	bf28      	it	cs
 800f110:	4613      	movcs	r3, r2
 800f112:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f11a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f11c:	4413      	add	r3, r2
 800f11e:	b29a      	uxth	r2, r3
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f126:	429a      	cmp	r2, r3
 800f128:	d309      	bcc.n	800f13e <tcp_receive+0x2c6>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f130:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f132:	4413      	add	r3, r2
 800f134:	b29a      	uxth	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f13c:	e04e      	b.n	800f1dc <tcp_receive+0x364>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f144:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f148:	e048      	b.n	800f1dc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f150:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f152:	4413      	add	r3, r2
 800f154:	b29a      	uxth	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d309      	bcc.n	800f174 <tcp_receive+0x2fc>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f166:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f168:	4413      	add	r3, r2
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f172:	e004      	b.n	800f17e <tcp_receive+0x306>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f17a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d326      	bcc.n	800f1dc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1ae:	4413      	add	r3, r2
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d30a      	bcc.n	800f1d2 <tcp_receive+0x35a>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1c6:	4413      	add	r3, r2
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f1d0:	e004      	b.n	800f1dc <tcp_receive+0x364>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1e4:	4a98      	ldr	r2, [pc, #608]	@ (800f448 <tcp_receive+0x5d0>)
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7ff fdca 	bl	800ed80 <tcp_free_acked_segments>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1fa:	4a94      	ldr	r2, [pc, #592]	@ (800f44c <tcp_receive+0x5d4>)
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f7ff fdbf 	bl	800ed80 <tcp_free_acked_segments>
 800f202:	4602      	mov	r2, r0
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d104      	bne.n	800f21a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f216:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f218:	e002      	b.n	800f220 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d103      	bne.n	800f236 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f23c:	4b84      	ldr	r3, [pc, #528]	@ (800f450 <tcp_receive+0x5d8>)
 800f23e:	881b      	ldrh	r3, [r3, #0]
 800f240:	4413      	add	r3, r2
 800f242:	b29a      	uxth	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	8b5b      	ldrh	r3, [r3, #26]
 800f24e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f252:	2b00      	cmp	r3, #0
 800f254:	d035      	beq.n	800f2c2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d118      	bne.n	800f290 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00c      	beq.n	800f280 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	4618      	mov	r0, r3
 800f274:	f7fa fe67 	bl	8009f46 <lwip_htonl>
 800f278:	4603      	mov	r3, r0
 800f27a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	dc20      	bgt.n	800f2c2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	8b5b      	ldrh	r3, [r3, #26]
 800f284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f288:	b29a      	uxth	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f28e:	e018      	b.n	800f2c2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fa fe52 	bl	8009f46 <lwip_htonl>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	1ae3      	subs	r3, r4, r3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	dc0b      	bgt.n	800f2c2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	8b5b      	ldrh	r3, [r3, #26]
 800f2ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2b8:	e003      	b.n	800f2c2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f002 fbc8 	bl	8011a50 <tcp_send_empty_ack>
 800f2c0:	e000      	b.n	800f2c4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2c2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d05b      	beq.n	800f384 <tcp_receive+0x50c>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2d0:	4b60      	ldr	r3, [pc, #384]	@ (800f454 <tcp_receive+0x5dc>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	1ad3      	subs	r3, r2, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	da54      	bge.n	800f384 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f2da:	4b5f      	ldr	r3, [pc, #380]	@ (800f458 <tcp_receive+0x5e0>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f2ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f2f8:	10db      	asrs	r3, r3, #3
 800f2fa:	b21b      	sxth	r3, r3
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	1ad3      	subs	r3, r2, r3
 800f300:	b29b      	uxth	r3, r3
 800f302:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f312:	4413      	add	r3, r2
 800f314:	b29b      	uxth	r3, r3
 800f316:	b21a      	sxth	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f31c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f320:	2b00      	cmp	r3, #0
 800f322:	da05      	bge.n	800f330 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f328:	425b      	negs	r3, r3
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f330:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f33a:	109b      	asrs	r3, r3, #2
 800f33c:	b21b      	sxth	r3, r3
 800f33e:	b29b      	uxth	r3, r3
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	b29b      	uxth	r3, r3
 800f344:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f34e:	b29a      	uxth	r2, r3
 800f350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f354:	4413      	add	r3, r2
 800f356:	b29b      	uxth	r3, r3
 800f358:	b21a      	sxth	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f364:	10db      	asrs	r3, r3, #3
 800f366:	b21b      	sxth	r3, r3
 800f368:	b29a      	uxth	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f370:	b29b      	uxth	r3, r3
 800f372:	4413      	add	r3, r2
 800f374:	b29b      	uxth	r3, r3
 800f376:	b21a      	sxth	r2, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f384:	4b35      	ldr	r3, [pc, #212]	@ (800f45c <tcp_receive+0x5e4>)
 800f386:	881b      	ldrh	r3, [r3, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f000 84df 	beq.w	800fd4c <tcp_receive+0xed4>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	7d1b      	ldrb	r3, [r3, #20]
 800f392:	2b06      	cmp	r3, #6
 800f394:	f200 84da 	bhi.w	800fd4c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f39c:	4b30      	ldr	r3, [pc, #192]	@ (800f460 <tcp_receive+0x5e8>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	1ad3      	subs	r3, r2, r3
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f2c0 808f 	blt.w	800f4c8 <tcp_receive+0x650>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3ae:	4b2b      	ldr	r3, [pc, #172]	@ (800f45c <tcp_receive+0x5e4>)
 800f3b0:	881b      	ldrh	r3, [r3, #0]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	4b2a      	ldr	r3, [pc, #168]	@ (800f460 <tcp_receive+0x5e8>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	440b      	add	r3, r1
 800f3ba:	1ad3      	subs	r3, r2, r3
 800f3bc:	3301      	adds	r3, #1
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f300 8082 	bgt.w	800f4c8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f3c4:	4b27      	ldr	r3, [pc, #156]	@ (800f464 <tcp_receive+0x5ec>)
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3ce:	4b24      	ldr	r3, [pc, #144]	@ (800f460 <tcp_receive+0x5e8>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f3d6:	4b23      	ldr	r3, [pc, #140]	@ (800f464 <tcp_receive+0x5ec>)
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d106      	bne.n	800f3ec <tcp_receive+0x574>
 800f3de:	4b22      	ldr	r3, [pc, #136]	@ (800f468 <tcp_receive+0x5f0>)
 800f3e0:	f240 5294 	movw	r2, #1428	@ 0x594
 800f3e4:	4921      	ldr	r1, [pc, #132]	@ (800f46c <tcp_receive+0x5f4>)
 800f3e6:	4822      	ldr	r0, [pc, #136]	@ (800f470 <tcp_receive+0x5f8>)
 800f3e8:	f005 fec4 	bl	8015174 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d906      	bls.n	800f404 <tcp_receive+0x58c>
 800f3f6:	4b1c      	ldr	r3, [pc, #112]	@ (800f468 <tcp_receive+0x5f0>)
 800f3f8:	f240 5295 	movw	r2, #1429	@ 0x595
 800f3fc:	491d      	ldr	r1, [pc, #116]	@ (800f474 <tcp_receive+0x5fc>)
 800f3fe:	481c      	ldr	r0, [pc, #112]	@ (800f470 <tcp_receive+0x5f8>)
 800f400:	f005 feb8 	bl	8015174 <iprintf>
      off = (u16_t)off32;
 800f404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f406:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f40a:	4b16      	ldr	r3, [pc, #88]	@ (800f464 <tcp_receive+0x5ec>)
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	891b      	ldrh	r3, [r3, #8]
 800f410:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f414:	429a      	cmp	r2, r3
 800f416:	d906      	bls.n	800f426 <tcp_receive+0x5ae>
 800f418:	4b13      	ldr	r3, [pc, #76]	@ (800f468 <tcp_receive+0x5f0>)
 800f41a:	f240 5297 	movw	r2, #1431	@ 0x597
 800f41e:	4916      	ldr	r1, [pc, #88]	@ (800f478 <tcp_receive+0x600>)
 800f420:	4813      	ldr	r0, [pc, #76]	@ (800f470 <tcp_receive+0x5f8>)
 800f422:	f005 fea7 	bl	8015174 <iprintf>
      inseg.len -= off;
 800f426:	4b0f      	ldr	r3, [pc, #60]	@ (800f464 <tcp_receive+0x5ec>)
 800f428:	891a      	ldrh	r2, [r3, #8]
 800f42a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	b29a      	uxth	r2, r3
 800f432:	4b0c      	ldr	r3, [pc, #48]	@ (800f464 <tcp_receive+0x5ec>)
 800f434:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f436:	4b0b      	ldr	r3, [pc, #44]	@ (800f464 <tcp_receive+0x5ec>)
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	891a      	ldrh	r2, [r3, #8]
 800f43c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f444:	e02a      	b.n	800f49c <tcp_receive+0x624>
 800f446:	bf00      	nop
 800f448:	08018228 	.word	0x08018228
 800f44c:	08018230 	.word	0x08018230
 800f450:	2000bea4 	.word	0x2000bea4
 800f454:	2000bea0 	.word	0x2000bea0
 800f458:	2000be64 	.word	0x2000be64
 800f45c:	2000bea6 	.word	0x2000bea6
 800f460:	2000be9c 	.word	0x2000be9c
 800f464:	2000be7c 	.word	0x2000be7c
 800f468:	08017ec0 	.word	0x08017ec0
 800f46c:	08018238 	.word	0x08018238
 800f470:	08017f0c 	.word	0x08017f0c
 800f474:	08018248 	.word	0x08018248
 800f478:	08018258 	.word	0x08018258
        off -= p->len;
 800f47c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f47e:	895b      	ldrh	r3, [r3, #10]
 800f480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f48a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f48c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f48e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f492:	2200      	movs	r2, #0
 800f494:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f49c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f49e:	895b      	ldrh	r3, [r3, #10]
 800f4a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d8e9      	bhi.n	800f47c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f4a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f4b0:	f7fc f89c 	bl	800b5ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b8:	4a90      	ldr	r2, [pc, #576]	@ (800f6fc <tcp_receive+0x884>)
 800f4ba:	6013      	str	r3, [r2, #0]
 800f4bc:	4b90      	ldr	r3, [pc, #576]	@ (800f700 <tcp_receive+0x888>)
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	4a8e      	ldr	r2, [pc, #568]	@ (800f6fc <tcp_receive+0x884>)
 800f4c2:	6812      	ldr	r2, [r2, #0]
 800f4c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f4c6:	e00d      	b.n	800f4e4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f4c8:	4b8c      	ldr	r3, [pc, #560]	@ (800f6fc <tcp_receive+0x884>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4d0:	1ad3      	subs	r3, r2, r3
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	da06      	bge.n	800f4e4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	8b5b      	ldrh	r3, [r3, #26]
 800f4da:	f043 0302 	orr.w	r3, r3, #2
 800f4de:	b29a      	uxth	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f4e4:	4b85      	ldr	r3, [pc, #532]	@ (800f6fc <tcp_receive+0x884>)
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ec:	1ad3      	subs	r3, r2, r3
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f2c0 8427 	blt.w	800fd42 <tcp_receive+0xeca>
 800f4f4:	4b81      	ldr	r3, [pc, #516]	@ (800f6fc <tcp_receive+0x884>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4fc:	6879      	ldr	r1, [r7, #4]
 800f4fe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f500:	440b      	add	r3, r1
 800f502:	1ad3      	subs	r3, r2, r3
 800f504:	3301      	adds	r3, #1
 800f506:	2b00      	cmp	r3, #0
 800f508:	f300 841b 	bgt.w	800fd42 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f510:	4b7a      	ldr	r3, [pc, #488]	@ (800f6fc <tcp_receive+0x884>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	429a      	cmp	r2, r3
 800f516:	f040 8298 	bne.w	800fa4a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f51a:	4b79      	ldr	r3, [pc, #484]	@ (800f700 <tcp_receive+0x888>)
 800f51c:	891c      	ldrh	r4, [r3, #8]
 800f51e:	4b78      	ldr	r3, [pc, #480]	@ (800f700 <tcp_receive+0x888>)
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	899b      	ldrh	r3, [r3, #12]
 800f524:	b29b      	uxth	r3, r3
 800f526:	4618      	mov	r0, r3
 800f528:	f7fa fcf8 	bl	8009f1c <lwip_htons>
 800f52c:	4603      	mov	r3, r0
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	f003 0303 	and.w	r3, r3, #3
 800f534:	2b00      	cmp	r3, #0
 800f536:	d001      	beq.n	800f53c <tcp_receive+0x6c4>
 800f538:	2301      	movs	r3, #1
 800f53a:	e000      	b.n	800f53e <tcp_receive+0x6c6>
 800f53c:	2300      	movs	r3, #0
 800f53e:	4423      	add	r3, r4
 800f540:	b29a      	uxth	r2, r3
 800f542:	4b70      	ldr	r3, [pc, #448]	@ (800f704 <tcp_receive+0x88c>)
 800f544:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f54a:	4b6e      	ldr	r3, [pc, #440]	@ (800f704 <tcp_receive+0x88c>)
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d274      	bcs.n	800f63c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f552:	4b6b      	ldr	r3, [pc, #428]	@ (800f700 <tcp_receive+0x888>)
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	899b      	ldrh	r3, [r3, #12]
 800f558:	b29b      	uxth	r3, r3
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fa fcde 	bl	8009f1c <lwip_htons>
 800f560:	4603      	mov	r3, r0
 800f562:	b2db      	uxtb	r3, r3
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d01e      	beq.n	800f5aa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f56c:	4b64      	ldr	r3, [pc, #400]	@ (800f700 <tcp_receive+0x888>)
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	899b      	ldrh	r3, [r3, #12]
 800f572:	b29b      	uxth	r3, r3
 800f574:	b21b      	sxth	r3, r3
 800f576:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f57a:	b21c      	sxth	r4, r3
 800f57c:	4b60      	ldr	r3, [pc, #384]	@ (800f700 <tcp_receive+0x888>)
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	899b      	ldrh	r3, [r3, #12]
 800f582:	b29b      	uxth	r3, r3
 800f584:	4618      	mov	r0, r3
 800f586:	f7fa fcc9 	bl	8009f1c <lwip_htons>
 800f58a:	4603      	mov	r3, r0
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f592:	b29b      	uxth	r3, r3
 800f594:	4618      	mov	r0, r3
 800f596:	f7fa fcc1 	bl	8009f1c <lwip_htons>
 800f59a:	4603      	mov	r3, r0
 800f59c:	b21b      	sxth	r3, r3
 800f59e:	4323      	orrs	r3, r4
 800f5a0:	b21a      	sxth	r2, r3
 800f5a2:	4b57      	ldr	r3, [pc, #348]	@ (800f700 <tcp_receive+0x888>)
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	b292      	uxth	r2, r2
 800f5a8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f5ae:	4b54      	ldr	r3, [pc, #336]	@ (800f700 <tcp_receive+0x888>)
 800f5b0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f5b2:	4b53      	ldr	r3, [pc, #332]	@ (800f700 <tcp_receive+0x888>)
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	899b      	ldrh	r3, [r3, #12]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fa fcae 	bl	8009f1c <lwip_htons>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	f003 0302 	and.w	r3, r3, #2
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d005      	beq.n	800f5d8 <tcp_receive+0x760>
            inseg.len -= 1;
 800f5cc:	4b4c      	ldr	r3, [pc, #304]	@ (800f700 <tcp_receive+0x888>)
 800f5ce:	891b      	ldrh	r3, [r3, #8]
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	4b4a      	ldr	r3, [pc, #296]	@ (800f700 <tcp_receive+0x888>)
 800f5d6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f5d8:	4b49      	ldr	r3, [pc, #292]	@ (800f700 <tcp_receive+0x888>)
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	4a48      	ldr	r2, [pc, #288]	@ (800f700 <tcp_receive+0x888>)
 800f5de:	8912      	ldrh	r2, [r2, #8]
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fb ff02 	bl	800b3ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f5e8:	4b45      	ldr	r3, [pc, #276]	@ (800f700 <tcp_receive+0x888>)
 800f5ea:	891c      	ldrh	r4, [r3, #8]
 800f5ec:	4b44      	ldr	r3, [pc, #272]	@ (800f700 <tcp_receive+0x888>)
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	899b      	ldrh	r3, [r3, #12]
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fa fc91 	bl	8009f1c <lwip_htons>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	f003 0303 	and.w	r3, r3, #3
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <tcp_receive+0x792>
 800f606:	2301      	movs	r3, #1
 800f608:	e000      	b.n	800f60c <tcp_receive+0x794>
 800f60a:	2300      	movs	r3, #0
 800f60c:	4423      	add	r3, r4
 800f60e:	b29a      	uxth	r2, r3
 800f610:	4b3c      	ldr	r3, [pc, #240]	@ (800f704 <tcp_receive+0x88c>)
 800f612:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f614:	4b3b      	ldr	r3, [pc, #236]	@ (800f704 <tcp_receive+0x88c>)
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	461a      	mov	r2, r3
 800f61a:	4b38      	ldr	r3, [pc, #224]	@ (800f6fc <tcp_receive+0x884>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	441a      	add	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f624:	6879      	ldr	r1, [r7, #4]
 800f626:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f628:	440b      	add	r3, r1
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d006      	beq.n	800f63c <tcp_receive+0x7c4>
 800f62e:	4b36      	ldr	r3, [pc, #216]	@ (800f708 <tcp_receive+0x890>)
 800f630:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f634:	4935      	ldr	r1, [pc, #212]	@ (800f70c <tcp_receive+0x894>)
 800f636:	4836      	ldr	r0, [pc, #216]	@ (800f710 <tcp_receive+0x898>)
 800f638:	f005 fd9c 	bl	8015174 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 80e6 	beq.w	800f812 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f646:	4b2e      	ldr	r3, [pc, #184]	@ (800f700 <tcp_receive+0x888>)
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	899b      	ldrh	r3, [r3, #12]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fa fc64 	bl	8009f1c <lwip_htons>
 800f654:	4603      	mov	r3, r0
 800f656:	b2db      	uxtb	r3, r3
 800f658:	f003 0301 	and.w	r3, r3, #1
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d010      	beq.n	800f682 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f660:	e00a      	b.n	800f678 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f666:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f7fd fcc5 	bl	800d002 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d1f0      	bne.n	800f662 <tcp_receive+0x7ea>
 800f680:	e0c7      	b.n	800f812 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f686:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f688:	e051      	b.n	800f72e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	899b      	ldrh	r3, [r3, #12]
 800f690:	b29b      	uxth	r3, r3
 800f692:	4618      	mov	r0, r3
 800f694:	f7fa fc42 	bl	8009f1c <lwip_htons>
 800f698:	4603      	mov	r3, r0
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	f003 0301 	and.w	r3, r3, #1
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d03c      	beq.n	800f71e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f6a4:	4b16      	ldr	r3, [pc, #88]	@ (800f700 <tcp_receive+0x888>)
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	899b      	ldrh	r3, [r3, #12]
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fa fc35 	bl	8009f1c <lwip_htons>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d12f      	bne.n	800f71e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f6be:	4b10      	ldr	r3, [pc, #64]	@ (800f700 <tcp_receive+0x888>)
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	899b      	ldrh	r3, [r3, #12]
 800f6c4:	b29c      	uxth	r4, r3
 800f6c6:	2001      	movs	r0, #1
 800f6c8:	f7fa fc28 	bl	8009f1c <lwip_htons>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f700 <tcp_receive+0x888>)
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	4322      	orrs	r2, r4
 800f6d6:	b292      	uxth	r2, r2
 800f6d8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f6da:	4b09      	ldr	r3, [pc, #36]	@ (800f700 <tcp_receive+0x888>)
 800f6dc:	891c      	ldrh	r4, [r3, #8]
 800f6de:	4b08      	ldr	r3, [pc, #32]	@ (800f700 <tcp_receive+0x888>)
 800f6e0:	68db      	ldr	r3, [r3, #12]
 800f6e2:	899b      	ldrh	r3, [r3, #12]
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fa fc18 	bl	8009f1c <lwip_htons>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	f003 0303 	and.w	r3, r3, #3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00d      	beq.n	800f714 <tcp_receive+0x89c>
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	e00c      	b.n	800f716 <tcp_receive+0x89e>
 800f6fc:	2000be9c 	.word	0x2000be9c
 800f700:	2000be7c 	.word	0x2000be7c
 800f704:	2000bea6 	.word	0x2000bea6
 800f708:	08017ec0 	.word	0x08017ec0
 800f70c:	08018268 	.word	0x08018268
 800f710:	08017f0c 	.word	0x08017f0c
 800f714:	2300      	movs	r3, #0
 800f716:	4423      	add	r3, r4
 800f718:	b29a      	uxth	r2, r3
 800f71a:	4b98      	ldr	r3, [pc, #608]	@ (800f97c <tcp_receive+0xb04>)
 800f71c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f720:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f728:	6938      	ldr	r0, [r7, #16]
 800f72a:	f7fd fc6a 	bl	800d002 <tcp_seg_free>
            while (next &&
 800f72e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00e      	beq.n	800f752 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f734:	4b91      	ldr	r3, [pc, #580]	@ (800f97c <tcp_receive+0xb04>)
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	461a      	mov	r2, r3
 800f73a:	4b91      	ldr	r3, [pc, #580]	@ (800f980 <tcp_receive+0xb08>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	441a      	add	r2, r3
 800f740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f748:	8909      	ldrh	r1, [r1, #8]
 800f74a:	440b      	add	r3, r1
 800f74c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f74e:	2b00      	cmp	r3, #0
 800f750:	da9b      	bge.n	800f68a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f754:	2b00      	cmp	r3, #0
 800f756:	d059      	beq.n	800f80c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f758:	4b88      	ldr	r3, [pc, #544]	@ (800f97c <tcp_receive+0xb04>)
 800f75a:	881b      	ldrh	r3, [r3, #0]
 800f75c:	461a      	mov	r2, r3
 800f75e:	4b88      	ldr	r3, [pc, #544]	@ (800f980 <tcp_receive+0xb08>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	441a      	add	r2, r3
 800f764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	dd4d      	ble.n	800f80c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	b29a      	uxth	r2, r3
 800f778:	4b81      	ldr	r3, [pc, #516]	@ (800f980 <tcp_receive+0xb08>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	1ad3      	subs	r3, r2, r3
 800f780:	b29a      	uxth	r2, r3
 800f782:	4b80      	ldr	r3, [pc, #512]	@ (800f984 <tcp_receive+0xb0c>)
 800f784:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f786:	4b7f      	ldr	r3, [pc, #508]	@ (800f984 <tcp_receive+0xb0c>)
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	899b      	ldrh	r3, [r3, #12]
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fa fbc4 	bl	8009f1c <lwip_htons>
 800f794:	4603      	mov	r3, r0
 800f796:	b2db      	uxtb	r3, r3
 800f798:	f003 0302 	and.w	r3, r3, #2
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d005      	beq.n	800f7ac <tcp_receive+0x934>
                inseg.len -= 1;
 800f7a0:	4b78      	ldr	r3, [pc, #480]	@ (800f984 <tcp_receive+0xb0c>)
 800f7a2:	891b      	ldrh	r3, [r3, #8]
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	4b76      	ldr	r3, [pc, #472]	@ (800f984 <tcp_receive+0xb0c>)
 800f7aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f7ac:	4b75      	ldr	r3, [pc, #468]	@ (800f984 <tcp_receive+0xb0c>)
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4a74      	ldr	r2, [pc, #464]	@ (800f984 <tcp_receive+0xb0c>)
 800f7b2:	8912      	ldrh	r2, [r2, #8]
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fb fe18 	bl	800b3ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f7bc:	4b71      	ldr	r3, [pc, #452]	@ (800f984 <tcp_receive+0xb0c>)
 800f7be:	891c      	ldrh	r4, [r3, #8]
 800f7c0:	4b70      	ldr	r3, [pc, #448]	@ (800f984 <tcp_receive+0xb0c>)
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	899b      	ldrh	r3, [r3, #12]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fa fba7 	bl	8009f1c <lwip_htons>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	f003 0303 	and.w	r3, r3, #3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <tcp_receive+0x966>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e000      	b.n	800f7e0 <tcp_receive+0x968>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	4423      	add	r3, r4
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	4b65      	ldr	r3, [pc, #404]	@ (800f97c <tcp_receive+0xb04>)
 800f7e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f7e8:	4b64      	ldr	r3, [pc, #400]	@ (800f97c <tcp_receive+0xb04>)
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	4b64      	ldr	r3, [pc, #400]	@ (800f980 <tcp_receive+0xb08>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	441a      	add	r2, r3
 800f7f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d006      	beq.n	800f80c <tcp_receive+0x994>
 800f7fe:	4b62      	ldr	r3, [pc, #392]	@ (800f988 <tcp_receive+0xb10>)
 800f800:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f804:	4961      	ldr	r1, [pc, #388]	@ (800f98c <tcp_receive+0xb14>)
 800f806:	4862      	ldr	r0, [pc, #392]	@ (800f990 <tcp_receive+0xb18>)
 800f808:	f005 fcb4 	bl	8015174 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f810:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f812:	4b5a      	ldr	r3, [pc, #360]	@ (800f97c <tcp_receive+0xb04>)
 800f814:	881b      	ldrh	r3, [r3, #0]
 800f816:	461a      	mov	r2, r3
 800f818:	4b59      	ldr	r3, [pc, #356]	@ (800f980 <tcp_receive+0xb08>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	441a      	add	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f826:	4b55      	ldr	r3, [pc, #340]	@ (800f97c <tcp_receive+0xb04>)
 800f828:	881b      	ldrh	r3, [r3, #0]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d206      	bcs.n	800f83c <tcp_receive+0x9c4>
 800f82e:	4b56      	ldr	r3, [pc, #344]	@ (800f988 <tcp_receive+0xb10>)
 800f830:	f240 6207 	movw	r2, #1543	@ 0x607
 800f834:	4957      	ldr	r1, [pc, #348]	@ (800f994 <tcp_receive+0xb1c>)
 800f836:	4856      	ldr	r0, [pc, #344]	@ (800f990 <tcp_receive+0xb18>)
 800f838:	f005 fc9c 	bl	8015174 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f840:	4b4e      	ldr	r3, [pc, #312]	@ (800f97c <tcp_receive+0xb04>)
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	b29a      	uxth	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7fc feb1 	bl	800c5b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f852:	4b4c      	ldr	r3, [pc, #304]	@ (800f984 <tcp_receive+0xb0c>)
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	891b      	ldrh	r3, [r3, #8]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d006      	beq.n	800f86a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f85c:	4b49      	ldr	r3, [pc, #292]	@ (800f984 <tcp_receive+0xb0c>)
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	4a4d      	ldr	r2, [pc, #308]	@ (800f998 <tcp_receive+0xb20>)
 800f862:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f864:	4b47      	ldr	r3, [pc, #284]	@ (800f984 <tcp_receive+0xb0c>)
 800f866:	2200      	movs	r2, #0
 800f868:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f86a:	4b46      	ldr	r3, [pc, #280]	@ (800f984 <tcp_receive+0xb0c>)
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	899b      	ldrh	r3, [r3, #12]
 800f870:	b29b      	uxth	r3, r3
 800f872:	4618      	mov	r0, r3
 800f874:	f7fa fb52 	bl	8009f1c <lwip_htons>
 800f878:	4603      	mov	r3, r0
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	f003 0301 	and.w	r3, r3, #1
 800f880:	2b00      	cmp	r3, #0
 800f882:	f000 80b8 	beq.w	800f9f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f886:	4b45      	ldr	r3, [pc, #276]	@ (800f99c <tcp_receive+0xb24>)
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	f043 0320 	orr.w	r3, r3, #32
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	4b42      	ldr	r3, [pc, #264]	@ (800f99c <tcp_receive+0xb24>)
 800f892:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f894:	e0af      	b.n	800f9f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f89a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	4a36      	ldr	r2, [pc, #216]	@ (800f980 <tcp_receive+0xb08>)
 800f8a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	891b      	ldrh	r3, [r3, #8]
 800f8ac:	461c      	mov	r4, r3
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	899b      	ldrh	r3, [r3, #12]
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fa fb30 	bl	8009f1c <lwip_htons>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	f003 0303 	and.w	r3, r3, #3
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d001      	beq.n	800f8cc <tcp_receive+0xa54>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e000      	b.n	800f8ce <tcp_receive+0xa56>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	191a      	adds	r2, r3, r4
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8d4:	441a      	add	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8de:	461c      	mov	r4, r3
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	891b      	ldrh	r3, [r3, #8]
 800f8e4:	461d      	mov	r5, r3
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	899b      	ldrh	r3, [r3, #12]
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fa fb14 	bl	8009f1c <lwip_htons>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	f003 0303 	and.w	r3, r3, #3
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d001      	beq.n	800f904 <tcp_receive+0xa8c>
 800f900:	2301      	movs	r3, #1
 800f902:	e000      	b.n	800f906 <tcp_receive+0xa8e>
 800f904:	2300      	movs	r3, #0
 800f906:	442b      	add	r3, r5
 800f908:	429c      	cmp	r4, r3
 800f90a:	d206      	bcs.n	800f91a <tcp_receive+0xaa2>
 800f90c:	4b1e      	ldr	r3, [pc, #120]	@ (800f988 <tcp_receive+0xb10>)
 800f90e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f912:	4923      	ldr	r1, [pc, #140]	@ (800f9a0 <tcp_receive+0xb28>)
 800f914:	481e      	ldr	r0, [pc, #120]	@ (800f990 <tcp_receive+0xb18>)
 800f916:	f005 fc2d 	bl	8015174 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	891b      	ldrh	r3, [r3, #8]
 800f91e:	461c      	mov	r4, r3
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	899b      	ldrh	r3, [r3, #12]
 800f926:	b29b      	uxth	r3, r3
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fa faf7 	bl	8009f1c <lwip_htons>
 800f92e:	4603      	mov	r3, r0
 800f930:	b2db      	uxtb	r3, r3
 800f932:	f003 0303 	and.w	r3, r3, #3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d001      	beq.n	800f93e <tcp_receive+0xac6>
 800f93a:	2301      	movs	r3, #1
 800f93c:	e000      	b.n	800f940 <tcp_receive+0xac8>
 800f93e:	2300      	movs	r3, #0
 800f940:	1919      	adds	r1, r3, r4
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f946:	b28b      	uxth	r3, r1
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7fc fe2f 	bl	800c5b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	891b      	ldrh	r3, [r3, #8]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d028      	beq.n	800f9b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f960:	4b0d      	ldr	r3, [pc, #52]	@ (800f998 <tcp_receive+0xb20>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d01d      	beq.n	800f9a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f968:	4b0b      	ldr	r3, [pc, #44]	@ (800f998 <tcp_receive+0xb20>)
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	4619      	mov	r1, r3
 800f972:	4610      	mov	r0, r2
 800f974:	f7fb ff8e 	bl	800b894 <pbuf_cat>
 800f978:	e018      	b.n	800f9ac <tcp_receive+0xb34>
 800f97a:	bf00      	nop
 800f97c:	2000bea6 	.word	0x2000bea6
 800f980:	2000be9c 	.word	0x2000be9c
 800f984:	2000be7c 	.word	0x2000be7c
 800f988:	08017ec0 	.word	0x08017ec0
 800f98c:	080182a0 	.word	0x080182a0
 800f990:	08017f0c 	.word	0x08017f0c
 800f994:	080182dc 	.word	0x080182dc
 800f998:	2000beac 	.word	0x2000beac
 800f99c:	2000bea9 	.word	0x2000bea9
 800f9a0:	080182fc 	.word	0x080182fc
            } else {
              recv_data = cseg->p;
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	4a70      	ldr	r2, [pc, #448]	@ (800fb6c <tcp_receive+0xcf4>)
 800f9aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	899b      	ldrh	r3, [r3, #12]
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fa faae 	bl	8009f1c <lwip_htons>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	f003 0301 	and.w	r3, r3, #1
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00d      	beq.n	800f9e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f9cc:	4b68      	ldr	r3, [pc, #416]	@ (800fb70 <tcp_receive+0xcf8>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	f043 0320 	orr.w	r3, r3, #32
 800f9d4:	b2da      	uxtb	r2, r3
 800f9d6:	4b66      	ldr	r3, [pc, #408]	@ (800fb70 <tcp_receive+0xcf8>)
 800f9d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	7d1b      	ldrb	r3, [r3, #20]
 800f9de:	2b04      	cmp	r3, #4
 800f9e0:	d102      	bne.n	800f9e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2207      	movs	r2, #7
 800f9e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f9f0:	68b8      	ldr	r0, [r7, #8]
 800f9f2:	f7fd fb06 	bl	800d002 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d008      	beq.n	800fa10 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	685a      	ldr	r2, [r3, #4]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	f43f af43 	beq.w	800f896 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8b5b      	ldrh	r3, [r3, #26]
 800fa14:	f003 0301 	and.w	r3, r3, #1
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00e      	beq.n	800fa3a <tcp_receive+0xbc2>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	8b5b      	ldrh	r3, [r3, #26]
 800fa20:	f023 0301 	bic.w	r3, r3, #1
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	835a      	strh	r2, [r3, #26]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	8b5b      	ldrh	r3, [r3, #26]
 800fa2e:	f043 0302 	orr.w	r3, r3, #2
 800fa32:	b29a      	uxth	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa38:	e187      	b.n	800fd4a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	8b5b      	ldrh	r3, [r3, #26]
 800fa3e:	f043 0301 	orr.w	r3, r3, #1
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa48:	e17f      	b.n	800fd4a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d106      	bne.n	800fa60 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fa52:	4848      	ldr	r0, [pc, #288]	@ (800fb74 <tcp_receive+0xcfc>)
 800fa54:	f7fd faee 	bl	800d034 <tcp_seg_copy>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	675a      	str	r2, [r3, #116]	@ 0x74
 800fa5e:	e16c      	b.n	800fd3a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fa60:	2300      	movs	r3, #0
 800fa62:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa68:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa6a:	e156      	b.n	800fd1a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	685a      	ldr	r2, [r3, #4]
 800fa72:	4b41      	ldr	r3, [pc, #260]	@ (800fb78 <tcp_receive+0xd00>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d11d      	bne.n	800fab6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fa7a:	4b3e      	ldr	r3, [pc, #248]	@ (800fb74 <tcp_receive+0xcfc>)
 800fa7c:	891a      	ldrh	r2, [r3, #8]
 800fa7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa80:	891b      	ldrh	r3, [r3, #8]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	f240 814e 	bls.w	800fd24 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa88:	483a      	ldr	r0, [pc, #232]	@ (800fb74 <tcp_receive+0xcfc>)
 800fa8a:	f7fd fad3 	bl	800d034 <tcp_seg_copy>
 800fa8e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f000 8148 	beq.w	800fd28 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800fa98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fa9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa0:	697a      	ldr	r2, [r7, #20]
 800faa2:	601a      	str	r2, [r3, #0]
 800faa4:	e002      	b.n	800faac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800faac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800faae:	6978      	ldr	r0, [r7, #20]
 800fab0:	f7ff f8de 	bl	800ec70 <tcp_oos_insert_segment>
                }
                break;
 800fab4:	e138      	b.n	800fd28 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d117      	bne.n	800faec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fabc:	4b2e      	ldr	r3, [pc, #184]	@ (800fb78 <tcp_receive+0xd00>)
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	2b00      	cmp	r3, #0
 800faca:	da57      	bge.n	800fb7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800facc:	4829      	ldr	r0, [pc, #164]	@ (800fb74 <tcp_receive+0xcfc>)
 800face:	f7fd fab1 	bl	800d034 <tcp_seg_copy>
 800fad2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f000 8128 	beq.w	800fd2c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	69ba      	ldr	r2, [r7, #24]
 800fae0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fae2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fae4:	69b8      	ldr	r0, [r7, #24]
 800fae6:	f7ff f8c3 	bl	800ec70 <tcp_oos_insert_segment>
                  }
                  break;
 800faea:	e11f      	b.n	800fd2c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800faec:	4b22      	ldr	r3, [pc, #136]	@ (800fb78 <tcp_receive+0xd00>)
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	1ad3      	subs	r3, r2, r3
 800faf8:	3b01      	subs	r3, #1
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	db3e      	blt.n	800fb7c <tcp_receive+0xd04>
 800fafe:	4b1e      	ldr	r3, [pc, #120]	@ (800fb78 <tcp_receive+0xd00>)
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	dc35      	bgt.n	800fb7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb10:	4818      	ldr	r0, [pc, #96]	@ (800fb74 <tcp_receive+0xcfc>)
 800fb12:	f7fd fa8f 	bl	800d034 <tcp_seg_copy>
 800fb16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	f000 8108 	beq.w	800fd30 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb28:	8912      	ldrh	r2, [r2, #8]
 800fb2a:	441a      	add	r2, r3
 800fb2c:	4b12      	ldr	r3, [pc, #72]	@ (800fb78 <tcp_receive+0xd00>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	dd12      	ble.n	800fb5c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fb36:	4b10      	ldr	r3, [pc, #64]	@ (800fb78 <tcp_receive+0xd00>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb4e:	685a      	ldr	r2, [r3, #4]
 800fb50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb52:	891b      	ldrh	r3, [r3, #8]
 800fb54:	4619      	mov	r1, r3
 800fb56:	4610      	mov	r0, r2
 800fb58:	f7fb fc48 	bl	800b3ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fb5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb5e:	69fa      	ldr	r2, [r7, #28]
 800fb60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fb62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fb64:	69f8      	ldr	r0, [r7, #28]
 800fb66:	f7ff f883 	bl	800ec70 <tcp_oos_insert_segment>
                  }
                  break;
 800fb6a:	e0e1      	b.n	800fd30 <tcp_receive+0xeb8>
 800fb6c:	2000beac 	.word	0x2000beac
 800fb70:	2000bea9 	.word	0x2000bea9
 800fb74:	2000be7c 	.word	0x2000be7c
 800fb78:	2000be9c 	.word	0x2000be9c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f040 80c5 	bne.w	800fd14 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fb8a:	4b7f      	ldr	r3, [pc, #508]	@ (800fd88 <tcp_receive+0xf10>)
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f340 80bc 	ble.w	800fd14 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	899b      	ldrh	r3, [r3, #12]
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fa f9b9 	bl	8009f1c <lwip_htons>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	f003 0301 	and.w	r3, r3, #1
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f040 80be 	bne.w	800fd34 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fbb8:	4874      	ldr	r0, [pc, #464]	@ (800fd8c <tcp_receive+0xf14>)
 800fbba:	f7fd fa3b 	bl	800d034 <tcp_seg_copy>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f000 80b5 	beq.w	800fd38 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fbd6:	8912      	ldrh	r2, [r2, #8]
 800fbd8:	441a      	add	r2, r3
 800fbda:	4b6b      	ldr	r3, [pc, #428]	@ (800fd88 <tcp_receive+0xf10>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	dd12      	ble.n	800fc0a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fbe4:	4b68      	ldr	r3, [pc, #416]	@ (800fd88 <tcp_receive+0xf10>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	1ad3      	subs	r3, r2, r3
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfc:	685a      	ldr	r2, [r3, #4]
 800fbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc00:	891b      	ldrh	r3, [r3, #8]
 800fc02:	4619      	mov	r1, r3
 800fc04:	4610      	mov	r0, r2
 800fc06:	f7fb fbf1 	bl	800b3ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fc0a:	4b61      	ldr	r3, [pc, #388]	@ (800fd90 <tcp_receive+0xf18>)
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4b5d      	ldr	r3, [pc, #372]	@ (800fd88 <tcp_receive+0xf10>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	441a      	add	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc1a:	6879      	ldr	r1, [r7, #4]
 800fc1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fc1e:	440b      	add	r3, r1
 800fc20:	1ad3      	subs	r3, r2, r3
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f340 8088 	ble.w	800fd38 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	899b      	ldrh	r3, [r3, #12]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fa f972 	bl	8009f1c <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	f003 0301 	and.w	r3, r3, #1
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d021      	beq.n	800fc88 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	899b      	ldrh	r3, [r3, #12]
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	b21b      	sxth	r3, r3
 800fc50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fc54:	b21c      	sxth	r4, r3
 800fc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	899b      	ldrh	r3, [r3, #12]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7fa f95b 	bl	8009f1c <lwip_htons>
 800fc66:	4603      	mov	r3, r0
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7fa f953 	bl	8009f1c <lwip_htons>
 800fc76:	4603      	mov	r3, r0
 800fc78:	b21b      	sxth	r3, r3
 800fc7a:	4323      	orrs	r3, r4
 800fc7c:	b21a      	sxth	r2, r3
 800fc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	b292      	uxth	r2, r2
 800fc86:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc8c:	b29a      	uxth	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc92:	4413      	add	r3, r2
 800fc94:	b299      	uxth	r1, r3
 800fc96:	4b3c      	ldr	r3, [pc, #240]	@ (800fd88 <tcp_receive+0xf10>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	1a8a      	subs	r2, r1, r2
 800fca2:	b292      	uxth	r2, r2
 800fca4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	685a      	ldr	r2, [r3, #4]
 800fcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	891b      	ldrh	r3, [r3, #8]
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	4610      	mov	r0, r2
 800fcb6:	f7fb fb99 	bl	800b3ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	891c      	ldrh	r4, [r3, #8]
 800fcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	899b      	ldrh	r3, [r3, #12]
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7fa f926 	bl	8009f1c <lwip_htons>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	f003 0303 	and.w	r3, r3, #3
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d001      	beq.n	800fce0 <tcp_receive+0xe68>
 800fcdc:	2301      	movs	r3, #1
 800fcde:	e000      	b.n	800fce2 <tcp_receive+0xe6a>
 800fce0:	2300      	movs	r3, #0
 800fce2:	4423      	add	r3, r4
 800fce4:	b29a      	uxth	r2, r3
 800fce6:	4b2a      	ldr	r3, [pc, #168]	@ (800fd90 <tcp_receive+0xf18>)
 800fce8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fcea:	4b29      	ldr	r3, [pc, #164]	@ (800fd90 <tcp_receive+0xf18>)
 800fcec:	881b      	ldrh	r3, [r3, #0]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	4b25      	ldr	r3, [pc, #148]	@ (800fd88 <tcp_receive+0xf10>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	441a      	add	r2, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcfa:	6879      	ldr	r1, [r7, #4]
 800fcfc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fcfe:	440b      	add	r3, r1
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d019      	beq.n	800fd38 <tcp_receive+0xec0>
 800fd04:	4b23      	ldr	r3, [pc, #140]	@ (800fd94 <tcp_receive+0xf1c>)
 800fd06:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800fd0a:	4923      	ldr	r1, [pc, #140]	@ (800fd98 <tcp_receive+0xf20>)
 800fd0c:	4823      	ldr	r0, [pc, #140]	@ (800fd9c <tcp_receive+0xf24>)
 800fd0e:	f005 fa31 	bl	8015174 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fd12:	e011      	b.n	800fd38 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f47f aea5 	bne.w	800fa6c <tcp_receive+0xbf4>
 800fd22:	e00a      	b.n	800fd3a <tcp_receive+0xec2>
                break;
 800fd24:	bf00      	nop
 800fd26:	e008      	b.n	800fd3a <tcp_receive+0xec2>
                break;
 800fd28:	bf00      	nop
 800fd2a:	e006      	b.n	800fd3a <tcp_receive+0xec2>
                  break;
 800fd2c:	bf00      	nop
 800fd2e:	e004      	b.n	800fd3a <tcp_receive+0xec2>
                  break;
 800fd30:	bf00      	nop
 800fd32:	e002      	b.n	800fd3a <tcp_receive+0xec2>
                  break;
 800fd34:	bf00      	nop
 800fd36:	e000      	b.n	800fd3a <tcp_receive+0xec2>
                break;
 800fd38:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f001 fe88 	bl	8011a50 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fd40:	e003      	b.n	800fd4a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f001 fe84 	bl	8011a50 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd48:	e01a      	b.n	800fd80 <tcp_receive+0xf08>
 800fd4a:	e019      	b.n	800fd80 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fd4c:	4b0e      	ldr	r3, [pc, #56]	@ (800fd88 <tcp_receive+0xf10>)
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	db0a      	blt.n	800fd70 <tcp_receive+0xef8>
 800fd5a:	4b0b      	ldr	r3, [pc, #44]	@ (800fd88 <tcp_receive+0xf10>)
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd62:	6879      	ldr	r1, [r7, #4]
 800fd64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fd66:	440b      	add	r3, r1
 800fd68:	1ad3      	subs	r3, r2, r3
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	dd07      	ble.n	800fd80 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	8b5b      	ldrh	r3, [r3, #26]
 800fd74:	f043 0302 	orr.w	r3, r3, #2
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fd7e:	e7ff      	b.n	800fd80 <tcp_receive+0xf08>
 800fd80:	bf00      	nop
 800fd82:	3750      	adds	r7, #80	@ 0x50
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bdb0      	pop	{r4, r5, r7, pc}
 800fd88:	2000be9c 	.word	0x2000be9c
 800fd8c:	2000be7c 	.word	0x2000be7c
 800fd90:	2000bea6 	.word	0x2000bea6
 800fd94:	08017ec0 	.word	0x08017ec0
 800fd98:	08018268 	.word	0x08018268
 800fd9c:	08017f0c 	.word	0x08017f0c

0800fda0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fda6:	4b15      	ldr	r3, [pc, #84]	@ (800fdfc <tcp_get_next_optbyte+0x5c>)
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	1c5a      	adds	r2, r3, #1
 800fdac:	b291      	uxth	r1, r2
 800fdae:	4a13      	ldr	r2, [pc, #76]	@ (800fdfc <tcp_get_next_optbyte+0x5c>)
 800fdb0:	8011      	strh	r1, [r2, #0]
 800fdb2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fdb4:	4b12      	ldr	r3, [pc, #72]	@ (800fe00 <tcp_get_next_optbyte+0x60>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d004      	beq.n	800fdc6 <tcp_get_next_optbyte+0x26>
 800fdbc:	4b11      	ldr	r3, [pc, #68]	@ (800fe04 <tcp_get_next_optbyte+0x64>)
 800fdbe:	881b      	ldrh	r3, [r3, #0]
 800fdc0:	88fa      	ldrh	r2, [r7, #6]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d208      	bcs.n	800fdd8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fdc6:	4b10      	ldr	r3, [pc, #64]	@ (800fe08 <tcp_get_next_optbyte+0x68>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3314      	adds	r3, #20
 800fdcc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fdce:	88fb      	ldrh	r3, [r7, #6]
 800fdd0:	683a      	ldr	r2, [r7, #0]
 800fdd2:	4413      	add	r3, r2
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	e00b      	b.n	800fdf0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fdd8:	88fb      	ldrh	r3, [r7, #6]
 800fdda:	b2da      	uxtb	r2, r3
 800fddc:	4b09      	ldr	r3, [pc, #36]	@ (800fe04 <tcp_get_next_optbyte+0x64>)
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	1ad3      	subs	r3, r2, r3
 800fde4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fde6:	4b06      	ldr	r3, [pc, #24]	@ (800fe00 <tcp_get_next_optbyte+0x60>)
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	797b      	ldrb	r3, [r7, #5]
 800fdec:	4413      	add	r3, r2
 800fdee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	370c      	adds	r7, #12
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfa:	4770      	bx	lr
 800fdfc:	2000be98 	.word	0x2000be98
 800fe00:	2000be94 	.word	0x2000be94
 800fe04:	2000be92 	.word	0x2000be92
 800fe08:	2000be8c 	.word	0x2000be8c

0800fe0c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d106      	bne.n	800fe28 <tcp_parseopt+0x1c>
 800fe1a:	4b32      	ldr	r3, [pc, #200]	@ (800fee4 <tcp_parseopt+0xd8>)
 800fe1c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fe20:	4931      	ldr	r1, [pc, #196]	@ (800fee8 <tcp_parseopt+0xdc>)
 800fe22:	4832      	ldr	r0, [pc, #200]	@ (800feec <tcp_parseopt+0xe0>)
 800fe24:	f005 f9a6 	bl	8015174 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fe28:	4b31      	ldr	r3, [pc, #196]	@ (800fef0 <tcp_parseopt+0xe4>)
 800fe2a:	881b      	ldrh	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d056      	beq.n	800fede <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe30:	4b30      	ldr	r3, [pc, #192]	@ (800fef4 <tcp_parseopt+0xe8>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	801a      	strh	r2, [r3, #0]
 800fe36:	e046      	b.n	800fec6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fe38:	f7ff ffb2 	bl	800fda0 <tcp_get_next_optbyte>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fe40:	7bfb      	ldrb	r3, [r7, #15]
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	d006      	beq.n	800fe54 <tcp_parseopt+0x48>
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	dc2a      	bgt.n	800fea0 <tcp_parseopt+0x94>
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d042      	beq.n	800fed4 <tcp_parseopt+0xc8>
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d038      	beq.n	800fec4 <tcp_parseopt+0xb8>
 800fe52:	e025      	b.n	800fea0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fe54:	f7ff ffa4 	bl	800fda0 <tcp_get_next_optbyte>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b04      	cmp	r3, #4
 800fe5c:	d13c      	bne.n	800fed8 <tcp_parseopt+0xcc>
 800fe5e:	4b25      	ldr	r3, [pc, #148]	@ (800fef4 <tcp_parseopt+0xe8>)
 800fe60:	881b      	ldrh	r3, [r3, #0]
 800fe62:	3301      	adds	r3, #1
 800fe64:	4a22      	ldr	r2, [pc, #136]	@ (800fef0 <tcp_parseopt+0xe4>)
 800fe66:	8812      	ldrh	r2, [r2, #0]
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	da35      	bge.n	800fed8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fe6c:	f7ff ff98 	bl	800fda0 <tcp_get_next_optbyte>
 800fe70:	4603      	mov	r3, r0
 800fe72:	021b      	lsls	r3, r3, #8
 800fe74:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fe76:	f7ff ff93 	bl	800fda0 <tcp_get_next_optbyte>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	89bb      	ldrh	r3, [r7, #12]
 800fe80:	4313      	orrs	r3, r2
 800fe82:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fe84:	89bb      	ldrh	r3, [r7, #12]
 800fe86:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fe8a:	d804      	bhi.n	800fe96 <tcp_parseopt+0x8a>
 800fe8c:	89bb      	ldrh	r3, [r7, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d001      	beq.n	800fe96 <tcp_parseopt+0x8a>
 800fe92:	89ba      	ldrh	r2, [r7, #12]
 800fe94:	e001      	b.n	800fe9a <tcp_parseopt+0x8e>
 800fe96:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fe9e:	e012      	b.n	800fec6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fea0:	f7ff ff7e 	bl	800fda0 <tcp_get_next_optbyte>
 800fea4:	4603      	mov	r3, r0
 800fea6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fea8:	7afb      	ldrb	r3, [r7, #11]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d916      	bls.n	800fedc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800feae:	7afb      	ldrb	r3, [r7, #11]
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	4b10      	ldr	r3, [pc, #64]	@ (800fef4 <tcp_parseopt+0xe8>)
 800feb4:	881b      	ldrh	r3, [r3, #0]
 800feb6:	4413      	add	r3, r2
 800feb8:	b29b      	uxth	r3, r3
 800feba:	3b02      	subs	r3, #2
 800febc:	b29a      	uxth	r2, r3
 800febe:	4b0d      	ldr	r3, [pc, #52]	@ (800fef4 <tcp_parseopt+0xe8>)
 800fec0:	801a      	strh	r2, [r3, #0]
 800fec2:	e000      	b.n	800fec6 <tcp_parseopt+0xba>
          break;
 800fec4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fec6:	4b0b      	ldr	r3, [pc, #44]	@ (800fef4 <tcp_parseopt+0xe8>)
 800fec8:	881a      	ldrh	r2, [r3, #0]
 800feca:	4b09      	ldr	r3, [pc, #36]	@ (800fef0 <tcp_parseopt+0xe4>)
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d3b2      	bcc.n	800fe38 <tcp_parseopt+0x2c>
 800fed2:	e004      	b.n	800fede <tcp_parseopt+0xd2>
          return;
 800fed4:	bf00      	nop
 800fed6:	e002      	b.n	800fede <tcp_parseopt+0xd2>
            return;
 800fed8:	bf00      	nop
 800feda:	e000      	b.n	800fede <tcp_parseopt+0xd2>
            return;
 800fedc:	bf00      	nop
      }
    }
  }
}
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	08017ec0 	.word	0x08017ec0
 800fee8:	08018324 	.word	0x08018324
 800feec:	08017f0c 	.word	0x08017f0c
 800fef0:	2000be90 	.word	0x2000be90
 800fef4:	2000be98 	.word	0x2000be98

0800fef8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fef8:	b480      	push	{r7}
 800fefa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fefc:	4b05      	ldr	r3, [pc, #20]	@ (800ff14 <tcp_trigger_input_pcb_close+0x1c>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	f043 0310 	orr.w	r3, r3, #16
 800ff04:	b2da      	uxtb	r2, r3
 800ff06:	4b03      	ldr	r3, [pc, #12]	@ (800ff14 <tcp_trigger_input_pcb_close+0x1c>)
 800ff08:	701a      	strb	r2, [r3, #0]
}
 800ff0a:	bf00      	nop
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr
 800ff14:	2000bea9 	.word	0x2000bea9

0800ff18 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b084      	sub	sp, #16
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	60f8      	str	r0, [r7, #12]
 800ff20:	60b9      	str	r1, [r7, #8]
 800ff22:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d00a      	beq.n	800ff40 <tcp_route+0x28>
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	7a1b      	ldrb	r3, [r3, #8]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d006      	beq.n	800ff40 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	7a1b      	ldrb	r3, [r3, #8]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fb f850 	bl	800afdc <netif_get_by_index>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	e003      	b.n	800ff48 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f003 fc49 	bl	80137d8 <ip4_route>
 800ff46:	4603      	mov	r3, r0
  }
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3710      	adds	r7, #16
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ff50:	b590      	push	{r4, r7, lr}
 800ff52:	b087      	sub	sp, #28
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	603b      	str	r3, [r7, #0]
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d105      	bne.n	800ff72 <tcp_create_segment+0x22>
 800ff66:	4b43      	ldr	r3, [pc, #268]	@ (8010074 <tcp_create_segment+0x124>)
 800ff68:	22a3      	movs	r2, #163	@ 0xa3
 800ff6a:	4943      	ldr	r1, [pc, #268]	@ (8010078 <tcp_create_segment+0x128>)
 800ff6c:	4843      	ldr	r0, [pc, #268]	@ (801007c <tcp_create_segment+0x12c>)
 800ff6e:	f005 f901 	bl	8015174 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d105      	bne.n	800ff84 <tcp_create_segment+0x34>
 800ff78:	4b3e      	ldr	r3, [pc, #248]	@ (8010074 <tcp_create_segment+0x124>)
 800ff7a:	22a4      	movs	r2, #164	@ 0xa4
 800ff7c:	4940      	ldr	r1, [pc, #256]	@ (8010080 <tcp_create_segment+0x130>)
 800ff7e:	483f      	ldr	r0, [pc, #252]	@ (801007c <tcp_create_segment+0x12c>)
 800ff80:	f005 f8f8 	bl	8015174 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	f003 0304 	and.w	r3, r3, #4
 800ff90:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ff92:	2003      	movs	r0, #3
 800ff94:	f7fa fc96 	bl	800a8c4 <memp_malloc>
 800ff98:	6138      	str	r0, [r7, #16]
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d104      	bne.n	800ffaa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ffa0:	68b8      	ldr	r0, [r7, #8]
 800ffa2:	f7fb fba9 	bl	800b6f8 <pbuf_free>
    return NULL;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e060      	b.n	801006c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ffb0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	891a      	ldrh	r2, [r3, #8]
 800ffc2:	7dfb      	ldrb	r3, [r7, #23]
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d205      	bcs.n	800ffd6 <tcp_create_segment+0x86>
 800ffca:	4b2a      	ldr	r3, [pc, #168]	@ (8010074 <tcp_create_segment+0x124>)
 800ffcc:	22b0      	movs	r2, #176	@ 0xb0
 800ffce:	492d      	ldr	r1, [pc, #180]	@ (8010084 <tcp_create_segment+0x134>)
 800ffd0:	482a      	ldr	r0, [pc, #168]	@ (801007c <tcp_create_segment+0x12c>)
 800ffd2:	f005 f8cf 	bl	8015174 <iprintf>
  seg->len = p->tot_len - optlen;
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	891a      	ldrh	r2, [r3, #8]
 800ffda:	7dfb      	ldrb	r3, [r7, #23]
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	b29a      	uxth	r2, r3
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ffe6:	2114      	movs	r1, #20
 800ffe8:	68b8      	ldr	r0, [r7, #8]
 800ffea:	f7fb faef 	bl	800b5cc <pbuf_add_header>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d004      	beq.n	800fffe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fff4:	6938      	ldr	r0, [r7, #16]
 800fff6:	f7fd f804 	bl	800d002 <tcp_seg_free>
    return NULL;
 800fffa:	2300      	movs	r3, #0
 800fffc:	e036      	b.n	801006c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	685a      	ldr	r2, [r3, #4]
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	8ada      	ldrh	r2, [r3, #22]
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	68dc      	ldr	r4, [r3, #12]
 8010010:	4610      	mov	r0, r2
 8010012:	f7f9 ff83 	bl	8009f1c <lwip_htons>
 8010016:	4603      	mov	r3, r0
 8010018:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	8b1a      	ldrh	r2, [r3, #24]
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	68dc      	ldr	r4, [r3, #12]
 8010022:	4610      	mov	r0, r2
 8010024:	f7f9 ff7a 	bl	8009f1c <lwip_htons>
 8010028:	4603      	mov	r3, r0
 801002a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	68dc      	ldr	r4, [r3, #12]
 8010030:	6838      	ldr	r0, [r7, #0]
 8010032:	f7f9 ff88 	bl	8009f46 <lwip_htonl>
 8010036:	4603      	mov	r3, r0
 8010038:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801003a:	7dfb      	ldrb	r3, [r7, #23]
 801003c:	089b      	lsrs	r3, r3, #2
 801003e:	b2db      	uxtb	r3, r3
 8010040:	3305      	adds	r3, #5
 8010042:	b29b      	uxth	r3, r3
 8010044:	031b      	lsls	r3, r3, #12
 8010046:	b29a      	uxth	r2, r3
 8010048:	79fb      	ldrb	r3, [r7, #7]
 801004a:	b29b      	uxth	r3, r3
 801004c:	4313      	orrs	r3, r2
 801004e:	b29a      	uxth	r2, r3
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	68dc      	ldr	r4, [r3, #12]
 8010054:	4610      	mov	r0, r2
 8010056:	f7f9 ff61 	bl	8009f1c <lwip_htons>
 801005a:	4603      	mov	r3, r0
 801005c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	2200      	movs	r2, #0
 8010064:	749a      	strb	r2, [r3, #18]
 8010066:	2200      	movs	r2, #0
 8010068:	74da      	strb	r2, [r3, #19]
  return seg;
 801006a:	693b      	ldr	r3, [r7, #16]
}
 801006c:	4618      	mov	r0, r3
 801006e:	371c      	adds	r7, #28
 8010070:	46bd      	mov	sp, r7
 8010072:	bd90      	pop	{r4, r7, pc}
 8010074:	08018340 	.word	0x08018340
 8010078:	08018374 	.word	0x08018374
 801007c:	08018394 	.word	0x08018394
 8010080:	080183bc 	.word	0x080183bc
 8010084:	080183e0 	.word	0x080183e0

08010088 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	607b      	str	r3, [r7, #4]
 8010090:	4603      	mov	r3, r0
 8010092:	73fb      	strb	r3, [r7, #15]
 8010094:	460b      	mov	r3, r1
 8010096:	81bb      	strh	r3, [r7, #12]
 8010098:	4613      	mov	r3, r2
 801009a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801009c:	89bb      	ldrh	r3, [r7, #12]
 801009e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d105      	bne.n	80100b2 <tcp_pbuf_prealloc+0x2a>
 80100a6:	4b30      	ldr	r3, [pc, #192]	@ (8010168 <tcp_pbuf_prealloc+0xe0>)
 80100a8:	22e8      	movs	r2, #232	@ 0xe8
 80100aa:	4930      	ldr	r1, [pc, #192]	@ (801016c <tcp_pbuf_prealloc+0xe4>)
 80100ac:	4830      	ldr	r0, [pc, #192]	@ (8010170 <tcp_pbuf_prealloc+0xe8>)
 80100ae:	f005 f861 	bl	8015174 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80100b2:	6a3b      	ldr	r3, [r7, #32]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d105      	bne.n	80100c4 <tcp_pbuf_prealloc+0x3c>
 80100b8:	4b2b      	ldr	r3, [pc, #172]	@ (8010168 <tcp_pbuf_prealloc+0xe0>)
 80100ba:	22e9      	movs	r2, #233	@ 0xe9
 80100bc:	492d      	ldr	r1, [pc, #180]	@ (8010174 <tcp_pbuf_prealloc+0xec>)
 80100be:	482c      	ldr	r0, [pc, #176]	@ (8010170 <tcp_pbuf_prealloc+0xe8>)
 80100c0:	f005 f858 	bl	8015174 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80100c4:	89ba      	ldrh	r2, [r7, #12]
 80100c6:	897b      	ldrh	r3, [r7, #10]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d221      	bcs.n	8010110 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80100cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80100d0:	f003 0302 	and.w	r3, r3, #2
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d111      	bne.n	80100fc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80100d8:	6a3b      	ldr	r3, [r7, #32]
 80100da:	8b5b      	ldrh	r3, [r3, #26]
 80100dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d115      	bne.n	8010110 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80100e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d007      	beq.n	80100fc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80100ec:	6a3b      	ldr	r3, [r7, #32]
 80100ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d103      	bne.n	80100fc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80100f4:	6a3b      	ldr	r3, [r7, #32]
 80100f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d009      	beq.n	8010110 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80100fc:	89bb      	ldrh	r3, [r7, #12]
 80100fe:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8010102:	f023 0203 	bic.w	r2, r3, #3
 8010106:	897b      	ldrh	r3, [r7, #10]
 8010108:	4293      	cmp	r3, r2
 801010a:	bf28      	it	cs
 801010c:	4613      	movcs	r3, r2
 801010e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010110:	8af9      	ldrh	r1, [r7, #22]
 8010112:	7bfb      	ldrb	r3, [r7, #15]
 8010114:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010118:	4618      	mov	r0, r3
 801011a:	f7fb f809 	bl	800b130 <pbuf_alloc>
 801011e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d101      	bne.n	801012a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010126:	2300      	movs	r3, #0
 8010128:	e019      	b.n	801015e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d006      	beq.n	8010140 <tcp_pbuf_prealloc+0xb8>
 8010132:	4b0d      	ldr	r3, [pc, #52]	@ (8010168 <tcp_pbuf_prealloc+0xe0>)
 8010134:	f240 120b 	movw	r2, #267	@ 0x10b
 8010138:	490f      	ldr	r1, [pc, #60]	@ (8010178 <tcp_pbuf_prealloc+0xf0>)
 801013a:	480d      	ldr	r0, [pc, #52]	@ (8010170 <tcp_pbuf_prealloc+0xe8>)
 801013c:	f005 f81a 	bl	8015174 <iprintf>
  *oversize = p->len - length;
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	895a      	ldrh	r2, [r3, #10]
 8010144:	89bb      	ldrh	r3, [r7, #12]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	b29a      	uxth	r2, r3
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	89ba      	ldrh	r2, [r7, #12]
 8010152:	811a      	strh	r2, [r3, #8]
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	891a      	ldrh	r2, [r3, #8]
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	815a      	strh	r2, [r3, #10]
  return p;
 801015c:	693b      	ldr	r3, [r7, #16]
}
 801015e:	4618      	mov	r0, r3
 8010160:	3718      	adds	r7, #24
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	08018340 	.word	0x08018340
 801016c:	080183f8 	.word	0x080183f8
 8010170:	08018394 	.word	0x08018394
 8010174:	0801841c 	.word	0x0801841c
 8010178:	0801843c 	.word	0x0801843c

0801017c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	460b      	mov	r3, r1
 8010186:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d106      	bne.n	801019c <tcp_write_checks+0x20>
 801018e:	4b33      	ldr	r3, [pc, #204]	@ (801025c <tcp_write_checks+0xe0>)
 8010190:	f240 1233 	movw	r2, #307	@ 0x133
 8010194:	4932      	ldr	r1, [pc, #200]	@ (8010260 <tcp_write_checks+0xe4>)
 8010196:	4833      	ldr	r0, [pc, #204]	@ (8010264 <tcp_write_checks+0xe8>)
 8010198:	f004 ffec 	bl	8015174 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	7d1b      	ldrb	r3, [r3, #20]
 80101a0:	2b04      	cmp	r3, #4
 80101a2:	d00e      	beq.n	80101c2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80101a8:	2b07      	cmp	r3, #7
 80101aa:	d00a      	beq.n	80101c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80101b0:	2b02      	cmp	r3, #2
 80101b2:	d006      	beq.n	80101c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80101b8:	2b03      	cmp	r3, #3
 80101ba:	d002      	beq.n	80101c2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80101bc:	f06f 030a 	mvn.w	r3, #10
 80101c0:	e048      	b.n	8010254 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80101c2:	887b      	ldrh	r3, [r7, #2]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d101      	bne.n	80101cc <tcp_write_checks+0x50>
    return ERR_OK;
 80101c8:	2300      	movs	r3, #0
 80101ca:	e043      	b.n	8010254 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80101d2:	887a      	ldrh	r2, [r7, #2]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d909      	bls.n	80101ec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	8b5b      	ldrh	r3, [r3, #26]
 80101dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101e0:	b29a      	uxth	r2, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80101e6:	f04f 33ff 	mov.w	r3, #4294967295
 80101ea:	e033      	b.n	8010254 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80101f2:	2b08      	cmp	r3, #8
 80101f4:	d909      	bls.n	801020a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	8b5b      	ldrh	r3, [r3, #26]
 80101fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101fe:	b29a      	uxth	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010204:	f04f 33ff 	mov.w	r3, #4294967295
 8010208:	e024      	b.n	8010254 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010210:	2b00      	cmp	r3, #0
 8010212:	d00f      	beq.n	8010234 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010218:	2b00      	cmp	r3, #0
 801021a:	d11a      	bne.n	8010252 <tcp_write_checks+0xd6>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010220:	2b00      	cmp	r3, #0
 8010222:	d116      	bne.n	8010252 <tcp_write_checks+0xd6>
 8010224:	4b0d      	ldr	r3, [pc, #52]	@ (801025c <tcp_write_checks+0xe0>)
 8010226:	f240 1255 	movw	r2, #341	@ 0x155
 801022a:	490f      	ldr	r1, [pc, #60]	@ (8010268 <tcp_write_checks+0xec>)
 801022c:	480d      	ldr	r0, [pc, #52]	@ (8010264 <tcp_write_checks+0xe8>)
 801022e:	f004 ffa1 	bl	8015174 <iprintf>
 8010232:	e00e      	b.n	8010252 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010238:	2b00      	cmp	r3, #0
 801023a:	d103      	bne.n	8010244 <tcp_write_checks+0xc8>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010240:	2b00      	cmp	r3, #0
 8010242:	d006      	beq.n	8010252 <tcp_write_checks+0xd6>
 8010244:	4b05      	ldr	r3, [pc, #20]	@ (801025c <tcp_write_checks+0xe0>)
 8010246:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801024a:	4908      	ldr	r1, [pc, #32]	@ (801026c <tcp_write_checks+0xf0>)
 801024c:	4805      	ldr	r0, [pc, #20]	@ (8010264 <tcp_write_checks+0xe8>)
 801024e:	f004 ff91 	bl	8015174 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010252:	2300      	movs	r3, #0
}
 8010254:	4618      	mov	r0, r3
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	08018340 	.word	0x08018340
 8010260:	08018450 	.word	0x08018450
 8010264:	08018394 	.word	0x08018394
 8010268:	08018470 	.word	0x08018470
 801026c:	080184ac 	.word	0x080184ac

08010270 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010270:	b590      	push	{r4, r7, lr}
 8010272:	b09b      	sub	sp, #108	@ 0x6c
 8010274:	af04      	add	r7, sp, #16
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	4611      	mov	r1, r2
 801027c:	461a      	mov	r2, r3
 801027e:	460b      	mov	r3, r1
 8010280:	80fb      	strh	r3, [r7, #6]
 8010282:	4613      	mov	r3, r2
 8010284:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010286:	2300      	movs	r3, #0
 8010288:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801028a:	2300      	movs	r3, #0
 801028c:	653b      	str	r3, [r7, #80]	@ 0x50
 801028e:	2300      	movs	r3, #0
 8010290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010292:	2300      	movs	r3, #0
 8010294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010296:	2300      	movs	r3, #0
 8010298:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801029a:	2300      	movs	r3, #0
 801029c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80102a0:	2300      	movs	r3, #0
 80102a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80102aa:	2300      	movs	r3, #0
 80102ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80102ae:	2300      	movs	r3, #0
 80102b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d109      	bne.n	80102cc <tcp_write+0x5c>
 80102b8:	4ba4      	ldr	r3, [pc, #656]	@ (801054c <tcp_write+0x2dc>)
 80102ba:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80102be:	49a4      	ldr	r1, [pc, #656]	@ (8010550 <tcp_write+0x2e0>)
 80102c0:	48a4      	ldr	r0, [pc, #656]	@ (8010554 <tcp_write+0x2e4>)
 80102c2:	f004 ff57 	bl	8015174 <iprintf>
 80102c6:	f06f 030f 	mvn.w	r3, #15
 80102ca:	e32a      	b.n	8010922 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102d2:	085b      	lsrs	r3, r3, #1
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102da:	4293      	cmp	r3, r2
 80102dc:	bf28      	it	cs
 80102de:	4613      	movcs	r3, r2
 80102e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80102e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d102      	bne.n	80102ee <tcp_write+0x7e>
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102ec:	e000      	b.n	80102f0 <tcp_write+0x80>
 80102ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d109      	bne.n	801030c <tcp_write+0x9c>
 80102f8:	4b94      	ldr	r3, [pc, #592]	@ (801054c <tcp_write+0x2dc>)
 80102fa:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80102fe:	4996      	ldr	r1, [pc, #600]	@ (8010558 <tcp_write+0x2e8>)
 8010300:	4894      	ldr	r0, [pc, #592]	@ (8010554 <tcp_write+0x2e4>)
 8010302:	f004 ff37 	bl	8015174 <iprintf>
 8010306:	f06f 030f 	mvn.w	r3, #15
 801030a:	e30a      	b.n	8010922 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801030c:	88fb      	ldrh	r3, [r7, #6]
 801030e:	4619      	mov	r1, r3
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f7ff ff33 	bl	801017c <tcp_write_checks>
 8010316:	4603      	mov	r3, r0
 8010318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801031c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010320:	2b00      	cmp	r3, #0
 8010322:	d002      	beq.n	801032a <tcp_write+0xba>
    return err;
 8010324:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010328:	e2fb      	b.n	8010922 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010330:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010334:	2300      	movs	r3, #0
 8010336:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801033e:	2b00      	cmp	r3, #0
 8010340:	f000 80f6 	beq.w	8010530 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010348:	653b      	str	r3, [r7, #80]	@ 0x50
 801034a:	e002      	b.n	8010352 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801034c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d1f8      	bne.n	801034c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801035a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801035c:	7a9b      	ldrb	r3, [r3, #10]
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	b29b      	uxth	r3, r3
 8010362:	f003 0304 	and.w	r3, r3, #4
 8010366:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010368:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801036a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801036c:	891b      	ldrh	r3, [r3, #8]
 801036e:	4619      	mov	r1, r3
 8010370:	8c3b      	ldrh	r3, [r7, #32]
 8010372:	440b      	add	r3, r1
 8010374:	429a      	cmp	r2, r3
 8010376:	da06      	bge.n	8010386 <tcp_write+0x116>
 8010378:	4b74      	ldr	r3, [pc, #464]	@ (801054c <tcp_write+0x2dc>)
 801037a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801037e:	4977      	ldr	r1, [pc, #476]	@ (801055c <tcp_write+0x2ec>)
 8010380:	4874      	ldr	r0, [pc, #464]	@ (8010554 <tcp_write+0x2e4>)
 8010382:	f004 fef7 	bl	8015174 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010388:	891a      	ldrh	r2, [r3, #8]
 801038a:	8c3b      	ldrh	r3, [r7, #32]
 801038c:	4413      	add	r3, r2
 801038e:	b29b      	uxth	r3, r3
 8010390:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010392:	1ad3      	subs	r3, r2, r3
 8010394:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801039c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801039e:	8a7b      	ldrh	r3, [r7, #18]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d026      	beq.n	80103f2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80103a4:	8a7b      	ldrh	r3, [r7, #18]
 80103a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d206      	bcs.n	80103ba <tcp_write+0x14a>
 80103ac:	4b67      	ldr	r3, [pc, #412]	@ (801054c <tcp_write+0x2dc>)
 80103ae:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80103b2:	496b      	ldr	r1, [pc, #428]	@ (8010560 <tcp_write+0x2f0>)
 80103b4:	4867      	ldr	r0, [pc, #412]	@ (8010554 <tcp_write+0x2e4>)
 80103b6:	f004 fedd 	bl	8015174 <iprintf>
      seg = last_unsent;
 80103ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80103be:	8a7b      	ldrh	r3, [r7, #18]
 80103c0:	88fa      	ldrh	r2, [r7, #6]
 80103c2:	4293      	cmp	r3, r2
 80103c4:	bf28      	it	cs
 80103c6:	4613      	movcs	r3, r2
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80103cc:	4293      	cmp	r3, r2
 80103ce:	bf28      	it	cs
 80103d0:	4613      	movcs	r3, r2
 80103d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80103d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80103d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80103da:	4413      	add	r3, r2
 80103dc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80103e0:	8a7a      	ldrh	r2, [r7, #18]
 80103e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80103e4:	1ad3      	subs	r3, r2, r3
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80103ea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80103ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80103f2:	8a7b      	ldrh	r3, [r7, #18]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00b      	beq.n	8010410 <tcp_write+0x1a0>
 80103f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80103fc:	88fb      	ldrh	r3, [r7, #6]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d006      	beq.n	8010410 <tcp_write+0x1a0>
 8010402:	4b52      	ldr	r3, [pc, #328]	@ (801054c <tcp_write+0x2dc>)
 8010404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010408:	4956      	ldr	r1, [pc, #344]	@ (8010564 <tcp_write+0x2f4>)
 801040a:	4852      	ldr	r0, [pc, #328]	@ (8010554 <tcp_write+0x2e4>)
 801040c:	f004 feb2 	bl	8015174 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010410:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010414:	88fb      	ldrh	r3, [r7, #6]
 8010416:	429a      	cmp	r2, r3
 8010418:	f080 8167 	bcs.w	80106ea <tcp_write+0x47a>
 801041c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 8163 	beq.w	80106ea <tcp_write+0x47a>
 8010424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010426:	891b      	ldrh	r3, [r3, #8]
 8010428:	2b00      	cmp	r3, #0
 801042a:	f000 815e 	beq.w	80106ea <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801042e:	88fa      	ldrh	r2, [r7, #6]
 8010430:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010434:	1ad2      	subs	r2, r2, r3
 8010436:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010438:	4293      	cmp	r3, r2
 801043a:	bfa8      	it	ge
 801043c:	4613      	movge	r3, r2
 801043e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010442:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010444:	797b      	ldrb	r3, [r7, #5]
 8010446:	f003 0301 	and.w	r3, r3, #1
 801044a:	2b00      	cmp	r3, #0
 801044c:	d027      	beq.n	801049e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801044e:	f107 0012 	add.w	r0, r7, #18
 8010452:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010454:	8bf9      	ldrh	r1, [r7, #30]
 8010456:	2301      	movs	r3, #1
 8010458:	9302      	str	r3, [sp, #8]
 801045a:	797b      	ldrb	r3, [r7, #5]
 801045c:	9301      	str	r3, [sp, #4]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	4603      	mov	r3, r0
 8010464:	2000      	movs	r0, #0
 8010466:	f7ff fe0f 	bl	8010088 <tcp_pbuf_prealloc>
 801046a:	6578      	str	r0, [r7, #84]	@ 0x54
 801046c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 8225 	beq.w	80108be <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010476:	6858      	ldr	r0, [r3, #4]
 8010478:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	4413      	add	r3, r2
 8010480:	8bfa      	ldrh	r2, [r7, #30]
 8010482:	4619      	mov	r1, r3
 8010484:	f004 ffb9 	bl	80153fa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010488:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801048a:	f7fb f9c3 	bl	800b814 <pbuf_clen>
 801048e:	4603      	mov	r3, r0
 8010490:	461a      	mov	r2, r3
 8010492:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010496:	4413      	add	r3, r2
 8010498:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801049c:	e041      	b.n	8010522 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801049e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80104a4:	e002      	b.n	80104ac <tcp_write+0x23c>
 80104a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80104ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d1f8      	bne.n	80104a6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80104b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104b6:	7b1b      	ldrb	r3, [r3, #12]
 80104b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d115      	bne.n	80104ec <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80104c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104c6:	8952      	ldrh	r2, [r2, #10]
 80104c8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d10d      	bne.n	80104ec <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80104d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d006      	beq.n	80104e6 <tcp_write+0x276>
 80104d8:	4b1c      	ldr	r3, [pc, #112]	@ (801054c <tcp_write+0x2dc>)
 80104da:	f240 2231 	movw	r2, #561	@ 0x231
 80104de:	4922      	ldr	r1, [pc, #136]	@ (8010568 <tcp_write+0x2f8>)
 80104e0:	481c      	ldr	r0, [pc, #112]	@ (8010554 <tcp_write+0x2e4>)
 80104e2:	f004 fe47 	bl	8015174 <iprintf>
          extendlen = seglen;
 80104e6:	8bfb      	ldrh	r3, [r7, #30]
 80104e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80104ea:	e01a      	b.n	8010522 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80104ec:	8bfb      	ldrh	r3, [r7, #30]
 80104ee:	2201      	movs	r2, #1
 80104f0:	4619      	mov	r1, r3
 80104f2:	2000      	movs	r0, #0
 80104f4:	f7fa fe1c 	bl	800b130 <pbuf_alloc>
 80104f8:	6578      	str	r0, [r7, #84]	@ 0x54
 80104fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f000 81e0 	beq.w	80108c2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010506:	68ba      	ldr	r2, [r7, #8]
 8010508:	441a      	add	r2, r3
 801050a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801050c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801050e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010510:	f7fb f980 	bl	800b814 <pbuf_clen>
 8010514:	4603      	mov	r3, r0
 8010516:	461a      	mov	r2, r3
 8010518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801051c:	4413      	add	r3, r2
 801051e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010522:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010526:	8bfb      	ldrh	r3, [r7, #30]
 8010528:	4413      	add	r3, r2
 801052a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801052e:	e0dc      	b.n	80106ea <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010536:	2b00      	cmp	r3, #0
 8010538:	f000 80d7 	beq.w	80106ea <tcp_write+0x47a>
 801053c:	4b03      	ldr	r3, [pc, #12]	@ (801054c <tcp_write+0x2dc>)
 801053e:	f240 224a 	movw	r2, #586	@ 0x24a
 8010542:	490a      	ldr	r1, [pc, #40]	@ (801056c <tcp_write+0x2fc>)
 8010544:	4803      	ldr	r0, [pc, #12]	@ (8010554 <tcp_write+0x2e4>)
 8010546:	f004 fe15 	bl	8015174 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801054a:	e0ce      	b.n	80106ea <tcp_write+0x47a>
 801054c:	08018340 	.word	0x08018340
 8010550:	080184e0 	.word	0x080184e0
 8010554:	08018394 	.word	0x08018394
 8010558:	080184f8 	.word	0x080184f8
 801055c:	0801852c 	.word	0x0801852c
 8010560:	08018544 	.word	0x08018544
 8010564:	08018564 	.word	0x08018564
 8010568:	08018584 	.word	0x08018584
 801056c:	080185b0 	.word	0x080185b0
    struct pbuf *p;
    u16_t left = len - pos;
 8010570:	88fa      	ldrh	r2, [r7, #6]
 8010572:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010576:	1ad3      	subs	r3, r2, r3
 8010578:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801057a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801057e:	b29b      	uxth	r3, r3
 8010580:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010582:	1ad3      	subs	r3, r2, r3
 8010584:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010586:	8b7a      	ldrh	r2, [r7, #26]
 8010588:	8bbb      	ldrh	r3, [r7, #28]
 801058a:	4293      	cmp	r3, r2
 801058c:	bf28      	it	cs
 801058e:	4613      	movcs	r3, r2
 8010590:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010592:	797b      	ldrb	r3, [r7, #5]
 8010594:	f003 0301 	and.w	r3, r3, #1
 8010598:	2b00      	cmp	r3, #0
 801059a:	d036      	beq.n	801060a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801059c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	8b3b      	ldrh	r3, [r7, #24]
 80105a4:	4413      	add	r3, r2
 80105a6:	b299      	uxth	r1, r3
 80105a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	bf0c      	ite	eq
 80105ae:	2301      	moveq	r3, #1
 80105b0:	2300      	movne	r3, #0
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	f107 0012 	add.w	r0, r7, #18
 80105b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80105ba:	9302      	str	r3, [sp, #8]
 80105bc:	797b      	ldrb	r3, [r7, #5]
 80105be:	9301      	str	r3, [sp, #4]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	9300      	str	r3, [sp, #0]
 80105c4:	4603      	mov	r3, r0
 80105c6:	2036      	movs	r0, #54	@ 0x36
 80105c8:	f7ff fd5e 	bl	8010088 <tcp_pbuf_prealloc>
 80105cc:	6338      	str	r0, [r7, #48]	@ 0x30
 80105ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f000 8178 	beq.w	80108c6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80105d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105d8:	895b      	ldrh	r3, [r3, #10]
 80105da:	8b3a      	ldrh	r2, [r7, #24]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d906      	bls.n	80105ee <tcp_write+0x37e>
 80105e0:	4b8c      	ldr	r3, [pc, #560]	@ (8010814 <tcp_write+0x5a4>)
 80105e2:	f240 2266 	movw	r2, #614	@ 0x266
 80105e6:	498c      	ldr	r1, [pc, #560]	@ (8010818 <tcp_write+0x5a8>)
 80105e8:	488c      	ldr	r0, [pc, #560]	@ (801081c <tcp_write+0x5ac>)
 80105ea:	f004 fdc3 	bl	8015174 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80105ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105f0:	685a      	ldr	r2, [r3, #4]
 80105f2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80105f6:	18d0      	adds	r0, r2, r3
 80105f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105fc:	68ba      	ldr	r2, [r7, #8]
 80105fe:	4413      	add	r3, r2
 8010600:	8b3a      	ldrh	r2, [r7, #24]
 8010602:	4619      	mov	r1, r3
 8010604:	f004 fef9 	bl	80153fa <memcpy>
 8010608:	e02f      	b.n	801066a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801060a:	8a7b      	ldrh	r3, [r7, #18]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d006      	beq.n	801061e <tcp_write+0x3ae>
 8010610:	4b80      	ldr	r3, [pc, #512]	@ (8010814 <tcp_write+0x5a4>)
 8010612:	f240 2271 	movw	r2, #625	@ 0x271
 8010616:	4982      	ldr	r1, [pc, #520]	@ (8010820 <tcp_write+0x5b0>)
 8010618:	4880      	ldr	r0, [pc, #512]	@ (801081c <tcp_write+0x5ac>)
 801061a:	f004 fdab 	bl	8015174 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801061e:	8b3b      	ldrh	r3, [r7, #24]
 8010620:	2201      	movs	r2, #1
 8010622:	4619      	mov	r1, r3
 8010624:	2036      	movs	r0, #54	@ 0x36
 8010626:	f7fa fd83 	bl	800b130 <pbuf_alloc>
 801062a:	6178      	str	r0, [r7, #20]
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	2b00      	cmp	r3, #0
 8010630:	f000 814b 	beq.w	80108ca <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010638:	68ba      	ldr	r2, [r7, #8]
 801063a:	441a      	add	r2, r3
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010640:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010644:	b29b      	uxth	r3, r3
 8010646:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801064a:	4619      	mov	r1, r3
 801064c:	2036      	movs	r0, #54	@ 0x36
 801064e:	f7fa fd6f 	bl	800b130 <pbuf_alloc>
 8010652:	6338      	str	r0, [r7, #48]	@ 0x30
 8010654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010656:	2b00      	cmp	r3, #0
 8010658:	d103      	bne.n	8010662 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801065a:	6978      	ldr	r0, [r7, #20]
 801065c:	f7fb f84c 	bl	800b6f8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010660:	e136      	b.n	80108d0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010662:	6979      	ldr	r1, [r7, #20]
 8010664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010666:	f7fb f915 	bl	800b894 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801066a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801066c:	f7fb f8d2 	bl	800b814 <pbuf_clen>
 8010670:	4603      	mov	r3, r0
 8010672:	461a      	mov	r2, r3
 8010674:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010678:	4413      	add	r3, r2
 801067a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801067e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010682:	2b09      	cmp	r3, #9
 8010684:	d903      	bls.n	801068e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010686:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010688:	f7fb f836 	bl	800b6f8 <pbuf_free>
      goto memerr;
 801068c:	e120      	b.n	80108d0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010692:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010696:	441a      	add	r2, r3
 8010698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	4613      	mov	r3, r2
 80106a0:	2200      	movs	r2, #0
 80106a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f7ff fc53 	bl	800ff50 <tcp_create_segment>
 80106aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80106ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f000 810d 	beq.w	80108ce <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80106b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d102      	bne.n	80106c0 <tcp_write+0x450>
      queue = seg;
 80106ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80106be:	e00c      	b.n	80106da <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80106c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d106      	bne.n	80106d4 <tcp_write+0x464>
 80106c6:	4b53      	ldr	r3, [pc, #332]	@ (8010814 <tcp_write+0x5a4>)
 80106c8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80106cc:	4955      	ldr	r1, [pc, #340]	@ (8010824 <tcp_write+0x5b4>)
 80106ce:	4853      	ldr	r0, [pc, #332]	@ (801081c <tcp_write+0x5ac>)
 80106d0:	f004 fd50 	bl	8015174 <iprintf>
      prev_seg->next = seg;
 80106d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80106d8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80106da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106dc:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80106de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80106e2:	8b3b      	ldrh	r3, [r7, #24]
 80106e4:	4413      	add	r3, r2
 80106e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80106ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80106ee:	88fb      	ldrh	r3, [r7, #6]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	f4ff af3d 	bcc.w	8010570 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80106f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d02c      	beq.n	8010756 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80106fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010702:	e01e      	b.n	8010742 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010706:	891a      	ldrh	r2, [r3, #8]
 8010708:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801070a:	4413      	add	r3, r2
 801070c:	b29a      	uxth	r2, r3
 801070e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010710:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d110      	bne.n	801073c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801071a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010720:	8952      	ldrh	r2, [r2, #10]
 8010722:	4413      	add	r3, r2
 8010724:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010726:	68b9      	ldr	r1, [r7, #8]
 8010728:	4618      	mov	r0, r3
 801072a:	f004 fe66 	bl	80153fa <memcpy>
        p->len += oversize_used;
 801072e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010730:	895a      	ldrh	r2, [r3, #10]
 8010732:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010734:	4413      	add	r3, r2
 8010736:	b29a      	uxth	r2, r3
 8010738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801073c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010744:	2b00      	cmp	r3, #0
 8010746:	d1dd      	bne.n	8010704 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801074a:	891a      	ldrh	r2, [r3, #8]
 801074c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801074e:	4413      	add	r3, r2
 8010750:	b29a      	uxth	r2, r3
 8010752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010754:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010756:	8a7a      	ldrh	r2, [r7, #18]
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801075e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010760:	2b00      	cmp	r3, #0
 8010762:	d018      	beq.n	8010796 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010766:	2b00      	cmp	r3, #0
 8010768:	d106      	bne.n	8010778 <tcp_write+0x508>
 801076a:	4b2a      	ldr	r3, [pc, #168]	@ (8010814 <tcp_write+0x5a4>)
 801076c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8010770:	492d      	ldr	r1, [pc, #180]	@ (8010828 <tcp_write+0x5b8>)
 8010772:	482a      	ldr	r0, [pc, #168]	@ (801081c <tcp_write+0x5ac>)
 8010774:	f004 fcfe 	bl	8015174 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801077e:	4618      	mov	r0, r3
 8010780:	f7fb f888 	bl	800b894 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010786:	891a      	ldrh	r2, [r3, #8]
 8010788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801078a:	891b      	ldrh	r3, [r3, #8]
 801078c:	4413      	add	r3, r2
 801078e:	b29a      	uxth	r2, r3
 8010790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010792:	811a      	strh	r2, [r3, #8]
 8010794:	e037      	b.n	8010806 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010796:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010798:	2b00      	cmp	r3, #0
 801079a:	d034      	beq.n	8010806 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801079c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d003      	beq.n	80107aa <tcp_write+0x53a>
 80107a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d106      	bne.n	80107b8 <tcp_write+0x548>
 80107aa:	4b1a      	ldr	r3, [pc, #104]	@ (8010814 <tcp_write+0x5a4>)
 80107ac:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80107b0:	491e      	ldr	r1, [pc, #120]	@ (801082c <tcp_write+0x5bc>)
 80107b2:	481a      	ldr	r0, [pc, #104]	@ (801081c <tcp_write+0x5ac>)
 80107b4:	f004 fcde 	bl	8015174 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80107b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80107be:	e009      	b.n	80107d4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80107c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c2:	891a      	ldrh	r2, [r3, #8]
 80107c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80107c6:	4413      	add	r3, r2
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107cc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80107ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80107d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d1f1      	bne.n	80107c0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80107dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107de:	891a      	ldrh	r2, [r3, #8]
 80107e0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80107e2:	4413      	add	r3, r2
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80107ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ec:	895a      	ldrh	r2, [r3, #10]
 80107ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80107f0:	4413      	add	r3, r2
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80107f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107fa:	891a      	ldrh	r2, [r3, #8]
 80107fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80107fe:	4413      	add	r3, r2
 8010800:	b29a      	uxth	r2, r3
 8010802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010804:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010808:	2b00      	cmp	r3, #0
 801080a:	d111      	bne.n	8010830 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010810:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010812:	e010      	b.n	8010836 <tcp_write+0x5c6>
 8010814:	08018340 	.word	0x08018340
 8010818:	080185e0 	.word	0x080185e0
 801081c:	08018394 	.word	0x08018394
 8010820:	08018620 	.word	0x08018620
 8010824:	08018630 	.word	0x08018630
 8010828:	08018644 	.word	0x08018644
 801082c:	0801867c 	.word	0x0801867c
  } else {
    last_unsent->next = queue;
 8010830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010834:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801083a:	88fb      	ldrh	r3, [r7, #6]
 801083c:	441a      	add	r2, r3
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010848:	88fb      	ldrh	r3, [r7, #6]
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	b29a      	uxth	r2, r3
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801085a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010864:	2b00      	cmp	r3, #0
 8010866:	d00e      	beq.n	8010886 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801086c:	2b00      	cmp	r3, #0
 801086e:	d10a      	bne.n	8010886 <tcp_write+0x616>
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010874:	2b00      	cmp	r3, #0
 8010876:	d106      	bne.n	8010886 <tcp_write+0x616>
 8010878:	4b2c      	ldr	r3, [pc, #176]	@ (801092c <tcp_write+0x6bc>)
 801087a:	f240 3212 	movw	r2, #786	@ 0x312
 801087e:	492c      	ldr	r1, [pc, #176]	@ (8010930 <tcp_write+0x6c0>)
 8010880:	482c      	ldr	r0, [pc, #176]	@ (8010934 <tcp_write+0x6c4>)
 8010882:	f004 fc77 	bl	8015174 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010888:	2b00      	cmp	r3, #0
 801088a:	d016      	beq.n	80108ba <tcp_write+0x64a>
 801088c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d012      	beq.n	80108ba <tcp_write+0x64a>
 8010894:	797b      	ldrb	r3, [r7, #5]
 8010896:	f003 0302 	and.w	r3, r3, #2
 801089a:	2b00      	cmp	r3, #0
 801089c:	d10d      	bne.n	80108ba <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801089e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	899b      	ldrh	r3, [r3, #12]
 80108a4:	b29c      	uxth	r4, r3
 80108a6:	2008      	movs	r0, #8
 80108a8:	f7f9 fb38 	bl	8009f1c <lwip_htons>
 80108ac:	4603      	mov	r3, r0
 80108ae:	461a      	mov	r2, r3
 80108b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	4322      	orrs	r2, r4
 80108b6:	b292      	uxth	r2, r2
 80108b8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80108ba:	2300      	movs	r3, #0
 80108bc:	e031      	b.n	8010922 <tcp_write+0x6b2>
          goto memerr;
 80108be:	bf00      	nop
 80108c0:	e006      	b.n	80108d0 <tcp_write+0x660>
            goto memerr;
 80108c2:	bf00      	nop
 80108c4:	e004      	b.n	80108d0 <tcp_write+0x660>
        goto memerr;
 80108c6:	bf00      	nop
 80108c8:	e002      	b.n	80108d0 <tcp_write+0x660>
        goto memerr;
 80108ca:	bf00      	nop
 80108cc:	e000      	b.n	80108d0 <tcp_write+0x660>
      goto memerr;
 80108ce:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	8b5b      	ldrh	r3, [r3, #26]
 80108d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108d8:	b29a      	uxth	r2, r3
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80108de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d002      	beq.n	80108ea <tcp_write+0x67a>
    pbuf_free(concat_p);
 80108e4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80108e6:	f7fa ff07 	bl	800b6f8 <pbuf_free>
  }
  if (queue != NULL) {
 80108ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d002      	beq.n	80108f6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80108f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80108f2:	f7fc fb71 	bl	800cfd8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00e      	beq.n	801091e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010904:	2b00      	cmp	r3, #0
 8010906:	d10a      	bne.n	801091e <tcp_write+0x6ae>
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801090c:	2b00      	cmp	r3, #0
 801090e:	d106      	bne.n	801091e <tcp_write+0x6ae>
 8010910:	4b06      	ldr	r3, [pc, #24]	@ (801092c <tcp_write+0x6bc>)
 8010912:	f240 3227 	movw	r2, #807	@ 0x327
 8010916:	4906      	ldr	r1, [pc, #24]	@ (8010930 <tcp_write+0x6c0>)
 8010918:	4806      	ldr	r0, [pc, #24]	@ (8010934 <tcp_write+0x6c4>)
 801091a:	f004 fc2b 	bl	8015174 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801091e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010922:	4618      	mov	r0, r3
 8010924:	375c      	adds	r7, #92	@ 0x5c
 8010926:	46bd      	mov	sp, r7
 8010928:	bd90      	pop	{r4, r7, pc}
 801092a:	bf00      	nop
 801092c:	08018340 	.word	0x08018340
 8010930:	080186b4 	.word	0x080186b4
 8010934:	08018394 	.word	0x08018394

08010938 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010938:	b590      	push	{r4, r7, lr}
 801093a:	b08b      	sub	sp, #44	@ 0x2c
 801093c:	af02      	add	r7, sp, #8
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	460b      	mov	r3, r1
 8010942:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010944:	2300      	movs	r3, #0
 8010946:	61fb      	str	r3, [r7, #28]
 8010948:	2300      	movs	r3, #0
 801094a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801094c:	2300      	movs	r3, #0
 801094e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d106      	bne.n	8010964 <tcp_split_unsent_seg+0x2c>
 8010956:	4b95      	ldr	r3, [pc, #596]	@ (8010bac <tcp_split_unsent_seg+0x274>)
 8010958:	f240 324b 	movw	r2, #843	@ 0x34b
 801095c:	4994      	ldr	r1, [pc, #592]	@ (8010bb0 <tcp_split_unsent_seg+0x278>)
 801095e:	4895      	ldr	r0, [pc, #596]	@ (8010bb4 <tcp_split_unsent_seg+0x27c>)
 8010960:	f004 fc08 	bl	8015174 <iprintf>

  useg = pcb->unsent;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010968:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d102      	bne.n	8010976 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010970:	f04f 33ff 	mov.w	r3, #4294967295
 8010974:	e116      	b.n	8010ba4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010976:	887b      	ldrh	r3, [r7, #2]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d109      	bne.n	8010990 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801097c:	4b8b      	ldr	r3, [pc, #556]	@ (8010bac <tcp_split_unsent_seg+0x274>)
 801097e:	f240 3253 	movw	r2, #851	@ 0x353
 8010982:	498d      	ldr	r1, [pc, #564]	@ (8010bb8 <tcp_split_unsent_seg+0x280>)
 8010984:	488b      	ldr	r0, [pc, #556]	@ (8010bb4 <tcp_split_unsent_seg+0x27c>)
 8010986:	f004 fbf5 	bl	8015174 <iprintf>
    return ERR_VAL;
 801098a:	f06f 0305 	mvn.w	r3, #5
 801098e:	e109      	b.n	8010ba4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	891b      	ldrh	r3, [r3, #8]
 8010994:	887a      	ldrh	r2, [r7, #2]
 8010996:	429a      	cmp	r2, r3
 8010998:	d301      	bcc.n	801099e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801099a:	2300      	movs	r3, #0
 801099c:	e102      	b.n	8010ba4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109a2:	887a      	ldrh	r2, [r7, #2]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d906      	bls.n	80109b6 <tcp_split_unsent_seg+0x7e>
 80109a8:	4b80      	ldr	r3, [pc, #512]	@ (8010bac <tcp_split_unsent_seg+0x274>)
 80109aa:	f240 325b 	movw	r2, #859	@ 0x35b
 80109ae:	4983      	ldr	r1, [pc, #524]	@ (8010bbc <tcp_split_unsent_seg+0x284>)
 80109b0:	4880      	ldr	r0, [pc, #512]	@ (8010bb4 <tcp_split_unsent_seg+0x27c>)
 80109b2:	f004 fbdf 	bl	8015174 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	891b      	ldrh	r3, [r3, #8]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d106      	bne.n	80109cc <tcp_split_unsent_seg+0x94>
 80109be:	4b7b      	ldr	r3, [pc, #492]	@ (8010bac <tcp_split_unsent_seg+0x274>)
 80109c0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80109c4:	497e      	ldr	r1, [pc, #504]	@ (8010bc0 <tcp_split_unsent_seg+0x288>)
 80109c6:	487b      	ldr	r0, [pc, #492]	@ (8010bb4 <tcp_split_unsent_seg+0x27c>)
 80109c8:	f004 fbd4 	bl	8015174 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	7a9b      	ldrb	r3, [r3, #10]
 80109d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80109d2:	7bfb      	ldrb	r3, [r7, #15]
 80109d4:	009b      	lsls	r3, r3, #2
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	f003 0304 	and.w	r3, r3, #4
 80109dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	891a      	ldrh	r2, [r3, #8]
 80109e2:	887b      	ldrh	r3, [r7, #2]
 80109e4:	1ad3      	subs	r3, r2, r3
 80109e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80109e8:	7bbb      	ldrb	r3, [r7, #14]
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	89bb      	ldrh	r3, [r7, #12]
 80109ee:	4413      	add	r3, r2
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80109f6:	4619      	mov	r1, r3
 80109f8:	2036      	movs	r0, #54	@ 0x36
 80109fa:	f7fa fb99 	bl	800b130 <pbuf_alloc>
 80109fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	f000 80b7 	beq.w	8010b76 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	891a      	ldrh	r2, [r3, #8]
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	891b      	ldrh	r3, [r3, #8]
 8010a12:	1ad3      	subs	r3, r2, r3
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	887b      	ldrh	r3, [r7, #2]
 8010a18:	4413      	add	r3, r2
 8010a1a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	6858      	ldr	r0, [r3, #4]
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	685a      	ldr	r2, [r3, #4]
 8010a24:	7bbb      	ldrb	r3, [r7, #14]
 8010a26:	18d1      	adds	r1, r2, r3
 8010a28:	897b      	ldrh	r3, [r7, #10]
 8010a2a:	89ba      	ldrh	r2, [r7, #12]
 8010a2c:	f7fb f85a 	bl	800bae4 <pbuf_copy_partial>
 8010a30:	4603      	mov	r3, r0
 8010a32:	461a      	mov	r2, r3
 8010a34:	89bb      	ldrh	r3, [r7, #12]
 8010a36:	4293      	cmp	r3, r2
 8010a38:	f040 809f 	bne.w	8010b7a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	899b      	ldrh	r3, [r3, #12]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7f9 fa69 	bl	8009f1c <lwip_htons>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a52:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010a54:	2300      	movs	r3, #0
 8010a56:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010a58:	7efb      	ldrb	r3, [r7, #27]
 8010a5a:	f003 0308 	and.w	r3, r3, #8
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d007      	beq.n	8010a72 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010a62:	7efb      	ldrb	r3, [r7, #27]
 8010a64:	f023 0308 	bic.w	r3, r3, #8
 8010a68:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010a6a:	7ebb      	ldrb	r3, [r7, #26]
 8010a6c:	f043 0308 	orr.w	r3, r3, #8
 8010a70:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010a72:	7efb      	ldrb	r3, [r7, #27]
 8010a74:	f003 0301 	and.w	r3, r3, #1
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d007      	beq.n	8010a8c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010a7c:	7efb      	ldrb	r3, [r7, #27]
 8010a7e:	f023 0301 	bic.w	r3, r3, #1
 8010a82:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010a84:	7ebb      	ldrb	r3, [r7, #26]
 8010a86:	f043 0301 	orr.w	r3, r3, #1
 8010a8a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7f9 fa57 	bl	8009f46 <lwip_htonl>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	887b      	ldrh	r3, [r7, #2]
 8010a9c:	18d1      	adds	r1, r2, r3
 8010a9e:	7eba      	ldrb	r2, [r7, #26]
 8010aa0:	7bfb      	ldrb	r3, [r7, #15]
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	6939      	ldr	r1, [r7, #16]
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f7ff fa51 	bl	800ff50 <tcp_create_segment>
 8010aae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d063      	beq.n	8010b7e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fa feaa 	bl	800b814 <pbuf_clen>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010aca:	1a9b      	subs	r3, r3, r2
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	6858      	ldr	r0, [r3, #4]
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	891a      	ldrh	r2, [r3, #8]
 8010ade:	89bb      	ldrh	r3, [r7, #12]
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	f7fa fc81 	bl	800b3ec <pbuf_realloc>
  useg->len -= remainder;
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	891a      	ldrh	r2, [r3, #8]
 8010aee:	89bb      	ldrh	r3, [r7, #12]
 8010af0:	1ad3      	subs	r3, r2, r3
 8010af2:	b29a      	uxth	r2, r3
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	899b      	ldrh	r3, [r3, #12]
 8010afe:	b29c      	uxth	r4, r3
 8010b00:	7efb      	ldrb	r3, [r7, #27]
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7f9 fa09 	bl	8009f1c <lwip_htons>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	4322      	orrs	r2, r4
 8010b14:	b292      	uxth	r2, r2
 8010b16:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fa fe79 	bl	800b814 <pbuf_clen>
 8010b22:	4603      	mov	r3, r0
 8010b24:	461a      	mov	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b2c:	4413      	add	r3, r2
 8010b2e:	b29a      	uxth	r2, r3
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fa fe6a 	bl	800b814 <pbuf_clen>
 8010b40:	4603      	mov	r3, r0
 8010b42:	461a      	mov	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b4a:	4413      	add	r3, r2
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	69fa      	ldr	r2, [r7, #28]
 8010b60:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d103      	bne.n	8010b72 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	e016      	b.n	8010ba4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010b76:	bf00      	nop
 8010b78:	e002      	b.n	8010b80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010b7a:	bf00      	nop
 8010b7c:	e000      	b.n	8010b80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010b7e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010b80:	69fb      	ldr	r3, [r7, #28]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d006      	beq.n	8010b94 <tcp_split_unsent_seg+0x25c>
 8010b86:	4b09      	ldr	r3, [pc, #36]	@ (8010bac <tcp_split_unsent_seg+0x274>)
 8010b88:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010b8c:	490d      	ldr	r1, [pc, #52]	@ (8010bc4 <tcp_split_unsent_seg+0x28c>)
 8010b8e:	4809      	ldr	r0, [pc, #36]	@ (8010bb4 <tcp_split_unsent_seg+0x27c>)
 8010b90:	f004 faf0 	bl	8015174 <iprintf>
  if (p != NULL) {
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d002      	beq.n	8010ba0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010b9a:	6938      	ldr	r0, [r7, #16]
 8010b9c:	f7fa fdac 	bl	800b6f8 <pbuf_free>
  }

  return ERR_MEM;
 8010ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3724      	adds	r7, #36	@ 0x24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd90      	pop	{r4, r7, pc}
 8010bac:	08018340 	.word	0x08018340
 8010bb0:	080186d4 	.word	0x080186d4
 8010bb4:	08018394 	.word	0x08018394
 8010bb8:	080186f8 	.word	0x080186f8
 8010bbc:	0801871c 	.word	0x0801871c
 8010bc0:	0801872c 	.word	0x0801872c
 8010bc4:	0801873c 	.word	0x0801873c

08010bc8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010bc8:	b590      	push	{r4, r7, lr}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d106      	bne.n	8010be4 <tcp_send_fin+0x1c>
 8010bd6:	4b21      	ldr	r3, [pc, #132]	@ (8010c5c <tcp_send_fin+0x94>)
 8010bd8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010bdc:	4920      	ldr	r1, [pc, #128]	@ (8010c60 <tcp_send_fin+0x98>)
 8010bde:	4821      	ldr	r0, [pc, #132]	@ (8010c64 <tcp_send_fin+0x9c>)
 8010be0:	f004 fac8 	bl	8015174 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d02e      	beq.n	8010c4a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bf0:	60fb      	str	r3, [r7, #12]
 8010bf2:	e002      	b.n	8010bfa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d1f8      	bne.n	8010bf4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	899b      	ldrh	r3, [r3, #12]
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7f9 f986 	bl	8009f1c <lwip_htons>
 8010c10:	4603      	mov	r3, r0
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	f003 0307 	and.w	r3, r3, #7
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d116      	bne.n	8010c4a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	68db      	ldr	r3, [r3, #12]
 8010c20:	899b      	ldrh	r3, [r3, #12]
 8010c22:	b29c      	uxth	r4, r3
 8010c24:	2001      	movs	r0, #1
 8010c26:	f7f9 f979 	bl	8009f1c <lwip_htons>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	4322      	orrs	r2, r4
 8010c34:	b292      	uxth	r2, r2
 8010c36:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	8b5b      	ldrh	r3, [r3, #26]
 8010c3c:	f043 0320 	orr.w	r3, r3, #32
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010c46:	2300      	movs	r3, #0
 8010c48:	e004      	b.n	8010c54 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010c4a:	2101      	movs	r1, #1
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 f80b 	bl	8010c68 <tcp_enqueue_flags>
 8010c52:	4603      	mov	r3, r0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3714      	adds	r7, #20
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd90      	pop	{r4, r7, pc}
 8010c5c:	08018340 	.word	0x08018340
 8010c60:	08018748 	.word	0x08018748
 8010c64:	08018394 	.word	0x08018394

08010c68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b08a      	sub	sp, #40	@ 0x28
 8010c6c:	af02      	add	r7, sp, #8
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	460b      	mov	r3, r1
 8010c72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010c74:	2300      	movs	r3, #0
 8010c76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010c7c:	78fb      	ldrb	r3, [r7, #3]
 8010c7e:	f003 0303 	and.w	r3, r3, #3
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d106      	bne.n	8010c94 <tcp_enqueue_flags+0x2c>
 8010c86:	4b67      	ldr	r3, [pc, #412]	@ (8010e24 <tcp_enqueue_flags+0x1bc>)
 8010c88:	f240 4211 	movw	r2, #1041	@ 0x411
 8010c8c:	4966      	ldr	r1, [pc, #408]	@ (8010e28 <tcp_enqueue_flags+0x1c0>)
 8010c8e:	4867      	ldr	r0, [pc, #412]	@ (8010e2c <tcp_enqueue_flags+0x1c4>)
 8010c90:	f004 fa70 	bl	8015174 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d106      	bne.n	8010ca8 <tcp_enqueue_flags+0x40>
 8010c9a:	4b62      	ldr	r3, [pc, #392]	@ (8010e24 <tcp_enqueue_flags+0x1bc>)
 8010c9c:	f240 4213 	movw	r2, #1043	@ 0x413
 8010ca0:	4963      	ldr	r1, [pc, #396]	@ (8010e30 <tcp_enqueue_flags+0x1c8>)
 8010ca2:	4862      	ldr	r0, [pc, #392]	@ (8010e2c <tcp_enqueue_flags+0x1c4>)
 8010ca4:	f004 fa66 	bl	8015174 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010ca8:	78fb      	ldrb	r3, [r7, #3]
 8010caa:	f003 0302 	and.w	r3, r3, #2
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d001      	beq.n	8010cb6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010cb6:	7ffb      	ldrb	r3, [r7, #31]
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	f003 0304 	and.w	r3, r3, #4
 8010cc0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010cca:	4619      	mov	r1, r3
 8010ccc:	2036      	movs	r0, #54	@ 0x36
 8010cce:	f7fa fa2f 	bl	800b130 <pbuf_alloc>
 8010cd2:	6138      	str	r0, [r7, #16]
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d109      	bne.n	8010cee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	8b5b      	ldrh	r3, [r3, #26]
 8010cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cec:	e095      	b.n	8010e1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	895a      	ldrh	r2, [r3, #10]
 8010cf2:	7dfb      	ldrb	r3, [r7, #23]
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d206      	bcs.n	8010d08 <tcp_enqueue_flags+0xa0>
 8010cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8010e24 <tcp_enqueue_flags+0x1bc>)
 8010cfc:	f240 4239 	movw	r2, #1081	@ 0x439
 8010d00:	494c      	ldr	r1, [pc, #304]	@ (8010e34 <tcp_enqueue_flags+0x1cc>)
 8010d02:	484a      	ldr	r0, [pc, #296]	@ (8010e2c <tcp_enqueue_flags+0x1c4>)
 8010d04:	f004 fa36 	bl	8015174 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010d0c:	78fa      	ldrb	r2, [r7, #3]
 8010d0e:	7ffb      	ldrb	r3, [r7, #31]
 8010d10:	9300      	str	r3, [sp, #0]
 8010d12:	460b      	mov	r3, r1
 8010d14:	6939      	ldr	r1, [r7, #16]
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7ff f91a 	bl	800ff50 <tcp_create_segment>
 8010d1c:	60f8      	str	r0, [r7, #12]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d109      	bne.n	8010d38 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	8b5b      	ldrh	r3, [r3, #26]
 8010d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d2c:	b29a      	uxth	r2, r3
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010d32:	f04f 33ff 	mov.w	r3, #4294967295
 8010d36:	e070      	b.n	8010e1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	f003 0303 	and.w	r3, r3, #3
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d006      	beq.n	8010d52 <tcp_enqueue_flags+0xea>
 8010d44:	4b37      	ldr	r3, [pc, #220]	@ (8010e24 <tcp_enqueue_flags+0x1bc>)
 8010d46:	f240 4242 	movw	r2, #1090	@ 0x442
 8010d4a:	493b      	ldr	r1, [pc, #236]	@ (8010e38 <tcp_enqueue_flags+0x1d0>)
 8010d4c:	4837      	ldr	r0, [pc, #220]	@ (8010e2c <tcp_enqueue_flags+0x1c4>)
 8010d4e:	f004 fa11 	bl	8015174 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	891b      	ldrh	r3, [r3, #8]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d006      	beq.n	8010d68 <tcp_enqueue_flags+0x100>
 8010d5a:	4b32      	ldr	r3, [pc, #200]	@ (8010e24 <tcp_enqueue_flags+0x1bc>)
 8010d5c:	f240 4243 	movw	r2, #1091	@ 0x443
 8010d60:	4936      	ldr	r1, [pc, #216]	@ (8010e3c <tcp_enqueue_flags+0x1d4>)
 8010d62:	4832      	ldr	r0, [pc, #200]	@ (8010e2c <tcp_enqueue_flags+0x1c4>)
 8010d64:	f004 fa06 	bl	8015174 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d103      	bne.n	8010d78 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010d76:	e00d      	b.n	8010d94 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d7c:	61bb      	str	r3, [r7, #24]
 8010d7e:	e002      	b.n	8010d86 <tcp_enqueue_flags+0x11e>
 8010d80:	69bb      	ldr	r3, [r7, #24]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	61bb      	str	r3, [r7, #24]
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1f8      	bne.n	8010d80 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	68fa      	ldr	r2, [r7, #12]
 8010d92:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2200      	movs	r2, #0
 8010d98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010d9c:	78fb      	ldrb	r3, [r7, #3]
 8010d9e:	f003 0302 	and.w	r3, r3, #2
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d104      	bne.n	8010db0 <tcp_enqueue_flags+0x148>
 8010da6:	78fb      	ldrb	r3, [r7, #3]
 8010da8:	f003 0301 	and.w	r3, r3, #1
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d004      	beq.n	8010dba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010db4:	1c5a      	adds	r2, r3, #1
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010dba:	78fb      	ldrb	r3, [r7, #3]
 8010dbc:	f003 0301 	and.w	r3, r3, #1
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d006      	beq.n	8010dd2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	8b5b      	ldrh	r3, [r3, #26]
 8010dc8:	f043 0320 	orr.w	r3, r3, #32
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fa fd1c 	bl	800b814 <pbuf_clen>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	461a      	mov	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010de6:	4413      	add	r3, r2
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d00e      	beq.n	8010e18 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d10a      	bne.n	8010e18 <tcp_enqueue_flags+0x1b0>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d106      	bne.n	8010e18 <tcp_enqueue_flags+0x1b0>
 8010e0a:	4b06      	ldr	r3, [pc, #24]	@ (8010e24 <tcp_enqueue_flags+0x1bc>)
 8010e0c:	f240 4265 	movw	r2, #1125	@ 0x465
 8010e10:	490b      	ldr	r1, [pc, #44]	@ (8010e40 <tcp_enqueue_flags+0x1d8>)
 8010e12:	4806      	ldr	r0, [pc, #24]	@ (8010e2c <tcp_enqueue_flags+0x1c4>)
 8010e14:	f004 f9ae 	bl	8015174 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3720      	adds	r7, #32
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	08018340 	.word	0x08018340
 8010e28:	08018764 	.word	0x08018764
 8010e2c:	08018394 	.word	0x08018394
 8010e30:	080187bc 	.word	0x080187bc
 8010e34:	080187dc 	.word	0x080187dc
 8010e38:	08018818 	.word	0x08018818
 8010e3c:	08018830 	.word	0x08018830
 8010e40:	0801885c 	.word	0x0801885c

08010e44 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010e44:	b5b0      	push	{r4, r5, r7, lr}
 8010e46:	b08a      	sub	sp, #40	@ 0x28
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d106      	bne.n	8010e60 <tcp_output+0x1c>
 8010e52:	4b8a      	ldr	r3, [pc, #552]	@ (801107c <tcp_output+0x238>)
 8010e54:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010e58:	4989      	ldr	r1, [pc, #548]	@ (8011080 <tcp_output+0x23c>)
 8010e5a:	488a      	ldr	r0, [pc, #552]	@ (8011084 <tcp_output+0x240>)
 8010e5c:	f004 f98a 	bl	8015174 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	7d1b      	ldrb	r3, [r3, #20]
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d106      	bne.n	8010e76 <tcp_output+0x32>
 8010e68:	4b84      	ldr	r3, [pc, #528]	@ (801107c <tcp_output+0x238>)
 8010e6a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010e6e:	4986      	ldr	r1, [pc, #536]	@ (8011088 <tcp_output+0x244>)
 8010e70:	4884      	ldr	r0, [pc, #528]	@ (8011084 <tcp_output+0x240>)
 8010e72:	f004 f97f 	bl	8015174 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010e76:	4b85      	ldr	r3, [pc, #532]	@ (801108c <tcp_output+0x248>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d101      	bne.n	8010e84 <tcp_output+0x40>
    return ERR_OK;
 8010e80:	2300      	movs	r3, #0
 8010e82:	e1ce      	b.n	8011222 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e90:	4293      	cmp	r3, r2
 8010e92:	bf28      	it	cs
 8010e94:	4613      	movcs	r3, r2
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10b      	bne.n	8010ebe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	8b5b      	ldrh	r3, [r3, #26]
 8010eaa:	f003 0302 	and.w	r3, r3, #2
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f000 81aa 	beq.w	8011208 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fdcb 	bl	8011a50 <tcp_send_empty_ack>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	e1b1      	b.n	8011222 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010ebe:	6879      	ldr	r1, [r7, #4]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	3304      	adds	r3, #4
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f7ff f826 	bl	800ff18 <tcp_route>
 8010ecc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d102      	bne.n	8010eda <tcp_output+0x96>
    return ERR_RTE;
 8010ed4:	f06f 0303 	mvn.w	r3, #3
 8010ed8:	e1a3      	b.n	8011222 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d003      	beq.n	8010ee8 <tcp_output+0xa4>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d111      	bne.n	8010f0c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d002      	beq.n	8010ef4 <tcp_output+0xb0>
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	3304      	adds	r3, #4
 8010ef2:	e000      	b.n	8010ef6 <tcp_output+0xb2>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d102      	bne.n	8010f04 <tcp_output+0xc0>
      return ERR_RTE;
 8010efe:	f06f 0303 	mvn.w	r3, #3
 8010f02:	e18e      	b.n	8011222 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7f9 f817 	bl	8009f46 <lwip_htonl>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f1e:	1ad3      	subs	r3, r2, r3
 8010f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f22:	8912      	ldrh	r2, [r2, #8]
 8010f24:	4413      	add	r3, r2
 8010f26:	69ba      	ldr	r2, [r7, #24]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d227      	bcs.n	8010f7c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f32:	461a      	mov	r2, r3
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d114      	bne.n	8010f64 <tcp_output+0x120>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d110      	bne.n	8010f64 <tcp_output+0x120>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d10b      	bne.n	8010f64 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2201      	movs	r2, #1
 8010f58:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	8b5b      	ldrh	r3, [r3, #26]
 8010f68:	f003 0302 	and.w	r3, r3, #2
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 814d 	beq.w	801120c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 fd6c 	bl	8011a50 <tcp_send_empty_ack>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	e152      	b.n	8011222 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f88:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010f8a:	6a3b      	ldr	r3, [r7, #32]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	f000 811c 	beq.w	80111ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010f92:	e002      	b.n	8010f9a <tcp_output+0x156>
 8010f94:	6a3b      	ldr	r3, [r7, #32]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	623b      	str	r3, [r7, #32]
 8010f9a:	6a3b      	ldr	r3, [r7, #32]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d1f8      	bne.n	8010f94 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010fa2:	e112      	b.n	80111ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa6:	68db      	ldr	r3, [r3, #12]
 8010fa8:	899b      	ldrh	r3, [r3, #12]
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7f8 ffb5 	bl	8009f1c <lwip_htons>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	f003 0304 	and.w	r3, r3, #4
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d006      	beq.n	8010fcc <tcp_output+0x188>
 8010fbe:	4b2f      	ldr	r3, [pc, #188]	@ (801107c <tcp_output+0x238>)
 8010fc0:	f240 5236 	movw	r2, #1334	@ 0x536
 8010fc4:	4932      	ldr	r1, [pc, #200]	@ (8011090 <tcp_output+0x24c>)
 8010fc6:	482f      	ldr	r0, [pc, #188]	@ (8011084 <tcp_output+0x240>)
 8010fc8:	f004 f8d4 	bl	8015174 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d01f      	beq.n	8011014 <tcp_output+0x1d0>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	8b5b      	ldrh	r3, [r3, #26]
 8010fd8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d119      	bne.n	8011014 <tcp_output+0x1d0>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00b      	beq.n	8011000 <tcp_output+0x1bc>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d110      	bne.n	8011014 <tcp_output+0x1d0>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ff6:	891a      	ldrh	r2, [r3, #8]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d209      	bcs.n	8011014 <tcp_output+0x1d0>
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011006:	2b00      	cmp	r3, #0
 8011008:	d004      	beq.n	8011014 <tcp_output+0x1d0>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011010:	2b08      	cmp	r3, #8
 8011012:	d901      	bls.n	8011018 <tcp_output+0x1d4>
 8011014:	2301      	movs	r3, #1
 8011016:	e000      	b.n	801101a <tcp_output+0x1d6>
 8011018:	2300      	movs	r3, #0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d106      	bne.n	801102c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	8b5b      	ldrh	r3, [r3, #26]
 8011022:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011026:	2b00      	cmp	r3, #0
 8011028:	f000 80e4 	beq.w	80111f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	7d1b      	ldrb	r3, [r3, #20]
 8011030:	2b02      	cmp	r3, #2
 8011032:	d00d      	beq.n	8011050 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	899b      	ldrh	r3, [r3, #12]
 801103a:	b29c      	uxth	r4, r3
 801103c:	2010      	movs	r0, #16
 801103e:	f7f8 ff6d 	bl	8009f1c <lwip_htons>
 8011042:	4603      	mov	r3, r0
 8011044:	461a      	mov	r2, r3
 8011046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	4322      	orrs	r2, r4
 801104c:	b292      	uxth	r2, r2
 801104e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011050:	697a      	ldr	r2, [r7, #20]
 8011052:	6879      	ldr	r1, [r7, #4]
 8011054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011056:	f000 f909 	bl	801126c <tcp_output_segment>
 801105a:	4603      	mov	r3, r0
 801105c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d016      	beq.n	8011094 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	8b5b      	ldrh	r3, [r3, #26]
 801106a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801106e:	b29a      	uxth	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	835a      	strh	r2, [r3, #26]
      return err;
 8011074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011078:	e0d3      	b.n	8011222 <tcp_output+0x3de>
 801107a:	bf00      	nop
 801107c:	08018340 	.word	0x08018340
 8011080:	08018884 	.word	0x08018884
 8011084:	08018394 	.word	0x08018394
 8011088:	0801889c 	.word	0x0801889c
 801108c:	2000beb0 	.word	0x2000beb0
 8011090:	080188c4 	.word	0x080188c4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	7d1b      	ldrb	r3, [r3, #20]
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d006      	beq.n	80110b2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	8b5b      	ldrh	r3, [r3, #26]
 80110a8:	f023 0303 	bic.w	r3, r3, #3
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7f8 ff44 	bl	8009f46 <lwip_htonl>
 80110be:	4604      	mov	r4, r0
 80110c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c2:	891b      	ldrh	r3, [r3, #8]
 80110c4:	461d      	mov	r5, r3
 80110c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	899b      	ldrh	r3, [r3, #12]
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7f8 ff24 	bl	8009f1c <lwip_htons>
 80110d4:	4603      	mov	r3, r0
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	f003 0303 	and.w	r3, r3, #3
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d001      	beq.n	80110e4 <tcp_output+0x2a0>
 80110e0:	2301      	movs	r3, #1
 80110e2:	e000      	b.n	80110e6 <tcp_output+0x2a2>
 80110e4:	2300      	movs	r3, #0
 80110e6:	442b      	add	r3, r5
 80110e8:	4423      	add	r3, r4
 80110ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	da02      	bge.n	80110fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	68ba      	ldr	r2, [r7, #8]
 80110fc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80110fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011100:	891b      	ldrh	r3, [r3, #8]
 8011102:	461c      	mov	r4, r3
 8011104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	899b      	ldrh	r3, [r3, #12]
 801110a:	b29b      	uxth	r3, r3
 801110c:	4618      	mov	r0, r3
 801110e:	f7f8 ff05 	bl	8009f1c <lwip_htons>
 8011112:	4603      	mov	r3, r0
 8011114:	b2db      	uxtb	r3, r3
 8011116:	f003 0303 	and.w	r3, r3, #3
 801111a:	2b00      	cmp	r3, #0
 801111c:	d001      	beq.n	8011122 <tcp_output+0x2de>
 801111e:	2301      	movs	r3, #1
 8011120:	e000      	b.n	8011124 <tcp_output+0x2e0>
 8011122:	2300      	movs	r3, #0
 8011124:	4423      	add	r3, r4
 8011126:	2b00      	cmp	r3, #0
 8011128:	d049      	beq.n	80111be <tcp_output+0x37a>
      seg->next = NULL;
 801112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112c:	2200      	movs	r2, #0
 801112e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011134:	2b00      	cmp	r3, #0
 8011136:	d105      	bne.n	8011144 <tcp_output+0x300>
        pcb->unacked = seg;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801113c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011140:	623b      	str	r3, [r7, #32]
 8011142:	e03f      	b.n	80111c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011146:	68db      	ldr	r3, [r3, #12]
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	4618      	mov	r0, r3
 801114c:	f7f8 fefb 	bl	8009f46 <lwip_htonl>
 8011150:	4604      	mov	r4, r0
 8011152:	6a3b      	ldr	r3, [r7, #32]
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	4618      	mov	r0, r3
 801115a:	f7f8 fef4 	bl	8009f46 <lwip_htonl>
 801115e:	4603      	mov	r3, r0
 8011160:	1ae3      	subs	r3, r4, r3
 8011162:	2b00      	cmp	r3, #0
 8011164:	da24      	bge.n	80111b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	3370      	adds	r3, #112	@ 0x70
 801116a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801116c:	e002      	b.n	8011174 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d011      	beq.n	80111a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	4618      	mov	r0, r3
 8011186:	f7f8 fede 	bl	8009f46 <lwip_htonl>
 801118a:	4604      	mov	r4, r0
 801118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	4618      	mov	r0, r3
 8011194:	f7f8 fed7 	bl	8009f46 <lwip_htonl>
 8011198:	4603      	mov	r3, r0
 801119a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801119c:	2b00      	cmp	r3, #0
 801119e:	dbe6      	blt.n	801116e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	e009      	b.n	80111c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80111b0:	6a3b      	ldr	r3, [r7, #32]
 80111b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80111b6:	6a3b      	ldr	r3, [r7, #32]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	623b      	str	r3, [r7, #32]
 80111bc:	e002      	b.n	80111c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80111be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80111c0:	f7fb ff1f 	bl	800d002 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80111ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d012      	beq.n	80111f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80111d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7f8 feb5 	bl	8009f46 <lwip_htonl>
 80111dc:	4602      	mov	r2, r0
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111e6:	8912      	ldrh	r2, [r2, #8]
 80111e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80111ea:	69ba      	ldr	r2, [r7, #24]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	f4bf aed9 	bcs.w	8010fa4 <tcp_output+0x160>
 80111f2:	e000      	b.n	80111f6 <tcp_output+0x3b2>
      break;
 80111f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d108      	bne.n	8011210 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2200      	movs	r2, #0
 8011202:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011206:	e004      	b.n	8011212 <tcp_output+0x3ce>
    goto output_done;
 8011208:	bf00      	nop
 801120a:	e002      	b.n	8011212 <tcp_output+0x3ce>
    goto output_done;
 801120c:	bf00      	nop
 801120e:	e000      	b.n	8011212 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011210:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	8b5b      	ldrh	r3, [r3, #26]
 8011216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801121a:	b29a      	uxth	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011220:	2300      	movs	r3, #0
}
 8011222:	4618      	mov	r0, r3
 8011224:	3728      	adds	r7, #40	@ 0x28
 8011226:	46bd      	mov	sp, r7
 8011228:	bdb0      	pop	{r4, r5, r7, pc}
 801122a:	bf00      	nop

0801122c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d106      	bne.n	8011248 <tcp_output_segment_busy+0x1c>
 801123a:	4b09      	ldr	r3, [pc, #36]	@ (8011260 <tcp_output_segment_busy+0x34>)
 801123c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011240:	4908      	ldr	r1, [pc, #32]	@ (8011264 <tcp_output_segment_busy+0x38>)
 8011242:	4809      	ldr	r0, [pc, #36]	@ (8011268 <tcp_output_segment_busy+0x3c>)
 8011244:	f003 ff96 	bl	8015174 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	7b9b      	ldrb	r3, [r3, #14]
 801124e:	2b01      	cmp	r3, #1
 8011250:	d001      	beq.n	8011256 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011252:	2301      	movs	r3, #1
 8011254:	e000      	b.n	8011258 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011256:	2300      	movs	r3, #0
}
 8011258:	4618      	mov	r0, r3
 801125a:	3708      	adds	r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	08018340 	.word	0x08018340
 8011264:	080188dc 	.word	0x080188dc
 8011268:	08018394 	.word	0x08018394

0801126c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801126c:	b5b0      	push	{r4, r5, r7, lr}
 801126e:	b08c      	sub	sp, #48	@ 0x30
 8011270:	af04      	add	r7, sp, #16
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d106      	bne.n	801128c <tcp_output_segment+0x20>
 801127e:	4b64      	ldr	r3, [pc, #400]	@ (8011410 <tcp_output_segment+0x1a4>)
 8011280:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011284:	4963      	ldr	r1, [pc, #396]	@ (8011414 <tcp_output_segment+0x1a8>)
 8011286:	4864      	ldr	r0, [pc, #400]	@ (8011418 <tcp_output_segment+0x1ac>)
 8011288:	f003 ff74 	bl	8015174 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d106      	bne.n	80112a0 <tcp_output_segment+0x34>
 8011292:	4b5f      	ldr	r3, [pc, #380]	@ (8011410 <tcp_output_segment+0x1a4>)
 8011294:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011298:	4960      	ldr	r1, [pc, #384]	@ (801141c <tcp_output_segment+0x1b0>)
 801129a:	485f      	ldr	r0, [pc, #380]	@ (8011418 <tcp_output_segment+0x1ac>)
 801129c:	f003 ff6a 	bl	8015174 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d106      	bne.n	80112b4 <tcp_output_segment+0x48>
 80112a6:	4b5a      	ldr	r3, [pc, #360]	@ (8011410 <tcp_output_segment+0x1a4>)
 80112a8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80112ac:	495c      	ldr	r1, [pc, #368]	@ (8011420 <tcp_output_segment+0x1b4>)
 80112ae:	485a      	ldr	r0, [pc, #360]	@ (8011418 <tcp_output_segment+0x1ac>)
 80112b0:	f003 ff60 	bl	8015174 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80112b4:	68f8      	ldr	r0, [r7, #12]
 80112b6:	f7ff ffb9 	bl	801122c <tcp_output_segment_busy>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d001      	beq.n	80112c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	e0a1      	b.n	8011408 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	68dc      	ldr	r4, [r3, #12]
 80112cc:	4610      	mov	r0, r2
 80112ce:	f7f8 fe3a 	bl	8009f46 <lwip_htonl>
 80112d2:	4603      	mov	r3, r0
 80112d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	68dc      	ldr	r4, [r3, #12]
 80112de:	4610      	mov	r0, r2
 80112e0:	f7f8 fe1c 	bl	8009f1c <lwip_htons>
 80112e4:	4603      	mov	r3, r0
 80112e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ec:	68ba      	ldr	r2, [r7, #8]
 80112ee:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80112f0:	441a      	add	r2, r3
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	3314      	adds	r3, #20
 80112fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	7a9b      	ldrb	r3, [r3, #10]
 8011302:	f003 0301 	and.w	r3, r3, #1
 8011306:	2b00      	cmp	r3, #0
 8011308:	d015      	beq.n	8011336 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	3304      	adds	r3, #4
 801130e:	461a      	mov	r2, r3
 8011310:	6879      	ldr	r1, [r7, #4]
 8011312:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8011316:	f7fc fa39 	bl	800d78c <tcp_eff_send_mss_netif>
 801131a:	4603      	mov	r3, r0
 801131c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801131e:	8b7b      	ldrh	r3, [r7, #26]
 8011320:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011324:	4618      	mov	r0, r3
 8011326:	f7f8 fe0e 	bl	8009f46 <lwip_htonl>
 801132a:	4602      	mov	r2, r0
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011330:	69fb      	ldr	r3, [r7, #28]
 8011332:	3304      	adds	r3, #4
 8011334:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801133c:	2b00      	cmp	r3, #0
 801133e:	da02      	bge.n	8011346 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	2200      	movs	r2, #0
 8011344:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801134a:	2b00      	cmp	r3, #0
 801134c:	d10c      	bne.n	8011368 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801134e:	4b35      	ldr	r3, [pc, #212]	@ (8011424 <tcp_output_segment+0x1b8>)
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	685b      	ldr	r3, [r3, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	f7f8 fdf2 	bl	8009f46 <lwip_htonl>
 8011362:	4602      	mov	r2, r0
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	68da      	ldr	r2, [r3, #12]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	8959      	ldrh	r1, [r3, #10]
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	8b3a      	ldrh	r2, [r7, #24]
 8011382:	1a8a      	subs	r2, r1, r2
 8011384:	b292      	uxth	r2, r2
 8011386:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	8919      	ldrh	r1, [r3, #8]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	8b3a      	ldrh	r2, [r7, #24]
 8011394:	1a8a      	subs	r2, r1, r2
 8011396:	b292      	uxth	r2, r2
 8011398:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	68d2      	ldr	r2, [r2, #12]
 80113a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	2200      	movs	r2, #0
 80113aa:	741a      	strb	r2, [r3, #16]
 80113ac:	2200      	movs	r2, #0
 80113ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	68da      	ldr	r2, [r3, #12]
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	7a9b      	ldrb	r3, [r3, #10]
 80113b8:	f003 0301 	and.w	r3, r3, #1
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d001      	beq.n	80113c4 <tcp_output_segment+0x158>
 80113c0:	2318      	movs	r3, #24
 80113c2:	e000      	b.n	80113c6 <tcp_output_segment+0x15a>
 80113c4:	2314      	movs	r3, #20
 80113c6:	4413      	add	r3, r2
 80113c8:	69fa      	ldr	r2, [r7, #28]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d006      	beq.n	80113dc <tcp_output_segment+0x170>
 80113ce:	4b10      	ldr	r3, [pc, #64]	@ (8011410 <tcp_output_segment+0x1a4>)
 80113d0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80113d4:	4914      	ldr	r1, [pc, #80]	@ (8011428 <tcp_output_segment+0x1bc>)
 80113d6:	4810      	ldr	r0, [pc, #64]	@ (8011418 <tcp_output_segment+0x1ac>)
 80113d8:	f003 fecc 	bl	8015174 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6858      	ldr	r0, [r3, #4]
 80113e0:	68b9      	ldr	r1, [r7, #8]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	1d1c      	adds	r4, r3, #4
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	7add      	ldrb	r5, [r3, #11]
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	7a9b      	ldrb	r3, [r3, #10]
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	9202      	str	r2, [sp, #8]
 80113f2:	2206      	movs	r2, #6
 80113f4:	9201      	str	r2, [sp, #4]
 80113f6:	9300      	str	r3, [sp, #0]
 80113f8:	462b      	mov	r3, r5
 80113fa:	4622      	mov	r2, r4
 80113fc:	f002 fbaa 	bl	8013b54 <ip4_output_if>
 8011400:	4603      	mov	r3, r0
 8011402:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011408:	4618      	mov	r0, r3
 801140a:	3720      	adds	r7, #32
 801140c:	46bd      	mov	sp, r7
 801140e:	bdb0      	pop	{r4, r5, r7, pc}
 8011410:	08018340 	.word	0x08018340
 8011414:	08018904 	.word	0x08018904
 8011418:	08018394 	.word	0x08018394
 801141c:	08018924 	.word	0x08018924
 8011420:	08018944 	.word	0x08018944
 8011424:	2000be64 	.word	0x2000be64
 8011428:	08018968 	.word	0x08018968

0801142c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801142c:	b5b0      	push	{r4, r5, r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d106      	bne.n	8011448 <tcp_rexmit_rto_prepare+0x1c>
 801143a:	4b31      	ldr	r3, [pc, #196]	@ (8011500 <tcp_rexmit_rto_prepare+0xd4>)
 801143c:	f240 6263 	movw	r2, #1635	@ 0x663
 8011440:	4930      	ldr	r1, [pc, #192]	@ (8011504 <tcp_rexmit_rto_prepare+0xd8>)
 8011442:	4831      	ldr	r0, [pc, #196]	@ (8011508 <tcp_rexmit_rto_prepare+0xdc>)
 8011444:	f003 fe96 	bl	8015174 <iprintf>

  if (pcb->unacked == NULL) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011450:	f06f 0305 	mvn.w	r3, #5
 8011454:	e050      	b.n	80114f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801145a:	60fb      	str	r3, [r7, #12]
 801145c:	e00b      	b.n	8011476 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	f7ff fee4 	bl	801122c <tcp_output_segment_busy>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d002      	beq.n	8011470 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801146a:	f06f 0305 	mvn.w	r3, #5
 801146e:	e043      	b.n	80114f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	60fb      	str	r3, [r7, #12]
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d1ef      	bne.n	801145e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f7ff fed4 	bl	801122c <tcp_output_segment_busy>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d002      	beq.n	8011490 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801148a:	f06f 0305 	mvn.w	r3, #5
 801148e:	e033      	b.n	80114f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2200      	movs	r2, #0
 80114a4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	8b5b      	ldrh	r3, [r3, #26]
 80114aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7f8 fd43 	bl	8009f46 <lwip_htonl>
 80114c0:	4604      	mov	r4, r0
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	891b      	ldrh	r3, [r3, #8]
 80114c6:	461d      	mov	r5, r3
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	899b      	ldrh	r3, [r3, #12]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7f8 fd23 	bl	8009f1c <lwip_htons>
 80114d6:	4603      	mov	r3, r0
 80114d8:	b2db      	uxtb	r3, r3
 80114da:	f003 0303 	and.w	r3, r3, #3
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d001      	beq.n	80114e6 <tcp_rexmit_rto_prepare+0xba>
 80114e2:	2301      	movs	r3, #1
 80114e4:	e000      	b.n	80114e8 <tcp_rexmit_rto_prepare+0xbc>
 80114e6:	2300      	movs	r3, #0
 80114e8:	442b      	add	r3, r5
 80114ea:	18e2      	adds	r2, r4, r3
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2200      	movs	r2, #0
 80114f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80114f6:	2300      	movs	r3, #0
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3710      	adds	r7, #16
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bdb0      	pop	{r4, r5, r7, pc}
 8011500:	08018340 	.word	0x08018340
 8011504:	0801897c 	.word	0x0801897c
 8011508:	08018394 	.word	0x08018394

0801150c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <tcp_rexmit_rto_commit+0x1c>
 801151a:	4b0d      	ldr	r3, [pc, #52]	@ (8011550 <tcp_rexmit_rto_commit+0x44>)
 801151c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011520:	490c      	ldr	r1, [pc, #48]	@ (8011554 <tcp_rexmit_rto_commit+0x48>)
 8011522:	480d      	ldr	r0, [pc, #52]	@ (8011558 <tcp_rexmit_rto_commit+0x4c>)
 8011524:	f003 fe26 	bl	8015174 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801152e:	2bff      	cmp	r3, #255	@ 0xff
 8011530:	d007      	beq.n	8011542 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011538:	3301      	adds	r3, #1
 801153a:	b2da      	uxtb	r2, r3
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f7ff fc7e 	bl	8010e44 <tcp_output>
}
 8011548:	bf00      	nop
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	08018340 	.word	0x08018340
 8011554:	080189a0 	.word	0x080189a0
 8011558:	08018394 	.word	0x08018394

0801155c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d106      	bne.n	8011578 <tcp_rexmit_rto+0x1c>
 801156a:	4b0a      	ldr	r3, [pc, #40]	@ (8011594 <tcp_rexmit_rto+0x38>)
 801156c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011570:	4909      	ldr	r1, [pc, #36]	@ (8011598 <tcp_rexmit_rto+0x3c>)
 8011572:	480a      	ldr	r0, [pc, #40]	@ (801159c <tcp_rexmit_rto+0x40>)
 8011574:	f003 fdfe 	bl	8015174 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7ff ff57 	bl	801142c <tcp_rexmit_rto_prepare>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d102      	bne.n	801158a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7ff ffc1 	bl	801150c <tcp_rexmit_rto_commit>
  }
}
 801158a:	bf00      	nop
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	08018340 	.word	0x08018340
 8011598:	080189c4 	.word	0x080189c4
 801159c:	08018394 	.word	0x08018394

080115a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80115a0:	b590      	push	{r4, r7, lr}
 80115a2:	b085      	sub	sp, #20
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d106      	bne.n	80115bc <tcp_rexmit+0x1c>
 80115ae:	4b2f      	ldr	r3, [pc, #188]	@ (801166c <tcp_rexmit+0xcc>)
 80115b0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80115b4:	492e      	ldr	r1, [pc, #184]	@ (8011670 <tcp_rexmit+0xd0>)
 80115b6:	482f      	ldr	r0, [pc, #188]	@ (8011674 <tcp_rexmit+0xd4>)
 80115b8:	f003 fddc 	bl	8015174 <iprintf>

  if (pcb->unacked == NULL) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d102      	bne.n	80115ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 80115c4:	f06f 0305 	mvn.w	r3, #5
 80115c8:	e04c      	b.n	8011664 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80115d0:	68b8      	ldr	r0, [r7, #8]
 80115d2:	f7ff fe2b 	bl	801122c <tcp_output_segment_busy>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d002      	beq.n	80115e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80115dc:	f06f 0305 	mvn.w	r3, #5
 80115e0:	e040      	b.n	8011664 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	336c      	adds	r3, #108	@ 0x6c
 80115ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115f0:	e002      	b.n	80115f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d011      	beq.n	8011624 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	4618      	mov	r0, r3
 801160a:	f7f8 fc9c 	bl	8009f46 <lwip_htonl>
 801160e:	4604      	mov	r4, r0
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	4618      	mov	r0, r3
 8011618:	f7f8 fc95 	bl	8009f46 <lwip_htonl>
 801161c:	4603      	mov	r3, r0
 801161e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011620:	2b00      	cmp	r3, #0
 8011622:	dbe6      	blt.n	80115f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	68ba      	ldr	r2, [r7, #8]
 8011630:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d103      	bne.n	8011642 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011648:	2bff      	cmp	r3, #255	@ 0xff
 801164a:	d007      	beq.n	801165c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011652:	3301      	adds	r3, #1
 8011654:	b2da      	uxtb	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2200      	movs	r2, #0
 8011660:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011662:	2300      	movs	r3, #0
}
 8011664:	4618      	mov	r0, r3
 8011666:	3714      	adds	r7, #20
 8011668:	46bd      	mov	sp, r7
 801166a:	bd90      	pop	{r4, r7, pc}
 801166c:	08018340 	.word	0x08018340
 8011670:	080189e0 	.word	0x080189e0
 8011674:	08018394 	.word	0x08018394

08011678 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d106      	bne.n	8011694 <tcp_rexmit_fast+0x1c>
 8011686:	4b2a      	ldr	r3, [pc, #168]	@ (8011730 <tcp_rexmit_fast+0xb8>)
 8011688:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801168c:	4929      	ldr	r1, [pc, #164]	@ (8011734 <tcp_rexmit_fast+0xbc>)
 801168e:	482a      	ldr	r0, [pc, #168]	@ (8011738 <tcp_rexmit_fast+0xc0>)
 8011690:	f003 fd70 	bl	8015174 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011698:	2b00      	cmp	r3, #0
 801169a:	d045      	beq.n	8011728 <tcp_rexmit_fast+0xb0>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8b5b      	ldrh	r3, [r3, #26]
 80116a0:	f003 0304 	and.w	r3, r3, #4
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d13f      	bne.n	8011728 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f7ff ff79 	bl	80115a0 <tcp_rexmit>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d139      	bne.n	8011728 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80116c0:	4293      	cmp	r3, r2
 80116c2:	bf28      	it	cs
 80116c4:	4613      	movcs	r3, r2
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	da00      	bge.n	80116ce <tcp_rexmit_fast+0x56>
 80116cc:	3301      	adds	r3, #1
 80116ce:	105b      	asrs	r3, r3, #1
 80116d0:	b29a      	uxth	r2, r3
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80116de:	461a      	mov	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80116e4:	005b      	lsls	r3, r3, #1
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d206      	bcs.n	80116f8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80116ee:	005b      	lsls	r3, r3, #1
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011702:	4619      	mov	r1, r3
 8011704:	0049      	lsls	r1, r1, #1
 8011706:	440b      	add	r3, r1
 8011708:	b29b      	uxth	r3, r3
 801170a:	4413      	add	r3, r2
 801170c:	b29a      	uxth	r2, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	8b5b      	ldrh	r3, [r3, #26]
 8011718:	f043 0304 	orr.w	r3, r3, #4
 801171c:	b29a      	uxth	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2200      	movs	r2, #0
 8011726:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011728:	bf00      	nop
 801172a:	3708      	adds	r7, #8
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	08018340 	.word	0x08018340
 8011734:	080189f8 	.word	0x080189f8
 8011738:	08018394 	.word	0x08018394

0801173c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b086      	sub	sp, #24
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	607b      	str	r3, [r7, #4]
 8011746:	460b      	mov	r3, r1
 8011748:	817b      	strh	r3, [r7, #10]
 801174a:	4613      	mov	r3, r2
 801174c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801174e:	897a      	ldrh	r2, [r7, #10]
 8011750:	893b      	ldrh	r3, [r7, #8]
 8011752:	4413      	add	r3, r2
 8011754:	b29b      	uxth	r3, r3
 8011756:	3314      	adds	r3, #20
 8011758:	b29b      	uxth	r3, r3
 801175a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801175e:	4619      	mov	r1, r3
 8011760:	2022      	movs	r0, #34	@ 0x22
 8011762:	f7f9 fce5 	bl	800b130 <pbuf_alloc>
 8011766:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d04d      	beq.n	801180a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801176e:	897b      	ldrh	r3, [r7, #10]
 8011770:	3313      	adds	r3, #19
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	8952      	ldrh	r2, [r2, #10]
 8011776:	4293      	cmp	r3, r2
 8011778:	db06      	blt.n	8011788 <tcp_output_alloc_header_common+0x4c>
 801177a:	4b26      	ldr	r3, [pc, #152]	@ (8011814 <tcp_output_alloc_header_common+0xd8>)
 801177c:	f240 7223 	movw	r2, #1827	@ 0x723
 8011780:	4925      	ldr	r1, [pc, #148]	@ (8011818 <tcp_output_alloc_header_common+0xdc>)
 8011782:	4826      	ldr	r0, [pc, #152]	@ (801181c <tcp_output_alloc_header_common+0xe0>)
 8011784:	f003 fcf6 	bl	8015174 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801178e:	8c3b      	ldrh	r3, [r7, #32]
 8011790:	4618      	mov	r0, r3
 8011792:	f7f8 fbc3 	bl	8009f1c <lwip_htons>
 8011796:	4603      	mov	r3, r0
 8011798:	461a      	mov	r2, r3
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801179e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7f8 fbbb 	bl	8009f1c <lwip_htons>
 80117a6:	4603      	mov	r3, r0
 80117a8:	461a      	mov	r2, r3
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80117b4:	68f8      	ldr	r0, [r7, #12]
 80117b6:	f7f8 fbc6 	bl	8009f46 <lwip_htonl>
 80117ba:	4602      	mov	r2, r0
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80117c0:	897b      	ldrh	r3, [r7, #10]
 80117c2:	089b      	lsrs	r3, r3, #2
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	3305      	adds	r3, #5
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	031b      	lsls	r3, r3, #12
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	4313      	orrs	r3, r2
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7f8 fb9f 	bl	8009f1c <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	461a      	mov	r2, r3
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80117e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7f8 fb97 	bl	8009f1c <lwip_htons>
 80117ee:	4603      	mov	r3, r0
 80117f0:	461a      	mov	r2, r3
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	2200      	movs	r2, #0
 80117fa:	741a      	strb	r2, [r3, #16]
 80117fc:	2200      	movs	r2, #0
 80117fe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	2200      	movs	r2, #0
 8011804:	749a      	strb	r2, [r3, #18]
 8011806:	2200      	movs	r2, #0
 8011808:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801180a:	697b      	ldr	r3, [r7, #20]
}
 801180c:	4618      	mov	r0, r3
 801180e:	3718      	adds	r7, #24
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	08018340 	.word	0x08018340
 8011818:	08018a18 	.word	0x08018a18
 801181c:	08018394 	.word	0x08018394

08011820 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011820:	b5b0      	push	{r4, r5, r7, lr}
 8011822:	b08a      	sub	sp, #40	@ 0x28
 8011824:	af04      	add	r7, sp, #16
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	607b      	str	r3, [r7, #4]
 801182a:	460b      	mov	r3, r1
 801182c:	817b      	strh	r3, [r7, #10]
 801182e:	4613      	mov	r3, r2
 8011830:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d106      	bne.n	8011846 <tcp_output_alloc_header+0x26>
 8011838:	4b15      	ldr	r3, [pc, #84]	@ (8011890 <tcp_output_alloc_header+0x70>)
 801183a:	f240 7242 	movw	r2, #1858	@ 0x742
 801183e:	4915      	ldr	r1, [pc, #84]	@ (8011894 <tcp_output_alloc_header+0x74>)
 8011840:	4815      	ldr	r0, [pc, #84]	@ (8011898 <tcp_output_alloc_header+0x78>)
 8011842:	f003 fc97 	bl	8015174 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	8adb      	ldrh	r3, [r3, #22]
 801184e:	68fa      	ldr	r2, [r7, #12]
 8011850:	8b12      	ldrh	r2, [r2, #24]
 8011852:	68f9      	ldr	r1, [r7, #12]
 8011854:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011856:	893d      	ldrh	r5, [r7, #8]
 8011858:	897c      	ldrh	r4, [r7, #10]
 801185a:	9103      	str	r1, [sp, #12]
 801185c:	2110      	movs	r1, #16
 801185e:	9102      	str	r1, [sp, #8]
 8011860:	9201      	str	r2, [sp, #4]
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	462a      	mov	r2, r5
 8011868:	4621      	mov	r1, r4
 801186a:	f7ff ff67 	bl	801173c <tcp_output_alloc_header_common>
 801186e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d006      	beq.n	8011884 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801187e:	441a      	add	r2, r3
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011884:	697b      	ldr	r3, [r7, #20]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3718      	adds	r7, #24
 801188a:	46bd      	mov	sp, r7
 801188c:	bdb0      	pop	{r4, r5, r7, pc}
 801188e:	bf00      	nop
 8011890:	08018340 	.word	0x08018340
 8011894:	08018a48 	.word	0x08018a48
 8011898:	08018394 	.word	0x08018394

0801189c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b088      	sub	sp, #32
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	4611      	mov	r1, r2
 80118a8:	461a      	mov	r2, r3
 80118aa:	460b      	mov	r3, r1
 80118ac:	71fb      	strb	r3, [r7, #7]
 80118ae:	4613      	mov	r3, r2
 80118b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80118b2:	2300      	movs	r3, #0
 80118b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d106      	bne.n	80118ca <tcp_output_fill_options+0x2e>
 80118bc:	4b12      	ldr	r3, [pc, #72]	@ (8011908 <tcp_output_fill_options+0x6c>)
 80118be:	f240 7256 	movw	r2, #1878	@ 0x756
 80118c2:	4912      	ldr	r1, [pc, #72]	@ (801190c <tcp_output_fill_options+0x70>)
 80118c4:	4812      	ldr	r0, [pc, #72]	@ (8011910 <tcp_output_fill_options+0x74>)
 80118c6:	f003 fc55 	bl	8015174 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80118d0:	69bb      	ldr	r3, [r7, #24]
 80118d2:	3314      	adds	r3, #20
 80118d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80118d6:	8bfb      	ldrh	r3, [r7, #30]
 80118d8:	009b      	lsls	r3, r3, #2
 80118da:	461a      	mov	r2, r3
 80118dc:	79fb      	ldrb	r3, [r7, #7]
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	f003 0304 	and.w	r3, r3, #4
 80118e4:	4413      	add	r3, r2
 80118e6:	3314      	adds	r3, #20
 80118e8:	69ba      	ldr	r2, [r7, #24]
 80118ea:	4413      	add	r3, r2
 80118ec:	697a      	ldr	r2, [r7, #20]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d006      	beq.n	8011900 <tcp_output_fill_options+0x64>
 80118f2:	4b05      	ldr	r3, [pc, #20]	@ (8011908 <tcp_output_fill_options+0x6c>)
 80118f4:	f240 7275 	movw	r2, #1909	@ 0x775
 80118f8:	4906      	ldr	r1, [pc, #24]	@ (8011914 <tcp_output_fill_options+0x78>)
 80118fa:	4805      	ldr	r0, [pc, #20]	@ (8011910 <tcp_output_fill_options+0x74>)
 80118fc:	f003 fc3a 	bl	8015174 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011900:	bf00      	nop
 8011902:	3720      	adds	r7, #32
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	08018340 	.word	0x08018340
 801190c:	08018a70 	.word	0x08018a70
 8011910:	08018394 	.word	0x08018394
 8011914:	08018968 	.word	0x08018968

08011918 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b08a      	sub	sp, #40	@ 0x28
 801191c:	af04      	add	r7, sp, #16
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	60b9      	str	r1, [r7, #8]
 8011922:	607a      	str	r2, [r7, #4]
 8011924:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d106      	bne.n	801193a <tcp_output_control_segment+0x22>
 801192c:	4b1c      	ldr	r3, [pc, #112]	@ (80119a0 <tcp_output_control_segment+0x88>)
 801192e:	f240 7287 	movw	r2, #1927	@ 0x787
 8011932:	491c      	ldr	r1, [pc, #112]	@ (80119a4 <tcp_output_control_segment+0x8c>)
 8011934:	481c      	ldr	r0, [pc, #112]	@ (80119a8 <tcp_output_control_segment+0x90>)
 8011936:	f003 fc1d 	bl	8015174 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801193a:	683a      	ldr	r2, [r7, #0]
 801193c:	6879      	ldr	r1, [r7, #4]
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f7fe faea 	bl	800ff18 <tcp_route>
 8011944:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d102      	bne.n	8011952 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801194c:	23fc      	movs	r3, #252	@ 0xfc
 801194e:	75fb      	strb	r3, [r7, #23]
 8011950:	e01c      	b.n	801198c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d006      	beq.n	8011966 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	7adb      	ldrb	r3, [r3, #11]
 801195c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	7a9b      	ldrb	r3, [r3, #10]
 8011962:	757b      	strb	r3, [r7, #21]
 8011964:	e003      	b.n	801196e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011966:	23ff      	movs	r3, #255	@ 0xff
 8011968:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801196a:	2300      	movs	r3, #0
 801196c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801196e:	7dba      	ldrb	r2, [r7, #22]
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	9302      	str	r3, [sp, #8]
 8011974:	2306      	movs	r3, #6
 8011976:	9301      	str	r3, [sp, #4]
 8011978:	7d7b      	ldrb	r3, [r7, #21]
 801197a:	9300      	str	r3, [sp, #0]
 801197c:	4613      	mov	r3, r2
 801197e:	683a      	ldr	r2, [r7, #0]
 8011980:	6879      	ldr	r1, [r7, #4]
 8011982:	68b8      	ldr	r0, [r7, #8]
 8011984:	f002 f8e6 	bl	8013b54 <ip4_output_if>
 8011988:	4603      	mov	r3, r0
 801198a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801198c:	68b8      	ldr	r0, [r7, #8]
 801198e:	f7f9 feb3 	bl	800b6f8 <pbuf_free>
  return err;
 8011992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3718      	adds	r7, #24
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	08018340 	.word	0x08018340
 80119a4:	08018a98 	.word	0x08018a98
 80119a8:	08018394 	.word	0x08018394

080119ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80119ac:	b590      	push	{r4, r7, lr}
 80119ae:	b08b      	sub	sp, #44	@ 0x2c
 80119b0:	af04      	add	r7, sp, #16
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
 80119b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d106      	bne.n	80119ce <tcp_rst+0x22>
 80119c0:	4b1f      	ldr	r3, [pc, #124]	@ (8011a40 <tcp_rst+0x94>)
 80119c2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80119c6:	491f      	ldr	r1, [pc, #124]	@ (8011a44 <tcp_rst+0x98>)
 80119c8:	481f      	ldr	r0, [pc, #124]	@ (8011a48 <tcp_rst+0x9c>)
 80119ca:	f003 fbd3 	bl	8015174 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80119ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d106      	bne.n	80119e2 <tcp_rst+0x36>
 80119d4:	4b1a      	ldr	r3, [pc, #104]	@ (8011a40 <tcp_rst+0x94>)
 80119d6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80119da:	491c      	ldr	r1, [pc, #112]	@ (8011a4c <tcp_rst+0xa0>)
 80119dc:	481a      	ldr	r0, [pc, #104]	@ (8011a48 <tcp_rst+0x9c>)
 80119de:	f003 fbc9 	bl	8015174 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119e2:	2300      	movs	r3, #0
 80119e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80119e6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80119ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80119ec:	7dfb      	ldrb	r3, [r7, #23]
 80119ee:	b29c      	uxth	r4, r3
 80119f0:	68b8      	ldr	r0, [r7, #8]
 80119f2:	f7f8 faa8 	bl	8009f46 <lwip_htonl>
 80119f6:	4602      	mov	r2, r0
 80119f8:	8abb      	ldrh	r3, [r7, #20]
 80119fa:	9303      	str	r3, [sp, #12]
 80119fc:	2314      	movs	r3, #20
 80119fe:	9302      	str	r3, [sp, #8]
 8011a00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011a02:	9301      	str	r3, [sp, #4]
 8011a04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011a06:	9300      	str	r3, [sp, #0]
 8011a08:	4613      	mov	r3, r2
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	4621      	mov	r1, r4
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7ff fe94 	bl	801173c <tcp_output_alloc_header_common>
 8011a14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d00c      	beq.n	8011a36 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a1c:	7dfb      	ldrb	r3, [r7, #23]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	6939      	ldr	r1, [r7, #16]
 8011a22:	68f8      	ldr	r0, [r7, #12]
 8011a24:	f7ff ff3a 	bl	801189c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a2a:	683a      	ldr	r2, [r7, #0]
 8011a2c:	6939      	ldr	r1, [r7, #16]
 8011a2e:	68f8      	ldr	r0, [r7, #12]
 8011a30:	f7ff ff72 	bl	8011918 <tcp_output_control_segment>
 8011a34:	e000      	b.n	8011a38 <tcp_rst+0x8c>
    return;
 8011a36:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011a38:	371c      	adds	r7, #28
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd90      	pop	{r4, r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	08018340 	.word	0x08018340
 8011a44:	08018ac4 	.word	0x08018ac4
 8011a48:	08018394 	.word	0x08018394
 8011a4c:	08018ae0 	.word	0x08018ae0

08011a50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011a50:	b590      	push	{r4, r7, lr}
 8011a52:	b087      	sub	sp, #28
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d106      	bne.n	8011a74 <tcp_send_empty_ack+0x24>
 8011a66:	4b28      	ldr	r3, [pc, #160]	@ (8011b08 <tcp_send_empty_ack+0xb8>)
 8011a68:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011a6c:	4927      	ldr	r1, [pc, #156]	@ (8011b0c <tcp_send_empty_ack+0xbc>)
 8011a6e:	4828      	ldr	r0, [pc, #160]	@ (8011b10 <tcp_send_empty_ack+0xc0>)
 8011a70:	f003 fb80 	bl	8015174 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a74:	7dfb      	ldrb	r3, [r7, #23]
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	f003 0304 	and.w	r3, r3, #4
 8011a7e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011a80:	7d7b      	ldrb	r3, [r7, #21]
 8011a82:	b29c      	uxth	r4, r3
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7f8 fa5c 	bl	8009f46 <lwip_htonl>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	2200      	movs	r2, #0
 8011a92:	4621      	mov	r1, r4
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7ff fec3 	bl	8011820 <tcp_output_alloc_header>
 8011a9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d109      	bne.n	8011ab6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	8b5b      	ldrh	r3, [r3, #26]
 8011aa6:	f043 0303 	orr.w	r3, r3, #3
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ab0:	f06f 0301 	mvn.w	r3, #1
 8011ab4:	e023      	b.n	8011afe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011ab6:	7dbb      	ldrb	r3, [r7, #22]
 8011ab8:	7dfa      	ldrb	r2, [r7, #23]
 8011aba:	6939      	ldr	r1, [r7, #16]
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7ff feed 	bl	801189c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	3304      	adds	r3, #4
 8011ac8:	6939      	ldr	r1, [r7, #16]
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7ff ff24 	bl	8011918 <tcp_output_control_segment>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d007      	beq.n	8011aec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	8b5b      	ldrh	r3, [r3, #26]
 8011ae0:	f043 0303 	orr.w	r3, r3, #3
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	835a      	strh	r2, [r3, #26]
 8011aea:	e006      	b.n	8011afa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	8b5b      	ldrh	r3, [r3, #26]
 8011af0:	f023 0303 	bic.w	r3, r3, #3
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	371c      	adds	r7, #28
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd90      	pop	{r4, r7, pc}
 8011b06:	bf00      	nop
 8011b08:	08018340 	.word	0x08018340
 8011b0c:	08018afc 	.word	0x08018afc
 8011b10:	08018394 	.word	0x08018394

08011b14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011b14:	b590      	push	{r4, r7, lr}
 8011b16:	b087      	sub	sp, #28
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d106      	bne.n	8011b34 <tcp_keepalive+0x20>
 8011b26:	4b18      	ldr	r3, [pc, #96]	@ (8011b88 <tcp_keepalive+0x74>)
 8011b28:	f640 0224 	movw	r2, #2084	@ 0x824
 8011b2c:	4917      	ldr	r1, [pc, #92]	@ (8011b8c <tcp_keepalive+0x78>)
 8011b2e:	4818      	ldr	r0, [pc, #96]	@ (8011b90 <tcp_keepalive+0x7c>)
 8011b30:	f003 fb20 	bl	8015174 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011b34:	7dfb      	ldrb	r3, [r7, #23]
 8011b36:	b29c      	uxth	r4, r3
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7f8 fa01 	bl	8009f46 <lwip_htonl>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2200      	movs	r2, #0
 8011b48:	4621      	mov	r1, r4
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f7ff fe68 	bl	8011820 <tcp_output_alloc_header>
 8011b50:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d102      	bne.n	8011b5e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011b58:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5c:	e010      	b.n	8011b80 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b5e:	7dfb      	ldrb	r3, [r7, #23]
 8011b60:	2200      	movs	r2, #0
 8011b62:	6939      	ldr	r1, [r7, #16]
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7ff fe99 	bl	801189c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	3304      	adds	r3, #4
 8011b70:	6939      	ldr	r1, [r7, #16]
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f7ff fed0 	bl	8011918 <tcp_output_control_segment>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	371c      	adds	r7, #28
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd90      	pop	{r4, r7, pc}
 8011b88:	08018340 	.word	0x08018340
 8011b8c:	08018b1c 	.word	0x08018b1c
 8011b90:	08018394 	.word	0x08018394

08011b94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011b94:	b590      	push	{r4, r7, lr}
 8011b96:	b08b      	sub	sp, #44	@ 0x2c
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d106      	bne.n	8011bb6 <tcp_zero_window_probe+0x22>
 8011ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8011cdc <tcp_zero_window_probe+0x148>)
 8011baa:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011bae:	494c      	ldr	r1, [pc, #304]	@ (8011ce0 <tcp_zero_window_probe+0x14c>)
 8011bb0:	484c      	ldr	r0, [pc, #304]	@ (8011ce4 <tcp_zero_window_probe+0x150>)
 8011bb2:	f003 fadf 	bl	8015174 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d101      	bne.n	8011bc6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	e086      	b.n	8011cd4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011bcc:	2bff      	cmp	r3, #255	@ 0xff
 8011bce:	d007      	beq.n	8011be0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	b2da      	uxtb	r2, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011be0:	6a3b      	ldr	r3, [r7, #32]
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	899b      	ldrh	r3, [r3, #12]
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7f8 f997 	bl	8009f1c <lwip_htons>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	f003 0301 	and.w	r3, r3, #1
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d005      	beq.n	8011c06 <tcp_zero_window_probe+0x72>
 8011bfa:	6a3b      	ldr	r3, [r7, #32]
 8011bfc:	891b      	ldrh	r3, [r3, #8]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d101      	bne.n	8011c06 <tcp_zero_window_probe+0x72>
 8011c02:	2301      	movs	r3, #1
 8011c04:	e000      	b.n	8011c08 <tcp_zero_window_probe+0x74>
 8011c06:	2300      	movs	r3, #0
 8011c08:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011c0a:	7ffb      	ldrb	r3, [r7, #31]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	bf0c      	ite	eq
 8011c10:	2301      	moveq	r3, #1
 8011c12:	2300      	movne	r3, #0
 8011c14:	b2db      	uxtb	r3, r3
 8011c16:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c1c:	b299      	uxth	r1, r3
 8011c1e:	6a3b      	ldr	r3, [r7, #32]
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	8bba      	ldrh	r2, [r7, #28]
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f7ff fdfa 	bl	8011820 <tcp_output_alloc_header>
 8011c2c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d102      	bne.n	8011c3a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011c34:	f04f 33ff 	mov.w	r3, #4294967295
 8011c38:	e04c      	b.n	8011cd4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011c3a:	69bb      	ldr	r3, [r7, #24]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011c40:	7ffb      	ldrb	r3, [r7, #31]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d011      	beq.n	8011c6a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	899b      	ldrh	r3, [r3, #12]
 8011c4a:	b29b      	uxth	r3, r3
 8011c4c:	b21b      	sxth	r3, r3
 8011c4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011c52:	b21c      	sxth	r4, r3
 8011c54:	2011      	movs	r0, #17
 8011c56:	f7f8 f961 	bl	8009f1c <lwip_htons>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	b21b      	sxth	r3, r3
 8011c5e:	4323      	orrs	r3, r4
 8011c60:	b21b      	sxth	r3, r3
 8011c62:	b29a      	uxth	r2, r3
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	819a      	strh	r2, [r3, #12]
 8011c68:	e010      	b.n	8011c8c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	3314      	adds	r3, #20
 8011c70:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011c72:	6a3b      	ldr	r3, [r7, #32]
 8011c74:	6858      	ldr	r0, [r3, #4]
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	891a      	ldrh	r2, [r3, #8]
 8011c7c:	6a3b      	ldr	r3, [r7, #32]
 8011c7e:	891b      	ldrh	r3, [r3, #8]
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	2201      	movs	r2, #1
 8011c86:	6939      	ldr	r1, [r7, #16]
 8011c88:	f7f9 ff2c 	bl	800bae4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011c8c:	6a3b      	ldr	r3, [r7, #32]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7f8 f957 	bl	8009f46 <lwip_htonl>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	1ad3      	subs	r3, r2, r3
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	da02      	bge.n	8011cb0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	69b9      	ldr	r1, [r7, #24]
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f7ff fdef 	bl	801189c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	3304      	adds	r3, #4
 8011cc4:	69b9      	ldr	r1, [r7, #24]
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f7ff fe26 	bl	8011918 <tcp_output_control_segment>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011cd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	372c      	adds	r7, #44	@ 0x2c
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd90      	pop	{r4, r7, pc}
 8011cdc:	08018340 	.word	0x08018340
 8011ce0:	08018b38 	.word	0x08018b38
 8011ce4:	08018394 	.word	0x08018394

08011ce8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011cf0:	f7f9 ffe6 	bl	800bcc0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8011d20 <tcpip_tcp_timer+0x38>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d103      	bne.n	8011d04 <tcpip_tcp_timer+0x1c>
 8011cfc:	4b09      	ldr	r3, [pc, #36]	@ (8011d24 <tcpip_tcp_timer+0x3c>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d005      	beq.n	8011d10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011d04:	2200      	movs	r2, #0
 8011d06:	4908      	ldr	r1, [pc, #32]	@ (8011d28 <tcpip_tcp_timer+0x40>)
 8011d08:	20fa      	movs	r0, #250	@ 0xfa
 8011d0a:	f000 f8f3 	bl	8011ef4 <sys_timeout>
 8011d0e:	e003      	b.n	8011d18 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011d10:	4b06      	ldr	r3, [pc, #24]	@ (8011d2c <tcpip_tcp_timer+0x44>)
 8011d12:	2200      	movs	r2, #0
 8011d14:	601a      	str	r2, [r3, #0]
  }
}
 8011d16:	bf00      	nop
 8011d18:	bf00      	nop
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	2000be70 	.word	0x2000be70
 8011d24:	2000be74 	.word	0x2000be74
 8011d28:	08011ce9 	.word	0x08011ce9
 8011d2c:	2000bebc 	.word	0x2000bebc

08011d30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011d34:	4b0a      	ldr	r3, [pc, #40]	@ (8011d60 <tcp_timer_needed+0x30>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d10f      	bne.n	8011d5c <tcp_timer_needed+0x2c>
 8011d3c:	4b09      	ldr	r3, [pc, #36]	@ (8011d64 <tcp_timer_needed+0x34>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d103      	bne.n	8011d4c <tcp_timer_needed+0x1c>
 8011d44:	4b08      	ldr	r3, [pc, #32]	@ (8011d68 <tcp_timer_needed+0x38>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d007      	beq.n	8011d5c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011d4c:	4b04      	ldr	r3, [pc, #16]	@ (8011d60 <tcp_timer_needed+0x30>)
 8011d4e:	2201      	movs	r2, #1
 8011d50:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011d52:	2200      	movs	r2, #0
 8011d54:	4905      	ldr	r1, [pc, #20]	@ (8011d6c <tcp_timer_needed+0x3c>)
 8011d56:	20fa      	movs	r0, #250	@ 0xfa
 8011d58:	f000 f8cc 	bl	8011ef4 <sys_timeout>
  }
}
 8011d5c:	bf00      	nop
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	2000bebc 	.word	0x2000bebc
 8011d64:	2000be70 	.word	0x2000be70
 8011d68:	2000be74 	.word	0x2000be74
 8011d6c:	08011ce9 	.word	0x08011ce9

08011d70 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b086      	sub	sp, #24
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011d7c:	200a      	movs	r0, #10
 8011d7e:	f7f8 fda1 	bl	800a8c4 <memp_malloc>
 8011d82:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d109      	bne.n	8011d9e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d151      	bne.n	8011e34 <sys_timeout_abs+0xc4>
 8011d90:	4b2a      	ldr	r3, [pc, #168]	@ (8011e3c <sys_timeout_abs+0xcc>)
 8011d92:	22be      	movs	r2, #190	@ 0xbe
 8011d94:	492a      	ldr	r1, [pc, #168]	@ (8011e40 <sys_timeout_abs+0xd0>)
 8011d96:	482b      	ldr	r0, [pc, #172]	@ (8011e44 <sys_timeout_abs+0xd4>)
 8011d98:	f003 f9ec 	bl	8015174 <iprintf>
    return;
 8011d9c:	e04a      	b.n	8011e34 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	2200      	movs	r2, #0
 8011da2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	68ba      	ldr	r2, [r7, #8]
 8011da8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011db6:	4b24      	ldr	r3, [pc, #144]	@ (8011e48 <sys_timeout_abs+0xd8>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d103      	bne.n	8011dc6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011dbe:	4a22      	ldr	r2, [pc, #136]	@ (8011e48 <sys_timeout_abs+0xd8>)
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	6013      	str	r3, [r2, #0]
    return;
 8011dc4:	e037      	b.n	8011e36 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	685a      	ldr	r2, [r3, #4]
 8011dca:	4b1f      	ldr	r3, [pc, #124]	@ (8011e48 <sys_timeout_abs+0xd8>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	1ad3      	subs	r3, r2, r3
 8011dd2:	0fdb      	lsrs	r3, r3, #31
 8011dd4:	f003 0301 	and.w	r3, r3, #1
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d007      	beq.n	8011dee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011dde:	4b1a      	ldr	r3, [pc, #104]	@ (8011e48 <sys_timeout_abs+0xd8>)
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011de6:	4a18      	ldr	r2, [pc, #96]	@ (8011e48 <sys_timeout_abs+0xd8>)
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	6013      	str	r3, [r2, #0]
 8011dec:	e023      	b.n	8011e36 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011dee:	4b16      	ldr	r3, [pc, #88]	@ (8011e48 <sys_timeout_abs+0xd8>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	617b      	str	r3, [r7, #20]
 8011df4:	e01a      	b.n	8011e2c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d00b      	beq.n	8011e16 <sys_timeout_abs+0xa6>
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	685a      	ldr	r2, [r3, #4]
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	1ad3      	subs	r3, r2, r3
 8011e0a:	0fdb      	lsrs	r3, r3, #31
 8011e0c:	f003 0301 	and.w	r3, r3, #1
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d007      	beq.n	8011e26 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	693a      	ldr	r2, [r7, #16]
 8011e22:	601a      	str	r2, [r3, #0]
        break;
 8011e24:	e007      	b.n	8011e36 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	617b      	str	r3, [r7, #20]
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1e1      	bne.n	8011df6 <sys_timeout_abs+0x86>
 8011e32:	e000      	b.n	8011e36 <sys_timeout_abs+0xc6>
    return;
 8011e34:	bf00      	nop
      }
    }
  }
}
 8011e36:	3718      	adds	r7, #24
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	08018b5c 	.word	0x08018b5c
 8011e40:	08018b90 	.word	0x08018b90
 8011e44:	08018bd0 	.word	0x08018bd0
 8011e48:	2000beb4 	.word	0x2000beb4

08011e4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b086      	sub	sp, #24
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	4798      	blx	r3

  now = sys_now();
 8011e5e:	f7f2 f9c1 	bl	80041e4 <sys_now>
 8011e62:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	4b0f      	ldr	r3, [pc, #60]	@ (8011ea8 <lwip_cyclic_timer+0x5c>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	0fdb      	lsrs	r3, r3, #31
 8011e78:	f003 0301 	and.w	r3, r3, #1
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d009      	beq.n	8011e96 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	4413      	add	r3, r2
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	4907      	ldr	r1, [pc, #28]	@ (8011eac <lwip_cyclic_timer+0x60>)
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7ff ff6e 	bl	8011d70 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011e94:	e004      	b.n	8011ea0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	4904      	ldr	r1, [pc, #16]	@ (8011eac <lwip_cyclic_timer+0x60>)
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	f7ff ff68 	bl	8011d70 <sys_timeout_abs>
}
 8011ea0:	bf00      	nop
 8011ea2:	3718      	adds	r7, #24
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	2000beb8 	.word	0x2000beb8
 8011eac:	08011e4d 	.word	0x08011e4d

08011eb0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	607b      	str	r3, [r7, #4]
 8011eba:	e00e      	b.n	8011eda <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8011eec <sys_timeouts_init+0x3c>)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	00db      	lsls	r3, r3, #3
 8011ec8:	4a08      	ldr	r2, [pc, #32]	@ (8011eec <sys_timeouts_init+0x3c>)
 8011eca:	4413      	add	r3, r2
 8011ecc:	461a      	mov	r2, r3
 8011ece:	4908      	ldr	r1, [pc, #32]	@ (8011ef0 <sys_timeouts_init+0x40>)
 8011ed0:	f000 f810 	bl	8011ef4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	607b      	str	r3, [r7, #4]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2b02      	cmp	r3, #2
 8011ede:	d9ed      	bls.n	8011ebc <sys_timeouts_init+0xc>
  }
}
 8011ee0:	bf00      	nop
 8011ee2:	bf00      	nop
 8011ee4:	3708      	adds	r7, #8
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	0801a560 	.word	0x0801a560
 8011ef0:	08011e4d 	.word	0x08011e4d

08011ef4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b086      	sub	sp, #24
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	60b9      	str	r1, [r7, #8]
 8011efe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f06:	d306      	bcc.n	8011f16 <sys_timeout+0x22>
 8011f08:	4b0a      	ldr	r3, [pc, #40]	@ (8011f34 <sys_timeout+0x40>)
 8011f0a:	f240 1229 	movw	r2, #297	@ 0x129
 8011f0e:	490a      	ldr	r1, [pc, #40]	@ (8011f38 <sys_timeout+0x44>)
 8011f10:	480a      	ldr	r0, [pc, #40]	@ (8011f3c <sys_timeout+0x48>)
 8011f12:	f003 f92f 	bl	8015174 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011f16:	f7f2 f965 	bl	80041e4 <sys_now>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	4413      	add	r3, r2
 8011f20:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	68b9      	ldr	r1, [r7, #8]
 8011f26:	6978      	ldr	r0, [r7, #20]
 8011f28:	f7ff ff22 	bl	8011d70 <sys_timeout_abs>
#endif
}
 8011f2c:	bf00      	nop
 8011f2e:	3718      	adds	r7, #24
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	08018b5c 	.word	0x08018b5c
 8011f38:	08018bf8 	.word	0x08018bf8
 8011f3c:	08018bd0 	.word	0x08018bd0

08011f40 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011f46:	f7f2 f94d 	bl	80041e4 <sys_now>
 8011f4a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011f4c:	4b17      	ldr	r3, [pc, #92]	@ (8011fac <sys_check_timeouts+0x6c>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d022      	beq.n	8011f9e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	68fa      	ldr	r2, [r7, #12]
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	0fdb      	lsrs	r3, r3, #31
 8011f62:	f003 0301 	and.w	r3, r3, #1
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d11a      	bne.n	8011fa2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	4a0e      	ldr	r2, [pc, #56]	@ (8011fac <sys_check_timeouts+0x6c>)
 8011f72:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	4a0a      	ldr	r2, [pc, #40]	@ (8011fb0 <sys_check_timeouts+0x70>)
 8011f86:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011f88:	68b9      	ldr	r1, [r7, #8]
 8011f8a:	200a      	movs	r0, #10
 8011f8c:	f7f8 fd10 	bl	800a9b0 <memp_free>
    if (handler != NULL) {
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d0da      	beq.n	8011f4c <sys_check_timeouts+0xc>
      handler(arg);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6838      	ldr	r0, [r7, #0]
 8011f9a:	4798      	blx	r3
  do {
 8011f9c:	e7d6      	b.n	8011f4c <sys_check_timeouts+0xc>
      return;
 8011f9e:	bf00      	nop
 8011fa0:	e000      	b.n	8011fa4 <sys_check_timeouts+0x64>
      return;
 8011fa2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011fa4:	3710      	adds	r7, #16
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	2000beb4 	.word	0x2000beb4
 8011fb0:	2000beb8 	.word	0x2000beb8

08011fb4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011fba:	4b16      	ldr	r3, [pc, #88]	@ (8012014 <sys_timeouts_sleeptime+0x60>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d102      	bne.n	8011fc8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc6:	e020      	b.n	801200a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011fc8:	f7f2 f90c 	bl	80041e4 <sys_now>
 8011fcc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011fce:	4b11      	ldr	r3, [pc, #68]	@ (8012014 <sys_timeouts_sleeptime+0x60>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	685a      	ldr	r2, [r3, #4]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	0fdb      	lsrs	r3, r3, #31
 8011fda:	f003 0301 	and.w	r3, r3, #1
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d001      	beq.n	8011fe8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	e010      	b.n	801200a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8012014 <sys_timeouts_sleeptime+0x60>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	685a      	ldr	r2, [r3, #4]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	1ad3      	subs	r3, r2, r3
 8011ff2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	da06      	bge.n	8012008 <sys_timeouts_sleeptime+0x54>
 8011ffa:	4b07      	ldr	r3, [pc, #28]	@ (8012018 <sys_timeouts_sleeptime+0x64>)
 8011ffc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8012000:	4906      	ldr	r1, [pc, #24]	@ (801201c <sys_timeouts_sleeptime+0x68>)
 8012002:	4807      	ldr	r0, [pc, #28]	@ (8012020 <sys_timeouts_sleeptime+0x6c>)
 8012004:	f003 f8b6 	bl	8015174 <iprintf>
    return ret;
 8012008:	683b      	ldr	r3, [r7, #0]
  }
}
 801200a:	4618      	mov	r0, r3
 801200c:	3708      	adds	r7, #8
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	2000beb4 	.word	0x2000beb4
 8012018:	08018b5c 	.word	0x08018b5c
 801201c:	08018c30 	.word	0x08018c30
 8012020:	08018bd0 	.word	0x08018bd0

08012024 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012028:	f002 ffa4 	bl	8014f74 <rand>
 801202c:	4603      	mov	r3, r0
 801202e:	b29b      	uxth	r3, r3
 8012030:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012034:	b29b      	uxth	r3, r3
 8012036:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801203a:	b29a      	uxth	r2, r3
 801203c:	4b01      	ldr	r3, [pc, #4]	@ (8012044 <udp_init+0x20>)
 801203e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012040:	bf00      	nop
 8012042:	bd80      	pop	{r7, pc}
 8012044:	2000002c 	.word	0x2000002c

08012048 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801204e:	2300      	movs	r3, #0
 8012050:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012052:	4b17      	ldr	r3, [pc, #92]	@ (80120b0 <udp_new_port+0x68>)
 8012054:	881b      	ldrh	r3, [r3, #0]
 8012056:	1c5a      	adds	r2, r3, #1
 8012058:	b291      	uxth	r1, r2
 801205a:	4a15      	ldr	r2, [pc, #84]	@ (80120b0 <udp_new_port+0x68>)
 801205c:	8011      	strh	r1, [r2, #0]
 801205e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012062:	4293      	cmp	r3, r2
 8012064:	d103      	bne.n	801206e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012066:	4b12      	ldr	r3, [pc, #72]	@ (80120b0 <udp_new_port+0x68>)
 8012068:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801206c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801206e:	4b11      	ldr	r3, [pc, #68]	@ (80120b4 <udp_new_port+0x6c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	603b      	str	r3, [r7, #0]
 8012074:	e011      	b.n	801209a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	8a5a      	ldrh	r2, [r3, #18]
 801207a:	4b0d      	ldr	r3, [pc, #52]	@ (80120b0 <udp_new_port+0x68>)
 801207c:	881b      	ldrh	r3, [r3, #0]
 801207e:	429a      	cmp	r2, r3
 8012080:	d108      	bne.n	8012094 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012082:	88fb      	ldrh	r3, [r7, #6]
 8012084:	3301      	adds	r3, #1
 8012086:	80fb      	strh	r3, [r7, #6]
 8012088:	88fb      	ldrh	r3, [r7, #6]
 801208a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801208e:	d3e0      	bcc.n	8012052 <udp_new_port+0xa>
        return 0;
 8012090:	2300      	movs	r3, #0
 8012092:	e007      	b.n	80120a4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	603b      	str	r3, [r7, #0]
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d1ea      	bne.n	8012076 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80120a0:	4b03      	ldr	r3, [pc, #12]	@ (80120b0 <udp_new_port+0x68>)
 80120a2:	881b      	ldrh	r3, [r3, #0]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	370c      	adds	r7, #12
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr
 80120b0:	2000002c 	.word	0x2000002c
 80120b4:	2000bec0 	.word	0x2000bec0

080120b8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	4613      	mov	r3, r2
 80120c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d105      	bne.n	80120d8 <udp_input_local_match+0x20>
 80120cc:	4b27      	ldr	r3, [pc, #156]	@ (801216c <udp_input_local_match+0xb4>)
 80120ce:	2287      	movs	r2, #135	@ 0x87
 80120d0:	4927      	ldr	r1, [pc, #156]	@ (8012170 <udp_input_local_match+0xb8>)
 80120d2:	4828      	ldr	r0, [pc, #160]	@ (8012174 <udp_input_local_match+0xbc>)
 80120d4:	f003 f84e 	bl	8015174 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d105      	bne.n	80120ea <udp_input_local_match+0x32>
 80120de:	4b23      	ldr	r3, [pc, #140]	@ (801216c <udp_input_local_match+0xb4>)
 80120e0:	2288      	movs	r2, #136	@ 0x88
 80120e2:	4925      	ldr	r1, [pc, #148]	@ (8012178 <udp_input_local_match+0xc0>)
 80120e4:	4823      	ldr	r0, [pc, #140]	@ (8012174 <udp_input_local_match+0xbc>)
 80120e6:	f003 f845 	bl	8015174 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	7a1b      	ldrb	r3, [r3, #8]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d00b      	beq.n	801210a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	7a1a      	ldrb	r2, [r3, #8]
 80120f6:	4b21      	ldr	r3, [pc, #132]	@ (801217c <udp_input_local_match+0xc4>)
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120fe:	3301      	adds	r3, #1
 8012100:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012102:	429a      	cmp	r2, r3
 8012104:	d001      	beq.n	801210a <udp_input_local_match+0x52>
    return 0;
 8012106:	2300      	movs	r3, #0
 8012108:	e02b      	b.n	8012162 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801210a:	79fb      	ldrb	r3, [r7, #7]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d018      	beq.n	8012142 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d013      	beq.n	801213e <udp_input_local_match+0x86>
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00f      	beq.n	801213e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801211e:	4b17      	ldr	r3, [pc, #92]	@ (801217c <udp_input_local_match+0xc4>)
 8012120:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012126:	d00a      	beq.n	801213e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681a      	ldr	r2, [r3, #0]
 801212c:	4b13      	ldr	r3, [pc, #76]	@ (801217c <udp_input_local_match+0xc4>)
 801212e:	695b      	ldr	r3, [r3, #20]
 8012130:	405a      	eors	r2, r3
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	3308      	adds	r3, #8
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801213a:	2b00      	cmp	r3, #0
 801213c:	d110      	bne.n	8012160 <udp_input_local_match+0xa8>
          return 1;
 801213e:	2301      	movs	r3, #1
 8012140:	e00f      	b.n	8012162 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d009      	beq.n	801215c <udp_input_local_match+0xa4>
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d005      	beq.n	801215c <udp_input_local_match+0xa4>
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	4b09      	ldr	r3, [pc, #36]	@ (801217c <udp_input_local_match+0xc4>)
 8012156:	695b      	ldr	r3, [r3, #20]
 8012158:	429a      	cmp	r2, r3
 801215a:	d101      	bne.n	8012160 <udp_input_local_match+0xa8>
        return 1;
 801215c:	2301      	movs	r3, #1
 801215e:	e000      	b.n	8012162 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012160:	2300      	movs	r3, #0
}
 8012162:	4618      	mov	r0, r3
 8012164:	3710      	adds	r7, #16
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop
 801216c:	08018c44 	.word	0x08018c44
 8012170:	08018c74 	.word	0x08018c74
 8012174:	08018c98 	.word	0x08018c98
 8012178:	08018cc0 	.word	0x08018cc0
 801217c:	20008d64 	.word	0x20008d64

08012180 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012180:	b590      	push	{r4, r7, lr}
 8012182:	b08d      	sub	sp, #52	@ 0x34
 8012184:	af02      	add	r7, sp, #8
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801218a:	2300      	movs	r3, #0
 801218c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d105      	bne.n	80121a0 <udp_input+0x20>
 8012194:	4b7c      	ldr	r3, [pc, #496]	@ (8012388 <udp_input+0x208>)
 8012196:	22cf      	movs	r2, #207	@ 0xcf
 8012198:	497c      	ldr	r1, [pc, #496]	@ (801238c <udp_input+0x20c>)
 801219a:	487d      	ldr	r0, [pc, #500]	@ (8012390 <udp_input+0x210>)
 801219c:	f002 ffea 	bl	8015174 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d105      	bne.n	80121b2 <udp_input+0x32>
 80121a6:	4b78      	ldr	r3, [pc, #480]	@ (8012388 <udp_input+0x208>)
 80121a8:	22d0      	movs	r2, #208	@ 0xd0
 80121aa:	497a      	ldr	r1, [pc, #488]	@ (8012394 <udp_input+0x214>)
 80121ac:	4878      	ldr	r0, [pc, #480]	@ (8012390 <udp_input+0x210>)
 80121ae:	f002 ffe1 	bl	8015174 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	895b      	ldrh	r3, [r3, #10]
 80121b6:	2b07      	cmp	r3, #7
 80121b8:	d803      	bhi.n	80121c2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f7f9 fa9c 	bl	800b6f8 <pbuf_free>
    goto end;
 80121c0:	e0de      	b.n	8012380 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80121c8:	4b73      	ldr	r3, [pc, #460]	@ (8012398 <udp_input+0x218>)
 80121ca:	695b      	ldr	r3, [r3, #20]
 80121cc:	4a72      	ldr	r2, [pc, #456]	@ (8012398 <udp_input+0x218>)
 80121ce:	6812      	ldr	r2, [r2, #0]
 80121d0:	4611      	mov	r1, r2
 80121d2:	4618      	mov	r0, r3
 80121d4:	f001 fd96 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 80121d8:	4603      	mov	r3, r0
 80121da:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	881b      	ldrh	r3, [r3, #0]
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7f7 fe9a 	bl	8009f1c <lwip_htons>
 80121e8:	4603      	mov	r3, r0
 80121ea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	885b      	ldrh	r3, [r3, #2]
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7f7 fe92 	bl	8009f1c <lwip_htons>
 80121f8:	4603      	mov	r3, r0
 80121fa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80121fc:	2300      	movs	r3, #0
 80121fe:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012200:	2300      	movs	r3, #0
 8012202:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012204:	2300      	movs	r3, #0
 8012206:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012208:	4b64      	ldr	r3, [pc, #400]	@ (801239c <udp_input+0x21c>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	627b      	str	r3, [r7, #36]	@ 0x24
 801220e:	e054      	b.n	80122ba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012212:	8a5b      	ldrh	r3, [r3, #18]
 8012214:	89fa      	ldrh	r2, [r7, #14]
 8012216:	429a      	cmp	r2, r3
 8012218:	d14a      	bne.n	80122b0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801221a:	7cfb      	ldrb	r3, [r7, #19]
 801221c:	461a      	mov	r2, r3
 801221e:	6839      	ldr	r1, [r7, #0]
 8012220:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012222:	f7ff ff49 	bl	80120b8 <udp_input_local_match>
 8012226:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012228:	2b00      	cmp	r3, #0
 801222a:	d041      	beq.n	80122b0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801222e:	7c1b      	ldrb	r3, [r3, #16]
 8012230:	f003 0304 	and.w	r3, r3, #4
 8012234:	2b00      	cmp	r3, #0
 8012236:	d11d      	bne.n	8012274 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d102      	bne.n	8012244 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012240:	61fb      	str	r3, [r7, #28]
 8012242:	e017      	b.n	8012274 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012244:	7cfb      	ldrb	r3, [r7, #19]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d014      	beq.n	8012274 <udp_input+0xf4>
 801224a:	4b53      	ldr	r3, [pc, #332]	@ (8012398 <udp_input+0x218>)
 801224c:	695b      	ldr	r3, [r3, #20]
 801224e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012252:	d10f      	bne.n	8012274 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	681a      	ldr	r2, [r3, #0]
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	3304      	adds	r3, #4
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	429a      	cmp	r2, r3
 8012260:	d008      	beq.n	8012274 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012264:	681a      	ldr	r2, [r3, #0]
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	3304      	adds	r3, #4
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	429a      	cmp	r2, r3
 801226e:	d101      	bne.n	8012274 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012272:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012276:	8a9b      	ldrh	r3, [r3, #20]
 8012278:	8a3a      	ldrh	r2, [r7, #16]
 801227a:	429a      	cmp	r2, r3
 801227c:	d118      	bne.n	80122b0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012280:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012282:	2b00      	cmp	r3, #0
 8012284:	d005      	beq.n	8012292 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012288:	685a      	ldr	r2, [r3, #4]
 801228a:	4b43      	ldr	r3, [pc, #268]	@ (8012398 <udp_input+0x218>)
 801228c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801228e:	429a      	cmp	r2, r3
 8012290:	d10e      	bne.n	80122b0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012292:	6a3b      	ldr	r3, [r7, #32]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d014      	beq.n	80122c2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801229a:	68da      	ldr	r2, [r3, #12]
 801229c:	6a3b      	ldr	r3, [r7, #32]
 801229e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80122a0:	4b3e      	ldr	r3, [pc, #248]	@ (801239c <udp_input+0x21c>)
 80122a2:	681a      	ldr	r2, [r3, #0]
 80122a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80122a8:	4a3c      	ldr	r2, [pc, #240]	@ (801239c <udp_input+0x21c>)
 80122aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80122ae:	e008      	b.n	80122c2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80122b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80122ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1a7      	bne.n	8012210 <udp_input+0x90>
 80122c0:	e000      	b.n	80122c4 <udp_input+0x144>
        break;
 80122c2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80122c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <udp_input+0x14e>
    pcb = uncon_pcb;
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80122ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d002      	beq.n	80122da <udp_input+0x15a>
    for_us = 1;
 80122d4:	2301      	movs	r3, #1
 80122d6:	76fb      	strb	r3, [r7, #27]
 80122d8:	e00a      	b.n	80122f0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	3304      	adds	r3, #4
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	4b2d      	ldr	r3, [pc, #180]	@ (8012398 <udp_input+0x218>)
 80122e2:	695b      	ldr	r3, [r3, #20]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	bf0c      	ite	eq
 80122e8:	2301      	moveq	r3, #1
 80122ea:	2300      	movne	r3, #0
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80122f0:	7efb      	ldrb	r3, [r7, #27]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d041      	beq.n	801237a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80122f6:	2108      	movs	r1, #8
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f7f9 f977 	bl	800b5ec <pbuf_remove_header>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	d00a      	beq.n	801231a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012304:	4b20      	ldr	r3, [pc, #128]	@ (8012388 <udp_input+0x208>)
 8012306:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801230a:	4925      	ldr	r1, [pc, #148]	@ (80123a0 <udp_input+0x220>)
 801230c:	4820      	ldr	r0, [pc, #128]	@ (8012390 <udp_input+0x210>)
 801230e:	f002 ff31 	bl	8015174 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f7f9 f9f0 	bl	800b6f8 <pbuf_free>
      goto end;
 8012318:	e032      	b.n	8012380 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801231c:	2b00      	cmp	r3, #0
 801231e:	d012      	beq.n	8012346 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012322:	699b      	ldr	r3, [r3, #24]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d00a      	beq.n	801233e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232a:	699c      	ldr	r4, [r3, #24]
 801232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232e:	69d8      	ldr	r0, [r3, #28]
 8012330:	8a3b      	ldrh	r3, [r7, #16]
 8012332:	9300      	str	r3, [sp, #0]
 8012334:	4b1b      	ldr	r3, [pc, #108]	@ (80123a4 <udp_input+0x224>)
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801233a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801233c:	e021      	b.n	8012382 <udp_input+0x202>
        pbuf_free(p);
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f7f9 f9da 	bl	800b6f8 <pbuf_free>
        goto end;
 8012344:	e01c      	b.n	8012380 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012346:	7cfb      	ldrb	r3, [r7, #19]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d112      	bne.n	8012372 <udp_input+0x1f2>
 801234c:	4b12      	ldr	r3, [pc, #72]	@ (8012398 <udp_input+0x218>)
 801234e:	695b      	ldr	r3, [r3, #20]
 8012350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012354:	2be0      	cmp	r3, #224	@ 0xe0
 8012356:	d00c      	beq.n	8012372 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012358:	4b0f      	ldr	r3, [pc, #60]	@ (8012398 <udp_input+0x218>)
 801235a:	899b      	ldrh	r3, [r3, #12]
 801235c:	3308      	adds	r3, #8
 801235e:	b29b      	uxth	r3, r3
 8012360:	b21b      	sxth	r3, r3
 8012362:	4619      	mov	r1, r3
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7f9 f9b4 	bl	800b6d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801236a:	2103      	movs	r1, #3
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f001 f9a9 	bl	80136c4 <icmp_dest_unreach>
      pbuf_free(p);
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7f9 f9c0 	bl	800b6f8 <pbuf_free>
  return;
 8012378:	e003      	b.n	8012382 <udp_input+0x202>
    pbuf_free(p);
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7f9 f9bc 	bl	800b6f8 <pbuf_free>
  return;
 8012380:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012382:	372c      	adds	r7, #44	@ 0x2c
 8012384:	46bd      	mov	sp, r7
 8012386:	bd90      	pop	{r4, r7, pc}
 8012388:	08018c44 	.word	0x08018c44
 801238c:	08018ce8 	.word	0x08018ce8
 8012390:	08018c98 	.word	0x08018c98
 8012394:	08018d00 	.word	0x08018d00
 8012398:	20008d64 	.word	0x20008d64
 801239c:	2000bec0 	.word	0x2000bec0
 80123a0:	08018d1c 	.word	0x08018d1c
 80123a4:	20008d74 	.word	0x20008d74

080123a8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b086      	sub	sp, #24
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	4613      	mov	r3, r2
 80123b4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d101      	bne.n	80123c0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80123bc:	4b39      	ldr	r3, [pc, #228]	@ (80124a4 <udp_bind+0xfc>)
 80123be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d109      	bne.n	80123da <udp_bind+0x32>
 80123c6:	4b38      	ldr	r3, [pc, #224]	@ (80124a8 <udp_bind+0x100>)
 80123c8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80123cc:	4937      	ldr	r1, [pc, #220]	@ (80124ac <udp_bind+0x104>)
 80123ce:	4838      	ldr	r0, [pc, #224]	@ (80124b0 <udp_bind+0x108>)
 80123d0:	f002 fed0 	bl	8015174 <iprintf>
 80123d4:	f06f 030f 	mvn.w	r3, #15
 80123d8:	e060      	b.n	801249c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80123da:	2300      	movs	r3, #0
 80123dc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123de:	4b35      	ldr	r3, [pc, #212]	@ (80124b4 <udp_bind+0x10c>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	e009      	b.n	80123fa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d102      	bne.n	80123f4 <udp_bind+0x4c>
      rebind = 1;
 80123ee:	2301      	movs	r3, #1
 80123f0:	74fb      	strb	r3, [r7, #19]
      break;
 80123f2:	e005      	b.n	8012400 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	617b      	str	r3, [r7, #20]
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d1f2      	bne.n	80123e6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012400:	88fb      	ldrh	r3, [r7, #6]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d109      	bne.n	801241a <udp_bind+0x72>
    port = udp_new_port();
 8012406:	f7ff fe1f 	bl	8012048 <udp_new_port>
 801240a:	4603      	mov	r3, r0
 801240c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801240e:	88fb      	ldrh	r3, [r7, #6]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d12c      	bne.n	801246e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012414:	f06f 0307 	mvn.w	r3, #7
 8012418:	e040      	b.n	801249c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801241a:	4b26      	ldr	r3, [pc, #152]	@ (80124b4 <udp_bind+0x10c>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	617b      	str	r3, [r7, #20]
 8012420:	e022      	b.n	8012468 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012422:	68fa      	ldr	r2, [r7, #12]
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	429a      	cmp	r2, r3
 8012428:	d01b      	beq.n	8012462 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	8a5b      	ldrh	r3, [r3, #18]
 801242e:	88fa      	ldrh	r2, [r7, #6]
 8012430:	429a      	cmp	r2, r3
 8012432:	d116      	bne.n	8012462 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801243c:	429a      	cmp	r2, r3
 801243e:	d00d      	beq.n	801245c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d00a      	beq.n	801245c <udp_bind+0xb4>
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d006      	beq.n	801245c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801244e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012450:	2b00      	cmp	r3, #0
 8012452:	d003      	beq.n	801245c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d102      	bne.n	8012462 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801245c:	f06f 0307 	mvn.w	r3, #7
 8012460:	e01c      	b.n	801249c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	617b      	str	r3, [r7, #20]
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d1d9      	bne.n	8012422 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d002      	beq.n	801247a <udp_bind+0xd2>
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	e000      	b.n	801247c <udp_bind+0xd4>
 801247a:	2300      	movs	r3, #0
 801247c:	68fa      	ldr	r2, [r7, #12]
 801247e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	88fa      	ldrh	r2, [r7, #6]
 8012484:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012486:	7cfb      	ldrb	r3, [r7, #19]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d106      	bne.n	801249a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801248c:	4b09      	ldr	r3, [pc, #36]	@ (80124b4 <udp_bind+0x10c>)
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012494:	4a07      	ldr	r2, [pc, #28]	@ (80124b4 <udp_bind+0x10c>)
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3718      	adds	r7, #24
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	0801a578 	.word	0x0801a578
 80124a8:	08018c44 	.word	0x08018c44
 80124ac:	08018f0c 	.word	0x08018f0c
 80124b0:	08018c98 	.word	0x08018c98
 80124b4:	2000bec0 	.word	0x2000bec0

080124b8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d107      	bne.n	80124da <udp_recv+0x22>
 80124ca:	4b08      	ldr	r3, [pc, #32]	@ (80124ec <udp_recv+0x34>)
 80124cc:	f240 428a 	movw	r2, #1162	@ 0x48a
 80124d0:	4907      	ldr	r1, [pc, #28]	@ (80124f0 <udp_recv+0x38>)
 80124d2:	4808      	ldr	r0, [pc, #32]	@ (80124f4 <udp_recv+0x3c>)
 80124d4:	f002 fe4e 	bl	8015174 <iprintf>
 80124d8:	e005      	b.n	80124e6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	61da      	str	r2, [r3, #28]
}
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	08018c44 	.word	0x08018c44
 80124f0:	08018f78 	.word	0x08018f78
 80124f4:	08018c98 	.word	0x08018c98

080124f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d107      	bne.n	8012516 <udp_remove+0x1e>
 8012506:	4b19      	ldr	r3, [pc, #100]	@ (801256c <udp_remove+0x74>)
 8012508:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801250c:	4918      	ldr	r1, [pc, #96]	@ (8012570 <udp_remove+0x78>)
 801250e:	4819      	ldr	r0, [pc, #100]	@ (8012574 <udp_remove+0x7c>)
 8012510:	f002 fe30 	bl	8015174 <iprintf>
 8012514:	e026      	b.n	8012564 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012516:	4b18      	ldr	r3, [pc, #96]	@ (8012578 <udp_remove+0x80>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	429a      	cmp	r2, r3
 801251e:	d105      	bne.n	801252c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012520:	4b15      	ldr	r3, [pc, #84]	@ (8012578 <udp_remove+0x80>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	4a14      	ldr	r2, [pc, #80]	@ (8012578 <udp_remove+0x80>)
 8012528:	6013      	str	r3, [r2, #0]
 801252a:	e017      	b.n	801255c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801252c:	4b12      	ldr	r3, [pc, #72]	@ (8012578 <udp_remove+0x80>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	60fb      	str	r3, [r7, #12]
 8012532:	e010      	b.n	8012556 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d009      	beq.n	8012550 <udp_remove+0x58>
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	429a      	cmp	r2, r3
 8012544:	d104      	bne.n	8012550 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	68da      	ldr	r2, [r3, #12]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	60da      	str	r2, [r3, #12]
        break;
 801254e:	e005      	b.n	801255c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	60fb      	str	r3, [r7, #12]
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d1eb      	bne.n	8012534 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801255c:	6879      	ldr	r1, [r7, #4]
 801255e:	2000      	movs	r0, #0
 8012560:	f7f8 fa26 	bl	800a9b0 <memp_free>
}
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	08018c44 	.word	0x08018c44
 8012570:	08018f90 	.word	0x08018f90
 8012574:	08018c98 	.word	0x08018c98
 8012578:	2000bec0 	.word	0x2000bec0

0801257c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012582:	2000      	movs	r0, #0
 8012584:	f7f8 f99e 	bl	800a8c4 <memp_malloc>
 8012588:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d007      	beq.n	80125a0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012590:	2220      	movs	r2, #32
 8012592:	2100      	movs	r1, #0
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f002 fe52 	bl	801523e <memset>
    pcb->ttl = UDP_TTL;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	22ff      	movs	r2, #255	@ 0xff
 801259e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80125a0:	687b      	ldr	r3, [r7, #4]
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}

080125aa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b084      	sub	sp, #16
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	4603      	mov	r3, r0
 80125b2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80125b4:	f7ff ffe2 	bl	801257c <udp_new>
 80125b8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80125ba:	68fb      	ldr	r3, [r7, #12]
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3710      	adds	r7, #16
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d01e      	beq.n	8012612 <udp_netif_ip_addr_changed+0x4e>
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d01a      	beq.n	8012612 <udp_netif_ip_addr_changed+0x4e>
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d017      	beq.n	8012612 <udp_netif_ip_addr_changed+0x4e>
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d013      	beq.n	8012612 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80125ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012620 <udp_netif_ip_addr_changed+0x5c>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	60fb      	str	r3, [r7, #12]
 80125f0:	e00c      	b.n	801260c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d103      	bne.n	8012606 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	68db      	ldr	r3, [r3, #12]
 801260a:	60fb      	str	r3, [r7, #12]
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1ef      	bne.n	80125f2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012612:	bf00      	nop
 8012614:	3714      	adds	r7, #20
 8012616:	46bd      	mov	sp, r7
 8012618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261c:	4770      	bx	lr
 801261e:	bf00      	nop
 8012620:	2000bec0 	.word	0x2000bec0

08012624 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801262c:	4915      	ldr	r1, [pc, #84]	@ (8012684 <etharp_free_entry+0x60>)
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	4613      	mov	r3, r2
 8012632:	005b      	lsls	r3, r3, #1
 8012634:	4413      	add	r3, r2
 8012636:	00db      	lsls	r3, r3, #3
 8012638:	440b      	add	r3, r1
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d013      	beq.n	8012668 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012640:	4910      	ldr	r1, [pc, #64]	@ (8012684 <etharp_free_entry+0x60>)
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	4613      	mov	r3, r2
 8012646:	005b      	lsls	r3, r3, #1
 8012648:	4413      	add	r3, r2
 801264a:	00db      	lsls	r3, r3, #3
 801264c:	440b      	add	r3, r1
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4618      	mov	r0, r3
 8012652:	f7f9 f851 	bl	800b6f8 <pbuf_free>
    arp_table[i].q = NULL;
 8012656:	490b      	ldr	r1, [pc, #44]	@ (8012684 <etharp_free_entry+0x60>)
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	4613      	mov	r3, r2
 801265c:	005b      	lsls	r3, r3, #1
 801265e:	4413      	add	r3, r2
 8012660:	00db      	lsls	r3, r3, #3
 8012662:	440b      	add	r3, r1
 8012664:	2200      	movs	r2, #0
 8012666:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012668:	4906      	ldr	r1, [pc, #24]	@ (8012684 <etharp_free_entry+0x60>)
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	4613      	mov	r3, r2
 801266e:	005b      	lsls	r3, r3, #1
 8012670:	4413      	add	r3, r2
 8012672:	00db      	lsls	r3, r3, #3
 8012674:	440b      	add	r3, r1
 8012676:	3314      	adds	r3, #20
 8012678:	2200      	movs	r2, #0
 801267a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801267c:	bf00      	nop
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}
 8012684:	2000bec4 	.word	0x2000bec4

08012688 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801268e:	2300      	movs	r3, #0
 8012690:	607b      	str	r3, [r7, #4]
 8012692:	e096      	b.n	80127c2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012694:	494f      	ldr	r1, [pc, #316]	@ (80127d4 <etharp_tmr+0x14c>)
 8012696:	687a      	ldr	r2, [r7, #4]
 8012698:	4613      	mov	r3, r2
 801269a:	005b      	lsls	r3, r3, #1
 801269c:	4413      	add	r3, r2
 801269e:	00db      	lsls	r3, r3, #3
 80126a0:	440b      	add	r3, r1
 80126a2:	3314      	adds	r3, #20
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80126a8:	78fb      	ldrb	r3, [r7, #3]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f000 8086 	beq.w	80127bc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80126b0:	4948      	ldr	r1, [pc, #288]	@ (80127d4 <etharp_tmr+0x14c>)
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	4613      	mov	r3, r2
 80126b6:	005b      	lsls	r3, r3, #1
 80126b8:	4413      	add	r3, r2
 80126ba:	00db      	lsls	r3, r3, #3
 80126bc:	440b      	add	r3, r1
 80126be:	3312      	adds	r3, #18
 80126c0:	881b      	ldrh	r3, [r3, #0]
 80126c2:	3301      	adds	r3, #1
 80126c4:	b298      	uxth	r0, r3
 80126c6:	4943      	ldr	r1, [pc, #268]	@ (80127d4 <etharp_tmr+0x14c>)
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	4613      	mov	r3, r2
 80126cc:	005b      	lsls	r3, r3, #1
 80126ce:	4413      	add	r3, r2
 80126d0:	00db      	lsls	r3, r3, #3
 80126d2:	440b      	add	r3, r1
 80126d4:	3312      	adds	r3, #18
 80126d6:	4602      	mov	r2, r0
 80126d8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80126da:	493e      	ldr	r1, [pc, #248]	@ (80127d4 <etharp_tmr+0x14c>)
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	4613      	mov	r3, r2
 80126e0:	005b      	lsls	r3, r3, #1
 80126e2:	4413      	add	r3, r2
 80126e4:	00db      	lsls	r3, r3, #3
 80126e6:	440b      	add	r3, r1
 80126e8:	3312      	adds	r3, #18
 80126ea:	881b      	ldrh	r3, [r3, #0]
 80126ec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80126f0:	d215      	bcs.n	801271e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80126f2:	4938      	ldr	r1, [pc, #224]	@ (80127d4 <etharp_tmr+0x14c>)
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	4613      	mov	r3, r2
 80126f8:	005b      	lsls	r3, r3, #1
 80126fa:	4413      	add	r3, r2
 80126fc:	00db      	lsls	r3, r3, #3
 80126fe:	440b      	add	r3, r1
 8012700:	3314      	adds	r3, #20
 8012702:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012704:	2b01      	cmp	r3, #1
 8012706:	d10e      	bne.n	8012726 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012708:	4932      	ldr	r1, [pc, #200]	@ (80127d4 <etharp_tmr+0x14c>)
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	4613      	mov	r3, r2
 801270e:	005b      	lsls	r3, r3, #1
 8012710:	4413      	add	r3, r2
 8012712:	00db      	lsls	r3, r3, #3
 8012714:	440b      	add	r3, r1
 8012716:	3312      	adds	r3, #18
 8012718:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801271a:	2b04      	cmp	r3, #4
 801271c:	d903      	bls.n	8012726 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f7ff ff80 	bl	8012624 <etharp_free_entry>
 8012724:	e04a      	b.n	80127bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012726:	492b      	ldr	r1, [pc, #172]	@ (80127d4 <etharp_tmr+0x14c>)
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	4613      	mov	r3, r2
 801272c:	005b      	lsls	r3, r3, #1
 801272e:	4413      	add	r3, r2
 8012730:	00db      	lsls	r3, r3, #3
 8012732:	440b      	add	r3, r1
 8012734:	3314      	adds	r3, #20
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	2b03      	cmp	r3, #3
 801273a:	d10a      	bne.n	8012752 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801273c:	4925      	ldr	r1, [pc, #148]	@ (80127d4 <etharp_tmr+0x14c>)
 801273e:	687a      	ldr	r2, [r7, #4]
 8012740:	4613      	mov	r3, r2
 8012742:	005b      	lsls	r3, r3, #1
 8012744:	4413      	add	r3, r2
 8012746:	00db      	lsls	r3, r3, #3
 8012748:	440b      	add	r3, r1
 801274a:	3314      	adds	r3, #20
 801274c:	2204      	movs	r2, #4
 801274e:	701a      	strb	r2, [r3, #0]
 8012750:	e034      	b.n	80127bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012752:	4920      	ldr	r1, [pc, #128]	@ (80127d4 <etharp_tmr+0x14c>)
 8012754:	687a      	ldr	r2, [r7, #4]
 8012756:	4613      	mov	r3, r2
 8012758:	005b      	lsls	r3, r3, #1
 801275a:	4413      	add	r3, r2
 801275c:	00db      	lsls	r3, r3, #3
 801275e:	440b      	add	r3, r1
 8012760:	3314      	adds	r3, #20
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	2b04      	cmp	r3, #4
 8012766:	d10a      	bne.n	801277e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012768:	491a      	ldr	r1, [pc, #104]	@ (80127d4 <etharp_tmr+0x14c>)
 801276a:	687a      	ldr	r2, [r7, #4]
 801276c:	4613      	mov	r3, r2
 801276e:	005b      	lsls	r3, r3, #1
 8012770:	4413      	add	r3, r2
 8012772:	00db      	lsls	r3, r3, #3
 8012774:	440b      	add	r3, r1
 8012776:	3314      	adds	r3, #20
 8012778:	2202      	movs	r2, #2
 801277a:	701a      	strb	r2, [r3, #0]
 801277c:	e01e      	b.n	80127bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801277e:	4915      	ldr	r1, [pc, #84]	@ (80127d4 <etharp_tmr+0x14c>)
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	4613      	mov	r3, r2
 8012784:	005b      	lsls	r3, r3, #1
 8012786:	4413      	add	r3, r2
 8012788:	00db      	lsls	r3, r3, #3
 801278a:	440b      	add	r3, r1
 801278c:	3314      	adds	r3, #20
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	2b01      	cmp	r3, #1
 8012792:	d113      	bne.n	80127bc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012794:	490f      	ldr	r1, [pc, #60]	@ (80127d4 <etharp_tmr+0x14c>)
 8012796:	687a      	ldr	r2, [r7, #4]
 8012798:	4613      	mov	r3, r2
 801279a:	005b      	lsls	r3, r3, #1
 801279c:	4413      	add	r3, r2
 801279e:	00db      	lsls	r3, r3, #3
 80127a0:	440b      	add	r3, r1
 80127a2:	3308      	adds	r3, #8
 80127a4:	6818      	ldr	r0, [r3, #0]
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	4613      	mov	r3, r2
 80127aa:	005b      	lsls	r3, r3, #1
 80127ac:	4413      	add	r3, r2
 80127ae:	00db      	lsls	r3, r3, #3
 80127b0:	4a08      	ldr	r2, [pc, #32]	@ (80127d4 <etharp_tmr+0x14c>)
 80127b2:	4413      	add	r3, r2
 80127b4:	3304      	adds	r3, #4
 80127b6:	4619      	mov	r1, r3
 80127b8:	f000 fe6e 	bl	8013498 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	3301      	adds	r3, #1
 80127c0:	607b      	str	r3, [r7, #4]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2b09      	cmp	r3, #9
 80127c6:	f77f af65 	ble.w	8012694 <etharp_tmr+0xc>
      }
    }
  }
}
 80127ca:	bf00      	nop
 80127cc:	bf00      	nop
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	2000bec4 	.word	0x2000bec4

080127d8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b08a      	sub	sp, #40	@ 0x28
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	460b      	mov	r3, r1
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80127e6:	230a      	movs	r3, #10
 80127e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80127ea:	230a      	movs	r3, #10
 80127ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80127ee:	230a      	movs	r3, #10
 80127f0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80127f2:	2300      	movs	r3, #0
 80127f4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80127f6:	230a      	movs	r3, #10
 80127f8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80127fa:	2300      	movs	r3, #0
 80127fc:	83bb      	strh	r3, [r7, #28]
 80127fe:	2300      	movs	r3, #0
 8012800:	837b      	strh	r3, [r7, #26]
 8012802:	2300      	movs	r3, #0
 8012804:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012806:	2300      	movs	r3, #0
 8012808:	843b      	strh	r3, [r7, #32]
 801280a:	e0ae      	b.n	801296a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801280c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012810:	49a6      	ldr	r1, [pc, #664]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012812:	4613      	mov	r3, r2
 8012814:	005b      	lsls	r3, r3, #1
 8012816:	4413      	add	r3, r2
 8012818:	00db      	lsls	r3, r3, #3
 801281a:	440b      	add	r3, r1
 801281c:	3314      	adds	r3, #20
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012822:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012826:	2b0a      	cmp	r3, #10
 8012828:	d105      	bne.n	8012836 <etharp_find_entry+0x5e>
 801282a:	7dfb      	ldrb	r3, [r7, #23]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d102      	bne.n	8012836 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012830:	8c3b      	ldrh	r3, [r7, #32]
 8012832:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012834:	e095      	b.n	8012962 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012836:	7dfb      	ldrb	r3, [r7, #23]
 8012838:	2b00      	cmp	r3, #0
 801283a:	f000 8092 	beq.w	8012962 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801283e:	7dfb      	ldrb	r3, [r7, #23]
 8012840:	2b01      	cmp	r3, #1
 8012842:	d009      	beq.n	8012858 <etharp_find_entry+0x80>
 8012844:	7dfb      	ldrb	r3, [r7, #23]
 8012846:	2b01      	cmp	r3, #1
 8012848:	d806      	bhi.n	8012858 <etharp_find_entry+0x80>
 801284a:	4b99      	ldr	r3, [pc, #612]	@ (8012ab0 <etharp_find_entry+0x2d8>)
 801284c:	f240 1223 	movw	r2, #291	@ 0x123
 8012850:	4998      	ldr	r1, [pc, #608]	@ (8012ab4 <etharp_find_entry+0x2dc>)
 8012852:	4899      	ldr	r0, [pc, #612]	@ (8012ab8 <etharp_find_entry+0x2e0>)
 8012854:	f002 fc8e 	bl	8015174 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d020      	beq.n	80128a0 <etharp_find_entry+0xc8>
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	6819      	ldr	r1, [r3, #0]
 8012862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012866:	4891      	ldr	r0, [pc, #580]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012868:	4613      	mov	r3, r2
 801286a:	005b      	lsls	r3, r3, #1
 801286c:	4413      	add	r3, r2
 801286e:	00db      	lsls	r3, r3, #3
 8012870:	4403      	add	r3, r0
 8012872:	3304      	adds	r3, #4
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	4299      	cmp	r1, r3
 8012878:	d112      	bne.n	80128a0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d00c      	beq.n	801289a <etharp_find_entry+0xc2>
 8012880:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012884:	4989      	ldr	r1, [pc, #548]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012886:	4613      	mov	r3, r2
 8012888:	005b      	lsls	r3, r3, #1
 801288a:	4413      	add	r3, r2
 801288c:	00db      	lsls	r3, r3, #3
 801288e:	440b      	add	r3, r1
 8012890:	3308      	adds	r3, #8
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	429a      	cmp	r2, r3
 8012898:	d102      	bne.n	80128a0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801289a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801289e:	e100      	b.n	8012aa2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80128a0:	7dfb      	ldrb	r3, [r7, #23]
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d140      	bne.n	8012928 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80128a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128aa:	4980      	ldr	r1, [pc, #512]	@ (8012aac <etharp_find_entry+0x2d4>)
 80128ac:	4613      	mov	r3, r2
 80128ae:	005b      	lsls	r3, r3, #1
 80128b0:	4413      	add	r3, r2
 80128b2:	00db      	lsls	r3, r3, #3
 80128b4:	440b      	add	r3, r1
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d01a      	beq.n	80128f2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80128bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128c0:	497a      	ldr	r1, [pc, #488]	@ (8012aac <etharp_find_entry+0x2d4>)
 80128c2:	4613      	mov	r3, r2
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	4413      	add	r3, r2
 80128c8:	00db      	lsls	r3, r3, #3
 80128ca:	440b      	add	r3, r1
 80128cc:	3312      	adds	r3, #18
 80128ce:	881b      	ldrh	r3, [r3, #0]
 80128d0:	8bba      	ldrh	r2, [r7, #28]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d845      	bhi.n	8012962 <etharp_find_entry+0x18a>
            old_queue = i;
 80128d6:	8c3b      	ldrh	r3, [r7, #32]
 80128d8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80128da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128de:	4973      	ldr	r1, [pc, #460]	@ (8012aac <etharp_find_entry+0x2d4>)
 80128e0:	4613      	mov	r3, r2
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	4413      	add	r3, r2
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	440b      	add	r3, r1
 80128ea:	3312      	adds	r3, #18
 80128ec:	881b      	ldrh	r3, [r3, #0]
 80128ee:	83bb      	strh	r3, [r7, #28]
 80128f0:	e037      	b.n	8012962 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80128f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128f6:	496d      	ldr	r1, [pc, #436]	@ (8012aac <etharp_find_entry+0x2d4>)
 80128f8:	4613      	mov	r3, r2
 80128fa:	005b      	lsls	r3, r3, #1
 80128fc:	4413      	add	r3, r2
 80128fe:	00db      	lsls	r3, r3, #3
 8012900:	440b      	add	r3, r1
 8012902:	3312      	adds	r3, #18
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	8b7a      	ldrh	r2, [r7, #26]
 8012908:	429a      	cmp	r2, r3
 801290a:	d82a      	bhi.n	8012962 <etharp_find_entry+0x18a>
            old_pending = i;
 801290c:	8c3b      	ldrh	r3, [r7, #32]
 801290e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012914:	4965      	ldr	r1, [pc, #404]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012916:	4613      	mov	r3, r2
 8012918:	005b      	lsls	r3, r3, #1
 801291a:	4413      	add	r3, r2
 801291c:	00db      	lsls	r3, r3, #3
 801291e:	440b      	add	r3, r1
 8012920:	3312      	adds	r3, #18
 8012922:	881b      	ldrh	r3, [r3, #0]
 8012924:	837b      	strh	r3, [r7, #26]
 8012926:	e01c      	b.n	8012962 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012928:	7dfb      	ldrb	r3, [r7, #23]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d919      	bls.n	8012962 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801292e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012932:	495e      	ldr	r1, [pc, #376]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012934:	4613      	mov	r3, r2
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	4413      	add	r3, r2
 801293a:	00db      	lsls	r3, r3, #3
 801293c:	440b      	add	r3, r1
 801293e:	3312      	adds	r3, #18
 8012940:	881b      	ldrh	r3, [r3, #0]
 8012942:	8b3a      	ldrh	r2, [r7, #24]
 8012944:	429a      	cmp	r2, r3
 8012946:	d80c      	bhi.n	8012962 <etharp_find_entry+0x18a>
            old_stable = i;
 8012948:	8c3b      	ldrh	r3, [r7, #32]
 801294a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801294c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012950:	4956      	ldr	r1, [pc, #344]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012952:	4613      	mov	r3, r2
 8012954:	005b      	lsls	r3, r3, #1
 8012956:	4413      	add	r3, r2
 8012958:	00db      	lsls	r3, r3, #3
 801295a:	440b      	add	r3, r1
 801295c:	3312      	adds	r3, #18
 801295e:	881b      	ldrh	r3, [r3, #0]
 8012960:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012962:	8c3b      	ldrh	r3, [r7, #32]
 8012964:	3301      	adds	r3, #1
 8012966:	b29b      	uxth	r3, r3
 8012968:	843b      	strh	r3, [r7, #32]
 801296a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801296e:	2b09      	cmp	r3, #9
 8012970:	f77f af4c 	ble.w	801280c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012974:	7afb      	ldrb	r3, [r7, #11]
 8012976:	f003 0302 	and.w	r3, r3, #2
 801297a:	2b00      	cmp	r3, #0
 801297c:	d108      	bne.n	8012990 <etharp_find_entry+0x1b8>
 801297e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012982:	2b0a      	cmp	r3, #10
 8012984:	d107      	bne.n	8012996 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012986:	7afb      	ldrb	r3, [r7, #11]
 8012988:	f003 0301 	and.w	r3, r3, #1
 801298c:	2b00      	cmp	r3, #0
 801298e:	d102      	bne.n	8012996 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012990:	f04f 33ff 	mov.w	r3, #4294967295
 8012994:	e085      	b.n	8012aa2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012996:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801299a:	2b09      	cmp	r3, #9
 801299c:	dc02      	bgt.n	80129a4 <etharp_find_entry+0x1cc>
    i = empty;
 801299e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80129a0:	843b      	strh	r3, [r7, #32]
 80129a2:	e039      	b.n	8012a18 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80129a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80129a8:	2b09      	cmp	r3, #9
 80129aa:	dc14      	bgt.n	80129d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80129ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80129b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129b4:	493d      	ldr	r1, [pc, #244]	@ (8012aac <etharp_find_entry+0x2d4>)
 80129b6:	4613      	mov	r3, r2
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	4413      	add	r3, r2
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	440b      	add	r3, r1
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d018      	beq.n	80129f8 <etharp_find_entry+0x220>
 80129c6:	4b3a      	ldr	r3, [pc, #232]	@ (8012ab0 <etharp_find_entry+0x2d8>)
 80129c8:	f240 126d 	movw	r2, #365	@ 0x16d
 80129cc:	493b      	ldr	r1, [pc, #236]	@ (8012abc <etharp_find_entry+0x2e4>)
 80129ce:	483a      	ldr	r0, [pc, #232]	@ (8012ab8 <etharp_find_entry+0x2e0>)
 80129d0:	f002 fbd0 	bl	8015174 <iprintf>
 80129d4:	e010      	b.n	80129f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80129d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80129da:	2b09      	cmp	r3, #9
 80129dc:	dc02      	bgt.n	80129e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80129de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80129e0:	843b      	strh	r3, [r7, #32]
 80129e2:	e009      	b.n	80129f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80129e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80129e8:	2b09      	cmp	r3, #9
 80129ea:	dc02      	bgt.n	80129f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80129ec:	8bfb      	ldrh	r3, [r7, #30]
 80129ee:	843b      	strh	r3, [r7, #32]
 80129f0:	e002      	b.n	80129f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80129f2:	f04f 33ff 	mov.w	r3, #4294967295
 80129f6:	e054      	b.n	8012aa2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80129f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129fc:	2b09      	cmp	r3, #9
 80129fe:	dd06      	ble.n	8012a0e <etharp_find_entry+0x236>
 8012a00:	4b2b      	ldr	r3, [pc, #172]	@ (8012ab0 <etharp_find_entry+0x2d8>)
 8012a02:	f240 127f 	movw	r2, #383	@ 0x17f
 8012a06:	492e      	ldr	r1, [pc, #184]	@ (8012ac0 <etharp_find_entry+0x2e8>)
 8012a08:	482b      	ldr	r0, [pc, #172]	@ (8012ab8 <etharp_find_entry+0x2e0>)
 8012a0a:	f002 fbb3 	bl	8015174 <iprintf>
    etharp_free_entry(i);
 8012a0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7ff fe06 	bl	8012624 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012a18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a1c:	2b09      	cmp	r3, #9
 8012a1e:	dd06      	ble.n	8012a2e <etharp_find_entry+0x256>
 8012a20:	4b23      	ldr	r3, [pc, #140]	@ (8012ab0 <etharp_find_entry+0x2d8>)
 8012a22:	f240 1283 	movw	r2, #387	@ 0x183
 8012a26:	4926      	ldr	r1, [pc, #152]	@ (8012ac0 <etharp_find_entry+0x2e8>)
 8012a28:	4823      	ldr	r0, [pc, #140]	@ (8012ab8 <etharp_find_entry+0x2e0>)
 8012a2a:	f002 fba3 	bl	8015174 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012a2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a32:	491e      	ldr	r1, [pc, #120]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012a34:	4613      	mov	r3, r2
 8012a36:	005b      	lsls	r3, r3, #1
 8012a38:	4413      	add	r3, r2
 8012a3a:	00db      	lsls	r3, r3, #3
 8012a3c:	440b      	add	r3, r1
 8012a3e:	3314      	adds	r3, #20
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d006      	beq.n	8012a54 <etharp_find_entry+0x27c>
 8012a46:	4b1a      	ldr	r3, [pc, #104]	@ (8012ab0 <etharp_find_entry+0x2d8>)
 8012a48:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012a4c:	491d      	ldr	r1, [pc, #116]	@ (8012ac4 <etharp_find_entry+0x2ec>)
 8012a4e:	481a      	ldr	r0, [pc, #104]	@ (8012ab8 <etharp_find_entry+0x2e0>)
 8012a50:	f002 fb90 	bl	8015174 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d00b      	beq.n	8012a72 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012a5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	6819      	ldr	r1, [r3, #0]
 8012a62:	4812      	ldr	r0, [pc, #72]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012a64:	4613      	mov	r3, r2
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	4413      	add	r3, r2
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	4403      	add	r3, r0
 8012a6e:	3304      	adds	r3, #4
 8012a70:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012a72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a76:	490d      	ldr	r1, [pc, #52]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012a78:	4613      	mov	r3, r2
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	4413      	add	r3, r2
 8012a7e:	00db      	lsls	r3, r3, #3
 8012a80:	440b      	add	r3, r1
 8012a82:	3312      	adds	r3, #18
 8012a84:	2200      	movs	r2, #0
 8012a86:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012a88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a8c:	4907      	ldr	r1, [pc, #28]	@ (8012aac <etharp_find_entry+0x2d4>)
 8012a8e:	4613      	mov	r3, r2
 8012a90:	005b      	lsls	r3, r3, #1
 8012a92:	4413      	add	r3, r2
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	440b      	add	r3, r1
 8012a98:	3308      	adds	r3, #8
 8012a9a:	687a      	ldr	r2, [r7, #4]
 8012a9c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012a9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3728      	adds	r7, #40	@ 0x28
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop
 8012aac:	2000bec4 	.word	0x2000bec4
 8012ab0:	08018fa8 	.word	0x08018fa8
 8012ab4:	08018fe0 	.word	0x08018fe0
 8012ab8:	08019020 	.word	0x08019020
 8012abc:	08019048 	.word	0x08019048
 8012ac0:	08019060 	.word	0x08019060
 8012ac4:	08019074 	.word	0x08019074

08012ac8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b088      	sub	sp, #32
 8012acc:	af02      	add	r7, sp, #8
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	607a      	str	r2, [r7, #4]
 8012ad4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012adc:	2b06      	cmp	r3, #6
 8012ade:	d006      	beq.n	8012aee <etharp_update_arp_entry+0x26>
 8012ae0:	4b48      	ldr	r3, [pc, #288]	@ (8012c04 <etharp_update_arp_entry+0x13c>)
 8012ae2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012ae6:	4948      	ldr	r1, [pc, #288]	@ (8012c08 <etharp_update_arp_entry+0x140>)
 8012ae8:	4848      	ldr	r0, [pc, #288]	@ (8012c0c <etharp_update_arp_entry+0x144>)
 8012aea:	f002 fb43 	bl	8015174 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d012      	beq.n	8012b1a <etharp_update_arp_entry+0x52>
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00e      	beq.n	8012b1a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	68f9      	ldr	r1, [r7, #12]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f001 f8fe 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 8012b08:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d105      	bne.n	8012b1a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b16:	2be0      	cmp	r3, #224	@ 0xe0
 8012b18:	d102      	bne.n	8012b20 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012b1a:	f06f 030f 	mvn.w	r3, #15
 8012b1e:	e06c      	b.n	8012bfa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012b20:	78fb      	ldrb	r3, [r7, #3]
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	4619      	mov	r1, r3
 8012b26:	68b8      	ldr	r0, [r7, #8]
 8012b28:	f7ff fe56 	bl	80127d8 <etharp_find_entry>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012b30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	da02      	bge.n	8012b3e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012b38:	8afb      	ldrh	r3, [r7, #22]
 8012b3a:	b25b      	sxtb	r3, r3
 8012b3c:	e05d      	b.n	8012bfa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012b3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b42:	4933      	ldr	r1, [pc, #204]	@ (8012c10 <etharp_update_arp_entry+0x148>)
 8012b44:	4613      	mov	r3, r2
 8012b46:	005b      	lsls	r3, r3, #1
 8012b48:	4413      	add	r3, r2
 8012b4a:	00db      	lsls	r3, r3, #3
 8012b4c:	440b      	add	r3, r1
 8012b4e:	3314      	adds	r3, #20
 8012b50:	2202      	movs	r2, #2
 8012b52:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012b54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b58:	492d      	ldr	r1, [pc, #180]	@ (8012c10 <etharp_update_arp_entry+0x148>)
 8012b5a:	4613      	mov	r3, r2
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	4413      	add	r3, r2
 8012b60:	00db      	lsls	r3, r3, #3
 8012b62:	440b      	add	r3, r1
 8012b64:	3308      	adds	r3, #8
 8012b66:	68fa      	ldr	r2, [r7, #12]
 8012b68:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012b6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b6e:	4613      	mov	r3, r2
 8012b70:	005b      	lsls	r3, r3, #1
 8012b72:	4413      	add	r3, r2
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	3308      	adds	r3, #8
 8012b78:	4a25      	ldr	r2, [pc, #148]	@ (8012c10 <etharp_update_arp_entry+0x148>)
 8012b7a:	4413      	add	r3, r2
 8012b7c:	3304      	adds	r3, #4
 8012b7e:	2206      	movs	r2, #6
 8012b80:	6879      	ldr	r1, [r7, #4]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f002 fc39 	bl	80153fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012b88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012b8c:	4920      	ldr	r1, [pc, #128]	@ (8012c10 <etharp_update_arp_entry+0x148>)
 8012b8e:	4613      	mov	r3, r2
 8012b90:	005b      	lsls	r3, r3, #1
 8012b92:	4413      	add	r3, r2
 8012b94:	00db      	lsls	r3, r3, #3
 8012b96:	440b      	add	r3, r1
 8012b98:	3312      	adds	r3, #18
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012b9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ba2:	491b      	ldr	r1, [pc, #108]	@ (8012c10 <etharp_update_arp_entry+0x148>)
 8012ba4:	4613      	mov	r3, r2
 8012ba6:	005b      	lsls	r3, r3, #1
 8012ba8:	4413      	add	r3, r2
 8012baa:	00db      	lsls	r3, r3, #3
 8012bac:	440b      	add	r3, r1
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d021      	beq.n	8012bf8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012bb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012bb8:	4915      	ldr	r1, [pc, #84]	@ (8012c10 <etharp_update_arp_entry+0x148>)
 8012bba:	4613      	mov	r3, r2
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	4413      	add	r3, r2
 8012bc0:	00db      	lsls	r3, r3, #3
 8012bc2:	440b      	add	r3, r1
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012bc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012bcc:	4910      	ldr	r1, [pc, #64]	@ (8012c10 <etharp_update_arp_entry+0x148>)
 8012bce:	4613      	mov	r3, r2
 8012bd0:	005b      	lsls	r3, r3, #1
 8012bd2:	4413      	add	r3, r2
 8012bd4:	00db      	lsls	r3, r3, #3
 8012bd6:	440b      	add	r3, r1
 8012bd8:	2200      	movs	r2, #0
 8012bda:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012be2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012be6:	9300      	str	r3, [sp, #0]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6939      	ldr	r1, [r7, #16]
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	f001 ff97 	bl	8014b20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012bf2:	6938      	ldr	r0, [r7, #16]
 8012bf4:	f7f8 fd80 	bl	800b6f8 <pbuf_free>
  }
  return ERR_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3718      	adds	r7, #24
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	08018fa8 	.word	0x08018fa8
 8012c08:	080190a0 	.word	0x080190a0
 8012c0c:	08019020 	.word	0x08019020
 8012c10:	2000bec4 	.word	0x2000bec4

08012c14 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	60fb      	str	r3, [r7, #12]
 8012c20:	e01e      	b.n	8012c60 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012c22:	4913      	ldr	r1, [pc, #76]	@ (8012c70 <etharp_cleanup_netif+0x5c>)
 8012c24:	68fa      	ldr	r2, [r7, #12]
 8012c26:	4613      	mov	r3, r2
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	4413      	add	r3, r2
 8012c2c:	00db      	lsls	r3, r3, #3
 8012c2e:	440b      	add	r3, r1
 8012c30:	3314      	adds	r3, #20
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012c36:	7afb      	ldrb	r3, [r7, #11]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00e      	beq.n	8012c5a <etharp_cleanup_netif+0x46>
 8012c3c:	490c      	ldr	r1, [pc, #48]	@ (8012c70 <etharp_cleanup_netif+0x5c>)
 8012c3e:	68fa      	ldr	r2, [r7, #12]
 8012c40:	4613      	mov	r3, r2
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	4413      	add	r3, r2
 8012c46:	00db      	lsls	r3, r3, #3
 8012c48:	440b      	add	r3, r1
 8012c4a:	3308      	adds	r3, #8
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d102      	bne.n	8012c5a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	f7ff fce5 	bl	8012624 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	60fb      	str	r3, [r7, #12]
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2b09      	cmp	r3, #9
 8012c64:	dddd      	ble.n	8012c22 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012c66:	bf00      	nop
 8012c68:	bf00      	nop
 8012c6a:	3710      	adds	r7, #16
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	2000bec4 	.word	0x2000bec4

08012c74 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012c74:	b5b0      	push	{r4, r5, r7, lr}
 8012c76:	b08a      	sub	sp, #40	@ 0x28
 8012c78:	af04      	add	r7, sp, #16
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d107      	bne.n	8012c94 <etharp_input+0x20>
 8012c84:	4b3d      	ldr	r3, [pc, #244]	@ (8012d7c <etharp_input+0x108>)
 8012c86:	f240 228a 	movw	r2, #650	@ 0x28a
 8012c8a:	493d      	ldr	r1, [pc, #244]	@ (8012d80 <etharp_input+0x10c>)
 8012c8c:	483d      	ldr	r0, [pc, #244]	@ (8012d84 <etharp_input+0x110>)
 8012c8e:	f002 fa71 	bl	8015174 <iprintf>
 8012c92:	e06f      	b.n	8012d74 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	881b      	ldrh	r3, [r3, #0]
 8012c9e:	b29b      	uxth	r3, r3
 8012ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ca4:	d10c      	bne.n	8012cc0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012ca6:	693b      	ldr	r3, [r7, #16]
 8012ca8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012caa:	2b06      	cmp	r3, #6
 8012cac:	d108      	bne.n	8012cc0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012cb2:	2b04      	cmp	r3, #4
 8012cb4:	d104      	bne.n	8012cc0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	885b      	ldrh	r3, [r3, #2]
 8012cba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012cbc:	2b08      	cmp	r3, #8
 8012cbe:	d003      	beq.n	8012cc8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7f8 fd19 	bl	800b6f8 <pbuf_free>
    return;
 8012cc6:	e055      	b.n	8012d74 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	330e      	adds	r3, #14
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	3318      	adds	r3, #24
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	3304      	adds	r3, #4
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d102      	bne.n	8012ce8 <etharp_input+0x74>
    for_us = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	75fb      	strb	r3, [r7, #23]
 8012ce6:	e009      	b.n	8012cfc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012ce8:	68ba      	ldr	r2, [r7, #8]
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	3304      	adds	r3, #4
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	bf0c      	ite	eq
 8012cf4:	2301      	moveq	r3, #1
 8012cf6:	2300      	movne	r3, #0
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	f103 0208 	add.w	r2, r3, #8
 8012d02:	7dfb      	ldrb	r3, [r7, #23]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d001      	beq.n	8012d0c <etharp_input+0x98>
 8012d08:	2301      	movs	r3, #1
 8012d0a:	e000      	b.n	8012d0e <etharp_input+0x9a>
 8012d0c:	2302      	movs	r3, #2
 8012d0e:	f107 010c 	add.w	r1, r7, #12
 8012d12:	6838      	ldr	r0, [r7, #0]
 8012d14:	f7ff fed8 	bl	8012ac8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	88db      	ldrh	r3, [r3, #6]
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d22:	d003      	beq.n	8012d2c <etharp_input+0xb8>
 8012d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d28:	d01e      	beq.n	8012d68 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012d2a:	e020      	b.n	8012d6e <etharp_input+0xfa>
      if (for_us) {
 8012d2c:	7dfb      	ldrb	r3, [r7, #23]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d01c      	beq.n	8012d6c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012d48:	693a      	ldr	r2, [r7, #16]
 8012d4a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012d4c:	2102      	movs	r1, #2
 8012d4e:	9103      	str	r1, [sp, #12]
 8012d50:	f107 010c 	add.w	r1, r7, #12
 8012d54:	9102      	str	r1, [sp, #8]
 8012d56:	9201      	str	r2, [sp, #4]
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	462b      	mov	r3, r5
 8012d5c:	4622      	mov	r2, r4
 8012d5e:	4601      	mov	r1, r0
 8012d60:	6838      	ldr	r0, [r7, #0]
 8012d62:	f000 faeb 	bl	801333c <etharp_raw>
      break;
 8012d66:	e001      	b.n	8012d6c <etharp_input+0xf8>
      break;
 8012d68:	bf00      	nop
 8012d6a:	e000      	b.n	8012d6e <etharp_input+0xfa>
      break;
 8012d6c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f7f8 fcc2 	bl	800b6f8 <pbuf_free>
}
 8012d74:	3718      	adds	r7, #24
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bdb0      	pop	{r4, r5, r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	08018fa8 	.word	0x08018fa8
 8012d80:	080190f8 	.word	0x080190f8
 8012d84:	08019020 	.word	0x08019020

08012d88 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b086      	sub	sp, #24
 8012d8c:	af02      	add	r7, sp, #8
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	60b9      	str	r1, [r7, #8]
 8012d92:	4613      	mov	r3, r2
 8012d94:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012d96:	79fa      	ldrb	r2, [r7, #7]
 8012d98:	4944      	ldr	r1, [pc, #272]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	005b      	lsls	r3, r3, #1
 8012d9e:	4413      	add	r3, r2
 8012da0:	00db      	lsls	r3, r3, #3
 8012da2:	440b      	add	r3, r1
 8012da4:	3314      	adds	r3, #20
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d806      	bhi.n	8012dba <etharp_output_to_arp_index+0x32>
 8012dac:	4b40      	ldr	r3, [pc, #256]	@ (8012eb0 <etharp_output_to_arp_index+0x128>)
 8012dae:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012db2:	4940      	ldr	r1, [pc, #256]	@ (8012eb4 <etharp_output_to_arp_index+0x12c>)
 8012db4:	4840      	ldr	r0, [pc, #256]	@ (8012eb8 <etharp_output_to_arp_index+0x130>)
 8012db6:	f002 f9dd 	bl	8015174 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012dba:	79fa      	ldrb	r2, [r7, #7]
 8012dbc:	493b      	ldr	r1, [pc, #236]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	005b      	lsls	r3, r3, #1
 8012dc2:	4413      	add	r3, r2
 8012dc4:	00db      	lsls	r3, r3, #3
 8012dc6:	440b      	add	r3, r1
 8012dc8:	3314      	adds	r3, #20
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	2b02      	cmp	r3, #2
 8012dce:	d153      	bne.n	8012e78 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012dd0:	79fa      	ldrb	r2, [r7, #7]
 8012dd2:	4936      	ldr	r1, [pc, #216]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	005b      	lsls	r3, r3, #1
 8012dd8:	4413      	add	r3, r2
 8012dda:	00db      	lsls	r3, r3, #3
 8012ddc:	440b      	add	r3, r1
 8012dde:	3312      	adds	r3, #18
 8012de0:	881b      	ldrh	r3, [r3, #0]
 8012de2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012de6:	d919      	bls.n	8012e1c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012de8:	79fa      	ldrb	r2, [r7, #7]
 8012dea:	4613      	mov	r3, r2
 8012dec:	005b      	lsls	r3, r3, #1
 8012dee:	4413      	add	r3, r2
 8012df0:	00db      	lsls	r3, r3, #3
 8012df2:	4a2e      	ldr	r2, [pc, #184]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012df4:	4413      	add	r3, r2
 8012df6:	3304      	adds	r3, #4
 8012df8:	4619      	mov	r1, r3
 8012dfa:	68f8      	ldr	r0, [r7, #12]
 8012dfc:	f000 fb4c 	bl	8013498 <etharp_request>
 8012e00:	4603      	mov	r3, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d138      	bne.n	8012e78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012e06:	79fa      	ldrb	r2, [r7, #7]
 8012e08:	4928      	ldr	r1, [pc, #160]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012e0a:	4613      	mov	r3, r2
 8012e0c:	005b      	lsls	r3, r3, #1
 8012e0e:	4413      	add	r3, r2
 8012e10:	00db      	lsls	r3, r3, #3
 8012e12:	440b      	add	r3, r1
 8012e14:	3314      	adds	r3, #20
 8012e16:	2203      	movs	r2, #3
 8012e18:	701a      	strb	r2, [r3, #0]
 8012e1a:	e02d      	b.n	8012e78 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012e1c:	79fa      	ldrb	r2, [r7, #7]
 8012e1e:	4923      	ldr	r1, [pc, #140]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012e20:	4613      	mov	r3, r2
 8012e22:	005b      	lsls	r3, r3, #1
 8012e24:	4413      	add	r3, r2
 8012e26:	00db      	lsls	r3, r3, #3
 8012e28:	440b      	add	r3, r1
 8012e2a:	3312      	adds	r3, #18
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012e32:	d321      	bcc.n	8012e78 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012e34:	79fa      	ldrb	r2, [r7, #7]
 8012e36:	4613      	mov	r3, r2
 8012e38:	005b      	lsls	r3, r3, #1
 8012e3a:	4413      	add	r3, r2
 8012e3c:	00db      	lsls	r3, r3, #3
 8012e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012e40:	4413      	add	r3, r2
 8012e42:	1d19      	adds	r1, r3, #4
 8012e44:	79fa      	ldrb	r2, [r7, #7]
 8012e46:	4613      	mov	r3, r2
 8012e48:	005b      	lsls	r3, r3, #1
 8012e4a:	4413      	add	r3, r2
 8012e4c:	00db      	lsls	r3, r3, #3
 8012e4e:	3308      	adds	r3, #8
 8012e50:	4a16      	ldr	r2, [pc, #88]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012e52:	4413      	add	r3, r2
 8012e54:	3304      	adds	r3, #4
 8012e56:	461a      	mov	r2, r3
 8012e58:	68f8      	ldr	r0, [r7, #12]
 8012e5a:	f000 fafb 	bl	8013454 <etharp_request_dst>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d109      	bne.n	8012e78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012e64:	79fa      	ldrb	r2, [r7, #7]
 8012e66:	4911      	ldr	r1, [pc, #68]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012e68:	4613      	mov	r3, r2
 8012e6a:	005b      	lsls	r3, r3, #1
 8012e6c:	4413      	add	r3, r2
 8012e6e:	00db      	lsls	r3, r3, #3
 8012e70:	440b      	add	r3, r1
 8012e72:	3314      	adds	r3, #20
 8012e74:	2203      	movs	r2, #3
 8012e76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012e7e:	79fa      	ldrb	r2, [r7, #7]
 8012e80:	4613      	mov	r3, r2
 8012e82:	005b      	lsls	r3, r3, #1
 8012e84:	4413      	add	r3, r2
 8012e86:	00db      	lsls	r3, r3, #3
 8012e88:	3308      	adds	r3, #8
 8012e8a:	4a08      	ldr	r2, [pc, #32]	@ (8012eac <etharp_output_to_arp_index+0x124>)
 8012e8c:	4413      	add	r3, r2
 8012e8e:	3304      	adds	r3, #4
 8012e90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012e94:	9200      	str	r2, [sp, #0]
 8012e96:	460a      	mov	r2, r1
 8012e98:	68b9      	ldr	r1, [r7, #8]
 8012e9a:	68f8      	ldr	r0, [r7, #12]
 8012e9c:	f001 fe40 	bl	8014b20 <ethernet_output>
 8012ea0:	4603      	mov	r3, r0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3710      	adds	r7, #16
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	2000bec4 	.word	0x2000bec4
 8012eb0:	08018fa8 	.word	0x08018fa8
 8012eb4:	08019118 	.word	0x08019118
 8012eb8:	08019020 	.word	0x08019020

08012ebc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b08a      	sub	sp, #40	@ 0x28
 8012ec0:	af02      	add	r7, sp, #8
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d106      	bne.n	8012ee0 <etharp_output+0x24>
 8012ed2:	4b73      	ldr	r3, [pc, #460]	@ (80130a0 <etharp_output+0x1e4>)
 8012ed4:	f240 321e 	movw	r2, #798	@ 0x31e
 8012ed8:	4972      	ldr	r1, [pc, #456]	@ (80130a4 <etharp_output+0x1e8>)
 8012eda:	4873      	ldr	r0, [pc, #460]	@ (80130a8 <etharp_output+0x1ec>)
 8012edc:	f002 f94a 	bl	8015174 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d106      	bne.n	8012ef4 <etharp_output+0x38>
 8012ee6:	4b6e      	ldr	r3, [pc, #440]	@ (80130a0 <etharp_output+0x1e4>)
 8012ee8:	f240 321f 	movw	r2, #799	@ 0x31f
 8012eec:	496f      	ldr	r1, [pc, #444]	@ (80130ac <etharp_output+0x1f0>)
 8012eee:	486e      	ldr	r0, [pc, #440]	@ (80130a8 <etharp_output+0x1ec>)
 8012ef0:	f002 f940 	bl	8015174 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d106      	bne.n	8012f08 <etharp_output+0x4c>
 8012efa:	4b69      	ldr	r3, [pc, #420]	@ (80130a0 <etharp_output+0x1e4>)
 8012efc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012f00:	496b      	ldr	r1, [pc, #428]	@ (80130b0 <etharp_output+0x1f4>)
 8012f02:	4869      	ldr	r0, [pc, #420]	@ (80130a8 <etharp_output+0x1ec>)
 8012f04:	f002 f936 	bl	8015174 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	68f9      	ldr	r1, [r7, #12]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f000 fef8 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 8012f14:	4603      	mov	r3, r0
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d002      	beq.n	8012f20 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012f1a:	4b66      	ldr	r3, [pc, #408]	@ (80130b4 <etharp_output+0x1f8>)
 8012f1c:	61fb      	str	r3, [r7, #28]
 8012f1e:	e0af      	b.n	8013080 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012f28:	2be0      	cmp	r3, #224	@ 0xe0
 8012f2a:	d118      	bne.n	8012f5e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012f30:	2300      	movs	r3, #0
 8012f32:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012f34:	235e      	movs	r3, #94	@ 0x5e
 8012f36:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	3302      	adds	r3, #2
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	3303      	adds	r3, #3
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012f56:	f107 0310 	add.w	r3, r7, #16
 8012f5a:	61fb      	str	r3, [r7, #28]
 8012f5c:	e090      	b.n	8013080 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	3304      	adds	r3, #4
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	405a      	eors	r2, r3
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	3308      	adds	r3, #8
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4013      	ands	r3, r2
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d012      	beq.n	8012f9c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012f7c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012f80:	4293      	cmp	r3, r2
 8012f82:	d00b      	beq.n	8012f9c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	330c      	adds	r3, #12
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d003      	beq.n	8012f96 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	330c      	adds	r3, #12
 8012f92:	61bb      	str	r3, [r7, #24]
 8012f94:	e002      	b.n	8012f9c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012f96:	f06f 0303 	mvn.w	r3, #3
 8012f9a:	e07d      	b.n	8013098 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012f9c:	4b46      	ldr	r3, [pc, #280]	@ (80130b8 <etharp_output+0x1fc>)
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	4a46      	ldr	r2, [pc, #280]	@ (80130bc <etharp_output+0x200>)
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	005b      	lsls	r3, r3, #1
 8012fa8:	440b      	add	r3, r1
 8012faa:	00db      	lsls	r3, r3, #3
 8012fac:	4413      	add	r3, r2
 8012fae:	3314      	adds	r3, #20
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	2b01      	cmp	r3, #1
 8012fb4:	d925      	bls.n	8013002 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012fb6:	4b40      	ldr	r3, [pc, #256]	@ (80130b8 <etharp_output+0x1fc>)
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	4619      	mov	r1, r3
 8012fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80130bc <etharp_output+0x200>)
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	005b      	lsls	r3, r3, #1
 8012fc2:	440b      	add	r3, r1
 8012fc4:	00db      	lsls	r3, r3, #3
 8012fc6:	4413      	add	r3, r2
 8012fc8:	3308      	adds	r3, #8
 8012fca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d117      	bne.n	8013002 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	4b38      	ldr	r3, [pc, #224]	@ (80130b8 <etharp_output+0x1fc>)
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	4937      	ldr	r1, [pc, #220]	@ (80130bc <etharp_output+0x200>)
 8012fde:	4603      	mov	r3, r0
 8012fe0:	005b      	lsls	r3, r3, #1
 8012fe2:	4403      	add	r3, r0
 8012fe4:	00db      	lsls	r3, r3, #3
 8012fe6:	440b      	add	r3, r1
 8012fe8:	3304      	adds	r3, #4
 8012fea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d108      	bne.n	8013002 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012ff0:	4b31      	ldr	r3, [pc, #196]	@ (80130b8 <etharp_output+0x1fc>)
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	461a      	mov	r2, r3
 8012ff6:	68b9      	ldr	r1, [r7, #8]
 8012ff8:	68f8      	ldr	r0, [r7, #12]
 8012ffa:	f7ff fec5 	bl	8012d88 <etharp_output_to_arp_index>
 8012ffe:	4603      	mov	r3, r0
 8013000:	e04a      	b.n	8013098 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013002:	2300      	movs	r3, #0
 8013004:	75fb      	strb	r3, [r7, #23]
 8013006:	e031      	b.n	801306c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013008:	7dfa      	ldrb	r2, [r7, #23]
 801300a:	492c      	ldr	r1, [pc, #176]	@ (80130bc <etharp_output+0x200>)
 801300c:	4613      	mov	r3, r2
 801300e:	005b      	lsls	r3, r3, #1
 8013010:	4413      	add	r3, r2
 8013012:	00db      	lsls	r3, r3, #3
 8013014:	440b      	add	r3, r1
 8013016:	3314      	adds	r3, #20
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	2b01      	cmp	r3, #1
 801301c:	d923      	bls.n	8013066 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801301e:	7dfa      	ldrb	r2, [r7, #23]
 8013020:	4926      	ldr	r1, [pc, #152]	@ (80130bc <etharp_output+0x200>)
 8013022:	4613      	mov	r3, r2
 8013024:	005b      	lsls	r3, r3, #1
 8013026:	4413      	add	r3, r2
 8013028:	00db      	lsls	r3, r3, #3
 801302a:	440b      	add	r3, r1
 801302c:	3308      	adds	r3, #8
 801302e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013030:	68fa      	ldr	r2, [r7, #12]
 8013032:	429a      	cmp	r2, r3
 8013034:	d117      	bne.n	8013066 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013036:	69bb      	ldr	r3, [r7, #24]
 8013038:	6819      	ldr	r1, [r3, #0]
 801303a:	7dfa      	ldrb	r2, [r7, #23]
 801303c:	481f      	ldr	r0, [pc, #124]	@ (80130bc <etharp_output+0x200>)
 801303e:	4613      	mov	r3, r2
 8013040:	005b      	lsls	r3, r3, #1
 8013042:	4413      	add	r3, r2
 8013044:	00db      	lsls	r3, r3, #3
 8013046:	4403      	add	r3, r0
 8013048:	3304      	adds	r3, #4
 801304a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801304c:	4299      	cmp	r1, r3
 801304e:	d10a      	bne.n	8013066 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013050:	4a19      	ldr	r2, [pc, #100]	@ (80130b8 <etharp_output+0x1fc>)
 8013052:	7dfb      	ldrb	r3, [r7, #23]
 8013054:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013056:	7dfb      	ldrb	r3, [r7, #23]
 8013058:	461a      	mov	r2, r3
 801305a:	68b9      	ldr	r1, [r7, #8]
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f7ff fe93 	bl	8012d88 <etharp_output_to_arp_index>
 8013062:	4603      	mov	r3, r0
 8013064:	e018      	b.n	8013098 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013066:	7dfb      	ldrb	r3, [r7, #23]
 8013068:	3301      	adds	r3, #1
 801306a:	75fb      	strb	r3, [r7, #23]
 801306c:	7dfb      	ldrb	r3, [r7, #23]
 801306e:	2b09      	cmp	r3, #9
 8013070:	d9ca      	bls.n	8013008 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013072:	68ba      	ldr	r2, [r7, #8]
 8013074:	69b9      	ldr	r1, [r7, #24]
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f000 f822 	bl	80130c0 <etharp_query>
 801307c:	4603      	mov	r3, r0
 801307e:	e00b      	b.n	8013098 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013086:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801308a:	9300      	str	r3, [sp, #0]
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	68b9      	ldr	r1, [r7, #8]
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f001 fd45 	bl	8014b20 <ethernet_output>
 8013096:	4603      	mov	r3, r0
}
 8013098:	4618      	mov	r0, r3
 801309a:	3720      	adds	r7, #32
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	08018fa8 	.word	0x08018fa8
 80130a4:	080190f8 	.word	0x080190f8
 80130a8:	08019020 	.word	0x08019020
 80130ac:	08019148 	.word	0x08019148
 80130b0:	080190e8 	.word	0x080190e8
 80130b4:	0801a57c 	.word	0x0801a57c
 80130b8:	2000bfb4 	.word	0x2000bfb4
 80130bc:	2000bec4 	.word	0x2000bec4

080130c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08c      	sub	sp, #48	@ 0x30
 80130c4:	af02      	add	r7, sp, #8
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	3326      	adds	r3, #38	@ 0x26
 80130d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80130d2:	23ff      	movs	r3, #255	@ 0xff
 80130d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80130d8:	2300      	movs	r3, #0
 80130da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	68f9      	ldr	r1, [r7, #12]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f000 fe0e 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d10c      	bne.n	8013108 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80130f6:	2be0      	cmp	r3, #224	@ 0xe0
 80130f8:	d006      	beq.n	8013108 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d003      	beq.n	8013108 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d102      	bne.n	801310e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013108:	f06f 030f 	mvn.w	r3, #15
 801310c:	e101      	b.n	8013312 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801310e:	68fa      	ldr	r2, [r7, #12]
 8013110:	2101      	movs	r1, #1
 8013112:	68b8      	ldr	r0, [r7, #8]
 8013114:	f7ff fb60 	bl	80127d8 <etharp_find_entry>
 8013118:	4603      	mov	r3, r0
 801311a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801311c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013120:	2b00      	cmp	r3, #0
 8013122:	da02      	bge.n	801312a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013124:	8a7b      	ldrh	r3, [r7, #18]
 8013126:	b25b      	sxtb	r3, r3
 8013128:	e0f3      	b.n	8013312 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801312a:	8a7b      	ldrh	r3, [r7, #18]
 801312c:	2b7e      	cmp	r3, #126	@ 0x7e
 801312e:	d906      	bls.n	801313e <etharp_query+0x7e>
 8013130:	4b7a      	ldr	r3, [pc, #488]	@ (801331c <etharp_query+0x25c>)
 8013132:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013136:	497a      	ldr	r1, [pc, #488]	@ (8013320 <etharp_query+0x260>)
 8013138:	487a      	ldr	r0, [pc, #488]	@ (8013324 <etharp_query+0x264>)
 801313a:	f002 f81b 	bl	8015174 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801313e:	8a7b      	ldrh	r3, [r7, #18]
 8013140:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013142:	7c7a      	ldrb	r2, [r7, #17]
 8013144:	4978      	ldr	r1, [pc, #480]	@ (8013328 <etharp_query+0x268>)
 8013146:	4613      	mov	r3, r2
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	4413      	add	r3, r2
 801314c:	00db      	lsls	r3, r3, #3
 801314e:	440b      	add	r3, r1
 8013150:	3314      	adds	r3, #20
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d115      	bne.n	8013184 <etharp_query+0xc4>
    is_new_entry = 1;
 8013158:	2301      	movs	r3, #1
 801315a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801315c:	7c7a      	ldrb	r2, [r7, #17]
 801315e:	4972      	ldr	r1, [pc, #456]	@ (8013328 <etharp_query+0x268>)
 8013160:	4613      	mov	r3, r2
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	4413      	add	r3, r2
 8013166:	00db      	lsls	r3, r3, #3
 8013168:	440b      	add	r3, r1
 801316a:	3314      	adds	r3, #20
 801316c:	2201      	movs	r2, #1
 801316e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013170:	7c7a      	ldrb	r2, [r7, #17]
 8013172:	496d      	ldr	r1, [pc, #436]	@ (8013328 <etharp_query+0x268>)
 8013174:	4613      	mov	r3, r2
 8013176:	005b      	lsls	r3, r3, #1
 8013178:	4413      	add	r3, r2
 801317a:	00db      	lsls	r3, r3, #3
 801317c:	440b      	add	r3, r1
 801317e:	3308      	adds	r3, #8
 8013180:	68fa      	ldr	r2, [r7, #12]
 8013182:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013184:	7c7a      	ldrb	r2, [r7, #17]
 8013186:	4968      	ldr	r1, [pc, #416]	@ (8013328 <etharp_query+0x268>)
 8013188:	4613      	mov	r3, r2
 801318a:	005b      	lsls	r3, r3, #1
 801318c:	4413      	add	r3, r2
 801318e:	00db      	lsls	r3, r3, #3
 8013190:	440b      	add	r3, r1
 8013192:	3314      	adds	r3, #20
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	2b01      	cmp	r3, #1
 8013198:	d011      	beq.n	80131be <etharp_query+0xfe>
 801319a:	7c7a      	ldrb	r2, [r7, #17]
 801319c:	4962      	ldr	r1, [pc, #392]	@ (8013328 <etharp_query+0x268>)
 801319e:	4613      	mov	r3, r2
 80131a0:	005b      	lsls	r3, r3, #1
 80131a2:	4413      	add	r3, r2
 80131a4:	00db      	lsls	r3, r3, #3
 80131a6:	440b      	add	r3, r1
 80131a8:	3314      	adds	r3, #20
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d806      	bhi.n	80131be <etharp_query+0xfe>
 80131b0:	4b5a      	ldr	r3, [pc, #360]	@ (801331c <etharp_query+0x25c>)
 80131b2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80131b6:	495d      	ldr	r1, [pc, #372]	@ (801332c <etharp_query+0x26c>)
 80131b8:	485a      	ldr	r0, [pc, #360]	@ (8013324 <etharp_query+0x264>)
 80131ba:	f001 ffdb 	bl	8015174 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80131be:	6a3b      	ldr	r3, [r7, #32]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d102      	bne.n	80131ca <etharp_query+0x10a>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d10c      	bne.n	80131e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80131ca:	68b9      	ldr	r1, [r7, #8]
 80131cc:	68f8      	ldr	r0, [r7, #12]
 80131ce:	f000 f963 	bl	8013498 <etharp_request>
 80131d2:	4603      	mov	r3, r0
 80131d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d102      	bne.n	80131e4 <etharp_query+0x124>
      return result;
 80131de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80131e2:	e096      	b.n	8013312 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d106      	bne.n	80131f8 <etharp_query+0x138>
 80131ea:	4b4c      	ldr	r3, [pc, #304]	@ (801331c <etharp_query+0x25c>)
 80131ec:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80131f0:	494f      	ldr	r1, [pc, #316]	@ (8013330 <etharp_query+0x270>)
 80131f2:	484c      	ldr	r0, [pc, #304]	@ (8013324 <etharp_query+0x264>)
 80131f4:	f001 ffbe 	bl	8015174 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80131f8:	7c7a      	ldrb	r2, [r7, #17]
 80131fa:	494b      	ldr	r1, [pc, #300]	@ (8013328 <etharp_query+0x268>)
 80131fc:	4613      	mov	r3, r2
 80131fe:	005b      	lsls	r3, r3, #1
 8013200:	4413      	add	r3, r2
 8013202:	00db      	lsls	r3, r3, #3
 8013204:	440b      	add	r3, r1
 8013206:	3314      	adds	r3, #20
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d917      	bls.n	801323e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801320e:	4a49      	ldr	r2, [pc, #292]	@ (8013334 <etharp_query+0x274>)
 8013210:	7c7b      	ldrb	r3, [r7, #17]
 8013212:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013214:	7c7a      	ldrb	r2, [r7, #17]
 8013216:	4613      	mov	r3, r2
 8013218:	005b      	lsls	r3, r3, #1
 801321a:	4413      	add	r3, r2
 801321c:	00db      	lsls	r3, r3, #3
 801321e:	3308      	adds	r3, #8
 8013220:	4a41      	ldr	r2, [pc, #260]	@ (8013328 <etharp_query+0x268>)
 8013222:	4413      	add	r3, r2
 8013224:	3304      	adds	r3, #4
 8013226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801322a:	9200      	str	r2, [sp, #0]
 801322c:	697a      	ldr	r2, [r7, #20]
 801322e:	6879      	ldr	r1, [r7, #4]
 8013230:	68f8      	ldr	r0, [r7, #12]
 8013232:	f001 fc75 	bl	8014b20 <ethernet_output>
 8013236:	4603      	mov	r3, r0
 8013238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801323c:	e067      	b.n	801330e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801323e:	7c7a      	ldrb	r2, [r7, #17]
 8013240:	4939      	ldr	r1, [pc, #228]	@ (8013328 <etharp_query+0x268>)
 8013242:	4613      	mov	r3, r2
 8013244:	005b      	lsls	r3, r3, #1
 8013246:	4413      	add	r3, r2
 8013248:	00db      	lsls	r3, r3, #3
 801324a:	440b      	add	r3, r1
 801324c:	3314      	adds	r3, #20
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	2b01      	cmp	r3, #1
 8013252:	d15c      	bne.n	801330e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013254:	2300      	movs	r3, #0
 8013256:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801325c:	e01c      	b.n	8013298 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	895a      	ldrh	r2, [r3, #10]
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	891b      	ldrh	r3, [r3, #8]
 8013266:	429a      	cmp	r2, r3
 8013268:	d10a      	bne.n	8013280 <etharp_query+0x1c0>
 801326a:	69fb      	ldr	r3, [r7, #28]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d006      	beq.n	8013280 <etharp_query+0x1c0>
 8013272:	4b2a      	ldr	r3, [pc, #168]	@ (801331c <etharp_query+0x25c>)
 8013274:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8013278:	492f      	ldr	r1, [pc, #188]	@ (8013338 <etharp_query+0x278>)
 801327a:	482a      	ldr	r0, [pc, #168]	@ (8013324 <etharp_query+0x264>)
 801327c:	f001 ff7a 	bl	8015174 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	7b1b      	ldrb	r3, [r3, #12]
 8013284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013288:	2b00      	cmp	r3, #0
 801328a:	d002      	beq.n	8013292 <etharp_query+0x1d2>
        copy_needed = 1;
 801328c:	2301      	movs	r3, #1
 801328e:	61bb      	str	r3, [r7, #24]
        break;
 8013290:	e005      	b.n	801329e <etharp_query+0x1de>
      }
      p = p->next;
 8013292:	69fb      	ldr	r3, [r7, #28]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013298:	69fb      	ldr	r3, [r7, #28]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d1df      	bne.n	801325e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d007      	beq.n	80132b4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80132aa:	200e      	movs	r0, #14
 80132ac:	f7f8 fc8c 	bl	800bbc8 <pbuf_clone>
 80132b0:	61f8      	str	r0, [r7, #28]
 80132b2:	e004      	b.n	80132be <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80132b8:	69f8      	ldr	r0, [r7, #28]
 80132ba:	f7f8 fac3 	bl	800b844 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80132be:	69fb      	ldr	r3, [r7, #28]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d021      	beq.n	8013308 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80132c4:	7c7a      	ldrb	r2, [r7, #17]
 80132c6:	4918      	ldr	r1, [pc, #96]	@ (8013328 <etharp_query+0x268>)
 80132c8:	4613      	mov	r3, r2
 80132ca:	005b      	lsls	r3, r3, #1
 80132cc:	4413      	add	r3, r2
 80132ce:	00db      	lsls	r3, r3, #3
 80132d0:	440b      	add	r3, r1
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d00a      	beq.n	80132ee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80132d8:	7c7a      	ldrb	r2, [r7, #17]
 80132da:	4913      	ldr	r1, [pc, #76]	@ (8013328 <etharp_query+0x268>)
 80132dc:	4613      	mov	r3, r2
 80132de:	005b      	lsls	r3, r3, #1
 80132e0:	4413      	add	r3, r2
 80132e2:	00db      	lsls	r3, r3, #3
 80132e4:	440b      	add	r3, r1
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7f8 fa05 	bl	800b6f8 <pbuf_free>
      }
      arp_table[i].q = p;
 80132ee:	7c7a      	ldrb	r2, [r7, #17]
 80132f0:	490d      	ldr	r1, [pc, #52]	@ (8013328 <etharp_query+0x268>)
 80132f2:	4613      	mov	r3, r2
 80132f4:	005b      	lsls	r3, r3, #1
 80132f6:	4413      	add	r3, r2
 80132f8:	00db      	lsls	r3, r3, #3
 80132fa:	440b      	add	r3, r1
 80132fc:	69fa      	ldr	r2, [r7, #28]
 80132fe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013300:	2300      	movs	r3, #0
 8013302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013306:	e002      	b.n	801330e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013308:	23ff      	movs	r3, #255	@ 0xff
 801330a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801330e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013312:	4618      	mov	r0, r3
 8013314:	3728      	adds	r7, #40	@ 0x28
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	08018fa8 	.word	0x08018fa8
 8013320:	08019154 	.word	0x08019154
 8013324:	08019020 	.word	0x08019020
 8013328:	2000bec4 	.word	0x2000bec4
 801332c:	08019164 	.word	0x08019164
 8013330:	08019148 	.word	0x08019148
 8013334:	2000bfb4 	.word	0x2000bfb4
 8013338:	0801918c 	.word	0x0801918c

0801333c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b08a      	sub	sp, #40	@ 0x28
 8013340:	af02      	add	r7, sp, #8
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
 8013348:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801334a:	2300      	movs	r3, #0
 801334c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d106      	bne.n	8013362 <etharp_raw+0x26>
 8013354:	4b3a      	ldr	r3, [pc, #232]	@ (8013440 <etharp_raw+0x104>)
 8013356:	f240 4257 	movw	r2, #1111	@ 0x457
 801335a:	493a      	ldr	r1, [pc, #232]	@ (8013444 <etharp_raw+0x108>)
 801335c:	483a      	ldr	r0, [pc, #232]	@ (8013448 <etharp_raw+0x10c>)
 801335e:	f001 ff09 	bl	8015174 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013362:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013366:	211c      	movs	r1, #28
 8013368:	200e      	movs	r0, #14
 801336a:	f7f7 fee1 	bl	800b130 <pbuf_alloc>
 801336e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d102      	bne.n	801337c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013376:	f04f 33ff 	mov.w	r3, #4294967295
 801337a:	e05d      	b.n	8013438 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	895b      	ldrh	r3, [r3, #10]
 8013380:	2b1b      	cmp	r3, #27
 8013382:	d806      	bhi.n	8013392 <etharp_raw+0x56>
 8013384:	4b2e      	ldr	r3, [pc, #184]	@ (8013440 <etharp_raw+0x104>)
 8013386:	f240 4262 	movw	r2, #1122	@ 0x462
 801338a:	4930      	ldr	r1, [pc, #192]	@ (801344c <etharp_raw+0x110>)
 801338c:	482e      	ldr	r0, [pc, #184]	@ (8013448 <etharp_raw+0x10c>)
 801338e:	f001 fef1 	bl	8015174 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013398:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801339a:	4618      	mov	r0, r3
 801339c:	f7f6 fdbe 	bl	8009f1c <lwip_htons>
 80133a0:	4603      	mov	r3, r0
 80133a2:	461a      	mov	r2, r3
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80133ae:	2b06      	cmp	r3, #6
 80133b0:	d006      	beq.n	80133c0 <etharp_raw+0x84>
 80133b2:	4b23      	ldr	r3, [pc, #140]	@ (8013440 <etharp_raw+0x104>)
 80133b4:	f240 4269 	movw	r2, #1129	@ 0x469
 80133b8:	4925      	ldr	r1, [pc, #148]	@ (8013450 <etharp_raw+0x114>)
 80133ba:	4823      	ldr	r0, [pc, #140]	@ (8013448 <etharp_raw+0x10c>)
 80133bc:	f001 feda 	bl	8015174 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	3308      	adds	r3, #8
 80133c4:	2206      	movs	r2, #6
 80133c6:	6839      	ldr	r1, [r7, #0]
 80133c8:	4618      	mov	r0, r3
 80133ca:	f002 f816 	bl	80153fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	3312      	adds	r3, #18
 80133d2:	2206      	movs	r2, #6
 80133d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80133d6:	4618      	mov	r0, r3
 80133d8:	f002 f80f 	bl	80153fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	330e      	adds	r3, #14
 80133e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133e2:	6812      	ldr	r2, [r2, #0]
 80133e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	3318      	adds	r3, #24
 80133ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133ec:	6812      	ldr	r2, [r2, #0]
 80133ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	2200      	movs	r2, #0
 80133f4:	701a      	strb	r2, [r3, #0]
 80133f6:	2200      	movs	r2, #0
 80133f8:	f042 0201 	orr.w	r2, r2, #1
 80133fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	2200      	movs	r2, #0
 8013402:	f042 0208 	orr.w	r2, r2, #8
 8013406:	709a      	strb	r2, [r3, #2]
 8013408:	2200      	movs	r2, #0
 801340a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	2206      	movs	r2, #6
 8013410:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	2204      	movs	r2, #4
 8013416:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013418:	f640 0306 	movw	r3, #2054	@ 0x806
 801341c:	9300      	str	r3, [sp, #0]
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	68ba      	ldr	r2, [r7, #8]
 8013422:	69b9      	ldr	r1, [r7, #24]
 8013424:	68f8      	ldr	r0, [r7, #12]
 8013426:	f001 fb7b 	bl	8014b20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801342a:	69b8      	ldr	r0, [r7, #24]
 801342c:	f7f8 f964 	bl	800b6f8 <pbuf_free>
  p = NULL;
 8013430:	2300      	movs	r3, #0
 8013432:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013434:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013438:	4618      	mov	r0, r3
 801343a:	3720      	adds	r7, #32
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}
 8013440:	08018fa8 	.word	0x08018fa8
 8013444:	080190f8 	.word	0x080190f8
 8013448:	08019020 	.word	0x08019020
 801344c:	080191a8 	.word	0x080191a8
 8013450:	080191dc 	.word	0x080191dc

08013454 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b088      	sub	sp, #32
 8013458:	af04      	add	r7, sp, #16
 801345a:	60f8      	str	r0, [r7, #12]
 801345c:	60b9      	str	r1, [r7, #8]
 801345e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013470:	2201      	movs	r2, #1
 8013472:	9203      	str	r2, [sp, #12]
 8013474:	68ba      	ldr	r2, [r7, #8]
 8013476:	9202      	str	r2, [sp, #8]
 8013478:	4a06      	ldr	r2, [pc, #24]	@ (8013494 <etharp_request_dst+0x40>)
 801347a:	9201      	str	r2, [sp, #4]
 801347c:	9300      	str	r3, [sp, #0]
 801347e:	4603      	mov	r3, r0
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	68f8      	ldr	r0, [r7, #12]
 8013484:	f7ff ff5a 	bl	801333c <etharp_raw>
 8013488:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801348a:	4618      	mov	r0, r3
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop
 8013494:	0801a584 	.word	0x0801a584

08013498 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80134a2:	4a05      	ldr	r2, [pc, #20]	@ (80134b8 <etharp_request+0x20>)
 80134a4:	6839      	ldr	r1, [r7, #0]
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f7ff ffd4 	bl	8013454 <etharp_request_dst>
 80134ac:	4603      	mov	r3, r0
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3708      	adds	r7, #8
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	0801a57c 	.word	0x0801a57c

080134bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b08e      	sub	sp, #56	@ 0x38
 80134c0:	af04      	add	r7, sp, #16
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80134c6:	4b79      	ldr	r3, [pc, #484]	@ (80136ac <icmp_input+0x1f0>)
 80134c8:	689b      	ldr	r3, [r3, #8]
 80134ca:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80134cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	f003 030f 	and.w	r3, r3, #15
 80134d4:	b2db      	uxtb	r3, r3
 80134d6:	009b      	lsls	r3, r3, #2
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80134dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80134de:	2b13      	cmp	r3, #19
 80134e0:	f240 80cd 	bls.w	801367e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	895b      	ldrh	r3, [r3, #10]
 80134e8:	2b03      	cmp	r3, #3
 80134ea:	f240 80ca 	bls.w	8013682 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80134f8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	f000 80b7 	beq.w	8013670 <icmp_input+0x1b4>
 8013502:	2b08      	cmp	r3, #8
 8013504:	f040 80b7 	bne.w	8013676 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013508:	4b69      	ldr	r3, [pc, #420]	@ (80136b0 <icmp_input+0x1f4>)
 801350a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801350c:	4b67      	ldr	r3, [pc, #412]	@ (80136ac <icmp_input+0x1f0>)
 801350e:	695b      	ldr	r3, [r3, #20]
 8013510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013514:	2be0      	cmp	r3, #224	@ 0xe0
 8013516:	f000 80bb 	beq.w	8013690 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801351a:	4b64      	ldr	r3, [pc, #400]	@ (80136ac <icmp_input+0x1f0>)
 801351c:	695b      	ldr	r3, [r3, #20]
 801351e:	4a63      	ldr	r2, [pc, #396]	@ (80136ac <icmp_input+0x1f0>)
 8013520:	6812      	ldr	r2, [r2, #0]
 8013522:	4611      	mov	r1, r2
 8013524:	4618      	mov	r0, r3
 8013526:	f000 fbed 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	f040 80b1 	bne.w	8013694 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	891b      	ldrh	r3, [r3, #8]
 8013536:	2b07      	cmp	r3, #7
 8013538:	f240 80a5 	bls.w	8013686 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801353c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801353e:	330e      	adds	r3, #14
 8013540:	4619      	mov	r1, r3
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f7f8 f842 	bl	800b5cc <pbuf_add_header>
 8013548:	4603      	mov	r3, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	d04b      	beq.n	80135e6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	891a      	ldrh	r2, [r3, #8]
 8013552:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013554:	4413      	add	r3, r2
 8013556:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	891b      	ldrh	r3, [r3, #8]
 801355c:	8b7a      	ldrh	r2, [r7, #26]
 801355e:	429a      	cmp	r2, r3
 8013560:	f0c0 809a 	bcc.w	8013698 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013564:	8b7b      	ldrh	r3, [r7, #26]
 8013566:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801356a:	4619      	mov	r1, r3
 801356c:	200e      	movs	r0, #14
 801356e:	f7f7 fddf 	bl	800b130 <pbuf_alloc>
 8013572:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	2b00      	cmp	r3, #0
 8013578:	f000 8090 	beq.w	801369c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	895b      	ldrh	r3, [r3, #10]
 8013580:	461a      	mov	r2, r3
 8013582:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013584:	3308      	adds	r3, #8
 8013586:	429a      	cmp	r2, r3
 8013588:	d203      	bcs.n	8013592 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801358a:	6978      	ldr	r0, [r7, #20]
 801358c:	f7f8 f8b4 	bl	800b6f8 <pbuf_free>
          goto icmperr;
 8013590:	e085      	b.n	801369e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013598:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801359a:	4618      	mov	r0, r3
 801359c:	f001 ff2d 	bl	80153fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80135a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135a2:	4619      	mov	r1, r3
 80135a4:	6978      	ldr	r0, [r7, #20]
 80135a6:	f7f8 f821 	bl	800b5ec <pbuf_remove_header>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d009      	beq.n	80135c4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80135b0:	4b40      	ldr	r3, [pc, #256]	@ (80136b4 <icmp_input+0x1f8>)
 80135b2:	22b6      	movs	r2, #182	@ 0xb6
 80135b4:	4940      	ldr	r1, [pc, #256]	@ (80136b8 <icmp_input+0x1fc>)
 80135b6:	4841      	ldr	r0, [pc, #260]	@ (80136bc <icmp_input+0x200>)
 80135b8:	f001 fddc 	bl	8015174 <iprintf>
          pbuf_free(r);
 80135bc:	6978      	ldr	r0, [r7, #20]
 80135be:	f7f8 f89b 	bl	800b6f8 <pbuf_free>
          goto icmperr;
 80135c2:	e06c      	b.n	801369e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80135c4:	6879      	ldr	r1, [r7, #4]
 80135c6:	6978      	ldr	r0, [r7, #20]
 80135c8:	f7f8 f9ba 	bl	800b940 <pbuf_copy>
 80135cc:	4603      	mov	r3, r0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d003      	beq.n	80135da <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80135d2:	6978      	ldr	r0, [r7, #20]
 80135d4:	f7f8 f890 	bl	800b6f8 <pbuf_free>
          goto icmperr;
 80135d8:	e061      	b.n	801369e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f7f8 f88c 	bl	800b6f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	607b      	str	r3, [r7, #4]
 80135e4:	e00f      	b.n	8013606 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80135e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135e8:	330e      	adds	r3, #14
 80135ea:	4619      	mov	r1, r3
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f7f7 fffd 	bl	800b5ec <pbuf_remove_header>
 80135f2:	4603      	mov	r3, r0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d006      	beq.n	8013606 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80135f8:	4b2e      	ldr	r3, [pc, #184]	@ (80136b4 <icmp_input+0x1f8>)
 80135fa:	22c7      	movs	r2, #199	@ 0xc7
 80135fc:	4930      	ldr	r1, [pc, #192]	@ (80136c0 <icmp_input+0x204>)
 80135fe:	482f      	ldr	r0, [pc, #188]	@ (80136bc <icmp_input+0x200>)
 8013600:	f001 fdb8 	bl	8015174 <iprintf>
          goto icmperr;
 8013604:	e04b      	b.n	801369e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801360c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801360e:	4619      	mov	r1, r3
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f7f7 ffdb 	bl	800b5cc <pbuf_add_header>
 8013616:	4603      	mov	r3, r0
 8013618:	2b00      	cmp	r3, #0
 801361a:	d12b      	bne.n	8013674 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	685b      	ldr	r3, [r3, #4]
 8013620:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801362a:	4b20      	ldr	r3, [pc, #128]	@ (80136ac <icmp_input+0x1f0>)
 801362c:	691a      	ldr	r2, [r3, #16]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	2200      	movs	r2, #0
 8013636:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	2200      	movs	r2, #0
 801363c:	709a      	strb	r2, [r3, #2]
 801363e:	2200      	movs	r2, #0
 8013640:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	22ff      	movs	r2, #255	@ 0xff
 8013646:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2200      	movs	r2, #0
 801364c:	729a      	strb	r2, [r3, #10]
 801364e:	2200      	movs	r2, #0
 8013650:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	9302      	str	r3, [sp, #8]
 8013656:	2301      	movs	r3, #1
 8013658:	9301      	str	r3, [sp, #4]
 801365a:	2300      	movs	r3, #0
 801365c:	9300      	str	r3, [sp, #0]
 801365e:	23ff      	movs	r3, #255	@ 0xff
 8013660:	2200      	movs	r2, #0
 8013662:	69f9      	ldr	r1, [r7, #28]
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 fa75 	bl	8013b54 <ip4_output_if>
 801366a:	4603      	mov	r3, r0
 801366c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801366e:	e001      	b.n	8013674 <icmp_input+0x1b8>
      break;
 8013670:	bf00      	nop
 8013672:	e000      	b.n	8013676 <icmp_input+0x1ba>
      break;
 8013674:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f7f8 f83e 	bl	800b6f8 <pbuf_free>
  return;
 801367c:	e013      	b.n	80136a6 <icmp_input+0x1ea>
    goto lenerr;
 801367e:	bf00      	nop
 8013680:	e002      	b.n	8013688 <icmp_input+0x1cc>
    goto lenerr;
 8013682:	bf00      	nop
 8013684:	e000      	b.n	8013688 <icmp_input+0x1cc>
        goto lenerr;
 8013686:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f7f8 f835 	bl	800b6f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801368e:	e00a      	b.n	80136a6 <icmp_input+0x1ea>
        goto icmperr;
 8013690:	bf00      	nop
 8013692:	e004      	b.n	801369e <icmp_input+0x1e2>
        goto icmperr;
 8013694:	bf00      	nop
 8013696:	e002      	b.n	801369e <icmp_input+0x1e2>
          goto icmperr;
 8013698:	bf00      	nop
 801369a:	e000      	b.n	801369e <icmp_input+0x1e2>
          goto icmperr;
 801369c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f7f8 f82a 	bl	800b6f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80136a4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80136a6:	3728      	adds	r7, #40	@ 0x28
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}
 80136ac:	20008d64 	.word	0x20008d64
 80136b0:	20008d78 	.word	0x20008d78
 80136b4:	08019220 	.word	0x08019220
 80136b8:	08019258 	.word	0x08019258
 80136bc:	08019290 	.word	0x08019290
 80136c0:	080192b8 	.word	0x080192b8

080136c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	460b      	mov	r3, r1
 80136ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80136d0:	78fb      	ldrb	r3, [r7, #3]
 80136d2:	461a      	mov	r2, r3
 80136d4:	2103      	movs	r1, #3
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f000 f814 	bl	8013704 <icmp_send_response>
}
 80136dc:	bf00      	nop
 80136de:	3708      	adds	r7, #8
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	460b      	mov	r3, r1
 80136ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80136f0:	78fb      	ldrb	r3, [r7, #3]
 80136f2:	461a      	mov	r2, r3
 80136f4:	210b      	movs	r1, #11
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 f804 	bl	8013704 <icmp_send_response>
}
 80136fc:	bf00      	nop
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b08c      	sub	sp, #48	@ 0x30
 8013708:	af04      	add	r7, sp, #16
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	460b      	mov	r3, r1
 801370e:	70fb      	strb	r3, [r7, #3]
 8013710:	4613      	mov	r3, r2
 8013712:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013714:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013718:	2124      	movs	r1, #36	@ 0x24
 801371a:	2022      	movs	r0, #34	@ 0x22
 801371c:	f7f7 fd08 	bl	800b130 <pbuf_alloc>
 8013720:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013722:	69fb      	ldr	r3, [r7, #28]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d04c      	beq.n	80137c2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	895b      	ldrh	r3, [r3, #10]
 801372c:	2b23      	cmp	r3, #35	@ 0x23
 801372e:	d806      	bhi.n	801373e <icmp_send_response+0x3a>
 8013730:	4b26      	ldr	r3, [pc, #152]	@ (80137cc <icmp_send_response+0xc8>)
 8013732:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013736:	4926      	ldr	r1, [pc, #152]	@ (80137d0 <icmp_send_response+0xcc>)
 8013738:	4826      	ldr	r0, [pc, #152]	@ (80137d4 <icmp_send_response+0xd0>)
 801373a:	f001 fd1b 	bl	8015174 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	78fa      	ldrb	r2, [r7, #3]
 801374e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	78ba      	ldrb	r2, [r7, #2]
 8013754:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	2200      	movs	r2, #0
 801375a:	711a      	strb	r2, [r3, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	2200      	movs	r2, #0
 8013764:	719a      	strb	r2, [r3, #6]
 8013766:	2200      	movs	r2, #0
 8013768:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801376a:	69fb      	ldr	r3, [r7, #28]
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	f103 0008 	add.w	r0, r3, #8
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	221c      	movs	r2, #28
 8013778:	4619      	mov	r1, r3
 801377a:	f001 fe3e 	bl	80153fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	68db      	ldr	r3, [r3, #12]
 8013782:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013784:	f107 030c 	add.w	r3, r7, #12
 8013788:	4618      	mov	r0, r3
 801378a:	f000 f825 	bl	80137d8 <ip4_route>
 801378e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d011      	beq.n	80137ba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	2200      	movs	r2, #0
 801379a:	709a      	strb	r2, [r3, #2]
 801379c:	2200      	movs	r2, #0
 801379e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80137a0:	f107 020c 	add.w	r2, r7, #12
 80137a4:	693b      	ldr	r3, [r7, #16]
 80137a6:	9302      	str	r3, [sp, #8]
 80137a8:	2301      	movs	r3, #1
 80137aa:	9301      	str	r3, [sp, #4]
 80137ac:	2300      	movs	r3, #0
 80137ae:	9300      	str	r3, [sp, #0]
 80137b0:	23ff      	movs	r3, #255	@ 0xff
 80137b2:	2100      	movs	r1, #0
 80137b4:	69f8      	ldr	r0, [r7, #28]
 80137b6:	f000 f9cd 	bl	8013b54 <ip4_output_if>
  }
  pbuf_free(q);
 80137ba:	69f8      	ldr	r0, [r7, #28]
 80137bc:	f7f7 ff9c 	bl	800b6f8 <pbuf_free>
 80137c0:	e000      	b.n	80137c4 <icmp_send_response+0xc0>
    return;
 80137c2:	bf00      	nop
}
 80137c4:	3720      	adds	r7, #32
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	08019220 	.word	0x08019220
 80137d0:	080192ec 	.word	0x080192ec
 80137d4:	08019290 	.word	0x08019290

080137d8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80137d8:	b480      	push	{r7}
 80137da:	b085      	sub	sp, #20
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80137e0:	4b33      	ldr	r3, [pc, #204]	@ (80138b0 <ip4_route+0xd8>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	60fb      	str	r3, [r7, #12]
 80137e6:	e036      	b.n	8013856 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137ee:	f003 0301 	and.w	r3, r3, #1
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d02b      	beq.n	8013850 <ip4_route+0x78>
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137fe:	089b      	lsrs	r3, r3, #2
 8013800:	f003 0301 	and.w	r3, r3, #1
 8013804:	b2db      	uxtb	r3, r3
 8013806:	2b00      	cmp	r3, #0
 8013808:	d022      	beq.n	8013850 <ip4_route+0x78>
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	3304      	adds	r3, #4
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d01d      	beq.n	8013850 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	3304      	adds	r3, #4
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	405a      	eors	r2, r3
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	3308      	adds	r3, #8
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	4013      	ands	r3, r2
 8013828:	2b00      	cmp	r3, #0
 801382a:	d101      	bne.n	8013830 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	e038      	b.n	80138a2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013836:	f003 0302 	and.w	r3, r3, #2
 801383a:	2b00      	cmp	r3, #0
 801383c:	d108      	bne.n	8013850 <ip4_route+0x78>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	330c      	adds	r3, #12
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	429a      	cmp	r2, r3
 801384a:	d101      	bne.n	8013850 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	e028      	b.n	80138a2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	60fb      	str	r3, [r7, #12]
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d1c5      	bne.n	80137e8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801385c:	4b15      	ldr	r3, [pc, #84]	@ (80138b4 <ip4_route+0xdc>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d01a      	beq.n	801389a <ip4_route+0xc2>
 8013864:	4b13      	ldr	r3, [pc, #76]	@ (80138b4 <ip4_route+0xdc>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801386c:	f003 0301 	and.w	r3, r3, #1
 8013870:	2b00      	cmp	r3, #0
 8013872:	d012      	beq.n	801389a <ip4_route+0xc2>
 8013874:	4b0f      	ldr	r3, [pc, #60]	@ (80138b4 <ip4_route+0xdc>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801387c:	f003 0304 	and.w	r3, r3, #4
 8013880:	2b00      	cmp	r3, #0
 8013882:	d00a      	beq.n	801389a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013884:	4b0b      	ldr	r3, [pc, #44]	@ (80138b4 <ip4_route+0xdc>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	3304      	adds	r3, #4
 801388a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801388c:	2b00      	cmp	r3, #0
 801388e:	d004      	beq.n	801389a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	b2db      	uxtb	r3, r3
 8013896:	2b7f      	cmp	r3, #127	@ 0x7f
 8013898:	d101      	bne.n	801389e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801389a:	2300      	movs	r3, #0
 801389c:	e001      	b.n	80138a2 <ip4_route+0xca>
  }

  return netif_default;
 801389e:	4b05      	ldr	r3, [pc, #20]	@ (80138b4 <ip4_route+0xdc>)
 80138a0:	681b      	ldr	r3, [r3, #0]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3714      	adds	r7, #20
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	2000be58 	.word	0x2000be58
 80138b4:	2000be5c 	.word	0x2000be5c

080138b8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b082      	sub	sp, #8
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80138c6:	f003 0301 	and.w	r3, r3, #1
 80138ca:	b2db      	uxtb	r3, r3
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d016      	beq.n	80138fe <ip4_input_accept+0x46>
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	3304      	adds	r3, #4
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d011      	beq.n	80138fe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80138da:	4b0b      	ldr	r3, [pc, #44]	@ (8013908 <ip4_input_accept+0x50>)
 80138dc:	695a      	ldr	r2, [r3, #20]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	3304      	adds	r3, #4
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d008      	beq.n	80138fa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80138e8:	4b07      	ldr	r3, [pc, #28]	@ (8013908 <ip4_input_accept+0x50>)
 80138ea:	695b      	ldr	r3, [r3, #20]
 80138ec:	6879      	ldr	r1, [r7, #4]
 80138ee:	4618      	mov	r0, r3
 80138f0:	f000 fa08 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 80138f4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d001      	beq.n	80138fe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80138fa:	2301      	movs	r3, #1
 80138fc:	e000      	b.n	8013900 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80138fe:	2300      	movs	r3, #0
}
 8013900:	4618      	mov	r0, r3
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}
 8013908:	20008d64 	.word	0x20008d64

0801390c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b086      	sub	sp, #24
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	685b      	ldr	r3, [r3, #4]
 801391a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	091b      	lsrs	r3, r3, #4
 8013922:	b2db      	uxtb	r3, r3
 8013924:	2b04      	cmp	r3, #4
 8013926:	d004      	beq.n	8013932 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7f7 fee5 	bl	800b6f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801392e:	2300      	movs	r3, #0
 8013930:	e107      	b.n	8013b42 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	f003 030f 	and.w	r3, r3, #15
 801393a:	b2db      	uxtb	r3, r3
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	b2db      	uxtb	r3, r3
 8013940:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	885b      	ldrh	r3, [r3, #2]
 8013946:	b29b      	uxth	r3, r3
 8013948:	4618      	mov	r0, r3
 801394a:	f7f6 fae7 	bl	8009f1c <lwip_htons>
 801394e:	4603      	mov	r3, r0
 8013950:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	891b      	ldrh	r3, [r3, #8]
 8013956:	89ba      	ldrh	r2, [r7, #12]
 8013958:	429a      	cmp	r2, r3
 801395a:	d204      	bcs.n	8013966 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801395c:	89bb      	ldrh	r3, [r7, #12]
 801395e:	4619      	mov	r1, r3
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f7f7 fd43 	bl	800b3ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	895b      	ldrh	r3, [r3, #10]
 801396a:	89fa      	ldrh	r2, [r7, #14]
 801396c:	429a      	cmp	r2, r3
 801396e:	d807      	bhi.n	8013980 <ip4_input+0x74>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	891b      	ldrh	r3, [r3, #8]
 8013974:	89ba      	ldrh	r2, [r7, #12]
 8013976:	429a      	cmp	r2, r3
 8013978:	d802      	bhi.n	8013980 <ip4_input+0x74>
 801397a:	89fb      	ldrh	r3, [r7, #14]
 801397c:	2b13      	cmp	r3, #19
 801397e:	d804      	bhi.n	801398a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f7f7 feb9 	bl	800b6f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013986:	2300      	movs	r3, #0
 8013988:	e0db      	b.n	8013b42 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	691b      	ldr	r3, [r3, #16]
 801398e:	4a6f      	ldr	r2, [pc, #444]	@ (8013b4c <ip4_input+0x240>)
 8013990:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	68db      	ldr	r3, [r3, #12]
 8013996:	4a6d      	ldr	r2, [pc, #436]	@ (8013b4c <ip4_input+0x240>)
 8013998:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801399a:	4b6c      	ldr	r3, [pc, #432]	@ (8013b4c <ip4_input+0x240>)
 801399c:	695b      	ldr	r3, [r3, #20]
 801399e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80139a2:	2be0      	cmp	r3, #224	@ 0xe0
 80139a4:	d112      	bne.n	80139cc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139ac:	f003 0301 	and.w	r3, r3, #1
 80139b0:	b2db      	uxtb	r3, r3
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d007      	beq.n	80139c6 <ip4_input+0xba>
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	3304      	adds	r3, #4
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d002      	beq.n	80139c6 <ip4_input+0xba>
      netif = inp;
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	613b      	str	r3, [r7, #16]
 80139c4:	e02a      	b.n	8013a1c <ip4_input+0x110>
    } else {
      netif = NULL;
 80139c6:	2300      	movs	r3, #0
 80139c8:	613b      	str	r3, [r7, #16]
 80139ca:	e027      	b.n	8013a1c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80139cc:	6838      	ldr	r0, [r7, #0]
 80139ce:	f7ff ff73 	bl	80138b8 <ip4_input_accept>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d002      	beq.n	80139de <ip4_input+0xd2>
      netif = inp;
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	613b      	str	r3, [r7, #16]
 80139dc:	e01e      	b.n	8013a1c <ip4_input+0x110>
    } else {
      netif = NULL;
 80139de:	2300      	movs	r3, #0
 80139e0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80139e2:	4b5a      	ldr	r3, [pc, #360]	@ (8013b4c <ip4_input+0x240>)
 80139e4:	695b      	ldr	r3, [r3, #20]
 80139e6:	b2db      	uxtb	r3, r3
 80139e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80139ea:	d017      	beq.n	8013a1c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80139ec:	4b58      	ldr	r3, [pc, #352]	@ (8013b50 <ip4_input+0x244>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	613b      	str	r3, [r7, #16]
 80139f2:	e00e      	b.n	8013a12 <ip4_input+0x106>
          if (netif == inp) {
 80139f4:	693a      	ldr	r2, [r7, #16]
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d006      	beq.n	8013a0a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80139fc:	6938      	ldr	r0, [r7, #16]
 80139fe:	f7ff ff5b 	bl	80138b8 <ip4_input_accept>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d108      	bne.n	8013a1a <ip4_input+0x10e>
 8013a08:	e000      	b.n	8013a0c <ip4_input+0x100>
            continue;
 8013a0a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	613b      	str	r3, [r7, #16]
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d1ed      	bne.n	80139f4 <ip4_input+0xe8>
 8013a18:	e000      	b.n	8013a1c <ip4_input+0x110>
            break;
 8013a1a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8013b4c <ip4_input+0x240>)
 8013a1e:	691b      	ldr	r3, [r3, #16]
 8013a20:	6839      	ldr	r1, [r7, #0]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f000 f96e 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d105      	bne.n	8013a3a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013a2e:	4b47      	ldr	r3, [pc, #284]	@ (8013b4c <ip4_input+0x240>)
 8013a30:	691b      	ldr	r3, [r3, #16]
 8013a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013a36:	2be0      	cmp	r3, #224	@ 0xe0
 8013a38:	d104      	bne.n	8013a44 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	f7f7 fe5c 	bl	800b6f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013a40:	2300      	movs	r3, #0
 8013a42:	e07e      	b.n	8013b42 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d104      	bne.n	8013a54 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7f7 fe54 	bl	800b6f8 <pbuf_free>
    return ERR_OK;
 8013a50:	2300      	movs	r3, #0
 8013a52:	e076      	b.n	8013b42 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	88db      	ldrh	r3, [r3, #6]
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013a60:	4013      	ands	r3, r2
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00b      	beq.n	8013a7e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 fc92 	bl	8014390 <ip4_reass>
 8013a6c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d101      	bne.n	8013a78 <ip4_input+0x16c>
      return ERR_OK;
 8013a74:	2300      	movs	r3, #0
 8013a76:	e064      	b.n	8013b42 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013a7e:	4a33      	ldr	r2, [pc, #204]	@ (8013b4c <ip4_input+0x240>)
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013a84:	4a31      	ldr	r2, [pc, #196]	@ (8013b4c <ip4_input+0x240>)
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013a8a:	4a30      	ldr	r2, [pc, #192]	@ (8013b4c <ip4_input+0x240>)
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	f003 030f 	and.w	r3, r3, #15
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8013b4c <ip4_input+0x240>)
 8013aa2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013aa4:	89fb      	ldrh	r3, [r7, #14]
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7f7 fd9f 	bl	800b5ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	7a5b      	ldrb	r3, [r3, #9]
 8013ab2:	2b11      	cmp	r3, #17
 8013ab4:	d006      	beq.n	8013ac4 <ip4_input+0x1b8>
 8013ab6:	2b11      	cmp	r3, #17
 8013ab8:	dc13      	bgt.n	8013ae2 <ip4_input+0x1d6>
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d00c      	beq.n	8013ad8 <ip4_input+0x1cc>
 8013abe:	2b06      	cmp	r3, #6
 8013ac0:	d005      	beq.n	8013ace <ip4_input+0x1c2>
 8013ac2:	e00e      	b.n	8013ae2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013ac4:	6839      	ldr	r1, [r7, #0]
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f7fe fb5a 	bl	8012180 <udp_input>
        break;
 8013acc:	e026      	b.n	8013b1c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013ace:	6839      	ldr	r1, [r7, #0]
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f7f9 ff19 	bl	800d908 <tcp_input>
        break;
 8013ad6:	e021      	b.n	8013b1c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013ad8:	6839      	ldr	r1, [r7, #0]
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f7ff fcee 	bl	80134bc <icmp_input>
        break;
 8013ae0:	e01c      	b.n	8013b1c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8013b4c <ip4_input+0x240>)
 8013ae4:	695b      	ldr	r3, [r3, #20]
 8013ae6:	6939      	ldr	r1, [r7, #16]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f000 f90b 	bl	8013d04 <ip4_addr_isbroadcast_u32>
 8013aee:	4603      	mov	r3, r0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d10f      	bne.n	8013b14 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013af4:	4b15      	ldr	r3, [pc, #84]	@ (8013b4c <ip4_input+0x240>)
 8013af6:	695b      	ldr	r3, [r3, #20]
 8013af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013afc:	2be0      	cmp	r3, #224	@ 0xe0
 8013afe:	d009      	beq.n	8013b14 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013b00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013b04:	4619      	mov	r1, r3
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f7f7 fde3 	bl	800b6d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013b0c:	2102      	movs	r1, #2
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7ff fdd8 	bl	80136c4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f7f7 fdef 	bl	800b6f8 <pbuf_free>
        break;
 8013b1a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8013b4c <ip4_input+0x240>)
 8013b1e:	2200      	movs	r2, #0
 8013b20:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013b22:	4b0a      	ldr	r3, [pc, #40]	@ (8013b4c <ip4_input+0x240>)
 8013b24:	2200      	movs	r2, #0
 8013b26:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013b28:	4b08      	ldr	r3, [pc, #32]	@ (8013b4c <ip4_input+0x240>)
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013b2e:	4b07      	ldr	r3, [pc, #28]	@ (8013b4c <ip4_input+0x240>)
 8013b30:	2200      	movs	r2, #0
 8013b32:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013b34:	4b05      	ldr	r3, [pc, #20]	@ (8013b4c <ip4_input+0x240>)
 8013b36:	2200      	movs	r2, #0
 8013b38:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013b3a:	4b04      	ldr	r3, [pc, #16]	@ (8013b4c <ip4_input+0x240>)
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013b40:	2300      	movs	r3, #0
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	3718      	adds	r7, #24
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}
 8013b4a:	bf00      	nop
 8013b4c:	20008d64 	.word	0x20008d64
 8013b50:	2000be58 	.word	0x2000be58

08013b54 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b08a      	sub	sp, #40	@ 0x28
 8013b58:	af04      	add	r7, sp, #16
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
 8013b60:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d009      	beq.n	8013b80 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d003      	beq.n	8013b7a <ip4_output_if+0x26>
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d102      	bne.n	8013b80 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b7c:	3304      	adds	r3, #4
 8013b7e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013b80:	78fa      	ldrb	r2, [r7, #3]
 8013b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b84:	9302      	str	r3, [sp, #8]
 8013b86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013b8a:	9301      	str	r3, [sp, #4]
 8013b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013b90:	9300      	str	r3, [sp, #0]
 8013b92:	4613      	mov	r3, r2
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	6979      	ldr	r1, [r7, #20]
 8013b98:	68f8      	ldr	r0, [r7, #12]
 8013b9a:	f000 f805 	bl	8013ba8 <ip4_output_if_src>
 8013b9e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3718      	adds	r7, #24
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b088      	sub	sp, #32
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	60f8      	str	r0, [r7, #12]
 8013bb0:	60b9      	str	r1, [r7, #8]
 8013bb2:	607a      	str	r2, [r7, #4]
 8013bb4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	7b9b      	ldrb	r3, [r3, #14]
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	d006      	beq.n	8013bcc <ip4_output_if_src+0x24>
 8013bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8013cec <ip4_output_if_src+0x144>)
 8013bc0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013bc4:	494a      	ldr	r1, [pc, #296]	@ (8013cf0 <ip4_output_if_src+0x148>)
 8013bc6:	484b      	ldr	r0, [pc, #300]	@ (8013cf4 <ip4_output_if_src+0x14c>)
 8013bc8:	f001 fad4 	bl	8015174 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d060      	beq.n	8013c94 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013bd2:	2314      	movs	r3, #20
 8013bd4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013bd6:	2114      	movs	r1, #20
 8013bd8:	68f8      	ldr	r0, [r7, #12]
 8013bda:	f7f7 fcf7 	bl	800b5cc <pbuf_add_header>
 8013bde:	4603      	mov	r3, r0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d002      	beq.n	8013bea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013be4:	f06f 0301 	mvn.w	r3, #1
 8013be8:	e07c      	b.n	8013ce4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	685b      	ldr	r3, [r3, #4]
 8013bee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	895b      	ldrh	r3, [r3, #10]
 8013bf4:	2b13      	cmp	r3, #19
 8013bf6:	d806      	bhi.n	8013c06 <ip4_output_if_src+0x5e>
 8013bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8013cec <ip4_output_if_src+0x144>)
 8013bfa:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013bfe:	493e      	ldr	r1, [pc, #248]	@ (8013cf8 <ip4_output_if_src+0x150>)
 8013c00:	483c      	ldr	r0, [pc, #240]	@ (8013cf4 <ip4_output_if_src+0x14c>)
 8013c02:	f001 fab7 	bl	8015174 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013c06:	69fb      	ldr	r3, [r7, #28]
 8013c08:	78fa      	ldrb	r2, [r7, #3]
 8013c0a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013c12:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013c1c:	8b7b      	ldrh	r3, [r7, #26]
 8013c1e:	089b      	lsrs	r3, r3, #2
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c28:	b2da      	uxtb	r2, r3
 8013c2a:	69fb      	ldr	r3, [r7, #28]
 8013c2c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013c34:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	891b      	ldrh	r3, [r3, #8]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7f6 f96e 	bl	8009f1c <lwip_htons>
 8013c40:	4603      	mov	r3, r0
 8013c42:	461a      	mov	r2, r3
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013c48:	69fb      	ldr	r3, [r7, #28]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	719a      	strb	r2, [r3, #6]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013c52:	4b2a      	ldr	r3, [pc, #168]	@ (8013cfc <ip4_output_if_src+0x154>)
 8013c54:	881b      	ldrh	r3, [r3, #0]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7f6 f960 	bl	8009f1c <lwip_htons>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	461a      	mov	r2, r3
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013c64:	4b25      	ldr	r3, [pc, #148]	@ (8013cfc <ip4_output_if_src+0x154>)
 8013c66:	881b      	ldrh	r3, [r3, #0]
 8013c68:	3301      	adds	r3, #1
 8013c6a:	b29a      	uxth	r2, r3
 8013c6c:	4b23      	ldr	r3, [pc, #140]	@ (8013cfc <ip4_output_if_src+0x154>)
 8013c6e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d104      	bne.n	8013c80 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013c76:	4b22      	ldr	r3, [pc, #136]	@ (8013d00 <ip4_output_if_src+0x158>)
 8013c78:	681a      	ldr	r2, [r3, #0]
 8013c7a:	69fb      	ldr	r3, [r7, #28]
 8013c7c:	60da      	str	r2, [r3, #12]
 8013c7e:	e003      	b.n	8013c88 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	69fb      	ldr	r3, [r7, #28]
 8013c86:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	729a      	strb	r2, [r3, #10]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	72da      	strb	r2, [r3, #11]
 8013c92:	e00f      	b.n	8013cb4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	895b      	ldrh	r3, [r3, #10]
 8013c98:	2b13      	cmp	r3, #19
 8013c9a:	d802      	bhi.n	8013ca2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013c9c:	f06f 0301 	mvn.w	r3, #1
 8013ca0:	e020      	b.n	8013ce4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013ca8:	69fb      	ldr	r3, [r7, #28]
 8013caa:	691b      	ldr	r3, [r3, #16]
 8013cac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013cae:	f107 0314 	add.w	r3, r7, #20
 8013cb2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00c      	beq.n	8013cd6 <ip4_output_if_src+0x12e>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	891a      	ldrh	r2, [r3, #8]
 8013cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cc2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d906      	bls.n	8013cd6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013ccc:	68f8      	ldr	r0, [r7, #12]
 8013cce:	f000 fd53 	bl	8014778 <ip4_frag>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	e006      	b.n	8013ce4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd8:	695b      	ldr	r3, [r3, #20]
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	68f9      	ldr	r1, [r7, #12]
 8013cde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ce0:	4798      	blx	r3
 8013ce2:	4603      	mov	r3, r0
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3720      	adds	r7, #32
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}
 8013cec:	08019318 	.word	0x08019318
 8013cf0:	0801934c 	.word	0x0801934c
 8013cf4:	08019358 	.word	0x08019358
 8013cf8:	08019380 	.word	0x08019380
 8013cfc:	2000bfb6 	.word	0x2000bfb6
 8013d00:	0801a578 	.word	0x0801a578

08013d04 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b085      	sub	sp, #20
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d18:	d002      	beq.n	8013d20 <ip4_addr_isbroadcast_u32+0x1c>
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d101      	bne.n	8013d24 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013d20:	2301      	movs	r3, #1
 8013d22:	e02a      	b.n	8013d7a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d2a:	f003 0302 	and.w	r3, r3, #2
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d101      	bne.n	8013d36 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013d32:	2300      	movs	r3, #0
 8013d34:	e021      	b.n	8013d7a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	3304      	adds	r3, #4
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	687a      	ldr	r2, [r7, #4]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d101      	bne.n	8013d46 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013d42:	2300      	movs	r3, #0
 8013d44:	e019      	b.n	8013d7a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	3304      	adds	r3, #4
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	405a      	eors	r2, r3
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	3308      	adds	r3, #8
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	4013      	ands	r3, r2
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d10d      	bne.n	8013d78 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	3308      	adds	r3, #8
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	43da      	mvns	r2, r3
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	3308      	adds	r3, #8
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d101      	bne.n	8013d78 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013d74:	2301      	movs	r3, #1
 8013d76:	e000      	b.n	8013d7a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013d78:	2300      	movs	r3, #0
  }
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3714      	adds	r7, #20
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d84:	4770      	bx	lr
	...

08013d88 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013d92:	4b12      	ldr	r3, [pc, #72]	@ (8013ddc <ip_reass_tmr+0x54>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013d98:	e018      	b.n	8013dcc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	7fdb      	ldrb	r3, [r3, #31]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d00b      	beq.n	8013dba <ip_reass_tmr+0x32>
      r->timer--;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	7fdb      	ldrb	r3, [r3, #31]
 8013da6:	3b01      	subs	r3, #1
 8013da8:	b2da      	uxtb	r2, r3
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	60fb      	str	r3, [r7, #12]
 8013db8:	e008      	b.n	8013dcc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013dc4:	68b9      	ldr	r1, [r7, #8]
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f000 f80a 	bl	8013de0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d1e3      	bne.n	8013d9a <ip_reass_tmr+0x12>
    }
  }
}
 8013dd2:	bf00      	nop
 8013dd4:	bf00      	nop
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	2000bfb8 	.word	0x2000bfb8

08013de0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b088      	sub	sp, #32
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013dea:	2300      	movs	r3, #0
 8013dec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013dee:	683a      	ldr	r2, [r7, #0]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	429a      	cmp	r2, r3
 8013df4:	d105      	bne.n	8013e02 <ip_reass_free_complete_datagram+0x22>
 8013df6:	4b45      	ldr	r3, [pc, #276]	@ (8013f0c <ip_reass_free_complete_datagram+0x12c>)
 8013df8:	22ab      	movs	r2, #171	@ 0xab
 8013dfa:	4945      	ldr	r1, [pc, #276]	@ (8013f10 <ip_reass_free_complete_datagram+0x130>)
 8013dfc:	4845      	ldr	r0, [pc, #276]	@ (8013f14 <ip_reass_free_complete_datagram+0x134>)
 8013dfe:	f001 f9b9 	bl	8015174 <iprintf>
  if (prev != NULL) {
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d00a      	beq.n	8013e1e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d005      	beq.n	8013e1e <ip_reass_free_complete_datagram+0x3e>
 8013e12:	4b3e      	ldr	r3, [pc, #248]	@ (8013f0c <ip_reass_free_complete_datagram+0x12c>)
 8013e14:	22ad      	movs	r2, #173	@ 0xad
 8013e16:	4940      	ldr	r1, [pc, #256]	@ (8013f18 <ip_reass_free_complete_datagram+0x138>)
 8013e18:	483e      	ldr	r0, [pc, #248]	@ (8013f14 <ip_reass_free_complete_datagram+0x134>)
 8013e1a:	f001 f9ab 	bl	8015174 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	685b      	ldr	r3, [r3, #4]
 8013e24:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	889b      	ldrh	r3, [r3, #4]
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d12a      	bne.n	8013e86 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	681a      	ldr	r2, [r3, #0]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013e3e:	69bb      	ldr	r3, [r7, #24]
 8013e40:	6858      	ldr	r0, [r3, #4]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	3308      	adds	r3, #8
 8013e46:	2214      	movs	r2, #20
 8013e48:	4619      	mov	r1, r3
 8013e4a:	f001 fad6 	bl	80153fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013e4e:	2101      	movs	r1, #1
 8013e50:	69b8      	ldr	r0, [r7, #24]
 8013e52:	f7ff fc47 	bl	80136e4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013e56:	69b8      	ldr	r0, [r7, #24]
 8013e58:	f7f7 fcdc 	bl	800b814 <pbuf_clen>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013e60:	8bfa      	ldrh	r2, [r7, #30]
 8013e62:	8a7b      	ldrh	r3, [r7, #18]
 8013e64:	4413      	add	r3, r2
 8013e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e6a:	db05      	blt.n	8013e78 <ip_reass_free_complete_datagram+0x98>
 8013e6c:	4b27      	ldr	r3, [pc, #156]	@ (8013f0c <ip_reass_free_complete_datagram+0x12c>)
 8013e6e:	22bc      	movs	r2, #188	@ 0xbc
 8013e70:	492a      	ldr	r1, [pc, #168]	@ (8013f1c <ip_reass_free_complete_datagram+0x13c>)
 8013e72:	4828      	ldr	r0, [pc, #160]	@ (8013f14 <ip_reass_free_complete_datagram+0x134>)
 8013e74:	f001 f97e 	bl	8015174 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013e78:	8bfa      	ldrh	r2, [r7, #30]
 8013e7a:	8a7b      	ldrh	r3, [r7, #18]
 8013e7c:	4413      	add	r3, r2
 8013e7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013e80:	69b8      	ldr	r0, [r7, #24]
 8013e82:	f7f7 fc39 	bl	800b6f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013e8c:	e01f      	b.n	8013ece <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013e8e:	69bb      	ldr	r3, [r7, #24]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013e94:	69bb      	ldr	r3, [r7, #24]
 8013e96:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013e9e:	68f8      	ldr	r0, [r7, #12]
 8013ea0:	f7f7 fcb8 	bl	800b814 <pbuf_clen>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013ea8:	8bfa      	ldrh	r2, [r7, #30]
 8013eaa:	8a7b      	ldrh	r3, [r7, #18]
 8013eac:	4413      	add	r3, r2
 8013eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013eb2:	db05      	blt.n	8013ec0 <ip_reass_free_complete_datagram+0xe0>
 8013eb4:	4b15      	ldr	r3, [pc, #84]	@ (8013f0c <ip_reass_free_complete_datagram+0x12c>)
 8013eb6:	22cc      	movs	r2, #204	@ 0xcc
 8013eb8:	4918      	ldr	r1, [pc, #96]	@ (8013f1c <ip_reass_free_complete_datagram+0x13c>)
 8013eba:	4816      	ldr	r0, [pc, #88]	@ (8013f14 <ip_reass_free_complete_datagram+0x134>)
 8013ebc:	f001 f95a 	bl	8015174 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013ec0:	8bfa      	ldrh	r2, [r7, #30]
 8013ec2:	8a7b      	ldrh	r3, [r7, #18]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f7f7 fc15 	bl	800b6f8 <pbuf_free>
  while (p != NULL) {
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d1dc      	bne.n	8013e8e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013ed4:	6839      	ldr	r1, [r7, #0]
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f000 f8c2 	bl	8014060 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013edc:	4b10      	ldr	r3, [pc, #64]	@ (8013f20 <ip_reass_free_complete_datagram+0x140>)
 8013ede:	881b      	ldrh	r3, [r3, #0]
 8013ee0:	8bfa      	ldrh	r2, [r7, #30]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d905      	bls.n	8013ef2 <ip_reass_free_complete_datagram+0x112>
 8013ee6:	4b09      	ldr	r3, [pc, #36]	@ (8013f0c <ip_reass_free_complete_datagram+0x12c>)
 8013ee8:	22d2      	movs	r2, #210	@ 0xd2
 8013eea:	490e      	ldr	r1, [pc, #56]	@ (8013f24 <ip_reass_free_complete_datagram+0x144>)
 8013eec:	4809      	ldr	r0, [pc, #36]	@ (8013f14 <ip_reass_free_complete_datagram+0x134>)
 8013eee:	f001 f941 	bl	8015174 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8013f20 <ip_reass_free_complete_datagram+0x140>)
 8013ef4:	881a      	ldrh	r2, [r3, #0]
 8013ef6:	8bfb      	ldrh	r3, [r7, #30]
 8013ef8:	1ad3      	subs	r3, r2, r3
 8013efa:	b29a      	uxth	r2, r3
 8013efc:	4b08      	ldr	r3, [pc, #32]	@ (8013f20 <ip_reass_free_complete_datagram+0x140>)
 8013efe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013f00:	8bfb      	ldrh	r3, [r7, #30]
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3720      	adds	r7, #32
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	080193b0 	.word	0x080193b0
 8013f10:	080193ec 	.word	0x080193ec
 8013f14:	080193f8 	.word	0x080193f8
 8013f18:	08019420 	.word	0x08019420
 8013f1c:	08019434 	.word	0x08019434
 8013f20:	2000bfbc 	.word	0x2000bfbc
 8013f24:	08019454 	.word	0x08019454

08013f28 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b08a      	sub	sp, #40	@ 0x28
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
 8013f30:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013f32:	2300      	movs	r3, #0
 8013f34:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013f36:	2300      	movs	r3, #0
 8013f38:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013f46:	4b28      	ldr	r3, [pc, #160]	@ (8013fe8 <ip_reass_remove_oldest_datagram+0xc0>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013f4c:	e030      	b.n	8013fb0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f50:	695a      	ldr	r2, [r3, #20]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	68db      	ldr	r3, [r3, #12]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d10c      	bne.n	8013f74 <ip_reass_remove_oldest_datagram+0x4c>
 8013f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f5c:	699a      	ldr	r2, [r3, #24]
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	691b      	ldr	r3, [r3, #16]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d106      	bne.n	8013f74 <ip_reass_remove_oldest_datagram+0x4c>
 8013f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f68:	899a      	ldrh	r2, [r3, #12]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	889b      	ldrh	r3, [r3, #4]
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	429a      	cmp	r2, r3
 8013f72:	d014      	beq.n	8013f9e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	3301      	adds	r3, #1
 8013f78:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013f7a:	6a3b      	ldr	r3, [r7, #32]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d104      	bne.n	8013f8a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f82:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013f84:	69fb      	ldr	r3, [r7, #28]
 8013f86:	61bb      	str	r3, [r7, #24]
 8013f88:	e009      	b.n	8013f9e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8c:	7fda      	ldrb	r2, [r3, #31]
 8013f8e:	6a3b      	ldr	r3, [r7, #32]
 8013f90:	7fdb      	ldrb	r3, [r3, #31]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d803      	bhi.n	8013f9e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f98:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013f9a:	69fb      	ldr	r3, [r7, #28]
 8013f9c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d001      	beq.n	8013faa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d1cb      	bne.n	8013f4e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013fb6:	6a3b      	ldr	r3, [r7, #32]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d008      	beq.n	8013fce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013fbc:	69b9      	ldr	r1, [r7, #24]
 8013fbe:	6a38      	ldr	r0, [r7, #32]
 8013fc0:	f7ff ff0e 	bl	8013de0 <ip_reass_free_complete_datagram>
 8013fc4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013fc6:	697a      	ldr	r2, [r7, #20]
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	4413      	add	r3, r2
 8013fcc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013fce:	697a      	ldr	r2, [r7, #20]
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	da02      	bge.n	8013fdc <ip_reass_remove_oldest_datagram+0xb4>
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	dcac      	bgt.n	8013f36 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013fdc:	697b      	ldr	r3, [r7, #20]
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3728      	adds	r7, #40	@ 0x28
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	2000bfb8 	.word	0x2000bfb8

08013fec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b084      	sub	sp, #16
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013ff6:	2004      	movs	r0, #4
 8013ff8:	f7f6 fc64 	bl	800a8c4 <memp_malloc>
 8013ffc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d110      	bne.n	8014026 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014004:	6839      	ldr	r1, [r7, #0]
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7ff ff8e 	bl	8013f28 <ip_reass_remove_oldest_datagram>
 801400c:	4602      	mov	r2, r0
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	4293      	cmp	r3, r2
 8014012:	dc03      	bgt.n	801401c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014014:	2004      	movs	r0, #4
 8014016:	f7f6 fc55 	bl	800a8c4 <memp_malloc>
 801401a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d101      	bne.n	8014026 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014022:	2300      	movs	r3, #0
 8014024:	e016      	b.n	8014054 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014026:	2220      	movs	r2, #32
 8014028:	2100      	movs	r1, #0
 801402a:	68f8      	ldr	r0, [r7, #12]
 801402c:	f001 f907 	bl	801523e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	220f      	movs	r2, #15
 8014034:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014036:	4b09      	ldr	r3, [pc, #36]	@ (801405c <ip_reass_enqueue_new_datagram+0x70>)
 8014038:	681a      	ldr	r2, [r3, #0]
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801403e:	4a07      	ldr	r2, [pc, #28]	@ (801405c <ip_reass_enqueue_new_datagram+0x70>)
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	3308      	adds	r3, #8
 8014048:	2214      	movs	r2, #20
 801404a:	6879      	ldr	r1, [r7, #4]
 801404c:	4618      	mov	r0, r3
 801404e:	f001 f9d4 	bl	80153fa <memcpy>
  return ipr;
 8014052:	68fb      	ldr	r3, [r7, #12]
}
 8014054:	4618      	mov	r0, r3
 8014056:	3710      	adds	r7, #16
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}
 801405c:	2000bfb8 	.word	0x2000bfb8

08014060 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801406a:	4b10      	ldr	r3, [pc, #64]	@ (80140ac <ip_reass_dequeue_datagram+0x4c>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	429a      	cmp	r2, r3
 8014072:	d104      	bne.n	801407e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4a0c      	ldr	r2, [pc, #48]	@ (80140ac <ip_reass_dequeue_datagram+0x4c>)
 801407a:	6013      	str	r3, [r2, #0]
 801407c:	e00d      	b.n	801409a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d106      	bne.n	8014092 <ip_reass_dequeue_datagram+0x32>
 8014084:	4b0a      	ldr	r3, [pc, #40]	@ (80140b0 <ip_reass_dequeue_datagram+0x50>)
 8014086:	f240 1245 	movw	r2, #325	@ 0x145
 801408a:	490a      	ldr	r1, [pc, #40]	@ (80140b4 <ip_reass_dequeue_datagram+0x54>)
 801408c:	480a      	ldr	r0, [pc, #40]	@ (80140b8 <ip_reass_dequeue_datagram+0x58>)
 801408e:	f001 f871 	bl	8015174 <iprintf>
    prev->next = ipr->next;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681a      	ldr	r2, [r3, #0]
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801409a:	6879      	ldr	r1, [r7, #4]
 801409c:	2004      	movs	r0, #4
 801409e:	f7f6 fc87 	bl	800a9b0 <memp_free>
}
 80140a2:	bf00      	nop
 80140a4:	3708      	adds	r7, #8
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	2000bfb8 	.word	0x2000bfb8
 80140b0:	080193b0 	.word	0x080193b0
 80140b4:	08019478 	.word	0x08019478
 80140b8:	080193f8 	.word	0x080193f8

080140bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b08c      	sub	sp, #48	@ 0x30
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80140c8:	2300      	movs	r3, #0
 80140ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80140cc:	2301      	movs	r3, #1
 80140ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	685b      	ldr	r3, [r3, #4]
 80140d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80140d6:	69fb      	ldr	r3, [r7, #28]
 80140d8:	885b      	ldrh	r3, [r3, #2]
 80140da:	b29b      	uxth	r3, r3
 80140dc:	4618      	mov	r0, r3
 80140de:	f7f5 ff1d 	bl	8009f1c <lwip_htons>
 80140e2:	4603      	mov	r3, r0
 80140e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80140e6:	69fb      	ldr	r3, [r7, #28]
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	f003 030f 	and.w	r3, r3, #15
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80140f4:	7e7b      	ldrb	r3, [r7, #25]
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	8b7a      	ldrh	r2, [r7, #26]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d202      	bcs.n	8014104 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014102:	e135      	b.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014104:	7e7b      	ldrb	r3, [r7, #25]
 8014106:	b29b      	uxth	r3, r3
 8014108:	8b7a      	ldrh	r2, [r7, #26]
 801410a:	1ad3      	subs	r3, r2, r3
 801410c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	88db      	ldrh	r3, [r3, #6]
 8014112:	b29b      	uxth	r3, r3
 8014114:	4618      	mov	r0, r3
 8014116:	f7f5 ff01 	bl	8009f1c <lwip_htons>
 801411a:	4603      	mov	r3, r0
 801411c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014120:	b29b      	uxth	r3, r3
 8014122:	00db      	lsls	r3, r3, #3
 8014124:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801412e:	2200      	movs	r2, #0
 8014130:	701a      	strb	r2, [r3, #0]
 8014132:	2200      	movs	r2, #0
 8014134:	705a      	strb	r2, [r3, #1]
 8014136:	2200      	movs	r2, #0
 8014138:	709a      	strb	r2, [r3, #2]
 801413a:	2200      	movs	r2, #0
 801413c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801413e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014140:	8afa      	ldrh	r2, [r7, #22]
 8014142:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014144:	8afa      	ldrh	r2, [r7, #22]
 8014146:	8b7b      	ldrh	r3, [r7, #26]
 8014148:	4413      	add	r3, r2
 801414a:	b29a      	uxth	r2, r3
 801414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801414e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014152:	88db      	ldrh	r3, [r3, #6]
 8014154:	b29b      	uxth	r3, r3
 8014156:	8afa      	ldrh	r2, [r7, #22]
 8014158:	429a      	cmp	r2, r3
 801415a:	d902      	bls.n	8014162 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801415c:	f04f 33ff 	mov.w	r3, #4294967295
 8014160:	e106      	b.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	627b      	str	r3, [r7, #36]	@ 0x24
 8014168:	e068      	b.n	801423c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014172:	889b      	ldrh	r3, [r3, #4]
 8014174:	b29a      	uxth	r2, r3
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	889b      	ldrh	r3, [r3, #4]
 801417a:	b29b      	uxth	r3, r3
 801417c:	429a      	cmp	r2, r3
 801417e:	d235      	bcs.n	80141ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014184:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014188:	2b00      	cmp	r3, #0
 801418a:	d020      	beq.n	80141ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801418e:	889b      	ldrh	r3, [r3, #4]
 8014190:	b29a      	uxth	r2, r3
 8014192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014194:	88db      	ldrh	r3, [r3, #6]
 8014196:	b29b      	uxth	r3, r3
 8014198:	429a      	cmp	r2, r3
 801419a:	d307      	bcc.n	80141ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801419c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801419e:	88db      	ldrh	r3, [r3, #6]
 80141a0:	b29a      	uxth	r2, r3
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	889b      	ldrh	r3, [r3, #4]
 80141a6:	b29b      	uxth	r3, r3
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d902      	bls.n	80141b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141ac:	f04f 33ff 	mov.w	r3, #4294967295
 80141b0:	e0de      	b.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80141b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141b4:	68ba      	ldr	r2, [r7, #8]
 80141b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80141b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141ba:	88db      	ldrh	r3, [r3, #6]
 80141bc:	b29a      	uxth	r2, r3
 80141be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141c0:	889b      	ldrh	r3, [r3, #4]
 80141c2:	b29b      	uxth	r3, r3
 80141c4:	429a      	cmp	r2, r3
 80141c6:	d03d      	beq.n	8014244 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80141c8:	2300      	movs	r3, #0
 80141ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80141cc:	e03a      	b.n	8014244 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80141ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141d0:	88db      	ldrh	r3, [r3, #6]
 80141d2:	b29a      	uxth	r2, r3
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	889b      	ldrh	r3, [r3, #4]
 80141d8:	b29b      	uxth	r3, r3
 80141da:	429a      	cmp	r2, r3
 80141dc:	d902      	bls.n	80141e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141de:	f04f 33ff 	mov.w	r3, #4294967295
 80141e2:	e0c5      	b.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	68ba      	ldr	r2, [r7, #8]
 80141e8:	605a      	str	r2, [r3, #4]
      break;
 80141ea:	e02b      	b.n	8014244 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80141ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ee:	889b      	ldrh	r3, [r3, #4]
 80141f0:	b29a      	uxth	r2, r3
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	889b      	ldrh	r3, [r3, #4]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d102      	bne.n	8014202 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014200:	e0b6      	b.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014204:	889b      	ldrh	r3, [r3, #4]
 8014206:	b29a      	uxth	r2, r3
 8014208:	693b      	ldr	r3, [r7, #16]
 801420a:	88db      	ldrh	r3, [r3, #6]
 801420c:	b29b      	uxth	r3, r3
 801420e:	429a      	cmp	r2, r3
 8014210:	d202      	bcs.n	8014218 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014212:	f04f 33ff 	mov.w	r3, #4294967295
 8014216:	e0ab      	b.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801421a:	2b00      	cmp	r3, #0
 801421c:	d009      	beq.n	8014232 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014220:	88db      	ldrh	r3, [r3, #6]
 8014222:	b29a      	uxth	r2, r3
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	889b      	ldrh	r3, [r3, #4]
 8014228:	b29b      	uxth	r3, r3
 801422a:	429a      	cmp	r2, r3
 801422c:	d001      	beq.n	8014232 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801422e:	2300      	movs	r3, #0
 8014230:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801423e:	2b00      	cmp	r3, #0
 8014240:	d193      	bne.n	801416a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014242:	e000      	b.n	8014246 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014244:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014248:	2b00      	cmp	r3, #0
 801424a:	d12d      	bne.n	80142a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801424c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801424e:	2b00      	cmp	r3, #0
 8014250:	d01c      	beq.n	801428c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014254:	88db      	ldrh	r3, [r3, #6]
 8014256:	b29a      	uxth	r2, r3
 8014258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801425a:	889b      	ldrh	r3, [r3, #4]
 801425c:	b29b      	uxth	r3, r3
 801425e:	429a      	cmp	r2, r3
 8014260:	d906      	bls.n	8014270 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014262:	4b45      	ldr	r3, [pc, #276]	@ (8014378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014264:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8014268:	4944      	ldr	r1, [pc, #272]	@ (801437c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801426a:	4845      	ldr	r0, [pc, #276]	@ (8014380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801426c:	f000 ff82 	bl	8015174 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014272:	68ba      	ldr	r2, [r7, #8]
 8014274:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014278:	88db      	ldrh	r3, [r3, #6]
 801427a:	b29a      	uxth	r2, r3
 801427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801427e:	889b      	ldrh	r3, [r3, #4]
 8014280:	b29b      	uxth	r3, r3
 8014282:	429a      	cmp	r2, r3
 8014284:	d010      	beq.n	80142a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014286:	2300      	movs	r3, #0
 8014288:	623b      	str	r3, [r7, #32]
 801428a:	e00d      	b.n	80142a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	685b      	ldr	r3, [r3, #4]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d006      	beq.n	80142a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014294:	4b38      	ldr	r3, [pc, #224]	@ (8014378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014296:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801429a:	493a      	ldr	r1, [pc, #232]	@ (8014384 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801429c:	4838      	ldr	r0, [pc, #224]	@ (8014380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801429e:	f000 ff69 	bl	8015174 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	68ba      	ldr	r2, [r7, #8]
 80142a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d105      	bne.n	80142ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	7f9b      	ldrb	r3, [r3, #30]
 80142b2:	f003 0301 	and.w	r3, r3, #1
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d059      	beq.n	801436e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80142ba:	6a3b      	ldr	r3, [r7, #32]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d04f      	beq.n	8014360 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d006      	beq.n	80142d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	889b      	ldrh	r3, [r3, #4]
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d002      	beq.n	80142dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80142d6:	2300      	movs	r3, #0
 80142d8:	623b      	str	r3, [r7, #32]
 80142da:	e041      	b.n	8014360 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80142dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142de:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80142e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80142e6:	e012      	b.n	801430e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80142e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80142ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142f0:	88db      	ldrh	r3, [r3, #6]
 80142f2:	b29a      	uxth	r2, r3
 80142f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f6:	889b      	ldrh	r3, [r3, #4]
 80142f8:	b29b      	uxth	r3, r3
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d002      	beq.n	8014304 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80142fe:	2300      	movs	r3, #0
 8014300:	623b      	str	r3, [r7, #32]
            break;
 8014302:	e007      	b.n	8014314 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014306:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014310:	2b00      	cmp	r3, #0
 8014312:	d1e9      	bne.n	80142e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014314:	6a3b      	ldr	r3, [r7, #32]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d022      	beq.n	8014360 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d106      	bne.n	8014330 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014322:	4b15      	ldr	r3, [pc, #84]	@ (8014378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014324:	f240 12df 	movw	r2, #479	@ 0x1df
 8014328:	4917      	ldr	r1, [pc, #92]	@ (8014388 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801432a:	4815      	ldr	r0, [pc, #84]	@ (8014380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801432c:	f000 ff22 	bl	8015174 <iprintf>
          LWIP_ASSERT("sanity check",
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	685b      	ldr	r3, [r3, #4]
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014338:	429a      	cmp	r2, r3
 801433a:	d106      	bne.n	801434a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801433c:	4b0e      	ldr	r3, [pc, #56]	@ (8014378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801433e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8014342:	4911      	ldr	r1, [pc, #68]	@ (8014388 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014344:	480e      	ldr	r0, [pc, #56]	@ (8014380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014346:	f000 ff15 	bl	8015174 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d006      	beq.n	8014360 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014352:	4b09      	ldr	r3, [pc, #36]	@ (8014378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014354:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8014358:	490c      	ldr	r1, [pc, #48]	@ (801438c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801435a:	4809      	ldr	r0, [pc, #36]	@ (8014380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801435c:	f000 ff0a 	bl	8015174 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014360:	6a3b      	ldr	r3, [r7, #32]
 8014362:	2b00      	cmp	r3, #0
 8014364:	bf14      	ite	ne
 8014366:	2301      	movne	r3, #1
 8014368:	2300      	moveq	r3, #0
 801436a:	b2db      	uxtb	r3, r3
 801436c:	e000      	b.n	8014370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801436e:	2300      	movs	r3, #0
}
 8014370:	4618      	mov	r0, r3
 8014372:	3730      	adds	r7, #48	@ 0x30
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}
 8014378:	080193b0 	.word	0x080193b0
 801437c:	08019494 	.word	0x08019494
 8014380:	080193f8 	.word	0x080193f8
 8014384:	080194b4 	.word	0x080194b4
 8014388:	080194ec 	.word	0x080194ec
 801438c:	080194fc 	.word	0x080194fc

08014390 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b08e      	sub	sp, #56	@ 0x38
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	f003 030f 	and.w	r3, r3, #15
 80143a6:	b2db      	uxtb	r3, r3
 80143a8:	009b      	lsls	r3, r3, #2
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	2b14      	cmp	r3, #20
 80143ae:	f040 8171 	bne.w	8014694 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80143b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b4:	88db      	ldrh	r3, [r3, #6]
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7f5 fdaf 	bl	8009f1c <lwip_htons>
 80143be:	4603      	mov	r3, r0
 80143c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80143c4:	b29b      	uxth	r3, r3
 80143c6:	00db      	lsls	r3, r3, #3
 80143c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80143ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143cc:	885b      	ldrh	r3, [r3, #2]
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7f5 fda3 	bl	8009f1c <lwip_htons>
 80143d6:	4603      	mov	r3, r0
 80143d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80143da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143dc:	781b      	ldrb	r3, [r3, #0]
 80143de:	f003 030f 	and.w	r3, r3, #15
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	009b      	lsls	r3, r3, #2
 80143e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80143ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80143f2:	429a      	cmp	r2, r3
 80143f4:	f0c0 8150 	bcc.w	8014698 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80143f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014400:	1ad3      	subs	r3, r2, r3
 8014402:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f7f7 fa05 	bl	800b814 <pbuf_clen>
 801440a:	4603      	mov	r3, r0
 801440c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801440e:	4b8c      	ldr	r3, [pc, #560]	@ (8014640 <ip4_reass+0x2b0>)
 8014410:	881b      	ldrh	r3, [r3, #0]
 8014412:	461a      	mov	r2, r3
 8014414:	8c3b      	ldrh	r3, [r7, #32]
 8014416:	4413      	add	r3, r2
 8014418:	2b0a      	cmp	r3, #10
 801441a:	dd10      	ble.n	801443e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801441c:	8c3b      	ldrh	r3, [r7, #32]
 801441e:	4619      	mov	r1, r3
 8014420:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014422:	f7ff fd81 	bl	8013f28 <ip_reass_remove_oldest_datagram>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	f000 8137 	beq.w	801469c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801442e:	4b84      	ldr	r3, [pc, #528]	@ (8014640 <ip4_reass+0x2b0>)
 8014430:	881b      	ldrh	r3, [r3, #0]
 8014432:	461a      	mov	r2, r3
 8014434:	8c3b      	ldrh	r3, [r7, #32]
 8014436:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014438:	2b0a      	cmp	r3, #10
 801443a:	f300 812f 	bgt.w	801469c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801443e:	4b81      	ldr	r3, [pc, #516]	@ (8014644 <ip4_reass+0x2b4>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	633b      	str	r3, [r7, #48]	@ 0x30
 8014444:	e015      	b.n	8014472 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014448:	695a      	ldr	r2, [r3, #20]
 801444a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801444c:	68db      	ldr	r3, [r3, #12]
 801444e:	429a      	cmp	r2, r3
 8014450:	d10c      	bne.n	801446c <ip4_reass+0xdc>
 8014452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014454:	699a      	ldr	r2, [r3, #24]
 8014456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014458:	691b      	ldr	r3, [r3, #16]
 801445a:	429a      	cmp	r2, r3
 801445c:	d106      	bne.n	801446c <ip4_reass+0xdc>
 801445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014460:	899a      	ldrh	r2, [r3, #12]
 8014462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014464:	889b      	ldrh	r3, [r3, #4]
 8014466:	b29b      	uxth	r3, r3
 8014468:	429a      	cmp	r2, r3
 801446a:	d006      	beq.n	801447a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	633b      	str	r3, [r7, #48]	@ 0x30
 8014472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014474:	2b00      	cmp	r3, #0
 8014476:	d1e6      	bne.n	8014446 <ip4_reass+0xb6>
 8014478:	e000      	b.n	801447c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801447a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801447e:	2b00      	cmp	r3, #0
 8014480:	d109      	bne.n	8014496 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014482:	8c3b      	ldrh	r3, [r7, #32]
 8014484:	4619      	mov	r1, r3
 8014486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014488:	f7ff fdb0 	bl	8013fec <ip_reass_enqueue_new_datagram>
 801448c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014490:	2b00      	cmp	r3, #0
 8014492:	d11c      	bne.n	80144ce <ip4_reass+0x13e>
      goto nullreturn;
 8014494:	e105      	b.n	80146a2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014498:	88db      	ldrh	r3, [r3, #6]
 801449a:	b29b      	uxth	r3, r3
 801449c:	4618      	mov	r0, r3
 801449e:	f7f5 fd3d 	bl	8009f1c <lwip_htons>
 80144a2:	4603      	mov	r3, r0
 80144a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d110      	bne.n	80144ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80144ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ae:	89db      	ldrh	r3, [r3, #14]
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7f5 fd33 	bl	8009f1c <lwip_htons>
 80144b6:	4603      	mov	r3, r0
 80144b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d006      	beq.n	80144ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80144c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144c2:	3308      	adds	r3, #8
 80144c4:	2214      	movs	r2, #20
 80144c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80144c8:	4618      	mov	r0, r3
 80144ca:	f000 ff96 	bl	80153fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80144ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144d0:	88db      	ldrh	r3, [r3, #6]
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	f003 0320 	and.w	r3, r3, #32
 80144d8:	2b00      	cmp	r3, #0
 80144da:	bf0c      	ite	eq
 80144dc:	2301      	moveq	r3, #1
 80144de:	2300      	movne	r3, #0
 80144e0:	b2db      	uxtb	r3, r3
 80144e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80144e4:	69fb      	ldr	r3, [r7, #28]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d00e      	beq.n	8014508 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80144ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80144ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144ee:	4413      	add	r3, r2
 80144f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80144f2:	8b7a      	ldrh	r2, [r7, #26]
 80144f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80144f6:	429a      	cmp	r2, r3
 80144f8:	f0c0 80a0 	bcc.w	801463c <ip4_reass+0x2ac>
 80144fc:	8b7b      	ldrh	r3, [r7, #26]
 80144fe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014502:	4293      	cmp	r3, r2
 8014504:	f200 809a 	bhi.w	801463c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014508:	69fa      	ldr	r2, [r7, #28]
 801450a:	6879      	ldr	r1, [r7, #4]
 801450c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801450e:	f7ff fdd5 	bl	80140bc <ip_reass_chain_frag_into_datagram_and_validate>
 8014512:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801451a:	f000 809b 	beq.w	8014654 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801451e:	4b48      	ldr	r3, [pc, #288]	@ (8014640 <ip4_reass+0x2b0>)
 8014520:	881a      	ldrh	r2, [r3, #0]
 8014522:	8c3b      	ldrh	r3, [r7, #32]
 8014524:	4413      	add	r3, r2
 8014526:	b29a      	uxth	r2, r3
 8014528:	4b45      	ldr	r3, [pc, #276]	@ (8014640 <ip4_reass+0x2b0>)
 801452a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d00d      	beq.n	801454e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014532:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014534:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014536:	4413      	add	r3, r2
 8014538:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801453c:	8a7a      	ldrh	r2, [r7, #18]
 801453e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014542:	7f9b      	ldrb	r3, [r3, #30]
 8014544:	f043 0301 	orr.w	r3, r3, #1
 8014548:	b2da      	uxtb	r2, r3
 801454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801454c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801454e:	697b      	ldr	r3, [r7, #20]
 8014550:	2b01      	cmp	r3, #1
 8014552:	d171      	bne.n	8014638 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014556:	8b9b      	ldrh	r3, [r3, #28]
 8014558:	3314      	adds	r3, #20
 801455a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801455e:	685b      	ldr	r3, [r3, #4]
 8014560:	685b      	ldr	r3, [r3, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014570:	3308      	adds	r3, #8
 8014572:	2214      	movs	r2, #20
 8014574:	4619      	mov	r1, r3
 8014576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014578:	f000 ff3f 	bl	80153fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801457c:	8a3b      	ldrh	r3, [r7, #16]
 801457e:	4618      	mov	r0, r3
 8014580:	f7f5 fccc 	bl	8009f1c <lwip_htons>
 8014584:	4603      	mov	r3, r0
 8014586:	461a      	mov	r2, r3
 8014588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801458a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801458e:	2200      	movs	r2, #0
 8014590:	719a      	strb	r2, [r3, #6]
 8014592:	2200      	movs	r2, #0
 8014594:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014598:	2200      	movs	r2, #0
 801459a:	729a      	strb	r2, [r3, #10]
 801459c:	2200      	movs	r2, #0
 801459e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80145a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145a2:	685b      	ldr	r3, [r3, #4]
 80145a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80145a6:	e00d      	b.n	80145c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80145a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145aa:	685b      	ldr	r3, [r3, #4]
 80145ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80145ae:	2114      	movs	r1, #20
 80145b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80145b2:	f7f7 f81b 	bl	800b5ec <pbuf_remove_header>
      pbuf_cat(p, r);
 80145b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7f7 f96b 	bl	800b894 <pbuf_cat>
      r = iprh->next_pbuf;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80145c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d1ee      	bne.n	80145a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80145ca:	4b1e      	ldr	r3, [pc, #120]	@ (8014644 <ip4_reass+0x2b4>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d102      	bne.n	80145da <ip4_reass+0x24a>
      ipr_prev = NULL;
 80145d4:	2300      	movs	r3, #0
 80145d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145d8:	e010      	b.n	80145fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80145da:	4b1a      	ldr	r3, [pc, #104]	@ (8014644 <ip4_reass+0x2b4>)
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145e0:	e007      	b.n	80145f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80145e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d006      	beq.n	80145fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80145ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d1f4      	bne.n	80145e2 <ip4_reass+0x252>
 80145f8:	e000      	b.n	80145fc <ip4_reass+0x26c>
          break;
 80145fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80145fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80145fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014600:	f7ff fd2e 	bl	8014060 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f7f7 f905 	bl	800b814 <pbuf_clen>
 801460a:	4603      	mov	r3, r0
 801460c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801460e:	4b0c      	ldr	r3, [pc, #48]	@ (8014640 <ip4_reass+0x2b0>)
 8014610:	881b      	ldrh	r3, [r3, #0]
 8014612:	8c3a      	ldrh	r2, [r7, #32]
 8014614:	429a      	cmp	r2, r3
 8014616:	d906      	bls.n	8014626 <ip4_reass+0x296>
 8014618:	4b0b      	ldr	r3, [pc, #44]	@ (8014648 <ip4_reass+0x2b8>)
 801461a:	f240 229b 	movw	r2, #667	@ 0x29b
 801461e:	490b      	ldr	r1, [pc, #44]	@ (801464c <ip4_reass+0x2bc>)
 8014620:	480b      	ldr	r0, [pc, #44]	@ (8014650 <ip4_reass+0x2c0>)
 8014622:	f000 fda7 	bl	8015174 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014626:	4b06      	ldr	r3, [pc, #24]	@ (8014640 <ip4_reass+0x2b0>)
 8014628:	881a      	ldrh	r2, [r3, #0]
 801462a:	8c3b      	ldrh	r3, [r7, #32]
 801462c:	1ad3      	subs	r3, r2, r3
 801462e:	b29a      	uxth	r2, r3
 8014630:	4b03      	ldr	r3, [pc, #12]	@ (8014640 <ip4_reass+0x2b0>)
 8014632:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	e038      	b.n	80146aa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014638:	2300      	movs	r3, #0
 801463a:	e036      	b.n	80146aa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801463c:	bf00      	nop
 801463e:	e00a      	b.n	8014656 <ip4_reass+0x2c6>
 8014640:	2000bfbc 	.word	0x2000bfbc
 8014644:	2000bfb8 	.word	0x2000bfb8
 8014648:	080193b0 	.word	0x080193b0
 801464c:	08019520 	.word	0x08019520
 8014650:	080193f8 	.word	0x080193f8
    goto nullreturn_ipr;
 8014654:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014658:	2b00      	cmp	r3, #0
 801465a:	d106      	bne.n	801466a <ip4_reass+0x2da>
 801465c:	4b15      	ldr	r3, [pc, #84]	@ (80146b4 <ip4_reass+0x324>)
 801465e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8014662:	4915      	ldr	r1, [pc, #84]	@ (80146b8 <ip4_reass+0x328>)
 8014664:	4815      	ldr	r0, [pc, #84]	@ (80146bc <ip4_reass+0x32c>)
 8014666:	f000 fd85 	bl	8015174 <iprintf>
  if (ipr->p == NULL) {
 801466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d116      	bne.n	80146a0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014672:	4b13      	ldr	r3, [pc, #76]	@ (80146c0 <ip4_reass+0x330>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014678:	429a      	cmp	r2, r3
 801467a:	d006      	beq.n	801468a <ip4_reass+0x2fa>
 801467c:	4b0d      	ldr	r3, [pc, #52]	@ (80146b4 <ip4_reass+0x324>)
 801467e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014682:	4910      	ldr	r1, [pc, #64]	@ (80146c4 <ip4_reass+0x334>)
 8014684:	480d      	ldr	r0, [pc, #52]	@ (80146bc <ip4_reass+0x32c>)
 8014686:	f000 fd75 	bl	8015174 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801468a:	2100      	movs	r1, #0
 801468c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801468e:	f7ff fce7 	bl	8014060 <ip_reass_dequeue_datagram>
 8014692:	e006      	b.n	80146a2 <ip4_reass+0x312>
    goto nullreturn;
 8014694:	bf00      	nop
 8014696:	e004      	b.n	80146a2 <ip4_reass+0x312>
    goto nullreturn;
 8014698:	bf00      	nop
 801469a:	e002      	b.n	80146a2 <ip4_reass+0x312>
      goto nullreturn;
 801469c:	bf00      	nop
 801469e:	e000      	b.n	80146a2 <ip4_reass+0x312>
  }

nullreturn:
 80146a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f7f7 f828 	bl	800b6f8 <pbuf_free>
  return NULL;
 80146a8:	2300      	movs	r3, #0
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3738      	adds	r7, #56	@ 0x38
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	080193b0 	.word	0x080193b0
 80146b8:	0801953c 	.word	0x0801953c
 80146bc:	080193f8 	.word	0x080193f8
 80146c0:	2000bfb8 	.word	0x2000bfb8
 80146c4:	08019548 	.word	0x08019548

080146c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80146cc:	2005      	movs	r0, #5
 80146ce:	f7f6 f8f9 	bl	800a8c4 <memp_malloc>
 80146d2:	4603      	mov	r3, r0
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d106      	bne.n	80146f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80146e6:	4b07      	ldr	r3, [pc, #28]	@ (8014704 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80146e8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80146ec:	4906      	ldr	r1, [pc, #24]	@ (8014708 <ip_frag_free_pbuf_custom_ref+0x30>)
 80146ee:	4807      	ldr	r0, [pc, #28]	@ (801470c <ip_frag_free_pbuf_custom_ref+0x34>)
 80146f0:	f000 fd40 	bl	8015174 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80146f4:	6879      	ldr	r1, [r7, #4]
 80146f6:	2005      	movs	r0, #5
 80146f8:	f7f6 f95a 	bl	800a9b0 <memp_free>
}
 80146fc:	bf00      	nop
 80146fe:	3708      	adds	r7, #8
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}
 8014704:	080193b0 	.word	0x080193b0
 8014708:	08019568 	.word	0x08019568
 801470c:	080193f8 	.word	0x080193f8

08014710 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d106      	bne.n	8014730 <ipfrag_free_pbuf_custom+0x20>
 8014722:	4b11      	ldr	r3, [pc, #68]	@ (8014768 <ipfrag_free_pbuf_custom+0x58>)
 8014724:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014728:	4910      	ldr	r1, [pc, #64]	@ (801476c <ipfrag_free_pbuf_custom+0x5c>)
 801472a:	4811      	ldr	r0, [pc, #68]	@ (8014770 <ipfrag_free_pbuf_custom+0x60>)
 801472c:	f000 fd22 	bl	8015174 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014730:	68fa      	ldr	r2, [r7, #12]
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	429a      	cmp	r2, r3
 8014736:	d006      	beq.n	8014746 <ipfrag_free_pbuf_custom+0x36>
 8014738:	4b0b      	ldr	r3, [pc, #44]	@ (8014768 <ipfrag_free_pbuf_custom+0x58>)
 801473a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801473e:	490d      	ldr	r1, [pc, #52]	@ (8014774 <ipfrag_free_pbuf_custom+0x64>)
 8014740:	480b      	ldr	r0, [pc, #44]	@ (8014770 <ipfrag_free_pbuf_custom+0x60>)
 8014742:	f000 fd17 	bl	8015174 <iprintf>
  if (pcr->original != NULL) {
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	695b      	ldr	r3, [r3, #20]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d004      	beq.n	8014758 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	695b      	ldr	r3, [r3, #20]
 8014752:	4618      	mov	r0, r3
 8014754:	f7f6 ffd0 	bl	800b6f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f7ff ffbd 	bl	80146d8 <ip_frag_free_pbuf_custom_ref>
}
 801475e:	bf00      	nop
 8014760:	3710      	adds	r7, #16
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	080193b0 	.word	0x080193b0
 801476c:	08019574 	.word	0x08019574
 8014770:	080193f8 	.word	0x080193f8
 8014774:	08019580 	.word	0x08019580

08014778 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b094      	sub	sp, #80	@ 0x50
 801477c:	af02      	add	r7, sp, #8
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014784:	2300      	movs	r3, #0
 8014786:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801478e:	3b14      	subs	r3, #20
 8014790:	2b00      	cmp	r3, #0
 8014792:	da00      	bge.n	8014796 <ip4_frag+0x1e>
 8014794:	3307      	adds	r3, #7
 8014796:	10db      	asrs	r3, r3, #3
 8014798:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801479a:	2314      	movs	r3, #20
 801479c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	685b      	ldr	r3, [r3, #4]
 80147a2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80147a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80147a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	f003 030f 	and.w	r3, r3, #15
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	009b      	lsls	r3, r3, #2
 80147b4:	b2db      	uxtb	r3, r3
 80147b6:	2b14      	cmp	r3, #20
 80147b8:	d002      	beq.n	80147c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80147ba:	f06f 0305 	mvn.w	r3, #5
 80147be:	e110      	b.n	80149e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	895b      	ldrh	r3, [r3, #10]
 80147c4:	2b13      	cmp	r3, #19
 80147c6:	d809      	bhi.n	80147dc <ip4_frag+0x64>
 80147c8:	4b88      	ldr	r3, [pc, #544]	@ (80149ec <ip4_frag+0x274>)
 80147ca:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80147ce:	4988      	ldr	r1, [pc, #544]	@ (80149f0 <ip4_frag+0x278>)
 80147d0:	4888      	ldr	r0, [pc, #544]	@ (80149f4 <ip4_frag+0x27c>)
 80147d2:	f000 fccf 	bl	8015174 <iprintf>
 80147d6:	f06f 0305 	mvn.w	r3, #5
 80147da:	e102      	b.n	80149e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80147dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147de:	88db      	ldrh	r3, [r3, #6]
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7f5 fb9a 	bl	8009f1c <lwip_htons>
 80147e8:	4603      	mov	r3, r0
 80147ea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80147ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80147ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80147f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80147f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80147f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80147fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	891b      	ldrh	r3, [r3, #8]
 8014802:	3b14      	subs	r3, #20
 8014804:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014808:	e0e1      	b.n	80149ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801480a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	b29b      	uxth	r3, r3
 8014810:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014814:	4293      	cmp	r3, r2
 8014816:	bf28      	it	cs
 8014818:	4613      	movcs	r3, r2
 801481a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801481c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014820:	2114      	movs	r1, #20
 8014822:	200e      	movs	r0, #14
 8014824:	f7f6 fc84 	bl	800b130 <pbuf_alloc>
 8014828:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801482c:	2b00      	cmp	r3, #0
 801482e:	f000 80d5 	beq.w	80149dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014834:	895b      	ldrh	r3, [r3, #10]
 8014836:	2b13      	cmp	r3, #19
 8014838:	d806      	bhi.n	8014848 <ip4_frag+0xd0>
 801483a:	4b6c      	ldr	r3, [pc, #432]	@ (80149ec <ip4_frag+0x274>)
 801483c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014840:	496d      	ldr	r1, [pc, #436]	@ (80149f8 <ip4_frag+0x280>)
 8014842:	486c      	ldr	r0, [pc, #432]	@ (80149f4 <ip4_frag+0x27c>)
 8014844:	f000 fc96 	bl	8015174 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	2214      	movs	r2, #20
 801484e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014850:	4618      	mov	r0, r3
 8014852:	f000 fdd2 	bl	80153fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801485c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801485e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014862:	e064      	b.n	801492e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	895a      	ldrh	r2, [r3, #10]
 8014868:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801486a:	1ad3      	subs	r3, r2, r3
 801486c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	895b      	ldrh	r3, [r3, #10]
 8014872:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014874:	429a      	cmp	r2, r3
 8014876:	d906      	bls.n	8014886 <ip4_frag+0x10e>
 8014878:	4b5c      	ldr	r3, [pc, #368]	@ (80149ec <ip4_frag+0x274>)
 801487a:	f240 322d 	movw	r2, #813	@ 0x32d
 801487e:	495f      	ldr	r1, [pc, #380]	@ (80149fc <ip4_frag+0x284>)
 8014880:	485c      	ldr	r0, [pc, #368]	@ (80149f4 <ip4_frag+0x27c>)
 8014882:	f000 fc77 	bl	8015174 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014886:	8bfa      	ldrh	r2, [r7, #30]
 8014888:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801488c:	4293      	cmp	r3, r2
 801488e:	bf28      	it	cs
 8014890:	4613      	movcs	r3, r2
 8014892:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801489a:	2b00      	cmp	r3, #0
 801489c:	d105      	bne.n	80148aa <ip4_frag+0x132>
        poff = 0;
 801489e:	2300      	movs	r3, #0
 80148a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	60fb      	str	r3, [r7, #12]
        continue;
 80148a8:	e041      	b.n	801492e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80148aa:	f7ff ff0d 	bl	80146c8 <ip_frag_alloc_pbuf_custom_ref>
 80148ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80148b0:	69bb      	ldr	r3, [r7, #24]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d103      	bne.n	80148be <ip4_frag+0x146>
        pbuf_free(rambuf);
 80148b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80148b8:	f7f6 ff1e 	bl	800b6f8 <pbuf_free>
        goto memerr;
 80148bc:	e08f      	b.n	80149de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80148be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80148c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80148c6:	4413      	add	r3, r2
 80148c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80148cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80148d0:	9201      	str	r2, [sp, #4]
 80148d2:	9300      	str	r3, [sp, #0]
 80148d4:	4603      	mov	r3, r0
 80148d6:	2241      	movs	r2, #65	@ 0x41
 80148d8:	2000      	movs	r0, #0
 80148da:	f7f6 fd53 	bl	800b384 <pbuf_alloced_custom>
 80148de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d106      	bne.n	80148f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80148e6:	69b8      	ldr	r0, [r7, #24]
 80148e8:	f7ff fef6 	bl	80146d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80148ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80148ee:	f7f6 ff03 	bl	800b6f8 <pbuf_free>
        goto memerr;
 80148f2:	e074      	b.n	80149de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80148f4:	68f8      	ldr	r0, [r7, #12]
 80148f6:	f7f6 ffa5 	bl	800b844 <pbuf_ref>
      pcr->original = p;
 80148fa:	69bb      	ldr	r3, [r7, #24]
 80148fc:	68fa      	ldr	r2, [r7, #12]
 80148fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014900:	69bb      	ldr	r3, [r7, #24]
 8014902:	4a3f      	ldr	r2, [pc, #252]	@ (8014a00 <ip4_frag+0x288>)
 8014904:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014906:	6979      	ldr	r1, [r7, #20]
 8014908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801490a:	f7f6 ffc3 	bl	800b894 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801490e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014912:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014916:	1ad3      	subs	r3, r2, r3
 8014918:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801491c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014920:	2b00      	cmp	r3, #0
 8014922:	d004      	beq.n	801492e <ip4_frag+0x1b6>
        poff = 0;
 8014924:	2300      	movs	r3, #0
 8014926:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801492e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014932:	2b00      	cmp	r3, #0
 8014934:	d196      	bne.n	8014864 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014936:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014938:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801493c:	4413      	add	r3, r2
 801493e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014944:	f1a3 0213 	sub.w	r2, r3, #19
 8014948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801494c:	429a      	cmp	r2, r3
 801494e:	bfcc      	ite	gt
 8014950:	2301      	movgt	r3, #1
 8014952:	2300      	movle	r3, #0
 8014954:	b2db      	uxtb	r3, r3
 8014956:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801495c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014960:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014962:	6a3b      	ldr	r3, [r7, #32]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d002      	beq.n	801496e <ip4_frag+0x1f6>
 8014968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801496a:	2b00      	cmp	r3, #0
 801496c:	d003      	beq.n	8014976 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801496e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014970:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014974:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014976:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014978:	4618      	mov	r0, r3
 801497a:	f7f5 facf 	bl	8009f1c <lwip_htons>
 801497e:	4603      	mov	r3, r0
 8014980:	461a      	mov	r2, r3
 8014982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014984:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014986:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014988:	3314      	adds	r3, #20
 801498a:	b29b      	uxth	r3, r3
 801498c:	4618      	mov	r0, r3
 801498e:	f7f5 fac5 	bl	8009f1c <lwip_htons>
 8014992:	4603      	mov	r3, r0
 8014994:	461a      	mov	r2, r3
 8014996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014998:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801499c:	2200      	movs	r2, #0
 801499e:	729a      	strb	r2, [r3, #10]
 80149a0:	2200      	movs	r2, #0
 80149a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	695b      	ldr	r3, [r3, #20]
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80149ac:	68b8      	ldr	r0, [r7, #8]
 80149ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80149b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149b2:	f7f6 fea1 	bl	800b6f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80149b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80149ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80149bc:	1ad3      	subs	r3, r2, r3
 80149be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80149c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80149c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80149c8:	4413      	add	r3, r2
 80149ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80149ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	f47f af19 	bne.w	801480a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80149d8:	2300      	movs	r3, #0
 80149da:	e002      	b.n	80149e2 <ip4_frag+0x26a>
      goto memerr;
 80149dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80149de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3748      	adds	r7, #72	@ 0x48
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	080193b0 	.word	0x080193b0
 80149f0:	0801958c 	.word	0x0801958c
 80149f4:	080193f8 	.word	0x080193f8
 80149f8:	080195a8 	.word	0x080195a8
 80149fc:	080195c8 	.word	0x080195c8
 8014a00:	08014711 	.word	0x08014711

08014a04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b086      	sub	sp, #24
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014a0e:	230e      	movs	r3, #14
 8014a10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	895b      	ldrh	r3, [r3, #10]
 8014a16:	2b0e      	cmp	r3, #14
 8014a18:	d96e      	bls.n	8014af8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	7bdb      	ldrb	r3, [r3, #15]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d106      	bne.n	8014a30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014a28:	3301      	adds	r3, #1
 8014a2a:	b2da      	uxtb	r2, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	685b      	ldr	r3, [r3, #4]
 8014a34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014a36:	693b      	ldr	r3, [r7, #16]
 8014a38:	7b1a      	ldrb	r2, [r3, #12]
 8014a3a:	7b5b      	ldrb	r3, [r3, #13]
 8014a3c:	021b      	lsls	r3, r3, #8
 8014a3e:	4313      	orrs	r3, r2
 8014a40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	f003 0301 	and.w	r3, r3, #1
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d023      	beq.n	8014a96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d10f      	bne.n	8014a76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	785b      	ldrb	r3, [r3, #1]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d11b      	bne.n	8014a96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014a5e:	693b      	ldr	r3, [r7, #16]
 8014a60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014a62:	2b5e      	cmp	r3, #94	@ 0x5e
 8014a64:	d117      	bne.n	8014a96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	7b5b      	ldrb	r3, [r3, #13]
 8014a6a:	f043 0310 	orr.w	r3, r3, #16
 8014a6e:	b2da      	uxtb	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	735a      	strb	r2, [r3, #13]
 8014a74:	e00f      	b.n	8014a96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014a76:	693b      	ldr	r3, [r7, #16]
 8014a78:	2206      	movs	r2, #6
 8014a7a:	4928      	ldr	r1, [pc, #160]	@ (8014b1c <ethernet_input+0x118>)
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f000 fbce 	bl	801521e <memcmp>
 8014a82:	4603      	mov	r3, r0
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d106      	bne.n	8014a96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	7b5b      	ldrb	r3, [r3, #13]
 8014a8c:	f043 0308 	orr.w	r3, r3, #8
 8014a90:	b2da      	uxtb	r2, r3
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014a96:	89fb      	ldrh	r3, [r7, #14]
 8014a98:	2b08      	cmp	r3, #8
 8014a9a:	d003      	beq.n	8014aa4 <ethernet_input+0xa0>
 8014a9c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014aa0:	d014      	beq.n	8014acc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014aa2:	e032      	b.n	8014b0a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014aaa:	f003 0308 	and.w	r3, r3, #8
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d024      	beq.n	8014afc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014ab2:	8afb      	ldrh	r3, [r7, #22]
 8014ab4:	4619      	mov	r1, r3
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f7f6 fd98 	bl	800b5ec <pbuf_remove_header>
 8014abc:	4603      	mov	r3, r0
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d11e      	bne.n	8014b00 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014ac2:	6839      	ldr	r1, [r7, #0]
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f7fe ff21 	bl	801390c <ip4_input>
      break;
 8014aca:	e013      	b.n	8014af4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ad2:	f003 0308 	and.w	r3, r3, #8
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d014      	beq.n	8014b04 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014ada:	8afb      	ldrh	r3, [r7, #22]
 8014adc:	4619      	mov	r1, r3
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f7f6 fd84 	bl	800b5ec <pbuf_remove_header>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d10e      	bne.n	8014b08 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014aea:	6839      	ldr	r1, [r7, #0]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f7fe f8c1 	bl	8012c74 <etharp_input>
      break;
 8014af2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014af4:	2300      	movs	r3, #0
 8014af6:	e00c      	b.n	8014b12 <ethernet_input+0x10e>
    goto free_and_return;
 8014af8:	bf00      	nop
 8014afa:	e006      	b.n	8014b0a <ethernet_input+0x106>
        goto free_and_return;
 8014afc:	bf00      	nop
 8014afe:	e004      	b.n	8014b0a <ethernet_input+0x106>
        goto free_and_return;
 8014b00:	bf00      	nop
 8014b02:	e002      	b.n	8014b0a <ethernet_input+0x106>
        goto free_and_return;
 8014b04:	bf00      	nop
 8014b06:	e000      	b.n	8014b0a <ethernet_input+0x106>
        goto free_and_return;
 8014b08:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f7f6 fdf4 	bl	800b6f8 <pbuf_free>
  return ERR_OK;
 8014b10:	2300      	movs	r3, #0
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3718      	adds	r7, #24
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	0801a57c 	.word	0x0801a57c

08014b20 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b086      	sub	sp, #24
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	60f8      	str	r0, [r7, #12]
 8014b28:	60b9      	str	r1, [r7, #8]
 8014b2a:	607a      	str	r2, [r7, #4]
 8014b2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014b2e:	8c3b      	ldrh	r3, [r7, #32]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7f5 f9f3 	bl	8009f1c <lwip_htons>
 8014b36:	4603      	mov	r3, r0
 8014b38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014b3a:	210e      	movs	r1, #14
 8014b3c:	68b8      	ldr	r0, [r7, #8]
 8014b3e:	f7f6 fd45 	bl	800b5cc <pbuf_add_header>
 8014b42:	4603      	mov	r3, r0
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d125      	bne.n	8014b94 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	685b      	ldr	r3, [r3, #4]
 8014b4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	8afa      	ldrh	r2, [r7, #22]
 8014b52:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014b54:	693b      	ldr	r3, [r7, #16]
 8014b56:	2206      	movs	r2, #6
 8014b58:	6839      	ldr	r1, [r7, #0]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f000 fc4d 	bl	80153fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014b60:	693b      	ldr	r3, [r7, #16]
 8014b62:	3306      	adds	r3, #6
 8014b64:	2206      	movs	r2, #6
 8014b66:	6879      	ldr	r1, [r7, #4]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f000 fc46 	bl	80153fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014b74:	2b06      	cmp	r3, #6
 8014b76:	d006      	beq.n	8014b86 <ethernet_output+0x66>
 8014b78:	4b0a      	ldr	r3, [pc, #40]	@ (8014ba4 <ethernet_output+0x84>)
 8014b7a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014b7e:	490a      	ldr	r1, [pc, #40]	@ (8014ba8 <ethernet_output+0x88>)
 8014b80:	480a      	ldr	r0, [pc, #40]	@ (8014bac <ethernet_output+0x8c>)
 8014b82:	f000 faf7 	bl	8015174 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	699b      	ldr	r3, [r3, #24]
 8014b8a:	68b9      	ldr	r1, [r7, #8]
 8014b8c:	68f8      	ldr	r0, [r7, #12]
 8014b8e:	4798      	blx	r3
 8014b90:	4603      	mov	r3, r0
 8014b92:	e002      	b.n	8014b9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014b94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014b96:	f06f 0301 	mvn.w	r3, #1
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3718      	adds	r7, #24
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	080195d8 	.word	0x080195d8
 8014ba8:	08019610 	.word	0x08019610
 8014bac:	08019644 	.word	0x08019644

08014bb0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b086      	sub	sp, #24
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	60bb      	str	r3, [r7, #8]
 8014bbe:	2304      	movs	r3, #4
 8014bc0:	60fb      	str	r3, [r7, #12]
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	613b      	str	r3, [r7, #16]
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014bca:	f107 0308 	add.w	r3, r7, #8
 8014bce:	2100      	movs	r1, #0
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7ef ff52 	bl	8004a7a <osMessageCreate>
 8014bd6:	4602      	mov	r2, r0
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d102      	bne.n	8014bea <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014be4:	f04f 33ff 	mov.w	r3, #4294967295
 8014be8:	e000      	b.n	8014bec <sys_mbox_new+0x3c>

  return ERR_OK;
 8014bea:	2300      	movs	r3, #0
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3718      	adds	r7, #24
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd80      	pop	{r7, pc}

08014bf4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7f0 f817 	bl	8004c34 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7f0 f828 	bl	8004c60 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014c10:	bf00      	nop
 8014c12:	3708      	adds	r7, #8
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	6839      	ldr	r1, [r7, #0]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7ef ff4e 	bl	8004acc <osMessagePut>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d102      	bne.n	8014c3c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014c36:	2300      	movs	r3, #0
 8014c38:	73fb      	strb	r3, [r7, #15]
 8014c3a:	e001      	b.n	8014c40 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014c3c:	23ff      	movs	r3, #255	@ 0xff
 8014c3e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3710      	adds	r7, #16
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}

08014c4c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b08c      	sub	sp, #48	@ 0x30
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	61f8      	str	r0, [r7, #28]
 8014c54:	61b9      	str	r1, [r7, #24]
 8014c56:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014c58:	f7ef fd2d 	bl	80046b6 <osKernelSysTick>
 8014c5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d017      	beq.n	8014c94 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	6819      	ldr	r1, [r3, #0]
 8014c68:	f107 0320 	add.w	r3, r7, #32
 8014c6c:	697a      	ldr	r2, [r7, #20]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7ef ff6c 	bl	8004b4c <osMessageGet>

    if(event.status == osEventMessage)
 8014c74:	6a3b      	ldr	r3, [r7, #32]
 8014c76:	2b10      	cmp	r3, #16
 8014c78:	d109      	bne.n	8014c8e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	69bb      	ldr	r3, [r7, #24]
 8014c80:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014c82:	f7ef fd18 	bl	80046b6 <osKernelSysTick>
 8014c86:	4602      	mov	r2, r0
 8014c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c8a:	1ad3      	subs	r3, r2, r3
 8014c8c:	e019      	b.n	8014cc2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c92:	e016      	b.n	8014cc2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	6819      	ldr	r1, [r3, #0]
 8014c98:	463b      	mov	r3, r7
 8014c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f7ef ff54 	bl	8004b4c <osMessageGet>
 8014ca4:	f107 0320 	add.w	r3, r7, #32
 8014ca8:	463a      	mov	r2, r7
 8014caa:	ca07      	ldmia	r2, {r0, r1, r2}
 8014cac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	69bb      	ldr	r3, [r7, #24]
 8014cb6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014cb8:	f7ef fcfd 	bl	80046b6 <osKernelSysTick>
 8014cbc:	4602      	mov	r2, r0
 8014cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	3730      	adds	r7, #48	@ 0x30
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}

08014cca <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014cca:	b580      	push	{r7, lr}
 8014ccc:	b086      	sub	sp, #24
 8014cce:	af00      	add	r7, sp, #0
 8014cd0:	6078      	str	r0, [r7, #4]
 8014cd2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	6819      	ldr	r1, [r3, #0]
 8014cd8:	f107 030c 	add.w	r3, r7, #12
 8014cdc:	2200      	movs	r2, #0
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7ef ff34 	bl	8004b4c <osMessageGet>

  if(event.status == osEventMessage)
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	2b10      	cmp	r3, #16
 8014ce8:	d105      	bne.n	8014cf6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	461a      	mov	r2, r3
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	e001      	b.n	8014cfa <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014cf6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3718      	adds	r7, #24
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}

08014d02 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014d02:	b480      	push	{r7}
 8014d04:	b083      	sub	sp, #12
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d101      	bne.n	8014d16 <sys_mbox_valid+0x14>
    return 0;
 8014d12:	2300      	movs	r3, #0
 8014d14:	e000      	b.n	8014d18 <sys_mbox_valid+0x16>
  else
    return 1;
 8014d16:	2301      	movs	r3, #1
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	601a      	str	r2, [r3, #0]
}
 8014d32:	bf00      	nop
 8014d34:	370c      	adds	r7, #12
 8014d36:	46bd      	mov	sp, r7
 8014d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3c:	4770      	bx	lr

08014d3e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	b084      	sub	sp, #16
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	6078      	str	r0, [r7, #4]
 8014d46:	460b      	mov	r3, r1
 8014d48:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	60bb      	str	r3, [r7, #8]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8014d52:	f107 0308 	add.w	r3, r7, #8
 8014d56:	2101      	movs	r1, #1
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7ef fdc5 	bl	80048e8 <osSemaphoreCreate>
 8014d5e:	4602      	mov	r2, r0
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d102      	bne.n	8014d72 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d70:	e009      	b.n	8014d86 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8014d72:	78fb      	ldrb	r3, [r7, #3]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d105      	bne.n	8014d84 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	2100      	movs	r1, #0
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7ef fde4 	bl	800494c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014d84:	2300      	movs	r3, #0
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3710      	adds	r7, #16
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}

08014d8e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014d8e:	b580      	push	{r7, lr}
 8014d90:	b084      	sub	sp, #16
 8014d92:	af00      	add	r7, sp, #0
 8014d94:	6078      	str	r0, [r7, #4]
 8014d96:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014d98:	f7ef fc8d 	bl	80046b6 <osKernelSysTick>
 8014d9c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d011      	beq.n	8014dc8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	6839      	ldr	r1, [r7, #0]
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7ef fdce 	bl	800494c <osSemaphoreWait>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d105      	bne.n	8014dc2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8014db6:	f7ef fc7e 	bl	80046b6 <osKernelSysTick>
 8014dba:	4602      	mov	r2, r0
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	1ad3      	subs	r3, r2, r3
 8014dc0:	e012      	b.n	8014de8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8014dc6:	e00f      	b.n	8014de8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014dc8:	bf00      	nop
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	f04f 31ff 	mov.w	r1, #4294967295
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7ef fdba 	bl	800494c <osSemaphoreWait>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d1f5      	bne.n	8014dca <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8014dde:	f7ef fc6a 	bl	80046b6 <osKernelSysTick>
 8014de2:	4602      	mov	r2, r0
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3710      	adds	r7, #16
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7ef fdf3 	bl	80049e8 <osSemaphoreRelease>
}
 8014e02:	bf00      	nop
 8014e04:	3708      	adds	r7, #8
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b082      	sub	sp, #8
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7ef fe1c 	bl	8004a54 <osSemaphoreDelete>
}
 8014e1c:	bf00      	nop
 8014e1e:	3708      	adds	r7, #8
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8014e24:	b480      	push	{r7}
 8014e26:	b083      	sub	sp, #12
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d101      	bne.n	8014e38 <sys_sem_valid+0x14>
    return 0;
 8014e34:	2300      	movs	r3, #0
 8014e36:	e000      	b.n	8014e3a <sys_sem_valid+0x16>
  else
    return 1;
 8014e38:	2301      	movs	r3, #1
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	370c      	adds	r7, #12
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e44:	4770      	bx	lr

08014e46 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8014e46:	b480      	push	{r7}
 8014e48:	b083      	sub	sp, #12
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2200      	movs	r2, #0
 8014e52:	601a      	str	r2, [r3, #0]
}
 8014e54:	bf00      	nop
 8014e56:	370c      	adds	r7, #12
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5e:	4770      	bx	lr

08014e60 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014e64:	4803      	ldr	r0, [pc, #12]	@ (8014e74 <sys_init+0x14>)
 8014e66:	f7ef fca2 	bl	80047ae <osMutexCreate>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	4a02      	ldr	r2, [pc, #8]	@ (8014e78 <sys_init+0x18>)
 8014e6e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014e70:	bf00      	nop
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	0801a58c 	.word	0x0801a58c
 8014e78:	2000bfc0 	.word	0x2000bfc0

08014e7c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014e84:	2300      	movs	r3, #0
 8014e86:	60bb      	str	r3, [r7, #8]
 8014e88:	2300      	movs	r3, #0
 8014e8a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014e8c:	f107 0308 	add.w	r3, r7, #8
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7ef fc8c 	bl	80047ae <osMutexCreate>
 8014e96:	4602      	mov	r2, r0
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d102      	bne.n	8014eaa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ea8:	e000      	b.n	8014eac <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014eaa:	2300      	movs	r3, #0
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3710      	adds	r7, #16
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7ef fc8b 	bl	80047e0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014eca:	bf00      	nop
 8014ecc:	3708      	adds	r7, #8
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b082      	sub	sp, #8
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7ef fccc 	bl	800487c <osMutexRelease>
}
 8014ee4:	bf00      	nop
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b08c      	sub	sp, #48	@ 0x30
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	607a      	str	r2, [r7, #4]
 8014ef8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014efa:	f107 0314 	add.w	r3, r7, #20
 8014efe:	2200      	movs	r2, #0
 8014f00:	601a      	str	r2, [r3, #0]
 8014f02:	605a      	str	r2, [r3, #4]
 8014f04:	609a      	str	r2, [r3, #8]
 8014f06:	60da      	str	r2, [r3, #12]
 8014f08:	611a      	str	r2, [r3, #16]
 8014f0a:	615a      	str	r2, [r3, #20]
 8014f0c:	619a      	str	r2, [r3, #24]
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	617b      	str	r3, [r7, #20]
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	61bb      	str	r3, [r7, #24]
 8014f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f18:	b21b      	sxth	r3, r3
 8014f1a:	83bb      	strh	r3, [r7, #28]
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014f20:	f107 0314 	add.w	r3, r7, #20
 8014f24:	6879      	ldr	r1, [r7, #4]
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7ef fbd5 	bl	80046d6 <osThreadCreate>
 8014f2c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3730      	adds	r7, #48	@ 0x30
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
	...

08014f38 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014f3c:	4b04      	ldr	r3, [pc, #16]	@ (8014f50 <sys_arch_protect+0x18>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	f04f 31ff 	mov.w	r1, #4294967295
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7ef fc4b 	bl	80047e0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014f4a:	2301      	movs	r3, #1
}
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	2000bfc0 	.word	0x2000bfc0

08014f54 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b082      	sub	sp, #8
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014f5c:	4b04      	ldr	r3, [pc, #16]	@ (8014f70 <sys_arch_unprotect+0x1c>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7ef fc8b 	bl	800487c <osMutexRelease>
}
 8014f66:	bf00      	nop
 8014f68:	3708      	adds	r7, #8
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	2000bfc0 	.word	0x2000bfc0

08014f74 <rand>:
 8014f74:	4b16      	ldr	r3, [pc, #88]	@ (8014fd0 <rand+0x5c>)
 8014f76:	b510      	push	{r4, lr}
 8014f78:	681c      	ldr	r4, [r3, #0]
 8014f7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f7c:	b9b3      	cbnz	r3, 8014fac <rand+0x38>
 8014f7e:	2018      	movs	r0, #24
 8014f80:	f000 fab2 	bl	80154e8 <malloc>
 8014f84:	4602      	mov	r2, r0
 8014f86:	6320      	str	r0, [r4, #48]	@ 0x30
 8014f88:	b920      	cbnz	r0, 8014f94 <rand+0x20>
 8014f8a:	4b12      	ldr	r3, [pc, #72]	@ (8014fd4 <rand+0x60>)
 8014f8c:	4812      	ldr	r0, [pc, #72]	@ (8014fd8 <rand+0x64>)
 8014f8e:	2152      	movs	r1, #82	@ 0x52
 8014f90:	f000 fa42 	bl	8015418 <__assert_func>
 8014f94:	4911      	ldr	r1, [pc, #68]	@ (8014fdc <rand+0x68>)
 8014f96:	4b12      	ldr	r3, [pc, #72]	@ (8014fe0 <rand+0x6c>)
 8014f98:	e9c0 1300 	strd	r1, r3, [r0]
 8014f9c:	4b11      	ldr	r3, [pc, #68]	@ (8014fe4 <rand+0x70>)
 8014f9e:	6083      	str	r3, [r0, #8]
 8014fa0:	230b      	movs	r3, #11
 8014fa2:	8183      	strh	r3, [r0, #12]
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	2001      	movs	r0, #1
 8014fa8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014fac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014fae:	480e      	ldr	r0, [pc, #56]	@ (8014fe8 <rand+0x74>)
 8014fb0:	690b      	ldr	r3, [r1, #16]
 8014fb2:	694c      	ldr	r4, [r1, #20]
 8014fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8014fec <rand+0x78>)
 8014fb6:	4358      	muls	r0, r3
 8014fb8:	fb02 0004 	mla	r0, r2, r4, r0
 8014fbc:	fba3 3202 	umull	r3, r2, r3, r2
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	eb40 0002 	adc.w	r0, r0, r2
 8014fc6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014fca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014fce:	bd10      	pop	{r4, pc}
 8014fd0:	2000003c 	.word	0x2000003c
 8014fd4:	0801a594 	.word	0x0801a594
 8014fd8:	0801a5ab 	.word	0x0801a5ab
 8014fdc:	abcd330e 	.word	0xabcd330e
 8014fe0:	e66d1234 	.word	0xe66d1234
 8014fe4:	0005deec 	.word	0x0005deec
 8014fe8:	5851f42d 	.word	0x5851f42d
 8014fec:	4c957f2d 	.word	0x4c957f2d

08014ff0 <std>:
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	b510      	push	{r4, lr}
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8014ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ffe:	6083      	str	r3, [r0, #8]
 8015000:	8181      	strh	r1, [r0, #12]
 8015002:	6643      	str	r3, [r0, #100]	@ 0x64
 8015004:	81c2      	strh	r2, [r0, #14]
 8015006:	6183      	str	r3, [r0, #24]
 8015008:	4619      	mov	r1, r3
 801500a:	2208      	movs	r2, #8
 801500c:	305c      	adds	r0, #92	@ 0x5c
 801500e:	f000 f916 	bl	801523e <memset>
 8015012:	4b0d      	ldr	r3, [pc, #52]	@ (8015048 <std+0x58>)
 8015014:	6263      	str	r3, [r4, #36]	@ 0x24
 8015016:	4b0d      	ldr	r3, [pc, #52]	@ (801504c <std+0x5c>)
 8015018:	62a3      	str	r3, [r4, #40]	@ 0x28
 801501a:	4b0d      	ldr	r3, [pc, #52]	@ (8015050 <std+0x60>)
 801501c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801501e:	4b0d      	ldr	r3, [pc, #52]	@ (8015054 <std+0x64>)
 8015020:	6323      	str	r3, [r4, #48]	@ 0x30
 8015022:	4b0d      	ldr	r3, [pc, #52]	@ (8015058 <std+0x68>)
 8015024:	6224      	str	r4, [r4, #32]
 8015026:	429c      	cmp	r4, r3
 8015028:	d006      	beq.n	8015038 <std+0x48>
 801502a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801502e:	4294      	cmp	r4, r2
 8015030:	d002      	beq.n	8015038 <std+0x48>
 8015032:	33d0      	adds	r3, #208	@ 0xd0
 8015034:	429c      	cmp	r4, r3
 8015036:	d105      	bne.n	8015044 <std+0x54>
 8015038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801503c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015040:	f000 b9d8 	b.w	80153f4 <__retarget_lock_init_recursive>
 8015044:	bd10      	pop	{r4, pc}
 8015046:	bf00      	nop
 8015048:	08015199 	.word	0x08015199
 801504c:	080151bb 	.word	0x080151bb
 8015050:	080151f3 	.word	0x080151f3
 8015054:	08015217 	.word	0x08015217
 8015058:	2000bfc4 	.word	0x2000bfc4

0801505c <stdio_exit_handler>:
 801505c:	4a02      	ldr	r2, [pc, #8]	@ (8015068 <stdio_exit_handler+0xc>)
 801505e:	4903      	ldr	r1, [pc, #12]	@ (801506c <stdio_exit_handler+0x10>)
 8015060:	4803      	ldr	r0, [pc, #12]	@ (8015070 <stdio_exit_handler+0x14>)
 8015062:	f000 b869 	b.w	8015138 <_fwalk_sglue>
 8015066:	bf00      	nop
 8015068:	20000030 	.word	0x20000030
 801506c:	08015cfd 	.word	0x08015cfd
 8015070:	20000040 	.word	0x20000040

08015074 <cleanup_stdio>:
 8015074:	6841      	ldr	r1, [r0, #4]
 8015076:	4b0c      	ldr	r3, [pc, #48]	@ (80150a8 <cleanup_stdio+0x34>)
 8015078:	4299      	cmp	r1, r3
 801507a:	b510      	push	{r4, lr}
 801507c:	4604      	mov	r4, r0
 801507e:	d001      	beq.n	8015084 <cleanup_stdio+0x10>
 8015080:	f000 fe3c 	bl	8015cfc <_fflush_r>
 8015084:	68a1      	ldr	r1, [r4, #8]
 8015086:	4b09      	ldr	r3, [pc, #36]	@ (80150ac <cleanup_stdio+0x38>)
 8015088:	4299      	cmp	r1, r3
 801508a:	d002      	beq.n	8015092 <cleanup_stdio+0x1e>
 801508c:	4620      	mov	r0, r4
 801508e:	f000 fe35 	bl	8015cfc <_fflush_r>
 8015092:	68e1      	ldr	r1, [r4, #12]
 8015094:	4b06      	ldr	r3, [pc, #24]	@ (80150b0 <cleanup_stdio+0x3c>)
 8015096:	4299      	cmp	r1, r3
 8015098:	d004      	beq.n	80150a4 <cleanup_stdio+0x30>
 801509a:	4620      	mov	r0, r4
 801509c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150a0:	f000 be2c 	b.w	8015cfc <_fflush_r>
 80150a4:	bd10      	pop	{r4, pc}
 80150a6:	bf00      	nop
 80150a8:	2000bfc4 	.word	0x2000bfc4
 80150ac:	2000c02c 	.word	0x2000c02c
 80150b0:	2000c094 	.word	0x2000c094

080150b4 <global_stdio_init.part.0>:
 80150b4:	b510      	push	{r4, lr}
 80150b6:	4b0b      	ldr	r3, [pc, #44]	@ (80150e4 <global_stdio_init.part.0+0x30>)
 80150b8:	4c0b      	ldr	r4, [pc, #44]	@ (80150e8 <global_stdio_init.part.0+0x34>)
 80150ba:	4a0c      	ldr	r2, [pc, #48]	@ (80150ec <global_stdio_init.part.0+0x38>)
 80150bc:	601a      	str	r2, [r3, #0]
 80150be:	4620      	mov	r0, r4
 80150c0:	2200      	movs	r2, #0
 80150c2:	2104      	movs	r1, #4
 80150c4:	f7ff ff94 	bl	8014ff0 <std>
 80150c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80150cc:	2201      	movs	r2, #1
 80150ce:	2109      	movs	r1, #9
 80150d0:	f7ff ff8e 	bl	8014ff0 <std>
 80150d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80150d8:	2202      	movs	r2, #2
 80150da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150de:	2112      	movs	r1, #18
 80150e0:	f7ff bf86 	b.w	8014ff0 <std>
 80150e4:	2000c0fc 	.word	0x2000c0fc
 80150e8:	2000bfc4 	.word	0x2000bfc4
 80150ec:	0801505d 	.word	0x0801505d

080150f0 <__sfp_lock_acquire>:
 80150f0:	4801      	ldr	r0, [pc, #4]	@ (80150f8 <__sfp_lock_acquire+0x8>)
 80150f2:	f000 b980 	b.w	80153f6 <__retarget_lock_acquire_recursive>
 80150f6:	bf00      	nop
 80150f8:	2000c105 	.word	0x2000c105

080150fc <__sfp_lock_release>:
 80150fc:	4801      	ldr	r0, [pc, #4]	@ (8015104 <__sfp_lock_release+0x8>)
 80150fe:	f000 b97b 	b.w	80153f8 <__retarget_lock_release_recursive>
 8015102:	bf00      	nop
 8015104:	2000c105 	.word	0x2000c105

08015108 <__sinit>:
 8015108:	b510      	push	{r4, lr}
 801510a:	4604      	mov	r4, r0
 801510c:	f7ff fff0 	bl	80150f0 <__sfp_lock_acquire>
 8015110:	6a23      	ldr	r3, [r4, #32]
 8015112:	b11b      	cbz	r3, 801511c <__sinit+0x14>
 8015114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015118:	f7ff bff0 	b.w	80150fc <__sfp_lock_release>
 801511c:	4b04      	ldr	r3, [pc, #16]	@ (8015130 <__sinit+0x28>)
 801511e:	6223      	str	r3, [r4, #32]
 8015120:	4b04      	ldr	r3, [pc, #16]	@ (8015134 <__sinit+0x2c>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d1f5      	bne.n	8015114 <__sinit+0xc>
 8015128:	f7ff ffc4 	bl	80150b4 <global_stdio_init.part.0>
 801512c:	e7f2      	b.n	8015114 <__sinit+0xc>
 801512e:	bf00      	nop
 8015130:	08015075 	.word	0x08015075
 8015134:	2000c0fc 	.word	0x2000c0fc

08015138 <_fwalk_sglue>:
 8015138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801513c:	4607      	mov	r7, r0
 801513e:	4688      	mov	r8, r1
 8015140:	4614      	mov	r4, r2
 8015142:	2600      	movs	r6, #0
 8015144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015148:	f1b9 0901 	subs.w	r9, r9, #1
 801514c:	d505      	bpl.n	801515a <_fwalk_sglue+0x22>
 801514e:	6824      	ldr	r4, [r4, #0]
 8015150:	2c00      	cmp	r4, #0
 8015152:	d1f7      	bne.n	8015144 <_fwalk_sglue+0xc>
 8015154:	4630      	mov	r0, r6
 8015156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801515a:	89ab      	ldrh	r3, [r5, #12]
 801515c:	2b01      	cmp	r3, #1
 801515e:	d907      	bls.n	8015170 <_fwalk_sglue+0x38>
 8015160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015164:	3301      	adds	r3, #1
 8015166:	d003      	beq.n	8015170 <_fwalk_sglue+0x38>
 8015168:	4629      	mov	r1, r5
 801516a:	4638      	mov	r0, r7
 801516c:	47c0      	blx	r8
 801516e:	4306      	orrs	r6, r0
 8015170:	3568      	adds	r5, #104	@ 0x68
 8015172:	e7e9      	b.n	8015148 <_fwalk_sglue+0x10>

08015174 <iprintf>:
 8015174:	b40f      	push	{r0, r1, r2, r3}
 8015176:	b507      	push	{r0, r1, r2, lr}
 8015178:	4906      	ldr	r1, [pc, #24]	@ (8015194 <iprintf+0x20>)
 801517a:	ab04      	add	r3, sp, #16
 801517c:	6808      	ldr	r0, [r1, #0]
 801517e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015182:	6881      	ldr	r1, [r0, #8]
 8015184:	9301      	str	r3, [sp, #4]
 8015186:	f000 fa8f 	bl	80156a8 <_vfiprintf_r>
 801518a:	b003      	add	sp, #12
 801518c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015190:	b004      	add	sp, #16
 8015192:	4770      	bx	lr
 8015194:	2000003c 	.word	0x2000003c

08015198 <__sread>:
 8015198:	b510      	push	{r4, lr}
 801519a:	460c      	mov	r4, r1
 801519c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151a0:	f000 f8e0 	bl	8015364 <_read_r>
 80151a4:	2800      	cmp	r0, #0
 80151a6:	bfab      	itete	ge
 80151a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80151aa:	89a3      	ldrhlt	r3, [r4, #12]
 80151ac:	181b      	addge	r3, r3, r0
 80151ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80151b2:	bfac      	ite	ge
 80151b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80151b6:	81a3      	strhlt	r3, [r4, #12]
 80151b8:	bd10      	pop	{r4, pc}

080151ba <__swrite>:
 80151ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151be:	461f      	mov	r7, r3
 80151c0:	898b      	ldrh	r3, [r1, #12]
 80151c2:	05db      	lsls	r3, r3, #23
 80151c4:	4605      	mov	r5, r0
 80151c6:	460c      	mov	r4, r1
 80151c8:	4616      	mov	r6, r2
 80151ca:	d505      	bpl.n	80151d8 <__swrite+0x1e>
 80151cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151d0:	2302      	movs	r3, #2
 80151d2:	2200      	movs	r2, #0
 80151d4:	f000 f8b4 	bl	8015340 <_lseek_r>
 80151d8:	89a3      	ldrh	r3, [r4, #12]
 80151da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80151e2:	81a3      	strh	r3, [r4, #12]
 80151e4:	4632      	mov	r2, r6
 80151e6:	463b      	mov	r3, r7
 80151e8:	4628      	mov	r0, r5
 80151ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151ee:	f000 b8cb 	b.w	8015388 <_write_r>

080151f2 <__sseek>:
 80151f2:	b510      	push	{r4, lr}
 80151f4:	460c      	mov	r4, r1
 80151f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151fa:	f000 f8a1 	bl	8015340 <_lseek_r>
 80151fe:	1c43      	adds	r3, r0, #1
 8015200:	89a3      	ldrh	r3, [r4, #12]
 8015202:	bf15      	itete	ne
 8015204:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015206:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801520a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801520e:	81a3      	strheq	r3, [r4, #12]
 8015210:	bf18      	it	ne
 8015212:	81a3      	strhne	r3, [r4, #12]
 8015214:	bd10      	pop	{r4, pc}

08015216 <__sclose>:
 8015216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801521a:	f000 b82b 	b.w	8015274 <_close_r>

0801521e <memcmp>:
 801521e:	b510      	push	{r4, lr}
 8015220:	3901      	subs	r1, #1
 8015222:	4402      	add	r2, r0
 8015224:	4290      	cmp	r0, r2
 8015226:	d101      	bne.n	801522c <memcmp+0xe>
 8015228:	2000      	movs	r0, #0
 801522a:	e005      	b.n	8015238 <memcmp+0x1a>
 801522c:	7803      	ldrb	r3, [r0, #0]
 801522e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015232:	42a3      	cmp	r3, r4
 8015234:	d001      	beq.n	801523a <memcmp+0x1c>
 8015236:	1b18      	subs	r0, r3, r4
 8015238:	bd10      	pop	{r4, pc}
 801523a:	3001      	adds	r0, #1
 801523c:	e7f2      	b.n	8015224 <memcmp+0x6>

0801523e <memset>:
 801523e:	4402      	add	r2, r0
 8015240:	4603      	mov	r3, r0
 8015242:	4293      	cmp	r3, r2
 8015244:	d100      	bne.n	8015248 <memset+0xa>
 8015246:	4770      	bx	lr
 8015248:	f803 1b01 	strb.w	r1, [r3], #1
 801524c:	e7f9      	b.n	8015242 <memset+0x4>

0801524e <strncmp>:
 801524e:	b510      	push	{r4, lr}
 8015250:	b16a      	cbz	r2, 801526e <strncmp+0x20>
 8015252:	3901      	subs	r1, #1
 8015254:	1884      	adds	r4, r0, r2
 8015256:	f810 2b01 	ldrb.w	r2, [r0], #1
 801525a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801525e:	429a      	cmp	r2, r3
 8015260:	d103      	bne.n	801526a <strncmp+0x1c>
 8015262:	42a0      	cmp	r0, r4
 8015264:	d001      	beq.n	801526a <strncmp+0x1c>
 8015266:	2a00      	cmp	r2, #0
 8015268:	d1f5      	bne.n	8015256 <strncmp+0x8>
 801526a:	1ad0      	subs	r0, r2, r3
 801526c:	bd10      	pop	{r4, pc}
 801526e:	4610      	mov	r0, r2
 8015270:	e7fc      	b.n	801526c <strncmp+0x1e>
	...

08015274 <_close_r>:
 8015274:	b538      	push	{r3, r4, r5, lr}
 8015276:	4d06      	ldr	r5, [pc, #24]	@ (8015290 <_close_r+0x1c>)
 8015278:	2300      	movs	r3, #0
 801527a:	4604      	mov	r4, r0
 801527c:	4608      	mov	r0, r1
 801527e:	602b      	str	r3, [r5, #0]
 8015280:	f7eb fc84 	bl	8000b8c <_close>
 8015284:	1c43      	adds	r3, r0, #1
 8015286:	d102      	bne.n	801528e <_close_r+0x1a>
 8015288:	682b      	ldr	r3, [r5, #0]
 801528a:	b103      	cbz	r3, 801528e <_close_r+0x1a>
 801528c:	6023      	str	r3, [r4, #0]
 801528e:	bd38      	pop	{r3, r4, r5, pc}
 8015290:	2000c100 	.word	0x2000c100

08015294 <_reclaim_reent>:
 8015294:	4b29      	ldr	r3, [pc, #164]	@ (801533c <_reclaim_reent+0xa8>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4283      	cmp	r3, r0
 801529a:	b570      	push	{r4, r5, r6, lr}
 801529c:	4604      	mov	r4, r0
 801529e:	d04b      	beq.n	8015338 <_reclaim_reent+0xa4>
 80152a0:	69c3      	ldr	r3, [r0, #28]
 80152a2:	b1ab      	cbz	r3, 80152d0 <_reclaim_reent+0x3c>
 80152a4:	68db      	ldr	r3, [r3, #12]
 80152a6:	b16b      	cbz	r3, 80152c4 <_reclaim_reent+0x30>
 80152a8:	2500      	movs	r5, #0
 80152aa:	69e3      	ldr	r3, [r4, #28]
 80152ac:	68db      	ldr	r3, [r3, #12]
 80152ae:	5959      	ldr	r1, [r3, r5]
 80152b0:	2900      	cmp	r1, #0
 80152b2:	d13b      	bne.n	801532c <_reclaim_reent+0x98>
 80152b4:	3504      	adds	r5, #4
 80152b6:	2d80      	cmp	r5, #128	@ 0x80
 80152b8:	d1f7      	bne.n	80152aa <_reclaim_reent+0x16>
 80152ba:	69e3      	ldr	r3, [r4, #28]
 80152bc:	4620      	mov	r0, r4
 80152be:	68d9      	ldr	r1, [r3, #12]
 80152c0:	f000 f8c8 	bl	8015454 <_free_r>
 80152c4:	69e3      	ldr	r3, [r4, #28]
 80152c6:	6819      	ldr	r1, [r3, #0]
 80152c8:	b111      	cbz	r1, 80152d0 <_reclaim_reent+0x3c>
 80152ca:	4620      	mov	r0, r4
 80152cc:	f000 f8c2 	bl	8015454 <_free_r>
 80152d0:	6961      	ldr	r1, [r4, #20]
 80152d2:	b111      	cbz	r1, 80152da <_reclaim_reent+0x46>
 80152d4:	4620      	mov	r0, r4
 80152d6:	f000 f8bd 	bl	8015454 <_free_r>
 80152da:	69e1      	ldr	r1, [r4, #28]
 80152dc:	b111      	cbz	r1, 80152e4 <_reclaim_reent+0x50>
 80152de:	4620      	mov	r0, r4
 80152e0:	f000 f8b8 	bl	8015454 <_free_r>
 80152e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80152e6:	b111      	cbz	r1, 80152ee <_reclaim_reent+0x5a>
 80152e8:	4620      	mov	r0, r4
 80152ea:	f000 f8b3 	bl	8015454 <_free_r>
 80152ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80152f0:	b111      	cbz	r1, 80152f8 <_reclaim_reent+0x64>
 80152f2:	4620      	mov	r0, r4
 80152f4:	f000 f8ae 	bl	8015454 <_free_r>
 80152f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80152fa:	b111      	cbz	r1, 8015302 <_reclaim_reent+0x6e>
 80152fc:	4620      	mov	r0, r4
 80152fe:	f000 f8a9 	bl	8015454 <_free_r>
 8015302:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015304:	b111      	cbz	r1, 801530c <_reclaim_reent+0x78>
 8015306:	4620      	mov	r0, r4
 8015308:	f000 f8a4 	bl	8015454 <_free_r>
 801530c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801530e:	b111      	cbz	r1, 8015316 <_reclaim_reent+0x82>
 8015310:	4620      	mov	r0, r4
 8015312:	f000 f89f 	bl	8015454 <_free_r>
 8015316:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015318:	b111      	cbz	r1, 8015320 <_reclaim_reent+0x8c>
 801531a:	4620      	mov	r0, r4
 801531c:	f000 f89a 	bl	8015454 <_free_r>
 8015320:	6a23      	ldr	r3, [r4, #32]
 8015322:	b14b      	cbz	r3, 8015338 <_reclaim_reent+0xa4>
 8015324:	4620      	mov	r0, r4
 8015326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801532a:	4718      	bx	r3
 801532c:	680e      	ldr	r6, [r1, #0]
 801532e:	4620      	mov	r0, r4
 8015330:	f000 f890 	bl	8015454 <_free_r>
 8015334:	4631      	mov	r1, r6
 8015336:	e7bb      	b.n	80152b0 <_reclaim_reent+0x1c>
 8015338:	bd70      	pop	{r4, r5, r6, pc}
 801533a:	bf00      	nop
 801533c:	2000003c 	.word	0x2000003c

08015340 <_lseek_r>:
 8015340:	b538      	push	{r3, r4, r5, lr}
 8015342:	4d07      	ldr	r5, [pc, #28]	@ (8015360 <_lseek_r+0x20>)
 8015344:	4604      	mov	r4, r0
 8015346:	4608      	mov	r0, r1
 8015348:	4611      	mov	r1, r2
 801534a:	2200      	movs	r2, #0
 801534c:	602a      	str	r2, [r5, #0]
 801534e:	461a      	mov	r2, r3
 8015350:	f7eb fc43 	bl	8000bda <_lseek>
 8015354:	1c43      	adds	r3, r0, #1
 8015356:	d102      	bne.n	801535e <_lseek_r+0x1e>
 8015358:	682b      	ldr	r3, [r5, #0]
 801535a:	b103      	cbz	r3, 801535e <_lseek_r+0x1e>
 801535c:	6023      	str	r3, [r4, #0]
 801535e:	bd38      	pop	{r3, r4, r5, pc}
 8015360:	2000c100 	.word	0x2000c100

08015364 <_read_r>:
 8015364:	b538      	push	{r3, r4, r5, lr}
 8015366:	4d07      	ldr	r5, [pc, #28]	@ (8015384 <_read_r+0x20>)
 8015368:	4604      	mov	r4, r0
 801536a:	4608      	mov	r0, r1
 801536c:	4611      	mov	r1, r2
 801536e:	2200      	movs	r2, #0
 8015370:	602a      	str	r2, [r5, #0]
 8015372:	461a      	mov	r2, r3
 8015374:	f7eb fbd1 	bl	8000b1a <_read>
 8015378:	1c43      	adds	r3, r0, #1
 801537a:	d102      	bne.n	8015382 <_read_r+0x1e>
 801537c:	682b      	ldr	r3, [r5, #0]
 801537e:	b103      	cbz	r3, 8015382 <_read_r+0x1e>
 8015380:	6023      	str	r3, [r4, #0]
 8015382:	bd38      	pop	{r3, r4, r5, pc}
 8015384:	2000c100 	.word	0x2000c100

08015388 <_write_r>:
 8015388:	b538      	push	{r3, r4, r5, lr}
 801538a:	4d07      	ldr	r5, [pc, #28]	@ (80153a8 <_write_r+0x20>)
 801538c:	4604      	mov	r4, r0
 801538e:	4608      	mov	r0, r1
 8015390:	4611      	mov	r1, r2
 8015392:	2200      	movs	r2, #0
 8015394:	602a      	str	r2, [r5, #0]
 8015396:	461a      	mov	r2, r3
 8015398:	f7eb fbdc 	bl	8000b54 <_write>
 801539c:	1c43      	adds	r3, r0, #1
 801539e:	d102      	bne.n	80153a6 <_write_r+0x1e>
 80153a0:	682b      	ldr	r3, [r5, #0]
 80153a2:	b103      	cbz	r3, 80153a6 <_write_r+0x1e>
 80153a4:	6023      	str	r3, [r4, #0]
 80153a6:	bd38      	pop	{r3, r4, r5, pc}
 80153a8:	2000c100 	.word	0x2000c100

080153ac <__libc_init_array>:
 80153ac:	b570      	push	{r4, r5, r6, lr}
 80153ae:	4d0d      	ldr	r5, [pc, #52]	@ (80153e4 <__libc_init_array+0x38>)
 80153b0:	4c0d      	ldr	r4, [pc, #52]	@ (80153e8 <__libc_init_array+0x3c>)
 80153b2:	1b64      	subs	r4, r4, r5
 80153b4:	10a4      	asrs	r4, r4, #2
 80153b6:	2600      	movs	r6, #0
 80153b8:	42a6      	cmp	r6, r4
 80153ba:	d109      	bne.n	80153d0 <__libc_init_array+0x24>
 80153bc:	4d0b      	ldr	r5, [pc, #44]	@ (80153ec <__libc_init_array+0x40>)
 80153be:	4c0c      	ldr	r4, [pc, #48]	@ (80153f0 <__libc_init_array+0x44>)
 80153c0:	f000 fe4a 	bl	8016058 <_init>
 80153c4:	1b64      	subs	r4, r4, r5
 80153c6:	10a4      	asrs	r4, r4, #2
 80153c8:	2600      	movs	r6, #0
 80153ca:	42a6      	cmp	r6, r4
 80153cc:	d105      	bne.n	80153da <__libc_init_array+0x2e>
 80153ce:	bd70      	pop	{r4, r5, r6, pc}
 80153d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80153d4:	4798      	blx	r3
 80153d6:	3601      	adds	r6, #1
 80153d8:	e7ee      	b.n	80153b8 <__libc_init_array+0xc>
 80153da:	f855 3b04 	ldr.w	r3, [r5], #4
 80153de:	4798      	blx	r3
 80153e0:	3601      	adds	r6, #1
 80153e2:	e7f2      	b.n	80153ca <__libc_init_array+0x1e>
 80153e4:	0801a67c 	.word	0x0801a67c
 80153e8:	0801a67c 	.word	0x0801a67c
 80153ec:	0801a67c 	.word	0x0801a67c
 80153f0:	0801a680 	.word	0x0801a680

080153f4 <__retarget_lock_init_recursive>:
 80153f4:	4770      	bx	lr

080153f6 <__retarget_lock_acquire_recursive>:
 80153f6:	4770      	bx	lr

080153f8 <__retarget_lock_release_recursive>:
 80153f8:	4770      	bx	lr

080153fa <memcpy>:
 80153fa:	440a      	add	r2, r1
 80153fc:	4291      	cmp	r1, r2
 80153fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8015402:	d100      	bne.n	8015406 <memcpy+0xc>
 8015404:	4770      	bx	lr
 8015406:	b510      	push	{r4, lr}
 8015408:	f811 4b01 	ldrb.w	r4, [r1], #1
 801540c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015410:	4291      	cmp	r1, r2
 8015412:	d1f9      	bne.n	8015408 <memcpy+0xe>
 8015414:	bd10      	pop	{r4, pc}
	...

08015418 <__assert_func>:
 8015418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801541a:	4614      	mov	r4, r2
 801541c:	461a      	mov	r2, r3
 801541e:	4b09      	ldr	r3, [pc, #36]	@ (8015444 <__assert_func+0x2c>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	4605      	mov	r5, r0
 8015424:	68d8      	ldr	r0, [r3, #12]
 8015426:	b954      	cbnz	r4, 801543e <__assert_func+0x26>
 8015428:	4b07      	ldr	r3, [pc, #28]	@ (8015448 <__assert_func+0x30>)
 801542a:	461c      	mov	r4, r3
 801542c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015430:	9100      	str	r1, [sp, #0]
 8015432:	462b      	mov	r3, r5
 8015434:	4905      	ldr	r1, [pc, #20]	@ (801544c <__assert_func+0x34>)
 8015436:	f000 fc89 	bl	8015d4c <fiprintf>
 801543a:	f000 fd3d 	bl	8015eb8 <abort>
 801543e:	4b04      	ldr	r3, [pc, #16]	@ (8015450 <__assert_func+0x38>)
 8015440:	e7f4      	b.n	801542c <__assert_func+0x14>
 8015442:	bf00      	nop
 8015444:	2000003c 	.word	0x2000003c
 8015448:	0801a63e 	.word	0x0801a63e
 801544c:	0801a610 	.word	0x0801a610
 8015450:	0801a603 	.word	0x0801a603

08015454 <_free_r>:
 8015454:	b538      	push	{r3, r4, r5, lr}
 8015456:	4605      	mov	r5, r0
 8015458:	2900      	cmp	r1, #0
 801545a:	d041      	beq.n	80154e0 <_free_r+0x8c>
 801545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015460:	1f0c      	subs	r4, r1, #4
 8015462:	2b00      	cmp	r3, #0
 8015464:	bfb8      	it	lt
 8015466:	18e4      	addlt	r4, r4, r3
 8015468:	f000 f8e8 	bl	801563c <__malloc_lock>
 801546c:	4a1d      	ldr	r2, [pc, #116]	@ (80154e4 <_free_r+0x90>)
 801546e:	6813      	ldr	r3, [r2, #0]
 8015470:	b933      	cbnz	r3, 8015480 <_free_r+0x2c>
 8015472:	6063      	str	r3, [r4, #4]
 8015474:	6014      	str	r4, [r2, #0]
 8015476:	4628      	mov	r0, r5
 8015478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801547c:	f000 b8e4 	b.w	8015648 <__malloc_unlock>
 8015480:	42a3      	cmp	r3, r4
 8015482:	d908      	bls.n	8015496 <_free_r+0x42>
 8015484:	6820      	ldr	r0, [r4, #0]
 8015486:	1821      	adds	r1, r4, r0
 8015488:	428b      	cmp	r3, r1
 801548a:	bf01      	itttt	eq
 801548c:	6819      	ldreq	r1, [r3, #0]
 801548e:	685b      	ldreq	r3, [r3, #4]
 8015490:	1809      	addeq	r1, r1, r0
 8015492:	6021      	streq	r1, [r4, #0]
 8015494:	e7ed      	b.n	8015472 <_free_r+0x1e>
 8015496:	461a      	mov	r2, r3
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	b10b      	cbz	r3, 80154a0 <_free_r+0x4c>
 801549c:	42a3      	cmp	r3, r4
 801549e:	d9fa      	bls.n	8015496 <_free_r+0x42>
 80154a0:	6811      	ldr	r1, [r2, #0]
 80154a2:	1850      	adds	r0, r2, r1
 80154a4:	42a0      	cmp	r0, r4
 80154a6:	d10b      	bne.n	80154c0 <_free_r+0x6c>
 80154a8:	6820      	ldr	r0, [r4, #0]
 80154aa:	4401      	add	r1, r0
 80154ac:	1850      	adds	r0, r2, r1
 80154ae:	4283      	cmp	r3, r0
 80154b0:	6011      	str	r1, [r2, #0]
 80154b2:	d1e0      	bne.n	8015476 <_free_r+0x22>
 80154b4:	6818      	ldr	r0, [r3, #0]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	6053      	str	r3, [r2, #4]
 80154ba:	4408      	add	r0, r1
 80154bc:	6010      	str	r0, [r2, #0]
 80154be:	e7da      	b.n	8015476 <_free_r+0x22>
 80154c0:	d902      	bls.n	80154c8 <_free_r+0x74>
 80154c2:	230c      	movs	r3, #12
 80154c4:	602b      	str	r3, [r5, #0]
 80154c6:	e7d6      	b.n	8015476 <_free_r+0x22>
 80154c8:	6820      	ldr	r0, [r4, #0]
 80154ca:	1821      	adds	r1, r4, r0
 80154cc:	428b      	cmp	r3, r1
 80154ce:	bf04      	itt	eq
 80154d0:	6819      	ldreq	r1, [r3, #0]
 80154d2:	685b      	ldreq	r3, [r3, #4]
 80154d4:	6063      	str	r3, [r4, #4]
 80154d6:	bf04      	itt	eq
 80154d8:	1809      	addeq	r1, r1, r0
 80154da:	6021      	streq	r1, [r4, #0]
 80154dc:	6054      	str	r4, [r2, #4]
 80154de:	e7ca      	b.n	8015476 <_free_r+0x22>
 80154e0:	bd38      	pop	{r3, r4, r5, pc}
 80154e2:	bf00      	nop
 80154e4:	2000c10c 	.word	0x2000c10c

080154e8 <malloc>:
 80154e8:	4b02      	ldr	r3, [pc, #8]	@ (80154f4 <malloc+0xc>)
 80154ea:	4601      	mov	r1, r0
 80154ec:	6818      	ldr	r0, [r3, #0]
 80154ee:	f000 b825 	b.w	801553c <_malloc_r>
 80154f2:	bf00      	nop
 80154f4:	2000003c 	.word	0x2000003c

080154f8 <sbrk_aligned>:
 80154f8:	b570      	push	{r4, r5, r6, lr}
 80154fa:	4e0f      	ldr	r6, [pc, #60]	@ (8015538 <sbrk_aligned+0x40>)
 80154fc:	460c      	mov	r4, r1
 80154fe:	6831      	ldr	r1, [r6, #0]
 8015500:	4605      	mov	r5, r0
 8015502:	b911      	cbnz	r1, 801550a <sbrk_aligned+0x12>
 8015504:	f000 fcc8 	bl	8015e98 <_sbrk_r>
 8015508:	6030      	str	r0, [r6, #0]
 801550a:	4621      	mov	r1, r4
 801550c:	4628      	mov	r0, r5
 801550e:	f000 fcc3 	bl	8015e98 <_sbrk_r>
 8015512:	1c43      	adds	r3, r0, #1
 8015514:	d103      	bne.n	801551e <sbrk_aligned+0x26>
 8015516:	f04f 34ff 	mov.w	r4, #4294967295
 801551a:	4620      	mov	r0, r4
 801551c:	bd70      	pop	{r4, r5, r6, pc}
 801551e:	1cc4      	adds	r4, r0, #3
 8015520:	f024 0403 	bic.w	r4, r4, #3
 8015524:	42a0      	cmp	r0, r4
 8015526:	d0f8      	beq.n	801551a <sbrk_aligned+0x22>
 8015528:	1a21      	subs	r1, r4, r0
 801552a:	4628      	mov	r0, r5
 801552c:	f000 fcb4 	bl	8015e98 <_sbrk_r>
 8015530:	3001      	adds	r0, #1
 8015532:	d1f2      	bne.n	801551a <sbrk_aligned+0x22>
 8015534:	e7ef      	b.n	8015516 <sbrk_aligned+0x1e>
 8015536:	bf00      	nop
 8015538:	2000c108 	.word	0x2000c108

0801553c <_malloc_r>:
 801553c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015540:	1ccd      	adds	r5, r1, #3
 8015542:	f025 0503 	bic.w	r5, r5, #3
 8015546:	3508      	adds	r5, #8
 8015548:	2d0c      	cmp	r5, #12
 801554a:	bf38      	it	cc
 801554c:	250c      	movcc	r5, #12
 801554e:	2d00      	cmp	r5, #0
 8015550:	4606      	mov	r6, r0
 8015552:	db01      	blt.n	8015558 <_malloc_r+0x1c>
 8015554:	42a9      	cmp	r1, r5
 8015556:	d904      	bls.n	8015562 <_malloc_r+0x26>
 8015558:	230c      	movs	r3, #12
 801555a:	6033      	str	r3, [r6, #0]
 801555c:	2000      	movs	r0, #0
 801555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015562:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015638 <_malloc_r+0xfc>
 8015566:	f000 f869 	bl	801563c <__malloc_lock>
 801556a:	f8d8 3000 	ldr.w	r3, [r8]
 801556e:	461c      	mov	r4, r3
 8015570:	bb44      	cbnz	r4, 80155c4 <_malloc_r+0x88>
 8015572:	4629      	mov	r1, r5
 8015574:	4630      	mov	r0, r6
 8015576:	f7ff ffbf 	bl	80154f8 <sbrk_aligned>
 801557a:	1c43      	adds	r3, r0, #1
 801557c:	4604      	mov	r4, r0
 801557e:	d158      	bne.n	8015632 <_malloc_r+0xf6>
 8015580:	f8d8 4000 	ldr.w	r4, [r8]
 8015584:	4627      	mov	r7, r4
 8015586:	2f00      	cmp	r7, #0
 8015588:	d143      	bne.n	8015612 <_malloc_r+0xd6>
 801558a:	2c00      	cmp	r4, #0
 801558c:	d04b      	beq.n	8015626 <_malloc_r+0xea>
 801558e:	6823      	ldr	r3, [r4, #0]
 8015590:	4639      	mov	r1, r7
 8015592:	4630      	mov	r0, r6
 8015594:	eb04 0903 	add.w	r9, r4, r3
 8015598:	f000 fc7e 	bl	8015e98 <_sbrk_r>
 801559c:	4581      	cmp	r9, r0
 801559e:	d142      	bne.n	8015626 <_malloc_r+0xea>
 80155a0:	6821      	ldr	r1, [r4, #0]
 80155a2:	1a6d      	subs	r5, r5, r1
 80155a4:	4629      	mov	r1, r5
 80155a6:	4630      	mov	r0, r6
 80155a8:	f7ff ffa6 	bl	80154f8 <sbrk_aligned>
 80155ac:	3001      	adds	r0, #1
 80155ae:	d03a      	beq.n	8015626 <_malloc_r+0xea>
 80155b0:	6823      	ldr	r3, [r4, #0]
 80155b2:	442b      	add	r3, r5
 80155b4:	6023      	str	r3, [r4, #0]
 80155b6:	f8d8 3000 	ldr.w	r3, [r8]
 80155ba:	685a      	ldr	r2, [r3, #4]
 80155bc:	bb62      	cbnz	r2, 8015618 <_malloc_r+0xdc>
 80155be:	f8c8 7000 	str.w	r7, [r8]
 80155c2:	e00f      	b.n	80155e4 <_malloc_r+0xa8>
 80155c4:	6822      	ldr	r2, [r4, #0]
 80155c6:	1b52      	subs	r2, r2, r5
 80155c8:	d420      	bmi.n	801560c <_malloc_r+0xd0>
 80155ca:	2a0b      	cmp	r2, #11
 80155cc:	d917      	bls.n	80155fe <_malloc_r+0xc2>
 80155ce:	1961      	adds	r1, r4, r5
 80155d0:	42a3      	cmp	r3, r4
 80155d2:	6025      	str	r5, [r4, #0]
 80155d4:	bf18      	it	ne
 80155d6:	6059      	strne	r1, [r3, #4]
 80155d8:	6863      	ldr	r3, [r4, #4]
 80155da:	bf08      	it	eq
 80155dc:	f8c8 1000 	streq.w	r1, [r8]
 80155e0:	5162      	str	r2, [r4, r5]
 80155e2:	604b      	str	r3, [r1, #4]
 80155e4:	4630      	mov	r0, r6
 80155e6:	f000 f82f 	bl	8015648 <__malloc_unlock>
 80155ea:	f104 000b 	add.w	r0, r4, #11
 80155ee:	1d23      	adds	r3, r4, #4
 80155f0:	f020 0007 	bic.w	r0, r0, #7
 80155f4:	1ac2      	subs	r2, r0, r3
 80155f6:	bf1c      	itt	ne
 80155f8:	1a1b      	subne	r3, r3, r0
 80155fa:	50a3      	strne	r3, [r4, r2]
 80155fc:	e7af      	b.n	801555e <_malloc_r+0x22>
 80155fe:	6862      	ldr	r2, [r4, #4]
 8015600:	42a3      	cmp	r3, r4
 8015602:	bf0c      	ite	eq
 8015604:	f8c8 2000 	streq.w	r2, [r8]
 8015608:	605a      	strne	r2, [r3, #4]
 801560a:	e7eb      	b.n	80155e4 <_malloc_r+0xa8>
 801560c:	4623      	mov	r3, r4
 801560e:	6864      	ldr	r4, [r4, #4]
 8015610:	e7ae      	b.n	8015570 <_malloc_r+0x34>
 8015612:	463c      	mov	r4, r7
 8015614:	687f      	ldr	r7, [r7, #4]
 8015616:	e7b6      	b.n	8015586 <_malloc_r+0x4a>
 8015618:	461a      	mov	r2, r3
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	42a3      	cmp	r3, r4
 801561e:	d1fb      	bne.n	8015618 <_malloc_r+0xdc>
 8015620:	2300      	movs	r3, #0
 8015622:	6053      	str	r3, [r2, #4]
 8015624:	e7de      	b.n	80155e4 <_malloc_r+0xa8>
 8015626:	230c      	movs	r3, #12
 8015628:	6033      	str	r3, [r6, #0]
 801562a:	4630      	mov	r0, r6
 801562c:	f000 f80c 	bl	8015648 <__malloc_unlock>
 8015630:	e794      	b.n	801555c <_malloc_r+0x20>
 8015632:	6005      	str	r5, [r0, #0]
 8015634:	e7d6      	b.n	80155e4 <_malloc_r+0xa8>
 8015636:	bf00      	nop
 8015638:	2000c10c 	.word	0x2000c10c

0801563c <__malloc_lock>:
 801563c:	4801      	ldr	r0, [pc, #4]	@ (8015644 <__malloc_lock+0x8>)
 801563e:	f7ff beda 	b.w	80153f6 <__retarget_lock_acquire_recursive>
 8015642:	bf00      	nop
 8015644:	2000c104 	.word	0x2000c104

08015648 <__malloc_unlock>:
 8015648:	4801      	ldr	r0, [pc, #4]	@ (8015650 <__malloc_unlock+0x8>)
 801564a:	f7ff bed5 	b.w	80153f8 <__retarget_lock_release_recursive>
 801564e:	bf00      	nop
 8015650:	2000c104 	.word	0x2000c104

08015654 <__sfputc_r>:
 8015654:	6893      	ldr	r3, [r2, #8]
 8015656:	3b01      	subs	r3, #1
 8015658:	2b00      	cmp	r3, #0
 801565a:	b410      	push	{r4}
 801565c:	6093      	str	r3, [r2, #8]
 801565e:	da08      	bge.n	8015672 <__sfputc_r+0x1e>
 8015660:	6994      	ldr	r4, [r2, #24]
 8015662:	42a3      	cmp	r3, r4
 8015664:	db01      	blt.n	801566a <__sfputc_r+0x16>
 8015666:	290a      	cmp	r1, #10
 8015668:	d103      	bne.n	8015672 <__sfputc_r+0x1e>
 801566a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801566e:	f000 bb7f 	b.w	8015d70 <__swbuf_r>
 8015672:	6813      	ldr	r3, [r2, #0]
 8015674:	1c58      	adds	r0, r3, #1
 8015676:	6010      	str	r0, [r2, #0]
 8015678:	7019      	strb	r1, [r3, #0]
 801567a:	4608      	mov	r0, r1
 801567c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015680:	4770      	bx	lr

08015682 <__sfputs_r>:
 8015682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015684:	4606      	mov	r6, r0
 8015686:	460f      	mov	r7, r1
 8015688:	4614      	mov	r4, r2
 801568a:	18d5      	adds	r5, r2, r3
 801568c:	42ac      	cmp	r4, r5
 801568e:	d101      	bne.n	8015694 <__sfputs_r+0x12>
 8015690:	2000      	movs	r0, #0
 8015692:	e007      	b.n	80156a4 <__sfputs_r+0x22>
 8015694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015698:	463a      	mov	r2, r7
 801569a:	4630      	mov	r0, r6
 801569c:	f7ff ffda 	bl	8015654 <__sfputc_r>
 80156a0:	1c43      	adds	r3, r0, #1
 80156a2:	d1f3      	bne.n	801568c <__sfputs_r+0xa>
 80156a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080156a8 <_vfiprintf_r>:
 80156a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ac:	460d      	mov	r5, r1
 80156ae:	b09d      	sub	sp, #116	@ 0x74
 80156b0:	4614      	mov	r4, r2
 80156b2:	4698      	mov	r8, r3
 80156b4:	4606      	mov	r6, r0
 80156b6:	b118      	cbz	r0, 80156c0 <_vfiprintf_r+0x18>
 80156b8:	6a03      	ldr	r3, [r0, #32]
 80156ba:	b90b      	cbnz	r3, 80156c0 <_vfiprintf_r+0x18>
 80156bc:	f7ff fd24 	bl	8015108 <__sinit>
 80156c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156c2:	07d9      	lsls	r1, r3, #31
 80156c4:	d405      	bmi.n	80156d2 <_vfiprintf_r+0x2a>
 80156c6:	89ab      	ldrh	r3, [r5, #12]
 80156c8:	059a      	lsls	r2, r3, #22
 80156ca:	d402      	bmi.n	80156d2 <_vfiprintf_r+0x2a>
 80156cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156ce:	f7ff fe92 	bl	80153f6 <__retarget_lock_acquire_recursive>
 80156d2:	89ab      	ldrh	r3, [r5, #12]
 80156d4:	071b      	lsls	r3, r3, #28
 80156d6:	d501      	bpl.n	80156dc <_vfiprintf_r+0x34>
 80156d8:	692b      	ldr	r3, [r5, #16]
 80156da:	b99b      	cbnz	r3, 8015704 <_vfiprintf_r+0x5c>
 80156dc:	4629      	mov	r1, r5
 80156de:	4630      	mov	r0, r6
 80156e0:	f000 fb84 	bl	8015dec <__swsetup_r>
 80156e4:	b170      	cbz	r0, 8015704 <_vfiprintf_r+0x5c>
 80156e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156e8:	07dc      	lsls	r4, r3, #31
 80156ea:	d504      	bpl.n	80156f6 <_vfiprintf_r+0x4e>
 80156ec:	f04f 30ff 	mov.w	r0, #4294967295
 80156f0:	b01d      	add	sp, #116	@ 0x74
 80156f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156f6:	89ab      	ldrh	r3, [r5, #12]
 80156f8:	0598      	lsls	r0, r3, #22
 80156fa:	d4f7      	bmi.n	80156ec <_vfiprintf_r+0x44>
 80156fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156fe:	f7ff fe7b 	bl	80153f8 <__retarget_lock_release_recursive>
 8015702:	e7f3      	b.n	80156ec <_vfiprintf_r+0x44>
 8015704:	2300      	movs	r3, #0
 8015706:	9309      	str	r3, [sp, #36]	@ 0x24
 8015708:	2320      	movs	r3, #32
 801570a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801570e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015712:	2330      	movs	r3, #48	@ 0x30
 8015714:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80158c4 <_vfiprintf_r+0x21c>
 8015718:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801571c:	f04f 0901 	mov.w	r9, #1
 8015720:	4623      	mov	r3, r4
 8015722:	469a      	mov	sl, r3
 8015724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015728:	b10a      	cbz	r2, 801572e <_vfiprintf_r+0x86>
 801572a:	2a25      	cmp	r2, #37	@ 0x25
 801572c:	d1f9      	bne.n	8015722 <_vfiprintf_r+0x7a>
 801572e:	ebba 0b04 	subs.w	fp, sl, r4
 8015732:	d00b      	beq.n	801574c <_vfiprintf_r+0xa4>
 8015734:	465b      	mov	r3, fp
 8015736:	4622      	mov	r2, r4
 8015738:	4629      	mov	r1, r5
 801573a:	4630      	mov	r0, r6
 801573c:	f7ff ffa1 	bl	8015682 <__sfputs_r>
 8015740:	3001      	adds	r0, #1
 8015742:	f000 80a7 	beq.w	8015894 <_vfiprintf_r+0x1ec>
 8015746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015748:	445a      	add	r2, fp
 801574a:	9209      	str	r2, [sp, #36]	@ 0x24
 801574c:	f89a 3000 	ldrb.w	r3, [sl]
 8015750:	2b00      	cmp	r3, #0
 8015752:	f000 809f 	beq.w	8015894 <_vfiprintf_r+0x1ec>
 8015756:	2300      	movs	r3, #0
 8015758:	f04f 32ff 	mov.w	r2, #4294967295
 801575c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015760:	f10a 0a01 	add.w	sl, sl, #1
 8015764:	9304      	str	r3, [sp, #16]
 8015766:	9307      	str	r3, [sp, #28]
 8015768:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801576c:	931a      	str	r3, [sp, #104]	@ 0x68
 801576e:	4654      	mov	r4, sl
 8015770:	2205      	movs	r2, #5
 8015772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015776:	4853      	ldr	r0, [pc, #332]	@ (80158c4 <_vfiprintf_r+0x21c>)
 8015778:	f7ea fd5a 	bl	8000230 <memchr>
 801577c:	9a04      	ldr	r2, [sp, #16]
 801577e:	b9d8      	cbnz	r0, 80157b8 <_vfiprintf_r+0x110>
 8015780:	06d1      	lsls	r1, r2, #27
 8015782:	bf44      	itt	mi
 8015784:	2320      	movmi	r3, #32
 8015786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801578a:	0713      	lsls	r3, r2, #28
 801578c:	bf44      	itt	mi
 801578e:	232b      	movmi	r3, #43	@ 0x2b
 8015790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015794:	f89a 3000 	ldrb.w	r3, [sl]
 8015798:	2b2a      	cmp	r3, #42	@ 0x2a
 801579a:	d015      	beq.n	80157c8 <_vfiprintf_r+0x120>
 801579c:	9a07      	ldr	r2, [sp, #28]
 801579e:	4654      	mov	r4, sl
 80157a0:	2000      	movs	r0, #0
 80157a2:	f04f 0c0a 	mov.w	ip, #10
 80157a6:	4621      	mov	r1, r4
 80157a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157ac:	3b30      	subs	r3, #48	@ 0x30
 80157ae:	2b09      	cmp	r3, #9
 80157b0:	d94b      	bls.n	801584a <_vfiprintf_r+0x1a2>
 80157b2:	b1b0      	cbz	r0, 80157e2 <_vfiprintf_r+0x13a>
 80157b4:	9207      	str	r2, [sp, #28]
 80157b6:	e014      	b.n	80157e2 <_vfiprintf_r+0x13a>
 80157b8:	eba0 0308 	sub.w	r3, r0, r8
 80157bc:	fa09 f303 	lsl.w	r3, r9, r3
 80157c0:	4313      	orrs	r3, r2
 80157c2:	9304      	str	r3, [sp, #16]
 80157c4:	46a2      	mov	sl, r4
 80157c6:	e7d2      	b.n	801576e <_vfiprintf_r+0xc6>
 80157c8:	9b03      	ldr	r3, [sp, #12]
 80157ca:	1d19      	adds	r1, r3, #4
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	9103      	str	r1, [sp, #12]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	bfbb      	ittet	lt
 80157d4:	425b      	neglt	r3, r3
 80157d6:	f042 0202 	orrlt.w	r2, r2, #2
 80157da:	9307      	strge	r3, [sp, #28]
 80157dc:	9307      	strlt	r3, [sp, #28]
 80157de:	bfb8      	it	lt
 80157e0:	9204      	strlt	r2, [sp, #16]
 80157e2:	7823      	ldrb	r3, [r4, #0]
 80157e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80157e6:	d10a      	bne.n	80157fe <_vfiprintf_r+0x156>
 80157e8:	7863      	ldrb	r3, [r4, #1]
 80157ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80157ec:	d132      	bne.n	8015854 <_vfiprintf_r+0x1ac>
 80157ee:	9b03      	ldr	r3, [sp, #12]
 80157f0:	1d1a      	adds	r2, r3, #4
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	9203      	str	r2, [sp, #12]
 80157f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80157fa:	3402      	adds	r4, #2
 80157fc:	9305      	str	r3, [sp, #20]
 80157fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80158d4 <_vfiprintf_r+0x22c>
 8015802:	7821      	ldrb	r1, [r4, #0]
 8015804:	2203      	movs	r2, #3
 8015806:	4650      	mov	r0, sl
 8015808:	f7ea fd12 	bl	8000230 <memchr>
 801580c:	b138      	cbz	r0, 801581e <_vfiprintf_r+0x176>
 801580e:	9b04      	ldr	r3, [sp, #16]
 8015810:	eba0 000a 	sub.w	r0, r0, sl
 8015814:	2240      	movs	r2, #64	@ 0x40
 8015816:	4082      	lsls	r2, r0
 8015818:	4313      	orrs	r3, r2
 801581a:	3401      	adds	r4, #1
 801581c:	9304      	str	r3, [sp, #16]
 801581e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015822:	4829      	ldr	r0, [pc, #164]	@ (80158c8 <_vfiprintf_r+0x220>)
 8015824:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015828:	2206      	movs	r2, #6
 801582a:	f7ea fd01 	bl	8000230 <memchr>
 801582e:	2800      	cmp	r0, #0
 8015830:	d03f      	beq.n	80158b2 <_vfiprintf_r+0x20a>
 8015832:	4b26      	ldr	r3, [pc, #152]	@ (80158cc <_vfiprintf_r+0x224>)
 8015834:	bb1b      	cbnz	r3, 801587e <_vfiprintf_r+0x1d6>
 8015836:	9b03      	ldr	r3, [sp, #12]
 8015838:	3307      	adds	r3, #7
 801583a:	f023 0307 	bic.w	r3, r3, #7
 801583e:	3308      	adds	r3, #8
 8015840:	9303      	str	r3, [sp, #12]
 8015842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015844:	443b      	add	r3, r7
 8015846:	9309      	str	r3, [sp, #36]	@ 0x24
 8015848:	e76a      	b.n	8015720 <_vfiprintf_r+0x78>
 801584a:	fb0c 3202 	mla	r2, ip, r2, r3
 801584e:	460c      	mov	r4, r1
 8015850:	2001      	movs	r0, #1
 8015852:	e7a8      	b.n	80157a6 <_vfiprintf_r+0xfe>
 8015854:	2300      	movs	r3, #0
 8015856:	3401      	adds	r4, #1
 8015858:	9305      	str	r3, [sp, #20]
 801585a:	4619      	mov	r1, r3
 801585c:	f04f 0c0a 	mov.w	ip, #10
 8015860:	4620      	mov	r0, r4
 8015862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015866:	3a30      	subs	r2, #48	@ 0x30
 8015868:	2a09      	cmp	r2, #9
 801586a:	d903      	bls.n	8015874 <_vfiprintf_r+0x1cc>
 801586c:	2b00      	cmp	r3, #0
 801586e:	d0c6      	beq.n	80157fe <_vfiprintf_r+0x156>
 8015870:	9105      	str	r1, [sp, #20]
 8015872:	e7c4      	b.n	80157fe <_vfiprintf_r+0x156>
 8015874:	fb0c 2101 	mla	r1, ip, r1, r2
 8015878:	4604      	mov	r4, r0
 801587a:	2301      	movs	r3, #1
 801587c:	e7f0      	b.n	8015860 <_vfiprintf_r+0x1b8>
 801587e:	ab03      	add	r3, sp, #12
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	462a      	mov	r2, r5
 8015884:	4b12      	ldr	r3, [pc, #72]	@ (80158d0 <_vfiprintf_r+0x228>)
 8015886:	a904      	add	r1, sp, #16
 8015888:	4630      	mov	r0, r6
 801588a:	f3af 8000 	nop.w
 801588e:	4607      	mov	r7, r0
 8015890:	1c78      	adds	r0, r7, #1
 8015892:	d1d6      	bne.n	8015842 <_vfiprintf_r+0x19a>
 8015894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015896:	07d9      	lsls	r1, r3, #31
 8015898:	d405      	bmi.n	80158a6 <_vfiprintf_r+0x1fe>
 801589a:	89ab      	ldrh	r3, [r5, #12]
 801589c:	059a      	lsls	r2, r3, #22
 801589e:	d402      	bmi.n	80158a6 <_vfiprintf_r+0x1fe>
 80158a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80158a2:	f7ff fda9 	bl	80153f8 <__retarget_lock_release_recursive>
 80158a6:	89ab      	ldrh	r3, [r5, #12]
 80158a8:	065b      	lsls	r3, r3, #25
 80158aa:	f53f af1f 	bmi.w	80156ec <_vfiprintf_r+0x44>
 80158ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80158b0:	e71e      	b.n	80156f0 <_vfiprintf_r+0x48>
 80158b2:	ab03      	add	r3, sp, #12
 80158b4:	9300      	str	r3, [sp, #0]
 80158b6:	462a      	mov	r2, r5
 80158b8:	4b05      	ldr	r3, [pc, #20]	@ (80158d0 <_vfiprintf_r+0x228>)
 80158ba:	a904      	add	r1, sp, #16
 80158bc:	4630      	mov	r0, r6
 80158be:	f000 f879 	bl	80159b4 <_printf_i>
 80158c2:	e7e4      	b.n	801588e <_vfiprintf_r+0x1e6>
 80158c4:	0801a63f 	.word	0x0801a63f
 80158c8:	0801a649 	.word	0x0801a649
 80158cc:	00000000 	.word	0x00000000
 80158d0:	08015683 	.word	0x08015683
 80158d4:	0801a645 	.word	0x0801a645

080158d8 <_printf_common>:
 80158d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158dc:	4616      	mov	r6, r2
 80158de:	4698      	mov	r8, r3
 80158e0:	688a      	ldr	r2, [r1, #8]
 80158e2:	690b      	ldr	r3, [r1, #16]
 80158e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80158e8:	4293      	cmp	r3, r2
 80158ea:	bfb8      	it	lt
 80158ec:	4613      	movlt	r3, r2
 80158ee:	6033      	str	r3, [r6, #0]
 80158f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80158f4:	4607      	mov	r7, r0
 80158f6:	460c      	mov	r4, r1
 80158f8:	b10a      	cbz	r2, 80158fe <_printf_common+0x26>
 80158fa:	3301      	adds	r3, #1
 80158fc:	6033      	str	r3, [r6, #0]
 80158fe:	6823      	ldr	r3, [r4, #0]
 8015900:	0699      	lsls	r1, r3, #26
 8015902:	bf42      	ittt	mi
 8015904:	6833      	ldrmi	r3, [r6, #0]
 8015906:	3302      	addmi	r3, #2
 8015908:	6033      	strmi	r3, [r6, #0]
 801590a:	6825      	ldr	r5, [r4, #0]
 801590c:	f015 0506 	ands.w	r5, r5, #6
 8015910:	d106      	bne.n	8015920 <_printf_common+0x48>
 8015912:	f104 0a19 	add.w	sl, r4, #25
 8015916:	68e3      	ldr	r3, [r4, #12]
 8015918:	6832      	ldr	r2, [r6, #0]
 801591a:	1a9b      	subs	r3, r3, r2
 801591c:	42ab      	cmp	r3, r5
 801591e:	dc26      	bgt.n	801596e <_printf_common+0x96>
 8015920:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015924:	6822      	ldr	r2, [r4, #0]
 8015926:	3b00      	subs	r3, #0
 8015928:	bf18      	it	ne
 801592a:	2301      	movne	r3, #1
 801592c:	0692      	lsls	r2, r2, #26
 801592e:	d42b      	bmi.n	8015988 <_printf_common+0xb0>
 8015930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015934:	4641      	mov	r1, r8
 8015936:	4638      	mov	r0, r7
 8015938:	47c8      	blx	r9
 801593a:	3001      	adds	r0, #1
 801593c:	d01e      	beq.n	801597c <_printf_common+0xa4>
 801593e:	6823      	ldr	r3, [r4, #0]
 8015940:	6922      	ldr	r2, [r4, #16]
 8015942:	f003 0306 	and.w	r3, r3, #6
 8015946:	2b04      	cmp	r3, #4
 8015948:	bf02      	ittt	eq
 801594a:	68e5      	ldreq	r5, [r4, #12]
 801594c:	6833      	ldreq	r3, [r6, #0]
 801594e:	1aed      	subeq	r5, r5, r3
 8015950:	68a3      	ldr	r3, [r4, #8]
 8015952:	bf0c      	ite	eq
 8015954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015958:	2500      	movne	r5, #0
 801595a:	4293      	cmp	r3, r2
 801595c:	bfc4      	itt	gt
 801595e:	1a9b      	subgt	r3, r3, r2
 8015960:	18ed      	addgt	r5, r5, r3
 8015962:	2600      	movs	r6, #0
 8015964:	341a      	adds	r4, #26
 8015966:	42b5      	cmp	r5, r6
 8015968:	d11a      	bne.n	80159a0 <_printf_common+0xc8>
 801596a:	2000      	movs	r0, #0
 801596c:	e008      	b.n	8015980 <_printf_common+0xa8>
 801596e:	2301      	movs	r3, #1
 8015970:	4652      	mov	r2, sl
 8015972:	4641      	mov	r1, r8
 8015974:	4638      	mov	r0, r7
 8015976:	47c8      	blx	r9
 8015978:	3001      	adds	r0, #1
 801597a:	d103      	bne.n	8015984 <_printf_common+0xac>
 801597c:	f04f 30ff 	mov.w	r0, #4294967295
 8015980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015984:	3501      	adds	r5, #1
 8015986:	e7c6      	b.n	8015916 <_printf_common+0x3e>
 8015988:	18e1      	adds	r1, r4, r3
 801598a:	1c5a      	adds	r2, r3, #1
 801598c:	2030      	movs	r0, #48	@ 0x30
 801598e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015992:	4422      	add	r2, r4
 8015994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801599c:	3302      	adds	r3, #2
 801599e:	e7c7      	b.n	8015930 <_printf_common+0x58>
 80159a0:	2301      	movs	r3, #1
 80159a2:	4622      	mov	r2, r4
 80159a4:	4641      	mov	r1, r8
 80159a6:	4638      	mov	r0, r7
 80159a8:	47c8      	blx	r9
 80159aa:	3001      	adds	r0, #1
 80159ac:	d0e6      	beq.n	801597c <_printf_common+0xa4>
 80159ae:	3601      	adds	r6, #1
 80159b0:	e7d9      	b.n	8015966 <_printf_common+0x8e>
	...

080159b4 <_printf_i>:
 80159b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159b8:	7e0f      	ldrb	r7, [r1, #24]
 80159ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80159bc:	2f78      	cmp	r7, #120	@ 0x78
 80159be:	4691      	mov	r9, r2
 80159c0:	4680      	mov	r8, r0
 80159c2:	460c      	mov	r4, r1
 80159c4:	469a      	mov	sl, r3
 80159c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80159ca:	d807      	bhi.n	80159dc <_printf_i+0x28>
 80159cc:	2f62      	cmp	r7, #98	@ 0x62
 80159ce:	d80a      	bhi.n	80159e6 <_printf_i+0x32>
 80159d0:	2f00      	cmp	r7, #0
 80159d2:	f000 80d2 	beq.w	8015b7a <_printf_i+0x1c6>
 80159d6:	2f58      	cmp	r7, #88	@ 0x58
 80159d8:	f000 80b9 	beq.w	8015b4e <_printf_i+0x19a>
 80159dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80159e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80159e4:	e03a      	b.n	8015a5c <_printf_i+0xa8>
 80159e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80159ea:	2b15      	cmp	r3, #21
 80159ec:	d8f6      	bhi.n	80159dc <_printf_i+0x28>
 80159ee:	a101      	add	r1, pc, #4	@ (adr r1, 80159f4 <_printf_i+0x40>)
 80159f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80159f4:	08015a4d 	.word	0x08015a4d
 80159f8:	08015a61 	.word	0x08015a61
 80159fc:	080159dd 	.word	0x080159dd
 8015a00:	080159dd 	.word	0x080159dd
 8015a04:	080159dd 	.word	0x080159dd
 8015a08:	080159dd 	.word	0x080159dd
 8015a0c:	08015a61 	.word	0x08015a61
 8015a10:	080159dd 	.word	0x080159dd
 8015a14:	080159dd 	.word	0x080159dd
 8015a18:	080159dd 	.word	0x080159dd
 8015a1c:	080159dd 	.word	0x080159dd
 8015a20:	08015b61 	.word	0x08015b61
 8015a24:	08015a8b 	.word	0x08015a8b
 8015a28:	08015b1b 	.word	0x08015b1b
 8015a2c:	080159dd 	.word	0x080159dd
 8015a30:	080159dd 	.word	0x080159dd
 8015a34:	08015b83 	.word	0x08015b83
 8015a38:	080159dd 	.word	0x080159dd
 8015a3c:	08015a8b 	.word	0x08015a8b
 8015a40:	080159dd 	.word	0x080159dd
 8015a44:	080159dd 	.word	0x080159dd
 8015a48:	08015b23 	.word	0x08015b23
 8015a4c:	6833      	ldr	r3, [r6, #0]
 8015a4e:	1d1a      	adds	r2, r3, #4
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	6032      	str	r2, [r6, #0]
 8015a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	e09d      	b.n	8015b9c <_printf_i+0x1e8>
 8015a60:	6833      	ldr	r3, [r6, #0]
 8015a62:	6820      	ldr	r0, [r4, #0]
 8015a64:	1d19      	adds	r1, r3, #4
 8015a66:	6031      	str	r1, [r6, #0]
 8015a68:	0606      	lsls	r6, r0, #24
 8015a6a:	d501      	bpl.n	8015a70 <_printf_i+0xbc>
 8015a6c:	681d      	ldr	r5, [r3, #0]
 8015a6e:	e003      	b.n	8015a78 <_printf_i+0xc4>
 8015a70:	0645      	lsls	r5, r0, #25
 8015a72:	d5fb      	bpl.n	8015a6c <_printf_i+0xb8>
 8015a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015a78:	2d00      	cmp	r5, #0
 8015a7a:	da03      	bge.n	8015a84 <_printf_i+0xd0>
 8015a7c:	232d      	movs	r3, #45	@ 0x2d
 8015a7e:	426d      	negs	r5, r5
 8015a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015a84:	4859      	ldr	r0, [pc, #356]	@ (8015bec <_printf_i+0x238>)
 8015a86:	230a      	movs	r3, #10
 8015a88:	e011      	b.n	8015aae <_printf_i+0xfa>
 8015a8a:	6821      	ldr	r1, [r4, #0]
 8015a8c:	6833      	ldr	r3, [r6, #0]
 8015a8e:	0608      	lsls	r0, r1, #24
 8015a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8015a94:	d402      	bmi.n	8015a9c <_printf_i+0xe8>
 8015a96:	0649      	lsls	r1, r1, #25
 8015a98:	bf48      	it	mi
 8015a9a:	b2ad      	uxthmi	r5, r5
 8015a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8015a9e:	4853      	ldr	r0, [pc, #332]	@ (8015bec <_printf_i+0x238>)
 8015aa0:	6033      	str	r3, [r6, #0]
 8015aa2:	bf14      	ite	ne
 8015aa4:	230a      	movne	r3, #10
 8015aa6:	2308      	moveq	r3, #8
 8015aa8:	2100      	movs	r1, #0
 8015aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015aae:	6866      	ldr	r6, [r4, #4]
 8015ab0:	60a6      	str	r6, [r4, #8]
 8015ab2:	2e00      	cmp	r6, #0
 8015ab4:	bfa2      	ittt	ge
 8015ab6:	6821      	ldrge	r1, [r4, #0]
 8015ab8:	f021 0104 	bicge.w	r1, r1, #4
 8015abc:	6021      	strge	r1, [r4, #0]
 8015abe:	b90d      	cbnz	r5, 8015ac4 <_printf_i+0x110>
 8015ac0:	2e00      	cmp	r6, #0
 8015ac2:	d04b      	beq.n	8015b5c <_printf_i+0x1a8>
 8015ac4:	4616      	mov	r6, r2
 8015ac6:	fbb5 f1f3 	udiv	r1, r5, r3
 8015aca:	fb03 5711 	mls	r7, r3, r1, r5
 8015ace:	5dc7      	ldrb	r7, [r0, r7]
 8015ad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015ad4:	462f      	mov	r7, r5
 8015ad6:	42bb      	cmp	r3, r7
 8015ad8:	460d      	mov	r5, r1
 8015ada:	d9f4      	bls.n	8015ac6 <_printf_i+0x112>
 8015adc:	2b08      	cmp	r3, #8
 8015ade:	d10b      	bne.n	8015af8 <_printf_i+0x144>
 8015ae0:	6823      	ldr	r3, [r4, #0]
 8015ae2:	07df      	lsls	r7, r3, #31
 8015ae4:	d508      	bpl.n	8015af8 <_printf_i+0x144>
 8015ae6:	6923      	ldr	r3, [r4, #16]
 8015ae8:	6861      	ldr	r1, [r4, #4]
 8015aea:	4299      	cmp	r1, r3
 8015aec:	bfde      	ittt	le
 8015aee:	2330      	movle	r3, #48	@ 0x30
 8015af0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015af4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015af8:	1b92      	subs	r2, r2, r6
 8015afa:	6122      	str	r2, [r4, #16]
 8015afc:	f8cd a000 	str.w	sl, [sp]
 8015b00:	464b      	mov	r3, r9
 8015b02:	aa03      	add	r2, sp, #12
 8015b04:	4621      	mov	r1, r4
 8015b06:	4640      	mov	r0, r8
 8015b08:	f7ff fee6 	bl	80158d8 <_printf_common>
 8015b0c:	3001      	adds	r0, #1
 8015b0e:	d14a      	bne.n	8015ba6 <_printf_i+0x1f2>
 8015b10:	f04f 30ff 	mov.w	r0, #4294967295
 8015b14:	b004      	add	sp, #16
 8015b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b1a:	6823      	ldr	r3, [r4, #0]
 8015b1c:	f043 0320 	orr.w	r3, r3, #32
 8015b20:	6023      	str	r3, [r4, #0]
 8015b22:	4833      	ldr	r0, [pc, #204]	@ (8015bf0 <_printf_i+0x23c>)
 8015b24:	2778      	movs	r7, #120	@ 0x78
 8015b26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015b2a:	6823      	ldr	r3, [r4, #0]
 8015b2c:	6831      	ldr	r1, [r6, #0]
 8015b2e:	061f      	lsls	r7, r3, #24
 8015b30:	f851 5b04 	ldr.w	r5, [r1], #4
 8015b34:	d402      	bmi.n	8015b3c <_printf_i+0x188>
 8015b36:	065f      	lsls	r7, r3, #25
 8015b38:	bf48      	it	mi
 8015b3a:	b2ad      	uxthmi	r5, r5
 8015b3c:	6031      	str	r1, [r6, #0]
 8015b3e:	07d9      	lsls	r1, r3, #31
 8015b40:	bf44      	itt	mi
 8015b42:	f043 0320 	orrmi.w	r3, r3, #32
 8015b46:	6023      	strmi	r3, [r4, #0]
 8015b48:	b11d      	cbz	r5, 8015b52 <_printf_i+0x19e>
 8015b4a:	2310      	movs	r3, #16
 8015b4c:	e7ac      	b.n	8015aa8 <_printf_i+0xf4>
 8015b4e:	4827      	ldr	r0, [pc, #156]	@ (8015bec <_printf_i+0x238>)
 8015b50:	e7e9      	b.n	8015b26 <_printf_i+0x172>
 8015b52:	6823      	ldr	r3, [r4, #0]
 8015b54:	f023 0320 	bic.w	r3, r3, #32
 8015b58:	6023      	str	r3, [r4, #0]
 8015b5a:	e7f6      	b.n	8015b4a <_printf_i+0x196>
 8015b5c:	4616      	mov	r6, r2
 8015b5e:	e7bd      	b.n	8015adc <_printf_i+0x128>
 8015b60:	6833      	ldr	r3, [r6, #0]
 8015b62:	6825      	ldr	r5, [r4, #0]
 8015b64:	6961      	ldr	r1, [r4, #20]
 8015b66:	1d18      	adds	r0, r3, #4
 8015b68:	6030      	str	r0, [r6, #0]
 8015b6a:	062e      	lsls	r6, r5, #24
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	d501      	bpl.n	8015b74 <_printf_i+0x1c0>
 8015b70:	6019      	str	r1, [r3, #0]
 8015b72:	e002      	b.n	8015b7a <_printf_i+0x1c6>
 8015b74:	0668      	lsls	r0, r5, #25
 8015b76:	d5fb      	bpl.n	8015b70 <_printf_i+0x1bc>
 8015b78:	8019      	strh	r1, [r3, #0]
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	6123      	str	r3, [r4, #16]
 8015b7e:	4616      	mov	r6, r2
 8015b80:	e7bc      	b.n	8015afc <_printf_i+0x148>
 8015b82:	6833      	ldr	r3, [r6, #0]
 8015b84:	1d1a      	adds	r2, r3, #4
 8015b86:	6032      	str	r2, [r6, #0]
 8015b88:	681e      	ldr	r6, [r3, #0]
 8015b8a:	6862      	ldr	r2, [r4, #4]
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	4630      	mov	r0, r6
 8015b90:	f7ea fb4e 	bl	8000230 <memchr>
 8015b94:	b108      	cbz	r0, 8015b9a <_printf_i+0x1e6>
 8015b96:	1b80      	subs	r0, r0, r6
 8015b98:	6060      	str	r0, [r4, #4]
 8015b9a:	6863      	ldr	r3, [r4, #4]
 8015b9c:	6123      	str	r3, [r4, #16]
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015ba4:	e7aa      	b.n	8015afc <_printf_i+0x148>
 8015ba6:	6923      	ldr	r3, [r4, #16]
 8015ba8:	4632      	mov	r2, r6
 8015baa:	4649      	mov	r1, r9
 8015bac:	4640      	mov	r0, r8
 8015bae:	47d0      	blx	sl
 8015bb0:	3001      	adds	r0, #1
 8015bb2:	d0ad      	beq.n	8015b10 <_printf_i+0x15c>
 8015bb4:	6823      	ldr	r3, [r4, #0]
 8015bb6:	079b      	lsls	r3, r3, #30
 8015bb8:	d413      	bmi.n	8015be2 <_printf_i+0x22e>
 8015bba:	68e0      	ldr	r0, [r4, #12]
 8015bbc:	9b03      	ldr	r3, [sp, #12]
 8015bbe:	4298      	cmp	r0, r3
 8015bc0:	bfb8      	it	lt
 8015bc2:	4618      	movlt	r0, r3
 8015bc4:	e7a6      	b.n	8015b14 <_printf_i+0x160>
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	4632      	mov	r2, r6
 8015bca:	4649      	mov	r1, r9
 8015bcc:	4640      	mov	r0, r8
 8015bce:	47d0      	blx	sl
 8015bd0:	3001      	adds	r0, #1
 8015bd2:	d09d      	beq.n	8015b10 <_printf_i+0x15c>
 8015bd4:	3501      	adds	r5, #1
 8015bd6:	68e3      	ldr	r3, [r4, #12]
 8015bd8:	9903      	ldr	r1, [sp, #12]
 8015bda:	1a5b      	subs	r3, r3, r1
 8015bdc:	42ab      	cmp	r3, r5
 8015bde:	dcf2      	bgt.n	8015bc6 <_printf_i+0x212>
 8015be0:	e7eb      	b.n	8015bba <_printf_i+0x206>
 8015be2:	2500      	movs	r5, #0
 8015be4:	f104 0619 	add.w	r6, r4, #25
 8015be8:	e7f5      	b.n	8015bd6 <_printf_i+0x222>
 8015bea:	bf00      	nop
 8015bec:	0801a650 	.word	0x0801a650
 8015bf0:	0801a661 	.word	0x0801a661

08015bf4 <__sflush_r>:
 8015bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bfc:	0716      	lsls	r6, r2, #28
 8015bfe:	4605      	mov	r5, r0
 8015c00:	460c      	mov	r4, r1
 8015c02:	d454      	bmi.n	8015cae <__sflush_r+0xba>
 8015c04:	684b      	ldr	r3, [r1, #4]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	dc02      	bgt.n	8015c10 <__sflush_r+0x1c>
 8015c0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	dd48      	ble.n	8015ca2 <__sflush_r+0xae>
 8015c10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015c12:	2e00      	cmp	r6, #0
 8015c14:	d045      	beq.n	8015ca2 <__sflush_r+0xae>
 8015c16:	2300      	movs	r3, #0
 8015c18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015c1c:	682f      	ldr	r7, [r5, #0]
 8015c1e:	6a21      	ldr	r1, [r4, #32]
 8015c20:	602b      	str	r3, [r5, #0]
 8015c22:	d030      	beq.n	8015c86 <__sflush_r+0x92>
 8015c24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015c26:	89a3      	ldrh	r3, [r4, #12]
 8015c28:	0759      	lsls	r1, r3, #29
 8015c2a:	d505      	bpl.n	8015c38 <__sflush_r+0x44>
 8015c2c:	6863      	ldr	r3, [r4, #4]
 8015c2e:	1ad2      	subs	r2, r2, r3
 8015c30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015c32:	b10b      	cbz	r3, 8015c38 <__sflush_r+0x44>
 8015c34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015c36:	1ad2      	subs	r2, r2, r3
 8015c38:	2300      	movs	r3, #0
 8015c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015c3c:	6a21      	ldr	r1, [r4, #32]
 8015c3e:	4628      	mov	r0, r5
 8015c40:	47b0      	blx	r6
 8015c42:	1c43      	adds	r3, r0, #1
 8015c44:	89a3      	ldrh	r3, [r4, #12]
 8015c46:	d106      	bne.n	8015c56 <__sflush_r+0x62>
 8015c48:	6829      	ldr	r1, [r5, #0]
 8015c4a:	291d      	cmp	r1, #29
 8015c4c:	d82b      	bhi.n	8015ca6 <__sflush_r+0xb2>
 8015c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8015cf8 <__sflush_r+0x104>)
 8015c50:	410a      	asrs	r2, r1
 8015c52:	07d6      	lsls	r6, r2, #31
 8015c54:	d427      	bmi.n	8015ca6 <__sflush_r+0xb2>
 8015c56:	2200      	movs	r2, #0
 8015c58:	6062      	str	r2, [r4, #4]
 8015c5a:	04d9      	lsls	r1, r3, #19
 8015c5c:	6922      	ldr	r2, [r4, #16]
 8015c5e:	6022      	str	r2, [r4, #0]
 8015c60:	d504      	bpl.n	8015c6c <__sflush_r+0x78>
 8015c62:	1c42      	adds	r2, r0, #1
 8015c64:	d101      	bne.n	8015c6a <__sflush_r+0x76>
 8015c66:	682b      	ldr	r3, [r5, #0]
 8015c68:	b903      	cbnz	r3, 8015c6c <__sflush_r+0x78>
 8015c6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8015c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015c6e:	602f      	str	r7, [r5, #0]
 8015c70:	b1b9      	cbz	r1, 8015ca2 <__sflush_r+0xae>
 8015c72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015c76:	4299      	cmp	r1, r3
 8015c78:	d002      	beq.n	8015c80 <__sflush_r+0x8c>
 8015c7a:	4628      	mov	r0, r5
 8015c7c:	f7ff fbea 	bl	8015454 <_free_r>
 8015c80:	2300      	movs	r3, #0
 8015c82:	6363      	str	r3, [r4, #52]	@ 0x34
 8015c84:	e00d      	b.n	8015ca2 <__sflush_r+0xae>
 8015c86:	2301      	movs	r3, #1
 8015c88:	4628      	mov	r0, r5
 8015c8a:	47b0      	blx	r6
 8015c8c:	4602      	mov	r2, r0
 8015c8e:	1c50      	adds	r0, r2, #1
 8015c90:	d1c9      	bne.n	8015c26 <__sflush_r+0x32>
 8015c92:	682b      	ldr	r3, [r5, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d0c6      	beq.n	8015c26 <__sflush_r+0x32>
 8015c98:	2b1d      	cmp	r3, #29
 8015c9a:	d001      	beq.n	8015ca0 <__sflush_r+0xac>
 8015c9c:	2b16      	cmp	r3, #22
 8015c9e:	d11e      	bne.n	8015cde <__sflush_r+0xea>
 8015ca0:	602f      	str	r7, [r5, #0]
 8015ca2:	2000      	movs	r0, #0
 8015ca4:	e022      	b.n	8015cec <__sflush_r+0xf8>
 8015ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015caa:	b21b      	sxth	r3, r3
 8015cac:	e01b      	b.n	8015ce6 <__sflush_r+0xf2>
 8015cae:	690f      	ldr	r7, [r1, #16]
 8015cb0:	2f00      	cmp	r7, #0
 8015cb2:	d0f6      	beq.n	8015ca2 <__sflush_r+0xae>
 8015cb4:	0793      	lsls	r3, r2, #30
 8015cb6:	680e      	ldr	r6, [r1, #0]
 8015cb8:	bf08      	it	eq
 8015cba:	694b      	ldreq	r3, [r1, #20]
 8015cbc:	600f      	str	r7, [r1, #0]
 8015cbe:	bf18      	it	ne
 8015cc0:	2300      	movne	r3, #0
 8015cc2:	eba6 0807 	sub.w	r8, r6, r7
 8015cc6:	608b      	str	r3, [r1, #8]
 8015cc8:	f1b8 0f00 	cmp.w	r8, #0
 8015ccc:	dde9      	ble.n	8015ca2 <__sflush_r+0xae>
 8015cce:	6a21      	ldr	r1, [r4, #32]
 8015cd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015cd2:	4643      	mov	r3, r8
 8015cd4:	463a      	mov	r2, r7
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	47b0      	blx	r6
 8015cda:	2800      	cmp	r0, #0
 8015cdc:	dc08      	bgt.n	8015cf0 <__sflush_r+0xfc>
 8015cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ce6:	81a3      	strh	r3, [r4, #12]
 8015ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8015cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cf0:	4407      	add	r7, r0
 8015cf2:	eba8 0800 	sub.w	r8, r8, r0
 8015cf6:	e7e7      	b.n	8015cc8 <__sflush_r+0xd4>
 8015cf8:	dfbffffe 	.word	0xdfbffffe

08015cfc <_fflush_r>:
 8015cfc:	b538      	push	{r3, r4, r5, lr}
 8015cfe:	690b      	ldr	r3, [r1, #16]
 8015d00:	4605      	mov	r5, r0
 8015d02:	460c      	mov	r4, r1
 8015d04:	b913      	cbnz	r3, 8015d0c <_fflush_r+0x10>
 8015d06:	2500      	movs	r5, #0
 8015d08:	4628      	mov	r0, r5
 8015d0a:	bd38      	pop	{r3, r4, r5, pc}
 8015d0c:	b118      	cbz	r0, 8015d16 <_fflush_r+0x1a>
 8015d0e:	6a03      	ldr	r3, [r0, #32]
 8015d10:	b90b      	cbnz	r3, 8015d16 <_fflush_r+0x1a>
 8015d12:	f7ff f9f9 	bl	8015108 <__sinit>
 8015d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d0f3      	beq.n	8015d06 <_fflush_r+0xa>
 8015d1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015d20:	07d0      	lsls	r0, r2, #31
 8015d22:	d404      	bmi.n	8015d2e <_fflush_r+0x32>
 8015d24:	0599      	lsls	r1, r3, #22
 8015d26:	d402      	bmi.n	8015d2e <_fflush_r+0x32>
 8015d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015d2a:	f7ff fb64 	bl	80153f6 <__retarget_lock_acquire_recursive>
 8015d2e:	4628      	mov	r0, r5
 8015d30:	4621      	mov	r1, r4
 8015d32:	f7ff ff5f 	bl	8015bf4 <__sflush_r>
 8015d36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015d38:	07da      	lsls	r2, r3, #31
 8015d3a:	4605      	mov	r5, r0
 8015d3c:	d4e4      	bmi.n	8015d08 <_fflush_r+0xc>
 8015d3e:	89a3      	ldrh	r3, [r4, #12]
 8015d40:	059b      	lsls	r3, r3, #22
 8015d42:	d4e1      	bmi.n	8015d08 <_fflush_r+0xc>
 8015d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015d46:	f7ff fb57 	bl	80153f8 <__retarget_lock_release_recursive>
 8015d4a:	e7dd      	b.n	8015d08 <_fflush_r+0xc>

08015d4c <fiprintf>:
 8015d4c:	b40e      	push	{r1, r2, r3}
 8015d4e:	b503      	push	{r0, r1, lr}
 8015d50:	4601      	mov	r1, r0
 8015d52:	ab03      	add	r3, sp, #12
 8015d54:	4805      	ldr	r0, [pc, #20]	@ (8015d6c <fiprintf+0x20>)
 8015d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d5a:	6800      	ldr	r0, [r0, #0]
 8015d5c:	9301      	str	r3, [sp, #4]
 8015d5e:	f7ff fca3 	bl	80156a8 <_vfiprintf_r>
 8015d62:	b002      	add	sp, #8
 8015d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8015d68:	b003      	add	sp, #12
 8015d6a:	4770      	bx	lr
 8015d6c:	2000003c 	.word	0x2000003c

08015d70 <__swbuf_r>:
 8015d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d72:	460e      	mov	r6, r1
 8015d74:	4614      	mov	r4, r2
 8015d76:	4605      	mov	r5, r0
 8015d78:	b118      	cbz	r0, 8015d82 <__swbuf_r+0x12>
 8015d7a:	6a03      	ldr	r3, [r0, #32]
 8015d7c:	b90b      	cbnz	r3, 8015d82 <__swbuf_r+0x12>
 8015d7e:	f7ff f9c3 	bl	8015108 <__sinit>
 8015d82:	69a3      	ldr	r3, [r4, #24]
 8015d84:	60a3      	str	r3, [r4, #8]
 8015d86:	89a3      	ldrh	r3, [r4, #12]
 8015d88:	071a      	lsls	r2, r3, #28
 8015d8a:	d501      	bpl.n	8015d90 <__swbuf_r+0x20>
 8015d8c:	6923      	ldr	r3, [r4, #16]
 8015d8e:	b943      	cbnz	r3, 8015da2 <__swbuf_r+0x32>
 8015d90:	4621      	mov	r1, r4
 8015d92:	4628      	mov	r0, r5
 8015d94:	f000 f82a 	bl	8015dec <__swsetup_r>
 8015d98:	b118      	cbz	r0, 8015da2 <__swbuf_r+0x32>
 8015d9a:	f04f 37ff 	mov.w	r7, #4294967295
 8015d9e:	4638      	mov	r0, r7
 8015da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015da2:	6823      	ldr	r3, [r4, #0]
 8015da4:	6922      	ldr	r2, [r4, #16]
 8015da6:	1a98      	subs	r0, r3, r2
 8015da8:	6963      	ldr	r3, [r4, #20]
 8015daa:	b2f6      	uxtb	r6, r6
 8015dac:	4283      	cmp	r3, r0
 8015dae:	4637      	mov	r7, r6
 8015db0:	dc05      	bgt.n	8015dbe <__swbuf_r+0x4e>
 8015db2:	4621      	mov	r1, r4
 8015db4:	4628      	mov	r0, r5
 8015db6:	f7ff ffa1 	bl	8015cfc <_fflush_r>
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	d1ed      	bne.n	8015d9a <__swbuf_r+0x2a>
 8015dbe:	68a3      	ldr	r3, [r4, #8]
 8015dc0:	3b01      	subs	r3, #1
 8015dc2:	60a3      	str	r3, [r4, #8]
 8015dc4:	6823      	ldr	r3, [r4, #0]
 8015dc6:	1c5a      	adds	r2, r3, #1
 8015dc8:	6022      	str	r2, [r4, #0]
 8015dca:	701e      	strb	r6, [r3, #0]
 8015dcc:	6962      	ldr	r2, [r4, #20]
 8015dce:	1c43      	adds	r3, r0, #1
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d004      	beq.n	8015dde <__swbuf_r+0x6e>
 8015dd4:	89a3      	ldrh	r3, [r4, #12]
 8015dd6:	07db      	lsls	r3, r3, #31
 8015dd8:	d5e1      	bpl.n	8015d9e <__swbuf_r+0x2e>
 8015dda:	2e0a      	cmp	r6, #10
 8015ddc:	d1df      	bne.n	8015d9e <__swbuf_r+0x2e>
 8015dde:	4621      	mov	r1, r4
 8015de0:	4628      	mov	r0, r5
 8015de2:	f7ff ff8b 	bl	8015cfc <_fflush_r>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d0d9      	beq.n	8015d9e <__swbuf_r+0x2e>
 8015dea:	e7d6      	b.n	8015d9a <__swbuf_r+0x2a>

08015dec <__swsetup_r>:
 8015dec:	b538      	push	{r3, r4, r5, lr}
 8015dee:	4b29      	ldr	r3, [pc, #164]	@ (8015e94 <__swsetup_r+0xa8>)
 8015df0:	4605      	mov	r5, r0
 8015df2:	6818      	ldr	r0, [r3, #0]
 8015df4:	460c      	mov	r4, r1
 8015df6:	b118      	cbz	r0, 8015e00 <__swsetup_r+0x14>
 8015df8:	6a03      	ldr	r3, [r0, #32]
 8015dfa:	b90b      	cbnz	r3, 8015e00 <__swsetup_r+0x14>
 8015dfc:	f7ff f984 	bl	8015108 <__sinit>
 8015e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e04:	0719      	lsls	r1, r3, #28
 8015e06:	d422      	bmi.n	8015e4e <__swsetup_r+0x62>
 8015e08:	06da      	lsls	r2, r3, #27
 8015e0a:	d407      	bmi.n	8015e1c <__swsetup_r+0x30>
 8015e0c:	2209      	movs	r2, #9
 8015e0e:	602a      	str	r2, [r5, #0]
 8015e10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015e14:	81a3      	strh	r3, [r4, #12]
 8015e16:	f04f 30ff 	mov.w	r0, #4294967295
 8015e1a:	e033      	b.n	8015e84 <__swsetup_r+0x98>
 8015e1c:	0758      	lsls	r0, r3, #29
 8015e1e:	d512      	bpl.n	8015e46 <__swsetup_r+0x5a>
 8015e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015e22:	b141      	cbz	r1, 8015e36 <__swsetup_r+0x4a>
 8015e24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015e28:	4299      	cmp	r1, r3
 8015e2a:	d002      	beq.n	8015e32 <__swsetup_r+0x46>
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	f7ff fb11 	bl	8015454 <_free_r>
 8015e32:	2300      	movs	r3, #0
 8015e34:	6363      	str	r3, [r4, #52]	@ 0x34
 8015e36:	89a3      	ldrh	r3, [r4, #12]
 8015e38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015e3c:	81a3      	strh	r3, [r4, #12]
 8015e3e:	2300      	movs	r3, #0
 8015e40:	6063      	str	r3, [r4, #4]
 8015e42:	6923      	ldr	r3, [r4, #16]
 8015e44:	6023      	str	r3, [r4, #0]
 8015e46:	89a3      	ldrh	r3, [r4, #12]
 8015e48:	f043 0308 	orr.w	r3, r3, #8
 8015e4c:	81a3      	strh	r3, [r4, #12]
 8015e4e:	6923      	ldr	r3, [r4, #16]
 8015e50:	b94b      	cbnz	r3, 8015e66 <__swsetup_r+0x7a>
 8015e52:	89a3      	ldrh	r3, [r4, #12]
 8015e54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015e5c:	d003      	beq.n	8015e66 <__swsetup_r+0x7a>
 8015e5e:	4621      	mov	r1, r4
 8015e60:	4628      	mov	r0, r5
 8015e62:	f000 f856 	bl	8015f12 <__smakebuf_r>
 8015e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e6a:	f013 0201 	ands.w	r2, r3, #1
 8015e6e:	d00a      	beq.n	8015e86 <__swsetup_r+0x9a>
 8015e70:	2200      	movs	r2, #0
 8015e72:	60a2      	str	r2, [r4, #8]
 8015e74:	6962      	ldr	r2, [r4, #20]
 8015e76:	4252      	negs	r2, r2
 8015e78:	61a2      	str	r2, [r4, #24]
 8015e7a:	6922      	ldr	r2, [r4, #16]
 8015e7c:	b942      	cbnz	r2, 8015e90 <__swsetup_r+0xa4>
 8015e7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015e82:	d1c5      	bne.n	8015e10 <__swsetup_r+0x24>
 8015e84:	bd38      	pop	{r3, r4, r5, pc}
 8015e86:	0799      	lsls	r1, r3, #30
 8015e88:	bf58      	it	pl
 8015e8a:	6962      	ldrpl	r2, [r4, #20]
 8015e8c:	60a2      	str	r2, [r4, #8]
 8015e8e:	e7f4      	b.n	8015e7a <__swsetup_r+0x8e>
 8015e90:	2000      	movs	r0, #0
 8015e92:	e7f7      	b.n	8015e84 <__swsetup_r+0x98>
 8015e94:	2000003c 	.word	0x2000003c

08015e98 <_sbrk_r>:
 8015e98:	b538      	push	{r3, r4, r5, lr}
 8015e9a:	4d06      	ldr	r5, [pc, #24]	@ (8015eb4 <_sbrk_r+0x1c>)
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	4608      	mov	r0, r1
 8015ea2:	602b      	str	r3, [r5, #0]
 8015ea4:	f7ea fea6 	bl	8000bf4 <_sbrk>
 8015ea8:	1c43      	adds	r3, r0, #1
 8015eaa:	d102      	bne.n	8015eb2 <_sbrk_r+0x1a>
 8015eac:	682b      	ldr	r3, [r5, #0]
 8015eae:	b103      	cbz	r3, 8015eb2 <_sbrk_r+0x1a>
 8015eb0:	6023      	str	r3, [r4, #0]
 8015eb2:	bd38      	pop	{r3, r4, r5, pc}
 8015eb4:	2000c100 	.word	0x2000c100

08015eb8 <abort>:
 8015eb8:	b508      	push	{r3, lr}
 8015eba:	2006      	movs	r0, #6
 8015ebc:	f000 f88e 	bl	8015fdc <raise>
 8015ec0:	2001      	movs	r0, #1
 8015ec2:	f7ea fe1f 	bl	8000b04 <_exit>

08015ec6 <__swhatbuf_r>:
 8015ec6:	b570      	push	{r4, r5, r6, lr}
 8015ec8:	460c      	mov	r4, r1
 8015eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ece:	2900      	cmp	r1, #0
 8015ed0:	b096      	sub	sp, #88	@ 0x58
 8015ed2:	4615      	mov	r5, r2
 8015ed4:	461e      	mov	r6, r3
 8015ed6:	da0d      	bge.n	8015ef4 <__swhatbuf_r+0x2e>
 8015ed8:	89a3      	ldrh	r3, [r4, #12]
 8015eda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015ede:	f04f 0100 	mov.w	r1, #0
 8015ee2:	bf14      	ite	ne
 8015ee4:	2340      	movne	r3, #64	@ 0x40
 8015ee6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015eea:	2000      	movs	r0, #0
 8015eec:	6031      	str	r1, [r6, #0]
 8015eee:	602b      	str	r3, [r5, #0]
 8015ef0:	b016      	add	sp, #88	@ 0x58
 8015ef2:	bd70      	pop	{r4, r5, r6, pc}
 8015ef4:	466a      	mov	r2, sp
 8015ef6:	f000 f879 	bl	8015fec <_fstat_r>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	dbec      	blt.n	8015ed8 <__swhatbuf_r+0x12>
 8015efe:	9901      	ldr	r1, [sp, #4]
 8015f00:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015f04:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015f08:	4259      	negs	r1, r3
 8015f0a:	4159      	adcs	r1, r3
 8015f0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015f10:	e7eb      	b.n	8015eea <__swhatbuf_r+0x24>

08015f12 <__smakebuf_r>:
 8015f12:	898b      	ldrh	r3, [r1, #12]
 8015f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f16:	079d      	lsls	r5, r3, #30
 8015f18:	4606      	mov	r6, r0
 8015f1a:	460c      	mov	r4, r1
 8015f1c:	d507      	bpl.n	8015f2e <__smakebuf_r+0x1c>
 8015f1e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015f22:	6023      	str	r3, [r4, #0]
 8015f24:	6123      	str	r3, [r4, #16]
 8015f26:	2301      	movs	r3, #1
 8015f28:	6163      	str	r3, [r4, #20]
 8015f2a:	b003      	add	sp, #12
 8015f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f2e:	ab01      	add	r3, sp, #4
 8015f30:	466a      	mov	r2, sp
 8015f32:	f7ff ffc8 	bl	8015ec6 <__swhatbuf_r>
 8015f36:	9f00      	ldr	r7, [sp, #0]
 8015f38:	4605      	mov	r5, r0
 8015f3a:	4639      	mov	r1, r7
 8015f3c:	4630      	mov	r0, r6
 8015f3e:	f7ff fafd 	bl	801553c <_malloc_r>
 8015f42:	b948      	cbnz	r0, 8015f58 <__smakebuf_r+0x46>
 8015f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f48:	059a      	lsls	r2, r3, #22
 8015f4a:	d4ee      	bmi.n	8015f2a <__smakebuf_r+0x18>
 8015f4c:	f023 0303 	bic.w	r3, r3, #3
 8015f50:	f043 0302 	orr.w	r3, r3, #2
 8015f54:	81a3      	strh	r3, [r4, #12]
 8015f56:	e7e2      	b.n	8015f1e <__smakebuf_r+0xc>
 8015f58:	89a3      	ldrh	r3, [r4, #12]
 8015f5a:	6020      	str	r0, [r4, #0]
 8015f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f60:	81a3      	strh	r3, [r4, #12]
 8015f62:	9b01      	ldr	r3, [sp, #4]
 8015f64:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015f68:	b15b      	cbz	r3, 8015f82 <__smakebuf_r+0x70>
 8015f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f6e:	4630      	mov	r0, r6
 8015f70:	f000 f84e 	bl	8016010 <_isatty_r>
 8015f74:	b128      	cbz	r0, 8015f82 <__smakebuf_r+0x70>
 8015f76:	89a3      	ldrh	r3, [r4, #12]
 8015f78:	f023 0303 	bic.w	r3, r3, #3
 8015f7c:	f043 0301 	orr.w	r3, r3, #1
 8015f80:	81a3      	strh	r3, [r4, #12]
 8015f82:	89a3      	ldrh	r3, [r4, #12]
 8015f84:	431d      	orrs	r5, r3
 8015f86:	81a5      	strh	r5, [r4, #12]
 8015f88:	e7cf      	b.n	8015f2a <__smakebuf_r+0x18>

08015f8a <_raise_r>:
 8015f8a:	291f      	cmp	r1, #31
 8015f8c:	b538      	push	{r3, r4, r5, lr}
 8015f8e:	4605      	mov	r5, r0
 8015f90:	460c      	mov	r4, r1
 8015f92:	d904      	bls.n	8015f9e <_raise_r+0x14>
 8015f94:	2316      	movs	r3, #22
 8015f96:	6003      	str	r3, [r0, #0]
 8015f98:	f04f 30ff 	mov.w	r0, #4294967295
 8015f9c:	bd38      	pop	{r3, r4, r5, pc}
 8015f9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015fa0:	b112      	cbz	r2, 8015fa8 <_raise_r+0x1e>
 8015fa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015fa6:	b94b      	cbnz	r3, 8015fbc <_raise_r+0x32>
 8015fa8:	4628      	mov	r0, r5
 8015faa:	f000 f853 	bl	8016054 <_getpid_r>
 8015fae:	4622      	mov	r2, r4
 8015fb0:	4601      	mov	r1, r0
 8015fb2:	4628      	mov	r0, r5
 8015fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fb8:	f000 b83a 	b.w	8016030 <_kill_r>
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d00a      	beq.n	8015fd6 <_raise_r+0x4c>
 8015fc0:	1c59      	adds	r1, r3, #1
 8015fc2:	d103      	bne.n	8015fcc <_raise_r+0x42>
 8015fc4:	2316      	movs	r3, #22
 8015fc6:	6003      	str	r3, [r0, #0]
 8015fc8:	2001      	movs	r0, #1
 8015fca:	e7e7      	b.n	8015f9c <_raise_r+0x12>
 8015fcc:	2100      	movs	r1, #0
 8015fce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	4798      	blx	r3
 8015fd6:	2000      	movs	r0, #0
 8015fd8:	e7e0      	b.n	8015f9c <_raise_r+0x12>
	...

08015fdc <raise>:
 8015fdc:	4b02      	ldr	r3, [pc, #8]	@ (8015fe8 <raise+0xc>)
 8015fde:	4601      	mov	r1, r0
 8015fe0:	6818      	ldr	r0, [r3, #0]
 8015fe2:	f7ff bfd2 	b.w	8015f8a <_raise_r>
 8015fe6:	bf00      	nop
 8015fe8:	2000003c 	.word	0x2000003c

08015fec <_fstat_r>:
 8015fec:	b538      	push	{r3, r4, r5, lr}
 8015fee:	4d07      	ldr	r5, [pc, #28]	@ (801600c <_fstat_r+0x20>)
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	4604      	mov	r4, r0
 8015ff4:	4608      	mov	r0, r1
 8015ff6:	4611      	mov	r1, r2
 8015ff8:	602b      	str	r3, [r5, #0]
 8015ffa:	f7ea fdd3 	bl	8000ba4 <_fstat>
 8015ffe:	1c43      	adds	r3, r0, #1
 8016000:	d102      	bne.n	8016008 <_fstat_r+0x1c>
 8016002:	682b      	ldr	r3, [r5, #0]
 8016004:	b103      	cbz	r3, 8016008 <_fstat_r+0x1c>
 8016006:	6023      	str	r3, [r4, #0]
 8016008:	bd38      	pop	{r3, r4, r5, pc}
 801600a:	bf00      	nop
 801600c:	2000c100 	.word	0x2000c100

08016010 <_isatty_r>:
 8016010:	b538      	push	{r3, r4, r5, lr}
 8016012:	4d06      	ldr	r5, [pc, #24]	@ (801602c <_isatty_r+0x1c>)
 8016014:	2300      	movs	r3, #0
 8016016:	4604      	mov	r4, r0
 8016018:	4608      	mov	r0, r1
 801601a:	602b      	str	r3, [r5, #0]
 801601c:	f7ea fdd2 	bl	8000bc4 <_isatty>
 8016020:	1c43      	adds	r3, r0, #1
 8016022:	d102      	bne.n	801602a <_isatty_r+0x1a>
 8016024:	682b      	ldr	r3, [r5, #0]
 8016026:	b103      	cbz	r3, 801602a <_isatty_r+0x1a>
 8016028:	6023      	str	r3, [r4, #0]
 801602a:	bd38      	pop	{r3, r4, r5, pc}
 801602c:	2000c100 	.word	0x2000c100

08016030 <_kill_r>:
 8016030:	b538      	push	{r3, r4, r5, lr}
 8016032:	4d07      	ldr	r5, [pc, #28]	@ (8016050 <_kill_r+0x20>)
 8016034:	2300      	movs	r3, #0
 8016036:	4604      	mov	r4, r0
 8016038:	4608      	mov	r0, r1
 801603a:	4611      	mov	r1, r2
 801603c:	602b      	str	r3, [r5, #0]
 801603e:	f7ea fd4f 	bl	8000ae0 <_kill>
 8016042:	1c43      	adds	r3, r0, #1
 8016044:	d102      	bne.n	801604c <_kill_r+0x1c>
 8016046:	682b      	ldr	r3, [r5, #0]
 8016048:	b103      	cbz	r3, 801604c <_kill_r+0x1c>
 801604a:	6023      	str	r3, [r4, #0]
 801604c:	bd38      	pop	{r3, r4, r5, pc}
 801604e:	bf00      	nop
 8016050:	2000c100 	.word	0x2000c100

08016054 <_getpid_r>:
 8016054:	f7ea bd3c 	b.w	8000ad0 <_getpid>

08016058 <_init>:
 8016058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801605a:	bf00      	nop
 801605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801605e:	bc08      	pop	{r3}
 8016060:	469e      	mov	lr, r3
 8016062:	4770      	bx	lr

08016064 <_fini>:
 8016064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016066:	bf00      	nop
 8016068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801606a:	bc08      	pop	{r3}
 801606c:	469e      	mov	lr, r3
 801606e:	4770      	bx	lr
