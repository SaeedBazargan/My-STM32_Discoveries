
HTTP_Server_AJAX_Netconn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cb68  08016160  08016160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022cc8  08022cc8  000241cc  2**0
                  CONTENTS
  4 .ARM          00000008  08022cc8  08022cc8  00023cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022cd0  08022cd0  000241cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022cd0  08022cd0  00023cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022cd4  08022cd4  00023cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08022cd8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08022d64  0002408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08022e04  0002412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000bf48  200001cc  08022ea4  000241cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000c114  08022ea4  00025114  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000241cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002e380  00000000  00000000  000241fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000797b  00000000  00000000  0005257c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002168  00000000  00000000  00059ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a54  00000000  00000000  0005c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003796f  00000000  00000000  0005dab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036a99  00000000  00000000  00095423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001105cf  00000000  00000000  000cbebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001dc48b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000910c  00000000  00000000  001dc4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000e1  00000000  00000000  001e55dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016148 	.word	0x08016148

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08016148 	.word	0x08016148

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	@ (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200001e8 	.word	0x200001e8
 80005f0:	20000288 	.word	0x20000288

080005f4 <http_server>:
#include "cmsis_os.h"

char color;

static void http_server(struct netconn *conn)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08e      	sub	sp, #56	@ 0x38
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	char* buf;
	u16_t buflen;
	struct fs_file file;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 80005fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000600:	4619      	mov	r1, r3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f007 fd1e 	bl	8008044 <netconn_recv>
 8000608:	4603      	mov	r3, r0
 800060a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (recv_err == ERR_OK)
 800060e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000612:	2b00      	cmp	r3, #0
 8000614:	f040 80a5 	bne.w	8000762 <http_server+0x16e>
	{
		if (netconn_err(conn) == ERR_OK)
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f007 fe9c 	bl	8008356 <netconn_err>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	f040 809e 	bne.w	8000762 <http_server+0x16e>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 8000626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000628:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800062c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000630:	4618      	mov	r0, r3
 8000632:	f009 faa1 	bl	8009b78 <netbuf_data>

			/* Check if request to get the index.html */
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 8000636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000638:	220f      	movs	r2, #15
 800063a:	494f      	ldr	r1, [pc, #316]	@ (8000778 <http_server+0x184>)
 800063c:	4618      	mov	r0, r3
 800063e:	f014 fe7e 	bl	801533e <strncmp>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d113      	bne.n	8000670 <http_server+0x7c>
			{
				fs_open(&file, "/index.html");
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	494b      	ldr	r1, [pc, #300]	@ (800077c <http_server+0x188>)
 800064e:	4618      	mov	r0, r3
 8000650:	f009 fc94 	bl	8009f7c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000654:	68f9      	ldr	r1, [r7, #12]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	461a      	mov	r2, r3
 800065a:	2300      	movs	r3, #0
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2300      	movs	r3, #0
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f007 fd69 	bl	8008138 <netconn_write_partly>
				fs_close(&file);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4618      	mov	r0, r3
 800066c:	f009 fcc4 	bl	8009ff8 <fs_close>
			}
			if (strncmp((char const *)buf,"GET /img/ST.gif",15)==0)
 8000670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000672:	220f      	movs	r2, #15
 8000674:	4942      	ldr	r1, [pc, #264]	@ (8000780 <http_server+0x18c>)
 8000676:	4618      	mov	r0, r3
 8000678:	f014 fe61 	bl	801533e <strncmp>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d113      	bne.n	80006aa <http_server+0xb6>
			{
				fs_open(&file, "/img/ST.gif");
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	493f      	ldr	r1, [pc, #252]	@ (8000784 <http_server+0x190>)
 8000688:	4618      	mov	r0, r3
 800068a:	f009 fc77 	bl	8009f7c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800068e:	68f9      	ldr	r1, [r7, #12]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	461a      	mov	r2, r3
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f007 fd4c 	bl	8008138 <netconn_write_partly>
				fs_close(&file);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4618      	mov	r0, r3
 80006a6:	f009 fca7 	bl	8009ff8 <fs_close>
			}
			if (strncmp((char const *)buf,"GET /img/stm32.jpg",18)==0)
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	2212      	movs	r2, #18
 80006ae:	4936      	ldr	r1, [pc, #216]	@ (8000788 <http_server+0x194>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f014 fe44 	bl	801533e <strncmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d113      	bne.n	80006e4 <http_server+0xf0>
			{
				fs_open(&file, "/img/stm32.jpg");
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4932      	ldr	r1, [pc, #200]	@ (800078c <http_server+0x198>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f009 fc5a 	bl	8009f7c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80006c8:	68f9      	ldr	r1, [r7, #12]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	461a      	mov	r2, r3
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f007 fd2f 	bl	8008138 <netconn_write_partly>
				fs_close(&file);
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4618      	mov	r0, r3
 80006e0:	f009 fc8a 	bl	8009ff8 <fs_close>
			}
			if (strncmp((char const *)buf,"GET /img/logo.jpg",17)==0)
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	2211      	movs	r2, #17
 80006e8:	4929      	ldr	r1, [pc, #164]	@ (8000790 <http_server+0x19c>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f014 fe27 	bl	801533e <strncmp>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d113      	bne.n	800071e <http_server+0x12a>
			{
				fs_open(&file, "/img/logo.jpg");
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4926      	ldr	r1, [pc, #152]	@ (8000794 <http_server+0x1a0>)
 80006fc:	4618      	mov	r0, r3
 80006fe:	f009 fc3d 	bl	8009f7c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000702:	68f9      	ldr	r1, [r7, #12]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	461a      	mov	r2, r3
 8000708:	2300      	movs	r3, #0
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2300      	movs	r3, #0
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f007 fd12 	bl	8008138 <netconn_write_partly>
				fs_close(&file);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4618      	mov	r0, r3
 800071a:	f009 fc6d 	bl	8009ff8 <fs_close>
			}
			if (strncmp((char const *)buf,"GET /buttoncolor=",17)==0)
 800071e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000720:	2211      	movs	r2, #17
 8000722:	491d      	ldr	r1, [pc, #116]	@ (8000798 <http_server+0x1a4>)
 8000724:	4618      	mov	r0, r3
 8000726:	f014 fe0a 	bl	801533e <strncmp>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d104      	bne.n	800073a <http_server+0x146>
			{
				color = buf[17];
 8000730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000732:	7c5a      	ldrb	r2, [r3, #17]
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <http_server+0x1a8>)
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e013      	b.n	8000762 <http_server+0x16e>
			}
			else
			{
				/* Load Error page */
				fs_open(&file, "/404.html");
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4918      	ldr	r1, [pc, #96]	@ (80007a0 <http_server+0x1ac>)
 8000740:	4618      	mov	r0, r3
 8000742:	f009 fc1b 	bl	8009f7c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000746:	68f9      	ldr	r1, [r7, #12]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	461a      	mov	r2, r3
 800074c:	2300      	movs	r3, #0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f007 fcf0 	bl	8008138 <netconn_write_partly>
				fs_close(&file);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4618      	mov	r0, r3
 800075e:	f009 fc4b 	bl	8009ff8 <fs_close>
			}
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f007 fdea 	bl	800833c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8000768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800076a:	4618      	mov	r0, r3
 800076c:	f009 f9e4 	bl	8009b38 <netbuf_delete>
}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	@ 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08016160 	.word	0x08016160
 800077c:	08016170 	.word	0x08016170
 8000780:	0801617c 	.word	0x0801617c
 8000784:	0801618c 	.word	0x0801618c
 8000788:	08016198 	.word	0x08016198
 800078c:	080161ac 	.word	0x080161ac
 8000790:	080161bc 	.word	0x080161bc
 8000794:	080161d0 	.word	0x080161d0
 8000798:	080161e0 	.word	0x080161e0
 800079c:	20000488 	.word	0x20000488
 80007a0:	080161f4 	.word	0x080161f4

080007a4 <http_thread>:


static void http_thread(void *arg)
{ 
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2010      	movs	r0, #16
 80007b2:	f007 f921 	bl	80079f8 <netconn_new_with_proto_and_callback>
 80007b6:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d023      	beq.n	8000806 <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80007be:	2250      	movs	r2, #80	@ 0x50
 80007c0:	4913      	ldr	r1, [pc, #76]	@ (8000810 <http_thread+0x6c>)
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f007 f9d2 	bl	8007b6c <netconn_bind>
 80007c8:	4603      	mov	r3, r0
 80007ca:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 80007cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d118      	bne.n	8000806 <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 80007d4:	21ff      	movs	r1, #255	@ 0xff
 80007d6:	6978      	ldr	r0, [r7, #20]
 80007d8:	f007 fa00 	bl	8007bdc <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	6978      	ldr	r0, [r7, #20]
 80007e4:	f007 fa26 	bl	8007c34 <netconn_accept>
 80007e8:	4603      	mov	r3, r0
 80007ea:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 80007ec:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f3      	bne.n	80007dc <http_thread+0x38>
        {
          /* serve connection */
          http_server(newconn);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fefc 	bl	80005f4 <http_server>

          /* delete connection */
          netconn_delete(newconn);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4618      	mov	r0, r3
 8000800:	f007 f998 	bl	8007b34 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8000804:	e7ea      	b.n	80007dc <http_thread+0x38>
        }
      }
    }
  }
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08022bcc 	.word	0x08022bcc

08000814 <http_server_init>:


void http_server_init()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 800081a:	2300      	movs	r3, #0
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000822:	2200      	movs	r2, #0
 8000824:	4903      	ldr	r1, [pc, #12]	@ (8000834 <http_server_init+0x20>)
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <http_server_init+0x24>)
 8000828:	f014 fbd8 	bl	8014fdc <sys_thread_new>
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	080007a5 	.word	0x080007a5
 8000838:	08016200 	.word	0x08016200

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b5b0      	push	{r4, r5, r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f000 fbc6 	bl	8000fd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f81b 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f885 	bl	8000958 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800084e:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <main+0x3c>)
 8000850:	1d3c      	adds	r4, r7, #4
 8000852:	461d      	mov	r5, r3
 8000854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000858:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800085c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f003 ffac 	bl	80047c2 <osThreadCreate>
 800086a:	4603      	mov	r3, r0
 800086c:	4a03      	ldr	r2, [pc, #12]	@ (800087c <main+0x40>)
 800086e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000870:	f003 ff90 	bl	8004794 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <main+0x38>
 8000878:	08016218 	.word	0x08016218
 800087c:	2000048c 	.word	0x2000048c

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	@ 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f014 fd4d 	bl	801532e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <SystemClock_Config+0xd0>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a29      	ldr	r2, [pc, #164]	@ (8000950 <SystemClock_Config+0xd0>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <SystemClock_Config+0xd0>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <SystemClock_Config+0xd4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a24      	ldr	r2, [pc, #144]	@ (8000954 <SystemClock_Config+0xd4>)
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <SystemClock_Config+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008e8:	230f      	movs	r3, #15
 80008ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 252;
 80008ec:	23fc      	movs	r3, #252	@ 0xfc
 80008ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 f919 	bl	8002b34 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000908:	f000 f880 	bl	8000a0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800090c:	f002 f8c2 	bl	8002a94 <HAL_PWREx_EnableOverDrive>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000916:	f000 f879 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000926:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2106      	movs	r1, #6
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fb9f 	bl	800307c <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000944:	f000 f862 	bl	8000a0c <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	@ 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095e:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <MX_GPIO_Init+0x74>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a1a      	ldr	r2, [pc, #104]	@ (80009cc <MX_GPIO_Init+0x74>)
 8000964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_GPIO_Init+0x74>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_GPIO_Init+0x74>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <MX_GPIO_Init+0x74>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_GPIO_Init+0x74>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_GPIO_Init+0x74>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <MX_GPIO_Init+0x74>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_GPIO_Init+0x74>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_GPIO_Init+0x74>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <MX_GPIO_Init+0x74>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_GPIO_Init+0x74>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80009d8:	f003 f828 	bl	8003a2c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 80009dc:	f7ff ff1a 	bl	8000814 <http_server_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f003 ff46 	bl	8004872 <osDelay>
 80009e6:	e7fb      	b.n	80009e0 <StartDefaultTask+0x10>

080009e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fa:	f000 faf7 	bl	8000fec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40001000 	.word	0x40001000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a10      	ldr	r2, [pc, #64]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210f      	movs	r1, #15
 8000a52:	f06f 0001 	mvn.w	r0, #1
 8000a56:	f000 fbd1 	bl	80011fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	@ 0x38
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a78:	4b33      	ldr	r3, [pc, #204]	@ (8000b48 <HAL_InitTick+0xe0>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	4a32      	ldr	r2, [pc, #200]	@ (8000b48 <HAL_InitTick+0xe0>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a84:	4b30      	ldr	r3, [pc, #192]	@ (8000b48 <HAL_InitTick+0xe0>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a90:	f107 0210 	add.w	r2, r7, #16
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 fcc0 	bl	8003420 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aaa:	f002 fca5 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8000aae:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ab0:	e004      	b.n	8000abc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab2:	f002 fca1 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000abe:	4a23      	ldr	r2, [pc, #140]	@ (8000b4c <HAL_InitTick+0xe4>)
 8000ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac4:	0c9b      	lsrs	r3, r3, #18
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aca:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000acc:	4a21      	ldr	r2, [pc, #132]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ace:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000ad2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ad6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000adc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000af0:	4817      	ldr	r0, [pc, #92]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000af2:	f002 fcc7 	bl	8003484 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000afc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11b      	bne.n	8000b3c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b04:	4812      	ldr	r0, [pc, #72]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000b06:	f002 fd1f 	bl	8003548 <HAL_TIM_Base_Start_IT>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d111      	bne.n	8000b3c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b18:	2036      	movs	r0, #54	@ 0x36
 8000b1a:	f000 fb8b 	bl	8001234 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d808      	bhi.n	8000b36 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2036      	movs	r0, #54	@ 0x36
 8000b2a:	f000 fb67 	bl	80011fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <HAL_InitTick+0xf0>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e002      	b.n	8000b3c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3738      	adds	r7, #56	@ 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	431bde83 	.word	0x431bde83
 8000b50:	20000490 	.word	0x20000490
 8000b54:	40001000 	.word	0x40001000
 8000b58:	20000004 	.word	0x20000004

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b98:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <TIM6_DAC_IRQHandler+0x10>)
 8000b9a:	f002 fd4d 	bl	8003638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000490 	.word	0x20000490

08000ba8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <ETH_IRQHandler+0x10>)
 8000bae:	f000 fedd 	bl	800196c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20004ec4 	.word	0x20004ec4

08000bbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return 1;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_kill>:

int _kill(int pid, int sig)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bd6:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <_kill+0x20>)
 8000bd8:	2216      	movs	r2, #22
 8000bda:	601a      	str	r2, [r3, #0]
  return -1;
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	2000c104 	.word	0x2000c104

08000bf0 <_exit>:

void _exit (int status)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ffe5 	bl	8000bcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c02:	bf00      	nop
 8000c04:	e7fd      	b.n	8000c02 <_exit+0x12>

08000c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e00a      	b.n	8000c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c18:	f3af 8000 	nop.w
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	60ba      	str	r2, [r7, #8]
 8000c24:	b2ca      	uxtb	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dbf0      	blt.n	8000c18 <_read+0x12>
  }

  return len;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e009      	b.n	8000c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	60ba      	str	r2, [r7, #8]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbf1      	blt.n	8000c52 <_write+0x12>
  }
  return len;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_close>:

int _close(int file)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_isatty>:

int _isatty(int file)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb8:	2301      	movs	r3, #1
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d205      	bcs.n	8000d1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <_sbrk+0x6c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20050000 	.word	0x20050000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	200004dc 	.word	0x200004dc
 8000d48:	2000c118 	.word	0x2000c118
 8000d4c:	2000c104 	.word	0x2000c104

08000d50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d78:	f7ff ffea 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f014 fb7b 	bl	801549c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fd49 	bl	800083c <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000db8:	08022cd8 	.word	0x08022cd8
  ldr r2, =_sbss
 8000dbc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000dc0:	2000c114 	.word	0x2000c114

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>

08000dc6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00b      	beq.n	8000dee <LAN8742_RegisterBusIO+0x28>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <LAN8742_RegisterBusIO+0x28>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <LAN8742_RegisterBusIO+0x28>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e014      	b.n	8000e1e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d139      	bne.n	8000eba <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2220      	movs	r2, #32
 8000e58:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e01c      	b.n	8000e9a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	f107 020c 	add.w	r2, r7, #12
 8000e68:	2112      	movs	r1, #18
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da03      	bge.n	8000e7c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000e74:	f06f 0304 	mvn.w	r3, #4
 8000e78:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000e7a:	e00b      	b.n	8000e94 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d105      	bne.n	8000e94 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
         break;
 8000e92:	e005      	b.n	8000ea0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b1f      	cmp	r3, #31
 8000e9e:	d9df      	bls.n	8000e60 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b1f      	cmp	r3, #31
 8000ea6:	d902      	bls.n	8000eae <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ea8:	f06f 0302 	mvn.w	r3, #2
 8000eac:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000eba:	693b      	ldr	r3, [r7, #16]
 }
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	6810      	ldr	r0, [r2, #0]
 8000ed8:	f107 020c 	add.w	r2, r7, #12
 8000edc:	2101      	movs	r1, #1
 8000ede:	4798      	blx	r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da02      	bge.n	8000eec <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ee6:	f06f 0304 	mvn.w	r3, #4
 8000eea:	e06e      	b.n	8000fca <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6810      	ldr	r0, [r2, #0]
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4798      	blx	r3
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	da02      	bge.n	8000f08 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f02:	f06f 0304 	mvn.w	r3, #4
 8000f06:	e060      	b.n	8000fca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e059      	b.n	8000fca <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6810      	ldr	r0, [r2, #0]
 8000f1e:	f107 020c 	add.w	r2, r7, #12
 8000f22:	2100      	movs	r1, #0
 8000f24:	4798      	blx	r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da02      	bge.n	8000f32 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f2c:	f06f 0304 	mvn.w	r3, #4
 8000f30:	e04b      	b.n	8000fca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d11b      	bne.n	8000f74 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <LAN8742_GetLinkState+0x90>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f50:	2302      	movs	r3, #2
 8000f52:	e03a      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e033      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	e02c      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f70:	2305      	movs	r3, #5
 8000f72:	e02a      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6810      	ldr	r0, [r2, #0]
 8000f7c:	f107 020c 	add.w	r2, r7, #12
 8000f80:	211f      	movs	r1, #31
 8000f82:	4798      	blx	r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	da02      	bge.n	8000f90 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f8a:	f06f 0304 	mvn.w	r3, #4
 8000f8e:	e01c      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e015      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f003 031c 	and.w	r3, r3, #28
 8000fa4:	2b18      	cmp	r3, #24
 8000fa6:	d101      	bne.n	8000fac <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e00e      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 031c 	and.w	r3, r3, #28
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d101      	bne.n	8000fba <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e007      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 031c 	and.w	r3, r3, #28
 8000fc0:	2b14      	cmp	r3, #20
 8000fc2:	d101      	bne.n	8000fc8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	e000      	b.n	8000fca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fc8:	2305      	movs	r3, #5
    }
  }
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f000 f905 	bl	80011e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fdc:	200f      	movs	r0, #15
 8000fde:	f7ff fd43 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe2:	f7ff fd19 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	200004e0 	.word	0x200004e0

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200004e0 	.word	0x200004e0

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetREVID+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0c1b      	lsrs	r3, r3, #16
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e0042000 	.word	0xe0042000

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <__NVIC_SetPriorityGrouping+0x40>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <__NVIC_SetPriorityGrouping+0x40>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	05fa0000 	.word	0x05fa0000

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	@ (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	@ (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff4c 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120e:	f7ff ff61 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001212:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7ff ffb1 	bl	8001180 <NVIC_EncodePriority>
 800121e:	4602      	mov	r2, r0
 8001220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff80 	bl	800112c <__NVIC_SetPriority>
}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff54 	bl	80010f0 <__NVIC_EnableIRQ>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e086      	b.n	8001370 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001268:	2b00      	cmp	r3, #0
 800126a:	d106      	bne.n	800127a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2223      	movs	r2, #35	@ 0x23
 8001270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f003 f833 	bl	80042e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b3f      	ldr	r3, [pc, #252]	@ (8001378 <HAL_ETH_Init+0x128>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4a3e      	ldr	r2, [pc, #248]	@ (8001378 <HAL_ETH_Init+0x128>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001284:	6453      	str	r3, [r2, #68]	@ 0x44
 8001286:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <HAL_ETH_Init+0x128>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001292:	4b3a      	ldr	r3, [pc, #232]	@ (800137c <HAL_ETH_Init+0x12c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a39      	ldr	r2, [pc, #228]	@ (800137c <HAL_ETH_Init+0x12c>)
 8001298:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800129c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800129e:	4b37      	ldr	r3, [pc, #220]	@ (800137c <HAL_ETH_Init+0x12c>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	4935      	ldr	r1, [pc, #212]	@ (800137c <HAL_ETH_Init+0x12c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012ac:	4b33      	ldr	r3, [pc, #204]	@ (800137c <HAL_ETH_Init+0x12c>)
 80012ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff fea4 	bl	8001014 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ce:	e011      	b.n	80012f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d0:	f7ff fea0 	bl	8001014 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012de:	d909      	bls.n	80012f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2204      	movs	r2, #4
 80012e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	22e0      	movs	r2, #224	@ 0xe0
 80012ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e03d      	b.n	8001370 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1e4      	bne.n	80012d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 ff5c 	bl	80021c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f001 f807 	bl	8002320 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f001 f85d 	bl	80023d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	461a      	mov	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 ffc5 	bl	80022b0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001334:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <HAL_ETH_Init+0x130>)
 8001344:	430b      	orrs	r3, r1
 8001346:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800135a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2210      	movs	r2, #16
 800136a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	00020060 	.word	0x00020060

08001384 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001392:	2b10      	cmp	r3, #16
 8001394:	d15f      	bne.n	8001456 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2223      	movs	r2, #35	@ 0x23
 800139a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2204      	movs	r2, #4
 80013a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f9f6 	bl	800179c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fe37 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013dc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fd80 	bl	8001efc <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0208 	orr.w	r2, r2, #8
 800140a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff fe09 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0204 	orr.w	r2, r2, #4
 8001430:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143a:	69d9      	ldr	r1, [r3, #28]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <HAL_ETH_Start_IT+0xdc>)
 8001442:	430b      	orrs	r3, r1
 8001444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001448:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2223      	movs	r2, #35	@ 0x23
 800144e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
  }
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0001a0c1 	.word	0x0001a0c1

08001464 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001472:	2b23      	cmp	r3, #35	@ 0x23
 8001474:	d16e      	bne.n	8001554 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2223      	movs	r2, #35	@ 0x23
 800147a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001486:	69d9      	ldr	r1, [r3, #28]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <HAL_ETH_Stop_IT+0xfc>)
 800148e:	400b      	ands	r3, r1
 8001490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001494:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80014a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ac:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	f023 0302 	bic.w	r3, r3, #2
 80014c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014c4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0204 	bic.w	r2, r2, #4
 80014d4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fda4 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fd05 	bl	8001efc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0208 	bic.w	r2, r2, #8
 8001500:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff fd8e 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e00e      	b.n	800153c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	3212      	adds	r2, #18
 8001524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001528:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d9ed      	bls.n	800151e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2210      	movs	r2, #16
 800154c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e000      	b.n	8001556 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	fffe5f3e 	.word	0xfffe5f3e

08001564 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e045      	b.n	8001614 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800158e:	2b23      	cmp	r3, #35	@ 0x23
 8001590:	d13f      	bne.n	8001612 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800159a:	2201      	movs	r2, #1
 800159c:	6839      	ldr	r1, [r7, #0]
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 ff86 	bl	80024b0 <ETH_Prepare_Tx_Descriptors>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b0:	f043 0202 	orr.w	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e02a      	b.n	8001614 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015be:	f3bf 8f4f 	dsb	sy
}
 80015c2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d904      	bls.n	80015e0 <HAL_ETH_Transmit_IT+0x7c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	1f1a      	subs	r2, r3, #4
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fa:	461a      	mov	r2, r3
 80015fc:	2304      	movs	r3, #4
 80015fe:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001608:	461a      	mov	r2, r3
 800160a:	2300      	movs	r3, #0
 800160c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0a4      	b.n	8001792 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800164e:	2b23      	cmp	r3, #35	@ 0x23
 8001650:	d001      	beq.n	8001656 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e09d      	b.n	8001792 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	3212      	adds	r2, #18
 8001662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800166c:	f1c3 0304 	rsb	r3, r3, #4
 8001670:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001672:	e066      	b.n	8001742 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	69da      	ldr	r2, [r3, #28]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	699a      	ldr	r2, [r3, #24]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <HAL_ETH_ReadData+0x88>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03c      	beq.n	800171e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016c6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f002 ff9d 	bl	800463c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	441a      	add	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d902      	bls.n	8001730 <HAL_ETH_ReadData+0x114>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b04      	subs	r3, #4
 800172e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	3212      	adds	r2, #18
 8001736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001746:	2b00      	cmp	r3, #0
 8001748:	db06      	blt.n	8001758 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	429a      	cmp	r2, r3
 8001750:	d202      	bcs.n	8001758 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001752:	7cfb      	ldrb	r3, [r7, #19]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d08d      	beq.n	8001674 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	441a      	add	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f815 	bl	800179c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017a8:	2301      	movs	r3, #1
 80017aa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017b0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	3212      	adds	r2, #18
 80017b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017bc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017c2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017c4:	e042      	b.n	800184c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d112      	bne.n	80017f4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 ff02 	bl	80045dc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	74fb      	strb	r3, [r7, #19]
 80017e2:	e007      	b.n	80017f4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	461a      	mov	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d028      	beq.n	800184c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <ETH_UpdateDescriptor+0x104>)
 8001808:	4313      	orrs	r3, r2
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	6053      	str	r3, [r2, #4]
 800180e:	e005      	b.n	800181c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3301      	adds	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d902      	bls.n	800183a <ETH_UpdateDescriptor+0x9e>
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	3b04      	subs	r3, #4
 8001838:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	3212      	adds	r2, #18
 8001840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001844:	617b      	str	r3, [r7, #20]
      desccount--;
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	3b01      	subs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <ETH_UpdateDescriptor+0xbc>
 8001852:	7cfb      	ldrb	r3, [r7, #19]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1b6      	bne.n	80017c6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	429a      	cmp	r2, r3
 8001860:	d01a      	beq.n	8001898 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800186c:	f3bf 8f5f 	dmb	sy
}
 8001870:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6919      	ldr	r1, [r3, #16]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	18ca      	adds	r2, r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	80004000 	.word	0x80004000

080018a4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3318      	adds	r3, #24
 80018b0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018bc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80018c2:	e047      	b.n	8001954 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	3304      	adds	r3, #4
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	3301      	adds	r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d902      	bls.n	80018f0 <HAL_ETH_ReleaseTxPacket+0x4c>
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	3b04      	subs	r3, #4
 80018ee:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d02c      	beq.n	8001954 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68d9      	ldr	r1, [r3, #12]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db1f      	blt.n	8001950 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	3304      	adds	r3, #4
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fecf 	bl	80046c0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	3304      	adds	r3, #4
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3301      	adds	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d902      	bls.n	8001942 <HAL_ETH_ReleaseTxPacket+0x9e>
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	3b04      	subs	r3, #4
 8001940:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800194e:	e001      	b.n	8001954 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_ETH_ReleaseTxPacket+0xbc>
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1b1      	bne.n	80018c4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001994:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac4 <HAL_ETH_IRQHandler+0x158>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00e      	beq.n	80019c2 <HAL_ETH_IRQHandler+0x56>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <HAL_ETH_IRQHandler+0x15c>)
 80019ba:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f002 f9a3 	bl	8003d08 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00f      	beq.n	80019ec <HAL_ETH_IRQHandler+0x80>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80019e4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f002 f99e 	bl	8003d28 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d042      	beq.n	8001a7c <HAL_ETH_IRQHandler+0x110>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03d      	beq.n	8001a7c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a06:	f043 0208 	orr.w	r2, r3, #8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01a      	beq.n	8001a50 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <HAL_ETH_IRQHandler+0x160>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001a40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a44:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	22e0      	movs	r2, #224	@ 0xe0
 8001a4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001a4e:	e012      	b.n	8001a76 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001a5e:	4013      	ands	r3, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001a74:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f002 f966 	bl	8003d48 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00e      	beq.n	8001aa4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f81a 	bl	8001ad0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_ETH_IRQHandler+0x158>)
 8001ab0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ab4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f814 	bl	8001ae4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013c00 	.word	0x40013c00
 8001ac8:	00010040 	.word	0x00010040
 8001acc:	007e2000 	.word	0x007e2000

08001ad0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 031c 	and.w	r3, r3, #28
 8001b14:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	02db      	lsls	r3, r3, #11
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	019b      	lsls	r3, r3, #6
 8001b26:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f023 0302 	bic.w	r3, r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001b48:	f7ff fa64 	bl	8001014 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b4e:	e00d      	b.n	8001b6c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b50:	f7ff fa60 	bl	8001014 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5e:	d301      	bcc.n	8001b64 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e010      	b.n	8001b86 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ec      	bne.n	8001b50 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 031c 	and.w	r3, r3, #28
 8001baa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	02db      	lsls	r3, r3, #11
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	019b      	lsls	r3, r3, #6
 8001bbc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be8:	f7ff fa14 	bl	8001014 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bee:	e00d      	b.n	8001c0c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001bf0:	f7ff fa10 	bl	8001014 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfe:	d301      	bcc.n	8001c04 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e009      	b.n	8001c18 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ec      	bne.n	8001bf0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0e6      	b.n	8001e02 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf14      	ite	ne
 8001c88:	2301      	movne	r3, #1
 8001c8a:	2300      	moveq	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2301      	moveq	r3, #1
 8001da0:	2300      	movne	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf14      	ite	ne
 8001df2:	2301      	movne	r3, #1
 8001df4:	2300      	moveq	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00b      	b.n	8001e3a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d105      	bne.n	8001e38 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f88a 	bl	8001f48 <ETH_SetMACConfig>

    return HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e000      	b.n	8001e3a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
  }
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 031c 	bic.w	r3, r3, #28
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e5c:	f001 fac0 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8001e60:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d804      	bhi.n	8001e74 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e019      	b.n	8001ea8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <HAL_ETH_SetMDIOClockRange+0x78>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d204      	bcs.n	8001e86 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f043 030c 	orr.w	r3, r3, #12
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e010      	b.n	8001ea8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d90c      	bls.n	8001ea8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d804      	bhi.n	8001ea0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e003      	b.n	8001ea8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f043 0310 	orr.w	r3, r3, #16
 8001ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	611a      	str	r2, [r3, #16]
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	02160ebf 	.word	0x02160ebf
 8001ebc:	03938700 	.word	0x03938700
 8001ec0:	05f5e0ff 	.word	0x05f5e0ff
 8001ec4:	08f0d17f 	.word	0x08f0d17f

08001ec8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f1e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f7ff f87d 	bl	800102c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f3c:	6193      	str	r3, [r2, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4b53      	ldr	r3, [pc, #332]	@ (80020ac <ETH_SetMACConfig+0x164>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	7b9b      	ldrb	r3, [r3, #14]
 8001f66:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	7c12      	ldrb	r2, [r2, #16]
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d102      	bne.n	8001f76 <ETH_SetMACConfig+0x2e>
 8001f70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f74:	e000      	b.n	8001f78 <ETH_SetMACConfig+0x30>
 8001f76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	7c52      	ldrb	r2, [r2, #17]
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d102      	bne.n	8001f88 <ETH_SetMACConfig+0x40>
 8001f82:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f86:	e000      	b.n	8001f8a <ETH_SetMACConfig+0x42>
 8001f88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f8a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	7fdb      	ldrb	r3, [r3, #31]
 8001f96:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f98:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	7f92      	ldrb	r2, [r2, #30]
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d102      	bne.n	8001fae <ETH_SetMACConfig+0x66>
 8001fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fac:	e000      	b.n	8001fb0 <ETH_SetMACConfig+0x68>
 8001fae:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7f1b      	ldrb	r3, [r3, #28]
 8001fb6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fb8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fbe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001fc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d102      	bne.n	8001fd8 <ETH_SetMACConfig+0x90>
 8001fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd6:	e000      	b.n	8001fda <ETH_SetMACConfig+0x92>
 8001fd8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	7bdb      	ldrb	r3, [r3, #15]
 8001fe0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fe2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ff0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800200a:	2001      	movs	r0, #1
 800200c:	f7ff f80e 	bl	800102c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002036:	2a00      	cmp	r2, #0
 8002038:	d101      	bne.n	800203e <ETH_SetMACConfig+0xf6>
 800203a:	2280      	movs	r2, #128	@ 0x80
 800203c:	e000      	b.n	8002040 <ETH_SetMACConfig+0xf8>
 800203e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002040:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800204e:	2a01      	cmp	r2, #1
 8002050:	d101      	bne.n	8002056 <ETH_SetMACConfig+0x10e>
 8002052:	2208      	movs	r2, #8
 8002054:	e000      	b.n	8002058 <ETH_SetMACConfig+0x110>
 8002056:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002058:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002060:	2a01      	cmp	r2, #1
 8002062:	d101      	bne.n	8002068 <ETH_SetMACConfig+0x120>
 8002064:	2204      	movs	r2, #4
 8002066:	e000      	b.n	800206a <ETH_SetMACConfig+0x122>
 8002068:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800206a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002072:	2a01      	cmp	r2, #1
 8002074:	d101      	bne.n	800207a <ETH_SetMACConfig+0x132>
 8002076:	2202      	movs	r2, #2
 8002078:	e000      	b.n	800207c <ETH_SetMACConfig+0x134>
 800207a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800207c:	4313      	orrs	r3, r2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002094:	2001      	movs	r0, #1
 8002096:	f7fe ffc9 	bl	800102c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	fd20810f 	.word	0xfd20810f

080020b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4b3d      	ldr	r3, [pc, #244]	@ (80021c0 <ETH_SetDMAConfig+0x110>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7b1b      	ldrb	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <ETH_SetDMAConfig+0x2c>
 80020d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020da:	e000      	b.n	80020de <ETH_SetDMAConfig+0x2e>
 80020dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	7b5b      	ldrb	r3, [r3, #13]
 80020e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	7f52      	ldrb	r2, [r2, #29]
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d102      	bne.n	80020f4 <ETH_SetDMAConfig+0x44>
 80020ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020f2:	e000      	b.n	80020f6 <ETH_SetDMAConfig+0x46>
 80020f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	7b9b      	ldrb	r3, [r3, #14]
 80020fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002104:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	7f1b      	ldrb	r3, [r3, #28]
 800210a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800210c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	7f9b      	ldrb	r3, [r3, #30]
 8002112:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002114:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800211a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002122:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002124:	4313      	orrs	r3, r2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002146:	2001      	movs	r0, #1
 8002148:	f7fe ff70 	bl	800102c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002154:	461a      	mov	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	791b      	ldrb	r3, [r3, #4]
 800215e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002164:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800216a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002170:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002178:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800217a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002182:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002188:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002192:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002196:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7fe ff41 	bl	800102c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	f8de3f23 	.word	0xf8de3f23

080021c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0a6      	sub	sp, #152	@ 0x98
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002206:	2300      	movs	r3, #0
 8002208:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002210:	2300      	movs	r3, #0
 8002212:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800222c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002230:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800223e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002242:	4619      	mov	r1, r3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fe7f 	bl	8001f48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800224a:	2301      	movs	r3, #1
 800224c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800224e:	2301      	movs	r3, #1
 8002250:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002258:	2301      	movs	r3, #1
 800225a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002276:	2301      	movs	r3, #1
 8002278:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800227a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800227e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002280:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002284:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800228a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002292:	2300      	movs	r3, #0
 8002294:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff05 	bl	80020b0 <ETH_SetDMAConfig>
}
 80022a6:	bf00      	nop
 80022a8:	3798      	adds	r7, #152	@ 0x98
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3305      	adds	r3, #5
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	3204      	adds	r2, #4
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <ETH_MACAddressConfig+0x68>)
 80022d2:	4413      	add	r3, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3303      	adds	r3, #3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	061a      	lsls	r2, r3, #24
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3302      	adds	r3, #2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3301      	adds	r3, #1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	4313      	orrs	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <ETH_MACAddressConfig+0x6c>)
 8002302:	4413      	add	r3, r2
 8002304:	461a      	mov	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	6013      	str	r3, [r2, #0]
}
 800230a:	bf00      	nop
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40028040 	.word	0x40028040
 800231c:	40028044 	.word	0x40028044

08002320 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e03e      	b.n	80023ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68d9      	ldr	r1, [r3, #12]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2200      	movs	r2, #0
 8002356:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	3206      	adds	r2, #6
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d80c      	bhi.n	8002390 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	e004      	b.n	800239a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3301      	adds	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d9bd      	bls.n	800232e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023c4:	611a      	str	r2, [r3, #16]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e048      	b.n	8002472 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6919      	ldr	r1, [r3, #16]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2200      	movs	r2, #0
 80023fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800241c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	3212      	adds	r2, #18
 800243e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d80c      	bhi.n	8002462 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6919      	ldr	r1, [r3, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	461a      	mov	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	e004      	b.n	800246c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d9b3      	bls.n	80023e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a2:	60da      	str	r2, [r3, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b091      	sub	sp, #68	@ 0x44
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3318      	adds	r3, #24
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024f2:	d007      	beq.n	8002504 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f8:	3304      	adds	r3, #4
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	e111      	b.n	800272c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250a:	3301      	adds	r3, #1
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800250e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002516:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4b86      	ldr	r3, [pc, #536]	@ (8002738 <ETH_Prepare_Tx_Descriptors+0x288>)
 800251e:	4013      	ands	r3, r2
 8002520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002522:	6852      	ldr	r2, [r2, #4]
 8002524:	431a      	orrs	r2, r3
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	431a      	orrs	r2, r3
 8002544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002546:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	431a      	orrs	r2, r3
 8002562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002564:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800257a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800258a:	e082      	b.n	8002692 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800258c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e005      	b.n	80025b8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80025b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ba:	3301      	adds	r3, #1
 80025bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d902      	bls.n	80025ca <ETH_Prepare_Tx_Descriptors+0x11a>
 80025c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c6:	3b04      	subs	r3, #4
 80025c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025e0:	d007      	beq.n	80025f2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e6:	3304      	adds	r3, #4
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d029      	beq.n	8002646 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002600:	2300      	movs	r3, #0
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002604:	e019      	b.n	800263a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002606:	f3bf 8f5f 	dmb	sy
}
 800260a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800260c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800261a:	3301      	adds	r3, #1
 800261c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800261e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002620:	2b03      	cmp	r3, #3
 8002622:	d902      	bls.n	800262a <ETH_Prepare_Tx_Descriptors+0x17a>
 8002624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002626:	3b04      	subs	r3, #4
 8002628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002636:	3301      	adds	r3, #1
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800263a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800263c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800263e:	429a      	cmp	r2, r3
 8002640:	d3e1      	bcc.n	8002606 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	e072      	b.n	800272c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002650:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002654:	3301      	adds	r3, #1
 8002656:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800265e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002666:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4b32      	ldr	r3, [pc, #200]	@ (8002738 <ETH_Prepare_Tx_Descriptors+0x288>)
 800266e:	4013      	ands	r3, r2
 8002670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002672:	6852      	ldr	r2, [r2, #4]
 8002674:	431a      	orrs	r2, r3
 8002676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002678:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	3301      	adds	r3, #1
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002680:	f3bf 8f5f 	dmb	sy
}
 8002684:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f af78 	bne.w	800258c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80026aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e005      	b.n	80026bc <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	6a3a      	ldr	r2, [r7, #32]
 80026cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80026d2:	f3bf 8f5f 	dmb	sy
}
 80026d6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ec:	3304      	adds	r3, #4
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026f8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	613b      	str	r3, [r7, #16]
  return(result);
 8002700:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	2301      	movs	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f383 8810 	msr	PRIMASK, r3
}
 800270e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002716:	4413      	add	r3, r2
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f383 8810 	msr	PRIMASK, r3
}
 8002728:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3744      	adds	r7, #68	@ 0x44
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	ffffe000 	.word	0xffffe000

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	@ 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e175      	b.n	8002a48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	f040 8164 	bne.w	8002a42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d005      	beq.n	8002792 <HAL_GPIO_Init+0x56>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d130      	bne.n	80027f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d017      	beq.n	8002830 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d123      	bne.n	8002884 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	08da      	lsrs	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3208      	adds	r2, #8
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0203 	and.w	r2, r3, #3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80be 	beq.w	8002a42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	4b66      	ldr	r3, [pc, #408]	@ (8002a60 <HAL_GPIO_Init+0x324>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	4a65      	ldr	r2, [pc, #404]	@ (8002a60 <HAL_GPIO_Init+0x324>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d2:	4b63      	ldr	r3, [pc, #396]	@ (8002a60 <HAL_GPIO_Init+0x324>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028de:	4a61      	ldr	r2, [pc, #388]	@ (8002a64 <HAL_GPIO_Init+0x328>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a58      	ldr	r2, [pc, #352]	@ (8002a68 <HAL_GPIO_Init+0x32c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d037      	beq.n	800297a <HAL_GPIO_Init+0x23e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a57      	ldr	r2, [pc, #348]	@ (8002a6c <HAL_GPIO_Init+0x330>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d031      	beq.n	8002976 <HAL_GPIO_Init+0x23a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a56      	ldr	r2, [pc, #344]	@ (8002a70 <HAL_GPIO_Init+0x334>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02b      	beq.n	8002972 <HAL_GPIO_Init+0x236>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a55      	ldr	r2, [pc, #340]	@ (8002a74 <HAL_GPIO_Init+0x338>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d025      	beq.n	800296e <HAL_GPIO_Init+0x232>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a54      	ldr	r2, [pc, #336]	@ (8002a78 <HAL_GPIO_Init+0x33c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01f      	beq.n	800296a <HAL_GPIO_Init+0x22e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a53      	ldr	r2, [pc, #332]	@ (8002a7c <HAL_GPIO_Init+0x340>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x22a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	@ (8002a80 <HAL_GPIO_Init+0x344>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x226>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a51      	ldr	r2, [pc, #324]	@ (8002a84 <HAL_GPIO_Init+0x348>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x222>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a50      	ldr	r2, [pc, #320]	@ (8002a88 <HAL_GPIO_Init+0x34c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x21e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4f      	ldr	r2, [pc, #316]	@ (8002a8c <HAL_GPIO_Init+0x350>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x21a>
 8002952:	2309      	movs	r3, #9
 8002954:	e012      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002956:	230a      	movs	r3, #10
 8002958:	e010      	b.n	800297c <HAL_GPIO_Init+0x240>
 800295a:	2308      	movs	r3, #8
 800295c:	e00e      	b.n	800297c <HAL_GPIO_Init+0x240>
 800295e:	2307      	movs	r3, #7
 8002960:	e00c      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002962:	2306      	movs	r3, #6
 8002964:	e00a      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002966:	2305      	movs	r3, #5
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x240>
 800296a:	2304      	movs	r3, #4
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x240>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x240>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	@ (8002a64 <HAL_GPIO_Init+0x328>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a90 <HAL_GPIO_Init+0x354>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a34      	ldr	r2, [pc, #208]	@ (8002a90 <HAL_GPIO_Init+0x354>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b32      	ldr	r3, [pc, #200]	@ (8002a90 <HAL_GPIO_Init+0x354>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a29      	ldr	r2, [pc, #164]	@ (8002a90 <HAL_GPIO_Init+0x354>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ee:	4b28      	ldr	r3, [pc, #160]	@ (8002a90 <HAL_GPIO_Init+0x354>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a12:	4a1f      	ldr	r2, [pc, #124]	@ (8002a90 <HAL_GPIO_Init+0x354>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	@ (8002a90 <HAL_GPIO_Init+0x354>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	@ (8002a90 <HAL_GPIO_Init+0x354>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f ae86 	bls.w	800275c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	@ 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40021400 	.word	0x40021400
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40021c00 	.word	0x40021c00
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40022400 	.word	0x40022400
 8002a90:	40013c00 	.word	0x40013c00

08002a94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1d      	ldr	r2, [pc, #116]	@ (8002b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac2:	f7fe faa7 	bl	8001014 <HAL_GetTick>
 8002ac6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ac8:	e009      	b.n	8002ade <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aca:	f7fe faa3 	bl	8001014 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ad8:	d901      	bls.n	8002ade <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e022      	b.n	8002b24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ade:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aea:	d1ee      	bne.n	8002aca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aec:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0f      	ldr	r2, [pc, #60]	@ (8002b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af8:	f7fe fa8c 	bl	8001014 <HAL_GetTick>
 8002afc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002afe:	e009      	b.n	8002b14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b00:	f7fe fa88 	bl	8001014 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b0e:	d901      	bls.n	8002b14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e007      	b.n	8002b24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b20:	d1ee      	bne.n	8002b00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40007000 	.word	0x40007000

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e291      	b.n	800306e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8087 	beq.w	8002c66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	4b96      	ldr	r3, [pc, #600]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b64:	4b93      	ldr	r3, [pc, #588]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x62>
 8002b70:	4b90      	ldr	r3, [pc, #576]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x130>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d168      	bne.n	8002c64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e26b      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x7a>
 8002ba0:	4b84      	ldr	r3, [pc, #528]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a83      	ldr	r2, [pc, #524]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0xd8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x9c>
 8002bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7e      	ldr	r2, [pc, #504]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xd8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xc0>
 8002bda:	4b76      	ldr	r3, [pc, #472]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a75      	ldr	r2, [pc, #468]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b73      	ldr	r3, [pc, #460]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a72      	ldr	r2, [pc, #456]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xd8>
 8002bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b6c      	ldr	r3, [pc, #432]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6b      	ldr	r2, [pc, #428]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe f9fe 	bl	8001014 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe f9fa 	bl	8001014 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e21f      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b61      	ldr	r3, [pc, #388]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe8>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f9ea 	bl	8001014 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe f9e6 	bl	8001014 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	@ 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e20b      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b57      	ldr	r3, [pc, #348]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x110>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d069      	beq.n	8002d46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	4b50      	ldr	r3, [pc, #320]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x190>
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b47      	ldr	r3, [pc, #284]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x17a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1df      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b41      	ldr	r3, [pc, #260]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	493d      	ldr	r1, [pc, #244]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e040      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b39      	ldr	r3, [pc, #228]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a38      	ldr	r2, [pc, #224]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe f99c 	bl	8001014 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7fe f998 	bl	8001014 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1bd      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b30      	ldr	r3, [pc, #192]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4929      	ldr	r1, [pc, #164]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
 8002d12:	e018      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d14:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a26      	ldr	r2, [pc, #152]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe f978 	bl	8001014 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d28:	f7fe f974 	bl	8001014 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e199      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d038      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d019      	beq.n	8002d8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5e:	4a15      	ldr	r2, [pc, #84]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7fe f955 	bl	8001014 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6e:	f7fe f951 	bl	8001014 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e176      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d80:	4b0c      	ldr	r3, [pc, #48]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x23a>
 8002d8c:	e01a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8e:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d92:	4a08      	ldr	r2, [pc, #32]	@ (8002db4 <HAL_RCC_OscConfig+0x280>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe f93b 	bl	8001014 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da2:	f7fe f937 	bl	8001014 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d903      	bls.n	8002db8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e15c      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
 8002db4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	4b91      	ldr	r3, [pc, #580]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ee      	bne.n	8002da2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a4 	beq.w	8002f1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b88      	ldr	r3, [pc, #544]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	4a87      	ldr	r2, [pc, #540]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dea:	4b85      	ldr	r3, [pc, #532]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dfa:	4b82      	ldr	r3, [pc, #520]	@ (8003004 <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e06:	4b7f      	ldr	r3, [pc, #508]	@ (8003004 <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003004 <HAL_RCC_OscConfig+0x4d0>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fe f8ff 	bl	8001014 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe f8fb 	bl	8001014 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b64      	cmp	r3, #100	@ 0x64
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e120      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2c:	4b75      	ldr	r3, [pc, #468]	@ (8003004 <HAL_RCC_OscConfig+0x4d0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x31a>
 8002e40:	4b6f      	ldr	r3, [pc, #444]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e44:	4a6e      	ldr	r2, [pc, #440]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4c:	e02d      	b.n	8002eaa <HAL_RCC_OscConfig+0x376>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x33c>
 8002e56:	4b6a      	ldr	r3, [pc, #424]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	4a69      	ldr	r2, [pc, #420]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e62:	4b67      	ldr	r3, [pc, #412]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e66:	4a66      	ldr	r2, [pc, #408]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCC_OscConfig+0x376>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x35e>
 8002e78:	4b61      	ldr	r3, [pc, #388]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	4a60      	ldr	r2, [pc, #384]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e84:	4b5e      	ldr	r3, [pc, #376]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e88:	4a5d      	ldr	r2, [pc, #372]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e90:	e00b      	b.n	8002eaa <HAL_RCC_OscConfig+0x376>
 8002e92:	4b5b      	ldr	r3, [pc, #364]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a5a      	ldr	r2, [pc, #360]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9e:	4b58      	ldr	r3, [pc, #352]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	4a57      	ldr	r2, [pc, #348]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d015      	beq.n	8002ede <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fe f8af 	bl	8001014 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe f8ab 	bl	8001014 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0ce      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ee      	beq.n	8002eba <HAL_RCC_OscConfig+0x386>
 8002edc:	e014      	b.n	8002f08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe f899 	bl	8001014 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe f895 	bl	8001014 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0b8      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	4b40      	ldr	r3, [pc, #256]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	4a3b      	ldr	r2, [pc, #236]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f18:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80a4 	beq.w	800306c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f24:	4b36      	ldr	r3, [pc, #216]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d06b      	beq.n	8003008 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d149      	bne.n	8002fcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b31      	ldr	r3, [pc, #196]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a30      	ldr	r2, [pc, #192]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe f866 	bl	8001014 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe f862 	bl	8001014 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e087      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5e:	4b28      	ldr	r3, [pc, #160]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	3b01      	subs	r3, #1
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	4a1b      	ldr	r2, [pc, #108]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f836 	bl	8001014 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe f832 	bl	8001014 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e057      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x478>
 8002fca:	e04f      	b.n	800306c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f81c 	bl	8001014 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe f818 	bl	8001014 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e03d      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	4b03      	ldr	r3, [pc, #12]	@ (8003000 <HAL_RCC_OscConfig+0x4cc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x4ac>
 8002ffe:	e035      	b.n	800306c <HAL_RCC_OscConfig+0x538>
 8003000:	40023800 	.word	0x40023800
 8003004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003008:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <HAL_RCC_OscConfig+0x544>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d028      	beq.n	8003068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d121      	bne.n	8003068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d11a      	bne.n	8003068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800303e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003040:	4293      	cmp	r3, r2
 8003042:	d111      	bne.n	8003068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	3b01      	subs	r3, #1
 8003052:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800

0800307c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0d0      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b6a      	ldr	r3, [pc, #424]	@ (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b67      	ldr	r3, [pc, #412]	@ (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 020f 	bic.w	r2, r3, #15
 80030aa:	4965      	ldr	r1, [pc, #404]	@ (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b63      	ldr	r3, [pc, #396]	@ (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030dc:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a58      	ldr	r2, [pc, #352]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f4:	4b53      	ldr	r3, [pc, #332]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a52      	ldr	r2, [pc, #328]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b50      	ldr	r3, [pc, #320]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	494d      	ldr	r1, [pc, #308]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d040      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d115      	bne.n	800315e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	4b41      	ldr	r3, [pc, #260]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e073      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b3d      	ldr	r3, [pc, #244]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06b      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315e:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 0203 	bic.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4936      	ldr	r1, [pc, #216]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	4313      	orrs	r3, r2
 800316e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fd ff50 	bl	8001014 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	e00a      	b.n	800318e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fd ff4c 	bl	8001014 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e053      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 020c 	and.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d1eb      	bne.n	8003178 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d210      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 020f 	bic.w	r2, r3, #15
 80031b6:	4922      	ldr	r1, [pc, #136]	@ (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4916      	ldr	r1, [pc, #88]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	490e      	ldr	r1, [pc, #56]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800320e:	f000 f821 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	490a      	ldr	r1, [pc, #40]	@ (8003248 <HAL_RCC_ClockConfig+0x1cc>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a09      	ldr	r2, [pc, #36]	@ (800324c <HAL_RCC_ClockConfig+0x1d0>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_ClockConfig+0x1d4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd fc1a 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00
 8003244:	40023800 	.word	0x40023800
 8003248:	080197d4 	.word	0x080197d4
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004

08003254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003258:	b090      	sub	sp, #64	@ 0x40
 800325a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003260:	2300      	movs	r3, #0
 8003262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003264:	2300      	movs	r3, #0
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326c:	4b59      	ldr	r3, [pc, #356]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b08      	cmp	r3, #8
 8003276:	d00d      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x40>
 8003278:	2b08      	cmp	r3, #8
 800327a:	f200 80a1 	bhi.w	80033c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x34>
 8003282:	2b04      	cmp	r3, #4
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x3a>
 8003286:	e09b      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003288:	4b53      	ldr	r3, [pc, #332]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800328a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800328c:	e09b      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328e:	4b53      	ldr	r3, [pc, #332]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003290:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003292:	e098      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003294:	4b4f      	ldr	r3, [pc, #316]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800329e:	4b4d      	ldr	r3, [pc, #308]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d028      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032aa:	4b4a      	ldr	r3, [pc, #296]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	099b      	lsrs	r3, r3, #6
 80032b0:	2200      	movs	r2, #0
 80032b2:	623b      	str	r3, [r7, #32]
 80032b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032bc:	2100      	movs	r1, #0
 80032be:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x188>)
 80032c0:	fb03 f201 	mul.w	r2, r3, r1
 80032c4:	2300      	movs	r3, #0
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	4a43      	ldr	r2, [pc, #268]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x188>)
 80032ce:	fba0 1202 	umull	r1, r2, r0, r2
 80032d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d4:	460a      	mov	r2, r1
 80032d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032da:	4413      	add	r3, r2
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e0:	2200      	movs	r2, #0
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	61fa      	str	r2, [r7, #28]
 80032e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032ee:	f7fc ffef 	bl	80002d0 <__aeabi_uldivmod>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4613      	mov	r3, r2
 80032f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032fa:	e053      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fc:	4b35      	ldr	r3, [pc, #212]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	2200      	movs	r2, #0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	617a      	str	r2, [r7, #20]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800330e:	f04f 0b00 	mov.w	fp, #0
 8003312:	4652      	mov	r2, sl
 8003314:	465b      	mov	r3, fp
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	0159      	lsls	r1, r3, #5
 8003320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003324:	0150      	lsls	r0, r2, #5
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	ebb2 080a 	subs.w	r8, r2, sl
 800332e:	eb63 090b 	sbc.w	r9, r3, fp
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800333e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003342:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003346:	ebb2 0408 	subs.w	r4, r2, r8
 800334a:	eb63 0509 	sbc.w	r5, r3, r9
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	00eb      	lsls	r3, r5, #3
 8003358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800335c:	00e2      	lsls	r2, r4, #3
 800335e:	4614      	mov	r4, r2
 8003360:	461d      	mov	r5, r3
 8003362:	eb14 030a 	adds.w	r3, r4, sl
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	eb45 030b 	adc.w	r3, r5, fp
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800337a:	4629      	mov	r1, r5
 800337c:	028b      	lsls	r3, r1, #10
 800337e:	4621      	mov	r1, r4
 8003380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003384:	4621      	mov	r1, r4
 8003386:	028a      	lsls	r2, r1, #10
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338e:	2200      	movs	r2, #0
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	60fa      	str	r2, [r7, #12]
 8003394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003398:	f7fc ff9a 	bl	80002d0 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4613      	mov	r3, r2
 80033a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	3301      	adds	r3, #1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033be:	e002      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80033c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3740      	adds	r7, #64	@ 0x40
 80033cc:	46bd      	mov	sp, r7
 80033ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	017d7840 	.word	0x017d7840

080033e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000000 	.word	0x20000000

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033fc:	f7ff fff0 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4903      	ldr	r1, [pc, #12]	@ (800341c <HAL_RCC_GetPCLK1Freq+0x24>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	080197e4 	.word	0x080197e4

08003420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	220f      	movs	r2, #15
 800342e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003430:	4b12      	ldr	r3, [pc, #72]	@ (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800343c:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003448:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003454:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003462:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <HAL_RCC_GetClockConfig+0x60>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 020f 	and.w	r2, r3, #15
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e049      	b.n	800352a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f841 	bl	8003532 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f000 f9e8 	bl	8003898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d001      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e054      	b.n	800360a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a26      	ldr	r2, [pc, #152]	@ (8003618 <HAL_TIM_Base_Start_IT+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d022      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x80>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358a:	d01d      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x80>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_TIM_Base_Start_IT+0xd4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d018      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x80>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a21      	ldr	r2, [pc, #132]	@ (8003620 <HAL_TIM_Base_Start_IT+0xd8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x80>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003624 <HAL_TIM_Base_Start_IT+0xdc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00e      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x80>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003628 <HAL_TIM_Base_Start_IT+0xe0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d009      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x80>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <HAL_TIM_Base_Start_IT+0xe4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x80>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <HAL_TIM_Base_Start_IT+0xe8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d115      	bne.n	80035f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	4b19      	ldr	r3, [pc, #100]	@ (8003634 <HAL_TIM_Base_Start_IT+0xec>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d015      	beq.n	8003606 <HAL_TIM_Base_Start_IT+0xbe>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e0:	d011      	beq.n	8003606 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f2:	e008      	b.n	8003606 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e000      	b.n	8003608 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003606:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40010400 	.word	0x40010400
 800362c:	40014000 	.word	0x40014000
 8003630:	40001800 	.word	0x40001800
 8003634:	00010007 	.word	0x00010007

08003638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d020      	beq.n	800369c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0202 	mvn.w	r2, #2
 800366c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8e9 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8db 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f8ec 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d020      	beq.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01b      	beq.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0204 	mvn.w	r2, #4
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8c3 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8b5 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8c6 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d020      	beq.n	8003734 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0208 	mvn.w	r2, #8
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2204      	movs	r2, #4
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f89d 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f88f 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f8a0 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	d020      	beq.n	8003780 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0210 	mvn.w	r2, #16
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2208      	movs	r2, #8
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f877 	bl	800385a <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f869 	bl	8003846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f87a 	bl	800386e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0201 	mvn.w	r2, #1
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd f922 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80037ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f919 	bl	8003a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80037ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f911 	bl	8003a18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00c      	beq.n	800381a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f834 	bl	8003882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00c      	beq.n	800383e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0220 	mvn.w	r2, #32
 8003836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8d9 	bl	80039f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a46      	ldr	r2, [pc, #280]	@ (80039c4 <TIM_Base_SetConfig+0x12c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d013      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b6:	d00f      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a43      	ldr	r2, [pc, #268]	@ (80039c8 <TIM_Base_SetConfig+0x130>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00b      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a42      	ldr	r2, [pc, #264]	@ (80039cc <TIM_Base_SetConfig+0x134>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a41      	ldr	r2, [pc, #260]	@ (80039d0 <TIM_Base_SetConfig+0x138>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a40      	ldr	r2, [pc, #256]	@ (80039d4 <TIM_Base_SetConfig+0x13c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d108      	bne.n	80038ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a35      	ldr	r2, [pc, #212]	@ (80039c4 <TIM_Base_SetConfig+0x12c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d02b      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f8:	d027      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a32      	ldr	r2, [pc, #200]	@ (80039c8 <TIM_Base_SetConfig+0x130>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d023      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a31      	ldr	r2, [pc, #196]	@ (80039cc <TIM_Base_SetConfig+0x134>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01f      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a30      	ldr	r2, [pc, #192]	@ (80039d0 <TIM_Base_SetConfig+0x138>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01b      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2f      	ldr	r2, [pc, #188]	@ (80039d4 <TIM_Base_SetConfig+0x13c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d017      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2e      	ldr	r2, [pc, #184]	@ (80039d8 <TIM_Base_SetConfig+0x140>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2d      	ldr	r2, [pc, #180]	@ (80039dc <TIM_Base_SetConfig+0x144>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00f      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2c      	ldr	r2, [pc, #176]	@ (80039e0 <TIM_Base_SetConfig+0x148>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2b      	ldr	r2, [pc, #172]	@ (80039e4 <TIM_Base_SetConfig+0x14c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2a      	ldr	r2, [pc, #168]	@ (80039e8 <TIM_Base_SetConfig+0x150>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a29      	ldr	r2, [pc, #164]	@ (80039ec <TIM_Base_SetConfig+0x154>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a10      	ldr	r2, [pc, #64]	@ (80039c4 <TIM_Base_SetConfig+0x12c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0xf8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a12      	ldr	r2, [pc, #72]	@ (80039d4 <TIM_Base_SetConfig+0x13c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	611a      	str	r2, [r3, #16]
  }
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40010400 	.word	0x40010400
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800
 80039e4:	40001800 	.word	0x40001800
 80039e8:	40001c00 	.word	0x40001c00
 80039ec:	40002000 	.word	0x40002000

080039f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003a2c:	b5b0      	push	{r4, r5, r7, lr}
 8003a2e:	b08c      	sub	sp, #48	@ 0x30
 8003a30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003a32:	4b8f      	ldr	r3, [pc, #572]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003a34:	22c0      	movs	r2, #192	@ 0xc0
 8003a36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003a38:	4b8d      	ldr	r3, [pc, #564]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003a3a:	22a8      	movs	r2, #168	@ 0xa8
 8003a3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 123;
 8003a3e:	4b8c      	ldr	r3, [pc, #560]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003a40:	227b      	movs	r2, #123	@ 0x7b
 8003a42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 101;
 8003a44:	4b8a      	ldr	r3, [pc, #552]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003a46:	2265      	movs	r2, #101	@ 0x65
 8003a48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003a4a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003a4c:	22ff      	movs	r2, #255	@ 0xff
 8003a4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003a50:	4b88      	ldr	r3, [pc, #544]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003a52:	22ff      	movs	r2, #255	@ 0xff
 8003a54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003a56:	4b87      	ldr	r3, [pc, #540]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003a58:	22ff      	movs	r2, #255	@ 0xff
 8003a5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003a5c:	4b85      	ldr	r3, [pc, #532]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003a62:	4b85      	ldr	r3, [pc, #532]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003a64:	22c0      	movs	r2, #192	@ 0xc0
 8003a66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003a68:	4b83      	ldr	r3, [pc, #524]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003a6a:	22a8      	movs	r2, #168	@ 0xa8
 8003a6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 123;
 8003a6e:	4b82      	ldr	r3, [pc, #520]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003a70:	227b      	movs	r2, #123	@ 0x7b
 8003a72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003a74:	4b80      	ldr	r3, [pc, #512]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f006 fa33 	bl	8009ee8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003a82:	4b7b      	ldr	r3, [pc, #492]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	061a      	lsls	r2, r3, #24
 8003a88:	4b79      	ldr	r3, [pc, #484]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	4b77      	ldr	r3, [pc, #476]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003a92:	789b      	ldrb	r3, [r3, #2]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	4313      	orrs	r3, r2
 8003a98:	4a75      	ldr	r2, [pc, #468]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003a9a:	78d2      	ldrb	r2, [r2, #3]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	061a      	lsls	r2, r3, #24
 8003aa0:	4b73      	ldr	r3, [pc, #460]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	0619      	lsls	r1, r3, #24
 8003aa6:	4b72      	ldr	r3, [pc, #456]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	4319      	orrs	r1, r3
 8003aae:	4b70      	ldr	r3, [pc, #448]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003ab0:	789b      	ldrb	r3, [r3, #2]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	496e      	ldr	r1, [pc, #440]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003ab8:	78c9      	ldrb	r1, [r1, #3]
 8003aba:	430b      	orrs	r3, r1
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	0619      	lsls	r1, r3, #24
 8003aca:	4b69      	ldr	r3, [pc, #420]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003acc:	785b      	ldrb	r3, [r3, #1]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	4319      	orrs	r1, r3
 8003ad2:	4b67      	ldr	r3, [pc, #412]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003ad4:	789b      	ldrb	r3, [r3, #2]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	4965      	ldr	r1, [pc, #404]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003adc:	78c9      	ldrb	r1, [r1, #3]
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	4b61      	ldr	r3, [pc, #388]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	0619      	lsls	r1, r3, #24
 8003aee:	4b60      	ldr	r3, [pc, #384]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003af0:	785b      	ldrb	r3, [r3, #1]
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	4319      	orrs	r1, r3
 8003af6:	4b5e      	ldr	r3, [pc, #376]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003af8:	789b      	ldrb	r3, [r3, #2]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	430b      	orrs	r3, r1
 8003afe:	495c      	ldr	r1, [pc, #368]	@ (8003c70 <MX_LWIP_Init+0x244>)
 8003b00:	78c9      	ldrb	r1, [r1, #3]
 8003b02:	430b      	orrs	r3, r1
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	4313      	orrs	r3, r2
 8003b08:	4a5c      	ldr	r2, [pc, #368]	@ (8003c7c <MX_LWIP_Init+0x250>)
 8003b0a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003b0c:	4b59      	ldr	r3, [pc, #356]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	061a      	lsls	r2, r3, #24
 8003b12:	4b58      	ldr	r3, [pc, #352]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	4b56      	ldr	r3, [pc, #344]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b1c:	789b      	ldrb	r3, [r3, #2]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	4313      	orrs	r3, r2
 8003b22:	4a54      	ldr	r2, [pc, #336]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b24:	78d2      	ldrb	r2, [r2, #3]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	061a      	lsls	r2, r3, #24
 8003b2a:	4b52      	ldr	r3, [pc, #328]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	0619      	lsls	r1, r3, #24
 8003b30:	4b50      	ldr	r3, [pc, #320]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	4319      	orrs	r1, r3
 8003b38:	4b4e      	ldr	r3, [pc, #312]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b3a:	789b      	ldrb	r3, [r3, #2]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	494c      	ldr	r1, [pc, #304]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b42:	78c9      	ldrb	r1, [r1, #3]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	4b49      	ldr	r3, [pc, #292]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	0619      	lsls	r1, r3, #24
 8003b54:	4b47      	ldr	r3, [pc, #284]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	4319      	orrs	r1, r3
 8003b5c:	4b45      	ldr	r3, [pc, #276]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b5e:	789b      	ldrb	r3, [r3, #2]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	430b      	orrs	r3, r1
 8003b64:	4943      	ldr	r1, [pc, #268]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b66:	78c9      	ldrb	r1, [r1, #3]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b70:	431a      	orrs	r2, r3
 8003b72:	4b40      	ldr	r3, [pc, #256]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	0619      	lsls	r1, r3, #24
 8003b78:	4b3e      	ldr	r3, [pc, #248]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	4319      	orrs	r1, r3
 8003b80:	4b3c      	ldr	r3, [pc, #240]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b82:	789b      	ldrb	r3, [r3, #2]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	430b      	orrs	r3, r1
 8003b88:	493a      	ldr	r1, [pc, #232]	@ (8003c74 <MX_LWIP_Init+0x248>)
 8003b8a:	78c9      	ldrb	r1, [r1, #3]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	0e1b      	lsrs	r3, r3, #24
 8003b90:	4313      	orrs	r3, r2
 8003b92:	4a3b      	ldr	r2, [pc, #236]	@ (8003c80 <MX_LWIP_Init+0x254>)
 8003b94:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003b96:	4b38      	ldr	r3, [pc, #224]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	061a      	lsls	r2, r3, #24
 8003b9c:	4b36      	ldr	r3, [pc, #216]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003ba6:	789b      	ldrb	r3, [r3, #2]
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	4313      	orrs	r3, r2
 8003bac:	4a32      	ldr	r2, [pc, #200]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003bae:	78d2      	ldrb	r2, [r2, #3]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	061a      	lsls	r2, r3, #24
 8003bb4:	4b30      	ldr	r3, [pc, #192]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	0619      	lsls	r1, r3, #24
 8003bba:	4b2f      	ldr	r3, [pc, #188]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	4319      	orrs	r1, r3
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003bc4:	789b      	ldrb	r3, [r3, #2]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	492b      	ldr	r1, [pc, #172]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003bcc:	78c9      	ldrb	r1, [r1, #3]
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	4b27      	ldr	r3, [pc, #156]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	0619      	lsls	r1, r3, #24
 8003bde:	4b26      	ldr	r3, [pc, #152]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003be0:	785b      	ldrb	r3, [r3, #1]
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	4319      	orrs	r1, r3
 8003be6:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003be8:	789b      	ldrb	r3, [r3, #2]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	430b      	orrs	r3, r1
 8003bee:	4922      	ldr	r1, [pc, #136]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003bf0:	78c9      	ldrb	r1, [r1, #3]
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	0619      	lsls	r1, r3, #24
 8003c02:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	4319      	orrs	r1, r3
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003c0c:	789b      	ldrb	r3, [r3, #2]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	430b      	orrs	r3, r1
 8003c12:	4919      	ldr	r1, [pc, #100]	@ (8003c78 <MX_LWIP_Init+0x24c>)
 8003c14:	78c9      	ldrb	r1, [r1, #3]
 8003c16:	430b      	orrs	r3, r1
 8003c18:	0e1b      	lsrs	r3, r3, #24
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	4a19      	ldr	r2, [pc, #100]	@ (8003c84 <MX_LWIP_Init+0x258>)
 8003c1e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003c20:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <MX_LWIP_Init+0x25c>)
 8003c22:	9302      	str	r3, [sp, #8]
 8003c24:	4b19      	ldr	r3, [pc, #100]	@ (8003c8c <MX_LWIP_Init+0x260>)
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <MX_LWIP_Init+0x258>)
 8003c2e:	4a14      	ldr	r2, [pc, #80]	@ (8003c80 <MX_LWIP_Init+0x254>)
 8003c30:	4912      	ldr	r1, [pc, #72]	@ (8003c7c <MX_LWIP_Init+0x250>)
 8003c32:	4817      	ldr	r0, [pc, #92]	@ (8003c90 <MX_LWIP_Init+0x264>)
 8003c34:	f006 ff66 	bl	800ab04 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003c38:	4815      	ldr	r0, [pc, #84]	@ (8003c90 <MX_LWIP_Init+0x264>)
 8003c3a:	f007 f915 	bl	800ae68 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003c3e:	4814      	ldr	r0, [pc, #80]	@ (8003c90 <MX_LWIP_Init+0x264>)
 8003c40:	f007 f922 	bl	800ae88 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003c44:	4913      	ldr	r1, [pc, #76]	@ (8003c94 <MX_LWIP_Init+0x268>)
 8003c46:	4812      	ldr	r0, [pc, #72]	@ (8003c90 <MX_LWIP_Init+0x264>)
 8003c48:	f007 fa20 	bl	800b08c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8003c4c:	4b12      	ldr	r3, [pc, #72]	@ (8003c98 <MX_LWIP_Init+0x26c>)
 8003c4e:	1d3c      	adds	r4, r7, #4
 8003c50:	461d      	mov	r5, r3
 8003c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	490b      	ldr	r1, [pc, #44]	@ (8003c90 <MX_LWIP_Init+0x264>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fdad 	bl	80047c2 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003c68:	bf00      	nop
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	20000524 	.word	0x20000524
 8003c74:	20000528 	.word	0x20000528
 8003c78:	2000052c 	.word	0x2000052c
 8003c7c:	20000518 	.word	0x20000518
 8003c80:	2000051c 	.word	0x2000051c
 8003c84:	20000520 	.word	0x20000520
 8003c88:	08009df9 	.word	0x08009df9
 8003c8c:	08004235 	.word	0x08004235
 8003c90:	200004e4 	.word	0x200004e4
 8003c94:	08003c9d 	.word	0x08003c9d
 8003c98:	0801623c 	.word	0x0801623c

08003c9c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cc6:	f3bf 8f4f 	dsb	sy
}
 8003cca:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8003ccc:	e00b      	b.n	8003ce6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003cce:	4a0d      	ldr	r2, [pc, #52]	@ (8003d04 <SCB_InvalidateDCache_by_Addr+0x54>)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	dcf0      	bgt.n	8003cce <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003cec:	f3bf 8f4f 	dsb	sy
}
 8003cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cf2:	f3bf 8f6f 	isb	sy
}
 8003cf6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <HAL_ETH_RxCpltCallback+0x1c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fedd 	bl	8004ad4 <osSemaphoreRelease>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20004ebc 	.word	0x20004ebc

08003d28 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <HAL_ETH_TxCpltCallback+0x1c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fecd 	bl	8004ad4 <osSemaphoreRelease>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20004ec0 	.word	0x20004ec0

08003d48 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fe f8c6 	bl	8001ee2 <HAL_ETH_GetDMAError>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b80      	cmp	r3, #128	@ 0x80
 8003d5e:	d104      	bne.n	8003d6a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003d60:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <HAL_ETH_ErrorCallback+0x2c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 feb5 	bl	8004ad4 <osSemaphoreRelease>
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20004ebc 	.word	0x20004ebc

08003d78 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003d78:	b5b0      	push	{r4, r5, r7, lr}
 8003d7a:	b0b4      	sub	sp, #208	@ 0xd0
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8003d92:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003d96:	2264      	movs	r2, #100	@ 0x64
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f011 fac7 	bl	801532e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003da0:	4b9f      	ldr	r3, [pc, #636]	@ (8004020 <low_level_init+0x2a8>)
 8003da2:	4aa0      	ldr	r2, [pc, #640]	@ (8004024 <low_level_init+0x2ac>)
 8003da4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8003db2:	23e1      	movs	r3, #225	@ 0xe1
 8003db4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8003dca:	4a95      	ldr	r2, [pc, #596]	@ (8004020 <low_level_init+0x2a8>)
 8003dcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003dd0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003dd2:	4b93      	ldr	r3, [pc, #588]	@ (8004020 <low_level_init+0x2a8>)
 8003dd4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003dd8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003dda:	4b91      	ldr	r3, [pc, #580]	@ (8004020 <low_level_init+0x2a8>)
 8003ddc:	4a92      	ldr	r2, [pc, #584]	@ (8004028 <low_level_init+0x2b0>)
 8003dde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003de0:	4b8f      	ldr	r3, [pc, #572]	@ (8004020 <low_level_init+0x2a8>)
 8003de2:	4a92      	ldr	r2, [pc, #584]	@ (800402c <low_level_init+0x2b4>)
 8003de4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003de6:	4b8e      	ldr	r3, [pc, #568]	@ (8004020 <low_level_init+0x2a8>)
 8003de8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003dec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003dee:	488c      	ldr	r0, [pc, #560]	@ (8004020 <low_level_init+0x2a8>)
 8003df0:	f7fd fa2e 	bl	8001250 <HAL_ETH_Init>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003dfa:	2238      	movs	r2, #56	@ 0x38
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	488c      	ldr	r0, [pc, #560]	@ (8004030 <low_level_init+0x2b8>)
 8003e00:	f011 fa95 	bl	801532e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003e04:	4b8a      	ldr	r3, [pc, #552]	@ (8004030 <low_level_init+0x2b8>)
 8003e06:	2221      	movs	r2, #33	@ 0x21
 8003e08:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003e0a:	4b89      	ldr	r3, [pc, #548]	@ (8004030 <low_level_init+0x2b8>)
 8003e0c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003e10:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003e12:	4b87      	ldr	r3, [pc, #540]	@ (8004030 <low_level_init+0x2b8>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003e18:	4886      	ldr	r0, [pc, #536]	@ (8004034 <low_level_init+0x2bc>)
 8003e1a:	f006 fd2d 	bl	800a878 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2206      	movs	r2, #6
 8003e22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003e26:	4b7e      	ldr	r3, [pc, #504]	@ (8004020 <low_level_init+0x2a8>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003e32:	4b7b      	ldr	r3, [pc, #492]	@ (8004020 <low_level_init+0x2a8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	785a      	ldrb	r2, [r3, #1]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003e3e:	4b78      	ldr	r3, [pc, #480]	@ (8004020 <low_level_init+0x2a8>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	789a      	ldrb	r2, [r3, #2]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003e4a:	4b75      	ldr	r3, [pc, #468]	@ (8004020 <low_level_init+0x2a8>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	78da      	ldrb	r2, [r3, #3]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003e56:	4b72      	ldr	r3, [pc, #456]	@ (8004020 <low_level_init+0x2a8>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	791a      	ldrb	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003e62:	4b6f      	ldr	r3, [pc, #444]	@ (8004020 <low_level_init+0x2a8>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	795a      	ldrb	r2, [r3, #5]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003e74:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003e7c:	f043 030a 	orr.w	r3, r3, #10
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8003e90:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fd9c 	bl	80049d4 <osSemaphoreCreate>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4a66      	ldr	r2, [pc, #408]	@ (8004038 <low_level_init+0x2c0>)
 8003ea0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8003eaa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fd8f 	bl	80049d4 <osSemaphoreCreate>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4a60      	ldr	r2, [pc, #384]	@ (800403c <low_level_init+0x2c4>)
 8003eba:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8003ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8004038 <low_level_init+0x2c0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fdb8 	bl	8004a38 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8003ec8:	4b5c      	ldr	r3, [pc, #368]	@ (800403c <low_level_init+0x2c4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fdb2 	bl	8004a38 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8004040 <low_level_init+0x2c8>)
 8003ed6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003eda:	461d      	mov	r5, r3
 8003edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ee4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003ee8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fc67 	bl	80047c2 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003ef4:	4953      	ldr	r1, [pc, #332]	@ (8004044 <low_level_init+0x2cc>)
 8003ef6:	4854      	ldr	r0, [pc, #336]	@ (8004048 <low_level_init+0x2d0>)
 8003ef8:	f7fc ff65 	bl	8000dc6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003efc:	4852      	ldr	r0, [pc, #328]	@ (8004048 <low_level_init+0x2d0>)
 8003efe:	f7fc ff94 	bl	8000e2a <LAN8742_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f007 f88f 	bl	800b02c <netif_set_link_down>
    netif_set_down(netif);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f007 f826 	bl	800af60 <netif_set_down>
 8003f14:	e081      	b.n	800401a <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003f16:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d165      	bne.n	8003fea <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003f1e:	484a      	ldr	r0, [pc, #296]	@ (8004048 <low_level_init+0x2d0>)
 8003f20:	f7fc ffd0 	bl	8000ec4 <LAN8742_GetLinkState>
 8003f24:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	dc06      	bgt.n	8003f3e <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f007 f87b 	bl	800b02c <netif_set_link_down>
      netif_set_down(netif);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f007 f812 	bl	800af60 <netif_set_down>
 8003f3c:	e057      	b.n	8003fee <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8003f3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f42:	3b02      	subs	r3, #2
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d82b      	bhi.n	8003fa0 <low_level_init+0x228>
 8003f48:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <low_level_init+0x1d8>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f73 	.word	0x08003f73
 8003f58:	08003f83 	.word	0x08003f83
 8003f5c:	08003f93 	.word	0x08003f93
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003f60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003f68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003f70:	e01f      	b.n	8003fb2 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003f78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003f80:	e017      	b.n	8003fb2 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003f82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003f90:	e00f      	b.n	8003fb2 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003f9e:	e008      	b.n	8003fb2 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8003fa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003fa8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003fb0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003fb2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4819      	ldr	r0, [pc, #100]	@ (8004020 <low_level_init+0x2a8>)
 8003fba:	f7fd fe31 	bl	8001c20 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003fbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fc2:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8003fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fc8:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003fca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4813      	ldr	r0, [pc, #76]	@ (8004020 <low_level_init+0x2a8>)
 8003fd2:	f7fd ff1c 	bl	8001e0e <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8003fd6:	4812      	ldr	r0, [pc, #72]	@ (8004020 <low_level_init+0x2a8>)
 8003fd8:	f7fd f9d4 	bl	8001384 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f006 ff53 	bl	800ae88 <netif_set_up>
    netif_set_link_up(netif);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f006 ffee 	bl	800afc4 <netif_set_link_up>
 8003fe8:	e001      	b.n	8003fee <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8003fea:	f7fc fd0f 	bl	8000a0c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8003fee:	f7fd f841 	bl	8001074 <HAL_GetREVID>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff8:	d10f      	bne.n	800401a <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8003ffa:	4b14      	ldr	r3, [pc, #80]	@ (800404c <low_level_init+0x2d4>)
 8003ffc:	f107 040c 	add.w	r4, r7, #12
 8004000:	461d      	mov	r5, r3
 8004002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004006:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800400a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800400e:	f107 030c 	add.w	r3, r7, #12
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fbd4 	bl	80047c2 <osThreadCreate>
  }
}
 800401a:	37d0      	adds	r7, #208	@ 0xd0
 800401c:	46bd      	mov	sp, r7
 800401e:	bdb0      	pop	{r4, r5, r7, pc}
 8004020:	20004ec4 	.word	0x20004ec4
 8004024:	40028000 	.word	0x40028000
 8004028:	2000012c 	.word	0x2000012c
 800402c:	2000008c 	.word	0x2000008c
 8004030:	20004f74 	.word	0x20004f74
 8004034:	080197ec 	.word	0x080197ec
 8004038:	20004ebc 	.word	0x20004ebc
 800403c:	20004ec0 	.word	0x20004ec0
 8004040:	08016260 	.word	0x08016260
 8004044:	2000000c 	.word	0x2000000c
 8004048:	20004fac 	.word	0x20004fac
 800404c:	0801628c 	.word	0x0801628c

08004050 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b092      	sub	sp, #72	@ 0x48
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004068:	f107 030c 	add.w	r3, r7, #12
 800406c:	2230      	movs	r2, #48	@ 0x30
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f011 f95c 	bl	801532e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	2230      	movs	r2, #48	@ 0x30
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f011 f955 	bl	801532e <memset>

  for(q = p; q != NULL; q = q->next)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	643b      	str	r3, [r7, #64]	@ 0x40
 8004088:	e045      	b.n	8004116 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800408a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408c:	2b03      	cmp	r3, #3
 800408e:	d902      	bls.n	8004096 <low_level_output+0x46>
      return ERR_IF;
 8004090:	f06f 030b 	mvn.w	r3, #11
 8004094:	e07f      	b.n	8004196 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8004096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004098:	6859      	ldr	r1, [r3, #4]
 800409a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800409c:	4613      	mov	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	3348      	adds	r3, #72	@ 0x48
 80040a6:	443b      	add	r3, r7
 80040a8:	3b3c      	subs	r3, #60	@ 0x3c
 80040aa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80040ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ae:	895b      	ldrh	r3, [r3, #10]
 80040b0:	4619      	mov	r1, r3
 80040b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	3348      	adds	r3, #72	@ 0x48
 80040be:	443b      	add	r3, r7
 80040c0:	3b38      	subs	r3, #56	@ 0x38
 80040c2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80040c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d011      	beq.n	80040ee <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80040ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	f107 000c 	add.w	r0, r7, #12
 80040d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80040d4:	460b      	mov	r3, r1
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	440b      	add	r3, r1
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	18c1      	adds	r1, r0, r3
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3348      	adds	r3, #72	@ 0x48
 80040e8:	443b      	add	r3, r7
 80040ea:	3b34      	subs	r3, #52	@ 0x34
 80040ec:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80040ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80040f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	3348      	adds	r3, #72	@ 0x48
 8004102:	443b      	add	r3, r7
 8004104:	3b34      	subs	r3, #52	@ 0x34
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
    }

    i++;
 800410a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410c:	3301      	adds	r3, #1
 800410e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	643b      	str	r3, [r7, #64]	@ 0x40
 8004116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1b6      	bne.n	800408a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	891b      	ldrh	r3, [r3, #8]
 8004120:	461a      	mov	r2, r3
 8004122:	4b1f      	ldr	r3, [pc, #124]	@ (80041a0 <low_level_output+0x150>)
 8004124:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004126:	4a1e      	ldr	r2, [pc, #120]	@ (80041a0 <low_level_output+0x150>)
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800412e:	4a1c      	ldr	r2, [pc, #112]	@ (80041a0 <low_level_output+0x150>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004134:	6838      	ldr	r0, [r7, #0]
 8004136:	f007 fbfd 	bl	800b934 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800413a:	4919      	ldr	r1, [pc, #100]	@ (80041a0 <low_level_output+0x150>)
 800413c:	4819      	ldr	r0, [pc, #100]	@ (80041a4 <low_level_output+0x154>)
 800413e:	f7fd fa11 	bl	8001564 <HAL_ETH_Transmit_IT>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800414e:	e01b      	b.n	8004188 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004150:	4814      	ldr	r0, [pc, #80]	@ (80041a4 <low_level_output+0x154>)
 8004152:	f7fd feb9 	bl	8001ec8 <HAL_ETH_GetError>
 8004156:	4603      	mov	r3, r0
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8004160:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <low_level_output+0x158>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fc65 	bl	8004a38 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800416e:	480d      	ldr	r0, [pc, #52]	@ (80041a4 <low_level_output+0x154>)
 8004170:	f7fd fb98 	bl	80018a4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8004174:	23fe      	movs	r3, #254	@ 0xfe
 8004176:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800417a:	e005      	b.n	8004188 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800417c:	6838      	ldr	r0, [r7, #0]
 800417e:	f007 fb33 	bl	800b7e8 <pbuf_free>
        errval =  ERR_IF;
 8004182:	23f4      	movs	r3, #244	@ 0xf4
 8004184:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8004188:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800418c:	f113 0f02 	cmn.w	r3, #2
 8004190:	d0d3      	beq.n	800413a <low_level_output+0xea>

  return errval;
 8004192:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004196:	4618      	mov	r0, r3
 8004198:	3748      	adds	r7, #72	@ 0x48
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20004f74 	.word	0x20004f74
 80041a4:	20004ec4 	.word	0x20004ec4
 80041a8:	20004ec0 	.word	0x20004ec0

080041ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80041b8:	4b07      	ldr	r3, [pc, #28]	@ (80041d8 <low_level_input+0x2c>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80041c0:	f107 030c 	add.w	r3, r7, #12
 80041c4:	4619      	mov	r1, r3
 80041c6:	4805      	ldr	r0, [pc, #20]	@ (80041dc <low_level_input+0x30>)
 80041c8:	f7fd fa28 	bl	800161c <HAL_ETH_ReadData>
  }

  return p;
 80041cc:	68fb      	ldr	r3, [r7, #12]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20004eb8 	.word	0x20004eb8
 80041dc:	20004ec4 	.word	0x20004ec4

080041e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80041f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <ethernetif_input+0x50>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f04f 31ff 	mov.w	r1, #4294967295
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fc1d 	bl	8004a38 <osSemaphoreWait>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f5      	bne.n	80041f0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004204:	68b8      	ldr	r0, [r7, #8]
 8004206:	f7ff ffd1 	bl	80041ac <low_level_input>
 800420a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	4798      	blx	r3
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f007 fae0 	bl	800b7e8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1ea      	bne.n	8004204 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800422e:	e7df      	b.n	80041f0 <ethernetif_input+0x10>
 8004230:	20004ebc 	.word	0x20004ebc

08004234 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <ethernetif_init+0x1c>
 8004242:	4b0e      	ldr	r3, [pc, #56]	@ (800427c <ethernetif_init+0x48>)
 8004244:	f240 2217 	movw	r2, #535	@ 0x217
 8004248:	490d      	ldr	r1, [pc, #52]	@ (8004280 <ethernetif_init+0x4c>)
 800424a:	480e      	ldr	r0, [pc, #56]	@ (8004284 <ethernetif_init+0x50>)
 800424c:	f011 f80a 	bl	8015264 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2273      	movs	r2, #115	@ 0x73
 8004254:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2274      	movs	r2, #116	@ 0x74
 800425c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <ethernetif_init+0x54>)
 8004264:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a08      	ldr	r2, [pc, #32]	@ (800428c <ethernetif_init+0x58>)
 800426a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fd83 	bl	8003d78 <low_level_init>

  return ERR_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	080162a8 	.word	0x080162a8
 8004280:	080162c4 	.word	0x080162c4
 8004284:	080162d4 	.word	0x080162d4
 8004288:	08012fad 	.word	0x08012fad
 800428c:	08004051 	.word	0x08004051

08004290 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800429c:	68f9      	ldr	r1, [r7, #12]
 800429e:	4809      	ldr	r0, [pc, #36]	@ (80042c4 <pbuf_free_custom+0x34>)
 80042a0:	f006 fbda 	bl	800aa58 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80042a4:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <pbuf_free_custom+0x38>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d107      	bne.n	80042bc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80042ac:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <pbuf_free_custom+0x38>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80042b2:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <pbuf_free_custom+0x3c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fc0c 	bl	8004ad4 <osSemaphoreRelease>
  }
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	080197ec 	.word	0x080197ec
 80042c8:	20004eb8 	.word	0x20004eb8
 80042cc:	20004ebc 	.word	0x20004ebc

080042d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80042d4:	f7fc fe9e 	bl	8001014 <HAL_GetTick>
 80042d8:	4603      	mov	r3, r0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08e      	sub	sp, #56	@ 0x38
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a44      	ldr	r2, [pc, #272]	@ (8004410 <HAL_ETH_MspInit+0x130>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f040 8081 	bne.w	8004406 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004304:	4b43      	ldr	r3, [pc, #268]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004308:	4a42      	ldr	r2, [pc, #264]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800430a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800430e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004310:	4b40      	ldr	r3, [pc, #256]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	4b3d      	ldr	r3, [pc, #244]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	4a3c      	ldr	r2, [pc, #240]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004326:	6313      	str	r3, [r2, #48]	@ 0x30
 8004328:	4b3a      	ldr	r3, [pc, #232]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4b37      	ldr	r3, [pc, #220]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	4a36      	ldr	r2, [pc, #216]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800433a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800433e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004340:	4b34      	ldr	r3, [pc, #208]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800434c:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	4a30      	ldr	r2, [pc, #192]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004356:	6313      	str	r3, [r2, #48]	@ 0x30
 8004358:	4b2e      	ldr	r3, [pc, #184]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004364:	4b2b      	ldr	r3, [pc, #172]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	4a2a      	ldr	r2, [pc, #168]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004370:	4b28      	ldr	r3, [pc, #160]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437c:	4b25      	ldr	r3, [pc, #148]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	4a24      	ldr	r2, [pc, #144]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6313      	str	r3, [r2, #48]	@ 0x30
 8004388:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <HAL_ETH_MspInit+0x134>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8004394:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439a:	2302      	movs	r3, #2
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a2:	2303      	movs	r3, #3
 80043a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043a6:	230b      	movs	r3, #11
 80043a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ae:	4619      	mov	r1, r3
 80043b0:	4819      	ldr	r0, [pc, #100]	@ (8004418 <HAL_ETH_MspInit+0x138>)
 80043b2:	f7fe f9c3 	bl	800273c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80043b6:	2332      	movs	r3, #50	@ 0x32
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ba:	2302      	movs	r3, #2
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c2:	2303      	movs	r3, #3
 80043c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043c6:	230b      	movs	r3, #11
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ce:	4619      	mov	r1, r3
 80043d0:	4812      	ldr	r0, [pc, #72]	@ (800441c <HAL_ETH_MspInit+0x13c>)
 80043d2:	f7fe f9b3 	bl	800273c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80043d6:	2386      	movs	r3, #134	@ 0x86
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043da:	2302      	movs	r3, #2
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e2:	2303      	movs	r3, #3
 80043e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043e6:	230b      	movs	r3, #11
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ee:	4619      	mov	r1, r3
 80043f0:	480b      	ldr	r0, [pc, #44]	@ (8004420 <HAL_ETH_MspInit+0x140>)
 80043f2:	f7fe f9a3 	bl	800273c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2105      	movs	r1, #5
 80043fa:	203d      	movs	r0, #61	@ 0x3d
 80043fc:	f7fc fefe 	bl	80011fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004400:	203d      	movs	r0, #61	@ 0x3d
 8004402:	f7fc ff17 	bl	8001234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004406:	bf00      	nop
 8004408:	3738      	adds	r7, #56	@ 0x38
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40028000 	.word	0x40028000
 8004414:	40023800 	.word	0x40023800
 8004418:	40021800 	.word	0x40021800
 800441c:	40020800 	.word	0x40020800
 8004420:	40020000 	.word	0x40020000

08004424 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004428:	4802      	ldr	r0, [pc, #8]	@ (8004434 <ETH_PHY_IO_Init+0x10>)
 800442a:	f7fd fd0b 	bl	8001e44 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20004ec4 	.word	0x20004ec4

08004438 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return 0;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	4807      	ldr	r0, [pc, #28]	@ (8004478 <ETH_PHY_IO_ReadReg+0x30>)
 800445c:	f7fd fb4c 	bl	8001af8 <HAL_ETH_ReadPHYRegister>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e000      	b.n	800446e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20004ec4 	.word	0x20004ec4

0800447c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	4807      	ldr	r0, [pc, #28]	@ (80044ac <ETH_PHY_IO_WriteReg+0x30>)
 8004490:	f7fd fb7d 	bl	8001b8e <HAL_ETH_WritePHYRegister>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
 800449e:	e000      	b.n	80044a2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20004ec4 	.word	0x20004ec4

080044b0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044b4:	f7fc fdae 	bl	8001014 <HAL_GetTick>
 80044b8:	4603      	mov	r3, r0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b0a0      	sub	sp, #128	@ 0x80
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80044c8:	f107 0308 	add.w	r3, r7, #8
 80044cc:	2264      	movs	r2, #100	@ 0x64
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f010 ff2c 	bl	801532e <memset>
  int32_t PHYLinkState = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044de:	2300      	movs	r3, #0
 80044e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044e2:	2300      	movs	r3, #0
 80044e4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80044ea:	483a      	ldr	r0, [pc, #232]	@ (80045d4 <ethernet_link_thread+0x114>)
 80044ec:	f7fc fcea 	bl	8000ec4 <LAN8742_GetLinkState>
 80044f0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80044f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00c      	beq.n	800451e <ethernet_link_thread+0x5e>
 8004504:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004506:	2b01      	cmp	r3, #1
 8004508:	dc09      	bgt.n	800451e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800450a:	4833      	ldr	r0, [pc, #204]	@ (80045d8 <ethernet_link_thread+0x118>)
 800450c:	f7fc ffaa 	bl	8001464 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004510:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004512:	f006 fd25 	bl	800af60 <netif_set_down>
    netif_set_link_down(netif);
 8004516:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004518:	f006 fd88 	bl	800b02c <netif_set_link_down>
 800451c:	e055      	b.n	80045ca <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800451e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004520:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d14e      	bne.n	80045ca <ethernet_link_thread+0x10a>
 800452c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800452e:	2b01      	cmp	r3, #1
 8004530:	dd4b      	ble.n	80045ca <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004534:	3b02      	subs	r3, #2
 8004536:	2b03      	cmp	r3, #3
 8004538:	d82a      	bhi.n	8004590 <ethernet_link_thread+0xd0>
 800453a:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <ethernet_link_thread+0x80>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004551 	.word	0x08004551
 8004544:	08004563 	.word	0x08004563
 8004548:	08004573 	.word	0x08004573
 800454c:	08004583 	.word	0x08004583
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004550:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004554:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004556:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800455a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800455c:	2301      	movs	r3, #1
 800455e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004560:	e017      	b.n	8004592 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004562:	2300      	movs	r3, #0
 8004564:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004566:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800456a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800456c:	2301      	movs	r3, #1
 800456e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004570:	e00f      	b.n	8004592 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004576:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004578:	2300      	movs	r3, #0
 800457a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800457c:	2301      	movs	r3, #1
 800457e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004580:	e007      	b.n	8004592 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004582:	2300      	movs	r3, #0
 8004584:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004586:	2300      	movs	r3, #0
 8004588:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800458e:	e000      	b.n	8004592 <ethernet_link_thread+0xd2>
    default:
      break;
 8004590:	bf00      	nop
    }

    if(linkchanged)
 8004592:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d018      	beq.n	80045ca <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004598:	f107 0308 	add.w	r3, r7, #8
 800459c:	4619      	mov	r1, r3
 800459e:	480e      	ldr	r0, [pc, #56]	@ (80045d8 <ethernet_link_thread+0x118>)
 80045a0:	f7fd fb3e 	bl	8001c20 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80045a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80045a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045aa:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	4619      	mov	r1, r3
 80045b2:	4809      	ldr	r0, [pc, #36]	@ (80045d8 <ethernet_link_thread+0x118>)
 80045b4:	f7fd fc2b 	bl	8001e0e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80045b8:	4807      	ldr	r0, [pc, #28]	@ (80045d8 <ethernet_link_thread+0x118>)
 80045ba:	f7fc fee3 	bl	8001384 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80045be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045c0:	f006 fc62 	bl	800ae88 <netif_set_up>
      netif_set_link_up(netif);
 80045c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045c6:	f006 fcfd 	bl	800afc4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80045ca:	2064      	movs	r0, #100	@ 0x64
 80045cc:	f000 f951 	bl	8004872 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80045d0:	e78b      	b.n	80044ea <ethernet_link_thread+0x2a>
 80045d2:	bf00      	nop
 80045d4:	20004fac 	.word	0x20004fac
 80045d8:	20004ec4 	.word	0x20004ec4

080045dc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80045e4:	4812      	ldr	r0, [pc, #72]	@ (8004630 <HAL_ETH_RxAllocateCallback+0x54>)
 80045e6:	f006 f9c3 	bl	800a970 <memp_malloc_pool>
 80045ea:	60f8      	str	r0, [r7, #12]
  if (p)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d014      	beq.n	800461c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f103 0220 	add.w	r2, r3, #32
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004634 <HAL_ETH_RxAllocateCallback+0x58>)
 8004600:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800460a:	9201      	str	r2, [sp, #4]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2241      	movs	r2, #65	@ 0x41
 8004612:	2100      	movs	r1, #0
 8004614:	2000      	movs	r0, #0
 8004616:	f006 ff2d 	bl	800b474 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800461a:	e005      	b.n	8004628 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <HAL_ETH_RxAllocateCallback+0x5c>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	080197ec 	.word	0x080197ec
 8004634:	08004291 	.word	0x08004291
 8004638:	20004eb8 	.word	0x20004eb8

0800463c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3b20      	subs	r3, #32
 800465a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2200      	movs	r2, #0
 8004666:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	887a      	ldrh	r2, [r7, #2]
 800466c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e003      	b.n	8004686 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e009      	b.n	80046a8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	891a      	ldrh	r2, [r3, #8]
 8004698:	887b      	ldrh	r3, [r7, #2]
 800469a:	4413      	add	r3, r2
 800469c:	b29a      	uxth	r2, r3
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f2      	bne.n	8004694 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80046ae:	887b      	ldrh	r3, [r7, #2]
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fafc 	bl	8003cb0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80046b8:	bf00      	nop
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f007 f88d 	bl	800b7e8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 80046e0:	4b15      	ldr	r3, [pc, #84]	@ (8004738 <RMII_Thread+0x60>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80046ec:	2000      	movs	r0, #0
 80046ee:	f000 f8b4 	bl	800485a <osThreadTerminate>
 80046f2:	e7f5      	b.n	80046e0 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80046f4:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <RMII_Thread+0x60>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80046fc:	2b0a      	cmp	r3, #10
 80046fe:	d916      	bls.n	800472e <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8004700:	4b0e      	ldr	r3, [pc, #56]	@ (800473c <RMII_Thread+0x64>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a0d      	ldr	r2, [pc, #52]	@ (800473c <RMII_Thread+0x64>)
 8004706:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800470a:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 800470c:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <RMII_Thread+0x64>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a0a      	ldr	r2, [pc, #40]	@ (800473c <RMII_Thread+0x64>)
 8004712:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004716:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8004718:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <RMII_Thread+0x60>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <RMII_Thread+0x60>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800472c:	e7d8      	b.n	80046e0 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800472e:	20c8      	movs	r0, #200	@ 0xc8
 8004730:	f000 f89f 	bl	8004872 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8004734:	e7d4      	b.n	80046e0 <RMII_Thread+0x8>
 8004736:	bf00      	nop
 8004738:	20004ec4 	.word	0x20004ec4
 800473c:	40013800 	.word	0x40013800

08004740 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800474e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004752:	2b84      	cmp	r3, #132	@ 0x84
 8004754:	d005      	beq.n	8004762 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	3303      	adds	r3, #3
 8004760:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004776:	f3ef 8305 	mrs	r3, IPSR
 800477a:	607b      	str	r3, [r7, #4]
  return(result);
 800477c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004798:	f001 fe4c 	bl	8006434 <vTaskStartScheduler>
  
  return osOK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80047a6:	f7ff ffe3 	bl	8004770 <inHandlerMode>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80047b0:	f001 ff6c 	bl	800668c <xTaskGetTickCountFromISR>
 80047b4:	4603      	mov	r3, r0
 80047b6:	e002      	b.n	80047be <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80047b8:	f001 ff58 	bl	800666c <xTaskGetTickCount>
 80047bc:	4603      	mov	r3, r0
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047c4:	b089      	sub	sp, #36	@ 0x24
 80047c6:	af04      	add	r7, sp, #16
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <osThreadCreate+0x54>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01c      	beq.n	8004816 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685c      	ldr	r4, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691e      	ldr	r6, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff ffa6 	bl	8004740 <makeFreeRtosPriority>
 80047f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047fe:	9202      	str	r2, [sp, #8]
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	9100      	str	r1, [sp, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	4632      	mov	r2, r6
 8004808:	4629      	mov	r1, r5
 800480a:	4620      	mov	r0, r4
 800480c:	f001 fb90 	bl	8005f30 <xTaskCreateStatic>
 8004810:	4603      	mov	r3, r0
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e01c      	b.n	8004850 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685c      	ldr	r4, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004822:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff ff88 	bl	8004740 <makeFreeRtosPriority>
 8004830:	4602      	mov	r2, r0
 8004832:	f107 030c 	add.w	r3, r7, #12
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	9200      	str	r2, [sp, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	4632      	mov	r2, r6
 800483e:	4629      	mov	r1, r5
 8004840:	4620      	mov	r0, r4
 8004842:	f001 fbdb 	bl	8005ffc <xTaskCreate>
 8004846:	4603      	mov	r3, r0
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	e000      	b.n	8004852 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800485a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 fd1c 	bl	80062a0 <vTaskDelete>
  return osOK;
 8004868:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <osDelay+0x16>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e000      	b.n	800488a <osDelay+0x18>
 8004888:	2301      	movs	r3, #1
 800488a:	4618      	mov	r0, r3
 800488c:	f001 fd9a 	bl	80063c4 <vTaskDelay>
  
  return osOK;
 8004890:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4619      	mov	r1, r3
 80048b0:	2001      	movs	r0, #1
 80048b2:	f000 fc9a 	bl	80051ea <xQueueCreateMutexStatic>
 80048b6:	4603      	mov	r3, r0
 80048b8:	e003      	b.n	80048c2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80048ba:	2001      	movs	r0, #1
 80048bc:	f000 fc7d 	bl	80051ba <xQueueCreateMutex>
 80048c0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <osMutexWait+0x18>
    return osErrorParameter;
 80048e0:	2380      	movs	r3, #128	@ 0x80
 80048e2:	e03a      	b.n	800495a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d103      	bne.n	80048f8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e009      	b.n	800490c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d006      	beq.n	800490c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <osMutexWait+0x40>
      ticks = 1;
 8004908:	2301      	movs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800490c:	f7ff ff30 	bl	8004770 <inHandlerMode>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d017      	beq.n	8004946 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004916:	f107 0308 	add.w	r3, r7, #8
 800491a:	461a      	mov	r2, r3
 800491c:	2100      	movs	r1, #0
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f001 f8c4 	bl	8005aac <xQueueReceiveFromISR>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d001      	beq.n	800492e <osMutexWait+0x62>
      return osErrorOS;
 800492a:	23ff      	movs	r3, #255	@ 0xff
 800492c:	e015      	b.n	800495a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d011      	beq.n	8004958 <osMutexWait+0x8c>
 8004934:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <osMutexWait+0x98>)
 8004936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	e008      	b.n	8004958 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 ff97 	bl	800587c <xQueueSemaphoreTake>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d001      	beq.n	8004958 <osMutexWait+0x8c>
    return osErrorOS;
 8004954:	23ff      	movs	r3, #255	@ 0xff
 8004956:	e000      	b.n	800495a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004974:	2300      	movs	r3, #0
 8004976:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004978:	f7ff fefa 	bl	8004770 <inHandlerMode>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	4619      	mov	r1, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fdf6 	bl	800557a <xQueueGiveFromISR>
 800498e:	4603      	mov	r3, r0
 8004990:	2b01      	cmp	r3, #1
 8004992:	d001      	beq.n	8004998 <osMutexRelease+0x30>
      return osErrorOS;
 8004994:	23ff      	movs	r3, #255	@ 0xff
 8004996:	e017      	b.n	80049c8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <osMutexRelease+0x5e>
 800499e:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <osMutexRelease+0x68>)
 80049a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	e00a      	b.n	80049c6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80049b0:	2300      	movs	r3, #0
 80049b2:	2200      	movs	r2, #0
 80049b4:	2100      	movs	r1, #0
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fc32 	bl	8005220 <xQueueGenericSend>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d001      	beq.n	80049c6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80049c2:	23ff      	movs	r3, #255	@ 0xff
 80049c4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80049c6:	68fb      	ldr	r3, [r7, #12]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af02      	add	r7, sp, #8
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00f      	beq.n	8004a06 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10a      	bne.n	8004a02 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2203      	movs	r2, #3
 80049f2:	9200      	str	r2, [sp, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	2001      	movs	r0, #1
 80049fa:	f000 fadb 	bl	8004fb4 <xQueueGenericCreateStatic>
 80049fe:	4603      	mov	r3, r0
 8004a00:	e016      	b.n	8004a30 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e014      	b.n	8004a30 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d110      	bne.n	8004a2e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2001      	movs	r0, #1
 8004a12:	f000 fb56 	bl	80050c2 <xQueueGenericCreate>
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <osSemaphoreCreate+0x56>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2200      	movs	r2, #0
 8004a22:	2100      	movs	r1, #0
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fbfb 	bl	8005220 <xQueueGenericSend>
      return sema;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	e000      	b.n	8004a30 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004a2e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	e03a      	b.n	8004ac6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d103      	bne.n	8004a64 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e009      	b.n	8004a78 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <osSemaphoreWait+0x40>
      ticks = 1;
 8004a74:	2301      	movs	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004a78:	f7ff fe7a 	bl	8004770 <inHandlerMode>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d017      	beq.n	8004ab2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004a82:	f107 0308 	add.w	r3, r7, #8
 8004a86:	461a      	mov	r2, r3
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 f80e 	bl	8005aac <xQueueReceiveFromISR>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004a96:	23ff      	movs	r3, #255	@ 0xff
 8004a98:	e015      	b.n	8004ac6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d011      	beq.n	8004ac4 <osSemaphoreWait+0x8c>
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <osSemaphoreWait+0x98>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	e008      	b.n	8004ac4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fee1 	bl	800587c <xQueueSemaphoreTake>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d001      	beq.n	8004ac4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004ac0:	23ff      	movs	r3, #255	@ 0xff
 8004ac2:	e000      	b.n	8004ac6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004ae4:	f7ff fe44 	bl	8004770 <inHandlerMode>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fd40 	bl	800557a <xQueueGiveFromISR>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d001      	beq.n	8004b04 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004b00:	23ff      	movs	r3, #255	@ 0xff
 8004b02:	e017      	b.n	8004b34 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d013      	beq.n	8004b32 <osSemaphoreRelease+0x5e>
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <osSemaphoreRelease+0x68>)
 8004b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	e00a      	b.n	8004b32 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2100      	movs	r1, #0
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fb7c 	bl	8005220 <xQueueGenericSend>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004b2e:	23ff      	movs	r3, #255	@ 0xff
 8004b30:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004b48:	f7ff fe12 	bl	8004770 <inHandlerMode>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004b52:	2382      	movs	r3, #130	@ 0x82
 8004b54:	e003      	b.n	8004b5e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 f872 	bl	8005c40 <vQueueDelete>

  return osOK; 
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004b66:	b590      	push	{r4, r7, lr}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af02      	add	r7, sp, #8
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d011      	beq.n	8004b9c <osMessageCreate+0x36>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2400      	movs	r4, #0
 8004b92:	9400      	str	r4, [sp, #0]
 8004b94:	f000 fa0e 	bl	8004fb4 <xQueueGenericCreateStatic>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	e008      	b.n	8004bae <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f000 fa8b 	bl	80050c2 <xQueueGenericCreate>
 8004bac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}
	...

08004bb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <osMessagePut+0x1e>
    ticks = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004bd6:	f7ff fdcb 	bl	8004770 <inHandlerMode>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d018      	beq.n	8004c12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004be0:	f107 0210 	add.w	r2, r7, #16
 8004be4:	f107 0108 	add.w	r1, r7, #8
 8004be8:	2300      	movs	r3, #0
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fc22 	bl	8005434 <xQueueGenericSendFromISR>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d001      	beq.n	8004bfa <osMessagePut+0x42>
      return osErrorOS;
 8004bf6:	23ff      	movs	r3, #255	@ 0xff
 8004bf8:	e018      	b.n	8004c2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d014      	beq.n	8004c2a <osMessagePut+0x72>
 8004c00:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <osMessagePut+0x7c>)
 8004c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	e00b      	b.n	8004c2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004c12:	f107 0108 	add.w	r1, r7, #8
 8004c16:	2300      	movs	r3, #0
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fb00 	bl	8005220 <xQueueGenericSend>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d001      	beq.n	8004c2a <osMessagePut+0x72>
      return osErrorOS;
 8004c26:	23ff      	movs	r3, #255	@ 0xff
 8004c28:	e000      	b.n	8004c2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b08b      	sub	sp, #44	@ 0x2c
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004c52:	2380      	movs	r3, #128	@ 0x80
 8004c54:	617b      	str	r3, [r7, #20]
    return event;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	461c      	mov	r4, r3
 8004c5a:	f107 0314 	add.w	r3, r7, #20
 8004c5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c66:	e054      	b.n	8004d12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d103      	bne.n	8004c80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c7e:	e009      	b.n	8004c94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d006      	beq.n	8004c94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <osMessageGet+0x5c>
      ticks = 1;
 8004c90:	2301      	movs	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004c94:	f7ff fd6c 	bl	8004770 <inHandlerMode>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01c      	beq.n	8004cd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004c9e:	f107 0220 	add.w	r2, r7, #32
 8004ca2:	f107 0314 	add.w	r3, r7, #20
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	68b8      	ldr	r0, [r7, #8]
 8004cac:	f000 fefe 	bl	8005aac <xQueueReceiveFromISR>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d102      	bne.n	8004cbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004cb6:	2310      	movs	r3, #16
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	e001      	b.n	8004cc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01d      	beq.n	8004d02 <osMessageGet+0xca>
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <osMessageGet+0xe4>)
 8004cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	e014      	b.n	8004d02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	3304      	adds	r3, #4
 8004cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	68b8      	ldr	r0, [r7, #8]
 8004ce4:	f000 fce2 	bl	80056ac <xQueueReceive>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d102      	bne.n	8004cf4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004cee:	2310      	movs	r3, #16
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	e006      	b.n	8004d02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <osMessageGet+0xc6>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <osMessageGet+0xc8>
 8004cfe:	2340      	movs	r3, #64	@ 0x40
 8004d00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	461c      	mov	r4, r3
 8004d06:	f107 0314 	add.w	r3, r7, #20
 8004d0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	372c      	adds	r7, #44	@ 0x2c
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004d28:	f7ff fd22 	bl	8004770 <inHandlerMode>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 ff63 	bl	8005bfe <uxQueueMessagesWaitingFromISR>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	e003      	b.n	8004d44 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 ff3d 	bl	8005bbc <uxQueueMessagesWaiting>
 8004d42:	4603      	mov	r3, r0
  }
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004d54:	f7ff fd0c 	bl	8004770 <inHandlerMode>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <osMessageDelete+0x16>
    return osErrorISR;
 8004d5e:	2382      	movs	r3, #130	@ 0x82
 8004d60:	e003      	b.n	8004d6a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 ff6c 	bl	8005c40 <vQueueDelete>

  return osOK; 
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f103 0208 	add.w	r2, r3, #8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f103 0208 	add.w	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f103 0208 	add.w	r2, r3, #8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d103      	bne.n	8004e34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e00c      	b.n	8004e4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3308      	adds	r3, #8
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e002      	b.n	8004e42 <vListInsert+0x2e>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d2f6      	bcs.n	8004e3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6892      	ldr	r2, [r2, #8]
 8004e9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6852      	ldr	r2, [r2, #4]
 8004ea6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d103      	bne.n	8004eba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	b672      	cpsid	i
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	b662      	cpsie	i
 8004f04:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	e7fd      	b.n	8004f08 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004f0c:	f002 fa3e 	bl	800738c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f18:	68f9      	ldr	r1, [r7, #12]
 8004f1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	441a      	add	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	441a      	add	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	22ff      	movs	r2, #255	@ 0xff
 8004f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	22ff      	movs	r2, #255	@ 0xff
 8004f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d114      	bne.n	8004f8c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01a      	beq.n	8004fa0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3310      	adds	r3, #16
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 fce8 	bl	8006944 <xTaskRemoveFromEventList>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d012      	beq.n	8004fa0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <xQueueGenericReset+0xd4>)
 8004f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	e009      	b.n	8004fa0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3310      	adds	r3, #16
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff feee 	bl	8004d72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3324      	adds	r3, #36	@ 0x24
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fee9 	bl	8004d72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fa0:	f002 fa2a 	bl	80073f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fa4:	2301      	movs	r3, #1
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08e      	sub	sp, #56	@ 0x38
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10d      	bne.n	8004fe4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	b672      	cpsid	i
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	b662      	cpsie	i
 8004fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	e7fd      	b.n	8004fe0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	b672      	cpsid	i
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	b662      	cpsie	i
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <xQueueGenericCreateStatic+0x5e>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <xQueueGenericCreateStatic+0x62>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <xQueueGenericCreateStatic+0x64>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10d      	bne.n	8005038 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005020:	b672      	cpsid	i
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	b662      	cpsie	i
 8005030:	623b      	str	r3, [r7, #32]
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <xQueueGenericCreateStatic+0x90>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <xQueueGenericCreateStatic+0x94>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <xQueueGenericCreateStatic+0x96>
 8005048:	2300      	movs	r3, #0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10d      	bne.n	800506a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005052:	b672      	cpsid	i
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	b662      	cpsie	i
 8005062:	61fb      	str	r3, [r7, #28]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800506a:	2348      	movs	r3, #72	@ 0x48
 800506c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b48      	cmp	r3, #72	@ 0x48
 8005072:	d00d      	beq.n	8005090 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	b672      	cpsid	i
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	b662      	cpsie	i
 8005088:	61bb      	str	r3, [r7, #24]
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005090:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80050a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f848 	bl	8005148 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3730      	adds	r7, #48	@ 0x30
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b08a      	sub	sp, #40	@ 0x28
 80050c6:	af02      	add	r7, sp, #8
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	4613      	mov	r3, r2
 80050ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <xQueueGenericCreate+0x30>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	b672      	cpsid	i
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	b662      	cpsie	i
 80050ea:	613b      	str	r3, [r7, #16]
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	e004      	b.n	8005108 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3348      	adds	r3, #72	@ 0x48
 800510c:	4618      	mov	r0, r3
 800510e:	f002 fa6b 	bl	80075e8 <pvPortMalloc>
 8005112:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d011      	beq.n	800513e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	3348      	adds	r3, #72	@ 0x48
 8005122:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800512c:	79fa      	ldrb	r2, [r7, #7]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	4613      	mov	r3, r2
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f805 	bl	8005148 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800513e:	69bb      	ldr	r3, [r7, #24]
	}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d103      	bne.n	8005164 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e002      	b.n	800516a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005176:	2101      	movs	r1, #1
 8005178:	69b8      	ldr	r0, [r7, #24]
 800517a:	f7ff feaf 	bl	8004edc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00e      	beq.n	80051b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80051a6:	2300      	movs	r3, #0
 80051a8:	2200      	movs	r2, #0
 80051aa:	2100      	movs	r1, #0
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f837 	bl	8005220 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	4603      	mov	r3, r0
 80051c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	461a      	mov	r2, r3
 80051d0:	6939      	ldr	r1, [r7, #16]
 80051d2:	6978      	ldr	r0, [r7, #20]
 80051d4:	f7ff ff75 	bl	80050c2 <xQueueGenericCreate>
 80051d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff ffd3 	bl	8005186 <prvInitialiseMutex>

		return xNewQueue;
 80051e0:	68fb      	ldr	r3, [r7, #12]
	}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b088      	sub	sp, #32
 80051ee:	af02      	add	r7, sp, #8
 80051f0:	4603      	mov	r3, r0
 80051f2:	6039      	str	r1, [r7, #0]
 80051f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80051f6:	2301      	movs	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	6939      	ldr	r1, [r7, #16]
 8005208:	6978      	ldr	r0, [r7, #20]
 800520a:	f7ff fed3 	bl	8004fb4 <xQueueGenericCreateStatic>
 800520e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff ffb8 	bl	8005186 <prvInitialiseMutex>

		return xNewQueue;
 8005216:	68fb      	ldr	r3, [r7, #12]
	}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08e      	sub	sp, #56	@ 0x38
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800522e:	2300      	movs	r3, #0
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10d      	bne.n	8005258 <xQueueGenericSend+0x38>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	b672      	cpsid	i
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	b662      	cpsie	i
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <xQueueGenericSend+0x46>
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xQueueGenericSend+0x4a>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueGenericSend+0x4c>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10d      	bne.n	800528c <xQueueGenericSend+0x6c>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	b672      	cpsid	i
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	b662      	cpsie	i
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d103      	bne.n	800529a <xQueueGenericSend+0x7a>
 8005292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <xQueueGenericSend+0x7e>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <xQueueGenericSend+0x80>
 800529e:	2300      	movs	r3, #0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <xQueueGenericSend+0xa0>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	b672      	cpsid	i
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	b662      	cpsie	i
 80052b8:	623b      	str	r3, [r7, #32]
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052c0:	f001 fd0e 	bl	8006ce0 <xTaskGetSchedulerState>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <xQueueGenericSend+0xb0>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <xQueueGenericSend+0xb4>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <xQueueGenericSend+0xb6>
 80052d4:	2300      	movs	r3, #0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10d      	bne.n	80052f6 <xQueueGenericSend+0xd6>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	b672      	cpsid	i
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	b662      	cpsie	i
 80052ee:	61fb      	str	r3, [r7, #28]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052f6:	f002 f849 	bl	800738c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <xQueueGenericSend+0xec>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d129      	bne.n	8005360 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005312:	f000 fcd3 	bl	8005cbc <prvCopyDataToQueue>
 8005316:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d010      	beq.n	8005342 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	3324      	adds	r3, #36	@ 0x24
 8005324:	4618      	mov	r0, r3
 8005326:	f001 fb0d 	bl	8006944 <xTaskRemoveFromEventList>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005330:	4b3f      	ldr	r3, [pc, #252]	@ (8005430 <xQueueGenericSend+0x210>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	e00a      	b.n	8005358 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005348:	4b39      	ldr	r3, [pc, #228]	@ (8005430 <xQueueGenericSend+0x210>)
 800534a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005358:	f002 f84e 	bl	80073f8 <vPortExitCritical>
				return pdPASS;
 800535c:	2301      	movs	r3, #1
 800535e:	e063      	b.n	8005428 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005366:	f002 f847 	bl	80073f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800536a:	2300      	movs	r3, #0
 800536c:	e05c      	b.n	8005428 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fb49 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005382:	f002 f839 	bl	80073f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005386:	f001 f8c3 	bl	8006510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800538a:	f001 ffff 	bl	800738c <vPortEnterCritical>
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005394:	b25b      	sxtb	r3, r3
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d103      	bne.n	80053a4 <xQueueGenericSend+0x184>
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d103      	bne.n	80053ba <xQueueGenericSend+0x19a>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053ba:	f002 f81d 	bl	80073f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053be:	1d3a      	adds	r2, r7, #4
 80053c0:	f107 0314 	add.w	r3, r7, #20
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 fb38 	bl	8006a3c <xTaskCheckForTimeOut>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d124      	bne.n	800541c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053d4:	f000 fd6a 	bl	8005eac <prvIsQueueFull>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d018      	beq.n	8005410 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e0:	3310      	adds	r3, #16
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 fa84 	bl	80068f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053ee:	f000 fcf5 	bl	8005ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053f2:	f001 f89b 	bl	800652c <xTaskResumeAll>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f47f af7c 	bne.w	80052f6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80053fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005430 <xQueueGenericSend+0x210>)
 8005400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	e772      	b.n	80052f6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005412:	f000 fce3 	bl	8005ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005416:	f001 f889 	bl	800652c <xTaskResumeAll>
 800541a:	e76c      	b.n	80052f6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800541c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800541e:	f000 fcdd 	bl	8005ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005422:	f001 f883 	bl	800652c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005428:	4618      	mov	r0, r3
 800542a:	3738      	adds	r7, #56	@ 0x38
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08e      	sub	sp, #56	@ 0x38
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10d      	bne.n	8005468 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	b672      	cpsid	i
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	b662      	cpsie	i
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <xQueueGenericSendFromISR+0x42>
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <xQueueGenericSendFromISR+0x46>
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <xQueueGenericSendFromISR+0x48>
 800547a:	2300      	movs	r3, #0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10d      	bne.n	800549c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	b672      	cpsid	i
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	b662      	cpsie	i
 8005494:	623b      	str	r3, [r7, #32]
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	e7fd      	b.n	8005498 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSendFromISR+0x76>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <xQueueGenericSendFromISR+0x7a>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <xQueueGenericSendFromISR+0x7c>
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10d      	bne.n	80054d0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	b672      	cpsid	i
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	b662      	cpsie	i
 80054c8:	61fb      	str	r3, [r7, #28]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054d0:	f002 f844 	bl	800755c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054d4:	f3ef 8211 	mrs	r2, BASEPRI
 80054d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054dc:	b672      	cpsid	i
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	b662      	cpsie	i
 80054ec:	61ba      	str	r2, [r7, #24]
 80054ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <xQueueGenericSendFromISR+0xd2>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d12c      	bne.n	8005560 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800550c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005516:	f000 fbd1 	bl	8005cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800551a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	d112      	bne.n	800554a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	d016      	beq.n	800555a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	3324      	adds	r3, #36	@ 0x24
 8005530:	4618      	mov	r0, r3
 8005532:	f001 fa07 	bl	8006944 <xTaskRemoveFromEventList>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e007      	b.n	800555a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800554a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800554e:	3301      	adds	r3, #1
 8005550:	b2db      	uxtb	r3, r3
 8005552:	b25a      	sxtb	r2, r3
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800555a:	2301      	movs	r3, #1
 800555c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800555e:	e001      	b.n	8005564 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005560:	2300      	movs	r3, #0
 8005562:	637b      	str	r3, [r7, #52]	@ 0x34
 8005564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005566:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800556e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005572:	4618      	mov	r0, r3
 8005574:	3738      	adds	r7, #56	@ 0x38
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b08e      	sub	sp, #56	@ 0x38
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10d      	bne.n	80055aa <xQueueGiveFromISR+0x30>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	b672      	cpsid	i
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	b662      	cpsie	i
 80055a2:	623b      	str	r3, [r7, #32]
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <xQueueGiveFromISR+0x54>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b6:	b672      	cpsid	i
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	b662      	cpsie	i
 80055c6:	61fb      	str	r3, [r7, #28]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <xQueueGiveFromISR+0x64>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <xQueueGiveFromISR+0x68>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueGiveFromISR+0x6a>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10d      	bne.n	8005604 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ec:	b672      	cpsid	i
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	b662      	cpsie	i
 80055fc:	61bb      	str	r3, [r7, #24]
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	e7fd      	b.n	8005600 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005604:	f001 ffaa 	bl	800755c <vPortValidateInterruptPriority>
	__asm volatile
 8005608:	f3ef 8211 	mrs	r2, BASEPRI
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	b672      	cpsid	i
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	b662      	cpsie	i
 8005620:	617a      	str	r2, [r7, #20]
 8005622:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005624:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005634:	429a      	cmp	r2, r3
 8005636:	d22b      	bcs.n	8005690 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800563e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800564a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d112      	bne.n	800567a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d016      	beq.n	800568a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	3324      	adds	r3, #36	@ 0x24
 8005660:	4618      	mov	r0, r3
 8005662:	f001 f96f 	bl	8006944 <xTaskRemoveFromEventList>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e007      	b.n	800568a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800567a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800567e:	3301      	adds	r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	b25a      	sxtb	r2, r3
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800568a:	2301      	movs	r3, #1
 800568c:	637b      	str	r3, [r7, #52]	@ 0x34
 800568e:	e001      	b.n	8005694 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005690:	2300      	movs	r3, #0
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
 8005694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005696:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3738      	adds	r7, #56	@ 0x38
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	@ 0x30
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10d      	bne.n	80056e2 <xQueueReceive+0x36>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	b672      	cpsid	i
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	b662      	cpsie	i
 80056da:	623b      	str	r3, [r7, #32]
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	e7fd      	b.n	80056de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <xQueueReceive+0x44>
 80056e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <xQueueReceive+0x48>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <xQueueReceive+0x4a>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10d      	bne.n	8005716 <xQueueReceive+0x6a>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	b672      	cpsid	i
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	b662      	cpsie	i
 800570e:	61fb      	str	r3, [r7, #28]
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005716:	f001 fae3 	bl	8006ce0 <xTaskGetSchedulerState>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <xQueueReceive+0x7a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <xQueueReceive+0x7e>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <xQueueReceive+0x80>
 800572a:	2300      	movs	r3, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <xQueueReceive+0xa0>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	b672      	cpsid	i
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	b662      	cpsie	i
 8005744:	61bb      	str	r3, [r7, #24]
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800574c:	f001 fe1e 	bl	800738c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01f      	beq.n	800579c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005760:	f000 fb16 	bl	8005d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00f      	beq.n	8005794 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	3310      	adds	r3, #16
 8005778:	4618      	mov	r0, r3
 800577a:	f001 f8e3 	bl	8006944 <xTaskRemoveFromEventList>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005784:	4b3c      	ldr	r3, [pc, #240]	@ (8005878 <xQueueReceive+0x1cc>)
 8005786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005794:	f001 fe30 	bl	80073f8 <vPortExitCritical>
				return pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	e069      	b.n	8005870 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057a2:	f001 fe29 	bl	80073f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e062      	b.n	8005870 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 f92b 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057be:	f001 fe1b 	bl	80073f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057c2:	f000 fea5 	bl	8006510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c6:	f001 fde1 	bl	800738c <vPortEnterCritical>
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d103      	bne.n	80057e0 <xQueueReceive+0x134>
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e6:	b25b      	sxtb	r3, r3
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d103      	bne.n	80057f6 <xQueueReceive+0x14a>
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f6:	f001 fdff 	bl	80073f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057fa:	1d3a      	adds	r2, r7, #4
 80057fc:	f107 0310 	add.w	r3, r7, #16
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f001 f91a 	bl	8006a3c <xTaskCheckForTimeOut>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d123      	bne.n	8005856 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800580e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005810:	f000 fb36 	bl	8005e80 <prvIsQueueEmpty>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d017      	beq.n	800584a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800581a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581c:	3324      	adds	r3, #36	@ 0x24
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f866 	bl	80068f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800582a:	f000 fad7 	bl	8005ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800582e:	f000 fe7d 	bl	800652c <xTaskResumeAll>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d189      	bne.n	800574c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005838:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <xQueueReceive+0x1cc>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	e780      	b.n	800574c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800584a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800584c:	f000 fac6 	bl	8005ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005850:	f000 fe6c 	bl	800652c <xTaskResumeAll>
 8005854:	e77a      	b.n	800574c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005858:	f000 fac0 	bl	8005ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800585c:	f000 fe66 	bl	800652c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005862:	f000 fb0d 	bl	8005e80 <prvIsQueueEmpty>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f43f af6f 	beq.w	800574c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800586e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005870:	4618      	mov	r0, r3
 8005872:	3730      	adds	r7, #48	@ 0x30
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08e      	sub	sp, #56	@ 0x38
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10d      	bne.n	80058b4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589c:	b672      	cpsid	i
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	b662      	cpsie	i
 80058ac:	623b      	str	r3, [r7, #32]
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	e7fd      	b.n	80058b0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	b672      	cpsid	i
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	b662      	cpsie	i
 80058d0:	61fb      	str	r3, [r7, #28]
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	e7fd      	b.n	80058d4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058d8:	f001 fa02 	bl	8006ce0 <xTaskGetSchedulerState>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <xQueueSemaphoreTake+0x6c>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <xQueueSemaphoreTake+0x70>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <xQueueSemaphoreTake+0x72>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10d      	bne.n	800590e <xQueueSemaphoreTake+0x92>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	b672      	cpsid	i
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	b662      	cpsie	i
 8005906:	61bb      	str	r3, [r7, #24]
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	e7fd      	b.n	800590a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800590e:	f001 fd3d 	bl	800738c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	2b00      	cmp	r3, #0
 800591c:	d024      	beq.n	8005968 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800592e:	f001 fba1 	bl	8007074 <pvTaskIncrementMutexHeldCount>
 8005932:	4602      	mov	r2, r0
 8005934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005936:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00f      	beq.n	8005960 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005942:	3310      	adds	r3, #16
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fffd 	bl	8006944 <xTaskRemoveFromEventList>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005950:	4b55      	ldr	r3, [pc, #340]	@ (8005aa8 <xQueueSemaphoreTake+0x22c>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005960:	f001 fd4a 	bl	80073f8 <vPortExitCritical>
				return pdPASS;
 8005964:	2301      	movs	r3, #1
 8005966:	e09a      	b.n	8005a9e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d114      	bne.n	8005998 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00d      	beq.n	8005990 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	b672      	cpsid	i
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	b662      	cpsie	i
 8005988:	617b      	str	r3, [r7, #20]
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	e7fd      	b.n	800598c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005990:	f001 fd32 	bl	80073f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005994:	2300      	movs	r3, #0
 8005996:	e082      	b.n	8005a9e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800599e:	f107 030c 	add.w	r3, r7, #12
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 f834 	bl	8006a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ac:	f001 fd24 	bl	80073f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059b0:	f000 fdae 	bl	8006510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059b4:	f001 fcea 	bl	800738c <vPortEnterCritical>
 80059b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059be:	b25b      	sxtb	r3, r3
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d103      	bne.n	80059ce <xQueueSemaphoreTake+0x152>
 80059c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059d4:	b25b      	sxtb	r3, r3
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d103      	bne.n	80059e4 <xQueueSemaphoreTake+0x168>
 80059dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059e4:	f001 fd08 	bl	80073f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059e8:	463a      	mov	r2, r7
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	4611      	mov	r1, r2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 f823 	bl	8006a3c <xTaskCheckForTimeOut>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d132      	bne.n	8005a62 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059fe:	f000 fa3f 	bl	8005e80 <prvIsQueueEmpty>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d026      	beq.n	8005a56 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005a10:	f001 fcbc 	bl	800738c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 f97f 	bl	8006d1c <xTaskPriorityInherit>
 8005a1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005a20:	f001 fcea 	bl	80073f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a26:	3324      	adds	r3, #36	@ 0x24
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 ff61 	bl	80068f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a34:	f000 f9d2 	bl	8005ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a38:	f000 fd78 	bl	800652c <xTaskResumeAll>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f47f af65 	bne.w	800590e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005a44:	4b18      	ldr	r3, [pc, #96]	@ (8005aa8 <xQueueSemaphoreTake+0x22c>)
 8005a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	e75b      	b.n	800590e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a58:	f000 f9c0 	bl	8005ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a5c:	f000 fd66 	bl	800652c <xTaskResumeAll>
 8005a60:	e755      	b.n	800590e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a64:	f000 f9ba 	bl	8005ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a68:	f000 fd60 	bl	800652c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a6e:	f000 fa07 	bl	8005e80 <prvIsQueueEmpty>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f43f af4a 	beq.w	800590e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00d      	beq.n	8005a9c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005a80:	f001 fc84 	bl	800738c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a86:	f000 f901 	bl	8005c8c <prvGetDisinheritPriorityAfterTimeout>
 8005a8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 fa4e 	bl	8006f34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a98:	f001 fcae 	bl	80073f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3738      	adds	r7, #56	@ 0x38
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08e      	sub	sp, #56	@ 0x38
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	b672      	cpsid	i
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	b662      	cpsie	i
 8005ad6:	623b      	str	r3, [r7, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <xQueueReceiveFromISR+0x40>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <xQueueReceiveFromISR+0x44>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <xQueueReceiveFromISR+0x46>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10d      	bne.n	8005b12 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	b672      	cpsid	i
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	b662      	cpsie	i
 8005b0a:	61fb      	str	r3, [r7, #28]
}
 8005b0c:	bf00      	nop
 8005b0e:	bf00      	nop
 8005b10:	e7fd      	b.n	8005b0e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b12:	f001 fd23 	bl	800755c <vPortValidateInterruptPriority>
	__asm volatile
 8005b16:	f3ef 8211 	mrs	r2, BASEPRI
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	b672      	cpsid	i
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	b662      	cpsie	i
 8005b2e:	61ba      	str	r2, [r7, #24]
 8005b30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d02f      	beq.n	8005ba2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b50:	f000 f91e 	bl	8005d90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b56:	1e5a      	subs	r2, r3, #1
 8005b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005b5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d112      	bne.n	8005b8c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d016      	beq.n	8005b9c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	3310      	adds	r3, #16
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fee6 	bl	8006944 <xTaskRemoveFromEventList>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00e      	beq.n	8005b9c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e007      	b.n	8005b9c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b90:	3301      	adds	r3, #1
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	b25a      	sxtb	r2, r3
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba0:	e001      	b.n	8005ba6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f383 8811 	msr	BASEPRI, r3
}
 8005bb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3738      	adds	r7, #56	@ 0x38
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10d      	bne.n	8005be6 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bce:	b672      	cpsid	i
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	b662      	cpsie	i
 8005bde:	60bb      	str	r3, [r7, #8]
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	e7fd      	b.n	8005be2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005be6:	f001 fbd1 	bl	800738c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bee:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005bf0:	f001 fc02 	bl	80073f8 <vPortExitCritical>

	return uxReturn;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b087      	sub	sp, #28
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10d      	bne.n	8005c2c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	b672      	cpsid	i
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	b662      	cpsie	i
 8005c24:	60fb      	str	r3, [r7, #12]
}
 8005c26:	bf00      	nop
 8005c28:	bf00      	nop
 8005c2a:	e7fd      	b.n	8005c28 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c30:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005c32:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005c34:	4618      	mov	r0, r3
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <vQueueDelete+0x2e>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	b672      	cpsid	i
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	b662      	cpsie	i
 8005c66:	60bb      	str	r3, [r7, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f934 	bl	8005edc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f001 fd80 	bl	8007784 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1c3 0307 	rsb	r3, r3, #7
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e001      	b.n	8005cae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005cae:	68fb      	ldr	r3, [r7, #12]
	}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d14d      	bne.n	8005d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f898 	bl	8006e1c <xTaskPriorityDisinherit>
 8005cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	e043      	b.n	8005d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d119      	bne.n	8005d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6858      	ldr	r0, [r3, #4]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	461a      	mov	r2, r3
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	f00f fbef 	bl	80154ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	441a      	add	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d32b      	bcc.n	8005d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	e026      	b.n	8005d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68d8      	ldr	r0, [r3, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	f00f fbd5 	bl	80154ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d48:	425b      	negs	r3, r3
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d207      	bcs.n	8005d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	425b      	negs	r3, r3
 8005d66:	441a      	add	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d105      	bne.n	8005d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d86:	697b      	ldr	r3, [r7, #20]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d018      	beq.n	8005dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	441a      	add	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d303      	bcc.n	8005dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68d9      	ldr	r1, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6838      	ldr	r0, [r7, #0]
 8005dd0:	f00f fb8b 	bl	80154ea <memcpy>
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005de4:	f001 fad2 	bl	800738c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005df0:	e011      	b.n	8005e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d012      	beq.n	8005e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3324      	adds	r3, #36	@ 0x24
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fda0 	bl	8006944 <xTaskRemoveFromEventList>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e0a:	f000 fe7f 	bl	8006b0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dce9      	bgt.n	8005df2 <prvUnlockQueue+0x16>
 8005e1e:	e000      	b.n	8005e22 <prvUnlockQueue+0x46>
					break;
 8005e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	22ff      	movs	r2, #255	@ 0xff
 8005e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e2a:	f001 fae5 	bl	80073f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e2e:	f001 faad 	bl	800738c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e3a:	e011      	b.n	8005e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d012      	beq.n	8005e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3310      	adds	r3, #16
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fd7b 	bl	8006944 <xTaskRemoveFromEventList>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e54:	f000 fe5a 	bl	8006b0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dce9      	bgt.n	8005e3c <prvUnlockQueue+0x60>
 8005e68:	e000      	b.n	8005e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	22ff      	movs	r2, #255	@ 0xff
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e74:	f001 fac0 	bl	80073f8 <vPortExitCritical>
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e88:	f001 fa80 	bl	800738c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e001      	b.n	8005e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e9e:	f001 faab 	bl	80073f8 <vPortExitCritical>

	return xReturn;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005eb4:	f001 fa6a 	bl	800738c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d102      	bne.n	8005eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e001      	b.n	8005ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ece:	f001 fa93 	bl	80073f8 <vPortExitCritical>

	return xReturn;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e016      	b.n	8005f18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005eea:	4a10      	ldr	r2, [pc, #64]	@ (8005f2c <vQueueUnregisterQueue+0x50>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d10b      	bne.n	8005f12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005efa:	4a0c      	ldr	r2, [pc, #48]	@ (8005f2c <vQueueUnregisterQueue+0x50>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2100      	movs	r1, #0
 8005f00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005f04:	4a09      	ldr	r2, [pc, #36]	@ (8005f2c <vQueueUnregisterQueue+0x50>)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	605a      	str	r2, [r3, #4]
				break;
 8005f10:	e006      	b.n	8005f20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3301      	adds	r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b07      	cmp	r3, #7
 8005f1c:	d9e5      	bls.n	8005eea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	20004fcc 	.word	0x20004fcc

08005f30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	@ 0x38
 8005f34:	af04      	add	r7, sp, #16
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10d      	bne.n	8005f60 <xTaskCreateStatic+0x30>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
 8005f58:	623b      	str	r3, [r7, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10d      	bne.n	8005f82 <xTaskCreateStatic+0x52>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	b672      	cpsid	i
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	b662      	cpsie	i
 8005f7a:	61fb      	str	r3, [r7, #28]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f82:	23a0      	movs	r3, #160	@ 0xa0
 8005f84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f8a:	d00d      	beq.n	8005fa8 <xTaskCreateStatic+0x78>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	b672      	cpsid	i
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	b662      	cpsie	i
 8005fa0:	61bb      	str	r3, [r7, #24]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01e      	beq.n	8005fee <xTaskCreateStatic+0xbe>
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d01b      	beq.n	8005fee <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9303      	str	r3, [sp, #12]
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	9302      	str	r3, [sp, #8]
 8005fd0:	f107 0314 	add.w	r3, r7, #20
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f851 	bl	8006088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fe8:	f000 f8f0 	bl	80061cc <prvAddNewTaskToReadyList>
 8005fec:	e001      	b.n	8005ff2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ff2:	697b      	ldr	r3, [r7, #20]
	}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3728      	adds	r7, #40	@ 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08c      	sub	sp, #48	@ 0x30
 8006000:	af04      	add	r7, sp, #16
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	4613      	mov	r3, r2
 800600a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4618      	mov	r0, r3
 8006012:	f001 fae9 	bl	80075e8 <pvPortMalloc>
 8006016:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00e      	beq.n	800603c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800601e:	20a0      	movs	r0, #160	@ 0xa0
 8006020:	f001 fae2 	bl	80075e8 <pvPortMalloc>
 8006024:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	631a      	str	r2, [r3, #48]	@ 0x30
 8006032:	e005      	b.n	8006040 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006034:	6978      	ldr	r0, [r7, #20]
 8006036:	f001 fba5 	bl	8007784 <vPortFree>
 800603a:	e001      	b.n	8006040 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d017      	beq.n	8006076 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	2300      	movs	r3, #0
 8006052:	9303      	str	r3, [sp, #12]
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	9302      	str	r3, [sp, #8]
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f80f 	bl	8006088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800606a:	69f8      	ldr	r0, [r7, #28]
 800606c:	f000 f8ae 	bl	80061cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006070:	2301      	movs	r3, #1
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	e002      	b.n	800607c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006076:	f04f 33ff 	mov.w	r3, #4294967295
 800607a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800607c:	69bb      	ldr	r3, [r7, #24]
	}
 800607e:	4618      	mov	r0, r3
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80060a0:	440b      	add	r3, r1
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060be:	b672      	cpsid	i
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	b662      	cpsie	i
 80060ce:	617b      	str	r3, [r7, #20]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01f      	beq.n	800611c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	e012      	b.n	8006108 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	7819      	ldrb	r1, [r3, #0]
 80060ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	3334      	adds	r3, #52	@ 0x34
 80060f2:	460a      	mov	r2, r1
 80060f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	3301      	adds	r3, #1
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	2b0f      	cmp	r3, #15
 800610c:	d9e9      	bls.n	80060e2 <prvInitialiseNewTask+0x5a>
 800610e:	e000      	b.n	8006112 <prvInitialiseNewTask+0x8a>
			{
				break;
 8006110:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800611a:	e003      	b.n	8006124 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006126:	2b06      	cmp	r3, #6
 8006128:	d901      	bls.n	800612e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800612a:	2306      	movs	r3, #6
 800612c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006132:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006138:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	2200      	movs	r2, #0
 800613e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	3304      	adds	r3, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe fe34 	bl	8004db2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	3318      	adds	r3, #24
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fe2f 	bl	8004db2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006158:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	f1c3 0207 	rsb	r2, r3, #7
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006168:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	2200      	movs	r2, #0
 800616e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	2200      	movs	r2, #0
 8006176:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	334c      	adds	r3, #76	@ 0x4c
 800617e:	224c      	movs	r2, #76	@ 0x4c
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f00f f8d3 	bl	801532e <memset>
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	4a0d      	ldr	r2, [pc, #52]	@ (80061c0 <prvInitialiseNewTask+0x138>)
 800618c:	651a      	str	r2, [r3, #80]	@ 0x50
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	4a0c      	ldr	r2, [pc, #48]	@ (80061c4 <prvInitialiseNewTask+0x13c>)
 8006192:	655a      	str	r2, [r3, #84]	@ 0x54
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	4a0c      	ldr	r2, [pc, #48]	@ (80061c8 <prvInitialiseNewTask+0x140>)
 8006198:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68f9      	ldr	r1, [r7, #12]
 800619e:	69b8      	ldr	r0, [r7, #24]
 80061a0:	f000 ffe2 	bl	8007168 <pxPortInitialiseStack>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b6:	bf00      	nop
 80061b8:	3720      	adds	r7, #32
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	2000bfc8 	.word	0x2000bfc8
 80061c4:	2000c030 	.word	0x2000c030
 80061c8:	2000c098 	.word	0x2000c098

080061cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061d4:	f001 f8da 	bl	800738c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006284 <prvAddNewTaskToReadyList+0xb8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3301      	adds	r3, #1
 80061de:	4a29      	ldr	r2, [pc, #164]	@ (8006284 <prvAddNewTaskToReadyList+0xb8>)
 80061e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061e2:	4b29      	ldr	r3, [pc, #164]	@ (8006288 <prvAddNewTaskToReadyList+0xbc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061ea:	4a27      	ldr	r2, [pc, #156]	@ (8006288 <prvAddNewTaskToReadyList+0xbc>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061f0:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <prvAddNewTaskToReadyList+0xb8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d110      	bne.n	800621a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061f8:	f000 fcac 	bl	8006b54 <prvInitialiseTaskLists>
 80061fc:	e00d      	b.n	800621a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061fe:	4b23      	ldr	r3, [pc, #140]	@ (800628c <prvAddNewTaskToReadyList+0xc0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006206:	4b20      	ldr	r3, [pc, #128]	@ (8006288 <prvAddNewTaskToReadyList+0xbc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	429a      	cmp	r2, r3
 8006212:	d802      	bhi.n	800621a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006214:	4a1c      	ldr	r2, [pc, #112]	@ (8006288 <prvAddNewTaskToReadyList+0xbc>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800621a:	4b1d      	ldr	r3, [pc, #116]	@ (8006290 <prvAddNewTaskToReadyList+0xc4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3301      	adds	r3, #1
 8006220:	4a1b      	ldr	r2, [pc, #108]	@ (8006290 <prvAddNewTaskToReadyList+0xc4>)
 8006222:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006228:	2201      	movs	r2, #1
 800622a:	409a      	lsls	r2, r3
 800622c:	4b19      	ldr	r3, [pc, #100]	@ (8006294 <prvAddNewTaskToReadyList+0xc8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4313      	orrs	r3, r2
 8006232:	4a18      	ldr	r2, [pc, #96]	@ (8006294 <prvAddNewTaskToReadyList+0xc8>)
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4a15      	ldr	r2, [pc, #84]	@ (8006298 <prvAddNewTaskToReadyList+0xcc>)
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3304      	adds	r3, #4
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f7fe fdbd 	bl	8004dcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006252:	f001 f8d1 	bl	80073f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006256:	4b0d      	ldr	r3, [pc, #52]	@ (800628c <prvAddNewTaskToReadyList+0xc0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800625e:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <prvAddNewTaskToReadyList+0xbc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	429a      	cmp	r2, r3
 800626a:	d207      	bcs.n	800627c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800626c:	4b0b      	ldr	r3, [pc, #44]	@ (800629c <prvAddNewTaskToReadyList+0xd0>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	2000510c 	.word	0x2000510c
 8006288:	2000500c 	.word	0x2000500c
 800628c:	20005118 	.word	0x20005118
 8006290:	20005128 	.word	0x20005128
 8006294:	20005114 	.word	0x20005114
 8006298:	20005010 	.word	0x20005010
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80062a8:	f001 f870 	bl	800738c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <vTaskDelete+0x18>
 80062b2:	4b3a      	ldr	r3, [pc, #232]	@ (800639c <vTaskDelete+0xfc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	e000      	b.n	80062ba <vTaskDelete+0x1a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fde0 	bl	8004e86 <uxListRemove>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d115      	bne.n	80062f8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d0:	4933      	ldr	r1, [pc, #204]	@ (80063a0 <vTaskDelete+0x100>)
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <vTaskDelete+0x58>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	2201      	movs	r2, #1
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	43da      	mvns	r2, r3
 80062ee:	4b2d      	ldr	r3, [pc, #180]	@ (80063a4 <vTaskDelete+0x104>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4013      	ands	r3, r2
 80062f4:	4a2b      	ldr	r2, [pc, #172]	@ (80063a4 <vTaskDelete+0x104>)
 80062f6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3318      	adds	r3, #24
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe fdbe 	bl	8004e86 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800630a:	4b27      	ldr	r3, [pc, #156]	@ (80063a8 <vTaskDelete+0x108>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	4a25      	ldr	r2, [pc, #148]	@ (80063a8 <vTaskDelete+0x108>)
 8006312:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006314:	4b21      	ldr	r3, [pc, #132]	@ (800639c <vTaskDelete+0xfc>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	429a      	cmp	r2, r3
 800631c:	d10b      	bne.n	8006336 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3304      	adds	r3, #4
 8006322:	4619      	mov	r1, r3
 8006324:	4821      	ldr	r0, [pc, #132]	@ (80063ac <vTaskDelete+0x10c>)
 8006326:	f7fe fd51 	bl	8004dcc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800632a:	4b21      	ldr	r3, [pc, #132]	@ (80063b0 <vTaskDelete+0x110>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	4a1f      	ldr	r2, [pc, #124]	@ (80063b0 <vTaskDelete+0x110>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	e009      	b.n	800634a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006336:	4b1f      	ldr	r3, [pc, #124]	@ (80063b4 <vTaskDelete+0x114>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3b01      	subs	r3, #1
 800633c:	4a1d      	ldr	r2, [pc, #116]	@ (80063b4 <vTaskDelete+0x114>)
 800633e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 fc75 	bl	8006c30 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006346:	f000 fcab 	bl	8006ca0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800634a:	f001 f855 	bl	80073f8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800634e:	4b1a      	ldr	r3, [pc, #104]	@ (80063b8 <vTaskDelete+0x118>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01e      	beq.n	8006394 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8006356:	4b11      	ldr	r3, [pc, #68]	@ (800639c <vTaskDelete+0xfc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	429a      	cmp	r2, r3
 800635e:	d119      	bne.n	8006394 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006360:	4b16      	ldr	r3, [pc, #88]	@ (80063bc <vTaskDelete+0x11c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00d      	beq.n	8006384 <vTaskDelete+0xe4>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	60bb      	str	r3, [r7, #8]
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8006384:	4b0e      	ldr	r3, [pc, #56]	@ (80063c0 <vTaskDelete+0x120>)
 8006386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	2000500c 	.word	0x2000500c
 80063a0:	20005010 	.word	0x20005010
 80063a4:	20005114 	.word	0x20005114
 80063a8:	20005128 	.word	0x20005128
 80063ac:	200050e0 	.word	0x200050e0
 80063b0:	200050f4 	.word	0x200050f4
 80063b4:	2000510c 	.word	0x2000510c
 80063b8:	20005118 	.word	0x20005118
 80063bc:	20005134 	.word	0x20005134
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01a      	beq.n	800640c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063d6:	4b15      	ldr	r3, [pc, #84]	@ (800642c <vTaskDelay+0x68>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <vTaskDelay+0x36>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	b672      	cpsid	i
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	b662      	cpsie	i
 80063f2:	60bb      	str	r3, [r7, #8]
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	e7fd      	b.n	80063f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80063fa:	f000 f889 	bl	8006510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063fe:	2100      	movs	r1, #0
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fe4b 	bl	800709c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006406:	f000 f891 	bl	800652c <xTaskResumeAll>
 800640a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d107      	bne.n	8006422 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006412:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <vTaskDelay+0x6c>)
 8006414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20005134 	.word	0x20005134
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	@ 0x28
 8006438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006442:	463a      	mov	r2, r7
 8006444:	1d39      	adds	r1, r7, #4
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4618      	mov	r0, r3
 800644c:	f7fa f8b8 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	9202      	str	r2, [sp, #8]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	2300      	movs	r3, #0
 8006460:	460a      	mov	r2, r1
 8006462:	4923      	ldr	r1, [pc, #140]	@ (80064f0 <vTaskStartScheduler+0xbc>)
 8006464:	4823      	ldr	r0, [pc, #140]	@ (80064f4 <vTaskStartScheduler+0xc0>)
 8006466:	f7ff fd63 	bl	8005f30 <xTaskCreateStatic>
 800646a:	4603      	mov	r3, r0
 800646c:	4a22      	ldr	r2, [pc, #136]	@ (80064f8 <vTaskStartScheduler+0xc4>)
 800646e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006470:	4b21      	ldr	r3, [pc, #132]	@ (80064f8 <vTaskStartScheduler+0xc4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006478:	2301      	movs	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e001      	b.n	8006482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d11d      	bne.n	80064c4 <vTaskStartScheduler+0x90>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	b672      	cpsid	i
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	b662      	cpsie	i
 800649c:	613b      	str	r3, [r7, #16]
}
 800649e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064a0:	4b16      	ldr	r3, [pc, #88]	@ (80064fc <vTaskStartScheduler+0xc8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	334c      	adds	r3, #76	@ 0x4c
 80064a6:	4a16      	ldr	r2, [pc, #88]	@ (8006500 <vTaskStartScheduler+0xcc>)
 80064a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064aa:	4b16      	ldr	r3, [pc, #88]	@ (8006504 <vTaskStartScheduler+0xd0>)
 80064ac:	f04f 32ff 	mov.w	r2, #4294967295
 80064b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064b2:	4b15      	ldr	r3, [pc, #84]	@ (8006508 <vTaskStartScheduler+0xd4>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064b8:	4b14      	ldr	r3, [pc, #80]	@ (800650c <vTaskStartScheduler+0xd8>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064be:	f000 fee7 	bl	8007290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064c2:	e011      	b.n	80064e8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d10d      	bne.n	80064e8 <vTaskStartScheduler+0xb4>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	b672      	cpsid	i
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	b662      	cpsie	i
 80064e0:	60fb      	str	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	e7fd      	b.n	80064e4 <vTaskStartScheduler+0xb0>
}
 80064e8:	bf00      	nop
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	080162fc 	.word	0x080162fc
 80064f4:	08006b25 	.word	0x08006b25
 80064f8:	20005130 	.word	0x20005130
 80064fc:	2000500c 	.word	0x2000500c
 8006500:	2000003c 	.word	0x2000003c
 8006504:	2000512c 	.word	0x2000512c
 8006508:	20005118 	.word	0x20005118
 800650c:	20005110 	.word	0x20005110

08006510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006514:	4b04      	ldr	r3, [pc, #16]	@ (8006528 <vTaskSuspendAll+0x18>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3301      	adds	r3, #1
 800651a:	4a03      	ldr	r2, [pc, #12]	@ (8006528 <vTaskSuspendAll+0x18>)
 800651c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800651e:	bf00      	nop
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	20005134 	.word	0x20005134

0800652c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800653a:	4b43      	ldr	r3, [pc, #268]	@ (8006648 <xTaskResumeAll+0x11c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <xTaskResumeAll+0x32>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006546:	b672      	cpsid	i
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	b662      	cpsie	i
 8006556:	603b      	str	r3, [r7, #0]
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	e7fd      	b.n	800655a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800655e:	f000 ff15 	bl	800738c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006562:	4b39      	ldr	r3, [pc, #228]	@ (8006648 <xTaskResumeAll+0x11c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3b01      	subs	r3, #1
 8006568:	4a37      	ldr	r2, [pc, #220]	@ (8006648 <xTaskResumeAll+0x11c>)
 800656a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800656c:	4b36      	ldr	r3, [pc, #216]	@ (8006648 <xTaskResumeAll+0x11c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d161      	bne.n	8006638 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006574:	4b35      	ldr	r3, [pc, #212]	@ (800664c <xTaskResumeAll+0x120>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d05d      	beq.n	8006638 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800657c:	e02e      	b.n	80065dc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657e:	4b34      	ldr	r3, [pc, #208]	@ (8006650 <xTaskResumeAll+0x124>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3318      	adds	r3, #24
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fc7b 	bl	8004e86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3304      	adds	r3, #4
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe fc76 	bl	8004e86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	2201      	movs	r2, #1
 80065a0:	409a      	lsls	r2, r3
 80065a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006654 <xTaskResumeAll+0x128>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006654 <xTaskResumeAll+0x128>)
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4a27      	ldr	r2, [pc, #156]	@ (8006658 <xTaskResumeAll+0x12c>)
 80065ba:	441a      	add	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f7fe fc02 	bl	8004dcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065cc:	4b23      	ldr	r3, [pc, #140]	@ (800665c <xTaskResumeAll+0x130>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d302      	bcc.n	80065dc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80065d6:	4b22      	ldr	r3, [pc, #136]	@ (8006660 <xTaskResumeAll+0x134>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006650 <xTaskResumeAll+0x124>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1cc      	bne.n	800657e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065ea:	f000 fb59 	bl	8006ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006664 <xTaskResumeAll+0x138>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d010      	beq.n	800661c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065fa:	f000 f859 	bl	80066b0 <xTaskIncrementTick>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006604:	4b16      	ldr	r3, [pc, #88]	@ (8006660 <xTaskResumeAll+0x134>)
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3b01      	subs	r3, #1
 800660e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f1      	bne.n	80065fa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006616:	4b13      	ldr	r3, [pc, #76]	@ (8006664 <xTaskResumeAll+0x138>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800661c:	4b10      	ldr	r3, [pc, #64]	@ (8006660 <xTaskResumeAll+0x134>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006624:	2301      	movs	r3, #1
 8006626:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006628:	4b0f      	ldr	r3, [pc, #60]	@ (8006668 <xTaskResumeAll+0x13c>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006638:	f000 fede 	bl	80073f8 <vPortExitCritical>

	return xAlreadyYielded;
 800663c:	68bb      	ldr	r3, [r7, #8]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20005134 	.word	0x20005134
 800664c:	2000510c 	.word	0x2000510c
 8006650:	200050cc 	.word	0x200050cc
 8006654:	20005114 	.word	0x20005114
 8006658:	20005010 	.word	0x20005010
 800665c:	2000500c 	.word	0x2000500c
 8006660:	20005120 	.word	0x20005120
 8006664:	2000511c 	.word	0x2000511c
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <xTaskGetTickCount+0x1c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006678:	687b      	ldr	r3, [r7, #4]
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20005110 	.word	0x20005110

0800668c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006692:	f000 ff63 	bl	800755c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006696:	2300      	movs	r3, #0
 8006698:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800669a:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <xTaskGetTickCountFromISR+0x20>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066a0:	683b      	ldr	r3, [r7, #0]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20005110 	.word	0x20005110

080066b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ba:	4b50      	ldr	r3, [pc, #320]	@ (80067fc <xTaskIncrementTick+0x14c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f040 808b 	bne.w	80067da <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006800 <xTaskIncrementTick+0x150>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066cc:	4a4c      	ldr	r2, [pc, #304]	@ (8006800 <xTaskIncrementTick+0x150>)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d123      	bne.n	8006720 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80066d8:	4b4a      	ldr	r3, [pc, #296]	@ (8006804 <xTaskIncrementTick+0x154>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00d      	beq.n	80066fe <xTaskIncrementTick+0x4e>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	b672      	cpsid	i
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	b662      	cpsie	i
 80066f6:	603b      	str	r3, [r7, #0]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <xTaskIncrementTick+0x4a>
 80066fe:	4b41      	ldr	r3, [pc, #260]	@ (8006804 <xTaskIncrementTick+0x154>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	4b40      	ldr	r3, [pc, #256]	@ (8006808 <xTaskIncrementTick+0x158>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a3e      	ldr	r2, [pc, #248]	@ (8006804 <xTaskIncrementTick+0x154>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4a3e      	ldr	r2, [pc, #248]	@ (8006808 <xTaskIncrementTick+0x158>)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	4b3e      	ldr	r3, [pc, #248]	@ (800680c <xTaskIncrementTick+0x15c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	4a3c      	ldr	r2, [pc, #240]	@ (800680c <xTaskIncrementTick+0x15c>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	f000 fac0 	bl	8006ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006720:	4b3b      	ldr	r3, [pc, #236]	@ (8006810 <xTaskIncrementTick+0x160>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	429a      	cmp	r2, r3
 8006728:	d348      	bcc.n	80067bc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800672a:	4b36      	ldr	r3, [pc, #216]	@ (8006804 <xTaskIncrementTick+0x154>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006734:	4b36      	ldr	r3, [pc, #216]	@ (8006810 <xTaskIncrementTick+0x160>)
 8006736:	f04f 32ff 	mov.w	r2, #4294967295
 800673a:	601a      	str	r2, [r3, #0]
					break;
 800673c:	e03e      	b.n	80067bc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800673e:	4b31      	ldr	r3, [pc, #196]	@ (8006804 <xTaskIncrementTick+0x154>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d203      	bcs.n	800675e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006756:	4a2e      	ldr	r2, [pc, #184]	@ (8006810 <xTaskIncrementTick+0x160>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800675c:	e02e      	b.n	80067bc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fb8f 	bl	8004e86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	3318      	adds	r3, #24
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fb86 	bl	8004e86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	2201      	movs	r2, #1
 8006780:	409a      	lsls	r2, r3
 8006782:	4b24      	ldr	r3, [pc, #144]	@ (8006814 <xTaskIncrementTick+0x164>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4313      	orrs	r3, r2
 8006788:	4a22      	ldr	r2, [pc, #136]	@ (8006814 <xTaskIncrementTick+0x164>)
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4a1f      	ldr	r2, [pc, #124]	@ (8006818 <xTaskIncrementTick+0x168>)
 800679a:	441a      	add	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe fb12 	bl	8004dcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ac:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <xTaskIncrementTick+0x16c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d3b9      	bcc.n	800672a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80067b6:	2301      	movs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ba:	e7b6      	b.n	800672a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067bc:	4b17      	ldr	r3, [pc, #92]	@ (800681c <xTaskIncrementTick+0x16c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c2:	4915      	ldr	r1, [pc, #84]	@ (8006818 <xTaskIncrementTick+0x168>)
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d907      	bls.n	80067e4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80067d4:	2301      	movs	r3, #1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e004      	b.n	80067e4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80067da:	4b11      	ldr	r3, [pc, #68]	@ (8006820 <xTaskIncrementTick+0x170>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3301      	adds	r3, #1
 80067e0:	4a0f      	ldr	r2, [pc, #60]	@ (8006820 <xTaskIncrementTick+0x170>)
 80067e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80067e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006824 <xTaskIncrementTick+0x174>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067f0:	697b      	ldr	r3, [r7, #20]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20005134 	.word	0x20005134
 8006800:	20005110 	.word	0x20005110
 8006804:	200050c4 	.word	0x200050c4
 8006808:	200050c8 	.word	0x200050c8
 800680c:	20005124 	.word	0x20005124
 8006810:	2000512c 	.word	0x2000512c
 8006814:	20005114 	.word	0x20005114
 8006818:	20005010 	.word	0x20005010
 800681c:	2000500c 	.word	0x2000500c
 8006820:	2000511c 	.word	0x2000511c
 8006824:	20005120 	.word	0x20005120

08006828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800682e:	4b2b      	ldr	r3, [pc, #172]	@ (80068dc <vTaskSwitchContext+0xb4>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006836:	4b2a      	ldr	r3, [pc, #168]	@ (80068e0 <vTaskSwitchContext+0xb8>)
 8006838:	2201      	movs	r2, #1
 800683a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800683c:	e047      	b.n	80068ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800683e:	4b28      	ldr	r3, [pc, #160]	@ (80068e0 <vTaskSwitchContext+0xb8>)
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006844:	4b27      	ldr	r3, [pc, #156]	@ (80068e4 <vTaskSwitchContext+0xbc>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	fab3 f383 	clz	r3, r3
 8006850:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	f1c3 031f 	rsb	r3, r3, #31
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	4923      	ldr	r1, [pc, #140]	@ (80068e8 <vTaskSwitchContext+0xc0>)
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <vTaskSwitchContext+0x62>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	b672      	cpsid	i
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	b662      	cpsie	i
 8006882:	607b      	str	r3, [r7, #4]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <vTaskSwitchContext+0x5e>
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4a14      	ldr	r2, [pc, #80]	@ (80068e8 <vTaskSwitchContext+0xc0>)
 8006896:	4413      	add	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	605a      	str	r2, [r3, #4]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	3308      	adds	r3, #8
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d104      	bne.n	80068ba <vTaskSwitchContext+0x92>
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	4a0a      	ldr	r2, [pc, #40]	@ (80068ec <vTaskSwitchContext+0xc4>)
 80068c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068c4:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <vTaskSwitchContext+0xc4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	334c      	adds	r3, #76	@ 0x4c
 80068ca:	4a09      	ldr	r2, [pc, #36]	@ (80068f0 <vTaskSwitchContext+0xc8>)
 80068cc:	6013      	str	r3, [r2, #0]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20005134 	.word	0x20005134
 80068e0:	20005120 	.word	0x20005120
 80068e4:	20005114 	.word	0x20005114
 80068e8:	20005010 	.word	0x20005010
 80068ec:	2000500c 	.word	0x2000500c
 80068f0:	2000003c 	.word	0x2000003c

080068f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10d      	bne.n	8006920 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	b672      	cpsid	i
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	b662      	cpsie	i
 8006918:	60fb      	str	r3, [r7, #12]
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	e7fd      	b.n	800691c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006920:	4b07      	ldr	r3, [pc, #28]	@ (8006940 <vTaskPlaceOnEventList+0x4c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3318      	adds	r3, #24
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fe fa73 	bl	8004e14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800692e:	2101      	movs	r1, #1
 8006930:	6838      	ldr	r0, [r7, #0]
 8006932:	f000 fbb3 	bl	800709c <prvAddCurrentTaskToDelayedList>
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	2000500c 	.word	0x2000500c

08006944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10d      	bne.n	8006976 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	b672      	cpsid	i
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	b662      	cpsie	i
 800696e:	60fb      	str	r3, [r7, #12]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3318      	adds	r3, #24
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fa83 	bl	8004e86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006980:	4b1d      	ldr	r3, [pc, #116]	@ (80069f8 <xTaskRemoveFromEventList+0xb4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11c      	bne.n	80069c2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3304      	adds	r3, #4
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe fa7a 	bl	8004e86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006996:	2201      	movs	r2, #1
 8006998:	409a      	lsls	r2, r3
 800699a:	4b18      	ldr	r3, [pc, #96]	@ (80069fc <xTaskRemoveFromEventList+0xb8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4313      	orrs	r3, r2
 80069a0:	4a16      	ldr	r2, [pc, #88]	@ (80069fc <xTaskRemoveFromEventList+0xb8>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4a13      	ldr	r2, [pc, #76]	@ (8006a00 <xTaskRemoveFromEventList+0xbc>)
 80069b2:	441a      	add	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7fe fa06 	bl	8004dcc <vListInsertEnd>
 80069c0:	e005      	b.n	80069ce <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	3318      	adds	r3, #24
 80069c6:	4619      	mov	r1, r3
 80069c8:	480e      	ldr	r0, [pc, #56]	@ (8006a04 <xTaskRemoveFromEventList+0xc0>)
 80069ca:	f7fe f9ff 	bl	8004dcc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a08 <xTaskRemoveFromEventList+0xc4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	429a      	cmp	r2, r3
 80069da:	d905      	bls.n	80069e8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069e0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <xTaskRemoveFromEventList+0xc8>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e001      	b.n	80069ec <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069ec:	697b      	ldr	r3, [r7, #20]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20005134 	.word	0x20005134
 80069fc:	20005114 	.word	0x20005114
 8006a00:	20005010 	.word	0x20005010
 8006a04:	200050cc 	.word	0x200050cc
 8006a08:	2000500c 	.word	0x2000500c
 8006a0c:	20005120 	.word	0x20005120

08006a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a18:	4b06      	ldr	r3, [pc, #24]	@ (8006a34 <vTaskInternalSetTimeOutState+0x24>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a20:	4b05      	ldr	r3, [pc, #20]	@ (8006a38 <vTaskInternalSetTimeOutState+0x28>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	20005124 	.word	0x20005124
 8006a38:	20005110 	.word	0x20005110

08006a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10d      	bne.n	8006a68 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	b672      	cpsid	i
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	b662      	cpsie	i
 8006a60:	613b      	str	r3, [r7, #16]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10d      	bne.n	8006a8a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	b672      	cpsid	i
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	b662      	cpsie	i
 8006a82:	60fb      	str	r3, [r7, #12]
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	e7fd      	b.n	8006a86 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006a8a:	f000 fc7f 	bl	800738c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b04 <xTaskCheckForTimeOut+0xc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d102      	bne.n	8006aae <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	e023      	b.n	8006af6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b15      	ldr	r3, [pc, #84]	@ (8006b08 <xTaskCheckForTimeOut+0xcc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d007      	beq.n	8006aca <xTaskCheckForTimeOut+0x8e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d302      	bcc.n	8006aca <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	e015      	b.n	8006af6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d20b      	bcs.n	8006aec <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	1ad2      	subs	r2, r2, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff95 	bl	8006a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	e004      	b.n	8006af6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006af2:	2301      	movs	r3, #1
 8006af4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006af6:	f000 fc7f 	bl	80073f8 <vPortExitCritical>

	return xReturn;
 8006afa:	69fb      	ldr	r3, [r7, #28]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20005110 	.word	0x20005110
 8006b08:	20005124 	.word	0x20005124

08006b0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b10:	4b03      	ldr	r3, [pc, #12]	@ (8006b20 <vTaskMissedYield+0x14>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
}
 8006b16:	bf00      	nop
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20005120 	.word	0x20005120

08006b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b2c:	f000 f852 	bl	8006bd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b30:	4b06      	ldr	r3, [pc, #24]	@ (8006b4c <prvIdleTask+0x28>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d9f9      	bls.n	8006b2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b38:	4b05      	ldr	r3, [pc, #20]	@ (8006b50 <prvIdleTask+0x2c>)
 8006b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b48:	e7f0      	b.n	8006b2c <prvIdleTask+0x8>
 8006b4a:	bf00      	nop
 8006b4c:	20005010 	.word	0x20005010
 8006b50:	e000ed04 	.word	0xe000ed04

08006b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	607b      	str	r3, [r7, #4]
 8006b5e:	e00c      	b.n	8006b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4a12      	ldr	r2, [pc, #72]	@ (8006bb4 <prvInitialiseTaskLists+0x60>)
 8006b6c:	4413      	add	r3, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe f8ff 	bl	8004d72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3301      	adds	r3, #1
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b06      	cmp	r3, #6
 8006b7e:	d9ef      	bls.n	8006b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b80:	480d      	ldr	r0, [pc, #52]	@ (8006bb8 <prvInitialiseTaskLists+0x64>)
 8006b82:	f7fe f8f6 	bl	8004d72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b86:	480d      	ldr	r0, [pc, #52]	@ (8006bbc <prvInitialiseTaskLists+0x68>)
 8006b88:	f7fe f8f3 	bl	8004d72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b8c:	480c      	ldr	r0, [pc, #48]	@ (8006bc0 <prvInitialiseTaskLists+0x6c>)
 8006b8e:	f7fe f8f0 	bl	8004d72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b92:	480c      	ldr	r0, [pc, #48]	@ (8006bc4 <prvInitialiseTaskLists+0x70>)
 8006b94:	f7fe f8ed 	bl	8004d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b98:	480b      	ldr	r0, [pc, #44]	@ (8006bc8 <prvInitialiseTaskLists+0x74>)
 8006b9a:	f7fe f8ea 	bl	8004d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bcc <prvInitialiseTaskLists+0x78>)
 8006ba0:	4a05      	ldr	r2, [pc, #20]	@ (8006bb8 <prvInitialiseTaskLists+0x64>)
 8006ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <prvInitialiseTaskLists+0x7c>)
 8006ba6:	4a05      	ldr	r2, [pc, #20]	@ (8006bbc <prvInitialiseTaskLists+0x68>)
 8006ba8:	601a      	str	r2, [r3, #0]
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20005010 	.word	0x20005010
 8006bb8:	2000509c 	.word	0x2000509c
 8006bbc:	200050b0 	.word	0x200050b0
 8006bc0:	200050cc 	.word	0x200050cc
 8006bc4:	200050e0 	.word	0x200050e0
 8006bc8:	200050f8 	.word	0x200050f8
 8006bcc:	200050c4 	.word	0x200050c4
 8006bd0:	200050c8 	.word	0x200050c8

08006bd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bda:	e019      	b.n	8006c10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bdc:	f000 fbd6 	bl	800738c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be0:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <prvCheckTasksWaitingTermination+0x50>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fe f94a 	bl	8004e86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <prvCheckTasksWaitingTermination+0x54>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8006c28 <prvCheckTasksWaitingTermination+0x54>)
 8006bfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <prvCheckTasksWaitingTermination+0x58>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	4a0a      	ldr	r2, [pc, #40]	@ (8006c2c <prvCheckTasksWaitingTermination+0x58>)
 8006c04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c06:	f000 fbf7 	bl	80073f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f810 	bl	8006c30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c10:	4b06      	ldr	r3, [pc, #24]	@ (8006c2c <prvCheckTasksWaitingTermination+0x58>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e1      	bne.n	8006bdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	200050e0 	.word	0x200050e0
 8006c28:	2000510c 	.word	0x2000510c
 8006c2c:	200050f4 	.word	0x200050f4

08006c30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	334c      	adds	r3, #76	@ 0x4c
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f00e fba1 	bl	8015384 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fd97 	bl	8007784 <vPortFree>
				vPortFree( pxTCB );
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fd94 	bl	8007784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c5c:	e01b      	b.n	8006c96 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d103      	bne.n	8006c70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fd8b 	bl	8007784 <vPortFree>
	}
 8006c6e:	e012      	b.n	8006c96 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d00d      	beq.n	8006c96 <prvDeleteTCB+0x66>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7e:	b672      	cpsid	i
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	b662      	cpsie	i
 8006c8e:	60fb      	str	r3, [r7, #12]
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <prvDeleteTCB+0x62>
	}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <prvResetNextTaskUnblockTime+0x38>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <prvResetNextTaskUnblockTime+0x3c>)
 8006cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cb8:	e008      	b.n	8006ccc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cba:	4b07      	ldr	r3, [pc, #28]	@ (8006cd8 <prvResetNextTaskUnblockTime+0x38>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4a04      	ldr	r2, [pc, #16]	@ (8006cdc <prvResetNextTaskUnblockTime+0x3c>)
 8006cca:	6013      	str	r3, [r2, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	200050c4 	.word	0x200050c4
 8006cdc:	2000512c 	.word	0x2000512c

08006ce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <xTaskGetSchedulerState+0x34>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	e008      	b.n	8006d06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cf4:	4b08      	ldr	r3, [pc, #32]	@ (8006d18 <xTaskGetSchedulerState+0x38>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	607b      	str	r3, [r7, #4]
 8006d00:	e001      	b.n	8006d06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d06:	687b      	ldr	r3, [r7, #4]
	}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	20005118 	.word	0x20005118
 8006d18:	20005134 	.word	0x20005134

08006d1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d069      	beq.n	8006e06 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d36:	4b36      	ldr	r3, [pc, #216]	@ (8006e10 <xTaskPriorityInherit+0xf4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d259      	bcs.n	8006df4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	db06      	blt.n	8006d56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d48:	4b31      	ldr	r3, [pc, #196]	@ (8006e10 <xTaskPriorityInherit+0xf4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	f1c3 0207 	rsb	r2, r3, #7
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6959      	ldr	r1, [r3, #20]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4a2b      	ldr	r2, [pc, #172]	@ (8006e14 <xTaskPriorityInherit+0xf8>)
 8006d68:	4413      	add	r3, r2
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	d13a      	bne.n	8006de4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe f887 	bl	8004e86 <uxListRemove>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d115      	bne.n	8006daa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d82:	4924      	ldr	r1, [pc, #144]	@ (8006e14 <xTaskPriorityInherit+0xf8>)
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <xTaskPriorityInherit+0x8e>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d98:	2201      	movs	r2, #1
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43da      	mvns	r2, r3
 8006da0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e18 <xTaskPriorityInherit+0xfc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4013      	ands	r3, r2
 8006da6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e18 <xTaskPriorityInherit+0xfc>)
 8006da8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006daa:	4b19      	ldr	r3, [pc, #100]	@ (8006e10 <xTaskPriorityInherit+0xf4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	2201      	movs	r2, #1
 8006dba:	409a      	lsls	r2, r3
 8006dbc:	4b16      	ldr	r3, [pc, #88]	@ (8006e18 <xTaskPriorityInherit+0xfc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	4a15      	ldr	r2, [pc, #84]	@ (8006e18 <xTaskPriorityInherit+0xfc>)
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4a10      	ldr	r2, [pc, #64]	@ (8006e14 <xTaskPriorityInherit+0xf8>)
 8006dd4:	441a      	add	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f7fd fff5 	bl	8004dcc <vListInsertEnd>
 8006de2:	e004      	b.n	8006dee <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006de4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <xTaskPriorityInherit+0xf4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	e008      	b.n	8006e06 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006df8:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <xTaskPriorityInherit+0xf4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d201      	bcs.n	8006e06 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e02:	2301      	movs	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e06:	68fb      	ldr	r3, [r7, #12]
	}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	2000500c 	.word	0x2000500c
 8006e14:	20005010 	.word	0x20005010
 8006e18:	20005114 	.word	0x20005114

08006e1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d074      	beq.n	8006f1c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e32:	4b3d      	ldr	r3, [pc, #244]	@ (8006f28 <xTaskPriorityDisinherit+0x10c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d00d      	beq.n	8006e58 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	b672      	cpsid	i
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	b662      	cpsie	i
 8006e50:	60fb      	str	r3, [r7, #12]
}
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	e7fd      	b.n	8006e54 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10d      	bne.n	8006e7c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	b672      	cpsid	i
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	b662      	cpsie	i
 8006e74:	60bb      	str	r3, [r7, #8]
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e80:	1e5a      	subs	r2, r3, #1
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d044      	beq.n	8006f1c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d140      	bne.n	8006f1c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fd fff1 	bl	8004e86 <uxListRemove>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d115      	bne.n	8006ed6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	491f      	ldr	r1, [pc, #124]	@ (8006f2c <xTaskPriorityDisinherit+0x110>)
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xTaskPriorityDisinherit+0xba>
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eca:	43da      	mvns	r2, r3
 8006ecc:	4b18      	ldr	r3, [pc, #96]	@ (8006f30 <xTaskPriorityDisinherit+0x114>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	4a17      	ldr	r2, [pc, #92]	@ (8006f30 <xTaskPriorityDisinherit+0x114>)
 8006ed4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	f1c3 0207 	rsb	r2, r3, #7
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eee:	2201      	movs	r2, #1
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f30 <xTaskPriorityDisinherit+0x114>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8006f30 <xTaskPriorityDisinherit+0x114>)
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4a08      	ldr	r2, [pc, #32]	@ (8006f2c <xTaskPriorityDisinherit+0x110>)
 8006f0a:	441a      	add	r2, r3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7fd ff5a 	bl	8004dcc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f1c:	697b      	ldr	r3, [r7, #20]
	}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	2000500c 	.word	0x2000500c
 8006f2c:	20005010 	.word	0x20005010
 8006f30:	20005114 	.word	0x20005114

08006f34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8089 	beq.w	8007060 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10d      	bne.n	8006f72 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	b672      	cpsid	i
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	b662      	cpsie	i
 8006f6a:	60fb      	str	r3, [r7, #12]
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	e7fd      	b.n	8006f6e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d902      	bls.n	8006f82 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	e002      	b.n	8006f88 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d066      	beq.n	8007060 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d161      	bne.n	8007060 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f9c:	4b32      	ldr	r3, [pc, #200]	@ (8007068 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d10d      	bne.n	8006fc2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	b672      	cpsid	i
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	b662      	cpsie	i
 8006fba:	60bb      	str	r3, [r7, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	e7fd      	b.n	8006fbe <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	db04      	blt.n	8006fe0 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f1c3 0207 	rsb	r2, r3, #7
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	6959      	ldr	r1, [r3, #20]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4a1f      	ldr	r2, [pc, #124]	@ (800706c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ff0:	4413      	add	r3, r2
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	d134      	bne.n	8007060 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fd ff43 	bl	8004e86 <uxListRemove>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d115      	bne.n	8007032 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700a:	4918      	ldr	r1, [pc, #96]	@ (800706c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007020:	2201      	movs	r2, #1
 8007022:	fa02 f303 	lsl.w	r3, r2, r3
 8007026:	43da      	mvns	r2, r3
 8007028:	4b11      	ldr	r3, [pc, #68]	@ (8007070 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4013      	ands	r3, r2
 800702e:	4a10      	ldr	r2, [pc, #64]	@ (8007070 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007030:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	2201      	movs	r2, #1
 8007038:	409a      	lsls	r2, r3
 800703a:	4b0d      	ldr	r3, [pc, #52]	@ (8007070 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4313      	orrs	r3, r2
 8007040:	4a0b      	ldr	r2, [pc, #44]	@ (8007070 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4a06      	ldr	r2, [pc, #24]	@ (800706c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007052:	441a      	add	r2, r3
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	3304      	adds	r3, #4
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f7fd feb6 	bl	8004dcc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007060:	bf00      	nop
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	2000500c 	.word	0x2000500c
 800706c:	20005010 	.word	0x20005010
 8007070:	20005114 	.word	0x20005114

08007074 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007078:	4b07      	ldr	r3, [pc, #28]	@ (8007098 <pvTaskIncrementMutexHeldCount+0x24>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007080:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <pvTaskIncrementMutexHeldCount+0x24>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007086:	3201      	adds	r2, #1
 8007088:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800708a:	4b03      	ldr	r3, [pc, #12]	@ (8007098 <pvTaskIncrementMutexHeldCount+0x24>)
 800708c:	681b      	ldr	r3, [r3, #0]
	}
 800708e:	4618      	mov	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	2000500c 	.word	0x2000500c

0800709c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070a6:	4b29      	ldr	r3, [pc, #164]	@ (800714c <prvAddCurrentTaskToDelayedList+0xb0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070ac:	4b28      	ldr	r3, [pc, #160]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fd fee7 	bl	8004e86 <uxListRemove>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10b      	bne.n	80070d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070be:	4b24      	ldr	r3, [pc, #144]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c4:	2201      	movs	r2, #1
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	43da      	mvns	r2, r3
 80070cc:	4b21      	ldr	r3, [pc, #132]	@ (8007154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4013      	ands	r3, r2
 80070d2:	4a20      	ldr	r2, [pc, #128]	@ (8007154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070dc:	d10a      	bne.n	80070f4 <prvAddCurrentTaskToDelayedList+0x58>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4619      	mov	r1, r3
 80070ec:	481a      	ldr	r0, [pc, #104]	@ (8007158 <prvAddCurrentTaskToDelayedList+0xbc>)
 80070ee:	f7fd fe6d 	bl	8004dcc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070f2:	e026      	b.n	8007142 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4413      	add	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070fc:	4b14      	ldr	r3, [pc, #80]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	429a      	cmp	r2, r3
 800710a:	d209      	bcs.n	8007120 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800710c:	4b13      	ldr	r3, [pc, #76]	@ (800715c <prvAddCurrentTaskToDelayedList+0xc0>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	4b0f      	ldr	r3, [pc, #60]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3304      	adds	r3, #4
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f7fd fe7b 	bl	8004e14 <vListInsert>
}
 800711e:	e010      	b.n	8007142 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007120:	4b0f      	ldr	r3, [pc, #60]	@ (8007160 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3304      	adds	r3, #4
 800712a:	4619      	mov	r1, r3
 800712c:	4610      	mov	r0, r2
 800712e:	f7fd fe71 	bl	8004e14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007132:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	429a      	cmp	r2, r3
 800713a:	d202      	bcs.n	8007142 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800713c:	4a09      	ldr	r2, [pc, #36]	@ (8007164 <prvAddCurrentTaskToDelayedList+0xc8>)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6013      	str	r3, [r2, #0]
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20005110 	.word	0x20005110
 8007150:	2000500c 	.word	0x2000500c
 8007154:	20005114 	.word	0x20005114
 8007158:	200050f8 	.word	0x200050f8
 800715c:	200050c8 	.word	0x200050c8
 8007160:	200050c4 	.word	0x200050c4
 8007164:	2000512c 	.word	0x2000512c

08007168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3b04      	subs	r3, #4
 8007178:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b04      	subs	r3, #4
 8007186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 0201 	bic.w	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b04      	subs	r3, #4
 8007196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007198:	4a0c      	ldr	r2, [pc, #48]	@ (80071cc <pxPortInitialiseStack+0x64>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3b14      	subs	r3, #20
 80071a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3b04      	subs	r3, #4
 80071ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f06f 0202 	mvn.w	r2, #2
 80071b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3b20      	subs	r3, #32
 80071bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071be:	68fb      	ldr	r3, [r7, #12]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	080071d1 	.word	0x080071d1

080071d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071da:	4b15      	ldr	r3, [pc, #84]	@ (8007230 <prvTaskExitError+0x60>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e2:	d00d      	beq.n	8007200 <prvTaskExitError+0x30>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e8:	b672      	cpsid	i
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	b662      	cpsie	i
 80071f8:	60fb      	str	r3, [r7, #12]
}
 80071fa:	bf00      	nop
 80071fc:	bf00      	nop
 80071fe:	e7fd      	b.n	80071fc <prvTaskExitError+0x2c>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	b672      	cpsid	i
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	b662      	cpsie	i
 8007214:	60bb      	str	r3, [r7, #8]
}
 8007216:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007218:	bf00      	nop
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0fc      	beq.n	800721a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000020 	.word	0x20000020
	...

08007240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007240:	4b07      	ldr	r3, [pc, #28]	@ (8007260 <pxCurrentTCBConst2>)
 8007242:	6819      	ldr	r1, [r3, #0]
 8007244:	6808      	ldr	r0, [r1, #0]
 8007246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724a:	f380 8809 	msr	PSP, r0
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f380 8811 	msr	BASEPRI, r0
 800725a:	4770      	bx	lr
 800725c:	f3af 8000 	nop.w

08007260 <pxCurrentTCBConst2>:
 8007260:	2000500c 	.word	0x2000500c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007268:	4808      	ldr	r0, [pc, #32]	@ (800728c <prvPortStartFirstTask+0x24>)
 800726a:	6800      	ldr	r0, [r0, #0]
 800726c:	6800      	ldr	r0, [r0, #0]
 800726e:	f380 8808 	msr	MSP, r0
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f380 8814 	msr	CONTROL, r0
 800727a:	b662      	cpsie	i
 800727c:	b661      	cpsie	f
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	df00      	svc	0
 8007288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800728a:	bf00      	nop
 800728c:	e000ed08 	.word	0xe000ed08

08007290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007296:	4b37      	ldr	r3, [pc, #220]	@ (8007374 <xPortStartScheduler+0xe4>)
 8007298:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	22ff      	movs	r2, #255	@ 0xff
 80072a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007378 <xPortStartScheduler+0xe8>)
 80072bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072be:	4b2f      	ldr	r3, [pc, #188]	@ (800737c <xPortStartScheduler+0xec>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072c4:	e009      	b.n	80072da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80072c6:	4b2d      	ldr	r3, [pc, #180]	@ (800737c <xPortStartScheduler+0xec>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	4a2b      	ldr	r2, [pc, #172]	@ (800737c <xPortStartScheduler+0xec>)
 80072ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e2:	2b80      	cmp	r3, #128	@ 0x80
 80072e4:	d0ef      	beq.n	80072c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072e6:	4b25      	ldr	r3, [pc, #148]	@ (800737c <xPortStartScheduler+0xec>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1c3 0307 	rsb	r3, r3, #7
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d00d      	beq.n	800730e <xPortStartScheduler+0x7e>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	b672      	cpsid	i
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	b662      	cpsie	i
 8007306:	60bb      	str	r3, [r7, #8]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800730e:	4b1b      	ldr	r3, [pc, #108]	@ (800737c <xPortStartScheduler+0xec>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	4a19      	ldr	r2, [pc, #100]	@ (800737c <xPortStartScheduler+0xec>)
 8007316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007318:	4b18      	ldr	r3, [pc, #96]	@ (800737c <xPortStartScheduler+0xec>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007320:	4a16      	ldr	r2, [pc, #88]	@ (800737c <xPortStartScheduler+0xec>)
 8007322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800732c:	4b14      	ldr	r3, [pc, #80]	@ (8007380 <xPortStartScheduler+0xf0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a13      	ldr	r2, [pc, #76]	@ (8007380 <xPortStartScheduler+0xf0>)
 8007332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007338:	4b11      	ldr	r3, [pc, #68]	@ (8007380 <xPortStartScheduler+0xf0>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a10      	ldr	r2, [pc, #64]	@ (8007380 <xPortStartScheduler+0xf0>)
 800733e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007344:	f000 f8dc 	bl	8007500 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007348:	4b0e      	ldr	r3, [pc, #56]	@ (8007384 <xPortStartScheduler+0xf4>)
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800734e:	f000 f8fb 	bl	8007548 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007352:	4b0d      	ldr	r3, [pc, #52]	@ (8007388 <xPortStartScheduler+0xf8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a0c      	ldr	r2, [pc, #48]	@ (8007388 <xPortStartScheduler+0xf8>)
 8007358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800735c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800735e:	f7ff ff83 	bl	8007268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007362:	f7ff fa61 	bl	8006828 <vTaskSwitchContext>
	prvTaskExitError();
 8007366:	f7ff ff33 	bl	80071d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	e000e400 	.word	0xe000e400
 8007378:	20005138 	.word	0x20005138
 800737c:	2000513c 	.word	0x2000513c
 8007380:	e000ed20 	.word	0xe000ed20
 8007384:	20000020 	.word	0x20000020
 8007388:	e000ef34 	.word	0xe000ef34

0800738c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	b672      	cpsid	i
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	b662      	cpsie	i
 80073a6:	607b      	str	r3, [r7, #4]
}
 80073a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073aa:	4b11      	ldr	r3, [pc, #68]	@ (80073f0 <vPortEnterCritical+0x64>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a0f      	ldr	r2, [pc, #60]	@ (80073f0 <vPortEnterCritical+0x64>)
 80073b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073b4:	4b0e      	ldr	r3, [pc, #56]	@ (80073f0 <vPortEnterCritical+0x64>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d112      	bne.n	80073e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <vPortEnterCritical+0x68>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00d      	beq.n	80073e2 <vPortEnterCritical+0x56>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	b672      	cpsid	i
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	b662      	cpsie	i
 80073da:	603b      	str	r3, [r7, #0]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <vPortEnterCritical+0x52>
	}
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	20000020 	.word	0x20000020
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073fe:	4b13      	ldr	r3, [pc, #76]	@ (800744c <vPortExitCritical+0x54>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <vPortExitCritical+0x2a>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	b672      	cpsid	i
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	b662      	cpsie	i
 800741a:	607b      	str	r3, [r7, #4]
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	e7fd      	b.n	800741e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007422:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <vPortExitCritical+0x54>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3b01      	subs	r3, #1
 8007428:	4a08      	ldr	r2, [pc, #32]	@ (800744c <vPortExitCritical+0x54>)
 800742a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800742c:	4b07      	ldr	r3, [pc, #28]	@ (800744c <vPortExitCritical+0x54>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d105      	bne.n	8007440 <vPortExitCritical+0x48>
 8007434:	2300      	movs	r3, #0
 8007436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f383 8811 	msr	BASEPRI, r3
}
 800743e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000020 	.word	0x20000020

08007450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007450:	f3ef 8009 	mrs	r0, PSP
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <pxCurrentTCBConst>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f01e 0f10 	tst.w	lr, #16
 8007460:	bf08      	it	eq
 8007462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007474:	b672      	cpsid	i
 8007476:	f380 8811 	msr	BASEPRI, r0
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	b662      	cpsie	i
 8007484:	f7ff f9d0 	bl	8006828 <vTaskSwitchContext>
 8007488:	f04f 0000 	mov.w	r0, #0
 800748c:	f380 8811 	msr	BASEPRI, r0
 8007490:	bc09      	pop	{r0, r3}
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	6808      	ldr	r0, [r1, #0]
 8007496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	f01e 0f10 	tst.w	lr, #16
 800749e:	bf08      	it	eq
 80074a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074a4:	f380 8809 	msr	PSP, r0
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop

080074b0 <pxCurrentTCBConst>:
 80074b0:	2000500c 	.word	0x2000500c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	b672      	cpsid	i
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	b662      	cpsie	i
 80074d2:	607b      	str	r3, [r7, #4]
}
 80074d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074d6:	f7ff f8eb 	bl	80066b0 <xTaskIncrementTick>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074e0:	4b06      	ldr	r3, [pc, #24]	@ (80074fc <SysTick_Handler+0x44>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	2300      	movs	r3, #0
 80074ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f383 8811 	msr	BASEPRI, r3
}
 80074f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007504:	4b0b      	ldr	r3, [pc, #44]	@ (8007534 <vPortSetupTimerInterrupt+0x34>)
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800750a:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <vPortSetupTimerInterrupt+0x38>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007510:	4b0a      	ldr	r3, [pc, #40]	@ (800753c <vPortSetupTimerInterrupt+0x3c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a0a      	ldr	r2, [pc, #40]	@ (8007540 <vPortSetupTimerInterrupt+0x40>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	099b      	lsrs	r3, r3, #6
 800751c:	4a09      	ldr	r2, [pc, #36]	@ (8007544 <vPortSetupTimerInterrupt+0x44>)
 800751e:	3b01      	subs	r3, #1
 8007520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007522:	4b04      	ldr	r3, [pc, #16]	@ (8007534 <vPortSetupTimerInterrupt+0x34>)
 8007524:	2207      	movs	r2, #7
 8007526:	601a      	str	r2, [r3, #0]
}
 8007528:	bf00      	nop
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	e000e010 	.word	0xe000e010
 8007538:	e000e018 	.word	0xe000e018
 800753c:	20000000 	.word	0x20000000
 8007540:	10624dd3 	.word	0x10624dd3
 8007544:	e000e014 	.word	0xe000e014

08007548 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007548:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007558 <vPortEnableVFP+0x10>
 800754c:	6801      	ldr	r1, [r0, #0]
 800754e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007552:	6001      	str	r1, [r0, #0]
 8007554:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007556:	bf00      	nop
 8007558:	e000ed88 	.word	0xe000ed88

0800755c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007562:	f3ef 8305 	mrs	r3, IPSR
 8007566:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b0f      	cmp	r3, #15
 800756c:	d917      	bls.n	800759e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800756e:	4a1a      	ldr	r2, [pc, #104]	@ (80075d8 <vPortValidateInterruptPriority+0x7c>)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007578:	4b18      	ldr	r3, [pc, #96]	@ (80075dc <vPortValidateInterruptPriority+0x80>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	7afa      	ldrb	r2, [r7, #11]
 800757e:	429a      	cmp	r2, r3
 8007580:	d20d      	bcs.n	800759e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007586:	b672      	cpsid	i
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	b662      	cpsie	i
 8007596:	607b      	str	r3, [r7, #4]
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	e7fd      	b.n	800759a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800759e:	4b10      	ldr	r3, [pc, #64]	@ (80075e0 <vPortValidateInterruptPriority+0x84>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80075a6:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <vPortValidateInterruptPriority+0x88>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d90d      	bls.n	80075ca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	b672      	cpsid	i
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	b662      	cpsie	i
 80075c2:	603b      	str	r3, [r7, #0]
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <vPortValidateInterruptPriority+0x6a>
	}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	e000e3f0 	.word	0xe000e3f0
 80075dc:	20005138 	.word	0x20005138
 80075e0:	e000ed0c 	.word	0xe000ed0c
 80075e4:	2000513c 	.word	0x2000513c

080075e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	@ 0x28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075f4:	f7fe ff8c 	bl	8006510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075f8:	4b5d      	ldr	r3, [pc, #372]	@ (8007770 <pvPortMalloc+0x188>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007600:	f000 f920 	bl	8007844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007604:	4b5b      	ldr	r3, [pc, #364]	@ (8007774 <pvPortMalloc+0x18c>)
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 8094 	bne.w	800773a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d020      	beq.n	800765a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007618:	2208      	movs	r2, #8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	2b00      	cmp	r3, #0
 8007628:	d017      	beq.n	800765a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f023 0307 	bic.w	r3, r3, #7
 8007630:	3308      	adds	r3, #8
 8007632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00d      	beq.n	800765a <pvPortMalloc+0x72>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007642:	b672      	cpsid	i
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	b662      	cpsie	i
 8007652:	617b      	str	r3, [r7, #20]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d06c      	beq.n	800773a <pvPortMalloc+0x152>
 8007660:	4b45      	ldr	r3, [pc, #276]	@ (8007778 <pvPortMalloc+0x190>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d867      	bhi.n	800773a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800766a:	4b44      	ldr	r3, [pc, #272]	@ (800777c <pvPortMalloc+0x194>)
 800766c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800766e:	4b43      	ldr	r3, [pc, #268]	@ (800777c <pvPortMalloc+0x194>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007674:	e004      	b.n	8007680 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d903      	bls.n	8007692 <pvPortMalloc+0xaa>
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1f1      	bne.n	8007676 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007692:	4b37      	ldr	r3, [pc, #220]	@ (8007770 <pvPortMalloc+0x188>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007698:	429a      	cmp	r2, r3
 800769a:	d04e      	beq.n	800773a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2208      	movs	r2, #8
 80076a2:	4413      	add	r3, r2
 80076a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	2308      	movs	r3, #8
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d922      	bls.n	8007704 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00d      	beq.n	80076ec <pvPortMalloc+0x104>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	b672      	cpsid	i
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	b662      	cpsie	i
 80076e4:	613b      	str	r3, [r7, #16]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076fe:	69b8      	ldr	r0, [r7, #24]
 8007700:	f000 f902 	bl	8007908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007704:	4b1c      	ldr	r3, [pc, #112]	@ (8007778 <pvPortMalloc+0x190>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	4a1a      	ldr	r2, [pc, #104]	@ (8007778 <pvPortMalloc+0x190>)
 8007710:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007712:	4b19      	ldr	r3, [pc, #100]	@ (8007778 <pvPortMalloc+0x190>)
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	4b1a      	ldr	r3, [pc, #104]	@ (8007780 <pvPortMalloc+0x198>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d203      	bcs.n	8007726 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800771e:	4b16      	ldr	r3, [pc, #88]	@ (8007778 <pvPortMalloc+0x190>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a17      	ldr	r2, [pc, #92]	@ (8007780 <pvPortMalloc+0x198>)
 8007724:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	4b12      	ldr	r3, [pc, #72]	@ (8007774 <pvPortMalloc+0x18c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	431a      	orrs	r2, r3
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800773a:	f7fe fef7 	bl	800652c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00d      	beq.n	8007764 <pvPortMalloc+0x17c>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	b672      	cpsid	i
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	b662      	cpsie	i
 800775c:	60fb      	str	r3, [r7, #12]
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	e7fd      	b.n	8007760 <pvPortMalloc+0x178>
	return pvReturn;
 8007764:	69fb      	ldr	r3, [r7, #28]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3728      	adds	r7, #40	@ 0x28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20008d48 	.word	0x20008d48
 8007774:	20008d54 	.word	0x20008d54
 8007778:	20008d4c 	.word	0x20008d4c
 800777c:	20008d40 	.word	0x20008d40
 8007780:	20008d50 	.word	0x20008d50

08007784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d04e      	beq.n	8007834 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007796:	2308      	movs	r3, #8
 8007798:	425b      	negs	r3, r3
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4413      	add	r3, r2
 800779e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	4b24      	ldr	r3, [pc, #144]	@ (800783c <vPortFree+0xb8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10d      	bne.n	80077ce <vPortFree+0x4a>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	b672      	cpsid	i
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	b662      	cpsie	i
 80077c6:	60fb      	str	r3, [r7, #12]
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	e7fd      	b.n	80077ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <vPortFree+0x6e>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	b672      	cpsid	i
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	b662      	cpsie	i
 80077ea:	60bb      	str	r3, [r7, #8]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	4b11      	ldr	r3, [pc, #68]	@ (800783c <vPortFree+0xb8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d019      	beq.n	8007834 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d115      	bne.n	8007834 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <vPortFree+0xb8>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	43db      	mvns	r3, r3
 8007812:	401a      	ands	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007818:	f7fe fe7a 	bl	8006510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	4b07      	ldr	r3, [pc, #28]	@ (8007840 <vPortFree+0xbc>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4413      	add	r3, r2
 8007826:	4a06      	ldr	r2, [pc, #24]	@ (8007840 <vPortFree+0xbc>)
 8007828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800782a:	6938      	ldr	r0, [r7, #16]
 800782c:	f000 f86c 	bl	8007908 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007830:	f7fe fe7c 	bl	800652c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007834:	bf00      	nop
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20008d54 	.word	0x20008d54
 8007840:	20008d4c 	.word	0x20008d4c

08007844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800784a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800784e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007850:	4b27      	ldr	r3, [pc, #156]	@ (80078f0 <prvHeapInit+0xac>)
 8007852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00c      	beq.n	8007878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3307      	adds	r3, #7
 8007862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0307 	bic.w	r3, r3, #7
 800786a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	4a1f      	ldr	r2, [pc, #124]	@ (80078f0 <prvHeapInit+0xac>)
 8007874:	4413      	add	r3, r2
 8007876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800787c:	4a1d      	ldr	r2, [pc, #116]	@ (80078f4 <prvHeapInit+0xb0>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007882:	4b1c      	ldr	r3, [pc, #112]	@ (80078f4 <prvHeapInit+0xb0>)
 8007884:	2200      	movs	r2, #0
 8007886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007890:	2208      	movs	r2, #8
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1a9b      	subs	r3, r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0307 	bic.w	r3, r3, #7
 800789e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a15      	ldr	r2, [pc, #84]	@ (80078f8 <prvHeapInit+0xb4>)
 80078a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078a6:	4b14      	ldr	r3, [pc, #80]	@ (80078f8 <prvHeapInit+0xb4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2200      	movs	r2, #0
 80078ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ae:	4b12      	ldr	r3, [pc, #72]	@ (80078f8 <prvHeapInit+0xb4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	1ad2      	subs	r2, r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078c4:	4b0c      	ldr	r3, [pc, #48]	@ (80078f8 <prvHeapInit+0xb4>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	4a0a      	ldr	r2, [pc, #40]	@ (80078fc <prvHeapInit+0xb8>)
 80078d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4a09      	ldr	r2, [pc, #36]	@ (8007900 <prvHeapInit+0xbc>)
 80078da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078dc:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <prvHeapInit+0xc0>)
 80078de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	20005140 	.word	0x20005140
 80078f4:	20008d40 	.word	0x20008d40
 80078f8:	20008d48 	.word	0x20008d48
 80078fc:	20008d50 	.word	0x20008d50
 8007900:	20008d4c 	.word	0x20008d4c
 8007904:	20008d54 	.word	0x20008d54

08007908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007910:	4b28      	ldr	r3, [pc, #160]	@ (80079b4 <prvInsertBlockIntoFreeList+0xac>)
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e002      	b.n	800791c <prvInsertBlockIntoFreeList+0x14>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d8f7      	bhi.n	8007916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	4413      	add	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d108      	bne.n	800794a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	441a      	add	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	441a      	add	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d118      	bne.n	8007990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4b15      	ldr	r3, [pc, #84]	@ (80079b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d00d      	beq.n	8007986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	441a      	add	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e008      	b.n	8007998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007986:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e003      	b.n	8007998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d002      	beq.n	80079a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20008d40 	.word	0x20008d40
 80079b8:	20008d48 	.word	0x20008d48

080079bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	461a      	mov	r2, r3
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f002 fa73 	bl	8009ebc <tcpip_send_msg_wait_sem>
 80079d6:	4603      	mov	r3, r0
 80079d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80079da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <netconn_apimsg+0x2e>
    return apimsg->err;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80079e8:	e001      	b.n	80079ee <netconn_apimsg+0x32>
  }
  return err;
 80079ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08c      	sub	sp, #48	@ 0x30
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	603a      	str	r2, [r7, #0]
 8007a02:	71fb      	strb	r3, [r7, #7]
 8007a04:	460b      	mov	r3, r1
 8007a06:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 f923 	bl	8008c58 <netconn_alloc>
 8007a12:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8007a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d054      	beq.n	8007ac4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007a1a:	79bb      	ldrb	r3, [r7, #6]
 8007a1c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a20:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007a22:	f107 0308 	add.w	r3, r7, #8
 8007a26:	4619      	mov	r1, r3
 8007a28:	4829      	ldr	r0, [pc, #164]	@ (8007ad0 <netconn_new_with_proto_and_callback+0xd8>)
 8007a2a:	f7ff ffc7 	bl	80079bc <netconn_apimsg>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8007a34:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d043      	beq.n	8007ac4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <netconn_new_with_proto_and_callback+0x58>
 8007a44:	4b23      	ldr	r3, [pc, #140]	@ (8007ad4 <netconn_new_with_proto_and_callback+0xdc>)
 8007a46:	22a3      	movs	r2, #163	@ 0xa3
 8007a48:	4923      	ldr	r1, [pc, #140]	@ (8007ad8 <netconn_new_with_proto_and_callback+0xe0>)
 8007a4a:	4824      	ldr	r0, [pc, #144]	@ (8007adc <netconn_new_with_proto_and_callback+0xe4>)
 8007a4c:	f00d fc0a 	bl	8015264 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a52:	3310      	adds	r3, #16
 8007a54:	4618      	mov	r0, r3
 8007a56:	f00d f9cc 	bl	8014df2 <sys_mbox_valid>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <netconn_new_with_proto_and_callback+0x74>
 8007a60:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad4 <netconn_new_with_proto_and_callback+0xdc>)
 8007a62:	22a4      	movs	r2, #164	@ 0xa4
 8007a64:	491e      	ldr	r1, [pc, #120]	@ (8007ae0 <netconn_new_with_proto_and_callback+0xe8>)
 8007a66:	481d      	ldr	r0, [pc, #116]	@ (8007adc <netconn_new_with_proto_and_callback+0xe4>)
 8007a68:	f00d fbfc 	bl	8015264 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	3314      	adds	r3, #20
 8007a70:	4618      	mov	r0, r3
 8007a72:	f00d f9be 	bl	8014df2 <sys_mbox_valid>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <netconn_new_with_proto_and_callback+0x90>
 8007a7c:	4b15      	ldr	r3, [pc, #84]	@ (8007ad4 <netconn_new_with_proto_and_callback+0xdc>)
 8007a7e:	22a6      	movs	r2, #166	@ 0xa6
 8007a80:	4918      	ldr	r1, [pc, #96]	@ (8007ae4 <netconn_new_with_proto_and_callback+0xec>)
 8007a82:	4816      	ldr	r0, [pc, #88]	@ (8007adc <netconn_new_with_proto_and_callback+0xe4>)
 8007a84:	f00d fbee 	bl	8015264 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	330c      	adds	r3, #12
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f00d fa41 	bl	8014f14 <sys_sem_valid>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d105      	bne.n	8007aa4 <netconn_new_with_proto_and_callback+0xac>
 8007a98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad4 <netconn_new_with_proto_and_callback+0xdc>)
 8007a9a:	22a9      	movs	r2, #169	@ 0xa9
 8007a9c:	4912      	ldr	r1, [pc, #72]	@ (8007ae8 <netconn_new_with_proto_and_callback+0xf0>)
 8007a9e:	480f      	ldr	r0, [pc, #60]	@ (8007adc <netconn_new_with_proto_and_callback+0xe4>)
 8007aa0:	f00d fbe0 	bl	8015264 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f00d fa26 	bl	8014efa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab0:	3310      	adds	r3, #16
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f00d f916 	bl	8014ce4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007aba:	2007      	movs	r0, #7
 8007abc:	f002 fff0 	bl	800aaa0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e000      	b.n	8007ac6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3730      	adds	r7, #48	@ 0x30
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	08008c2d 	.word	0x08008c2d
 8007ad4:	08016304 	.word	0x08016304
 8007ad8:	08016338 	.word	0x08016338
 8007adc:	0801635c 	.word	0x0801635c
 8007ae0:	08016384 	.word	0x08016384
 8007ae4:	0801639c 	.word	0x0801639c
 8007ae8:	080163c0 	.word	0x080163c0

08007aec <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08c      	sub	sp, #48	@ 0x30
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	e014      	b.n	8007b28 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007b02:	2329      	movs	r3, #41	@ 0x29
 8007b04:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007b06:	f107 030c 	add.w	r3, r7, #12
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4808      	ldr	r0, [pc, #32]	@ (8007b30 <netconn_prepare_delete+0x44>)
 8007b0e:	f7ff ff55 	bl	80079bc <netconn_apimsg>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007b18:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <netconn_prepare_delete+0x3a>
    return err;
 8007b20:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007b24:	e000      	b.n	8007b28 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3730      	adds	r7, #48	@ 0x30
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	08009199 	.word	0x08009199

08007b34 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <netconn_delete+0x12>
    return ERR_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e00d      	b.n	8007b62 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff ffd0 	bl	8007aec <netconn_prepare_delete>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <netconn_delete+0x2a>
    netconn_free(conn);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 f8eb 	bl	8008d34 <netconn_free>
  }
  return err;
 8007b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08e      	sub	sp, #56	@ 0x38
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <netconn_bind+0x28>
 8007b80:	4b11      	ldr	r3, [pc, #68]	@ (8007bc8 <netconn_bind+0x5c>)
 8007b82:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8007b86:	4911      	ldr	r1, [pc, #68]	@ (8007bcc <netconn_bind+0x60>)
 8007b88:	4811      	ldr	r0, [pc, #68]	@ (8007bd0 <netconn_bind+0x64>)
 8007b8a:	f00d fb6b 	bl	8015264 <iprintf>
 8007b8e:	f06f 030f 	mvn.w	r3, #15
 8007b92:	e015      	b.n	8007bc0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd4 <netconn_bind+0x68>)
 8007b9c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007baa:	f107 0314 	add.w	r3, r7, #20
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4809      	ldr	r0, [pc, #36]	@ (8007bd8 <netconn_bind+0x6c>)
 8007bb2:	f7ff ff03 	bl	80079bc <netconn_apimsg>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007bbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3738      	adds	r7, #56	@ 0x38
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	08016304 	.word	0x08016304
 8007bcc:	0801643c 	.word	0x0801643c
 8007bd0:	0801635c 	.word	0x0801635c
 8007bd4:	08022bcc 	.word	0x08022bcc
 8007bd8:	08009361 	.word	0x08009361

08007bdc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08c      	sub	sp, #48	@ 0x30
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <netconn_listen_with_backlog+0x26>
 8007bee:	4b0d      	ldr	r3, [pc, #52]	@ (8007c24 <netconn_listen_with_backlog+0x48>)
 8007bf0:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8007bf4:	490c      	ldr	r1, [pc, #48]	@ (8007c28 <netconn_listen_with_backlog+0x4c>)
 8007bf6:	480d      	ldr	r0, [pc, #52]	@ (8007c2c <netconn_listen_with_backlog+0x50>)
 8007bf8:	f00d fb34 	bl	8015264 <iprintf>
 8007bfc:	f06f 030f 	mvn.w	r3, #15
 8007c00:	e00c      	b.n	8007c1c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007c06:	f107 030c 	add.w	r3, r7, #12
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4808      	ldr	r0, [pc, #32]	@ (8007c30 <netconn_listen_with_backlog+0x54>)
 8007c0e:	f7ff fed5 	bl	80079bc <netconn_apimsg>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007c18:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3730      	adds	r7, #48	@ 0x30
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	08016304 	.word	0x08016304
 8007c28:	080164bc 	.word	0x080164bc
 8007c2c:	0801635c 	.word	0x0801635c
 8007c30:	080093d5 	.word	0x080093d5

08007c34 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d109      	bne.n	8007c58 <netconn_accept+0x24>
 8007c44:	4b3d      	ldr	r3, [pc, #244]	@ (8007d3c <netconn_accept+0x108>)
 8007c46:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8007c4a:	493d      	ldr	r1, [pc, #244]	@ (8007d40 <netconn_accept+0x10c>)
 8007c4c:	483d      	ldr	r0, [pc, #244]	@ (8007d44 <netconn_accept+0x110>)
 8007c4e:	f00d fb09 	bl	8015264 <iprintf>
 8007c52:	f06f 030f 	mvn.w	r3, #15
 8007c56:	e06c      	b.n	8007d32 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d109      	bne.n	8007c78 <netconn_accept+0x44>
 8007c64:	4b35      	ldr	r3, [pc, #212]	@ (8007d3c <netconn_accept+0x108>)
 8007c66:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8007c6a:	4937      	ldr	r1, [pc, #220]	@ (8007d48 <netconn_accept+0x114>)
 8007c6c:	4835      	ldr	r0, [pc, #212]	@ (8007d44 <netconn_accept+0x110>)
 8007c6e:	f00d faf9 	bl	8015264 <iprintf>
 8007c72:	f06f 030f 	mvn.w	r3, #15
 8007c76:	e05c      	b.n	8007d32 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fb6c 	bl	8008356 <netconn_err>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007c82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007c8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c8e:	e050      	b.n	8007d32 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3314      	adds	r3, #20
 8007c94:	4618      	mov	r0, r3
 8007c96:	f00d f8ac 	bl	8014df2 <sys_mbox_valid>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <netconn_accept+0x78>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	7f1b      	ldrb	r3, [r3, #28]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007cac:	f06f 030e 	mvn.w	r3, #14
 8007cb0:	e03f      	b.n	8007d32 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7f1b      	ldrb	r3, [r3, #28]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00e      	beq.n	8007cdc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3314      	adds	r3, #20
 8007cc2:	f107 020c 	add.w	r2, r7, #12
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f00d f876 	bl	8014dba <sys_arch_mbox_tryfetch>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d10a      	bne.n	8007cec <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007cd6:	f06f 0306 	mvn.w	r3, #6
 8007cda:	e02a      	b.n	8007d32 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	f107 010c 	add.w	r1, r7, #12
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f00d f828 	bl	8014d3c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <netconn_accept+0xcc>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f107 0213 	add.w	r2, r7, #19
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fb75 	bl	80083f8 <lwip_netconn_is_err_msg>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007d14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d18:	e00b      	b.n	8007d32 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007d20:	f06f 030e 	mvn.w	r3, #14
 8007d24:	e005      	b.n	8007d32 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007d30:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	08016304 	.word	0x08016304
 8007d40:	080164dc 	.word	0x080164dc
 8007d44:	0801635c 	.word	0x0801635c
 8007d48:	080164fc 	.word	0x080164fc

08007d4c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	4613      	mov	r3, r2
 8007d58:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <netconn_recv_data+0x2c>
 8007d64:	4b58      	ldr	r3, [pc, #352]	@ (8007ec8 <netconn_recv_data+0x17c>)
 8007d66:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8007d6a:	4958      	ldr	r1, [pc, #352]	@ (8007ecc <netconn_recv_data+0x180>)
 8007d6c:	4858      	ldr	r0, [pc, #352]	@ (8007ed0 <netconn_recv_data+0x184>)
 8007d6e:	f00d fa79 	bl	8015264 <iprintf>
 8007d72:	f06f 030f 	mvn.w	r3, #15
 8007d76:	e0a2      	b.n	8007ebe <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <netconn_recv_data+0x4c>
 8007d84:	4b50      	ldr	r3, [pc, #320]	@ (8007ec8 <netconn_recv_data+0x17c>)
 8007d86:	f240 224a 	movw	r2, #586	@ 0x24a
 8007d8a:	4952      	ldr	r1, [pc, #328]	@ (8007ed4 <netconn_recv_data+0x188>)
 8007d8c:	4850      	ldr	r0, [pc, #320]	@ (8007ed0 <netconn_recv_data+0x184>)
 8007d8e:	f00d fa69 	bl	8015264 <iprintf>
 8007d92:	f06f 030f 	mvn.w	r3, #15
 8007d96:	e092      	b.n	8007ebe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3310      	adds	r3, #16
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f00d f828 	bl	8014df2 <sys_mbox_valid>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10e      	bne.n	8007dc6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 fad4 	bl	8008356 <netconn_err>
 8007dae:	4603      	mov	r3, r0
 8007db0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007db2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007dba:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007dbe:	e07e      	b.n	8007ebe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007dc0:	f06f 030a 	mvn.w	r3, #10
 8007dc4:	e07b      	b.n	8007ebe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	7f1b      	ldrb	r3, [r3, #28]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10f      	bne.n	8007df2 <netconn_recv_data+0xa6>
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	7f1b      	ldrb	r3, [r3, #28]
 8007de0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d023      	beq.n	8007e3a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3310      	adds	r3, #16
 8007df6:	f107 0218 	add.w	r2, r7, #24
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f00c ffdc 	bl	8014dba <sys_arch_mbox_tryfetch>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d11f      	bne.n	8007e4a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 faa3 	bl	8008356 <netconn_err>
 8007e10:	4603      	mov	r3, r0
 8007e12:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007e14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007e1c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007e20:	e04d      	b.n	8007ebe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	7f1b      	ldrb	r3, [r3, #28]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007e2e:	f06f 030a 	mvn.w	r3, #10
 8007e32:	e044      	b.n	8007ebe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007e34:	f06f 0306 	mvn.w	r3, #6
 8007e38:	e041      	b.n	8007ebe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3310      	adds	r3, #16
 8007e3e:	f107 0118 	add.w	r1, r7, #24
 8007e42:	2200      	movs	r2, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f00c ff79 	bl	8014d3c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e52:	2b10      	cmp	r3, #16
 8007e54:	d117      	bne.n	8007e86 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f107 0217 	add.w	r2, r7, #23
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 faca 	bl	80083f8 <lwip_netconn_is_err_msg>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e6e:	f113 0f0f 	cmn.w	r3, #15
 8007e72:	d101      	bne.n	8007e78 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e022      	b.n	8007ebe <netconn_recv_data+0x172>
      }
      return err;
 8007e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e7c:	e01f      	b.n	8007ebe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	891b      	ldrh	r3, [r3, #8]
 8007e82:	83fb      	strh	r3, [r7, #30]
 8007e84:	e00d      	b.n	8007ea2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <netconn_recv_data+0x14e>
 8007e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec8 <netconn_recv_data+0x17c>)
 8007e8e:	f240 2291 	movw	r2, #657	@ 0x291
 8007e92:	4911      	ldr	r1, [pc, #68]	@ (8007ed8 <netconn_recv_data+0x18c>)
 8007e94:	480e      	ldr	r0, [pc, #56]	@ (8007ed0 <netconn_recv_data+0x184>)
 8007e96:	f00d f9e5 	bl	8015264 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	891b      	ldrh	r3, [r3, #8]
 8007ea0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <netconn_recv_data+0x16a>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eae:	8bfa      	ldrh	r2, [r7, #30]
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	08016304 	.word	0x08016304
 8007ecc:	0801651c 	.word	0x0801651c
 8007ed0:	0801635c 	.word	0x0801635c
 8007ed4:	0801653c 	.word	0x0801653c
 8007ed8:	08016558 	.word	0x08016558

08007edc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <netconn_tcp_recvd_msg+0x1e>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ef6:	2b10      	cmp	r3, #16
 8007ef8:	d009      	beq.n	8007f0e <netconn_tcp_recvd_msg+0x32>
 8007efa:	4b0c      	ldr	r3, [pc, #48]	@ (8007f2c <netconn_tcp_recvd_msg+0x50>)
 8007efc:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8007f00:	490b      	ldr	r1, [pc, #44]	@ (8007f30 <netconn_tcp_recvd_msg+0x54>)
 8007f02:	480c      	ldr	r0, [pc, #48]	@ (8007f34 <netconn_tcp_recvd_msg+0x58>)
 8007f04:	f00d f9ae 	bl	8015264 <iprintf>
 8007f08:	f06f 030f 	mvn.w	r3, #15
 8007f0c:	e00a      	b.n	8007f24 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4806      	ldr	r0, [pc, #24]	@ (8007f38 <netconn_tcp_recvd_msg+0x5c>)
 8007f1e:	f7ff fd4d 	bl	80079bc <netconn_apimsg>
 8007f22:	4603      	mov	r3, r0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	08016304 	.word	0x08016304
 8007f30:	08016564 	.word	0x08016564
 8007f34:	0801635c 	.word	0x0801635c
 8007f38:	08009505 	.word	0x08009505

08007f3c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b090      	sub	sp, #64	@ 0x40
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	4613      	mov	r3, r2
 8007f48:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3310      	adds	r3, #16
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f00c ff4f 	bl	8014df2 <sys_mbox_valid>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d102      	bne.n	8007f60 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007f5a:	f06f 030a 	mvn.w	r3, #10
 8007f5e:	e06d      	b.n	800803c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	7f1b      	ldrb	r3, [r3, #28]
 8007f64:	b25b      	sxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da07      	bge.n	8007f7a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	7f1b      	ldrb	r3, [r3, #28]
 8007f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007f78:	e039      	b.n	8007fee <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff fee3 	bl	8007d4c <netconn_recv_data>
 8007f86:	4603      	mov	r3, r0
 8007f88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8007f8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007f94:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f98:	e050      	b.n	800803c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10e      	bne.n	8007fc8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <netconn_recv_data_tcp+0x7a>
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb2:	891b      	ldrh	r3, [r3, #8]
 8007fb4:	e000      	b.n	8007fb8 <netconn_recv_data_tcp+0x7c>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007fba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007fbc:	f107 0214 	add.w	r2, r7, #20
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff ff8a 	bl	8007edc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d134      	bne.n	8008038 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007fce:	79fb      	ldrb	r3, [r7, #7]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d009      	beq.n	8007fec <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	7f1b      	ldrb	r3, [r3, #28]
 8007fdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007fe6:	f06f 0306 	mvn.w	r3, #6
 8007fea:	e027      	b.n	800803c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007fec:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d005      	beq.n	8008002 <netconn_recv_data_tcp+0xc6>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10f      	bne.n	800802a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f9a3 	bl	8008356 <netconn_err>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8008016:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <netconn_recv_data_tcp+0xe8>
          return err;
 800801e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008022:	e00b      	b.n	800803c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008024:	f06f 030d 	mvn.w	r3, #13
 8008028:	e008      	b.n	800803c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800802a:	2101      	movs	r1, #1
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f955 	bl	80082dc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008032:	f06f 030e 	mvn.w	r3, #14
 8008036:	e001      	b.n	800803c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008038:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800803c:	4618      	mov	r0, r3
 800803e:	3740      	adds	r7, #64	@ 0x40
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d109      	bne.n	800806c <netconn_recv+0x28>
 8008058:	4b32      	ldr	r3, [pc, #200]	@ (8008124 <netconn_recv+0xe0>)
 800805a:	f240 3263 	movw	r2, #867	@ 0x363
 800805e:	4932      	ldr	r1, [pc, #200]	@ (8008128 <netconn_recv+0xe4>)
 8008060:	4832      	ldr	r0, [pc, #200]	@ (800812c <netconn_recv+0xe8>)
 8008062:	f00d f8ff 	bl	8015264 <iprintf>
 8008066:	f06f 030f 	mvn.w	r3, #15
 800806a:	e056      	b.n	800811a <netconn_recv+0xd6>
  *new_buf = NULL;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d109      	bne.n	800808c <netconn_recv+0x48>
 8008078:	4b2a      	ldr	r3, [pc, #168]	@ (8008124 <netconn_recv+0xe0>)
 800807a:	f240 3265 	movw	r2, #869	@ 0x365
 800807e:	492c      	ldr	r1, [pc, #176]	@ (8008130 <netconn_recv+0xec>)
 8008080:	482a      	ldr	r0, [pc, #168]	@ (800812c <netconn_recv+0xe8>)
 8008082:	f00d f8ef 	bl	8015264 <iprintf>
 8008086:	f06f 030f 	mvn.w	r3, #15
 800808a:	e046      	b.n	800811a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008094:	2b10      	cmp	r3, #16
 8008096:	d13a      	bne.n	800810e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008098:	2300      	movs	r3, #0
 800809a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800809c:	2006      	movs	r0, #6
 800809e:	f002 fc89 	bl	800a9b4 <memp_malloc>
 80080a2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d102      	bne.n	80080b0 <netconn_recv+0x6c>
      return ERR_MEM;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
 80080ae:	e034      	b.n	800811a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80080b0:	f107 030c 	add.w	r3, r7, #12
 80080b4:	2200      	movs	r2, #0
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ff3f 	bl	8007f3c <netconn_recv_data_tcp>
 80080be:	4603      	mov	r3, r0
 80080c0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80080c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d006      	beq.n	80080d8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80080ca:	6979      	ldr	r1, [r7, #20]
 80080cc:	2006      	movs	r0, #6
 80080ce:	f002 fce7 	bl	800aaa0 <memp_free>
      return err;
 80080d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080d6:	e020      	b.n	800811a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <netconn_recv+0xa8>
 80080de:	4b11      	ldr	r3, [pc, #68]	@ (8008124 <netconn_recv+0xe0>)
 80080e0:	f240 3279 	movw	r2, #889	@ 0x379
 80080e4:	4913      	ldr	r1, [pc, #76]	@ (8008134 <netconn_recv+0xf0>)
 80080e6:	4811      	ldr	r0, [pc, #68]	@ (800812c <netconn_recv+0xe8>)
 80080e8:	f00d f8bc 	bl	8015264 <iprintf>

    buf->p = p;
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2200      	movs	r2, #0
 80080fc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2200      	movs	r2, #0
 8008102:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	e005      	b.n	800811a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800810e:	2200      	movs	r2, #0
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff fe1a 	bl	8007d4c <netconn_recv_data>
 8008118:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	08016304 	.word	0x08016304
 8008128:	0801651c 	.word	0x0801651c
 800812c:	0801635c 	.word	0x0801635c
 8008130:	0801653c 	.word	0x0801653c
 8008134:	080165b4 	.word	0x080165b4

08008138 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	f107 0110 	add.w	r1, r7, #16
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	4613      	mov	r3, r2
 800815a:	2201      	movs	r2, #1
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f805 	bl	800816c <netconn_write_vectors_partly>
 8008162:	4603      	mov	r3, r0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b092      	sub	sp, #72	@ 0x48
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4611      	mov	r1, r2
 8008178:	461a      	mov	r2, r3
 800817a:	460b      	mov	r3, r1
 800817c:	80fb      	strh	r3, [r7, #6]
 800817e:	4613      	mov	r3, r2
 8008180:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <netconn_write_vectors_partly+0x30>
 8008188:	4b4e      	ldr	r3, [pc, #312]	@ (80082c4 <netconn_write_vectors_partly+0x158>)
 800818a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800818e:	494e      	ldr	r1, [pc, #312]	@ (80082c8 <netconn_write_vectors_partly+0x15c>)
 8008190:	484e      	ldr	r0, [pc, #312]	@ (80082cc <netconn_write_vectors_partly+0x160>)
 8008192:	f00d f867 	bl	8015264 <iprintf>
 8008196:	f06f 030f 	mvn.w	r3, #15
 800819a:	e08e      	b.n	80082ba <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081a4:	2b10      	cmp	r3, #16
 80081a6:	d009      	beq.n	80081bc <netconn_write_vectors_partly+0x50>
 80081a8:	4b46      	ldr	r3, [pc, #280]	@ (80082c4 <netconn_write_vectors_partly+0x158>)
 80081aa:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80081ae:	4948      	ldr	r1, [pc, #288]	@ (80082d0 <netconn_write_vectors_partly+0x164>)
 80081b0:	4846      	ldr	r0, [pc, #280]	@ (80082cc <netconn_write_vectors_partly+0x160>)
 80081b2:	f00d f857 	bl	8015264 <iprintf>
 80081b6:	f06f 0305 	mvn.w	r3, #5
 80081ba:	e07e      	b.n	80082ba <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	7f1b      	ldrb	r3, [r3, #28]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <netconn_write_vectors_partly+0x66>
 80081c8:	797b      	ldrb	r3, [r7, #5]
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <netconn_write_vectors_partly+0x6a>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e000      	b.n	80081d8 <netconn_write_vectors_partly+0x6c>
 80081d6:	2300      	movs	r3, #0
 80081d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80081dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <netconn_write_vectors_partly+0x84>
 80081e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80081ea:	f06f 0305 	mvn.w	r3, #5
 80081ee:	e064      	b.n	80082ba <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 80081f4:	2300      	movs	r3, #0
 80081f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80081f8:	e015      	b.n	8008226 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80081fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008206:	4413      	add	r3, r2
 8008208:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800820a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	4413      	add	r3, r2
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008216:	429a      	cmp	r2, r3
 8008218:	d202      	bcs.n	8008220 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800821a:	f06f 0305 	mvn.w	r3, #5
 800821e:	e04c      	b.n	80082ba <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008222:	3301      	adds	r3, #1
 8008224:	643b      	str	r3, [r7, #64]	@ 0x40
 8008226:	88fb      	ldrh	r3, [r7, #6]
 8008228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800822a:	429a      	cmp	r2, r3
 800822c:	dbe5      	blt.n	80081fa <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800822e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	e040      	b.n	80082ba <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800823a:	2b00      	cmp	r3, #0
 800823c:	da0a      	bge.n	8008254 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800823e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008244:	f06f 0305 	mvn.w	r3, #5
 8008248:	e037      	b.n	80082ba <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800824a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800824e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800825c:	88fb      	ldrh	r3, [r7, #6]
 800825e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008264:	797b      	ldrb	r3, [r7, #5]
 8008266:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800826a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800826c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008272:	f107 0314 	add.w	r3, r7, #20
 8008276:	4619      	mov	r1, r3
 8008278:	4816      	ldr	r0, [pc, #88]	@ (80082d4 <netconn_write_vectors_partly+0x168>)
 800827a:	f7ff fb9f 	bl	80079bc <netconn_apimsg>
 800827e:	4603      	mov	r3, r0
 8008280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8008284:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008288:	2b00      	cmp	r3, #0
 800828a:	d114      	bne.n	80082b6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800828c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008296:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008298:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80082a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d006      	beq.n	80082b6 <netconn_write_vectors_partly+0x14a>
 80082a8:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <netconn_write_vectors_partly+0x158>)
 80082aa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80082ae:	490a      	ldr	r1, [pc, #40]	@ (80082d8 <netconn_write_vectors_partly+0x16c>)
 80082b0:	4806      	ldr	r0, [pc, #24]	@ (80082cc <netconn_write_vectors_partly+0x160>)
 80082b2:	f00c ffd7 	bl	8015264 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80082b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3748      	adds	r7, #72	@ 0x48
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	08016304 	.word	0x08016304
 80082c8:	080165dc 	.word	0x080165dc
 80082cc:	0801635c 	.word	0x0801635c
 80082d0:	080165f8 	.word	0x080165f8
 80082d4:	08009909 	.word	0x08009909
 80082d8:	0801661c 	.word	0x0801661c

080082dc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08c      	sub	sp, #48	@ 0x30
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <netconn_close_shutdown+0x26>
 80082ee:	4b0f      	ldr	r3, [pc, #60]	@ (800832c <netconn_close_shutdown+0x50>)
 80082f0:	f240 4247 	movw	r2, #1095	@ 0x447
 80082f4:	490e      	ldr	r1, [pc, #56]	@ (8008330 <netconn_close_shutdown+0x54>)
 80082f6:	480f      	ldr	r0, [pc, #60]	@ (8008334 <netconn_close_shutdown+0x58>)
 80082f8:	f00c ffb4 	bl	8015264 <iprintf>
 80082fc:	f06f 030f 	mvn.w	r3, #15
 8008300:	e010      	b.n	8008324 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800830a:	2329      	movs	r3, #41	@ 0x29
 800830c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800830e:	f107 030c 	add.w	r3, r7, #12
 8008312:	4619      	mov	r1, r3
 8008314:	4808      	ldr	r0, [pc, #32]	@ (8008338 <netconn_close_shutdown+0x5c>)
 8008316:	f7ff fb51 	bl	80079bc <netconn_apimsg>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008320:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008324:	4618      	mov	r0, r3
 8008326:	3730      	adds	r7, #48	@ 0x30
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	08016304 	.word	0x08016304
 8008330:	08016640 	.word	0x08016640
 8008334:	0801635c 	.word	0x0801635c
 8008338:	08009a21 	.word	0x08009a21

0800833c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008344:	2103      	movs	r1, #3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff ffc8 	bl	80082dc <netconn_close_shutdown>
 800834c:	4603      	mov	r3, r0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <netconn_err+0x12>
    return ERR_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	e00d      	b.n	8008384 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008368:	f00c fe5e 	bl	8015028 <sys_arch_protect>
 800836c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	7a1b      	ldrb	r3, [r3, #8]
 8008372:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f00c fe62 	bl	8015044 <sys_arch_unprotect>
  return err;
 8008380:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800839a:	f113 0f0d 	cmn.w	r3, #13
 800839e:	d009      	beq.n	80083b4 <lwip_netconn_err_to_msg+0x28>
 80083a0:	f113 0f0d 	cmn.w	r3, #13
 80083a4:	dc0c      	bgt.n	80083c0 <lwip_netconn_err_to_msg+0x34>
 80083a6:	f113 0f0f 	cmn.w	r3, #15
 80083aa:	d007      	beq.n	80083bc <lwip_netconn_err_to_msg+0x30>
 80083ac:	f113 0f0e 	cmn.w	r3, #14
 80083b0:	d002      	beq.n	80083b8 <lwip_netconn_err_to_msg+0x2c>
 80083b2:	e005      	b.n	80083c0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80083b4:	4b0a      	ldr	r3, [pc, #40]	@ (80083e0 <lwip_netconn_err_to_msg+0x54>)
 80083b6:	e00e      	b.n	80083d6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80083b8:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <lwip_netconn_err_to_msg+0x58>)
 80083ba:	e00c      	b.n	80083d6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80083bc:	4b0a      	ldr	r3, [pc, #40]	@ (80083e8 <lwip_netconn_err_to_msg+0x5c>)
 80083be:	e00a      	b.n	80083d6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80083c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <lwip_netconn_err_to_msg+0x48>
 80083c8:	4b08      	ldr	r3, [pc, #32]	@ (80083ec <lwip_netconn_err_to_msg+0x60>)
 80083ca:	227d      	movs	r2, #125	@ 0x7d
 80083cc:	4908      	ldr	r1, [pc, #32]	@ (80083f0 <lwip_netconn_err_to_msg+0x64>)
 80083ce:	4809      	ldr	r0, [pc, #36]	@ (80083f4 <lwip_netconn_err_to_msg+0x68>)
 80083d0:	f00c ff48 	bl	8015264 <iprintf>
      return NULL;
 80083d4:	2300      	movs	r3, #0
  }
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	080197f8 	.word	0x080197f8
 80083e4:	080197f9 	.word	0x080197f9
 80083e8:	080197fa 	.word	0x080197fa
 80083ec:	0801665c 	.word	0x0801665c
 80083f0:	08016690 	.word	0x08016690
 80083f4:	080166a0 	.word	0x080166a0

080083f8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d105      	bne.n	8008414 <lwip_netconn_is_err_msg+0x1c>
 8008408:	4b12      	ldr	r3, [pc, #72]	@ (8008454 <lwip_netconn_is_err_msg+0x5c>)
 800840a:	2285      	movs	r2, #133	@ 0x85
 800840c:	4912      	ldr	r1, [pc, #72]	@ (8008458 <lwip_netconn_is_err_msg+0x60>)
 800840e:	4813      	ldr	r0, [pc, #76]	@ (800845c <lwip_netconn_is_err_msg+0x64>)
 8008410:	f00c ff28 	bl	8015264 <iprintf>

  if (msg == &netconn_aborted) {
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a12      	ldr	r2, [pc, #72]	@ (8008460 <lwip_netconn_is_err_msg+0x68>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d104      	bne.n	8008426 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	22f3      	movs	r2, #243	@ 0xf3
 8008420:	701a      	strb	r2, [r3, #0]
    return 1;
 8008422:	2301      	movs	r3, #1
 8008424:	e012      	b.n	800844c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a0e      	ldr	r2, [pc, #56]	@ (8008464 <lwip_netconn_is_err_msg+0x6c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d104      	bne.n	8008438 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	22f2      	movs	r2, #242	@ 0xf2
 8008432:	701a      	strb	r2, [r3, #0]
    return 1;
 8008434:	2301      	movs	r3, #1
 8008436:	e009      	b.n	800844c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a0b      	ldr	r2, [pc, #44]	@ (8008468 <lwip_netconn_is_err_msg+0x70>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d104      	bne.n	800844a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	22f1      	movs	r2, #241	@ 0xf1
 8008444:	701a      	strb	r2, [r3, #0]
    return 1;
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	0801665c 	.word	0x0801665c
 8008458:	080166c8 	.word	0x080166c8
 800845c:	080166a0 	.word	0x080166a0
 8008460:	080197f8 	.word	0x080197f8
 8008464:	080197f9 	.word	0x080197f9
 8008468:	080197fa 	.word	0x080197fa

0800846c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d105      	bne.n	800848c <recv_udp+0x20>
 8008480:	4b34      	ldr	r3, [pc, #208]	@ (8008554 <recv_udp+0xe8>)
 8008482:	22e5      	movs	r2, #229	@ 0xe5
 8008484:	4934      	ldr	r1, [pc, #208]	@ (8008558 <recv_udp+0xec>)
 8008486:	4835      	ldr	r0, [pc, #212]	@ (800855c <recv_udp+0xf0>)
 8008488:	f00c feec 	bl	8015264 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <recv_udp+0x32>
 8008492:	4b30      	ldr	r3, [pc, #192]	@ (8008554 <recv_udp+0xe8>)
 8008494:	22e6      	movs	r2, #230	@ 0xe6
 8008496:	4932      	ldr	r1, [pc, #200]	@ (8008560 <recv_udp+0xf4>)
 8008498:	4830      	ldr	r0, [pc, #192]	@ (800855c <recv_udp+0xf0>)
 800849a:	f00c fee3 	bl	8015264 <iprintf>
  conn = (struct netconn *)arg;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d103      	bne.n	80084b0 <recv_udp+0x44>
    pbuf_free(p);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f003 f99d 	bl	800b7e8 <pbuf_free>
    return;
 80084ae:	e04d      	b.n	800854c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d005      	beq.n	80084c6 <recv_udp+0x5a>
 80084ba:	4b26      	ldr	r3, [pc, #152]	@ (8008554 <recv_udp+0xe8>)
 80084bc:	22ee      	movs	r2, #238	@ 0xee
 80084be:	4929      	ldr	r1, [pc, #164]	@ (8008564 <recv_udp+0xf8>)
 80084c0:	4826      	ldr	r0, [pc, #152]	@ (800855c <recv_udp+0xf0>)
 80084c2:	f00c fecf 	bl	8015264 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	3310      	adds	r3, #16
 80084ca:	4618      	mov	r0, r3
 80084cc:	f00c fc91 	bl	8014df2 <sys_mbox_valid>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d103      	bne.n	80084de <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f003 f986 	bl	800b7e8 <pbuf_free>
    return;
 80084dc:	e036      	b.n	800854c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80084de:	2006      	movs	r0, #6
 80084e0:	f002 fa68 	bl	800a9b4 <memp_malloc>
 80084e4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <recv_udp+0x88>
    pbuf_free(p);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f003 f97b 	bl	800b7e8 <pbuf_free>
    return;
 80084f2:	e02b      	b.n	800854c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <recv_udp+0xa0>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	e000      	b.n	800850e <recv_udp+0xa2>
 800850c:	2300      	movs	r3, #0
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008516:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	891b      	ldrh	r3, [r3, #8]
 800851c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	3310      	adds	r3, #16
 8008522:	69b9      	ldr	r1, [r7, #24]
 8008524:	4618      	mov	r0, r3
 8008526:	f00c fbef 	bl	8014d08 <sys_mbox_trypost>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008530:	69b8      	ldr	r0, [r7, #24]
 8008532:	f001 fb01 	bl	8009b38 <netbuf_delete>
    return;
 8008536:	e009      	b.n	800854c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <recv_udp+0xe0>
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008544:	8afa      	ldrh	r2, [r7, #22]
 8008546:	2100      	movs	r1, #0
 8008548:	69f8      	ldr	r0, [r7, #28]
 800854a:	4798      	blx	r3
  }
}
 800854c:	3720      	adds	r7, #32
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	0801665c 	.word	0x0801665c
 8008558:	080166d4 	.word	0x080166d4
 800855c:	080166a0 	.word	0x080166a0
 8008560:	080166f8 	.word	0x080166f8
 8008564:	08016718 	.word	0x08016718

08008568 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d106      	bne.n	800858a <recv_tcp+0x22>
 800857c:	4b36      	ldr	r3, [pc, #216]	@ (8008658 <recv_tcp+0xf0>)
 800857e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008582:	4936      	ldr	r1, [pc, #216]	@ (800865c <recv_tcp+0xf4>)
 8008584:	4836      	ldr	r0, [pc, #216]	@ (8008660 <recv_tcp+0xf8>)
 8008586:	f00c fe6d 	bl	8015264 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d106      	bne.n	800859e <recv_tcp+0x36>
 8008590:	4b31      	ldr	r3, [pc, #196]	@ (8008658 <recv_tcp+0xf0>)
 8008592:	f240 122d 	movw	r2, #301	@ 0x12d
 8008596:	4933      	ldr	r1, [pc, #204]	@ (8008664 <recv_tcp+0xfc>)
 8008598:	4831      	ldr	r0, [pc, #196]	@ (8008660 <recv_tcp+0xf8>)
 800859a:	f00c fe63 	bl	8015264 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800859e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <recv_tcp+0x4c>
 80085a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008658 <recv_tcp+0xf0>)
 80085a8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80085ac:	492e      	ldr	r1, [pc, #184]	@ (8008668 <recv_tcp+0x100>)
 80085ae:	482c      	ldr	r0, [pc, #176]	@ (8008660 <recv_tcp+0xf8>)
 80085b0:	f00c fe58 	bl	8015264 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <recv_tcp+0x5c>
    return ERR_VAL;
 80085be:	f06f 0305 	mvn.w	r3, #5
 80085c2:	e045      	b.n	8008650 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d006      	beq.n	80085dc <recv_tcp+0x74>
 80085ce:	4b22      	ldr	r3, [pc, #136]	@ (8008658 <recv_tcp+0xf0>)
 80085d0:	f240 1235 	movw	r2, #309	@ 0x135
 80085d4:	4925      	ldr	r1, [pc, #148]	@ (800866c <recv_tcp+0x104>)
 80085d6:	4822      	ldr	r0, [pc, #136]	@ (8008660 <recv_tcp+0xf8>)
 80085d8:	f00c fe44 	bl	8015264 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	3310      	adds	r3, #16
 80085e0:	4618      	mov	r0, r3
 80085e2:	f00c fc06 	bl	8014df2 <sys_mbox_valid>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10d      	bne.n	8008608 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d008      	beq.n	8008604 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	891b      	ldrh	r3, [r3, #8]
 80085f6:	4619      	mov	r1, r3
 80085f8:	68b8      	ldr	r0, [r7, #8]
 80085fa:	f004 f8ad 	bl	800c758 <tcp_recved>
      pbuf_free(p);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f003 f8f2 	bl	800b7e8 <pbuf_free>
    }
    return ERR_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e023      	b.n	8008650 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <recv_tcp+0xb2>
    msg = p;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	891b      	ldrh	r3, [r3, #8]
 8008616:	83fb      	strh	r3, [r7, #30]
 8008618:	e003      	b.n	8008622 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800861a:	4b15      	ldr	r3, [pc, #84]	@ (8008670 <recv_tcp+0x108>)
 800861c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	3310      	adds	r3, #16
 8008626:	69b9      	ldr	r1, [r7, #24]
 8008628:	4618      	mov	r0, r3
 800862a:	f00c fb6d 	bl	8014d08 <sys_mbox_trypost>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008634:	f04f 33ff 	mov.w	r3, #4294967295
 8008638:	e00a      	b.n	8008650 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d005      	beq.n	800864e <recv_tcp+0xe6>
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008646:	8bfa      	ldrh	r2, [r7, #30]
 8008648:	2100      	movs	r1, #0
 800864a:	6978      	ldr	r0, [r7, #20]
 800864c:	4798      	blx	r3
  }

  return ERR_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	0801665c 	.word	0x0801665c
 800865c:	08016738 	.word	0x08016738
 8008660:	080166a0 	.word	0x080166a0
 8008664:	0801675c 	.word	0x0801675c
 8008668:	0801677c 	.word	0x0801677c
 800866c:	08016794 	.word	0x08016794
 8008670:	080197fa 	.word	0x080197fa

08008674 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d106      	bne.n	8008696 <poll_tcp+0x22>
 8008688:	4b29      	ldr	r3, [pc, #164]	@ (8008730 <poll_tcp+0xbc>)
 800868a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800868e:	4929      	ldr	r1, [pc, #164]	@ (8008734 <poll_tcp+0xc0>)
 8008690:	4829      	ldr	r0, [pc, #164]	@ (8008738 <poll_tcp+0xc4>)
 8008692:	f00c fde7 	bl	8015264 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	785b      	ldrb	r3, [r3, #1]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d104      	bne.n	80086a8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800869e:	2101      	movs	r1, #1
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 ff65 	bl	8009570 <lwip_netconn_do_writemore>
 80086a6:	e016      	b.n	80086d6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d112      	bne.n	80086d6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <poll_tcp+0x5a>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	7a5b      	ldrb	r3, [r3, #9]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	7a5a      	ldrb	r2, [r3, #9]
 80086c8:	3a01      	subs	r2, #1
 80086ca:	b2d2      	uxtb	r2, r2
 80086cc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80086ce:	2101      	movs	r1, #1
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fbf7 	bl	8008ec4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	7f1b      	ldrb	r3, [r3, #28]
 80086da:	f003 0310 	and.w	r3, r3, #16
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d021      	beq.n	8008726 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01d      	beq.n	8008726 <poll_tcp+0xb2>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80086f2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80086f6:	d316      	bcc.n	8008726 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008700:	2b04      	cmp	r3, #4
 8008702:	d810      	bhi.n	8008726 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	7f1b      	ldrb	r3, [r3, #28]
 8008708:	f023 0310 	bic.w	r3, r3, #16
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008716:	2b00      	cmp	r3, #0
 8008718:	d005      	beq.n	8008726 <poll_tcp+0xb2>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871e:	2200      	movs	r2, #0
 8008720:	2102      	movs	r1, #2
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	0801665c 	.word	0x0801665c
 8008734:	080167b4 	.word	0x080167b4
 8008738:	080166a0 	.word	0x080166a0

0800873c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4613      	mov	r3, r2
 8008748:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d106      	bne.n	8008762 <sent_tcp+0x26>
 8008754:	4b20      	ldr	r3, [pc, #128]	@ (80087d8 <sent_tcp+0x9c>)
 8008756:	f240 1293 	movw	r2, #403	@ 0x193
 800875a:	4920      	ldr	r1, [pc, #128]	@ (80087dc <sent_tcp+0xa0>)
 800875c:	4820      	ldr	r0, [pc, #128]	@ (80087e0 <sent_tcp+0xa4>)
 800875e:	f00c fd81 	bl	8015264 <iprintf>

  if (conn) {
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d032      	beq.n	80087ce <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	785b      	ldrb	r3, [r3, #1]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d104      	bne.n	800877a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008770:	2101      	movs	r1, #1
 8008772:	6978      	ldr	r0, [r7, #20]
 8008774:	f000 fefc 	bl	8009570 <lwip_netconn_do_writemore>
 8008778:	e007      	b.n	800878a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	2b04      	cmp	r3, #4
 8008780:	d103      	bne.n	800878a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008782:	2101      	movs	r1, #1
 8008784:	6978      	ldr	r0, [r7, #20]
 8008786:	f000 fb9d 	bl	8008ec4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01d      	beq.n	80087ce <sent_tcp+0x92>
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800879a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800879e:	d316      	bcc.n	80087ce <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d810      	bhi.n	80087ce <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	7f1b      	ldrb	r3, [r3, #28]
 80087b0:	f023 0310 	bic.w	r3, r3, #16
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <sent_tcp+0x92>
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c6:	88fa      	ldrh	r2, [r7, #6]
 80087c8:	2102      	movs	r1, #2
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	0801665c 	.word	0x0801665c
 80087dc:	080167b4 	.word	0x080167b4
 80087e0:	080166a0 	.word	0x080166a0

080087e4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d106      	bne.n	8008808 <err_tcp+0x24>
 80087fa:	4b5f      	ldr	r3, [pc, #380]	@ (8008978 <err_tcp+0x194>)
 80087fc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8008800:	495e      	ldr	r1, [pc, #376]	@ (800897c <err_tcp+0x198>)
 8008802:	485f      	ldr	r0, [pc, #380]	@ (8008980 <err_tcp+0x19c>)
 8008804:	f00c fd2e 	bl	8015264 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008808:	f00c fc0e 	bl	8015028 <sys_arch_protect>
 800880c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	2200      	movs	r2, #0
 8008812:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	7f1b      	ldrb	r3, [r3, #28]
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	b2da      	uxtb	r2, r3
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	2200      	movs	r2, #0
 8008832:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008834:	69b8      	ldr	r0, [r7, #24]
 8008836:	f00c fc05 	bl	8015044 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	2b00      	cmp	r3, #0
 8008840:	d005      	beq.n	800884e <err_tcp+0x6a>
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008846:	2200      	movs	r2, #0
 8008848:	2104      	movs	r1, #4
 800884a:	69f8      	ldr	r0, [r7, #28]
 800884c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <err_tcp+0x7e>
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	69f8      	ldr	r0, [r7, #28]
 8008860:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <err_tcp+0x92>
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886e:	2200      	movs	r2, #0
 8008870:	2102      	movs	r1, #2
 8008872:	69f8      	ldr	r0, [r7, #28]
 8008874:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fd86 	bl	800838c <lwip_netconn_err_to_msg>
 8008880:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	3310      	adds	r3, #16
 8008886:	4618      	mov	r0, r3
 8008888:	f00c fab3 	bl	8014df2 <sys_mbox_valid>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	3310      	adds	r3, #16
 8008896:	6939      	ldr	r1, [r7, #16]
 8008898:	4618      	mov	r0, r3
 800889a:	f00c fa35 	bl	8014d08 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	3314      	adds	r3, #20
 80088a2:	4618      	mov	r0, r3
 80088a4:	f00c faa5 	bl	8014df2 <sys_mbox_valid>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	3314      	adds	r3, #20
 80088b2:	6939      	ldr	r1, [r7, #16]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f00c fa27 	bl	8014d08 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d005      	beq.n	80088cc <err_tcp+0xe8>
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d002      	beq.n	80088cc <err_tcp+0xe8>
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d143      	bne.n	8008954 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	7f1b      	ldrb	r3, [r3, #28]
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	bf14      	ite	ne
 80088d8:	2301      	movne	r3, #1
 80088da:	2300      	moveq	r3, #0
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	7f1b      	ldrb	r3, [r3, #28]
 80088e4:	f023 0304 	bic.w	r3, r3, #4
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d13b      	bne.n	800896c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <err_tcp+0x126>
 80088fc:	4b1e      	ldr	r3, [pc, #120]	@ (8008978 <err_tcp+0x194>)
 80088fe:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008902:	4920      	ldr	r1, [pc, #128]	@ (8008984 <err_tcp+0x1a0>)
 8008904:	481e      	ldr	r0, [pc, #120]	@ (8008980 <err_tcp+0x19c>)
 8008906:	f00c fcad 	bl	8015264 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2b04      	cmp	r3, #4
 800890e:	d104      	bne.n	800891a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	2200      	movs	r2, #0
 8008916:	711a      	strb	r2, [r3, #4]
 8008918:	e003      	b.n	8008922 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	78fa      	ldrb	r2, [r7, #3]
 8008920:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	330c      	adds	r3, #12
 800892a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800892c:	68b8      	ldr	r0, [r7, #8]
 800892e:	f00c faf1 	bl	8014f14 <sys_sem_valid>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <err_tcp+0x162>
 8008938:	4b0f      	ldr	r3, [pc, #60]	@ (8008978 <err_tcp+0x194>)
 800893a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800893e:	4912      	ldr	r1, [pc, #72]	@ (8008988 <err_tcp+0x1a4>)
 8008940:	480f      	ldr	r0, [pc, #60]	@ (8008980 <err_tcp+0x19c>)
 8008942:	f00c fc8f 	bl	8015264 <iprintf>
      conn->current_msg = NULL;
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	2200      	movs	r2, #0
 800894a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800894c:	68b8      	ldr	r0, [r7, #8]
 800894e:	f00c fac7 	bl	8014ee0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008952:	e00b      	b.n	800896c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d008      	beq.n	800896e <err_tcp+0x18a>
 800895c:	4b06      	ldr	r3, [pc, #24]	@ (8008978 <err_tcp+0x194>)
 800895e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8008962:	490a      	ldr	r1, [pc, #40]	@ (800898c <err_tcp+0x1a8>)
 8008964:	4806      	ldr	r0, [pc, #24]	@ (8008980 <err_tcp+0x19c>)
 8008966:	f00c fc7d 	bl	8015264 <iprintf>
  }
}
 800896a:	e000      	b.n	800896e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800896c:	bf00      	nop
}
 800896e:	bf00      	nop
 8008970:	3720      	adds	r7, #32
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	0801665c 	.word	0x0801665c
 800897c:	080167b4 	.word	0x080167b4
 8008980:	080166a0 	.word	0x080166a0
 8008984:	080167c4 	.word	0x080167c4
 8008988:	080167e0 	.word	0x080167e0
 800898c:	080167fc 	.word	0x080167fc

08008990 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f004 fda1 	bl	800d4e8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80089a6:	490a      	ldr	r1, [pc, #40]	@ (80089d0 <setup_tcp+0x40>)
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f004 fdaf 	bl	800d50c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80089ae:	4909      	ldr	r1, [pc, #36]	@ (80089d4 <setup_tcp+0x44>)
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f004 fdcd 	bl	800d550 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80089b6:	2202      	movs	r2, #2
 80089b8:	4907      	ldr	r1, [pc, #28]	@ (80089d8 <setup_tcp+0x48>)
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f004 fe24 	bl	800d608 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80089c0:	4906      	ldr	r1, [pc, #24]	@ (80089dc <setup_tcp+0x4c>)
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f004 fde6 	bl	800d594 <tcp_err>
}
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	08008569 	.word	0x08008569
 80089d4:	0800873d 	.word	0x0800873d
 80089d8:	08008675 	.word	0x08008675
 80089dc:	080087e5 	.word	0x080087e5

080089e0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80089e0:	b590      	push	{r4, r7, lr}
 80089e2:	b089      	sub	sp, #36	@ 0x24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d102      	bne.n	80089fe <accept_function+0x1e>
    return ERR_VAL;
 80089f8:	f06f 0305 	mvn.w	r3, #5
 80089fc:	e0a1      	b.n	8008b42 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	3314      	adds	r3, #20
 8008a02:	4618      	mov	r0, r3
 8008a04:	f00c f9f5 	bl	8014df2 <sys_mbox_valid>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008a0e:	f06f 0305 	mvn.w	r3, #5
 8008a12:	e096      	b.n	8008b42 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d11b      	bne.n	8008a52 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	f103 0414 	add.w	r4, r3, #20
 8008a20:	f06f 000c 	mvn.w	r0, #12
 8008a24:	f7ff fcb2 	bl	800838c <lwip_netconn_err_to_msg>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f00c f96b 	bl	8014d08 <sys_mbox_trypost>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d109      	bne.n	8008a4c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <accept_function+0x6c>
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a44:	2200      	movs	r2, #0
 8008a46:	2100      	movs	r1, #0
 8008a48:	69f8      	ldr	r0, [r7, #28]
 8008a4a:	4798      	blx	r3
    }
    return ERR_VAL;
 8008a4c:	f06f 0305 	mvn.w	r3, #5
 8008a50:	e077      	b.n	8008b42 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d006      	beq.n	8008a68 <accept_function+0x88>
 8008a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8008b4c <accept_function+0x16c>)
 8008a5c:	f240 222a 	movw	r2, #554	@ 0x22a
 8008a60:	493b      	ldr	r1, [pc, #236]	@ (8008b50 <accept_function+0x170>)
 8008a62:	483c      	ldr	r0, [pc, #240]	@ (8008b54 <accept_function+0x174>)
 8008a64:	f00c fbfe 	bl	8015264 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	781a      	ldrb	r2, [r3, #0]
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f000 f8f0 	bl	8008c58 <netconn_alloc>
 8008a78:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d11b      	bne.n	8008ab8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	f103 0414 	add.w	r4, r3, #20
 8008a86:	f06f 000c 	mvn.w	r0, #12
 8008a8a:	f7ff fc7f 	bl	800838c <lwip_netconn_err_to_msg>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4619      	mov	r1, r3
 8008a92:	4620      	mov	r0, r4
 8008a94:	f00c f938 	bl	8014d08 <sys_mbox_trypost>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <accept_function+0xd2>
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2100      	movs	r1, #0
 8008aae:	69f8      	ldr	r0, [r7, #28]
 8008ab0:	4798      	blx	r3
    }
    return ERR_MEM;
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab6:	e044      	b.n	8008b42 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008abe:	69b8      	ldr	r0, [r7, #24]
 8008ac0:	f7ff ff66 	bl	8008990 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	3314      	adds	r3, #20
 8008ac8:	69b9      	ldr	r1, [r7, #24]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f00c f91c 	bl	8014d08 <sys_mbox_trypost>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d02a      	beq.n	8008b2c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008adc:	2100      	movs	r1, #0
 8008ade:	6978      	ldr	r0, [r7, #20]
 8008ae0:	f004 fd02 	bl	800d4e8 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6978      	ldr	r0, [r7, #20]
 8008ae8:	f004 fd10 	bl	800d50c <tcp_recv>
    tcp_sent(pcb, NULL);
 8008aec:	2100      	movs	r1, #0
 8008aee:	6978      	ldr	r0, [r7, #20]
 8008af0:	f004 fd2e 	bl	800d550 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008af4:	2200      	movs	r2, #0
 8008af6:	2100      	movs	r1, #0
 8008af8:	6978      	ldr	r0, [r7, #20]
 8008afa:	f004 fd85 	bl	800d608 <tcp_poll>
    tcp_err(pcb, NULL);
 8008afe:	2100      	movs	r1, #0
 8008b00:	6978      	ldr	r0, [r7, #20]
 8008b02:	f004 fd47 	bl	800d594 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	3310      	adds	r3, #16
 8008b10:	4618      	mov	r0, r3
 8008b12:	f00c f8e7 	bl	8014ce4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	3310      	adds	r3, #16
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f00c f97a 	bl	8014e14 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008b20:	69b8      	ldr	r0, [r7, #24]
 8008b22:	f000 f907 	bl	8008d34 <netconn_free>
    return ERR_MEM;
 8008b26:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2a:	e00a      	b.n	8008b42 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <accept_function+0x160>
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	69f8      	ldr	r0, [r7, #28]
 8008b3e:	4798      	blx	r3
  }

  return ERR_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3724      	adds	r7, #36	@ 0x24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd90      	pop	{r4, r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	0801665c 	.word	0x0801665c
 8008b50:	08016818 	.word	0x08016818
 8008b54:	080166a0 	.word	0x080166a0

08008b58 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d006      	beq.n	8008b7c <pcb_new+0x24>
 8008b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8008c1c <pcb_new+0xc4>)
 8008b70:	f240 2265 	movw	r2, #613	@ 0x265
 8008b74:	492a      	ldr	r1, [pc, #168]	@ (8008c20 <pcb_new+0xc8>)
 8008b76:	482b      	ldr	r0, [pc, #172]	@ (8008c24 <pcb_new+0xcc>)
 8008b78:	f00c fb74 	bl	8015264 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b86:	2b10      	cmp	r3, #16
 8008b88:	d022      	beq.n	8008bd0 <pcb_new+0x78>
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	d133      	bne.n	8008bf6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681c      	ldr	r4, [r3, #0]
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f009 fd80 	bl	801269a <udp_new_ip_type>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d02a      	beq.n	8008bfe <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b22      	cmp	r3, #34	@ 0x22
 8008bb0:	d104      	bne.n	8008bbc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6858      	ldr	r0, [r3, #4]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4917      	ldr	r1, [pc, #92]	@ (8008c28 <pcb_new+0xd0>)
 8008bca:	f009 fced 	bl	80125a8 <udp_recv>
      }
      break;
 8008bce:	e016      	b.n	8008bfe <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681c      	ldr	r4, [r3, #0]
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f004 fc78 	bl	800d4cc <tcp_new_ip_type>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00b      	beq.n	8008c02 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff fece 	bl	8008990 <setup_tcp>
      }
      break;
 8008bf4:	e005      	b.n	8008c02 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	22fa      	movs	r2, #250	@ 0xfa
 8008bfa:	711a      	strb	r2, [r3, #4]
      return;
 8008bfc:	e00a      	b.n	8008c14 <pcb_new+0xbc>
      break;
 8008bfe:	bf00      	nop
 8008c00:	e000      	b.n	8008c04 <pcb_new+0xac>
      break;
 8008c02:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d102      	bne.n	8008c14 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	22ff      	movs	r2, #255	@ 0xff
 8008c12:	711a      	strb	r2, [r3, #4]
  }
}
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd90      	pop	{r4, r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	0801665c 	.word	0x0801665c
 8008c20:	08016840 	.word	0x08016840
 8008c24:	080166a0 	.word	0x080166a0
 8008c28:	0800846d 	.word	0x0800846d

08008c2c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d102      	bne.n	8008c4e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7ff ff85 	bl	8008b58 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	6039      	str	r1, [r7, #0]
 8008c62:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008c68:	2007      	movs	r0, #7
 8008c6a:	f001 fea3 	bl	800a9b4 <memp_malloc>
 8008c6e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <netconn_alloc+0x22>
    return NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e052      	b.n	8008d20 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	79fa      	ldrb	r2, [r7, #7]
 8008c84:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008c8c:	79fb      	ldrb	r3, [r7, #7]
 8008c8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c92:	2b10      	cmp	r3, #16
 8008c94:	d004      	beq.n	8008ca0 <netconn_alloc+0x48>
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d105      	bne.n	8008ca6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008c9a:	2306      	movs	r3, #6
 8008c9c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008c9e:	e00a      	b.n	8008cb6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008ca0:	2306      	movs	r3, #6
 8008ca2:	617b      	str	r3, [r7, #20]
      break;
 8008ca4:	e007      	b.n	8008cb6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008ca6:	4b20      	ldr	r3, [pc, #128]	@ (8008d28 <netconn_alloc+0xd0>)
 8008ca8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8008cac:	491f      	ldr	r1, [pc, #124]	@ (8008d2c <netconn_alloc+0xd4>)
 8008cae:	4820      	ldr	r0, [pc, #128]	@ (8008d30 <netconn_alloc+0xd8>)
 8008cb0:	f00c fad8 	bl	8015264 <iprintf>
      goto free_and_return;
 8008cb4:	e02f      	b.n	8008d16 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3310      	adds	r3, #16
 8008cba:	6979      	ldr	r1, [r7, #20]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f00b ffef 	bl	8014ca0 <sys_mbox_new>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d125      	bne.n	8008d14 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	330c      	adds	r3, #12
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f00c f8ad 	bl	8014e2e <sys_sem_new>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d005      	beq.n	8008ce6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3310      	adds	r3, #16
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f00c f800 	bl	8014ce4 <sys_mbox_free>
    goto free_and_return;
 8008ce4:	e017      	b.n	8008d16 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3314      	adds	r3, #20
 8008cea:	4618      	mov	r0, r3
 8008cec:	f00c f892 	bl	8014e14 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	7cfa      	ldrb	r2, [r7, #19]
 8008d0e:	771a      	strb	r2, [r3, #28]
  return conn;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	e005      	b.n	8008d20 <netconn_alloc+0xc8>
    goto free_and_return;
 8008d14:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008d16:	68f9      	ldr	r1, [r7, #12]
 8008d18:	2007      	movs	r0, #7
 8008d1a:	f001 fec1 	bl	800aaa0 <memp_free>
  return NULL;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	0801665c 	.word	0x0801665c
 8008d2c:	08016860 	.word	0x08016860
 8008d30:	080166a0 	.word	0x080166a0

08008d34 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d006      	beq.n	8008d52 <netconn_free+0x1e>
 8008d44:	4b1b      	ldr	r3, [pc, #108]	@ (8008db4 <netconn_free+0x80>)
 8008d46:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008d4a:	491b      	ldr	r1, [pc, #108]	@ (8008db8 <netconn_free+0x84>)
 8008d4c:	481b      	ldr	r0, [pc, #108]	@ (8008dbc <netconn_free+0x88>)
 8008d4e:	f00c fa89 	bl	8015264 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3310      	adds	r3, #16
 8008d56:	4618      	mov	r0, r3
 8008d58:	f00c f84b 	bl	8014df2 <sys_mbox_valid>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d006      	beq.n	8008d70 <netconn_free+0x3c>
 8008d62:	4b14      	ldr	r3, [pc, #80]	@ (8008db4 <netconn_free+0x80>)
 8008d64:	f240 3223 	movw	r2, #803	@ 0x323
 8008d68:	4915      	ldr	r1, [pc, #84]	@ (8008dc0 <netconn_free+0x8c>)
 8008d6a:	4814      	ldr	r0, [pc, #80]	@ (8008dbc <netconn_free+0x88>)
 8008d6c:	f00c fa7a 	bl	8015264 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3314      	adds	r3, #20
 8008d74:	4618      	mov	r0, r3
 8008d76:	f00c f83c 	bl	8014df2 <sys_mbox_valid>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d006      	beq.n	8008d8e <netconn_free+0x5a>
 8008d80:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <netconn_free+0x80>)
 8008d82:	f240 3226 	movw	r2, #806	@ 0x326
 8008d86:	490f      	ldr	r1, [pc, #60]	@ (8008dc4 <netconn_free+0x90>)
 8008d88:	480c      	ldr	r0, [pc, #48]	@ (8008dbc <netconn_free+0x88>)
 8008d8a:	f00c fa6b 	bl	8015264 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	330c      	adds	r3, #12
 8008d92:	4618      	mov	r0, r3
 8008d94:	f00c f8b1 	bl	8014efa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	330c      	adds	r3, #12
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f00c f8ca 	bl	8014f36 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	2007      	movs	r0, #7
 8008da6:	f001 fe7b 	bl	800aaa0 <memp_free>
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	0801665c 	.word	0x0801665c
 8008db8:	08016888 	.word	0x08016888
 8008dbc:	080166a0 	.word	0x080166a0
 8008dc0:	080168b8 	.word	0x080168b8
 8008dc4:	080168f4 	.word	0x080168f4

08008dc8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3310      	adds	r3, #16
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f00c f80c 	bl	8014df2 <sys_mbox_valid>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d02f      	beq.n	8008e40 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008de0:	e018      	b.n	8008e14 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008dea:	2b10      	cmp	r3, #16
 8008dec:	d10e      	bne.n	8008e0c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f107 020f 	add.w	r2, r7, #15
 8008df4:	4611      	mov	r1, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fafe 	bl	80083f8 <lwip_netconn_is_err_msg>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d108      	bne.n	8008e14 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f002 fcef 	bl	800b7e8 <pbuf_free>
 8008e0a:	e003      	b.n	8008e14 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fe92 	bl	8009b38 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3310      	adds	r3, #16
 8008e18:	f107 0210 	add.w	r2, r7, #16
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f00b ffcb 	bl	8014dba <sys_arch_mbox_tryfetch>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2a:	d1da      	bne.n	8008de2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3310      	adds	r3, #16
 8008e30:	4618      	mov	r0, r3
 8008e32:	f00b ff57 	bl	8014ce4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3310      	adds	r3, #16
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f00b ffea 	bl	8014e14 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3314      	adds	r3, #20
 8008e44:	4618      	mov	r0, r3
 8008e46:	f00b ffd4 	bl	8014df2 <sys_mbox_valid>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d034      	beq.n	8008eba <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e50:	e01d      	b.n	8008e8e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f107 020e 	add.w	r2, r7, #14
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff facc 	bl	80083f8 <lwip_netconn_is_err_msg>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d113      	bne.n	8008e8e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008e6a:	6978      	ldr	r0, [r7, #20]
 8008e6c:	f7ff ffac 	bl	8008dc8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f003 faa3 	bl	800c3c8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2200      	movs	r2, #0
 8008e86:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008e88:	6978      	ldr	r0, [r7, #20]
 8008e8a:	f7ff ff53 	bl	8008d34 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3314      	adds	r3, #20
 8008e92:	f107 0210 	add.w	r2, r7, #16
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f00b ff8e 	bl	8014dba <sys_arch_mbox_tryfetch>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea4:	d1d5      	bne.n	8008e52 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	3314      	adds	r3, #20
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f00b ff1a 	bl	8014ce4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3314      	adds	r3, #20
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f00b ffad 	bl	8014e14 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008eba:	bf00      	nop
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <lwip_netconn_do_close_internal+0x24>
 8008eda:	4b87      	ldr	r3, [pc, #540]	@ (80090f8 <lwip_netconn_do_close_internal+0x234>)
 8008edc:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8008ee0:	4986      	ldr	r1, [pc, #536]	@ (80090fc <lwip_netconn_do_close_internal+0x238>)
 8008ee2:	4887      	ldr	r0, [pc, #540]	@ (8009100 <lwip_netconn_do_close_internal+0x23c>)
 8008ee4:	f00c f9be 	bl	8015264 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ef0:	2b10      	cmp	r3, #16
 8008ef2:	d006      	beq.n	8008f02 <lwip_netconn_do_close_internal+0x3e>
 8008ef4:	4b80      	ldr	r3, [pc, #512]	@ (80090f8 <lwip_netconn_do_close_internal+0x234>)
 8008ef6:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8008efa:	4982      	ldr	r1, [pc, #520]	@ (8009104 <lwip_netconn_do_close_internal+0x240>)
 8008efc:	4880      	ldr	r0, [pc, #512]	@ (8009100 <lwip_netconn_do_close_internal+0x23c>)
 8008efe:	f00c f9b1 	bl	8015264 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d006      	beq.n	8008f18 <lwip_netconn_do_close_internal+0x54>
 8008f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80090f8 <lwip_netconn_do_close_internal+0x234>)
 8008f0c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8008f10:	497d      	ldr	r1, [pc, #500]	@ (8009108 <lwip_netconn_do_close_internal+0x244>)
 8008f12:	487b      	ldr	r0, [pc, #492]	@ (8009100 <lwip_netconn_do_close_internal+0x23c>)
 8008f14:	f00c f9a6 	bl	8015264 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <lwip_netconn_do_close_internal+0x6a>
 8008f20:	4b75      	ldr	r3, [pc, #468]	@ (80090f8 <lwip_netconn_do_close_internal+0x234>)
 8008f22:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8008f26:	4979      	ldr	r1, [pc, #484]	@ (800910c <lwip_netconn_do_close_internal+0x248>)
 8008f28:	4875      	ldr	r0, [pc, #468]	@ (8009100 <lwip_netconn_do_close_internal+0x23c>)
 8008f2a:	f00c f99b 	bl	8015264 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d106      	bne.n	8008f44 <lwip_netconn_do_close_internal+0x80>
 8008f36:	4b70      	ldr	r3, [pc, #448]	@ (80090f8 <lwip_netconn_do_close_internal+0x234>)
 8008f38:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008f3c:	4974      	ldr	r1, [pc, #464]	@ (8009110 <lwip_netconn_do_close_internal+0x24c>)
 8008f3e:	4870      	ldr	r0, [pc, #448]	@ (8009100 <lwip_netconn_do_close_internal+0x23c>)
 8008f40:	f00c f990 	bl	8015264 <iprintf>

  tpcb = conn->pcb.tcp;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	7a1b      	ldrb	r3, [r3, #8]
 8008f50:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d102      	bne.n	8008f6e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	75bb      	strb	r3, [r7, #22]
 8008f6c:	e01f      	b.n	8008fae <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00e      	beq.n	8008f92 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008f78:	2b05      	cmp	r3, #5
 8008f7a:	d007      	beq.n	8008f8c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008f80:	2b06      	cmp	r3, #6
 8008f82:	d003      	beq.n	8008f8c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d102      	bne.n	8008f92 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	75bb      	strb	r3, [r7, #22]
 8008f90:	e00d      	b.n	8008fae <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008f92:	7b7b      	ldrb	r3, [r7, #13]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d008      	beq.n	8008faa <lwip_netconn_do_close_internal+0xe6>
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	8b5b      	ldrh	r3, [r3, #26]
 8008f9c:	f003 0310 	and.w	r3, r3, #16
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	75bb      	strb	r3, [r7, #22]
 8008fa8:	e001      	b.n	8008fae <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008fae:	7dbb      	ldrb	r3, [r7, #22]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	6938      	ldr	r0, [r7, #16]
 8008fb8:	f004 fa96 	bl	800d4e8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	7d1b      	ldrb	r3, [r3, #20]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d104      	bne.n	8008fce <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	6938      	ldr	r0, [r7, #16]
 8008fc8:	f004 fb06 	bl	800d5d8 <tcp_accept>
 8008fcc:	e01d      	b.n	800900a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d007      	beq.n	8008fe4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	6938      	ldr	r0, [r7, #16]
 8008fd8:	f004 fa98 	bl	800d50c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6938      	ldr	r0, [r7, #16]
 8008fe0:	f004 fafa 	bl	800d5d8 <tcp_accept>
    }
    if (shut_tx) {
 8008fe4:	7b7b      	ldrb	r3, [r7, #13]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008fea:	2100      	movs	r1, #0
 8008fec:	6938      	ldr	r0, [r7, #16]
 8008fee:	f004 faaf 	bl	800d550 <tcp_sent>
    }
    if (shut_close) {
 8008ff2:	7dbb      	ldrb	r3, [r7, #22]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	6938      	ldr	r0, [r7, #16]
 8008ffe:	f004 fb03 	bl	800d608 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009002:	2100      	movs	r1, #0
 8009004:	6938      	ldr	r0, [r7, #16]
 8009006:	f004 fac5 	bl	800d594 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800900a:	7dbb      	ldrb	r3, [r7, #22]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009010:	6938      	ldr	r0, [r7, #16]
 8009012:	f003 f893 	bl	800c13c <tcp_close>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]
 800901a:	e007      	b.n	800902c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	7b7a      	ldrb	r2, [r7, #13]
 8009020:	4619      	mov	r1, r3
 8009022:	6938      	ldr	r0, [r7, #16]
 8009024:	f003 f8b6 	bl	800c194 <tcp_shutdown>
 8009028:	4603      	mov	r3, r0
 800902a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800902c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009034:	2301      	movs	r3, #1
 8009036:	757b      	strb	r3, [r7, #21]
 8009038:	e016      	b.n	8009068 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800903a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009042:	d10f      	bne.n	8009064 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	7a5b      	ldrb	r3, [r3, #9]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10c      	bne.n	8009068 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800904e:	2301      	movs	r3, #1
 8009050:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009052:	7dbb      	ldrb	r3, [r7, #22]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d007      	beq.n	8009068 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009058:	6938      	ldr	r0, [r7, #16]
 800905a:	f003 f9b5 	bl	800c3c8 <tcp_abort>
          err = ERR_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	75fb      	strb	r3, [r7, #23]
 8009062:	e001      	b.n	8009068 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009064:	2301      	movs	r3, #1
 8009066:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009068:	7d7b      	ldrb	r3, [r7, #21]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d052      	beq.n	8009114 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	330c      	adds	r3, #12
 8009076:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	7dfa      	ldrb	r2, [r7, #23]
 800907e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800908c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d129      	bne.n	80090e8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009094:	7dbb      	ldrb	r3, [r7, #22]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00c      	beq.n	80090b4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <lwip_netconn_do_close_internal+0x1f0>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ac:	2200      	movs	r2, #0
 80090ae:	2104      	movs	r1, #4
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
      }
      if (shut_rx) {
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <lwip_netconn_do_close_internal+0x20a>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	2200      	movs	r2, #0
 80090c8:	2100      	movs	r1, #0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4798      	blx	r3
      }
      if (shut_tx) {
 80090ce:	7b7b      	ldrb	r3, [r7, #13]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d009      	beq.n	80090e8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <lwip_netconn_do_close_internal+0x224>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	2200      	movs	r2, #0
 80090e2:	2102      	movs	r1, #2
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80090ee:	68b8      	ldr	r0, [r7, #8]
 80090f0:	f00b fef6 	bl	8014ee0 <sys_sem_signal>
    }
    return ERR_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	e03c      	b.n	8009172 <lwip_netconn_do_close_internal+0x2ae>
 80090f8:	0801665c 	.word	0x0801665c
 80090fc:	08016930 	.word	0x08016930
 8009100:	080166a0 	.word	0x080166a0
 8009104:	08016940 	.word	0x08016940
 8009108:	08016960 	.word	0x08016960
 800910c:	08016984 	.word	0x08016984
 8009110:	080167c4 	.word	0x080167c4
  }
  if (!close_finished) {
 8009114:	7d7b      	ldrb	r3, [r7, #21]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d11e      	bne.n	8009158 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	7d1b      	ldrb	r3, [r3, #20]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d106      	bne.n	8009130 <lwip_netconn_do_close_internal+0x26c>
 8009122:	4b16      	ldr	r3, [pc, #88]	@ (800917c <lwip_netconn_do_close_internal+0x2b8>)
 8009124:	f240 4241 	movw	r2, #1089	@ 0x441
 8009128:	4915      	ldr	r1, [pc, #84]	@ (8009180 <lwip_netconn_do_close_internal+0x2bc>)
 800912a:	4816      	ldr	r0, [pc, #88]	@ (8009184 <lwip_netconn_do_close_internal+0x2c0>)
 800912c:	f00c f89a 	bl	8015264 <iprintf>
    if (shut_tx) {
 8009130:	7b7b      	ldrb	r3, [r7, #13]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009136:	4914      	ldr	r1, [pc, #80]	@ (8009188 <lwip_netconn_do_close_internal+0x2c4>)
 8009138:	6938      	ldr	r0, [r7, #16]
 800913a:	f004 fa09 	bl	800d550 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800913e:	2201      	movs	r2, #1
 8009140:	4912      	ldr	r1, [pc, #72]	@ (800918c <lwip_netconn_do_close_internal+0x2c8>)
 8009142:	6938      	ldr	r0, [r7, #16]
 8009144:	f004 fa60 	bl	800d608 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009148:	4911      	ldr	r1, [pc, #68]	@ (8009190 <lwip_netconn_do_close_internal+0x2cc>)
 800914a:	6938      	ldr	r0, [r7, #16]
 800914c:	f004 fa22 	bl	800d594 <tcp_err>
    tcp_arg(tpcb, conn);
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	6938      	ldr	r0, [r7, #16]
 8009154:	f004 f9c8 	bl	800d4e8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <lwip_netconn_do_close_internal+0x2aa>
 8009160:	4b06      	ldr	r3, [pc, #24]	@ (800917c <lwip_netconn_do_close_internal+0x2b8>)
 8009162:	f240 424d 	movw	r2, #1101	@ 0x44d
 8009166:	490b      	ldr	r1, [pc, #44]	@ (8009194 <lwip_netconn_do_close_internal+0x2d0>)
 8009168:	4806      	ldr	r0, [pc, #24]	@ (8009184 <lwip_netconn_do_close_internal+0x2c0>)
 800916a:	f00c f87b 	bl	8015264 <iprintf>
  return err;
 800916e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	0801665c 	.word	0x0801665c
 8009180:	08016998 	.word	0x08016998
 8009184:	080166a0 	.word	0x080166a0
 8009188:	0800873d 	.word	0x0800873d
 800918c:	08008675 	.word	0x08008675
 8009190:	080087e5 	.word	0x080087e5
 8009194:	080169bc 	.word	0x080169bc

08009198 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	785b      	ldrb	r3, [r3, #1]
 80091aa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00d      	beq.n	80091ce <lwip_netconn_do_delconn+0x36>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091bc:	2b10      	cmp	r3, #16
 80091be:	d006      	beq.n	80091ce <lwip_netconn_do_delconn+0x36>
 80091c0:	4b60      	ldr	r3, [pc, #384]	@ (8009344 <lwip_netconn_do_delconn+0x1ac>)
 80091c2:	f240 425e 	movw	r2, #1118	@ 0x45e
 80091c6:	4960      	ldr	r1, [pc, #384]	@ (8009348 <lwip_netconn_do_delconn+0x1b0>)
 80091c8:	4860      	ldr	r0, [pc, #384]	@ (800934c <lwip_netconn_do_delconn+0x1b4>)
 80091ca:	f00c f84b 	bl	8015264 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80091ce:	7afb      	ldrb	r3, [r7, #11]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <lwip_netconn_do_delconn+0x48>
 80091d4:	7afb      	ldrb	r3, [r7, #11]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d002      	beq.n	80091e0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d109      	bne.n	80091f4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d10a      	bne.n	80091fc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	7f1b      	ldrb	r3, [r3, #28]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d103      	bne.n	80091fc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	22fb      	movs	r2, #251	@ 0xfb
 80091f8:	711a      	strb	r2, [r3, #4]
 80091fa:	e097      	b.n	800932c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d10d      	bne.n	800921e <lwip_netconn_do_delconn+0x86>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	7f1b      	ldrb	r3, [r3, #28]
 8009208:	f003 0304 	and.w	r3, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <lwip_netconn_do_delconn+0x86>
 8009210:	4b4c      	ldr	r3, [pc, #304]	@ (8009344 <lwip_netconn_do_delconn+0x1ac>)
 8009212:	f240 427a 	movw	r2, #1146	@ 0x47a
 8009216:	494e      	ldr	r1, [pc, #312]	@ (8009350 <lwip_netconn_do_delconn+0x1b8>)
 8009218:	484c      	ldr	r0, [pc, #304]	@ (800934c <lwip_netconn_do_delconn+0x1b4>)
 800921a:	f00c f823 	bl	8015264 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff fdcd 	bl	8008dc8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d05f      	beq.n	80092f8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009242:	2b10      	cmp	r3, #16
 8009244:	d00d      	beq.n	8009262 <lwip_netconn_do_delconn+0xca>
 8009246:	2b20      	cmp	r3, #32
 8009248:	d151      	bne.n	80092ee <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	4618      	mov	r0, r3
 800925c:	f009 f9c4 	bl	80125e8 <udp_remove>
          break;
 8009260:	e046      	b.n	80092f0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d006      	beq.n	800927a <lwip_netconn_do_delconn+0xe2>
 800926c:	4b35      	ldr	r3, [pc, #212]	@ (8009344 <lwip_netconn_do_delconn+0x1ac>)
 800926e:	f240 4294 	movw	r2, #1172	@ 0x494
 8009272:	4938      	ldr	r1, [pc, #224]	@ (8009354 <lwip_netconn_do_delconn+0x1bc>)
 8009274:	4835      	ldr	r0, [pc, #212]	@ (800934c <lwip_netconn_do_delconn+0x1b4>)
 8009276:	f00b fff5 	bl	8015264 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2204      	movs	r2, #4
 8009280:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2203      	movs	r2, #3
 8009286:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2100      	movs	r1, #0
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff fe14 	bl	8008ec4 <lwip_netconn_do_close_internal>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d04b      	beq.n	800933a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	d006      	beq.n	80092ba <lwip_netconn_do_delconn+0x122>
 80092ac:	4b25      	ldr	r3, [pc, #148]	@ (8009344 <lwip_netconn_do_delconn+0x1ac>)
 80092ae:	f240 429a 	movw	r2, #1178	@ 0x49a
 80092b2:	4929      	ldr	r1, [pc, #164]	@ (8009358 <lwip_netconn_do_delconn+0x1c0>)
 80092b4:	4825      	ldr	r0, [pc, #148]	@ (800934c <lwip_netconn_do_delconn+0x1b4>)
 80092b6:	f00b ffd5 	bl	8015264 <iprintf>
            UNLOCK_TCPIP_CORE();
 80092ba:	4828      	ldr	r0, [pc, #160]	@ (800935c <lwip_netconn_do_delconn+0x1c4>)
 80092bc:	f00b fe81 	bl	8014fc2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	330c      	adds	r3, #12
 80092c6:	2100      	movs	r1, #0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f00b fdd8 	bl	8014e7e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80092ce:	4823      	ldr	r0, [pc, #140]	@ (800935c <lwip_netconn_do_delconn+0x1c4>)
 80092d0:	f00b fe68 	bl	8014fa4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d02d      	beq.n	800933a <lwip_netconn_do_delconn+0x1a2>
 80092de:	4b19      	ldr	r3, [pc, #100]	@ (8009344 <lwip_netconn_do_delconn+0x1ac>)
 80092e0:	f240 429e 	movw	r2, #1182	@ 0x49e
 80092e4:	491c      	ldr	r1, [pc, #112]	@ (8009358 <lwip_netconn_do_delconn+0x1c0>)
 80092e6:	4819      	ldr	r0, [pc, #100]	@ (800934c <lwip_netconn_do_delconn+0x1b4>)
 80092e8:	f00b ffbc 	bl	8015264 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80092ec:	e025      	b.n	800933a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80092ee:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2200      	movs	r2, #0
 80092f6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d007      	beq.n	8009312 <lwip_netconn_do_delconn+0x17a>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	6810      	ldr	r0, [r2, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	2100      	movs	r1, #0
 8009310:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <lwip_netconn_do_delconn+0x194>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	6810      	ldr	r0, [r2, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	2102      	movs	r1, #2
 800932a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	330c      	adds	r3, #12
 8009332:	4618      	mov	r0, r3
 8009334:	f00b fdee 	bl	8014f14 <sys_sem_valid>
 8009338:	e000      	b.n	800933c <lwip_netconn_do_delconn+0x1a4>
          return;
 800933a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	0801665c 	.word	0x0801665c
 8009348:	080169cc 	.word	0x080169cc
 800934c:	080166a0 	.word	0x080166a0
 8009350:	080169e0 	.word	0x080169e0
 8009354:	08016a00 	.word	0x08016a00
 8009358:	08016a1c 	.word	0x08016a1c
 800935c:	20008d64 	.word	0x20008d64

08009360 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d025      	beq.n	80093c2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009380:	2b10      	cmp	r3, #16
 8009382:	d00e      	beq.n	80093a2 <lwip_netconn_do_bind+0x42>
 8009384:	2b20      	cmp	r3, #32
 8009386:	d119      	bne.n	80093bc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6858      	ldr	r0, [r3, #4]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6899      	ldr	r1, [r3, #8]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	461a      	mov	r2, r3
 8009398:	f009 f87e 	bl	8012498 <udp_bind>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]
        break;
 80093a0:	e011      	b.n	80093c6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6858      	ldr	r0, [r3, #4]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6899      	ldr	r1, [r3, #8]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	899b      	ldrh	r3, [r3, #12]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f003 f815 	bl	800c3e0 <tcp_bind>
 80093b6:	4603      	mov	r3, r0
 80093b8:	73fb      	strb	r3, [r7, #15]
        break;
 80093ba:	e004      	b.n	80093c6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80093bc:	23fa      	movs	r3, #250	@ 0xfa
 80093be:	73fb      	strb	r3, [r7, #15]
        break;
 80093c0:	e001      	b.n	80093c6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80093c2:	23fa      	movs	r3, #250	@ 0xfa
 80093c4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	7bfa      	ldrb	r2, [r7, #15]
 80093ca:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80093cc:	bf00      	nop
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d07f      	beq.n	80094ea <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093f4:	2b10      	cmp	r3, #16
 80093f6:	d175      	bne.n	80094e4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d165      	bne.n	80094ce <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	7d1b      	ldrb	r3, [r3, #20]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800940e:	23fa      	movs	r3, #250	@ 0xfa
 8009410:	72fb      	strb	r3, [r7, #11]
 8009412:	e06c      	b.n	80094ee <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009414:	23ff      	movs	r3, #255	@ 0xff
 8009416:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f107 020b 	add.w	r2, r7, #11
 8009422:	7cf9      	ldrb	r1, [r7, #19]
 8009424:	4618      	mov	r0, r3
 8009426:	f003 f893 	bl	800c550 <tcp_listen_with_backlog_and_err>
 800942a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d05d      	beq.n	80094ee <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3310      	adds	r3, #16
 8009438:	4618      	mov	r0, r3
 800943a:	f00b fcda 	bl	8014df2 <sys_mbox_valid>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00b      	beq.n	800945c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3310      	adds	r3, #16
 800944a:	4618      	mov	r0, r3
 800944c:	f00b fc4a 	bl	8014ce4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3310      	adds	r3, #16
 8009456:	4618      	mov	r0, r3
 8009458:	f00b fcdc 	bl	8014e14 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3314      	adds	r3, #20
 8009466:	4618      	mov	r0, r3
 8009468:	f00b fcc3 	bl	8014df2 <sys_mbox_valid>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d108      	bne.n	8009484 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3314      	adds	r3, #20
 8009478:	2106      	movs	r1, #6
 800947a:	4618      	mov	r0, r3
 800947c:	f00b fc10 	bl	8014ca0 <sys_mbox_new>
 8009480:	4603      	mov	r3, r0
 8009482:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009484:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d118      	bne.n	80094be <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2202      	movs	r2, #2
 8009492:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f004 f81d 	bl	800d4e8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	4912      	ldr	r1, [pc, #72]	@ (8009500 <lwip_netconn_do_listen+0x12c>)
 80094b6:	4618      	mov	r0, r3
 80094b8:	f004 f88e 	bl	800d5d8 <tcp_accept>
 80094bc:	e017      	b.n	80094ee <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f002 fe3c 	bl	800c13c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	605a      	str	r2, [r3, #4]
 80094cc:	e00f      	b.n	80094ee <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d102      	bne.n	80094de <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	72fb      	strb	r3, [r7, #11]
 80094dc:	e007      	b.n	80094ee <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80094de:	23f5      	movs	r3, #245	@ 0xf5
 80094e0:	72fb      	strb	r3, [r7, #11]
 80094e2:	e004      	b.n	80094ee <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80094e4:	23f0      	movs	r3, #240	@ 0xf0
 80094e6:	72fb      	strb	r3, [r7, #11]
 80094e8:	e001      	b.n	80094ee <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80094ea:	23f5      	movs	r3, #245	@ 0xf5
 80094ec:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80094ee:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80094f6:	bf00      	nop
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	080089e1 	.word	0x080089e1

08009504 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	2200      	movs	r2, #0
 8009514:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d022      	beq.n	8009566 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800952a:	2b10      	cmp	r3, #16
 800952c:	d11b      	bne.n	8009566 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800953a:	d202      	bcs.n	8009542 <lwip_netconn_do_recv+0x3e>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	b29b      	uxth	r3, r3
 8009540:	e001      	b.n	8009546 <lwip_netconn_do_recv+0x42>
 8009542:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009546:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	89fa      	ldrh	r2, [r7, #14]
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f003 f900 	bl	800c758 <tcp_recved>
        remaining -= recved;
 8009558:	89fb      	ldrh	r3, [r7, #14]
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e6      	bne.n	8009534 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009566:	bf00      	nop
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800957c:	2300      	movs	r3, #0
 800957e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <lwip_netconn_do_writemore+0x24>
 8009586:	4b96      	ldr	r3, [pc, #600]	@ (80097e0 <lwip_netconn_do_writemore+0x270>)
 8009588:	f240 6273 	movw	r2, #1651	@ 0x673
 800958c:	4995      	ldr	r1, [pc, #596]	@ (80097e4 <lwip_netconn_do_writemore+0x274>)
 800958e:	4896      	ldr	r0, [pc, #600]	@ (80097e8 <lwip_netconn_do_writemore+0x278>)
 8009590:	f00b fe68 	bl	8015264 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	785b      	ldrb	r3, [r3, #1]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d006      	beq.n	80095aa <lwip_netconn_do_writemore+0x3a>
 800959c:	4b90      	ldr	r3, [pc, #576]	@ (80097e0 <lwip_netconn_do_writemore+0x270>)
 800959e:	f240 6274 	movw	r2, #1652	@ 0x674
 80095a2:	4992      	ldr	r1, [pc, #584]	@ (80097ec <lwip_netconn_do_writemore+0x27c>)
 80095a4:	4890      	ldr	r0, [pc, #576]	@ (80097e8 <lwip_netconn_do_writemore+0x278>)
 80095a6:	f00b fe5d 	bl	8015264 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d106      	bne.n	80095c0 <lwip_netconn_do_writemore+0x50>
 80095b2:	4b8b      	ldr	r3, [pc, #556]	@ (80097e0 <lwip_netconn_do_writemore+0x270>)
 80095b4:	f240 6275 	movw	r2, #1653	@ 0x675
 80095b8:	498d      	ldr	r1, [pc, #564]	@ (80097f0 <lwip_netconn_do_writemore+0x280>)
 80095ba:	488b      	ldr	r0, [pc, #556]	@ (80097e8 <lwip_netconn_do_writemore+0x278>)
 80095bc:	f00b fe52 	bl	8015264 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <lwip_netconn_do_writemore+0x66>
 80095c8:	4b85      	ldr	r3, [pc, #532]	@ (80097e0 <lwip_netconn_do_writemore+0x270>)
 80095ca:	f240 6276 	movw	r2, #1654	@ 0x676
 80095ce:	4989      	ldr	r1, [pc, #548]	@ (80097f4 <lwip_netconn_do_writemore+0x284>)
 80095d0:	4885      	ldr	r0, [pc, #532]	@ (80097e8 <lwip_netconn_do_writemore+0x278>)
 80095d2:	f00b fe47 	bl	8015264 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	699a      	ldr	r2, [r3, #24]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d306      	bcc.n	80095f4 <lwip_netconn_do_writemore+0x84>
 80095e6:	4b7e      	ldr	r3, [pc, #504]	@ (80097e0 <lwip_netconn_do_writemore+0x270>)
 80095e8:	f240 6277 	movw	r2, #1655	@ 0x677
 80095ec:	4982      	ldr	r1, [pc, #520]	@ (80097f8 <lwip_netconn_do_writemore+0x288>)
 80095ee:	487e      	ldr	r0, [pc, #504]	@ (80097e8 <lwip_netconn_do_writemore+0x278>)
 80095f0:	f00b fe38 	bl	8015264 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	899b      	ldrh	r3, [r3, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d106      	bne.n	800960c <lwip_netconn_do_writemore+0x9c>
 80095fe:	4b78      	ldr	r3, [pc, #480]	@ (80097e0 <lwip_netconn_do_writemore+0x270>)
 8009600:	f240 6279 	movw	r2, #1657	@ 0x679
 8009604:	497d      	ldr	r1, [pc, #500]	@ (80097fc <lwip_netconn_do_writemore+0x28c>)
 8009606:	4878      	ldr	r0, [pc, #480]	@ (80097e8 <lwip_netconn_do_writemore+0x278>)
 8009608:	f00b fe2c 	bl	8015264 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	7f1b      	ldrb	r3, [r3, #28]
 8009612:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7f1b      	ldrb	r3, [r3, #28]
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d104      	bne.n	800962a <lwip_netconn_do_writemore+0xba>
 8009620:	7ebb      	ldrb	r3, [r7, #26]
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <lwip_netconn_do_writemore+0xbe>
 800962a:	2301      	movs	r3, #1
 800962c:	e000      	b.n	8009630 <lwip_netconn_do_writemore+0xc0>
 800962e:	2300      	movs	r3, #0
 8009630:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	4413      	add	r3, r2
 8009642:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800965c:	d307      	bcc.n	800966e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800965e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009662:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009664:	7ebb      	ldrb	r3, [r7, #26]
 8009666:	f043 0302 	orr.w	r3, r3, #2
 800966a:	76bb      	strb	r3, [r7, #26]
 800966c:	e001      	b.n	8009672 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800967a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800967c:	89fa      	ldrh	r2, [r7, #14]
 800967e:	8bbb      	ldrh	r3, [r7, #28]
 8009680:	429a      	cmp	r2, r3
 8009682:	d216      	bcs.n	80096b2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009684:	89fb      	ldrh	r3, [r7, #14]
 8009686:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009688:	7e3b      	ldrb	r3, [r7, #24]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00d      	beq.n	80096aa <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800968e:	8bbb      	ldrh	r3, [r7, #28]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10e      	bne.n	80096b2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d102      	bne.n	80096a4 <lwip_netconn_do_writemore+0x134>
 800969e:	f06f 0306 	mvn.w	r3, #6
 80096a2:	e000      	b.n	80096a6 <lwip_netconn_do_writemore+0x136>
 80096a4:	2300      	movs	r3, #0
 80096a6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80096a8:	e07d      	b.n	80097a6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80096aa:	7ebb      	ldrb	r3, [r7, #26]
 80096ac:	f043 0302 	orr.w	r3, r3, #2
 80096b0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	691a      	ldr	r2, [r3, #16]
 80096b8:	8bbb      	ldrh	r3, [r7, #28]
 80096ba:	441a      	add	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d906      	bls.n	80096d6 <lwip_netconn_do_writemore+0x166>
 80096c8:	4b45      	ldr	r3, [pc, #276]	@ (80097e0 <lwip_netconn_do_writemore+0x270>)
 80096ca:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80096ce:	494c      	ldr	r1, [pc, #304]	@ (8009800 <lwip_netconn_do_writemore+0x290>)
 80096d0:	4845      	ldr	r0, [pc, #276]	@ (80097e8 <lwip_netconn_do_writemore+0x278>)
 80096d2:	f00b fdc7 	bl	8015264 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80096d6:	8bbb      	ldrh	r3, [r7, #28]
 80096d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096dc:	4293      	cmp	r3, r2
 80096de:	d103      	bne.n	80096e8 <lwip_netconn_do_writemore+0x178>
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096e6:	d209      	bcs.n	80096fc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80096ec:	8bba      	ldrh	r2, [r7, #28]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d10b      	bne.n	800970a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	899b      	ldrh	r3, [r3, #12]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d906      	bls.n	800970a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80096fc:	2301      	movs	r3, #1
 80096fe:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009700:	7ebb      	ldrb	r3, [r7, #26]
 8009702:	f043 0302 	orr.w	r3, r3, #2
 8009706:	76bb      	strb	r3, [r7, #26]
 8009708:	e001      	b.n	800970e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6858      	ldr	r0, [r3, #4]
 8009712:	7ebb      	ldrb	r3, [r7, #26]
 8009714:	8bba      	ldrh	r2, [r7, #28]
 8009716:	6979      	ldr	r1, [r7, #20]
 8009718:	f006 fe22 	bl	8010360 <tcp_write>
 800971c:	4603      	mov	r3, r0
 800971e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009720:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d12c      	bne.n	8009782 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	6999      	ldr	r1, [r3, #24]
 800972e:	8bba      	ldrh	r2, [r7, #28]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	440a      	add	r2, r1
 8009736:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	6919      	ldr	r1, [r3, #16]
 800973e:	8bba      	ldrh	r2, [r7, #28]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	440a      	add	r2, r1
 8009746:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	691a      	ldr	r2, [r3, #16]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d113      	bne.n	8009782 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	899a      	ldrh	r2, [r3, #12]
 8009760:	3a01      	subs	r2, #1
 8009762:	b292      	uxth	r2, r2
 8009764:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	899b      	ldrh	r3, [r3, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	3208      	adds	r2, #8
 8009778:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	2200      	movs	r2, #0
 8009780:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009782:	7e7b      	ldrb	r3, [r7, #25]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <lwip_netconn_do_writemore+0x222>
 8009788:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800978c:	2b00      	cmp	r3, #0
 800978e:	f43f af50 	beq.w	8009632 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d004      	beq.n	80097a4 <lwip_netconn_do_writemore+0x234>
 800979a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a2:	d146      	bne.n	8009832 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80097a4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80097a6:	7e3b      	ldrb	r3, [r7, #24]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d02b      	beq.n	8009804 <lwip_netconn_do_writemore+0x294>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	699a      	ldr	r2, [r3, #24]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d223      	bcs.n	8009804 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <lwip_netconn_do_writemore+0x260>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c8:	2200      	movs	r2, #0
 80097ca:	2103      	movs	r1, #3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	7f1b      	ldrb	r3, [r3, #28]
 80097d4:	f043 0310 	orr.w	r3, r3, #16
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	771a      	strb	r2, [r3, #28]
 80097de:	e028      	b.n	8009832 <lwip_netconn_do_writemore+0x2c2>
 80097e0:	0801665c 	.word	0x0801665c
 80097e4:	080167b4 	.word	0x080167b4
 80097e8:	080166a0 	.word	0x080166a0
 80097ec:	08016abc 	.word	0x08016abc
 80097f0:	080167c4 	.word	0x080167c4
 80097f4:	08016adc 	.word	0x08016adc
 80097f8:	08016af4 	.word	0x08016af4
 80097fc:	08016b34 	.word	0x08016b34
 8009800:	08016b5c 	.word	0x08016b5c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800980c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009810:	d305      	bcc.n	800981e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800981a:	2b04      	cmp	r3, #4
 800981c:	d909      	bls.n	8009832 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <lwip_netconn_do_writemore+0x2c2>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982a:	2200      	movs	r2, #0
 800982c:	2103      	movs	r1, #3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009832:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d11d      	bne.n	8009876 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	429a      	cmp	r2, r3
 8009848:	d002      	beq.n	8009850 <lwip_netconn_do_writemore+0x2e0>
 800984a:	7e3b      	ldrb	r3, [r7, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009850:	2301      	movs	r3, #1
 8009852:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	4618      	mov	r0, r3
 800985a:	f007 fb6b 	bl	8010f34 <tcp_output>
 800985e:	4603      	mov	r3, r0
 8009860:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009862:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009866:	f113 0f04 	cmn.w	r3, #4
 800986a:	d12c      	bne.n	80098c6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800986c:	7b3b      	ldrb	r3, [r7, #12]
 800986e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009870:	2301      	movs	r3, #1
 8009872:	76fb      	strb	r3, [r7, #27]
 8009874:	e027      	b.n	80098c6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009876:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987e:	d120      	bne.n	80098c2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	4618      	mov	r0, r3
 8009886:	f007 fb55 	bl	8010f34 <tcp_output>
 800988a:	4603      	mov	r3, r0
 800988c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800988e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009892:	f113 0f04 	cmn.w	r3, #4
 8009896:	d104      	bne.n	80098a2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009898:	7b7b      	ldrb	r3, [r7, #13]
 800989a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800989c:	2301      	movs	r3, #1
 800989e:	76fb      	strb	r3, [r7, #27]
 80098a0:	e011      	b.n	80098c6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80098a2:	7e3b      	ldrb	r3, [r7, #24]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00e      	beq.n	80098c6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d102      	bne.n	80098b8 <lwip_netconn_do_writemore+0x348>
 80098b2:	f06f 0306 	mvn.w	r3, #6
 80098b6:	e000      	b.n	80098ba <lwip_netconn_do_writemore+0x34a>
 80098b8:	2300      	movs	r3, #0
 80098ba:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80098bc:	2301      	movs	r3, #1
 80098be:	76fb      	strb	r3, [r7, #27]
 80098c0:	e001      	b.n	80098c6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80098c2:	2301      	movs	r3, #1
 80098c4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80098c6:	7efb      	ldrb	r3, [r7, #27]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d015      	beq.n	80098f8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330c      	adds	r3, #12
 80098d4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	7ffa      	ldrb	r2, [r7, #31]
 80098dc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80098f0:	68b8      	ldr	r0, [r7, #8]
 80098f2:	f00b faf5 	bl	8014ee0 <sys_sem_signal>
 80098f6:	e002      	b.n	80098fe <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80098f8:	f04f 33ff 	mov.w	r3, #4294967295
 80098fc:	e000      	b.n	8009900 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3720      	adds	r7, #32
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fd1c 	bl	8008356 <netconn_err>
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d166      	bne.n	80099f8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009934:	2b10      	cmp	r3, #16
 8009936:	d15d      	bne.n	80099f4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009942:	23fb      	movs	r3, #251	@ 0xfb
 8009944:	73fb      	strb	r3, [r7, #15]
 8009946:	e057      	b.n	80099f8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d04d      	beq.n	80099ee <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2201      	movs	r2, #1
 8009958:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d006      	beq.n	8009972 <lwip_netconn_do_write+0x6a>
 8009964:	4b28      	ldr	r3, [pc, #160]	@ (8009a08 <lwip_netconn_do_write+0x100>)
 8009966:	f240 7223 	movw	r2, #1827	@ 0x723
 800996a:	4928      	ldr	r1, [pc, #160]	@ (8009a0c <lwip_netconn_do_write+0x104>)
 800996c:	4828      	ldr	r0, [pc, #160]	@ (8009a10 <lwip_netconn_do_write+0x108>)
 800996e:	f00b fc79 	bl	8015264 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d106      	bne.n	8009988 <lwip_netconn_do_write+0x80>
 800997a:	4b23      	ldr	r3, [pc, #140]	@ (8009a08 <lwip_netconn_do_write+0x100>)
 800997c:	f240 7224 	movw	r2, #1828	@ 0x724
 8009980:	4924      	ldr	r1, [pc, #144]	@ (8009a14 <lwip_netconn_do_write+0x10c>)
 8009982:	4823      	ldr	r0, [pc, #140]	@ (8009a10 <lwip_netconn_do_write+0x108>)
 8009984:	f00b fc6e 	bl	8015264 <iprintf>
        msg->conn->current_msg = msg;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2100      	movs	r1, #0
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff fdea 	bl	8009570 <lwip_netconn_do_writemore>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d02e      	beq.n	8009a00 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	785b      	ldrb	r3, [r3, #1]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d006      	beq.n	80099ba <lwip_netconn_do_write+0xb2>
 80099ac:	4b16      	ldr	r3, [pc, #88]	@ (8009a08 <lwip_netconn_do_write+0x100>)
 80099ae:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80099b2:	4919      	ldr	r1, [pc, #100]	@ (8009a18 <lwip_netconn_do_write+0x110>)
 80099b4:	4816      	ldr	r0, [pc, #88]	@ (8009a10 <lwip_netconn_do_write+0x108>)
 80099b6:	f00b fc55 	bl	8015264 <iprintf>
          UNLOCK_TCPIP_CORE();
 80099ba:	4818      	ldr	r0, [pc, #96]	@ (8009a1c <lwip_netconn_do_write+0x114>)
 80099bc:	f00b fb01 	bl	8014fc2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	f00b fa58 	bl	8014e7e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80099ce:	4813      	ldr	r0, [pc, #76]	@ (8009a1c <lwip_netconn_do_write+0x114>)
 80099d0:	f00b fae8 	bl	8014fa4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d110      	bne.n	8009a00 <lwip_netconn_do_write+0xf8>
 80099de:	4b0a      	ldr	r3, [pc, #40]	@ (8009a08 <lwip_netconn_do_write+0x100>)
 80099e0:	f240 722c 	movw	r2, #1836	@ 0x72c
 80099e4:	490c      	ldr	r1, [pc, #48]	@ (8009a18 <lwip_netconn_do_write+0x110>)
 80099e6:	480a      	ldr	r0, [pc, #40]	@ (8009a10 <lwip_netconn_do_write+0x108>)
 80099e8:	f00b fc3c 	bl	8015264 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80099ec:	e008      	b.n	8009a00 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80099ee:	23f5      	movs	r3, #245	@ 0xf5
 80099f0:	73fb      	strb	r3, [r7, #15]
 80099f2:	e001      	b.n	80099f8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80099f4:	23fa      	movs	r3, #250	@ 0xfa
 80099f6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	7bfa      	ldrb	r2, [r7, #15]
 80099fc:	711a      	strb	r2, [r3, #4]
 80099fe:	e000      	b.n	8009a02 <lwip_netconn_do_write+0xfa>
        return;
 8009a00:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	0801665c 	.word	0x0801665c
 8009a0c:	08016a00 	.word	0x08016a00
 8009a10:	080166a0 	.word	0x080166a0
 8009a14:	08016b88 	.word	0x08016b88
 8009a18:	08016a1c 	.word	0x08016a1c
 8009a1c:	20008d64 	.word	0x20008d64

08009a20 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d069      	beq.n	8009b12 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a48:	2b10      	cmp	r3, #16
 8009a4a:	d162      	bne.n	8009b12 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d002      	beq.n	8009a5a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d05b      	beq.n	8009b12 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009a5a:	7afb      	ldrb	r3, [r7, #11]
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d103      	bne.n	8009a68 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	22f5      	movs	r2, #245	@ 0xf5
 8009a64:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009a66:	e059      	b.n	8009b1c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d103      	bne.n	8009a76 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	22fb      	movs	r2, #251	@ 0xfb
 8009a72:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009a74:	e052      	b.n	8009b1c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	7a1b      	ldrb	r3, [r3, #8]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d004      	beq.n	8009a8c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff f99e 	bl	8008dc8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d006      	beq.n	8009aa4 <lwip_netconn_do_close+0x84>
 8009a96:	4b23      	ldr	r3, [pc, #140]	@ (8009b24 <lwip_netconn_do_close+0x104>)
 8009a98:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8009a9c:	4922      	ldr	r1, [pc, #136]	@ (8009b28 <lwip_netconn_do_close+0x108>)
 8009a9e:	4823      	ldr	r0, [pc, #140]	@ (8009b2c <lwip_netconn_do_close+0x10c>)
 8009aa0:	f00b fbe0 	bl	8015264 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2204      	movs	r2, #4
 8009aaa:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2100      	movs	r1, #0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff fa02 	bl	8008ec4 <lwip_netconn_do_close_internal>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d029      	beq.n	8009b1a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d006      	beq.n	8009ade <lwip_netconn_do_close+0xbe>
 8009ad0:	4b14      	ldr	r3, [pc, #80]	@ (8009b24 <lwip_netconn_do_close+0x104>)
 8009ad2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8009ad6:	4916      	ldr	r1, [pc, #88]	@ (8009b30 <lwip_netconn_do_close+0x110>)
 8009ad8:	4814      	ldr	r0, [pc, #80]	@ (8009b2c <lwip_netconn_do_close+0x10c>)
 8009ada:	f00b fbc3 	bl	8015264 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009ade:	4815      	ldr	r0, [pc, #84]	@ (8009b34 <lwip_netconn_do_close+0x114>)
 8009ae0:	f00b fa6f 	bl	8014fc2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	330c      	adds	r3, #12
 8009aea:	2100      	movs	r1, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f00b f9c6 	bl	8014e7e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009af2:	4810      	ldr	r0, [pc, #64]	@ (8009b34 <lwip_netconn_do_close+0x114>)
 8009af4:	f00b fa56 	bl	8014fa4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	785b      	ldrb	r3, [r3, #1]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <lwip_netconn_do_close+0xfa>
 8009b02:	4b08      	ldr	r3, [pc, #32]	@ (8009b24 <lwip_netconn_do_close+0x104>)
 8009b04:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8009b08:	4909      	ldr	r1, [pc, #36]	@ (8009b30 <lwip_netconn_do_close+0x110>)
 8009b0a:	4808      	ldr	r0, [pc, #32]	@ (8009b2c <lwip_netconn_do_close+0x10c>)
 8009b0c:	f00b fbaa 	bl	8015264 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009b10:	e003      	b.n	8009b1a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	22f5      	movs	r2, #245	@ 0xf5
 8009b16:	711a      	strb	r2, [r3, #4]
 8009b18:	e000      	b.n	8009b1c <lwip_netconn_do_close+0xfc>
      return;
 8009b1a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	0801665c 	.word	0x0801665c
 8009b28:	08016a00 	.word	0x08016a00
 8009b2c:	080166a0 	.word	0x080166a0
 8009b30:	08016a1c 	.word	0x08016a1c
 8009b34:	20008d64 	.word	0x20008d64

08009b38 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d013      	beq.n	8009b6e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 fe48 	bl	800b7e8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	605a      	str	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	2006      	movs	r0, #6
 8009b6a:	f000 ff99 	bl	800aaa0 <memp_free>
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d108      	bne.n	8009b9c <netbuf_data+0x24>
 8009b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf8 <netbuf_data+0x80>)
 8009b8c:	22c6      	movs	r2, #198	@ 0xc6
 8009b8e:	491b      	ldr	r1, [pc, #108]	@ (8009bfc <netbuf_data+0x84>)
 8009b90:	481b      	ldr	r0, [pc, #108]	@ (8009c00 <netbuf_data+0x88>)
 8009b92:	f00b fb67 	bl	8015264 <iprintf>
 8009b96:	f06f 030f 	mvn.w	r3, #15
 8009b9a:	e029      	b.n	8009bf0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d108      	bne.n	8009bb4 <netbuf_data+0x3c>
 8009ba2:	4b15      	ldr	r3, [pc, #84]	@ (8009bf8 <netbuf_data+0x80>)
 8009ba4:	22c7      	movs	r2, #199	@ 0xc7
 8009ba6:	4917      	ldr	r1, [pc, #92]	@ (8009c04 <netbuf_data+0x8c>)
 8009ba8:	4815      	ldr	r0, [pc, #84]	@ (8009c00 <netbuf_data+0x88>)
 8009baa:	f00b fb5b 	bl	8015264 <iprintf>
 8009bae:	f06f 030f 	mvn.w	r3, #15
 8009bb2:	e01d      	b.n	8009bf0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d108      	bne.n	8009bcc <netbuf_data+0x54>
 8009bba:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf8 <netbuf_data+0x80>)
 8009bbc:	22c8      	movs	r2, #200	@ 0xc8
 8009bbe:	4912      	ldr	r1, [pc, #72]	@ (8009c08 <netbuf_data+0x90>)
 8009bc0:	480f      	ldr	r0, [pc, #60]	@ (8009c00 <netbuf_data+0x88>)
 8009bc2:	f00b fb4f 	bl	8015264 <iprintf>
 8009bc6:	f06f 030f 	mvn.w	r3, #15
 8009bca:	e011      	b.n	8009bf0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <netbuf_data+0x62>
    return ERR_BUF;
 8009bd4:	f06f 0301 	mvn.w	r3, #1
 8009bd8:	e00a      	b.n	8009bf0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	895a      	ldrh	r2, [r3, #10]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	08016bb4 	.word	0x08016bb4
 8009bfc:	08016cbc 	.word	0x08016cbc
 8009c00:	08016c04 	.word	0x08016c04
 8009c04:	08016cd8 	.word	0x08016cd8
 8009c08:	08016cf8 	.word	0x08016cf8

08009c0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009c16:	f008 fa45 	bl	80120a4 <sys_timeouts_sleeptime>
 8009c1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	d10b      	bne.n	8009c3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009c24:	4813      	ldr	r0, [pc, #76]	@ (8009c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c26:	f00b f9cc 	bl	8014fc2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f00b f884 	bl	8014d3c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009c34:	480f      	ldr	r0, [pc, #60]	@ (8009c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c36:	f00b f9b5 	bl	8014fa4 <sys_mutex_lock>
    return;
 8009c3a:	e018      	b.n	8009c6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009c42:	f008 f9f5 	bl	8012030 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009c46:	e7e6      	b.n	8009c16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009c48:	480a      	ldr	r0, [pc, #40]	@ (8009c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c4a:	f00b f9ba 	bl	8014fc2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f00b f872 	bl	8014d3c <sys_arch_mbox_fetch>
 8009c58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009c5a:	4806      	ldr	r0, [pc, #24]	@ (8009c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c5c:	f00b f9a2 	bl	8014fa4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c66:	d102      	bne.n	8009c6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009c68:	f008 f9e2 	bl	8012030 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009c6c:	e7d3      	b.n	8009c16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20008d64 	.word	0x20008d64

08009c78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009c80:	4810      	ldr	r0, [pc, #64]	@ (8009cc4 <tcpip_thread+0x4c>)
 8009c82:	f00b f98f 	bl	8014fa4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009c86:	4b10      	ldr	r3, [pc, #64]	@ (8009cc8 <tcpip_thread+0x50>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d005      	beq.n	8009c9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc8 <tcpip_thread+0x50>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a0e      	ldr	r2, [pc, #56]	@ (8009ccc <tcpip_thread+0x54>)
 8009c94:	6812      	ldr	r2, [r2, #0]
 8009c96:	4610      	mov	r0, r2
 8009c98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c9a:	f107 030c 	add.w	r3, r7, #12
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	480b      	ldr	r0, [pc, #44]	@ (8009cd0 <tcpip_thread+0x58>)
 8009ca2:	f7ff ffb3 	bl	8009c0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d106      	bne.n	8009cba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009cac:	4b09      	ldr	r3, [pc, #36]	@ (8009cd4 <tcpip_thread+0x5c>)
 8009cae:	2291      	movs	r2, #145	@ 0x91
 8009cb0:	4909      	ldr	r1, [pc, #36]	@ (8009cd8 <tcpip_thread+0x60>)
 8009cb2:	480a      	ldr	r0, [pc, #40]	@ (8009cdc <tcpip_thread+0x64>)
 8009cb4:	f00b fad6 	bl	8015264 <iprintf>
      continue;
 8009cb8:	e003      	b.n	8009cc2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 f80f 	bl	8009ce0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009cc2:	e7ea      	b.n	8009c9a <tcpip_thread+0x22>
 8009cc4:	20008d64 	.word	0x20008d64
 8009cc8:	20008d58 	.word	0x20008d58
 8009ccc:	20008d5c 	.word	0x20008d5c
 8009cd0:	20008d60 	.word	0x20008d60
 8009cd4:	08016d4c 	.word	0x08016d4c
 8009cd8:	08016d7c 	.word	0x08016d7c
 8009cdc:	08016d9c 	.word	0x08016d9c

08009ce0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d026      	beq.n	8009d3e <tcpip_thread_handle_msg+0x5e>
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	dc2b      	bgt.n	8009d4c <tcpip_thread_handle_msg+0x6c>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <tcpip_thread_handle_msg+0x1e>
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d015      	beq.n	8009d28 <tcpip_thread_handle_msg+0x48>
 8009cfc:	e026      	b.n	8009d4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6850      	ldr	r0, [r2, #4]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6892      	ldr	r2, [r2, #8]
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	4798      	blx	r3
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d004      	beq.n	8009d1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 fd65 	bl	800b7e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	2009      	movs	r0, #9
 8009d22:	f000 febd 	bl	800aaa0 <memp_free>
      break;
 8009d26:	e018      	b.n	8009d5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	6892      	ldr	r2, [r2, #8]
 8009d30:	4610      	mov	r0, r2
 8009d32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	2008      	movs	r0, #8
 8009d38:	f000 feb2 	bl	800aaa0 <memp_free>
      break;
 8009d3c:	e00d      	b.n	8009d5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	6892      	ldr	r2, [r2, #8]
 8009d46:	4610      	mov	r0, r2
 8009d48:	4798      	blx	r3
      break;
 8009d4a:	e006      	b.n	8009d5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d4c:	4b05      	ldr	r3, [pc, #20]	@ (8009d64 <tcpip_thread_handle_msg+0x84>)
 8009d4e:	22cf      	movs	r2, #207	@ 0xcf
 8009d50:	4905      	ldr	r1, [pc, #20]	@ (8009d68 <tcpip_thread_handle_msg+0x88>)
 8009d52:	4806      	ldr	r0, [pc, #24]	@ (8009d6c <tcpip_thread_handle_msg+0x8c>)
 8009d54:	f00b fa86 	bl	8015264 <iprintf>
      break;
 8009d58:	bf00      	nop
  }
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	08016d4c 	.word	0x08016d4c
 8009d68:	08016d7c 	.word	0x08016d7c
 8009d6c:	08016d9c 	.word	0x08016d9c

08009d70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009d7c:	481a      	ldr	r0, [pc, #104]	@ (8009de8 <tcpip_inpkt+0x78>)
 8009d7e:	f00b f838 	bl	8014df2 <sys_mbox_valid>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d105      	bne.n	8009d94 <tcpip_inpkt+0x24>
 8009d88:	4b18      	ldr	r3, [pc, #96]	@ (8009dec <tcpip_inpkt+0x7c>)
 8009d8a:	22fc      	movs	r2, #252	@ 0xfc
 8009d8c:	4918      	ldr	r1, [pc, #96]	@ (8009df0 <tcpip_inpkt+0x80>)
 8009d8e:	4819      	ldr	r0, [pc, #100]	@ (8009df4 <tcpip_inpkt+0x84>)
 8009d90:	f00b fa68 	bl	8015264 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009d94:	2009      	movs	r0, #9
 8009d96:	f000 fe0d 	bl	800a9b4 <memp_malloc>
 8009d9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295
 8009da6:	e01a      	b.n	8009dde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2200      	movs	r2, #0
 8009dac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009dc0:	6979      	ldr	r1, [r7, #20]
 8009dc2:	4809      	ldr	r0, [pc, #36]	@ (8009de8 <tcpip_inpkt+0x78>)
 8009dc4:	f00a ffa0 	bl	8014d08 <sys_mbox_trypost>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d006      	beq.n	8009ddc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009dce:	6979      	ldr	r1, [r7, #20]
 8009dd0:	2009      	movs	r0, #9
 8009dd2:	f000 fe65 	bl	800aaa0 <memp_free>
    return ERR_MEM;
 8009dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dda:	e000      	b.n	8009dde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009ddc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	20008d60 	.word	0x20008d60
 8009dec:	08016d4c 	.word	0x08016d4c
 8009df0:	08016dc4 	.word	0x08016dc4
 8009df4:	08016d9c 	.word	0x08016d9c

08009df8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009e08:	f003 0318 	and.w	r3, r3, #24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d006      	beq.n	8009e1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009e10:	4a08      	ldr	r2, [pc, #32]	@ (8009e34 <tcpip_input+0x3c>)
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff ffab 	bl	8009d70 <tcpip_inpkt>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	e005      	b.n	8009e2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009e1e:	4a06      	ldr	r2, [pc, #24]	@ (8009e38 <tcpip_input+0x40>)
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff ffa4 	bl	8009d70 <tcpip_inpkt>
 8009e28:	4603      	mov	r3, r0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	08014af5 	.word	0x08014af5
 8009e38:	080139fd 	.word	0x080139fd

08009e3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009e46:	4819      	ldr	r0, [pc, #100]	@ (8009eac <tcpip_try_callback+0x70>)
 8009e48:	f00a ffd3 	bl	8014df2 <sys_mbox_valid>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d106      	bne.n	8009e60 <tcpip_try_callback+0x24>
 8009e52:	4b17      	ldr	r3, [pc, #92]	@ (8009eb0 <tcpip_try_callback+0x74>)
 8009e54:	f240 125d 	movw	r2, #349	@ 0x15d
 8009e58:	4916      	ldr	r1, [pc, #88]	@ (8009eb4 <tcpip_try_callback+0x78>)
 8009e5a:	4817      	ldr	r0, [pc, #92]	@ (8009eb8 <tcpip_try_callback+0x7c>)
 8009e5c:	f00b fa02 	bl	8015264 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009e60:	2008      	movs	r0, #8
 8009e62:	f000 fda7 	bl	800a9b4 <memp_malloc>
 8009e66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d102      	bne.n	8009e74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e72:	e017      	b.n	8009ea4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2201      	movs	r2, #1
 8009e78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	4808      	ldr	r0, [pc, #32]	@ (8009eac <tcpip_try_callback+0x70>)
 8009e8a:	f00a ff3d 	bl	8014d08 <sys_mbox_trypost>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e94:	68f9      	ldr	r1, [r7, #12]
 8009e96:	2008      	movs	r0, #8
 8009e98:	f000 fe02 	bl	800aaa0 <memp_free>
    return ERR_MEM;
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea0:	e000      	b.n	8009ea4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	20008d60 	.word	0x20008d60
 8009eb0:	08016d4c 	.word	0x08016d4c
 8009eb4:	08016dc4 	.word	0x08016dc4
 8009eb8:	08016d9c 	.word	0x08016d9c

08009ebc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009ec8:	4806      	ldr	r0, [pc, #24]	@ (8009ee4 <tcpip_send_msg_wait_sem+0x28>)
 8009eca:	f00b f86b 	bl	8014fa4 <sys_mutex_lock>
  fn(apimsg);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	68b8      	ldr	r0, [r7, #8]
 8009ed2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009ed4:	4803      	ldr	r0, [pc, #12]	@ (8009ee4 <tcpip_send_msg_wait_sem+0x28>)
 8009ed6:	f00b f874 	bl	8014fc2 <sys_mutex_unlock>
  return ERR_OK;
 8009eda:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20008d64 	.word	0x20008d64

08009ee8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af02      	add	r7, sp, #8
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009ef2:	f000 f8b9 	bl	800a068 <lwip_init>

  tcpip_init_done = initfunc;
 8009ef6:	4a17      	ldr	r2, [pc, #92]	@ (8009f54 <tcpip_init+0x6c>)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009efc:	4a16      	ldr	r2, [pc, #88]	@ (8009f58 <tcpip_init+0x70>)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009f02:	2106      	movs	r1, #6
 8009f04:	4815      	ldr	r0, [pc, #84]	@ (8009f5c <tcpip_init+0x74>)
 8009f06:	f00a fecb 	bl	8014ca0 <sys_mbox_new>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009f10:	4b13      	ldr	r3, [pc, #76]	@ (8009f60 <tcpip_init+0x78>)
 8009f12:	f240 2261 	movw	r2, #609	@ 0x261
 8009f16:	4913      	ldr	r1, [pc, #76]	@ (8009f64 <tcpip_init+0x7c>)
 8009f18:	4813      	ldr	r0, [pc, #76]	@ (8009f68 <tcpip_init+0x80>)
 8009f1a:	f00b f9a3 	bl	8015264 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009f1e:	4813      	ldr	r0, [pc, #76]	@ (8009f6c <tcpip_init+0x84>)
 8009f20:	f00b f824 	bl	8014f6c <sys_mutex_new>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d006      	beq.n	8009f38 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f60 <tcpip_init+0x78>)
 8009f2c:	f240 2265 	movw	r2, #613	@ 0x265
 8009f30:	490f      	ldr	r1, [pc, #60]	@ (8009f70 <tcpip_init+0x88>)
 8009f32:	480d      	ldr	r0, [pc, #52]	@ (8009f68 <tcpip_init+0x80>)
 8009f34:	f00b f996 	bl	8015264 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f40:	2200      	movs	r2, #0
 8009f42:	490c      	ldr	r1, [pc, #48]	@ (8009f74 <tcpip_init+0x8c>)
 8009f44:	480c      	ldr	r0, [pc, #48]	@ (8009f78 <tcpip_init+0x90>)
 8009f46:	f00b f849 	bl	8014fdc <sys_thread_new>
}
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20008d58 	.word	0x20008d58
 8009f58:	20008d5c 	.word	0x20008d5c
 8009f5c:	20008d60 	.word	0x20008d60
 8009f60:	08016d4c 	.word	0x08016d4c
 8009f64:	08016dd4 	.word	0x08016dd4
 8009f68:	08016d9c 	.word	0x08016d9c
 8009f6c:	20008d64 	.word	0x20008d64
 8009f70:	08016df8 	.word	0x08016df8
 8009f74:	08009c79 	.word	0x08009c79
 8009f78:	08016e1c 	.word	0x08016e1c

08009f7c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <fs_open+0x16>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d102      	bne.n	8009f98 <fs_open+0x1c>
    return ERR_ARG;
 8009f92:	f06f 030f 	mvn.w	r3, #15
 8009f96:	e028      	b.n	8009fea <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009f98:	4b16      	ldr	r3, [pc, #88]	@ (8009ff4 <fs_open+0x78>)
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e020      	b.n	8009fe0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6838      	ldr	r0, [r7, #0]
 8009fa6:	f7f6 f933 	bl	8000210 <strcmp>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d114      	bne.n	8009fda <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	68da      	ldr	r2, [r3, #12]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	7c1a      	ldrb	r2, [r3, #16]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e007      	b.n	8009fea <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1db      	bne.n	8009f9e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009fe6:	f06f 0305 	mvn.w	r3, #5
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	08022aa8 	.word	0x08022aa8

08009ff8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	021b      	lsls	r3, r3, #8
 800a01a:	b21a      	sxth	r2, r3
 800a01c:	88fb      	ldrh	r3, [r7, #6]
 800a01e:	0a1b      	lsrs	r3, r3, #8
 800a020:	b29b      	uxth	r3, r3
 800a022:	b21b      	sxth	r3, r3
 800a024:	4313      	orrs	r3, r2
 800a026:	b21b      	sxth	r3, r3
 800a028:	b29b      	uxth	r3, r3
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	061a      	lsls	r2, r3, #24
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	021b      	lsls	r3, r3, #8
 800a046:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a04a:	431a      	orrs	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	0a1b      	lsrs	r3, r3, #8
 800a050:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a054:	431a      	orrs	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	0e1b      	lsrs	r3, r3, #24
 800a05a:	4313      	orrs	r3, r2
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a072:	f00a ff6d 	bl	8014f50 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a076:	f000 f8d5 	bl	800a224 <mem_init>
  memp_init();
 800a07a:	f000 fc2d 	bl	800a8d8 <memp_init>
  pbuf_init();
  netif_init();
 800a07e:	f000 fd39 	bl	800aaf4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a082:	f008 f847 	bl	8012114 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a086:	f001 fe49 	bl	800bd1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a08a:	f007 ff89 	bl	8011fa0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a0a2:	4b05      	ldr	r3, [pc, #20]	@ (800a0b8 <ptr_to_mem+0x20>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	88fb      	ldrh	r3, [r7, #6]
 800a0a8:	4413      	add	r3, r2
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20008d80 	.word	0x20008d80

0800a0bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a0c4:	4b05      	ldr	r3, [pc, #20]	@ (800a0dc <mem_to_ptr+0x20>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	b29b      	uxth	r3, r3
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20008d80 	.word	0x20008d80

0800a0e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a0e0:	b590      	push	{r4, r7, lr}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a0e8:	4b45      	ldr	r3, [pc, #276]	@ (800a200 <plug_holes+0x120>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d206      	bcs.n	800a100 <plug_holes+0x20>
 800a0f2:	4b44      	ldr	r3, [pc, #272]	@ (800a204 <plug_holes+0x124>)
 800a0f4:	f240 12df 	movw	r2, #479	@ 0x1df
 800a0f8:	4943      	ldr	r1, [pc, #268]	@ (800a208 <plug_holes+0x128>)
 800a0fa:	4844      	ldr	r0, [pc, #272]	@ (800a20c <plug_holes+0x12c>)
 800a0fc:	f00b f8b2 	bl	8015264 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a100:	4b43      	ldr	r3, [pc, #268]	@ (800a210 <plug_holes+0x130>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d306      	bcc.n	800a118 <plug_holes+0x38>
 800a10a:	4b3e      	ldr	r3, [pc, #248]	@ (800a204 <plug_holes+0x124>)
 800a10c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a110:	4940      	ldr	r1, [pc, #256]	@ (800a214 <plug_holes+0x134>)
 800a112:	483e      	ldr	r0, [pc, #248]	@ (800a20c <plug_holes+0x12c>)
 800a114:	f00b f8a6 	bl	8015264 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	791b      	ldrb	r3, [r3, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d006      	beq.n	800a12e <plug_holes+0x4e>
 800a120:	4b38      	ldr	r3, [pc, #224]	@ (800a204 <plug_holes+0x124>)
 800a122:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a126:	493c      	ldr	r1, [pc, #240]	@ (800a218 <plug_holes+0x138>)
 800a128:	4838      	ldr	r0, [pc, #224]	@ (800a20c <plug_holes+0x12c>)
 800a12a:	f00b f89b 	bl	8015264 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a136:	d906      	bls.n	800a146 <plug_holes+0x66>
 800a138:	4b32      	ldr	r3, [pc, #200]	@ (800a204 <plug_holes+0x124>)
 800a13a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a13e:	4937      	ldr	r1, [pc, #220]	@ (800a21c <plug_holes+0x13c>)
 800a140:	4832      	ldr	r0, [pc, #200]	@ (800a20c <plug_holes+0x12c>)
 800a142:	f00b f88f 	bl	8015264 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff ffa4 	bl	800a098 <ptr_to_mem>
 800a150:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	429a      	cmp	r2, r3
 800a158:	d024      	beq.n	800a1a4 <plug_holes+0xc4>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	791b      	ldrb	r3, [r3, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d120      	bne.n	800a1a4 <plug_holes+0xc4>
 800a162:	4b2b      	ldr	r3, [pc, #172]	@ (800a210 <plug_holes+0x130>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d01b      	beq.n	800a1a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a16c:	4b2c      	ldr	r3, [pc, #176]	@ (800a220 <plug_holes+0x140>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	429a      	cmp	r2, r3
 800a174:	d102      	bne.n	800a17c <plug_holes+0x9c>
      lfree = mem;
 800a176:	4a2a      	ldr	r2, [pc, #168]	@ (800a220 <plug_holes+0x140>)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	881a      	ldrh	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a18c:	d00a      	beq.n	800a1a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff ff80 	bl	800a098 <ptr_to_mem>
 800a198:	4604      	mov	r4, r0
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff ff8e 	bl	800a0bc <mem_to_ptr>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	885b      	ldrh	r3, [r3, #2]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff ff75 	bl	800a098 <ptr_to_mem>
 800a1ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d01f      	beq.n	800a1f8 <plug_holes+0x118>
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	791b      	ldrb	r3, [r3, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d11b      	bne.n	800a1f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a1c0:	4b17      	ldr	r3, [pc, #92]	@ (800a220 <plug_holes+0x140>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d102      	bne.n	800a1d0 <plug_holes+0xf0>
      lfree = pmem;
 800a1ca:	4a15      	ldr	r2, [pc, #84]	@ (800a220 <plug_holes+0x140>)
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	881a      	ldrh	r2, [r3, #0]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a1e0:	d00a      	beq.n	800a1f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff ff56 	bl	800a098 <ptr_to_mem>
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	68b8      	ldr	r0, [r7, #8]
 800a1f0:	f7ff ff64 	bl	800a0bc <mem_to_ptr>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a1f8:	bf00      	nop
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd90      	pop	{r4, r7, pc}
 800a200:	20008d80 	.word	0x20008d80
 800a204:	08016e2c 	.word	0x08016e2c
 800a208:	08016e5c 	.word	0x08016e5c
 800a20c:	08016e74 	.word	0x08016e74
 800a210:	20008d84 	.word	0x20008d84
 800a214:	08016e9c 	.word	0x08016e9c
 800a218:	08016eb8 	.word	0x08016eb8
 800a21c:	08016ed4 	.word	0x08016ed4
 800a220:	20008d8c 	.word	0x20008d8c

0800a224 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a22a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2a0 <mem_init+0x7c>)
 800a22c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2a4 <mem_init+0x80>)
 800a22e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a230:	4b1b      	ldr	r3, [pc, #108]	@ (800a2a0 <mem_init+0x7c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a23c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a24a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800a24e:	f7ff ff23 	bl	800a098 <ptr_to_mem>
 800a252:	4603      	mov	r3, r0
 800a254:	4a14      	ldr	r2, [pc, #80]	@ (800a2a8 <mem_init+0x84>)
 800a256:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a258:	4b13      	ldr	r3, [pc, #76]	@ (800a2a8 <mem_init+0x84>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2201      	movs	r2, #1
 800a25e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a260:	4b11      	ldr	r3, [pc, #68]	@ (800a2a8 <mem_init+0x84>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a268:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a26a:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a8 <mem_init+0x84>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a272:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a274:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a0 <mem_init+0x7c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a0c      	ldr	r2, [pc, #48]	@ (800a2ac <mem_init+0x88>)
 800a27a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a27c:	480c      	ldr	r0, [pc, #48]	@ (800a2b0 <mem_init+0x8c>)
 800a27e:	f00a fe75 	bl	8014f6c <sys_mutex_new>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d006      	beq.n	800a296 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a288:	4b0a      	ldr	r3, [pc, #40]	@ (800a2b4 <mem_init+0x90>)
 800a28a:	f240 221f 	movw	r2, #543	@ 0x21f
 800a28e:	490a      	ldr	r1, [pc, #40]	@ (800a2b8 <mem_init+0x94>)
 800a290:	480a      	ldr	r0, [pc, #40]	@ (800a2bc <mem_init+0x98>)
 800a292:	f00a ffe7 	bl	8015264 <iprintf>
  }
}
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20008d80 	.word	0x20008d80
 800a2a4:	20010000 	.word	0x20010000
 800a2a8:	20008d84 	.word	0x20008d84
 800a2ac:	20008d8c 	.word	0x20008d8c
 800a2b0:	20008d88 	.word	0x20008d88
 800a2b4:	08016e2c 	.word	0x08016e2c
 800a2b8:	08016f00 	.word	0x08016f00
 800a2bc:	08016e74 	.word	0x08016e74

0800a2c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff fef7 	bl	800a0bc <mem_to_ptr>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff fede 	bl	800a098 <ptr_to_mem>
 800a2dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	885b      	ldrh	r3, [r3, #2]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff fed8 	bl	800a098 <ptr_to_mem>
 800a2e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a2f2:	d818      	bhi.n	800a326 <mem_link_valid+0x66>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	885b      	ldrh	r3, [r3, #2]
 800a2f8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a2fc:	d813      	bhi.n	800a326 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a302:	8afa      	ldrh	r2, [r7, #22]
 800a304:	429a      	cmp	r2, r3
 800a306:	d004      	beq.n	800a312 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	8afa      	ldrh	r2, [r7, #22]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d109      	bne.n	800a326 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a312:	4b08      	ldr	r3, [pc, #32]	@ (800a334 <mem_link_valid+0x74>)
 800a314:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d006      	beq.n	800a32a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	885b      	ldrh	r3, [r3, #2]
 800a320:	8afa      	ldrh	r2, [r7, #22]
 800a322:	429a      	cmp	r2, r3
 800a324:	d001      	beq.n	800a32a <mem_link_valid+0x6a>
    return 0;
 800a326:	2300      	movs	r3, #0
 800a328:	e000      	b.n	800a32c <mem_link_valid+0x6c>
  }
  return 1;
 800a32a:	2301      	movs	r3, #1
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	20008d84 	.word	0x20008d84

0800a338 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d070      	beq.n	800a428 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f003 0303 	and.w	r3, r3, #3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00d      	beq.n	800a36c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a350:	4b37      	ldr	r3, [pc, #220]	@ (800a430 <mem_free+0xf8>)
 800a352:	f240 2273 	movw	r2, #627	@ 0x273
 800a356:	4937      	ldr	r1, [pc, #220]	@ (800a434 <mem_free+0xfc>)
 800a358:	4837      	ldr	r0, [pc, #220]	@ (800a438 <mem_free+0x100>)
 800a35a:	f00a ff83 	bl	8015264 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a35e:	f00a fe63 	bl	8015028 <sys_arch_protect>
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f00a fe6d 	bl	8015044 <sys_arch_unprotect>
    return;
 800a36a:	e05e      	b.n	800a42a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3b08      	subs	r3, #8
 800a370:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a372:	4b32      	ldr	r3, [pc, #200]	@ (800a43c <mem_free+0x104>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d306      	bcc.n	800a38a <mem_free+0x52>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f103 020c 	add.w	r2, r3, #12
 800a382:	4b2f      	ldr	r3, [pc, #188]	@ (800a440 <mem_free+0x108>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d90d      	bls.n	800a3a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a38a:	4b29      	ldr	r3, [pc, #164]	@ (800a430 <mem_free+0xf8>)
 800a38c:	f240 227f 	movw	r2, #639	@ 0x27f
 800a390:	492c      	ldr	r1, [pc, #176]	@ (800a444 <mem_free+0x10c>)
 800a392:	4829      	ldr	r0, [pc, #164]	@ (800a438 <mem_free+0x100>)
 800a394:	f00a ff66 	bl	8015264 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a398:	f00a fe46 	bl	8015028 <sys_arch_protect>
 800a39c:	6138      	str	r0, [r7, #16]
 800a39e:	6938      	ldr	r0, [r7, #16]
 800a3a0:	f00a fe50 	bl	8015044 <sys_arch_unprotect>
    return;
 800a3a4:	e041      	b.n	800a42a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a3a6:	4828      	ldr	r0, [pc, #160]	@ (800a448 <mem_free+0x110>)
 800a3a8:	f00a fdfc 	bl	8014fa4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	791b      	ldrb	r3, [r3, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d110      	bne.n	800a3d6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a3b4:	4b1e      	ldr	r3, [pc, #120]	@ (800a430 <mem_free+0xf8>)
 800a3b6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a3ba:	4924      	ldr	r1, [pc, #144]	@ (800a44c <mem_free+0x114>)
 800a3bc:	481e      	ldr	r0, [pc, #120]	@ (800a438 <mem_free+0x100>)
 800a3be:	f00a ff51 	bl	8015264 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a3c2:	4821      	ldr	r0, [pc, #132]	@ (800a448 <mem_free+0x110>)
 800a3c4:	f00a fdfd 	bl	8014fc2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3c8:	f00a fe2e 	bl	8015028 <sys_arch_protect>
 800a3cc:	6178      	str	r0, [r7, #20]
 800a3ce:	6978      	ldr	r0, [r7, #20]
 800a3d0:	f00a fe38 	bl	8015044 <sys_arch_unprotect>
    return;
 800a3d4:	e029      	b.n	800a42a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a3d6:	69f8      	ldr	r0, [r7, #28]
 800a3d8:	f7ff ff72 	bl	800a2c0 <mem_link_valid>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d110      	bne.n	800a404 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a3e2:	4b13      	ldr	r3, [pc, #76]	@ (800a430 <mem_free+0xf8>)
 800a3e4:	f240 2295 	movw	r2, #661	@ 0x295
 800a3e8:	4919      	ldr	r1, [pc, #100]	@ (800a450 <mem_free+0x118>)
 800a3ea:	4813      	ldr	r0, [pc, #76]	@ (800a438 <mem_free+0x100>)
 800a3ec:	f00a ff3a 	bl	8015264 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a3f0:	4815      	ldr	r0, [pc, #84]	@ (800a448 <mem_free+0x110>)
 800a3f2:	f00a fde6 	bl	8014fc2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3f6:	f00a fe17 	bl	8015028 <sys_arch_protect>
 800a3fa:	61b8      	str	r0, [r7, #24]
 800a3fc:	69b8      	ldr	r0, [r7, #24]
 800a3fe:	f00a fe21 	bl	8015044 <sys_arch_unprotect>
    return;
 800a402:	e012      	b.n	800a42a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	2200      	movs	r2, #0
 800a408:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a40a:	4b12      	ldr	r3, [pc, #72]	@ (800a454 <mem_free+0x11c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69fa      	ldr	r2, [r7, #28]
 800a410:	429a      	cmp	r2, r3
 800a412:	d202      	bcs.n	800a41a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a414:	4a0f      	ldr	r2, [pc, #60]	@ (800a454 <mem_free+0x11c>)
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a41a:	69f8      	ldr	r0, [r7, #28]
 800a41c:	f7ff fe60 	bl	800a0e0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a420:	4809      	ldr	r0, [pc, #36]	@ (800a448 <mem_free+0x110>)
 800a422:	f00a fdce 	bl	8014fc2 <sys_mutex_unlock>
 800a426:	e000      	b.n	800a42a <mem_free+0xf2>
    return;
 800a428:	bf00      	nop
}
 800a42a:	3720      	adds	r7, #32
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	08016e2c 	.word	0x08016e2c
 800a434:	08016f1c 	.word	0x08016f1c
 800a438:	08016e74 	.word	0x08016e74
 800a43c:	20008d80 	.word	0x20008d80
 800a440:	20008d84 	.word	0x20008d84
 800a444:	08016f40 	.word	0x08016f40
 800a448:	20008d88 	.word	0x20008d88
 800a44c:	08016f5c 	.word	0x08016f5c
 800a450:	08016f84 	.word	0x08016f84
 800a454:	20008d8c 	.word	0x20008d8c

0800a458 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a464:	887b      	ldrh	r3, [r7, #2]
 800a466:	3303      	adds	r3, #3
 800a468:	b29b      	uxth	r3, r3
 800a46a:	f023 0303 	bic.w	r3, r3, #3
 800a46e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a470:	8bfb      	ldrh	r3, [r7, #30]
 800a472:	2b0b      	cmp	r3, #11
 800a474:	d801      	bhi.n	800a47a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a476:	230c      	movs	r3, #12
 800a478:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a47a:	8bfb      	ldrh	r3, [r7, #30]
 800a47c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a480:	d803      	bhi.n	800a48a <mem_trim+0x32>
 800a482:	8bfa      	ldrh	r2, [r7, #30]
 800a484:	887b      	ldrh	r3, [r7, #2]
 800a486:	429a      	cmp	r2, r3
 800a488:	d201      	bcs.n	800a48e <mem_trim+0x36>
    return NULL;
 800a48a:	2300      	movs	r3, #0
 800a48c:	e0d8      	b.n	800a640 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a48e:	4b6e      	ldr	r3, [pc, #440]	@ (800a648 <mem_trim+0x1f0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	d304      	bcc.n	800a4a2 <mem_trim+0x4a>
 800a498:	4b6c      	ldr	r3, [pc, #432]	@ (800a64c <mem_trim+0x1f4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d306      	bcc.n	800a4b0 <mem_trim+0x58>
 800a4a2:	4b6b      	ldr	r3, [pc, #428]	@ (800a650 <mem_trim+0x1f8>)
 800a4a4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a4a8:	496a      	ldr	r1, [pc, #424]	@ (800a654 <mem_trim+0x1fc>)
 800a4aa:	486b      	ldr	r0, [pc, #428]	@ (800a658 <mem_trim+0x200>)
 800a4ac:	f00a feda 	bl	8015264 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a4b0:	4b65      	ldr	r3, [pc, #404]	@ (800a648 <mem_trim+0x1f0>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d304      	bcc.n	800a4c4 <mem_trim+0x6c>
 800a4ba:	4b64      	ldr	r3, [pc, #400]	@ (800a64c <mem_trim+0x1f4>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d307      	bcc.n	800a4d4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4c4:	f00a fdb0 	bl	8015028 <sys_arch_protect>
 800a4c8:	60b8      	str	r0, [r7, #8]
 800a4ca:	68b8      	ldr	r0, [r7, #8]
 800a4cc:	f00a fdba 	bl	8015044 <sys_arch_unprotect>
    return rmem;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	e0b5      	b.n	800a640 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3b08      	subs	r3, #8
 800a4d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a4da:	69b8      	ldr	r0, [r7, #24]
 800a4dc:	f7ff fdee 	bl	800a0bc <mem_to_ptr>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	881a      	ldrh	r2, [r3, #0]
 800a4e8:	8afb      	ldrh	r3, [r7, #22]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	3b08      	subs	r3, #8
 800a4f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a4f2:	8bfa      	ldrh	r2, [r7, #30]
 800a4f4:	8abb      	ldrh	r3, [r7, #20]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d906      	bls.n	800a508 <mem_trim+0xb0>
 800a4fa:	4b55      	ldr	r3, [pc, #340]	@ (800a650 <mem_trim+0x1f8>)
 800a4fc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a500:	4956      	ldr	r1, [pc, #344]	@ (800a65c <mem_trim+0x204>)
 800a502:	4855      	ldr	r0, [pc, #340]	@ (800a658 <mem_trim+0x200>)
 800a504:	f00a feae 	bl	8015264 <iprintf>
  if (newsize > size) {
 800a508:	8bfa      	ldrh	r2, [r7, #30]
 800a50a:	8abb      	ldrh	r3, [r7, #20]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d901      	bls.n	800a514 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a510:	2300      	movs	r3, #0
 800a512:	e095      	b.n	800a640 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a514:	8bfa      	ldrh	r2, [r7, #30]
 800a516:	8abb      	ldrh	r3, [r7, #20]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d101      	bne.n	800a520 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	e08f      	b.n	800a640 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a520:	484f      	ldr	r0, [pc, #316]	@ (800a660 <mem_trim+0x208>)
 800a522:	f00a fd3f 	bl	8014fa4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fdb4 	bl	800a098 <ptr_to_mem>
 800a530:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	791b      	ldrb	r3, [r3, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d13f      	bne.n	800a5ba <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	881b      	ldrh	r3, [r3, #0]
 800a53e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a542:	d106      	bne.n	800a552 <mem_trim+0xfa>
 800a544:	4b42      	ldr	r3, [pc, #264]	@ (800a650 <mem_trim+0x1f8>)
 800a546:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a54a:	4946      	ldr	r1, [pc, #280]	@ (800a664 <mem_trim+0x20c>)
 800a54c:	4842      	ldr	r0, [pc, #264]	@ (800a658 <mem_trim+0x200>)
 800a54e:	f00a fe89 	bl	8015264 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	881b      	ldrh	r3, [r3, #0]
 800a556:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a558:	8afa      	ldrh	r2, [r7, #22]
 800a55a:	8bfb      	ldrh	r3, [r7, #30]
 800a55c:	4413      	add	r3, r2
 800a55e:	b29b      	uxth	r3, r3
 800a560:	3308      	adds	r3, #8
 800a562:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a564:	4b40      	ldr	r3, [pc, #256]	@ (800a668 <mem_trim+0x210>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d106      	bne.n	800a57c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a56e:	89fb      	ldrh	r3, [r7, #14]
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff fd91 	bl	800a098 <ptr_to_mem>
 800a576:	4603      	mov	r3, r0
 800a578:	4a3b      	ldr	r2, [pc, #236]	@ (800a668 <mem_trim+0x210>)
 800a57a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a57c:	89fb      	ldrh	r3, [r7, #14]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fd8a 	bl	800a098 <ptr_to_mem>
 800a584:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	2200      	movs	r2, #0
 800a58a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	89ba      	ldrh	r2, [r7, #12]
 800a590:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	8afa      	ldrh	r2, [r7, #22]
 800a596:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	89fa      	ldrh	r2, [r7, #14]
 800a59c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a5a6:	d047      	beq.n	800a638 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff fd73 	bl	800a098 <ptr_to_mem>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	89fb      	ldrh	r3, [r7, #14]
 800a5b6:	8053      	strh	r3, [r2, #2]
 800a5b8:	e03e      	b.n	800a638 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a5ba:	8bfb      	ldrh	r3, [r7, #30]
 800a5bc:	f103 0214 	add.w	r2, r3, #20
 800a5c0:	8abb      	ldrh	r3, [r7, #20]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d838      	bhi.n	800a638 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a5c6:	8afa      	ldrh	r2, [r7, #22]
 800a5c8:	8bfb      	ldrh	r3, [r7, #30]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a5da:	d106      	bne.n	800a5ea <mem_trim+0x192>
 800a5dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a650 <mem_trim+0x1f8>)
 800a5de:	f240 3216 	movw	r2, #790	@ 0x316
 800a5e2:	4920      	ldr	r1, [pc, #128]	@ (800a664 <mem_trim+0x20c>)
 800a5e4:	481c      	ldr	r0, [pc, #112]	@ (800a658 <mem_trim+0x200>)
 800a5e6:	f00a fe3d 	bl	8015264 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a5ea:	89fb      	ldrh	r3, [r7, #14]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7ff fd53 	bl	800a098 <ptr_to_mem>
 800a5f2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a668 <mem_trim+0x210>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d202      	bcs.n	800a604 <mem_trim+0x1ac>
      lfree = mem2;
 800a5fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a668 <mem_trim+0x210>)
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2200      	movs	r2, #0
 800a608:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	881a      	ldrh	r2, [r3, #0]
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	8afa      	ldrh	r2, [r7, #22]
 800a616:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	89fa      	ldrh	r2, [r7, #14]
 800a61c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a626:	d007      	beq.n	800a638 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff fd33 	bl	800a098 <ptr_to_mem>
 800a632:	4602      	mov	r2, r0
 800a634:	89fb      	ldrh	r3, [r7, #14]
 800a636:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a638:	4809      	ldr	r0, [pc, #36]	@ (800a660 <mem_trim+0x208>)
 800a63a:	f00a fcc2 	bl	8014fc2 <sys_mutex_unlock>
  return rmem;
 800a63e:	687b      	ldr	r3, [r7, #4]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3720      	adds	r7, #32
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20008d80 	.word	0x20008d80
 800a64c:	20008d84 	.word	0x20008d84
 800a650:	08016e2c 	.word	0x08016e2c
 800a654:	08016fb8 	.word	0x08016fb8
 800a658:	08016e74 	.word	0x08016e74
 800a65c:	08016fd0 	.word	0x08016fd0
 800a660:	20008d88 	.word	0x20008d88
 800a664:	08016ff0 	.word	0x08016ff0
 800a668:	20008d8c 	.word	0x20008d8c

0800a66c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af00      	add	r7, sp, #0
 800a672:	4603      	mov	r3, r0
 800a674:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <mem_malloc+0x14>
    return NULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e0e2      	b.n	800a846 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a680:	88fb      	ldrh	r3, [r7, #6]
 800a682:	3303      	adds	r3, #3
 800a684:	b29b      	uxth	r3, r3
 800a686:	f023 0303 	bic.w	r3, r3, #3
 800a68a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a68c:	8bbb      	ldrh	r3, [r7, #28]
 800a68e:	2b0b      	cmp	r3, #11
 800a690:	d801      	bhi.n	800a696 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a692:	230c      	movs	r3, #12
 800a694:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a696:	8bbb      	ldrh	r3, [r7, #28]
 800a698:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a69c:	d803      	bhi.n	800a6a6 <mem_malloc+0x3a>
 800a69e:	8bba      	ldrh	r2, [r7, #28]
 800a6a0:	88fb      	ldrh	r3, [r7, #6]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d201      	bcs.n	800a6aa <mem_malloc+0x3e>
    return NULL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e0cd      	b.n	800a846 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a6aa:	4869      	ldr	r0, [pc, #420]	@ (800a850 <mem_malloc+0x1e4>)
 800a6ac:	f00a fc7a 	bl	8014fa4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a6b0:	4b68      	ldr	r3, [pc, #416]	@ (800a854 <mem_malloc+0x1e8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7ff fd01 	bl	800a0bc <mem_to_ptr>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	83fb      	strh	r3, [r7, #30]
 800a6be:	e0b7      	b.n	800a830 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a6c0:	8bfb      	ldrh	r3, [r7, #30]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fce8 	bl	800a098 <ptr_to_mem>
 800a6c8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	791b      	ldrb	r3, [r3, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f040 80a7 	bne.w	800a822 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	8bfb      	ldrh	r3, [r7, #30]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	f1a3 0208 	sub.w	r2, r3, #8
 800a6e2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	f0c0 809c 	bcc.w	800a822 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	8bfb      	ldrh	r3, [r7, #30]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	f1a3 0208 	sub.w	r2, r3, #8
 800a6f8:	8bbb      	ldrh	r3, [r7, #28]
 800a6fa:	3314      	adds	r3, #20
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d333      	bcc.n	800a768 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a700:	8bfa      	ldrh	r2, [r7, #30]
 800a702:	8bbb      	ldrh	r3, [r7, #28]
 800a704:	4413      	add	r3, r2
 800a706:	b29b      	uxth	r3, r3
 800a708:	3308      	adds	r3, #8
 800a70a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a70c:	8a7b      	ldrh	r3, [r7, #18]
 800a70e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a712:	d106      	bne.n	800a722 <mem_malloc+0xb6>
 800a714:	4b50      	ldr	r3, [pc, #320]	@ (800a858 <mem_malloc+0x1ec>)
 800a716:	f240 3287 	movw	r2, #903	@ 0x387
 800a71a:	4950      	ldr	r1, [pc, #320]	@ (800a85c <mem_malloc+0x1f0>)
 800a71c:	4850      	ldr	r0, [pc, #320]	@ (800a860 <mem_malloc+0x1f4>)
 800a71e:	f00a fda1 	bl	8015264 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a722:	8a7b      	ldrh	r3, [r7, #18]
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff fcb7 	bl	800a098 <ptr_to_mem>
 800a72a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	881a      	ldrh	r2, [r3, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	8bfa      	ldrh	r2, [r7, #30]
 800a73e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	8a7a      	ldrh	r2, [r7, #18]
 800a744:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2201      	movs	r2, #1
 800a74a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a754:	d00b      	beq.n	800a76e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff fc9c 	bl	800a098 <ptr_to_mem>
 800a760:	4602      	mov	r2, r0
 800a762:	8a7b      	ldrh	r3, [r7, #18]
 800a764:	8053      	strh	r3, [r2, #2]
 800a766:	e002      	b.n	800a76e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2201      	movs	r2, #1
 800a76c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a76e:	4b39      	ldr	r3, [pc, #228]	@ (800a854 <mem_malloc+0x1e8>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	429a      	cmp	r2, r3
 800a776:	d127      	bne.n	800a7c8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a778:	4b36      	ldr	r3, [pc, #216]	@ (800a854 <mem_malloc+0x1e8>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a77e:	e005      	b.n	800a78c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	4618      	mov	r0, r3
 800a786:	f7ff fc87 	bl	800a098 <ptr_to_mem>
 800a78a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	791b      	ldrb	r3, [r3, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <mem_malloc+0x132>
 800a794:	4b33      	ldr	r3, [pc, #204]	@ (800a864 <mem_malloc+0x1f8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	69ba      	ldr	r2, [r7, #24]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d1f0      	bne.n	800a780 <mem_malloc+0x114>
          }
          lfree = cur;
 800a79e:	4a2d      	ldr	r2, [pc, #180]	@ (800a854 <mem_malloc+0x1e8>)
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a7a4:	4b2b      	ldr	r3, [pc, #172]	@ (800a854 <mem_malloc+0x1e8>)
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	4b2e      	ldr	r3, [pc, #184]	@ (800a864 <mem_malloc+0x1f8>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d00b      	beq.n	800a7c8 <mem_malloc+0x15c>
 800a7b0:	4b28      	ldr	r3, [pc, #160]	@ (800a854 <mem_malloc+0x1e8>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	791b      	ldrb	r3, [r3, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d006      	beq.n	800a7c8 <mem_malloc+0x15c>
 800a7ba:	4b27      	ldr	r3, [pc, #156]	@ (800a858 <mem_malloc+0x1ec>)
 800a7bc:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a7c0:	4929      	ldr	r1, [pc, #164]	@ (800a868 <mem_malloc+0x1fc>)
 800a7c2:	4827      	ldr	r0, [pc, #156]	@ (800a860 <mem_malloc+0x1f4>)
 800a7c4:	f00a fd4e 	bl	8015264 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a7c8:	4821      	ldr	r0, [pc, #132]	@ (800a850 <mem_malloc+0x1e4>)
 800a7ca:	f00a fbfa 	bl	8014fc2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a7ce:	8bba      	ldrh	r2, [r7, #28]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	4a23      	ldr	r2, [pc, #140]	@ (800a864 <mem_malloc+0x1f8>)
 800a7d8:	6812      	ldr	r2, [r2, #0]
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d906      	bls.n	800a7ec <mem_malloc+0x180>
 800a7de:	4b1e      	ldr	r3, [pc, #120]	@ (800a858 <mem_malloc+0x1ec>)
 800a7e0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a7e4:	4921      	ldr	r1, [pc, #132]	@ (800a86c <mem_malloc+0x200>)
 800a7e6:	481e      	ldr	r0, [pc, #120]	@ (800a860 <mem_malloc+0x1f4>)
 800a7e8:	f00a fd3c 	bl	8015264 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f003 0303 	and.w	r3, r3, #3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d006      	beq.n	800a804 <mem_malloc+0x198>
 800a7f6:	4b18      	ldr	r3, [pc, #96]	@ (800a858 <mem_malloc+0x1ec>)
 800a7f8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a7fc:	491c      	ldr	r1, [pc, #112]	@ (800a870 <mem_malloc+0x204>)
 800a7fe:	4818      	ldr	r0, [pc, #96]	@ (800a860 <mem_malloc+0x1f4>)
 800a800:	f00a fd30 	bl	8015264 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d006      	beq.n	800a81c <mem_malloc+0x1b0>
 800a80e:	4b12      	ldr	r3, [pc, #72]	@ (800a858 <mem_malloc+0x1ec>)
 800a810:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a814:	4917      	ldr	r1, [pc, #92]	@ (800a874 <mem_malloc+0x208>)
 800a816:	4812      	ldr	r0, [pc, #72]	@ (800a860 <mem_malloc+0x1f4>)
 800a818:	f00a fd24 	bl	8015264 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	3308      	adds	r3, #8
 800a820:	e011      	b.n	800a846 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a822:	8bfb      	ldrh	r3, [r7, #30]
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff fc37 	bl	800a098 <ptr_to_mem>
 800a82a:	4603      	mov	r3, r0
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a830:	8bfa      	ldrh	r2, [r7, #30]
 800a832:	8bbb      	ldrh	r3, [r7, #28]
 800a834:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800a838:	429a      	cmp	r2, r3
 800a83a:	f4ff af41 	bcc.w	800a6c0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a83e:	4804      	ldr	r0, [pc, #16]	@ (800a850 <mem_malloc+0x1e4>)
 800a840:	f00a fbbf 	bl	8014fc2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3720      	adds	r7, #32
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20008d88 	.word	0x20008d88
 800a854:	20008d8c 	.word	0x20008d8c
 800a858:	08016e2c 	.word	0x08016e2c
 800a85c:	08016ff0 	.word	0x08016ff0
 800a860:	08016e74 	.word	0x08016e74
 800a864:	20008d84 	.word	0x20008d84
 800a868:	08017004 	.word	0x08017004
 800a86c:	08017020 	.word	0x08017020
 800a870:	08017050 	.word	0x08017050
 800a874:	08017080 	.word	0x08017080

0800a878 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	2200      	movs	r2, #0
 800a886:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	3303      	adds	r3, #3
 800a88e:	f023 0303 	bic.w	r3, r3, #3
 800a892:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e011      	b.n	800a8be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	885b      	ldrh	r3, [r3, #2]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	dbe7      	blt.n	800a89a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a8de:	2300      	movs	r3, #0
 800a8e0:	80fb      	strh	r3, [r7, #6]
 800a8e2:	e009      	b.n	800a8f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a8e4:	88fb      	ldrh	r3, [r7, #6]
 800a8e6:	4a08      	ldr	r2, [pc, #32]	@ (800a908 <memp_init+0x30>)
 800a8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff ffc3 	bl	800a878 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a8f2:	88fb      	ldrh	r3, [r7, #6]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	80fb      	strh	r3, [r7, #6]
 800a8f8:	88fb      	ldrh	r3, [r7, #6]
 800a8fa:	2b0c      	cmp	r3, #12
 800a8fc:	d9f2      	bls.n	800a8e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a8fe:	bf00      	nop
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	08022b58 	.word	0x08022b58

0800a90c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a914:	f00a fb88 	bl	8015028 <sys_arch_protect>
 800a918:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d015      	beq.n	800a954 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	6812      	ldr	r2, [r2, #0]
 800a930:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d006      	beq.n	800a94a <do_memp_malloc_pool+0x3e>
 800a93c:	4b09      	ldr	r3, [pc, #36]	@ (800a964 <do_memp_malloc_pool+0x58>)
 800a93e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a942:	4909      	ldr	r1, [pc, #36]	@ (800a968 <do_memp_malloc_pool+0x5c>)
 800a944:	4809      	ldr	r0, [pc, #36]	@ (800a96c <do_memp_malloc_pool+0x60>)
 800a946:	f00a fc8d 	bl	8015264 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f00a fb7a 	bl	8015044 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	e003      	b.n	800a95c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f00a fb75 	bl	8015044 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	080170a4 	.word	0x080170a4
 800a968:	080170d4 	.word	0x080170d4
 800a96c:	080170f8 	.word	0x080170f8

0800a970 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d106      	bne.n	800a98c <memp_malloc_pool+0x1c>
 800a97e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a8 <memp_malloc_pool+0x38>)
 800a980:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a984:	4909      	ldr	r1, [pc, #36]	@ (800a9ac <memp_malloc_pool+0x3c>)
 800a986:	480a      	ldr	r0, [pc, #40]	@ (800a9b0 <memp_malloc_pool+0x40>)
 800a988:	f00a fc6c 	bl	8015264 <iprintf>
  if (desc == NULL) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <memp_malloc_pool+0x26>
    return NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	e003      	b.n	800a99e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff ffb8 	bl	800a90c <do_memp_malloc_pool>
 800a99c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	080170a4 	.word	0x080170a4
 800a9ac:	08017120 	.word	0x08017120
 800a9b0:	080170f8 	.word	0x080170f8

0800a9b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	2b0c      	cmp	r3, #12
 800a9c2:	d908      	bls.n	800a9d6 <memp_malloc+0x22>
 800a9c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f0 <memp_malloc+0x3c>)
 800a9c6:	f240 1257 	movw	r2, #343	@ 0x157
 800a9ca:	490a      	ldr	r1, [pc, #40]	@ (800a9f4 <memp_malloc+0x40>)
 800a9cc:	480a      	ldr	r0, [pc, #40]	@ (800a9f8 <memp_malloc+0x44>)
 800a9ce:	f00a fc49 	bl	8015264 <iprintf>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e008      	b.n	800a9e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	4a08      	ldr	r2, [pc, #32]	@ (800a9fc <memp_malloc+0x48>)
 800a9da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff ff94 	bl	800a90c <do_memp_malloc_pool>
 800a9e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	080170a4 	.word	0x080170a4
 800a9f4:	08017134 	.word	0x08017134
 800a9f8:	080170f8 	.word	0x080170f8
 800a9fc:	08022b58 	.word	0x08022b58

0800aa00 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d006      	beq.n	800aa22 <do_memp_free_pool+0x22>
 800aa14:	4b0d      	ldr	r3, [pc, #52]	@ (800aa4c <do_memp_free_pool+0x4c>)
 800aa16:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800aa1a:	490d      	ldr	r1, [pc, #52]	@ (800aa50 <do_memp_free_pool+0x50>)
 800aa1c:	480d      	ldr	r0, [pc, #52]	@ (800aa54 <do_memp_free_pool+0x54>)
 800aa1e:	f00a fc21 	bl	8015264 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800aa26:	f00a faff 	bl	8015028 <sys_arch_protect>
 800aa2a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	f00a fb00 	bl	8015044 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	080170a4 	.word	0x080170a4
 800aa50:	08017154 	.word	0x08017154
 800aa54:	080170f8 	.word	0x080170f8

0800aa58 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d106      	bne.n	800aa76 <memp_free_pool+0x1e>
 800aa68:	4b0a      	ldr	r3, [pc, #40]	@ (800aa94 <memp_free_pool+0x3c>)
 800aa6a:	f240 1295 	movw	r2, #405	@ 0x195
 800aa6e:	490a      	ldr	r1, [pc, #40]	@ (800aa98 <memp_free_pool+0x40>)
 800aa70:	480a      	ldr	r0, [pc, #40]	@ (800aa9c <memp_free_pool+0x44>)
 800aa72:	f00a fbf7 	bl	8015264 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d007      	beq.n	800aa8c <memp_free_pool+0x34>
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d004      	beq.n	800aa8c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f7ff ffbb 	bl	800aa00 <do_memp_free_pool>
 800aa8a:	e000      	b.n	800aa8e <memp_free_pool+0x36>
    return;
 800aa8c:	bf00      	nop
}
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	080170a4 	.word	0x080170a4
 800aa98:	08017120 	.word	0x08017120
 800aa9c:	080170f8 	.word	0x080170f8

0800aaa0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	6039      	str	r1, [r7, #0]
 800aaaa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	2b0c      	cmp	r3, #12
 800aab0:	d907      	bls.n	800aac2 <memp_free+0x22>
 800aab2:	4b0c      	ldr	r3, [pc, #48]	@ (800aae4 <memp_free+0x44>)
 800aab4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800aab8:	490b      	ldr	r1, [pc, #44]	@ (800aae8 <memp_free+0x48>)
 800aaba:	480c      	ldr	r0, [pc, #48]	@ (800aaec <memp_free+0x4c>)
 800aabc:	f00a fbd2 	bl	8015264 <iprintf>
 800aac0:	e00c      	b.n	800aadc <memp_free+0x3c>

  if (mem == NULL) {
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d008      	beq.n	800aada <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800aac8:	79fb      	ldrb	r3, [r7, #7]
 800aaca:	4a09      	ldr	r2, [pc, #36]	@ (800aaf0 <memp_free+0x50>)
 800aacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff ff94 	bl	800aa00 <do_memp_free_pool>
 800aad8:	e000      	b.n	800aadc <memp_free+0x3c>
    return;
 800aada:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	080170a4 	.word	0x080170a4
 800aae8:	08017174 	.word	0x08017174
 800aaec:	080170f8 	.word	0x080170f8
 800aaf0:	08022b58 	.word	0x08022b58

0800aaf4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aaf8:	bf00      	nop
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
	...

0800ab04 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d108      	bne.n	800ab2a <netif_add+0x26>
 800ab18:	4b57      	ldr	r3, [pc, #348]	@ (800ac78 <netif_add+0x174>)
 800ab1a:	f240 1227 	movw	r2, #295	@ 0x127
 800ab1e:	4957      	ldr	r1, [pc, #348]	@ (800ac7c <netif_add+0x178>)
 800ab20:	4857      	ldr	r0, [pc, #348]	@ (800ac80 <netif_add+0x17c>)
 800ab22:	f00a fb9f 	bl	8015264 <iprintf>
 800ab26:	2300      	movs	r3, #0
 800ab28:	e0a2      	b.n	800ac70 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d108      	bne.n	800ab42 <netif_add+0x3e>
 800ab30:	4b51      	ldr	r3, [pc, #324]	@ (800ac78 <netif_add+0x174>)
 800ab32:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ab36:	4953      	ldr	r1, [pc, #332]	@ (800ac84 <netif_add+0x180>)
 800ab38:	4851      	ldr	r0, [pc, #324]	@ (800ac80 <netif_add+0x17c>)
 800ab3a:	f00a fb93 	bl	8015264 <iprintf>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e096      	b.n	800ac70 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ab48:	4b4f      	ldr	r3, [pc, #316]	@ (800ac88 <netif_add+0x184>)
 800ab4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ab52:	4b4d      	ldr	r3, [pc, #308]	@ (800ac88 <netif_add+0x184>)
 800ab54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ab5c:	4b4a      	ldr	r3, [pc, #296]	@ (800ac88 <netif_add+0x184>)
 800ab5e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4a45      	ldr	r2, [pc, #276]	@ (800ac8c <netif_add+0x188>)
 800ab76:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6a3a      	ldr	r2, [r7, #32]
 800ab90:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ab92:	4b3f      	ldr	r3, [pc, #252]	@ (800ac90 <netif_add+0x18c>)
 800ab94:	781a      	ldrb	r2, [r3, #0]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aba0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 f913 	bl	800add4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800abae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	4798      	blx	r3
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <netif_add+0xba>
    return NULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	e058      	b.n	800ac70 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800abc4:	2bff      	cmp	r3, #255	@ 0xff
 800abc6:	d103      	bne.n	800abd0 <netif_add+0xcc>
        netif->num = 0;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800abd4:	4b2f      	ldr	r3, [pc, #188]	@ (800ac94 <netif_add+0x190>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	617b      	str	r3, [r7, #20]
 800abda:	e02b      	b.n	800ac34 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d106      	bne.n	800abf2 <netif_add+0xee>
 800abe4:	4b24      	ldr	r3, [pc, #144]	@ (800ac78 <netif_add+0x174>)
 800abe6:	f240 128b 	movw	r2, #395	@ 0x18b
 800abea:	492b      	ldr	r1, [pc, #172]	@ (800ac98 <netif_add+0x194>)
 800abec:	4824      	ldr	r0, [pc, #144]	@ (800ac80 <netif_add+0x17c>)
 800abee:	f00a fb39 	bl	8015264 <iprintf>
        num_netifs++;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	3301      	adds	r3, #1
 800abf6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2bff      	cmp	r3, #255	@ 0xff
 800abfc:	dd06      	ble.n	800ac0c <netif_add+0x108>
 800abfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ac78 <netif_add+0x174>)
 800ac00:	f240 128d 	movw	r2, #397	@ 0x18d
 800ac04:	4925      	ldr	r1, [pc, #148]	@ (800ac9c <netif_add+0x198>)
 800ac06:	481e      	ldr	r0, [pc, #120]	@ (800ac80 <netif_add+0x17c>)
 800ac08:	f00a fb2c 	bl	8015264 <iprintf>
        if (netif2->num == netif->num) {
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d108      	bne.n	800ac2e <netif_add+0x12a>
          netif->num++;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac22:	3301      	adds	r3, #1
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800ac2c:	e005      	b.n	800ac3a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	617b      	str	r3, [r7, #20]
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1d0      	bne.n	800abdc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1be      	bne.n	800abbe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac46:	2bfe      	cmp	r3, #254	@ 0xfe
 800ac48:	d103      	bne.n	800ac52 <netif_add+0x14e>
    netif_num = 0;
 800ac4a:	4b11      	ldr	r3, [pc, #68]	@ (800ac90 <netif_add+0x18c>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	e006      	b.n	800ac60 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac58:	3301      	adds	r3, #1
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac90 <netif_add+0x18c>)
 800ac5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ac60:	4b0c      	ldr	r3, [pc, #48]	@ (800ac94 <netif_add+0x190>)
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ac68:	4a0a      	ldr	r2, [pc, #40]	@ (800ac94 <netif_add+0x190>)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	08017190 	.word	0x08017190
 800ac7c:	08017224 	.word	0x08017224
 800ac80:	080171e0 	.word	0x080171e0
 800ac84:	08017240 	.word	0x08017240
 800ac88:	08022bcc 	.word	0x08022bcc
 800ac8c:	0800b0af 	.word	0x0800b0af
 800ac90:	2000be64 	.word	0x2000be64
 800ac94:	2000be5c 	.word	0x2000be5c
 800ac98:	08017264 	.word	0x08017264
 800ac9c:	08017278 	.word	0x08017278

0800aca0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f002 fe51 	bl	800d954 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f007 fcfd 	bl	80126b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800acba:	bf00      	nop
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <netif_do_set_ipaddr+0x20>
 800acd6:	4b1d      	ldr	r3, [pc, #116]	@ (800ad4c <netif_do_set_ipaddr+0x88>)
 800acd8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800acdc:	491c      	ldr	r1, [pc, #112]	@ (800ad50 <netif_do_set_ipaddr+0x8c>)
 800acde:	481d      	ldr	r0, [pc, #116]	@ (800ad54 <netif_do_set_ipaddr+0x90>)
 800ace0:	f00a fac0 	bl	8015264 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <netif_do_set_ipaddr+0x34>
 800acea:	4b18      	ldr	r3, [pc, #96]	@ (800ad4c <netif_do_set_ipaddr+0x88>)
 800acec:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800acf0:	4917      	ldr	r1, [pc, #92]	@ (800ad50 <netif_do_set_ipaddr+0x8c>)
 800acf2:	4818      	ldr	r0, [pc, #96]	@ (800ad54 <netif_do_set_ipaddr+0x90>)
 800acf4:	f00a fab6 	bl	8015264 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3304      	adds	r3, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d01c      	beq.n	800ad40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ad16:	f107 0314 	add.w	r3, r7, #20
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff ffbf 	bl	800aca0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <netif_do_set_ipaddr+0x6a>
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	e000      	b.n	800ad30 <netif_do_set_ipaddr+0x6c>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ad34:	2101      	movs	r1, #1
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 f8d2 	bl	800aee0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e000      	b.n	800ad42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	08017190 	.word	0x08017190
 800ad50:	080172a8 	.word	0x080172a8
 800ad54:	080171e0 	.word	0x080171e0

0800ad58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d00a      	beq.n	800ad88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <netif_do_set_netmask+0x26>
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	e000      	b.n	800ad80 <netif_do_set_netmask+0x28>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ad84:	2301      	movs	r3, #1
 800ad86:	e000      	b.n	800ad8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b085      	sub	sp, #20
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	60b9      	str	r1, [r7, #8]
 800ada0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	330c      	adds	r3, #12
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d00a      	beq.n	800adc6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <netif_do_set_gw+0x26>
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	e000      	b.n	800adbe <netif_do_set_gw+0x28>
 800adbc:	2300      	movs	r3, #0
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
 800ade0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800adf0:	4b1c      	ldr	r3, [pc, #112]	@ (800ae64 <netif_set_addr+0x90>)
 800adf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800adfa:	4b1a      	ldr	r3, [pc, #104]	@ (800ae64 <netif_set_addr+0x90>)
 800adfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ae04:	4b17      	ldr	r3, [pc, #92]	@ (800ae64 <netif_set_addr+0x90>)
 800ae06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <netif_set_addr+0x42>
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <netif_set_addr+0x46>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e000      	b.n	800ae1c <netif_set_addr+0x48>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d006      	beq.n	800ae32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ae24:	f107 0310 	add.w	r3, r7, #16
 800ae28:	461a      	mov	r2, r3
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f7ff ff49 	bl	800acc4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7ff ff8e 	bl	800ad58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7ff ffa8 	bl	800ad96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d106      	bne.n	800ae5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ae4c:	f107 0310 	add.w	r3, r7, #16
 800ae50:	461a      	mov	r2, r3
 800ae52:	68b9      	ldr	r1, [r7, #8]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff ff35 	bl	800acc4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ae5a:	bf00      	nop
 800ae5c:	3720      	adds	r7, #32
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	08022bcc 	.word	0x08022bcc

0800ae68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ae70:	4a04      	ldr	r2, [pc, #16]	@ (800ae84 <netif_set_default+0x1c>)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ae76:	bf00      	nop
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	2000be60 	.word	0x2000be60

0800ae88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d107      	bne.n	800aea6 <netif_set_up+0x1e>
 800ae96:	4b0f      	ldr	r3, [pc, #60]	@ (800aed4 <netif_set_up+0x4c>)
 800ae98:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ae9c:	490e      	ldr	r1, [pc, #56]	@ (800aed8 <netif_set_up+0x50>)
 800ae9e:	480f      	ldr	r0, [pc, #60]	@ (800aedc <netif_set_up+0x54>)
 800aea0:	f00a f9e0 	bl	8015264 <iprintf>
 800aea4:	e013      	b.n	800aece <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10c      	bne.n	800aece <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aeba:	f043 0301 	orr.w	r3, r3, #1
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aec6:	2103      	movs	r1, #3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f809 	bl	800aee0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	08017190 	.word	0x08017190
 800aed8:	08017318 	.word	0x08017318
 800aedc:	080171e0 	.word	0x080171e0

0800aee0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	460b      	mov	r3, r1
 800aeea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d106      	bne.n	800af00 <netif_issue_reports+0x20>
 800aef2:	4b18      	ldr	r3, [pc, #96]	@ (800af54 <netif_issue_reports+0x74>)
 800aef4:	f240 326d 	movw	r2, #877	@ 0x36d
 800aef8:	4917      	ldr	r1, [pc, #92]	@ (800af58 <netif_issue_reports+0x78>)
 800aefa:	4818      	ldr	r0, [pc, #96]	@ (800af5c <netif_issue_reports+0x7c>)
 800aefc:	f00a f9b2 	bl	8015264 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af06:	f003 0304 	and.w	r3, r3, #4
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d01e      	beq.n	800af4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d017      	beq.n	800af4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af1c:	78fb      	ldrb	r3, [r7, #3]
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	2b00      	cmp	r3, #0
 800af24:	d013      	beq.n	800af4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3304      	adds	r3, #4
 800af2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00e      	beq.n	800af4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af36:	f003 0308 	and.w	r3, r3, #8
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d007      	beq.n	800af4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	3304      	adds	r3, #4
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f008 fb1f 	bl	8013588 <etharp_request>
 800af4a:	e000      	b.n	800af4e <netif_issue_reports+0x6e>
    return;
 800af4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	08017190 	.word	0x08017190
 800af58:	08017334 	.word	0x08017334
 800af5c:	080171e0 	.word	0x080171e0

0800af60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d107      	bne.n	800af7e <netif_set_down+0x1e>
 800af6e:	4b12      	ldr	r3, [pc, #72]	@ (800afb8 <netif_set_down+0x58>)
 800af70:	f240 329b 	movw	r2, #923	@ 0x39b
 800af74:	4911      	ldr	r1, [pc, #68]	@ (800afbc <netif_set_down+0x5c>)
 800af76:	4812      	ldr	r0, [pc, #72]	@ (800afc0 <netif_set_down+0x60>)
 800af78:	f00a f974 	bl	8015264 <iprintf>
 800af7c:	e019      	b.n	800afb2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d012      	beq.n	800afb2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af92:	f023 0301 	bic.w	r3, r3, #1
 800af96:	b2da      	uxtb	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800afa4:	f003 0308 	and.w	r3, r3, #8
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f007 fea9 	bl	8012d04 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08017190 	.word	0x08017190
 800afbc:	08017358 	.word	0x08017358
 800afc0:	080171e0 	.word	0x080171e0

0800afc4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d107      	bne.n	800afe2 <netif_set_link_up+0x1e>
 800afd2:	4b13      	ldr	r3, [pc, #76]	@ (800b020 <netif_set_link_up+0x5c>)
 800afd4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800afd8:	4912      	ldr	r1, [pc, #72]	@ (800b024 <netif_set_link_up+0x60>)
 800afda:	4813      	ldr	r0, [pc, #76]	@ (800b028 <netif_set_link_up+0x64>)
 800afdc:	f00a f942 	bl	8015264 <iprintf>
 800afe0:	e01b      	b.n	800b01a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d114      	bne.n	800b01a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aff6:	f043 0304 	orr.w	r3, r3, #4
 800affa:	b2da      	uxtb	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b002:	2103      	movs	r1, #3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ff6b 	bl	800aee0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <netif_set_link_up+0x56>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	08017190 	.word	0x08017190
 800b024:	08017378 	.word	0x08017378
 800b028:	080171e0 	.word	0x080171e0

0800b02c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d107      	bne.n	800b04a <netif_set_link_down+0x1e>
 800b03a:	4b11      	ldr	r3, [pc, #68]	@ (800b080 <netif_set_link_down+0x54>)
 800b03c:	f240 4206 	movw	r2, #1030	@ 0x406
 800b040:	4910      	ldr	r1, [pc, #64]	@ (800b084 <netif_set_link_down+0x58>)
 800b042:	4811      	ldr	r0, [pc, #68]	@ (800b088 <netif_set_link_down+0x5c>)
 800b044:	f00a f90e 	bl	8015264 <iprintf>
 800b048:	e017      	b.n	800b07a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d010      	beq.n	800b07a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b05e:	f023 0304 	bic.w	r3, r3, #4
 800b062:	b2da      	uxtb	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	69db      	ldr	r3, [r3, #28]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <netif_set_link_down+0x4e>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	08017190 	.word	0x08017190
 800b084:	0801739c 	.word	0x0801739c
 800b088:	080171e0 	.word	0x080171e0

0800b08c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	61da      	str	r2, [r3, #28]
  }
}
 800b0a2:	bf00      	nop
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	60b9      	str	r1, [r7, #8]
 800b0b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b0ba:	f06f 030b 	mvn.w	r3, #11
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
	...

0800b0cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b0d6:	79fb      	ldrb	r3, [r7, #7]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d013      	beq.n	800b104 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b0dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b114 <netif_get_by_index+0x48>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e00c      	b.n	800b0fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	79fa      	ldrb	r2, [r7, #7]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d101      	bne.n	800b0f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	e006      	b.n	800b106 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1ef      	bne.n	800b0e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	2000be5c 	.word	0x2000be5c

0800b118 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b11e:	f009 ff83 	bl	8015028 <sys_arch_protect>
 800b122:	6038      	str	r0, [r7, #0]
 800b124:	4b0d      	ldr	r3, [pc, #52]	@ (800b15c <pbuf_free_ooseq+0x44>)
 800b126:	2200      	movs	r2, #0
 800b128:	701a      	strb	r2, [r3, #0]
 800b12a:	6838      	ldr	r0, [r7, #0]
 800b12c:	f009 ff8a 	bl	8015044 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b130:	4b0b      	ldr	r3, [pc, #44]	@ (800b160 <pbuf_free_ooseq+0x48>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	607b      	str	r3, [r7, #4]
 800b136:	e00a      	b.n	800b14e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f002 fc45 	bl	800d9d0 <tcp_free_ooseq>
      return;
 800b146:	e005      	b.n	800b154 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1f1      	bne.n	800b138 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	2000be65 	.word	0x2000be65
 800b160:	2000be74 	.word	0x2000be74

0800b164 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b16c:	f7ff ffd4 	bl	800b118 <pbuf_free_ooseq>
}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b17e:	f009 ff53 	bl	8015028 <sys_arch_protect>
 800b182:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b184:	4b0f      	ldr	r3, [pc, #60]	@ (800b1c4 <pbuf_pool_is_empty+0x4c>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b18a:	4b0e      	ldr	r3, [pc, #56]	@ (800b1c4 <pbuf_pool_is_empty+0x4c>)
 800b18c:	2201      	movs	r2, #1
 800b18e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f009 ff57 	bl	8015044 <sys_arch_unprotect>

  if (!queued) {
 800b196:	78fb      	ldrb	r3, [r7, #3]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10f      	bne.n	800b1bc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b19c:	2100      	movs	r1, #0
 800b19e:	480a      	ldr	r0, [pc, #40]	@ (800b1c8 <pbuf_pool_is_empty+0x50>)
 800b1a0:	f7fe fe4c 	bl	8009e3c <tcpip_try_callback>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d008      	beq.n	800b1bc <pbuf_pool_is_empty+0x44>
 800b1aa:	f009 ff3d 	bl	8015028 <sys_arch_protect>
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	4b04      	ldr	r3, [pc, #16]	@ (800b1c4 <pbuf_pool_is_empty+0x4c>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f009 ff44 	bl	8015044 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	2000be65 	.word	0x2000be65
 800b1c8:	0800b165 	.word	0x0800b165

0800b1cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	461a      	mov	r2, r3
 800b1da:	460b      	mov	r3, r1
 800b1dc:	80fb      	strh	r3, [r7, #6]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	88fa      	ldrh	r2, [r7, #6]
 800b1f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	88ba      	ldrh	r2, [r7, #4]
 800b1f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b1fa:	8b3b      	ldrh	r3, [r7, #24]
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	7f3a      	ldrb	r2, [r7, #28]
 800b206:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2201      	movs	r2, #1
 800b20c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	73da      	strb	r2, [r3, #15]
}
 800b214:	bf00      	nop
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b08c      	sub	sp, #48	@ 0x30
 800b224:	af02      	add	r7, sp, #8
 800b226:	4603      	mov	r3, r0
 800b228:	71fb      	strb	r3, [r7, #7]
 800b22a:	460b      	mov	r3, r1
 800b22c:	80bb      	strh	r3, [r7, #4]
 800b22e:	4613      	mov	r3, r2
 800b230:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b236:	887b      	ldrh	r3, [r7, #2]
 800b238:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b23c:	d07f      	beq.n	800b33e <pbuf_alloc+0x11e>
 800b23e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b242:	f300 80c8 	bgt.w	800b3d6 <pbuf_alloc+0x1b6>
 800b246:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b24a:	d010      	beq.n	800b26e <pbuf_alloc+0x4e>
 800b24c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b250:	f300 80c1 	bgt.w	800b3d6 <pbuf_alloc+0x1b6>
 800b254:	2b01      	cmp	r3, #1
 800b256:	d002      	beq.n	800b25e <pbuf_alloc+0x3e>
 800b258:	2b41      	cmp	r3, #65	@ 0x41
 800b25a:	f040 80bc 	bne.w	800b3d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b25e:	887a      	ldrh	r2, [r7, #2]
 800b260:	88bb      	ldrh	r3, [r7, #4]
 800b262:	4619      	mov	r1, r3
 800b264:	2000      	movs	r0, #0
 800b266:	f000 f8d1 	bl	800b40c <pbuf_alloc_reference>
 800b26a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b26c:	e0bd      	b.n	800b3ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b276:	88bb      	ldrh	r3, [r7, #4]
 800b278:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b27a:	200c      	movs	r0, #12
 800b27c:	f7ff fb9a 	bl	800a9b4 <memp_malloc>
 800b280:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d109      	bne.n	800b29c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b288:	f7ff ff76 	bl	800b178 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d002      	beq.n	800b298 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b294:	f000 faa8 	bl	800b7e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	e0a7      	b.n	800b3ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b29c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b29e:	3303      	adds	r3, #3
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	f023 0303 	bic.w	r3, r3, #3
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	8b7a      	ldrh	r2, [r7, #26]
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	bf28      	it	cs
 800b2b4:	4613      	movcs	r3, r2
 800b2b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b2b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2ba:	3310      	adds	r3, #16
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	4413      	add	r3, r2
 800b2c0:	3303      	adds	r3, #3
 800b2c2:	f023 0303 	bic.w	r3, r3, #3
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	89f9      	ldrh	r1, [r7, #14]
 800b2ca:	8b7a      	ldrh	r2, [r7, #26]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	887b      	ldrh	r3, [r7, #2]
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	6938      	ldr	r0, [r7, #16]
 800b2da:	f7ff ff77 	bl	800b1cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d006      	beq.n	800b2f8 <pbuf_alloc+0xd8>
 800b2ea:	4b42      	ldr	r3, [pc, #264]	@ (800b3f4 <pbuf_alloc+0x1d4>)
 800b2ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b2f0:	4941      	ldr	r1, [pc, #260]	@ (800b3f8 <pbuf_alloc+0x1d8>)
 800b2f2:	4842      	ldr	r0, [pc, #264]	@ (800b3fc <pbuf_alloc+0x1dc>)
 800b2f4:	f009 ffb6 	bl	8015264 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b2f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2fa:	3303      	adds	r3, #3
 800b2fc:	f023 0303 	bic.w	r3, r3, #3
 800b300:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b304:	d106      	bne.n	800b314 <pbuf_alloc+0xf4>
 800b306:	4b3b      	ldr	r3, [pc, #236]	@ (800b3f4 <pbuf_alloc+0x1d4>)
 800b308:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b30c:	493c      	ldr	r1, [pc, #240]	@ (800b400 <pbuf_alloc+0x1e0>)
 800b30e:	483b      	ldr	r0, [pc, #236]	@ (800b3fc <pbuf_alloc+0x1dc>)
 800b310:	f009 ffa8 	bl	8015264 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	2b00      	cmp	r3, #0
 800b318:	d102      	bne.n	800b320 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b31e:	e002      	b.n	800b326 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b32a:	8b7a      	ldrh	r2, [r7, #26]
 800b32c:	89fb      	ldrh	r3, [r7, #14]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b336:	8b7b      	ldrh	r3, [r7, #26]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d19e      	bne.n	800b27a <pbuf_alloc+0x5a>
      break;
 800b33c:	e055      	b.n	800b3ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b33e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b340:	3303      	adds	r3, #3
 800b342:	b29b      	uxth	r3, r3
 800b344:	f023 0303 	bic.w	r3, r3, #3
 800b348:	b29a      	uxth	r2, r3
 800b34a:	88bb      	ldrh	r3, [r7, #4]
 800b34c:	3303      	adds	r3, #3
 800b34e:	b29b      	uxth	r3, r3
 800b350:	f023 0303 	bic.w	r3, r3, #3
 800b354:	b29b      	uxth	r3, r3
 800b356:	4413      	add	r3, r2
 800b358:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b35a:	8b3b      	ldrh	r3, [r7, #24]
 800b35c:	3310      	adds	r3, #16
 800b35e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b360:	8b3a      	ldrh	r2, [r7, #24]
 800b362:	88bb      	ldrh	r3, [r7, #4]
 800b364:	3303      	adds	r3, #3
 800b366:	f023 0303 	bic.w	r3, r3, #3
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d306      	bcc.n	800b37c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b36e:	8afa      	ldrh	r2, [r7, #22]
 800b370:	88bb      	ldrh	r3, [r7, #4]
 800b372:	3303      	adds	r3, #3
 800b374:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b378:	429a      	cmp	r2, r3
 800b37a:	d201      	bcs.n	800b380 <pbuf_alloc+0x160>
        return NULL;
 800b37c:	2300      	movs	r3, #0
 800b37e:	e035      	b.n	800b3ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b380:	8afb      	ldrh	r3, [r7, #22]
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff f972 	bl	800a66c <mem_malloc>
 800b388:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <pbuf_alloc+0x174>
        return NULL;
 800b390:	2300      	movs	r3, #0
 800b392:	e02b      	b.n	800b3ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b394:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b396:	3310      	adds	r3, #16
 800b398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b39a:	4413      	add	r3, r2
 800b39c:	3303      	adds	r3, #3
 800b39e:	f023 0303 	bic.w	r3, r3, #3
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	88b9      	ldrh	r1, [r7, #4]
 800b3a6:	88ba      	ldrh	r2, [r7, #4]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9301      	str	r3, [sp, #4]
 800b3ac:	887b      	ldrh	r3, [r7, #2]
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b3b6:	f7ff ff09 	bl	800b1cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f003 0303 	and.w	r3, r3, #3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d010      	beq.n	800b3e8 <pbuf_alloc+0x1c8>
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f4 <pbuf_alloc+0x1d4>)
 800b3c8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b3cc:	490d      	ldr	r1, [pc, #52]	@ (800b404 <pbuf_alloc+0x1e4>)
 800b3ce:	480b      	ldr	r0, [pc, #44]	@ (800b3fc <pbuf_alloc+0x1dc>)
 800b3d0:	f009 ff48 	bl	8015264 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b3d4:	e008      	b.n	800b3e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b3d6:	4b07      	ldr	r3, [pc, #28]	@ (800b3f4 <pbuf_alloc+0x1d4>)
 800b3d8:	f240 1227 	movw	r2, #295	@ 0x127
 800b3dc:	490a      	ldr	r1, [pc, #40]	@ (800b408 <pbuf_alloc+0x1e8>)
 800b3de:	4807      	ldr	r0, [pc, #28]	@ (800b3fc <pbuf_alloc+0x1dc>)
 800b3e0:	f009 ff40 	bl	8015264 <iprintf>
      return NULL;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	e001      	b.n	800b3ec <pbuf_alloc+0x1cc>
      break;
 800b3e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3728      	adds	r7, #40	@ 0x28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	080173c0 	.word	0x080173c0
 800b3f8:	080173f0 	.word	0x080173f0
 800b3fc:	08017420 	.word	0x08017420
 800b400:	08017448 	.word	0x08017448
 800b404:	0801747c 	.word	0x0801747c
 800b408:	080174a8 	.word	0x080174a8

0800b40c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af02      	add	r7, sp, #8
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	807b      	strh	r3, [r7, #2]
 800b418:	4613      	mov	r3, r2
 800b41a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b41c:	883b      	ldrh	r3, [r7, #0]
 800b41e:	2b41      	cmp	r3, #65	@ 0x41
 800b420:	d009      	beq.n	800b436 <pbuf_alloc_reference+0x2a>
 800b422:	883b      	ldrh	r3, [r7, #0]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d006      	beq.n	800b436 <pbuf_alloc_reference+0x2a>
 800b428:	4b0f      	ldr	r3, [pc, #60]	@ (800b468 <pbuf_alloc_reference+0x5c>)
 800b42a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b42e:	490f      	ldr	r1, [pc, #60]	@ (800b46c <pbuf_alloc_reference+0x60>)
 800b430:	480f      	ldr	r0, [pc, #60]	@ (800b470 <pbuf_alloc_reference+0x64>)
 800b432:	f009 ff17 	bl	8015264 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b436:	200b      	movs	r0, #11
 800b438:	f7ff fabc 	bl	800a9b4 <memp_malloc>
 800b43c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b444:	2300      	movs	r3, #0
 800b446:	e00b      	b.n	800b460 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b448:	8879      	ldrh	r1, [r7, #2]
 800b44a:	887a      	ldrh	r2, [r7, #2]
 800b44c:	2300      	movs	r3, #0
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	883b      	ldrh	r3, [r7, #0]
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	460b      	mov	r3, r1
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f7ff feb7 	bl	800b1cc <pbuf_init_alloced_pbuf>
  return p;
 800b45e:	68fb      	ldr	r3, [r7, #12]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	080173c0 	.word	0x080173c0
 800b46c:	080174c4 	.word	0x080174c4
 800b470:	08017420 	.word	0x08017420

0800b474 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af02      	add	r7, sp, #8
 800b47a:	607b      	str	r3, [r7, #4]
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
 800b480:	460b      	mov	r3, r1
 800b482:	81bb      	strh	r3, [r7, #12]
 800b484:	4613      	mov	r3, r2
 800b486:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
 800b48a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b48c:	8a7b      	ldrh	r3, [r7, #18]
 800b48e:	3303      	adds	r3, #3
 800b490:	f023 0203 	bic.w	r2, r3, #3
 800b494:	89bb      	ldrh	r3, [r7, #12]
 800b496:	441a      	add	r2, r3
 800b498:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d901      	bls.n	800b4a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e018      	b.n	800b4d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d007      	beq.n	800b4b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b4a8:	8a7b      	ldrh	r3, [r7, #18]
 800b4aa:	3303      	adds	r3, #3
 800b4ac:	f023 0303 	bic.w	r3, r3, #3
 800b4b0:	6a3a      	ldr	r2, [r7, #32]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	617b      	str	r3, [r7, #20]
 800b4b6:	e001      	b.n	800b4bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	89b9      	ldrh	r1, [r7, #12]
 800b4c0:	89ba      	ldrh	r2, [r7, #12]
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	897b      	ldrh	r3, [r7, #10]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	6979      	ldr	r1, [r7, #20]
 800b4ce:	f7ff fe7d 	bl	800b1cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b4d2:	687b      	ldr	r3, [r7, #4]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3718      	adds	r7, #24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <pbuf_realloc+0x20>
 800b4ee:	4b3a      	ldr	r3, [pc, #232]	@ (800b5d8 <pbuf_realloc+0xfc>)
 800b4f0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b4f4:	4939      	ldr	r1, [pc, #228]	@ (800b5dc <pbuf_realloc+0x100>)
 800b4f6:	483a      	ldr	r0, [pc, #232]	@ (800b5e0 <pbuf_realloc+0x104>)
 800b4f8:	f009 feb4 	bl	8015264 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	891b      	ldrh	r3, [r3, #8]
 800b500:	887a      	ldrh	r2, [r7, #2]
 800b502:	429a      	cmp	r2, r3
 800b504:	d263      	bcs.n	800b5ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	891a      	ldrh	r2, [r3, #8]
 800b50a:	887b      	ldrh	r3, [r7, #2]
 800b50c:	1ad3      	subs	r3, r2, r3
 800b50e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b510:	887b      	ldrh	r3, [r7, #2]
 800b512:	817b      	strh	r3, [r7, #10]
  q = p;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b518:	e018      	b.n	800b54c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	895b      	ldrh	r3, [r3, #10]
 800b51e:	897a      	ldrh	r2, [r7, #10]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	891a      	ldrh	r2, [r3, #8]
 800b528:	893b      	ldrh	r3, [r7, #8]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d106      	bne.n	800b54c <pbuf_realloc+0x70>
 800b53e:	4b26      	ldr	r3, [pc, #152]	@ (800b5d8 <pbuf_realloc+0xfc>)
 800b540:	f240 12af 	movw	r2, #431	@ 0x1af
 800b544:	4927      	ldr	r1, [pc, #156]	@ (800b5e4 <pbuf_realloc+0x108>)
 800b546:	4826      	ldr	r0, [pc, #152]	@ (800b5e0 <pbuf_realloc+0x104>)
 800b548:	f009 fe8c 	bl	8015264 <iprintf>
  while (rem_len > q->len) {
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	895b      	ldrh	r3, [r3, #10]
 800b550:	897a      	ldrh	r2, [r7, #10]
 800b552:	429a      	cmp	r2, r3
 800b554:	d8e1      	bhi.n	800b51a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	7b1b      	ldrb	r3, [r3, #12]
 800b55a:	f003 030f 	and.w	r3, r3, #15
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d121      	bne.n	800b5a6 <pbuf_realloc+0xca>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	895b      	ldrh	r3, [r3, #10]
 800b566:	897a      	ldrh	r2, [r7, #10]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d01c      	beq.n	800b5a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	7b5b      	ldrb	r3, [r3, #13]
 800b570:	f003 0302 	and.w	r3, r3, #2
 800b574:	2b00      	cmp	r3, #0
 800b576:	d116      	bne.n	800b5a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	b29a      	uxth	r2, r3
 800b582:	897b      	ldrh	r3, [r7, #10]
 800b584:	4413      	add	r3, r2
 800b586:	b29b      	uxth	r3, r3
 800b588:	4619      	mov	r1, r3
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7fe ff64 	bl	800a458 <mem_trim>
 800b590:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d106      	bne.n	800b5a6 <pbuf_realloc+0xca>
 800b598:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d8 <pbuf_realloc+0xfc>)
 800b59a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b59e:	4912      	ldr	r1, [pc, #72]	@ (800b5e8 <pbuf_realloc+0x10c>)
 800b5a0:	480f      	ldr	r0, [pc, #60]	@ (800b5e0 <pbuf_realloc+0x104>)
 800b5a2:	f009 fe5f 	bl	8015264 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	897a      	ldrh	r2, [r7, #10]
 800b5aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	895a      	ldrh	r2, [r3, #10]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d004      	beq.n	800b5c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 f911 	bl	800b7e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	e000      	b.n	800b5d0 <pbuf_realloc+0xf4>
    return;
 800b5ce:	bf00      	nop

}
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	080173c0 	.word	0x080173c0
 800b5dc:	080174d8 	.word	0x080174d8
 800b5e0:	08017420 	.word	0x08017420
 800b5e4:	080174f0 	.word	0x080174f0
 800b5e8:	08017508 	.word	0x08017508

0800b5ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d106      	bne.n	800b60e <pbuf_add_header_impl+0x22>
 800b600:	4b2b      	ldr	r3, [pc, #172]	@ (800b6b0 <pbuf_add_header_impl+0xc4>)
 800b602:	f240 12df 	movw	r2, #479	@ 0x1df
 800b606:	492b      	ldr	r1, [pc, #172]	@ (800b6b4 <pbuf_add_header_impl+0xc8>)
 800b608:	482b      	ldr	r0, [pc, #172]	@ (800b6b8 <pbuf_add_header_impl+0xcc>)
 800b60a:	f009 fe2b 	bl	8015264 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d003      	beq.n	800b61c <pbuf_add_header_impl+0x30>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b61a:	d301      	bcc.n	800b620 <pbuf_add_header_impl+0x34>
    return 1;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e043      	b.n	800b6a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <pbuf_add_header_impl+0x3e>
    return 0;
 800b626:	2300      	movs	r3, #0
 800b628:	e03e      	b.n	800b6a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	891a      	ldrh	r2, [r3, #8]
 800b632:	8a7b      	ldrh	r3, [r7, #18]
 800b634:	4413      	add	r3, r2
 800b636:	b29b      	uxth	r3, r3
 800b638:	8a7a      	ldrh	r2, [r7, #18]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d901      	bls.n	800b642 <pbuf_add_header_impl+0x56>
    return 1;
 800b63e:	2301      	movs	r3, #1
 800b640:	e032      	b.n	800b6a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	7b1b      	ldrb	r3, [r3, #12]
 800b646:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b648:	8a3b      	ldrh	r3, [r7, #16]
 800b64a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00c      	beq.n	800b66c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	425b      	negs	r3, r3
 800b65a:	4413      	add	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3310      	adds	r3, #16
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	429a      	cmp	r2, r3
 800b666:	d20d      	bcs.n	800b684 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b668:	2301      	movs	r3, #1
 800b66a:	e01d      	b.n	800b6a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d006      	beq.n	800b680 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	425b      	negs	r3, r3
 800b67a:	4413      	add	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]
 800b67e:	e001      	b.n	800b684 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b680:	2301      	movs	r3, #1
 800b682:	e011      	b.n	800b6a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	895a      	ldrh	r2, [r3, #10]
 800b68e:	8a7b      	ldrh	r3, [r7, #18]
 800b690:	4413      	add	r3, r2
 800b692:	b29a      	uxth	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	891a      	ldrh	r2, [r3, #8]
 800b69c:	8a7b      	ldrh	r3, [r7, #18]
 800b69e:	4413      	add	r3, r2
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	080173c0 	.word	0x080173c0
 800b6b4:	08017524 	.word	0x08017524
 800b6b8:	08017420 	.word	0x08017420

0800b6bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7ff ff8e 	bl	800b5ec <pbuf_add_header_impl>
 800b6d0:	4603      	mov	r3, r0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
	...

0800b6dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d106      	bne.n	800b6fa <pbuf_remove_header+0x1e>
 800b6ec:	4b20      	ldr	r3, [pc, #128]	@ (800b770 <pbuf_remove_header+0x94>)
 800b6ee:	f240 224b 	movw	r2, #587	@ 0x24b
 800b6f2:	4920      	ldr	r1, [pc, #128]	@ (800b774 <pbuf_remove_header+0x98>)
 800b6f4:	4820      	ldr	r0, [pc, #128]	@ (800b778 <pbuf_remove_header+0x9c>)
 800b6f6:	f009 fdb5 	bl	8015264 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <pbuf_remove_header+0x2c>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b706:	d301      	bcc.n	800b70c <pbuf_remove_header+0x30>
    return 1;
 800b708:	2301      	movs	r3, #1
 800b70a:	e02c      	b.n	800b766 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d101      	bne.n	800b716 <pbuf_remove_header+0x3a>
    return 0;
 800b712:	2300      	movs	r3, #0
 800b714:	e027      	b.n	800b766 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	895b      	ldrh	r3, [r3, #10]
 800b71e:	89fa      	ldrh	r2, [r7, #14]
 800b720:	429a      	cmp	r2, r3
 800b722:	d908      	bls.n	800b736 <pbuf_remove_header+0x5a>
 800b724:	4b12      	ldr	r3, [pc, #72]	@ (800b770 <pbuf_remove_header+0x94>)
 800b726:	f240 2255 	movw	r2, #597	@ 0x255
 800b72a:	4914      	ldr	r1, [pc, #80]	@ (800b77c <pbuf_remove_header+0xa0>)
 800b72c:	4812      	ldr	r0, [pc, #72]	@ (800b778 <pbuf_remove_header+0x9c>)
 800b72e:	f009 fd99 	bl	8015264 <iprintf>
 800b732:	2301      	movs	r3, #1
 800b734:	e017      	b.n	800b766 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	441a      	add	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	895a      	ldrh	r2, [r3, #10]
 800b74c:	89fb      	ldrh	r3, [r7, #14]
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	b29a      	uxth	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	891a      	ldrh	r2, [r3, #8]
 800b75a:	89fb      	ldrh	r3, [r7, #14]
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	b29a      	uxth	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	080173c0 	.word	0x080173c0
 800b774:	08017524 	.word	0x08017524
 800b778:	08017420 	.word	0x08017420
 800b77c:	08017530 	.word	0x08017530

0800b780 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	807b      	strh	r3, [r7, #2]
 800b78c:	4613      	mov	r3, r2
 800b78e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b790:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b794:	2b00      	cmp	r3, #0
 800b796:	da08      	bge.n	800b7aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b79c:	425b      	negs	r3, r3
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff ff9b 	bl	800b6dc <pbuf_remove_header>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	e007      	b.n	800b7ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b7aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7ae:	787a      	ldrb	r2, [r7, #1]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff ff1a 	bl	800b5ec <pbuf_add_header_impl>
 800b7b8:	4603      	mov	r3, r0
  }
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b7ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7ff ffd2 	bl	800b780 <pbuf_header_impl>
 800b7dc:	4603      	mov	r3, r0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10b      	bne.n	800b80e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <pbuf_free+0x22>
 800b7fc:	4b3b      	ldr	r3, [pc, #236]	@ (800b8ec <pbuf_free+0x104>)
 800b7fe:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b802:	493b      	ldr	r1, [pc, #236]	@ (800b8f0 <pbuf_free+0x108>)
 800b804:	483b      	ldr	r0, [pc, #236]	@ (800b8f4 <pbuf_free+0x10c>)
 800b806:	f009 fd2d 	bl	8015264 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	e069      	b.n	800b8e2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b812:	e062      	b.n	800b8da <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b814:	f009 fc08 	bl	8015028 <sys_arch_protect>
 800b818:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	7b9b      	ldrb	r3, [r3, #14]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d106      	bne.n	800b830 <pbuf_free+0x48>
 800b822:	4b32      	ldr	r3, [pc, #200]	@ (800b8ec <pbuf_free+0x104>)
 800b824:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b828:	4933      	ldr	r1, [pc, #204]	@ (800b8f8 <pbuf_free+0x110>)
 800b82a:	4832      	ldr	r0, [pc, #200]	@ (800b8f4 <pbuf_free+0x10c>)
 800b82c:	f009 fd1a 	bl	8015264 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	7b9b      	ldrb	r3, [r3, #14]
 800b834:	3b01      	subs	r3, #1
 800b836:	b2da      	uxtb	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	739a      	strb	r2, [r3, #14]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	7b9b      	ldrb	r3, [r3, #14]
 800b840:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b842:	69b8      	ldr	r0, [r7, #24]
 800b844:	f009 fbfe 	bl	8015044 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d143      	bne.n	800b8d6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	7b1b      	ldrb	r3, [r3, #12]
 800b858:	f003 030f 	and.w	r3, r3, #15
 800b85c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	7b5b      	ldrb	r3, [r3, #13]
 800b862:	f003 0302 	and.w	r3, r3, #2
 800b866:	2b00      	cmp	r3, #0
 800b868:	d011      	beq.n	800b88e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <pbuf_free+0x9c>
 800b876:	4b1d      	ldr	r3, [pc, #116]	@ (800b8ec <pbuf_free+0x104>)
 800b878:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b87c:	491f      	ldr	r1, [pc, #124]	@ (800b8fc <pbuf_free+0x114>)
 800b87e:	481d      	ldr	r0, [pc, #116]	@ (800b8f4 <pbuf_free+0x10c>)
 800b880:	f009 fcf0 	bl	8015264 <iprintf>
        pc->custom_free_function(p);
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	4798      	blx	r3
 800b88c:	e01d      	b.n	800b8ca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	2b02      	cmp	r3, #2
 800b892:	d104      	bne.n	800b89e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	200c      	movs	r0, #12
 800b898:	f7ff f902 	bl	800aaa0 <memp_free>
 800b89c:	e015      	b.n	800b8ca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d104      	bne.n	800b8ae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b8a4:	6879      	ldr	r1, [r7, #4]
 800b8a6:	200b      	movs	r0, #11
 800b8a8:	f7ff f8fa 	bl	800aaa0 <memp_free>
 800b8ac:	e00d      	b.n	800b8ca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b8ae:	7bfb      	ldrb	r3, [r7, #15]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d103      	bne.n	800b8bc <pbuf_free+0xd4>
          mem_free(p);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7fe fd3f 	bl	800a338 <mem_free>
 800b8ba:	e006      	b.n	800b8ca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b8bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b8ec <pbuf_free+0x104>)
 800b8be:	f240 320f 	movw	r2, #783	@ 0x30f
 800b8c2:	490f      	ldr	r1, [pc, #60]	@ (800b900 <pbuf_free+0x118>)
 800b8c4:	480b      	ldr	r0, [pc, #44]	@ (800b8f4 <pbuf_free+0x10c>)
 800b8c6:	f009 fccd 	bl	8015264 <iprintf>
        }
      }
      count++;
 800b8ca:	7ffb      	ldrb	r3, [r7, #31]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	607b      	str	r3, [r7, #4]
 800b8d4:	e001      	b.n	800b8da <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d199      	bne.n	800b814 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b8e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3720      	adds	r7, #32
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	080173c0 	.word	0x080173c0
 800b8f0:	08017524 	.word	0x08017524
 800b8f4:	08017420 	.word	0x08017420
 800b8f8:	08017550 	.word	0x08017550
 800b8fc:	08017568 	.word	0x08017568
 800b900:	0801758c 	.word	0x0801758c

0800b904 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b910:	e005      	b.n	800b91e <pbuf_clen+0x1a>
    ++len;
 800b912:	89fb      	ldrh	r3, [r7, #14]
 800b914:	3301      	adds	r3, #1
 800b916:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1f6      	bne.n	800b912 <pbuf_clen+0xe>
  }
  return len;
 800b924:	89fb      	ldrh	r3, [r7, #14]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
	...

0800b934 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d016      	beq.n	800b970 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b942:	f009 fb71 	bl	8015028 <sys_arch_protect>
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	7b9b      	ldrb	r3, [r3, #14]
 800b94c:	3301      	adds	r3, #1
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	739a      	strb	r2, [r3, #14]
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f009 fb75 	bl	8015044 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	7b9b      	ldrb	r3, [r3, #14]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <pbuf_ref+0x3c>
 800b962:	4b05      	ldr	r3, [pc, #20]	@ (800b978 <pbuf_ref+0x44>)
 800b964:	f240 3242 	movw	r2, #834	@ 0x342
 800b968:	4904      	ldr	r1, [pc, #16]	@ (800b97c <pbuf_ref+0x48>)
 800b96a:	4805      	ldr	r0, [pc, #20]	@ (800b980 <pbuf_ref+0x4c>)
 800b96c:	f009 fc7a 	bl	8015264 <iprintf>
  }
}
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	080173c0 	.word	0x080173c0
 800b97c:	080175a0 	.word	0x080175a0
 800b980:	08017420 	.word	0x08017420

0800b984 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <pbuf_cat+0x16>
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d107      	bne.n	800b9aa <pbuf_cat+0x26>
 800b99a:	4b20      	ldr	r3, [pc, #128]	@ (800ba1c <pbuf_cat+0x98>)
 800b99c:	f240 3259 	movw	r2, #857	@ 0x359
 800b9a0:	491f      	ldr	r1, [pc, #124]	@ (800ba20 <pbuf_cat+0x9c>)
 800b9a2:	4820      	ldr	r0, [pc, #128]	@ (800ba24 <pbuf_cat+0xa0>)
 800b9a4:	f009 fc5e 	bl	8015264 <iprintf>
 800b9a8:	e034      	b.n	800ba14 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	60fb      	str	r3, [r7, #12]
 800b9ae:	e00a      	b.n	800b9c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	891a      	ldrh	r2, [r3, #8]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	891b      	ldrh	r3, [r3, #8]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d1f0      	bne.n	800b9b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	891a      	ldrh	r2, [r3, #8]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	895b      	ldrh	r3, [r3, #10]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d006      	beq.n	800b9e8 <pbuf_cat+0x64>
 800b9da:	4b10      	ldr	r3, [pc, #64]	@ (800ba1c <pbuf_cat+0x98>)
 800b9dc:	f240 3262 	movw	r2, #866	@ 0x362
 800b9e0:	4911      	ldr	r1, [pc, #68]	@ (800ba28 <pbuf_cat+0xa4>)
 800b9e2:	4810      	ldr	r0, [pc, #64]	@ (800ba24 <pbuf_cat+0xa0>)
 800b9e4:	f009 fc3e 	bl	8015264 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d006      	beq.n	800b9fe <pbuf_cat+0x7a>
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800ba1c <pbuf_cat+0x98>)
 800b9f2:	f240 3263 	movw	r2, #867	@ 0x363
 800b9f6:	490d      	ldr	r1, [pc, #52]	@ (800ba2c <pbuf_cat+0xa8>)
 800b9f8:	480a      	ldr	r0, [pc, #40]	@ (800ba24 <pbuf_cat+0xa0>)
 800b9fa:	f009 fc33 	bl	8015264 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	891a      	ldrh	r2, [r3, #8]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	891b      	ldrh	r3, [r3, #8]
 800ba06:	4413      	add	r3, r2
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	683a      	ldr	r2, [r7, #0]
 800ba12:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	080173c0 	.word	0x080173c0
 800ba20:	080175b4 	.word	0x080175b4
 800ba24:	08017420 	.word	0x08017420
 800ba28:	080175ec 	.word	0x080175ec
 800ba2c:	0801761c 	.word	0x0801761c

0800ba30 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d008      	beq.n	800ba5a <pbuf_copy+0x2a>
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d005      	beq.n	800ba5a <pbuf_copy+0x2a>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	891a      	ldrh	r2, [r3, #8]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	891b      	ldrh	r3, [r3, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d209      	bcs.n	800ba6e <pbuf_copy+0x3e>
 800ba5a:	4b57      	ldr	r3, [pc, #348]	@ (800bbb8 <pbuf_copy+0x188>)
 800ba5c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ba60:	4956      	ldr	r1, [pc, #344]	@ (800bbbc <pbuf_copy+0x18c>)
 800ba62:	4857      	ldr	r0, [pc, #348]	@ (800bbc0 <pbuf_copy+0x190>)
 800ba64:	f009 fbfe 	bl	8015264 <iprintf>
 800ba68:	f06f 030f 	mvn.w	r3, #15
 800ba6c:	e09f      	b.n	800bbae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	895b      	ldrh	r3, [r3, #10]
 800ba72:	461a      	mov	r2, r3
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	1ad2      	subs	r2, r2, r3
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	895b      	ldrh	r3, [r3, #10]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	1acb      	subs	r3, r1, r3
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d306      	bcc.n	800ba94 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	895b      	ldrh	r3, [r3, #10]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	60fb      	str	r3, [r7, #12]
 800ba92:	e005      	b.n	800baa0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	895b      	ldrh	r3, [r3, #10]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	18d0      	adds	r0, r2, r3
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	4413      	add	r3, r2
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	4619      	mov	r1, r3
 800bab4:	f009 fd19 	bl	80154ea <memcpy>
    offset_to += len;
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	4413      	add	r3, r2
 800babe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	4413      	add	r3, r2
 800bac6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	895b      	ldrh	r3, [r3, #10]
 800bacc:	461a      	mov	r2, r3
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d906      	bls.n	800bae2 <pbuf_copy+0xb2>
 800bad4:	4b38      	ldr	r3, [pc, #224]	@ (800bbb8 <pbuf_copy+0x188>)
 800bad6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800bada:	493a      	ldr	r1, [pc, #232]	@ (800bbc4 <pbuf_copy+0x194>)
 800badc:	4838      	ldr	r0, [pc, #224]	@ (800bbc0 <pbuf_copy+0x190>)
 800bade:	f009 fbc1 	bl	8015264 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	895b      	ldrh	r3, [r3, #10]
 800bae6:	461a      	mov	r2, r3
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	4293      	cmp	r3, r2
 800baec:	d906      	bls.n	800bafc <pbuf_copy+0xcc>
 800baee:	4b32      	ldr	r3, [pc, #200]	@ (800bbb8 <pbuf_copy+0x188>)
 800baf0:	f240 32da 	movw	r2, #986	@ 0x3da
 800baf4:	4934      	ldr	r1, [pc, #208]	@ (800bbc8 <pbuf_copy+0x198>)
 800baf6:	4832      	ldr	r0, [pc, #200]	@ (800bbc0 <pbuf_copy+0x190>)
 800baf8:	f009 fbb4 	bl	8015264 <iprintf>
    if (offset_from >= p_from->len) {
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	895b      	ldrh	r3, [r3, #10]
 800bb00:	461a      	mov	r2, r3
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d304      	bcc.n	800bb12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	895b      	ldrh	r3, [r3, #10]
 800bb16:	461a      	mov	r2, r3
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d114      	bne.n	800bb48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10c      	bne.n	800bb48 <pbuf_copy+0x118>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d009      	beq.n	800bb48 <pbuf_copy+0x118>
 800bb34:	4b20      	ldr	r3, [pc, #128]	@ (800bbb8 <pbuf_copy+0x188>)
 800bb36:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bb3a:	4924      	ldr	r1, [pc, #144]	@ (800bbcc <pbuf_copy+0x19c>)
 800bb3c:	4820      	ldr	r0, [pc, #128]	@ (800bbc0 <pbuf_copy+0x190>)
 800bb3e:	f009 fb91 	bl	8015264 <iprintf>
 800bb42:	f06f 030f 	mvn.w	r3, #15
 800bb46:	e032      	b.n	800bbae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d013      	beq.n	800bb76 <pbuf_copy+0x146>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	895a      	ldrh	r2, [r3, #10]
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	891b      	ldrh	r3, [r3, #8]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d10d      	bne.n	800bb76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d009      	beq.n	800bb76 <pbuf_copy+0x146>
 800bb62:	4b15      	ldr	r3, [pc, #84]	@ (800bbb8 <pbuf_copy+0x188>)
 800bb64:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bb68:	4919      	ldr	r1, [pc, #100]	@ (800bbd0 <pbuf_copy+0x1a0>)
 800bb6a:	4815      	ldr	r0, [pc, #84]	@ (800bbc0 <pbuf_copy+0x190>)
 800bb6c:	f009 fb7a 	bl	8015264 <iprintf>
 800bb70:	f06f 0305 	mvn.w	r3, #5
 800bb74:	e01b      	b.n	800bbae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d013      	beq.n	800bba4 <pbuf_copy+0x174>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	895a      	ldrh	r2, [r3, #10]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	891b      	ldrh	r3, [r3, #8]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d10d      	bne.n	800bba4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d009      	beq.n	800bba4 <pbuf_copy+0x174>
 800bb90:	4b09      	ldr	r3, [pc, #36]	@ (800bbb8 <pbuf_copy+0x188>)
 800bb92:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bb96:	490e      	ldr	r1, [pc, #56]	@ (800bbd0 <pbuf_copy+0x1a0>)
 800bb98:	4809      	ldr	r0, [pc, #36]	@ (800bbc0 <pbuf_copy+0x190>)
 800bb9a:	f009 fb63 	bl	8015264 <iprintf>
 800bb9e:	f06f 0305 	mvn.w	r3, #5
 800bba2:	e004      	b.n	800bbae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f47f af61 	bne.w	800ba6e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	080173c0 	.word	0x080173c0
 800bbbc:	08017668 	.word	0x08017668
 800bbc0:	08017420 	.word	0x08017420
 800bbc4:	08017698 	.word	0x08017698
 800bbc8:	080176b0 	.word	0x080176b0
 800bbcc:	080176cc 	.word	0x080176cc
 800bbd0:	080176dc 	.word	0x080176dc

0800bbd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	80fb      	strh	r3, [r7, #6]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d108      	bne.n	800bc0a <pbuf_copy_partial+0x36>
 800bbf8:	4b2b      	ldr	r3, [pc, #172]	@ (800bca8 <pbuf_copy_partial+0xd4>)
 800bbfa:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bbfe:	492b      	ldr	r1, [pc, #172]	@ (800bcac <pbuf_copy_partial+0xd8>)
 800bc00:	482b      	ldr	r0, [pc, #172]	@ (800bcb0 <pbuf_copy_partial+0xdc>)
 800bc02:	f009 fb2f 	bl	8015264 <iprintf>
 800bc06:	2300      	movs	r3, #0
 800bc08:	e04a      	b.n	800bca0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d108      	bne.n	800bc22 <pbuf_copy_partial+0x4e>
 800bc10:	4b25      	ldr	r3, [pc, #148]	@ (800bca8 <pbuf_copy_partial+0xd4>)
 800bc12:	f240 420b 	movw	r2, #1035	@ 0x40b
 800bc16:	4927      	ldr	r1, [pc, #156]	@ (800bcb4 <pbuf_copy_partial+0xe0>)
 800bc18:	4825      	ldr	r0, [pc, #148]	@ (800bcb0 <pbuf_copy_partial+0xdc>)
 800bc1a:	f009 fb23 	bl	8015264 <iprintf>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e03e      	b.n	800bca0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	61fb      	str	r3, [r7, #28]
 800bc26:	e034      	b.n	800bc92 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bc28:	88bb      	ldrh	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00a      	beq.n	800bc44 <pbuf_copy_partial+0x70>
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	895b      	ldrh	r3, [r3, #10]
 800bc32:	88ba      	ldrh	r2, [r7, #4]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d305      	bcc.n	800bc44 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	895b      	ldrh	r3, [r3, #10]
 800bc3c:	88ba      	ldrh	r2, [r7, #4]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	80bb      	strh	r3, [r7, #4]
 800bc42:	e023      	b.n	800bc8c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	895a      	ldrh	r2, [r3, #10]
 800bc48:	88bb      	ldrh	r3, [r7, #4]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bc4e:	8b3a      	ldrh	r2, [r7, #24]
 800bc50:	88fb      	ldrh	r3, [r7, #6]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d901      	bls.n	800bc5a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bc56:	88fb      	ldrh	r3, [r7, #6]
 800bc58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bc5a:	8b7b      	ldrh	r3, [r7, #26]
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	18d0      	adds	r0, r2, r3
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	685a      	ldr	r2, [r3, #4]
 800bc64:	88bb      	ldrh	r3, [r7, #4]
 800bc66:	4413      	add	r3, r2
 800bc68:	8b3a      	ldrh	r2, [r7, #24]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	f009 fc3d 	bl	80154ea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bc70:	8afa      	ldrh	r2, [r7, #22]
 800bc72:	8b3b      	ldrh	r3, [r7, #24]
 800bc74:	4413      	add	r3, r2
 800bc76:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bc78:	8b7a      	ldrh	r2, [r7, #26]
 800bc7a:	8b3b      	ldrh	r3, [r7, #24]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bc80:	88fa      	ldrh	r2, [r7, #6]
 800bc82:	8b3b      	ldrh	r3, [r7, #24]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	61fb      	str	r3, [r7, #28]
 800bc92:	88fb      	ldrh	r3, [r7, #6]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <pbuf_copy_partial+0xca>
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1c4      	bne.n	800bc28 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bc9e:	8afb      	ldrh	r3, [r7, #22]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3720      	adds	r7, #32
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	080173c0 	.word	0x080173c0
 800bcac:	08017708 	.word	0x08017708
 800bcb0:	08017420 	.word	0x08017420
 800bcb4:	08017728 	.word	0x08017728

0800bcb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	603a      	str	r2, [r7, #0]
 800bcc2:	71fb      	strb	r3, [r7, #7]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	8919      	ldrh	r1, [r3, #8]
 800bccc:	88ba      	ldrh	r2, [r7, #4]
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff faa5 	bl	800b220 <pbuf_alloc>
 800bcd6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <pbuf_clone+0x2a>
    return NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	e011      	b.n	800bd06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f7ff fea3 	bl	800ba30 <pbuf_copy>
 800bcea:	4603      	mov	r3, r0
 800bcec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bcee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d006      	beq.n	800bd04 <pbuf_clone+0x4c>
 800bcf6:	4b06      	ldr	r3, [pc, #24]	@ (800bd10 <pbuf_clone+0x58>)
 800bcf8:	f240 5224 	movw	r2, #1316	@ 0x524
 800bcfc:	4905      	ldr	r1, [pc, #20]	@ (800bd14 <pbuf_clone+0x5c>)
 800bcfe:	4806      	ldr	r0, [pc, #24]	@ (800bd18 <pbuf_clone+0x60>)
 800bd00:	f009 fab0 	bl	8015264 <iprintf>
  return q;
 800bd04:	68fb      	ldr	r3, [r7, #12]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	080173c0 	.word	0x080173c0
 800bd14:	08017834 	.word	0x08017834
 800bd18:	08017420 	.word	0x08017420

0800bd1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bd20:	f009 f9a0 	bl	8015064 <rand>
 800bd24:	4603      	mov	r3, r0
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	4b01      	ldr	r3, [pc, #4]	@ (800bd3c <tcp_init+0x20>)
 800bd36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bd38:	bf00      	nop
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20000024 	.word	0x20000024

0800bd40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	7d1b      	ldrb	r3, [r3, #20]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d105      	bne.n	800bd5c <tcp_free+0x1c>
 800bd50:	4b06      	ldr	r3, [pc, #24]	@ (800bd6c <tcp_free+0x2c>)
 800bd52:	22d4      	movs	r2, #212	@ 0xd4
 800bd54:	4906      	ldr	r1, [pc, #24]	@ (800bd70 <tcp_free+0x30>)
 800bd56:	4807      	ldr	r0, [pc, #28]	@ (800bd74 <tcp_free+0x34>)
 800bd58:	f009 fa84 	bl	8015264 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bd5c:	6879      	ldr	r1, [r7, #4]
 800bd5e:	2001      	movs	r0, #1
 800bd60:	f7fe fe9e 	bl	800aaa0 <memp_free>
}
 800bd64:	bf00      	nop
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	080178c0 	.word	0x080178c0
 800bd70:	080178f0 	.word	0x080178f0
 800bd74:	08017904 	.word	0x08017904

0800bd78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	7d1b      	ldrb	r3, [r3, #20]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d105      	bne.n	800bd94 <tcp_free_listen+0x1c>
 800bd88:	4b06      	ldr	r3, [pc, #24]	@ (800bda4 <tcp_free_listen+0x2c>)
 800bd8a:	22df      	movs	r2, #223	@ 0xdf
 800bd8c:	4906      	ldr	r1, [pc, #24]	@ (800bda8 <tcp_free_listen+0x30>)
 800bd8e:	4807      	ldr	r0, [pc, #28]	@ (800bdac <tcp_free_listen+0x34>)
 800bd90:	f009 fa68 	bl	8015264 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	2002      	movs	r0, #2
 800bd98:	f7fe fe82 	bl	800aaa0 <memp_free>
}
 800bd9c:	bf00      	nop
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	080178c0 	.word	0x080178c0
 800bda8:	0801792c 	.word	0x0801792c
 800bdac:	08017904 	.word	0x08017904

0800bdb0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bdb4:	f001 f8a8 	bl	800cf08 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bdb8:	4b07      	ldr	r3, [pc, #28]	@ (800bdd8 <tcp_tmr+0x28>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	4b05      	ldr	r3, [pc, #20]	@ (800bdd8 <tcp_tmr+0x28>)
 800bdc2:	701a      	strb	r2, [r3, #0]
 800bdc4:	4b04      	ldr	r3, [pc, #16]	@ (800bdd8 <tcp_tmr+0x28>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bdd0:	f000 fd58 	bl	800c884 <tcp_slowtmr>
  }
}
 800bdd4:	bf00      	nop
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	2000be7d 	.word	0x2000be7d

0800bddc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d105      	bne.n	800bdf8 <tcp_remove_listener+0x1c>
 800bdec:	4b0d      	ldr	r3, [pc, #52]	@ (800be24 <tcp_remove_listener+0x48>)
 800bdee:	22ff      	movs	r2, #255	@ 0xff
 800bdf0:	490d      	ldr	r1, [pc, #52]	@ (800be28 <tcp_remove_listener+0x4c>)
 800bdf2:	480e      	ldr	r0, [pc, #56]	@ (800be2c <tcp_remove_listener+0x50>)
 800bdf4:	f009 fa36 	bl	8015264 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	60fb      	str	r3, [r7, #12]
 800bdfc:	e00a      	b.n	800be14 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d102      	bne.n	800be0e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2200      	movs	r2, #0
 800be0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1f1      	bne.n	800bdfe <tcp_remove_listener+0x22>
    }
  }
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	080178c0 	.word	0x080178c0
 800be28:	08017948 	.word	0x08017948
 800be2c:	08017904 	.word	0x08017904

0800be30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d106      	bne.n	800be4c <tcp_listen_closed+0x1c>
 800be3e:	4b14      	ldr	r3, [pc, #80]	@ (800be90 <tcp_listen_closed+0x60>)
 800be40:	f240 1211 	movw	r2, #273	@ 0x111
 800be44:	4913      	ldr	r1, [pc, #76]	@ (800be94 <tcp_listen_closed+0x64>)
 800be46:	4814      	ldr	r0, [pc, #80]	@ (800be98 <tcp_listen_closed+0x68>)
 800be48:	f009 fa0c 	bl	8015264 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	7d1b      	ldrb	r3, [r3, #20]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d006      	beq.n	800be62 <tcp_listen_closed+0x32>
 800be54:	4b0e      	ldr	r3, [pc, #56]	@ (800be90 <tcp_listen_closed+0x60>)
 800be56:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800be5a:	4910      	ldr	r1, [pc, #64]	@ (800be9c <tcp_listen_closed+0x6c>)
 800be5c:	480e      	ldr	r0, [pc, #56]	@ (800be98 <tcp_listen_closed+0x68>)
 800be5e:	f009 fa01 	bl	8015264 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800be62:	2301      	movs	r3, #1
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e00b      	b.n	800be80 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800be68:	4a0d      	ldr	r2, [pc, #52]	@ (800bea0 <tcp_listen_closed+0x70>)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	4618      	mov	r0, r3
 800be76:	f7ff ffb1 	bl	800bddc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3301      	adds	r3, #1
 800be7e:	60fb      	str	r3, [r7, #12]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2b03      	cmp	r3, #3
 800be84:	d9f0      	bls.n	800be68 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800be86:	bf00      	nop
 800be88:	bf00      	nop
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	080178c0 	.word	0x080178c0
 800be94:	08017970 	.word	0x08017970
 800be98:	08017904 	.word	0x08017904
 800be9c:	0801797c 	.word	0x0801797c
 800bea0:	08022ba4 	.word	0x08022ba4

0800bea4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bea4:	b5b0      	push	{r4, r5, r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af04      	add	r7, sp, #16
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d106      	bne.n	800bec4 <tcp_close_shutdown+0x20>
 800beb6:	4b63      	ldr	r3, [pc, #396]	@ (800c044 <tcp_close_shutdown+0x1a0>)
 800beb8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800bebc:	4962      	ldr	r1, [pc, #392]	@ (800c048 <tcp_close_shutdown+0x1a4>)
 800bebe:	4863      	ldr	r0, [pc, #396]	@ (800c04c <tcp_close_shutdown+0x1a8>)
 800bec0:	f009 f9d0 	bl	8015264 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bec4:	78fb      	ldrb	r3, [r7, #3]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d066      	beq.n	800bf98 <tcp_close_shutdown+0xf4>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7d1b      	ldrb	r3, [r3, #20]
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d003      	beq.n	800beda <tcp_close_shutdown+0x36>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7d1b      	ldrb	r3, [r3, #20]
 800bed6:	2b07      	cmp	r3, #7
 800bed8:	d15e      	bne.n	800bf98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d104      	bne.n	800beec <tcp_close_shutdown+0x48>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bee6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800beea:	d055      	beq.n	800bf98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	8b5b      	ldrh	r3, [r3, #26]
 800bef0:	f003 0310 	and.w	r3, r3, #16
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d106      	bne.n	800bf06 <tcp_close_shutdown+0x62>
 800bef8:	4b52      	ldr	r3, [pc, #328]	@ (800c044 <tcp_close_shutdown+0x1a0>)
 800befa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800befe:	4954      	ldr	r1, [pc, #336]	@ (800c050 <tcp_close_shutdown+0x1ac>)
 800bf00:	4852      	ldr	r0, [pc, #328]	@ (800c04c <tcp_close_shutdown+0x1a8>)
 800bf02:	f009 f9af 	bl	8015264 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bf0e:	687d      	ldr	r5, [r7, #4]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	3304      	adds	r3, #4
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	8ad2      	ldrh	r2, [r2, #22]
 800bf18:	6879      	ldr	r1, [r7, #4]
 800bf1a:	8b09      	ldrh	r1, [r1, #24]
 800bf1c:	9102      	str	r1, [sp, #8]
 800bf1e:	9201      	str	r2, [sp, #4]
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	462b      	mov	r3, r5
 800bf24:	4622      	mov	r2, r4
 800bf26:	4601      	mov	r1, r0
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f005 fdb7 	bl	8011a9c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f001 fb9a 	bl	800d668 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bf34:	4b47      	ldr	r3, [pc, #284]	@ (800c054 <tcp_close_shutdown+0x1b0>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d105      	bne.n	800bf4a <tcp_close_shutdown+0xa6>
 800bf3e:	4b45      	ldr	r3, [pc, #276]	@ (800c054 <tcp_close_shutdown+0x1b0>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	4a43      	ldr	r2, [pc, #268]	@ (800c054 <tcp_close_shutdown+0x1b0>)
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	e013      	b.n	800bf72 <tcp_close_shutdown+0xce>
 800bf4a:	4b42      	ldr	r3, [pc, #264]	@ (800c054 <tcp_close_shutdown+0x1b0>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]
 800bf50:	e00c      	b.n	800bf6c <tcp_close_shutdown+0xc8>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d104      	bne.n	800bf66 <tcp_close_shutdown+0xc2>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	68da      	ldr	r2, [r3, #12]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	60da      	str	r2, [r3, #12]
 800bf64:	e005      	b.n	800bf72 <tcp_close_shutdown+0xce>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	60fb      	str	r3, [r7, #12]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1ef      	bne.n	800bf52 <tcp_close_shutdown+0xae>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	60da      	str	r2, [r3, #12]
 800bf78:	4b37      	ldr	r3, [pc, #220]	@ (800c058 <tcp_close_shutdown+0x1b4>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bf7e:	4b37      	ldr	r3, [pc, #220]	@ (800c05c <tcp_close_shutdown+0x1b8>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d102      	bne.n	800bf8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bf88:	f004 f82e 	bl	800ffe8 <tcp_trigger_input_pcb_close>
 800bf8c:	e002      	b.n	800bf94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff fed6 	bl	800bd40 <tcp_free>
      }
      return ERR_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	e050      	b.n	800c03a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	7d1b      	ldrb	r3, [r3, #20]
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d03b      	beq.n	800c018 <tcp_close_shutdown+0x174>
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	dc44      	bgt.n	800c02e <tcp_close_shutdown+0x18a>
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <tcp_close_shutdown+0x10a>
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d02a      	beq.n	800c002 <tcp_close_shutdown+0x15e>
 800bfac:	e03f      	b.n	800c02e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	8adb      	ldrh	r3, [r3, #22]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d021      	beq.n	800bffa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bfb6:	4b2a      	ldr	r3, [pc, #168]	@ (800c060 <tcp_close_shutdown+0x1bc>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d105      	bne.n	800bfcc <tcp_close_shutdown+0x128>
 800bfc0:	4b27      	ldr	r3, [pc, #156]	@ (800c060 <tcp_close_shutdown+0x1bc>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	4a26      	ldr	r2, [pc, #152]	@ (800c060 <tcp_close_shutdown+0x1bc>)
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	e013      	b.n	800bff4 <tcp_close_shutdown+0x150>
 800bfcc:	4b24      	ldr	r3, [pc, #144]	@ (800c060 <tcp_close_shutdown+0x1bc>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60bb      	str	r3, [r7, #8]
 800bfd2:	e00c      	b.n	800bfee <tcp_close_shutdown+0x14a>
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d104      	bne.n	800bfe8 <tcp_close_shutdown+0x144>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68da      	ldr	r2, [r3, #12]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	e005      	b.n	800bff4 <tcp_close_shutdown+0x150>
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	60bb      	str	r3, [r7, #8]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1ef      	bne.n	800bfd4 <tcp_close_shutdown+0x130>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fea0 	bl	800bd40 <tcp_free>
      break;
 800c000:	e01a      	b.n	800c038 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff ff14 	bl	800be30 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	4816      	ldr	r0, [pc, #88]	@ (800c064 <tcp_close_shutdown+0x1c0>)
 800c00c:	f001 fb7c 	bl	800d708 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff feb1 	bl	800bd78 <tcp_free_listen>
      break;
 800c016:	e00f      	b.n	800c038 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c018:	6879      	ldr	r1, [r7, #4]
 800c01a:	480e      	ldr	r0, [pc, #56]	@ (800c054 <tcp_close_shutdown+0x1b0>)
 800c01c:	f001 fb74 	bl	800d708 <tcp_pcb_remove>
 800c020:	4b0d      	ldr	r3, [pc, #52]	@ (800c058 <tcp_close_shutdown+0x1b4>)
 800c022:	2201      	movs	r2, #1
 800c024:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7ff fe8a 	bl	800bd40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c02c:	e004      	b.n	800c038 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f81a 	bl	800c068 <tcp_close_shutdown_fin>
 800c034:	4603      	mov	r3, r0
 800c036:	e000      	b.n	800c03a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bdb0      	pop	{r4, r5, r7, pc}
 800c042:	bf00      	nop
 800c044:	080178c0 	.word	0x080178c0
 800c048:	08017994 	.word	0x08017994
 800c04c:	08017904 	.word	0x08017904
 800c050:	080179b4 	.word	0x080179b4
 800c054:	2000be74 	.word	0x2000be74
 800c058:	2000be7c 	.word	0x2000be7c
 800c05c:	2000beb4 	.word	0x2000beb4
 800c060:	2000be6c 	.word	0x2000be6c
 800c064:	2000be70 	.word	0x2000be70

0800c068 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <tcp_close_shutdown_fin+0x1c>
 800c076:	4b2e      	ldr	r3, [pc, #184]	@ (800c130 <tcp_close_shutdown_fin+0xc8>)
 800c078:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c07c:	492d      	ldr	r1, [pc, #180]	@ (800c134 <tcp_close_shutdown_fin+0xcc>)
 800c07e:	482e      	ldr	r0, [pc, #184]	@ (800c138 <tcp_close_shutdown_fin+0xd0>)
 800c080:	f009 f8f0 	bl	8015264 <iprintf>

  switch (pcb->state) {
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	7d1b      	ldrb	r3, [r3, #20]
 800c088:	2b07      	cmp	r3, #7
 800c08a:	d020      	beq.n	800c0ce <tcp_close_shutdown_fin+0x66>
 800c08c:	2b07      	cmp	r3, #7
 800c08e:	dc2b      	bgt.n	800c0e8 <tcp_close_shutdown_fin+0x80>
 800c090:	2b03      	cmp	r3, #3
 800c092:	d002      	beq.n	800c09a <tcp_close_shutdown_fin+0x32>
 800c094:	2b04      	cmp	r3, #4
 800c096:	d00d      	beq.n	800c0b4 <tcp_close_shutdown_fin+0x4c>
 800c098:	e026      	b.n	800c0e8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f004 fe0c 	bl	8010cb8 <tcp_send_fin>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d11f      	bne.n	800c0ec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2205      	movs	r2, #5
 800c0b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0b2:	e01b      	b.n	800c0ec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f004 fdff 	bl	8010cb8 <tcp_send_fin>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c0be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d114      	bne.n	800c0f0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2205      	movs	r2, #5
 800c0ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0cc:	e010      	b.n	800c0f0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f004 fdf2 	bl	8010cb8 <tcp_send_fin>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c0d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d109      	bne.n	800c0f4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2209      	movs	r2, #9
 800c0e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0e6:	e005      	b.n	800c0f4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e01c      	b.n	800c126 <tcp_close_shutdown_fin+0xbe>
      break;
 800c0ec:	bf00      	nop
 800c0ee:	e002      	b.n	800c0f6 <tcp_close_shutdown_fin+0x8e>
      break;
 800c0f0:	bf00      	nop
 800c0f2:	e000      	b.n	800c0f6 <tcp_close_shutdown_fin+0x8e>
      break;
 800c0f4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d103      	bne.n	800c106 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f004 ff18 	bl	8010f34 <tcp_output>
 800c104:	e00d      	b.n	800c122 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d108      	bne.n	800c122 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8b5b      	ldrh	r3, [r3, #26]
 800c114:	f043 0308 	orr.w	r3, r3, #8
 800c118:	b29a      	uxth	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	e001      	b.n	800c126 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	080178c0 	.word	0x080178c0
 800c134:	08017970 	.word	0x08017970
 800c138:	08017904 	.word	0x08017904

0800c13c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <tcp_close+0x22>
 800c14a:	4b0f      	ldr	r3, [pc, #60]	@ (800c188 <tcp_close+0x4c>)
 800c14c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c150:	490e      	ldr	r1, [pc, #56]	@ (800c18c <tcp_close+0x50>)
 800c152:	480f      	ldr	r0, [pc, #60]	@ (800c190 <tcp_close+0x54>)
 800c154:	f009 f886 	bl	8015264 <iprintf>
 800c158:	f06f 030f 	mvn.w	r3, #15
 800c15c:	e00f      	b.n	800c17e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	7d1b      	ldrb	r3, [r3, #20]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d006      	beq.n	800c174 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	8b5b      	ldrh	r3, [r3, #26]
 800c16a:	f043 0310 	orr.w	r3, r3, #16
 800c16e:	b29a      	uxth	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c174:	2101      	movs	r1, #1
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7ff fe94 	bl	800bea4 <tcp_close_shutdown>
 800c17c:	4603      	mov	r3, r0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	080178c0 	.word	0x080178c0
 800c18c:	080179d0 	.word	0x080179d0
 800c190:	08017904 	.word	0x08017904

0800c194 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d109      	bne.n	800c1ba <tcp_shutdown+0x26>
 800c1a6:	4b26      	ldr	r3, [pc, #152]	@ (800c240 <tcp_shutdown+0xac>)
 800c1a8:	f240 2207 	movw	r2, #519	@ 0x207
 800c1ac:	4925      	ldr	r1, [pc, #148]	@ (800c244 <tcp_shutdown+0xb0>)
 800c1ae:	4826      	ldr	r0, [pc, #152]	@ (800c248 <tcp_shutdown+0xb4>)
 800c1b0:	f009 f858 	bl	8015264 <iprintf>
 800c1b4:	f06f 030f 	mvn.w	r3, #15
 800c1b8:	e03d      	b.n	800c236 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	7d1b      	ldrb	r3, [r3, #20]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d102      	bne.n	800c1c8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c1c2:	f06f 030a 	mvn.w	r3, #10
 800c1c6:	e036      	b.n	800c236 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d01b      	beq.n	800c206 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	8b5b      	ldrh	r3, [r3, #26]
 800c1d2:	f043 0310 	orr.w	r3, r3, #16
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d005      	beq.n	800c1ee <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f7ff fe5d 	bl	800bea4 <tcp_close_shutdown>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	e023      	b.n	800c236 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d007      	beq.n	800c206 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7ff faf4 	bl	800b7e8 <pbuf_free>
      pcb->refused_data = NULL;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d013      	beq.n	800c234 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	7d1b      	ldrb	r3, [r3, #20]
 800c210:	2b04      	cmp	r3, #4
 800c212:	dc02      	bgt.n	800c21a <tcp_shutdown+0x86>
 800c214:	2b03      	cmp	r3, #3
 800c216:	da02      	bge.n	800c21e <tcp_shutdown+0x8a>
 800c218:	e009      	b.n	800c22e <tcp_shutdown+0x9a>
 800c21a:	2b07      	cmp	r3, #7
 800c21c:	d107      	bne.n	800c22e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	b2db      	uxtb	r3, r3
 800c222:	4619      	mov	r1, r3
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7ff fe3d 	bl	800bea4 <tcp_close_shutdown>
 800c22a:	4603      	mov	r3, r0
 800c22c:	e003      	b.n	800c236 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c22e:	f06f 030a 	mvn.w	r3, #10
 800c232:	e000      	b.n	800c236 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	080178c0 	.word	0x080178c0
 800c244:	080179e8 	.word	0x080179e8
 800c248:	08017904 	.word	0x08017904

0800c24c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08e      	sub	sp, #56	@ 0x38
 800c250:	af04      	add	r7, sp, #16
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d107      	bne.n	800c26c <tcp_abandon+0x20>
 800c25c:	4b52      	ldr	r3, [pc, #328]	@ (800c3a8 <tcp_abandon+0x15c>)
 800c25e:	f240 223d 	movw	r2, #573	@ 0x23d
 800c262:	4952      	ldr	r1, [pc, #328]	@ (800c3ac <tcp_abandon+0x160>)
 800c264:	4852      	ldr	r0, [pc, #328]	@ (800c3b0 <tcp_abandon+0x164>)
 800c266:	f008 fffd 	bl	8015264 <iprintf>
 800c26a:	e099      	b.n	800c3a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	7d1b      	ldrb	r3, [r3, #20]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d106      	bne.n	800c282 <tcp_abandon+0x36>
 800c274:	4b4c      	ldr	r3, [pc, #304]	@ (800c3a8 <tcp_abandon+0x15c>)
 800c276:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c27a:	494e      	ldr	r1, [pc, #312]	@ (800c3b4 <tcp_abandon+0x168>)
 800c27c:	484c      	ldr	r0, [pc, #304]	@ (800c3b0 <tcp_abandon+0x164>)
 800c27e:	f008 fff1 	bl	8015264 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7d1b      	ldrb	r3, [r3, #20]
 800c286:	2b0a      	cmp	r3, #10
 800c288:	d107      	bne.n	800c29a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	484a      	ldr	r0, [pc, #296]	@ (800c3b8 <tcp_abandon+0x16c>)
 800c28e:	f001 fa3b 	bl	800d708 <tcp_pcb_remove>
    tcp_free(pcb);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff fd54 	bl	800bd40 <tcp_free>
 800c298:	e082      	b.n	800c3a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	7d1b      	ldrb	r3, [r3, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d126      	bne.n	800c312 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	8adb      	ldrh	r3, [r3, #22]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d02e      	beq.n	800c32a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c2cc:	4b3b      	ldr	r3, [pc, #236]	@ (800c3bc <tcp_abandon+0x170>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d105      	bne.n	800c2e2 <tcp_abandon+0x96>
 800c2d6:	4b39      	ldr	r3, [pc, #228]	@ (800c3bc <tcp_abandon+0x170>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	4a37      	ldr	r2, [pc, #220]	@ (800c3bc <tcp_abandon+0x170>)
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	e013      	b.n	800c30a <tcp_abandon+0xbe>
 800c2e2:	4b36      	ldr	r3, [pc, #216]	@ (800c3bc <tcp_abandon+0x170>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	61fb      	str	r3, [r7, #28]
 800c2e8:	e00c      	b.n	800c304 <tcp_abandon+0xb8>
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d104      	bne.n	800c2fe <tcp_abandon+0xb2>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68da      	ldr	r2, [r3, #12]
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	60da      	str	r2, [r3, #12]
 800c2fc:	e005      	b.n	800c30a <tcp_abandon+0xbe>
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	61fb      	str	r3, [r7, #28]
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1ef      	bne.n	800c2ea <tcp_abandon+0x9e>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	60da      	str	r2, [r3, #12]
 800c310:	e00b      	b.n	800c32a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	8adb      	ldrh	r3, [r3, #22]
 800c31a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	4828      	ldr	r0, [pc, #160]	@ (800c3c0 <tcp_abandon+0x174>)
 800c320:	f001 f9f2 	bl	800d708 <tcp_pcb_remove>
 800c324:	4b27      	ldr	r3, [pc, #156]	@ (800c3c4 <tcp_abandon+0x178>)
 800c326:	2201      	movs	r2, #1
 800c328:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d004      	beq.n	800c33c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c336:	4618      	mov	r0, r3
 800c338:	f000 fec6 	bl	800d0c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d004      	beq.n	800c34e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 febd 	bl	800d0c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c352:	2b00      	cmp	r3, #0
 800c354:	d004      	beq.n	800c360 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 feb4 	bl	800d0c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00e      	beq.n	800c384 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3304      	adds	r3, #4
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	8b12      	ldrh	r2, [r2, #24]
 800c370:	9202      	str	r2, [sp, #8]
 800c372:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c374:	9201      	str	r2, [sp, #4]
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	460b      	mov	r3, r1
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	69b9      	ldr	r1, [r7, #24]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f005 fb8c 	bl	8011a9c <tcp_rst>
    }
    last_state = pcb->state;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7d1b      	ldrb	r3, [r3, #20]
 800c388:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff fcd8 	bl	800bd40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d004      	beq.n	800c3a0 <tcp_abandon+0x154>
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	f06f 010c 	mvn.w	r1, #12
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	4798      	blx	r3
  }
}
 800c3a0:	3728      	adds	r7, #40	@ 0x28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	080178c0 	.word	0x080178c0
 800c3ac:	08017a04 	.word	0x08017a04
 800c3b0:	08017904 	.word	0x08017904
 800c3b4:	08017a20 	.word	0x08017a20
 800c3b8:	2000be78 	.word	0x2000be78
 800c3bc:	2000be6c 	.word	0x2000be6c
 800c3c0:	2000be74 	.word	0x2000be74
 800c3c4:	2000be7c 	.word	0x2000be7c

0800c3c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c3d0:	2101      	movs	r1, #1
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff ff3a 	bl	800c24c <tcp_abandon>
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c3ee:	2304      	movs	r3, #4
 800c3f0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c3f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4f4 <tcp_bind+0x114>)
 800c3fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d109      	bne.n	800c416 <tcp_bind+0x36>
 800c402:	4b3d      	ldr	r3, [pc, #244]	@ (800c4f8 <tcp_bind+0x118>)
 800c404:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800c408:	493c      	ldr	r1, [pc, #240]	@ (800c4fc <tcp_bind+0x11c>)
 800c40a:	483d      	ldr	r0, [pc, #244]	@ (800c500 <tcp_bind+0x120>)
 800c40c:	f008 ff2a 	bl	8015264 <iprintf>
 800c410:	f06f 030f 	mvn.w	r3, #15
 800c414:	e06a      	b.n	800c4ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	7d1b      	ldrb	r3, [r3, #20]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d009      	beq.n	800c432 <tcp_bind+0x52>
 800c41e:	4b36      	ldr	r3, [pc, #216]	@ (800c4f8 <tcp_bind+0x118>)
 800c420:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c424:	4937      	ldr	r1, [pc, #220]	@ (800c504 <tcp_bind+0x124>)
 800c426:	4836      	ldr	r0, [pc, #216]	@ (800c500 <tcp_bind+0x120>)
 800c428:	f008 ff1c 	bl	8015264 <iprintf>
 800c42c:	f06f 0305 	mvn.w	r3, #5
 800c430:	e05c      	b.n	800c4ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c432:	88fb      	ldrh	r3, [r7, #6]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d109      	bne.n	800c44c <tcp_bind+0x6c>
    port = tcp_new_port();
 800c438:	f000 f9de 	bl	800c7f8 <tcp_new_port>
 800c43c:	4603      	mov	r3, r0
 800c43e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c440:	88fb      	ldrh	r3, [r7, #6]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d135      	bne.n	800c4b2 <tcp_bind+0xd2>
      return ERR_BUF;
 800c446:	f06f 0301 	mvn.w	r3, #1
 800c44a:	e04f      	b.n	800c4ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c44c:	2300      	movs	r3, #0
 800c44e:	61fb      	str	r3, [r7, #28]
 800c450:	e02b      	b.n	800c4aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c452:	4a2d      	ldr	r2, [pc, #180]	@ (800c508 <tcp_bind+0x128>)
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	61bb      	str	r3, [r7, #24]
 800c45e:	e01e      	b.n	800c49e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	8adb      	ldrh	r3, [r3, #22]
 800c464:	88fa      	ldrh	r2, [r7, #6]
 800c466:	429a      	cmp	r2, r3
 800c468:	d116      	bne.n	800c498 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c46a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d010      	beq.n	800c492 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00c      	beq.n	800c492 <tcp_bind+0xb2>
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d009      	beq.n	800c492 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d005      	beq.n	800c492 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c48e:	429a      	cmp	r2, r3
 800c490:	d102      	bne.n	800c498 <tcp_bind+0xb8>
              return ERR_USE;
 800c492:	f06f 0307 	mvn.w	r3, #7
 800c496:	e029      	b.n	800c4ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	61bb      	str	r3, [r7, #24]
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1dd      	bne.n	800c460 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	61fb      	str	r3, [r7, #28]
 800c4aa:	69fa      	ldr	r2, [r7, #28]
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	dbcf      	blt.n	800c452 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00c      	beq.n	800c4d2 <tcp_bind+0xf2>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d008      	beq.n	800c4d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <tcp_bind+0xec>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	e000      	b.n	800c4ce <tcp_bind+0xee>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	88fa      	ldrh	r2, [r7, #6]
 800c4d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c4d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c50c <tcp_bind+0x12c>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	60da      	str	r2, [r3, #12]
 800c4e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c50c <tcp_bind+0x12c>)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	f005 fc9b 	bl	8011e20 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3720      	adds	r7, #32
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	08022bcc 	.word	0x08022bcc
 800c4f8:	080178c0 	.word	0x080178c0
 800c4fc:	08017a54 	.word	0x08017a54
 800c500:	08017904 	.word	0x08017904
 800c504:	08017a6c 	.word	0x08017a6c
 800c508:	08022ba4 	.word	0x08022ba4
 800c50c:	2000be6c 	.word	0x2000be6c

0800c510 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	4613      	mov	r3, r2
 800c51c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <tcp_accept_null+0x22>
 800c524:	4b07      	ldr	r3, [pc, #28]	@ (800c544 <tcp_accept_null+0x34>)
 800c526:	f240 320f 	movw	r2, #783	@ 0x30f
 800c52a:	4907      	ldr	r1, [pc, #28]	@ (800c548 <tcp_accept_null+0x38>)
 800c52c:	4807      	ldr	r0, [pc, #28]	@ (800c54c <tcp_accept_null+0x3c>)
 800c52e:	f008 fe99 	bl	8015264 <iprintf>

  tcp_abort(pcb);
 800c532:	68b8      	ldr	r0, [r7, #8]
 800c534:	f7ff ff48 	bl	800c3c8 <tcp_abort>

  return ERR_ABRT;
 800c538:	f06f 030c 	mvn.w	r3, #12
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	080178c0 	.word	0x080178c0
 800c548:	08017a94 	.word	0x08017a94
 800c54c:	08017904 	.word	0x08017904

0800c550 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	460b      	mov	r3, r1
 800c55a:	607a      	str	r2, [r7, #4]
 800c55c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c55e:	2300      	movs	r3, #0
 800c560:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d109      	bne.n	800c57c <tcp_listen_with_backlog_and_err+0x2c>
 800c568:	4b47      	ldr	r3, [pc, #284]	@ (800c688 <tcp_listen_with_backlog_and_err+0x138>)
 800c56a:	f240 3259 	movw	r2, #857	@ 0x359
 800c56e:	4947      	ldr	r1, [pc, #284]	@ (800c68c <tcp_listen_with_backlog_and_err+0x13c>)
 800c570:	4847      	ldr	r0, [pc, #284]	@ (800c690 <tcp_listen_with_backlog_and_err+0x140>)
 800c572:	f008 fe77 	bl	8015264 <iprintf>
 800c576:	23f0      	movs	r3, #240	@ 0xf0
 800c578:	76fb      	strb	r3, [r7, #27]
 800c57a:	e079      	b.n	800c670 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	7d1b      	ldrb	r3, [r3, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d009      	beq.n	800c598 <tcp_listen_with_backlog_and_err+0x48>
 800c584:	4b40      	ldr	r3, [pc, #256]	@ (800c688 <tcp_listen_with_backlog_and_err+0x138>)
 800c586:	f240 325a 	movw	r2, #858	@ 0x35a
 800c58a:	4942      	ldr	r1, [pc, #264]	@ (800c694 <tcp_listen_with_backlog_and_err+0x144>)
 800c58c:	4840      	ldr	r0, [pc, #256]	@ (800c690 <tcp_listen_with_backlog_and_err+0x140>)
 800c58e:	f008 fe69 	bl	8015264 <iprintf>
 800c592:	23f1      	movs	r3, #241	@ 0xf1
 800c594:	76fb      	strb	r3, [r7, #27]
 800c596:	e06b      	b.n	800c670 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	7d1b      	ldrb	r3, [r3, #20]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d104      	bne.n	800c5aa <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c5a4:	23f7      	movs	r3, #247	@ 0xf7
 800c5a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c5a8:	e062      	b.n	800c670 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c5aa:	2002      	movs	r0, #2
 800c5ac:	f7fe fa02 	bl	800a9b4 <memp_malloc>
 800c5b0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d102      	bne.n	800c5be <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c5b8:	23ff      	movs	r3, #255	@ 0xff
 800c5ba:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c5bc:	e058      	b.n	800c670 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	691a      	ldr	r2, [r3, #16]
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	8ada      	ldrh	r2, [r3, #22]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	7d5a      	ldrb	r2, [r3, #21]
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	7a5a      	ldrb	r2, [r3, #9]
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	7ada      	ldrb	r2, [r3, #11]
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	7a9a      	ldrb	r2, [r3, #10]
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	8adb      	ldrh	r3, [r3, #22]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d021      	beq.n	800c64e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c60a:	4b23      	ldr	r3, [pc, #140]	@ (800c698 <tcp_listen_with_backlog_and_err+0x148>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	429a      	cmp	r2, r3
 800c612:	d105      	bne.n	800c620 <tcp_listen_with_backlog_and_err+0xd0>
 800c614:	4b20      	ldr	r3, [pc, #128]	@ (800c698 <tcp_listen_with_backlog_and_err+0x148>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	4a1f      	ldr	r2, [pc, #124]	@ (800c698 <tcp_listen_with_backlog_and_err+0x148>)
 800c61c:	6013      	str	r3, [r2, #0]
 800c61e:	e013      	b.n	800c648 <tcp_listen_with_backlog_and_err+0xf8>
 800c620:	4b1d      	ldr	r3, [pc, #116]	@ (800c698 <tcp_listen_with_backlog_and_err+0x148>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	617b      	str	r3, [r7, #20]
 800c626:	e00c      	b.n	800c642 <tcp_listen_with_backlog_and_err+0xf2>
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d104      	bne.n	800c63c <tcp_listen_with_backlog_and_err+0xec>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	68da      	ldr	r2, [r3, #12]
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	60da      	str	r2, [r3, #12]
 800c63a:	e005      	b.n	800c648 <tcp_listen_with_backlog_and_err+0xf8>
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	617b      	str	r3, [r7, #20]
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1ef      	bne.n	800c628 <tcp_listen_with_backlog_and_err+0xd8>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f7ff fb76 	bl	800bd40 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	4a11      	ldr	r2, [pc, #68]	@ (800c69c <tcp_listen_with_backlog_and_err+0x14c>)
 800c658:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c65a:	4b11      	ldr	r3, [pc, #68]	@ (800c6a0 <tcp_listen_with_backlog_and_err+0x150>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	60da      	str	r2, [r3, #12]
 800c662:	4a0f      	ldr	r2, [pc, #60]	@ (800c6a0 <tcp_listen_with_backlog_and_err+0x150>)
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	f005 fbda 	bl	8011e20 <tcp_timer_needed>
  res = ERR_OK;
 800c66c:	2300      	movs	r3, #0
 800c66e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d002      	beq.n	800c67c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	7efa      	ldrb	r2, [r7, #27]
 800c67a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c67c:	69fb      	ldr	r3, [r7, #28]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3720      	adds	r7, #32
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	080178c0 	.word	0x080178c0
 800c68c:	08017ab4 	.word	0x08017ab4
 800c690:	08017904 	.word	0x08017904
 800c694:	08017ae4 	.word	0x08017ae4
 800c698:	2000be6c 	.word	0x2000be6c
 800c69c:	0800c511 	.word	0x0800c511
 800c6a0:	2000be70 	.word	0x2000be70

0800c6a4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d106      	bne.n	800c6c0 <tcp_update_rcv_ann_wnd+0x1c>
 800c6b2:	4b25      	ldr	r3, [pc, #148]	@ (800c748 <tcp_update_rcv_ann_wnd+0xa4>)
 800c6b4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c6b8:	4924      	ldr	r1, [pc, #144]	@ (800c74c <tcp_update_rcv_ann_wnd+0xa8>)
 800c6ba:	4825      	ldr	r0, [pc, #148]	@ (800c750 <tcp_update_rcv_ann_wnd+0xac>)
 800c6bc:	f008 fdd2 	bl	8015264 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c6c8:	4413      	add	r3, r2
 800c6ca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c6d4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c6d8:	bf28      	it	cs
 800c6da:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c6de:	b292      	uxth	r2, r2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	db08      	blt.n	800c6fc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	e020      	b.n	800c73e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	dd03      	ble.n	800c712 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c710:	e014      	b.n	800c73c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c724:	d306      	bcc.n	800c734 <tcp_update_rcv_ann_wnd+0x90>
 800c726:	4b08      	ldr	r3, [pc, #32]	@ (800c748 <tcp_update_rcv_ann_wnd+0xa4>)
 800c728:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c72c:	4909      	ldr	r1, [pc, #36]	@ (800c754 <tcp_update_rcv_ann_wnd+0xb0>)
 800c72e:	4808      	ldr	r0, [pc, #32]	@ (800c750 <tcp_update_rcv_ann_wnd+0xac>)
 800c730:	f008 fd98 	bl	8015264 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	b29a      	uxth	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c73c:	2300      	movs	r3, #0
  }
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	080178c0 	.word	0x080178c0
 800c74c:	08017b1c 	.word	0x08017b1c
 800c750:	08017904 	.word	0x08017904
 800c754:	08017b40 	.word	0x08017b40

0800c758 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d107      	bne.n	800c77a <tcp_recved+0x22>
 800c76a:	4b1f      	ldr	r3, [pc, #124]	@ (800c7e8 <tcp_recved+0x90>)
 800c76c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c770:	491e      	ldr	r1, [pc, #120]	@ (800c7ec <tcp_recved+0x94>)
 800c772:	481f      	ldr	r0, [pc, #124]	@ (800c7f0 <tcp_recved+0x98>)
 800c774:	f008 fd76 	bl	8015264 <iprintf>
 800c778:	e032      	b.n	800c7e0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	7d1b      	ldrb	r3, [r3, #20]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d106      	bne.n	800c790 <tcp_recved+0x38>
 800c782:	4b19      	ldr	r3, [pc, #100]	@ (800c7e8 <tcp_recved+0x90>)
 800c784:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c788:	491a      	ldr	r1, [pc, #104]	@ (800c7f4 <tcp_recved+0x9c>)
 800c78a:	4819      	ldr	r0, [pc, #100]	@ (800c7f0 <tcp_recved+0x98>)
 800c78c:	f008 fd6a 	bl	8015264 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c794:	887b      	ldrh	r3, [r7, #2]
 800c796:	4413      	add	r3, r2
 800c798:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c79a:	89fb      	ldrh	r3, [r7, #14]
 800c79c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c7a0:	d804      	bhi.n	800c7ac <tcp_recved+0x54>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7a6:	89fa      	ldrh	r2, [r7, #14]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d204      	bcs.n	800c7b6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c7b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c7b4:	e002      	b.n	800c7bc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	89fa      	ldrh	r2, [r7, #14]
 800c7ba:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff ff71 	bl	800c6a4 <tcp_update_rcv_ann_wnd>
 800c7c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c7ca:	d309      	bcc.n	800c7e0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	8b5b      	ldrh	r3, [r3, #26]
 800c7d0:	f043 0302 	orr.w	r3, r3, #2
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f004 fbaa 	bl	8010f34 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	080178c0 	.word	0x080178c0
 800c7ec:	08017b5c 	.word	0x08017b5c
 800c7f0:	08017904 	.word	0x08017904
 800c7f4:	08017b74 	.word	0x08017b74

0800c7f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c802:	4b1e      	ldr	r3, [pc, #120]	@ (800c87c <tcp_new_port+0x84>)
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	3301      	adds	r3, #1
 800c808:	b29a      	uxth	r2, r3
 800c80a:	4b1c      	ldr	r3, [pc, #112]	@ (800c87c <tcp_new_port+0x84>)
 800c80c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c80e:	4b1b      	ldr	r3, [pc, #108]	@ (800c87c <tcp_new_port+0x84>)
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c816:	4293      	cmp	r3, r2
 800c818:	d103      	bne.n	800c822 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c81a:	4b18      	ldr	r3, [pc, #96]	@ (800c87c <tcp_new_port+0x84>)
 800c81c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c820:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c822:	2300      	movs	r3, #0
 800c824:	71fb      	strb	r3, [r7, #7]
 800c826:	e01e      	b.n	800c866 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	4a15      	ldr	r2, [pc, #84]	@ (800c880 <tcp_new_port+0x88>)
 800c82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	e011      	b.n	800c85a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	8ada      	ldrh	r2, [r3, #22]
 800c83a:	4b10      	ldr	r3, [pc, #64]	@ (800c87c <tcp_new_port+0x84>)
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d108      	bne.n	800c854 <tcp_new_port+0x5c>
        n++;
 800c842:	88bb      	ldrh	r3, [r7, #4]
 800c844:	3301      	adds	r3, #1
 800c846:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c848:	88bb      	ldrh	r3, [r7, #4]
 800c84a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c84e:	d3d8      	bcc.n	800c802 <tcp_new_port+0xa>
          return 0;
 800c850:	2300      	movs	r3, #0
 800c852:	e00d      	b.n	800c870 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	603b      	str	r3, [r7, #0]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1ea      	bne.n	800c836 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	3301      	adds	r3, #1
 800c864:	71fb      	strb	r3, [r7, #7]
 800c866:	79fb      	ldrb	r3, [r7, #7]
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d9dd      	bls.n	800c828 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c86c:	4b03      	ldr	r3, [pc, #12]	@ (800c87c <tcp_new_port+0x84>)
 800c86e:	881b      	ldrh	r3, [r3, #0]
}
 800c870:	4618      	mov	r0, r3
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	20000024 	.word	0x20000024
 800c880:	08022ba4 	.word	0x08022ba4

0800c884 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c884:	b5b0      	push	{r4, r5, r7, lr}
 800c886:	b090      	sub	sp, #64	@ 0x40
 800c888:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c88a:	2300      	movs	r3, #0
 800c88c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c890:	4b95      	ldr	r3, [pc, #596]	@ (800cae8 <tcp_slowtmr+0x264>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3301      	adds	r3, #1
 800c896:	4a94      	ldr	r2, [pc, #592]	@ (800cae8 <tcp_slowtmr+0x264>)
 800c898:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c89a:	4b94      	ldr	r3, [pc, #592]	@ (800caec <tcp_slowtmr+0x268>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	4b92      	ldr	r3, [pc, #584]	@ (800caec <tcp_slowtmr+0x268>)
 800c8a4:	701a      	strb	r2, [r3, #0]
 800c8a6:	e000      	b.n	800c8aa <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c8a8:	bf00      	nop
  prev = NULL;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c8ae:	4b90      	ldr	r3, [pc, #576]	@ (800caf0 <tcp_slowtmr+0x26c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c8b4:	e29d      	b.n	800cdf2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b8:	7d1b      	ldrb	r3, [r3, #20]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d106      	bne.n	800c8cc <tcp_slowtmr+0x48>
 800c8be:	4b8d      	ldr	r3, [pc, #564]	@ (800caf4 <tcp_slowtmr+0x270>)
 800c8c0:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c8c4:	498c      	ldr	r1, [pc, #560]	@ (800caf8 <tcp_slowtmr+0x274>)
 800c8c6:	488d      	ldr	r0, [pc, #564]	@ (800cafc <tcp_slowtmr+0x278>)
 800c8c8:	f008 fccc 	bl	8015264 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ce:	7d1b      	ldrb	r3, [r3, #20]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d106      	bne.n	800c8e2 <tcp_slowtmr+0x5e>
 800c8d4:	4b87      	ldr	r3, [pc, #540]	@ (800caf4 <tcp_slowtmr+0x270>)
 800c8d6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c8da:	4989      	ldr	r1, [pc, #548]	@ (800cb00 <tcp_slowtmr+0x27c>)
 800c8dc:	4887      	ldr	r0, [pc, #540]	@ (800cafc <tcp_slowtmr+0x278>)
 800c8de:	f008 fcc1 	bl	8015264 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e4:	7d1b      	ldrb	r3, [r3, #20]
 800c8e6:	2b0a      	cmp	r3, #10
 800c8e8:	d106      	bne.n	800c8f8 <tcp_slowtmr+0x74>
 800c8ea:	4b82      	ldr	r3, [pc, #520]	@ (800caf4 <tcp_slowtmr+0x270>)
 800c8ec:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c8f0:	4984      	ldr	r1, [pc, #528]	@ (800cb04 <tcp_slowtmr+0x280>)
 800c8f2:	4882      	ldr	r0, [pc, #520]	@ (800cafc <tcp_slowtmr+0x278>)
 800c8f4:	f008 fcb6 	bl	8015264 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	7f9a      	ldrb	r2, [r3, #30]
 800c8fc:	4b7b      	ldr	r3, [pc, #492]	@ (800caec <tcp_slowtmr+0x268>)
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	429a      	cmp	r2, r3
 800c902:	d105      	bne.n	800c910 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c906:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c90e:	e270      	b.n	800cdf2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800c910:	4b76      	ldr	r3, [pc, #472]	@ (800caec <tcp_slowtmr+0x268>)
 800c912:	781a      	ldrb	r2, [r3, #0]
 800c914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c916:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c918:	2300      	movs	r3, #0
 800c91a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c926:	7d1b      	ldrb	r3, [r3, #20]
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d10a      	bne.n	800c942 <tcp_slowtmr+0xbe>
 800c92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c932:	2b05      	cmp	r3, #5
 800c934:	d905      	bls.n	800c942 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c93a:	3301      	adds	r3, #1
 800c93c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c940:	e11e      	b.n	800cb80 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c944:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c948:	2b0b      	cmp	r3, #11
 800c94a:	d905      	bls.n	800c958 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c94c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c950:	3301      	adds	r3, #1
 800c952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c956:	e113      	b.n	800cb80 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c95a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d075      	beq.n	800ca4e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c966:	2b00      	cmp	r3, #0
 800c968:	d006      	beq.n	800c978 <tcp_slowtmr+0xf4>
 800c96a:	4b62      	ldr	r3, [pc, #392]	@ (800caf4 <tcp_slowtmr+0x270>)
 800c96c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c970:	4965      	ldr	r1, [pc, #404]	@ (800cb08 <tcp_slowtmr+0x284>)
 800c972:	4862      	ldr	r0, [pc, #392]	@ (800cafc <tcp_slowtmr+0x278>)
 800c974:	f008 fc76 	bl	8015264 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d106      	bne.n	800c98e <tcp_slowtmr+0x10a>
 800c980:	4b5c      	ldr	r3, [pc, #368]	@ (800caf4 <tcp_slowtmr+0x270>)
 800c982:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c986:	4961      	ldr	r1, [pc, #388]	@ (800cb0c <tcp_slowtmr+0x288>)
 800c988:	485c      	ldr	r0, [pc, #368]	@ (800cafc <tcp_slowtmr+0x278>)
 800c98a:	f008 fc6b 	bl	8015264 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c990:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c994:	2b0b      	cmp	r3, #11
 800c996:	d905      	bls.n	800c9a4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c99c:	3301      	adds	r3, #1
 800c99e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9a2:	e0ed      	b.n	800cb80 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	4a58      	ldr	r2, [pc, #352]	@ (800cb10 <tcp_slowtmr+0x28c>)
 800c9ae:	5cd3      	ldrb	r3, [r2, r3]
 800c9b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9b8:	7c7a      	ldrb	r2, [r7, #17]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d907      	bls.n	800c9ce <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c9d4:	7c7a      	ldrb	r2, [r7, #17]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	f200 80d2 	bhi.w	800cb80 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c9dc:	2301      	movs	r3, #1
 800c9de:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d108      	bne.n	800c9fc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c9ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9ec:	f005 f94a 	bl	8011c84 <tcp_zero_window_probe>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d014      	beq.n	800ca20 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	623b      	str	r3, [r7, #32]
 800c9fa:	e011      	b.n	800ca20 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ca02:	4619      	mov	r1, r3
 800ca04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca06:	f004 f80f 	bl	8010a28 <tcp_split_unsent_seg>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d107      	bne.n	800ca20 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ca10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca12:	f004 fa8f 	bl	8010f34 <tcp_output>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d101      	bne.n	800ca20 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 80ac 	beq.w	800cb80 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ca28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ca30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca32:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ca36:	2b06      	cmp	r3, #6
 800ca38:	f200 80a2 	bhi.w	800cb80 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ca3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ca42:	3301      	adds	r3, #1
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca48:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ca4c:	e098      	b.n	800cb80 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ca4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	db0f      	blt.n	800ca78 <tcp_slowtmr+0x1f4>
 800ca58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca5e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d008      	beq.n	800ca78 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ca66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	3301      	adds	r3, #1
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	b21a      	sxth	r2, r3
 800ca74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca76:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ca78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ca7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca80:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ca84:	429a      	cmp	r2, r3
 800ca86:	db7b      	blt.n	800cb80 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ca88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca8a:	f004 fd47 	bl	801151c <tcp_rexmit_rto_prepare>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d007      	beq.n	800caa4 <tcp_slowtmr+0x220>
 800ca94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d171      	bne.n	800cb80 <tcp_slowtmr+0x2fc>
 800ca9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d06d      	beq.n	800cb80 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800caa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa6:	7d1b      	ldrb	r3, [r3, #20]
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d03a      	beq.n	800cb22 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800caac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cab2:	2b0c      	cmp	r3, #12
 800cab4:	bf28      	it	cs
 800cab6:	230c      	movcs	r3, #12
 800cab8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800caba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800cac0:	10db      	asrs	r3, r3, #3
 800cac2:	b21b      	sxth	r3, r3
 800cac4:	461a      	mov	r2, r3
 800cac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800cacc:	4413      	add	r3, r2
 800cace:	7efa      	ldrb	r2, [r7, #27]
 800cad0:	4910      	ldr	r1, [pc, #64]	@ (800cb14 <tcp_slowtmr+0x290>)
 800cad2:	5c8a      	ldrb	r2, [r1, r2]
 800cad4:	4093      	lsls	r3, r2
 800cad6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800cade:	4293      	cmp	r3, r2
 800cae0:	dc1a      	bgt.n	800cb18 <tcp_slowtmr+0x294>
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	b21a      	sxth	r2, r3
 800cae6:	e019      	b.n	800cb1c <tcp_slowtmr+0x298>
 800cae8:	2000be68 	.word	0x2000be68
 800caec:	2000be7e 	.word	0x2000be7e
 800caf0:	2000be74 	.word	0x2000be74
 800caf4:	080178c0 	.word	0x080178c0
 800caf8:	08017c04 	.word	0x08017c04
 800cafc:	08017904 	.word	0x08017904
 800cb00:	08017c30 	.word	0x08017c30
 800cb04:	08017c5c 	.word	0x08017c5c
 800cb08:	08017c8c 	.word	0x08017c8c
 800cb0c:	08017cc0 	.word	0x08017cc0
 800cb10:	08022b9c 	.word	0x08022b9c
 800cb14:	08022b8c 	.word	0x08022b8c
 800cb18:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800cb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb24:	2200      	movs	r2, #0
 800cb26:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cb34:	4293      	cmp	r3, r2
 800cb36:	bf28      	it	cs
 800cb38:	4613      	movcs	r3, r2
 800cb3a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cb3c:	8a7b      	ldrh	r3, [r7, #18]
 800cb3e:	085b      	lsrs	r3, r3, #1
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d206      	bcs.n	800cb68 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cb5e:	005b      	lsls	r3, r3, #1
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb64:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800cb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800cb6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800cb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb74:	2200      	movs	r2, #0
 800cb76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800cb7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb7c:	f004 fd3e 	bl	80115fc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800cb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb82:	7d1b      	ldrb	r3, [r3, #20]
 800cb84:	2b06      	cmp	r3, #6
 800cb86:	d111      	bne.n	800cbac <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800cb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8a:	8b5b      	ldrh	r3, [r3, #26]
 800cb8c:	f003 0310 	and.w	r3, r3, #16
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00b      	beq.n	800cbac <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb94:	4b9c      	ldr	r3, [pc, #624]	@ (800ce08 <tcp_slowtmr+0x584>)
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9a:	6a1b      	ldr	r3, [r3, #32]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	2b28      	cmp	r3, #40	@ 0x28
 800cba0:	d904      	bls.n	800cbac <tcp_slowtmr+0x328>
          ++pcb_remove;
 800cba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cba6:	3301      	adds	r3, #1
 800cba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbae:	7a5b      	ldrb	r3, [r3, #9]
 800cbb0:	f003 0308 	and.w	r3, r3, #8
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d04a      	beq.n	800cc4e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cbbc:	2b04      	cmp	r3, #4
 800cbbe:	d003      	beq.n	800cbc8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cbc4:	2b07      	cmp	r3, #7
 800cbc6:	d142      	bne.n	800cc4e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbc8:	4b8f      	ldr	r3, [pc, #572]	@ (800ce08 <tcp_slowtmr+0x584>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbce:	6a1b      	ldr	r3, [r3, #32]
 800cbd0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cbd8:	4b8c      	ldr	r3, [pc, #560]	@ (800ce0c <tcp_slowtmr+0x588>)
 800cbda:	440b      	add	r3, r1
 800cbdc:	498c      	ldr	r1, [pc, #560]	@ (800ce10 <tcp_slowtmr+0x58c>)
 800cbde:	fba1 1303 	umull	r1, r3, r1, r3
 800cbe2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d90a      	bls.n	800cbfe <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800cbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbec:	3301      	adds	r3, #1
 800cbee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800cbf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cbfc:	e027      	b.n	800cc4e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbfe:	4b82      	ldr	r3, [pc, #520]	@ (800ce08 <tcp_slowtmr+0x584>)
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc10:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cc14:	4618      	mov	r0, r3
 800cc16:	4b7f      	ldr	r3, [pc, #508]	@ (800ce14 <tcp_slowtmr+0x590>)
 800cc18:	fb00 f303 	mul.w	r3, r0, r3
 800cc1c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cc1e:	497c      	ldr	r1, [pc, #496]	@ (800ce10 <tcp_slowtmr+0x58c>)
 800cc20:	fba1 1303 	umull	r1, r3, r1, r3
 800cc24:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d911      	bls.n	800cc4e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cc2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc2c:	f004 ffea 	bl	8011c04 <tcp_keepalive>
 800cc30:	4603      	mov	r3, r0
 800cc32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cc36:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d107      	bne.n	800cc4e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc40:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cc44:	3301      	adds	r3, #1
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d011      	beq.n	800cc7a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cc56:	4b6c      	ldr	r3, [pc, #432]	@ (800ce08 <tcp_slowtmr+0x584>)
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	1ad2      	subs	r2, r2, r3
 800cc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc62:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cc66:	4619      	mov	r1, r3
 800cc68:	460b      	mov	r3, r1
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	440b      	add	r3, r1
 800cc6e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d302      	bcc.n	800cc7a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800cc74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc76:	f000 feab 	bl	800d9d0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7c:	7d1b      	ldrb	r3, [r3, #20]
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	d10b      	bne.n	800cc9a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc82:	4b61      	ldr	r3, [pc, #388]	@ (800ce08 <tcp_slowtmr+0x584>)
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc88:	6a1b      	ldr	r3, [r3, #32]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	2b28      	cmp	r3, #40	@ 0x28
 800cc8e:	d904      	bls.n	800cc9a <tcp_slowtmr+0x416>
        ++pcb_remove;
 800cc90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc94:	3301      	adds	r3, #1
 800cc96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9c:	7d1b      	ldrb	r3, [r3, #20]
 800cc9e:	2b09      	cmp	r3, #9
 800cca0:	d10b      	bne.n	800ccba <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cca2:	4b59      	ldr	r3, [pc, #356]	@ (800ce08 <tcp_slowtmr+0x584>)
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	2bf0      	cmp	r3, #240	@ 0xf0
 800ccae:	d904      	bls.n	800ccba <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ccb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800ccba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d060      	beq.n	800cd84 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800ccc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccc8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800ccca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cccc:	f000 fccc 	bl	800d668 <tcp_pcb_purge>
      if (prev != NULL) {
 800ccd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d010      	beq.n	800ccf8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ccd6:	4b50      	ldr	r3, [pc, #320]	@ (800ce18 <tcp_slowtmr+0x594>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d106      	bne.n	800ccee <tcp_slowtmr+0x46a>
 800cce0:	4b4e      	ldr	r3, [pc, #312]	@ (800ce1c <tcp_slowtmr+0x598>)
 800cce2:	f240 526d 	movw	r2, #1389	@ 0x56d
 800cce6:	494e      	ldr	r1, [pc, #312]	@ (800ce20 <tcp_slowtmr+0x59c>)
 800cce8:	484e      	ldr	r0, [pc, #312]	@ (800ce24 <tcp_slowtmr+0x5a0>)
 800ccea:	f008 fabb 	bl	8015264 <iprintf>
        prev->next = pcb->next;
 800ccee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf0:	68da      	ldr	r2, [r3, #12]
 800ccf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf4:	60da      	str	r2, [r3, #12]
 800ccf6:	e00f      	b.n	800cd18 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ccf8:	4b47      	ldr	r3, [pc, #284]	@ (800ce18 <tcp_slowtmr+0x594>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d006      	beq.n	800cd10 <tcp_slowtmr+0x48c>
 800cd02:	4b46      	ldr	r3, [pc, #280]	@ (800ce1c <tcp_slowtmr+0x598>)
 800cd04:	f240 5271 	movw	r2, #1393	@ 0x571
 800cd08:	4947      	ldr	r1, [pc, #284]	@ (800ce28 <tcp_slowtmr+0x5a4>)
 800cd0a:	4846      	ldr	r0, [pc, #280]	@ (800ce24 <tcp_slowtmr+0x5a0>)
 800cd0c:	f008 faaa 	bl	8015264 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	4a40      	ldr	r2, [pc, #256]	@ (800ce18 <tcp_slowtmr+0x594>)
 800cd16:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cd18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d013      	beq.n	800cd48 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd26:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cd28:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800cd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd30:	8ad2      	ldrh	r2, [r2, #22]
 800cd32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd34:	8b09      	ldrh	r1, [r1, #24]
 800cd36:	9102      	str	r1, [sp, #8]
 800cd38:	9201      	str	r2, [sp, #4]
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	462b      	mov	r3, r5
 800cd3e:	4622      	mov	r2, r4
 800cd40:	4601      	mov	r1, r0
 800cd42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd44:	f004 feaa 	bl	8011a9c <tcp_rst>
      err_arg = pcb->callback_arg;
 800cd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd50:	7d1b      	ldrb	r3, [r3, #20]
 800cd52:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd56:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cd5e:	6838      	ldr	r0, [r7, #0]
 800cd60:	f7fe ffee 	bl	800bd40 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800cd64:	4b31      	ldr	r3, [pc, #196]	@ (800ce2c <tcp_slowtmr+0x5a8>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d004      	beq.n	800cd7a <tcp_slowtmr+0x4f6>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f06f 010c 	mvn.w	r1, #12
 800cd76:	68b8      	ldr	r0, [r7, #8]
 800cd78:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cd7a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce2c <tcp_slowtmr+0x5a8>)
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d037      	beq.n	800cdf2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cd82:	e592      	b.n	800c8aa <tcp_slowtmr+0x26>
      prev = pcb;
 800cd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd86:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800cd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd90:	7f1b      	ldrb	r3, [r3, #28]
 800cd92:	3301      	adds	r3, #1
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd98:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9c:	7f1a      	ldrb	r2, [r3, #28]
 800cd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda0:	7f5b      	ldrb	r3, [r3, #29]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d325      	bcc.n	800cdf2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda8:	2200      	movs	r2, #0
 800cdaa:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800cdac:	4b1f      	ldr	r3, [pc, #124]	@ (800ce2c <tcp_slowtmr+0x5a8>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00b      	beq.n	800cdd4 <tcp_slowtmr+0x550>
 800cdbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdc4:	6912      	ldr	r2, [r2, #16]
 800cdc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4798      	blx	r3
 800cdcc:	4603      	mov	r3, r0
 800cdce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cdd2:	e002      	b.n	800cdda <tcp_slowtmr+0x556>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800cdda:	4b14      	ldr	r3, [pc, #80]	@ (800ce2c <tcp_slowtmr+0x5a8>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f47f ad62 	bne.w	800c8a8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cde4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d102      	bne.n	800cdf2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cdec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdee:	f004 f8a1 	bl	8010f34 <tcp_output>
  while (pcb != NULL) {
 800cdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f47f ad5e 	bne.w	800c8b6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800cdfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ce30 <tcp_slowtmr+0x5ac>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ce04:	e069      	b.n	800ceda <tcp_slowtmr+0x656>
 800ce06:	bf00      	nop
 800ce08:	2000be68 	.word	0x2000be68
 800ce0c:	000a4cb8 	.word	0x000a4cb8
 800ce10:	10624dd3 	.word	0x10624dd3
 800ce14:	000124f8 	.word	0x000124f8
 800ce18:	2000be74 	.word	0x2000be74
 800ce1c:	080178c0 	.word	0x080178c0
 800ce20:	08017cf8 	.word	0x08017cf8
 800ce24:	08017904 	.word	0x08017904
 800ce28:	08017d24 	.word	0x08017d24
 800ce2c:	2000be7c 	.word	0x2000be7c
 800ce30:	2000be78 	.word	0x2000be78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce36:	7d1b      	ldrb	r3, [r3, #20]
 800ce38:	2b0a      	cmp	r3, #10
 800ce3a:	d006      	beq.n	800ce4a <tcp_slowtmr+0x5c6>
 800ce3c:	4b2b      	ldr	r3, [pc, #172]	@ (800ceec <tcp_slowtmr+0x668>)
 800ce3e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ce42:	492b      	ldr	r1, [pc, #172]	@ (800cef0 <tcp_slowtmr+0x66c>)
 800ce44:	482b      	ldr	r0, [pc, #172]	@ (800cef4 <tcp_slowtmr+0x670>)
 800ce46:	f008 fa0d 	bl	8015264 <iprintf>
    pcb_remove = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ce50:	4b29      	ldr	r3, [pc, #164]	@ (800cef8 <tcp_slowtmr+0x674>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	2bf0      	cmp	r3, #240	@ 0xf0
 800ce5c:	d904      	bls.n	800ce68 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ce5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce62:	3301      	adds	r3, #1
 800ce64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d02f      	beq.n	800ced0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ce70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce72:	f000 fbf9 	bl	800d668 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ce76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d010      	beq.n	800ce9e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ce7c:	4b1f      	ldr	r3, [pc, #124]	@ (800cefc <tcp_slowtmr+0x678>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d106      	bne.n	800ce94 <tcp_slowtmr+0x610>
 800ce86:	4b19      	ldr	r3, [pc, #100]	@ (800ceec <tcp_slowtmr+0x668>)
 800ce88:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ce8c:	491c      	ldr	r1, [pc, #112]	@ (800cf00 <tcp_slowtmr+0x67c>)
 800ce8e:	4819      	ldr	r0, [pc, #100]	@ (800cef4 <tcp_slowtmr+0x670>)
 800ce90:	f008 f9e8 	bl	8015264 <iprintf>
        prev->next = pcb->next;
 800ce94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce96:	68da      	ldr	r2, [r3, #12]
 800ce98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9a:	60da      	str	r2, [r3, #12]
 800ce9c:	e00f      	b.n	800cebe <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ce9e:	4b17      	ldr	r3, [pc, #92]	@ (800cefc <tcp_slowtmr+0x678>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d006      	beq.n	800ceb6 <tcp_slowtmr+0x632>
 800cea8:	4b10      	ldr	r3, [pc, #64]	@ (800ceec <tcp_slowtmr+0x668>)
 800ceaa:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ceae:	4915      	ldr	r1, [pc, #84]	@ (800cf04 <tcp_slowtmr+0x680>)
 800ceb0:	4810      	ldr	r0, [pc, #64]	@ (800cef4 <tcp_slowtmr+0x670>)
 800ceb2:	f008 f9d7 	bl	8015264 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ceb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	4a10      	ldr	r2, [pc, #64]	@ (800cefc <tcp_slowtmr+0x678>)
 800cebc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cec8:	69f8      	ldr	r0, [r7, #28]
 800ceca:	f7fe ff39 	bl	800bd40 <tcp_free>
 800cece:	e004      	b.n	800ceda <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800ced0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ced4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ceda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1a9      	bne.n	800ce34 <tcp_slowtmr+0x5b0>
    }
  }
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	3730      	adds	r7, #48	@ 0x30
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bdb0      	pop	{r4, r5, r7, pc}
 800ceea:	bf00      	nop
 800ceec:	080178c0 	.word	0x080178c0
 800cef0:	08017d50 	.word	0x08017d50
 800cef4:	08017904 	.word	0x08017904
 800cef8:	2000be68 	.word	0x2000be68
 800cefc:	2000be78 	.word	0x2000be78
 800cf00:	08017d80 	.word	0x08017d80
 800cf04:	08017da8 	.word	0x08017da8

0800cf08 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cf0e:	4b2d      	ldr	r3, [pc, #180]	@ (800cfc4 <tcp_fasttmr+0xbc>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	3301      	adds	r3, #1
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	4b2b      	ldr	r3, [pc, #172]	@ (800cfc4 <tcp_fasttmr+0xbc>)
 800cf18:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cf1a:	4b2b      	ldr	r3, [pc, #172]	@ (800cfc8 <tcp_fasttmr+0xc0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cf20:	e048      	b.n	800cfb4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	7f9a      	ldrb	r2, [r3, #30]
 800cf26:	4b27      	ldr	r3, [pc, #156]	@ (800cfc4 <tcp_fasttmr+0xbc>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d03f      	beq.n	800cfae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cf2e:	4b25      	ldr	r3, [pc, #148]	@ (800cfc4 <tcp_fasttmr+0xbc>)
 800cf30:	781a      	ldrb	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	8b5b      	ldrh	r3, [r3, #26]
 800cf3a:	f003 0301 	and.w	r3, r3, #1
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d010      	beq.n	800cf64 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	8b5b      	ldrh	r3, [r3, #26]
 800cf46:	f043 0302 	orr.w	r3, r3, #2
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f003 ffef 	bl	8010f34 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	8b5b      	ldrh	r3, [r3, #26]
 800cf5a:	f023 0303 	bic.w	r3, r3, #3
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	8b5b      	ldrh	r3, [r3, #26]
 800cf68:	f003 0308 	and.w	r3, r3, #8
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d009      	beq.n	800cf84 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	8b5b      	ldrh	r3, [r3, #26]
 800cf74:	f023 0308 	bic.w	r3, r3, #8
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff f872 	bl	800c068 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00a      	beq.n	800cfa8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cf92:	4b0e      	ldr	r3, [pc, #56]	@ (800cfcc <tcp_fasttmr+0xc4>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f819 	bl	800cfd0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cfcc <tcp_fasttmr+0xc4>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d000      	beq.n	800cfa8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cfa6:	e7b8      	b.n	800cf1a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	607b      	str	r3, [r7, #4]
 800cfac:	e002      	b.n	800cfb4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1b3      	bne.n	800cf22 <tcp_fasttmr+0x1a>
    }
  }
}
 800cfba:	bf00      	nop
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	2000be7e 	.word	0x2000be7e
 800cfc8:	2000be74 	.word	0x2000be74
 800cfcc:	2000be7c 	.word	0x2000be7c

0800cfd0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cfd0:	b590      	push	{r4, r7, lr}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d109      	bne.n	800cff2 <tcp_process_refused_data+0x22>
 800cfde:	4b37      	ldr	r3, [pc, #220]	@ (800d0bc <tcp_process_refused_data+0xec>)
 800cfe0:	f240 6209 	movw	r2, #1545	@ 0x609
 800cfe4:	4936      	ldr	r1, [pc, #216]	@ (800d0c0 <tcp_process_refused_data+0xf0>)
 800cfe6:	4837      	ldr	r0, [pc, #220]	@ (800d0c4 <tcp_process_refused_data+0xf4>)
 800cfe8:	f008 f93c 	bl	8015264 <iprintf>
 800cfec:	f06f 030f 	mvn.w	r3, #15
 800cff0:	e060      	b.n	800d0b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cff6:	7b5b      	ldrb	r3, [r3, #13]
 800cff8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cffe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00b      	beq.n	800d028 <tcp_process_refused_data+0x58>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6918      	ldr	r0, [r3, #16]
 800d01a:	2300      	movs	r3, #0
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	6879      	ldr	r1, [r7, #4]
 800d020:	47a0      	blx	r4
 800d022:	4603      	mov	r3, r0
 800d024:	73fb      	strb	r3, [r7, #15]
 800d026:	e007      	b.n	800d038 <tcp_process_refused_data+0x68>
 800d028:	2300      	movs	r3, #0
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	2000      	movs	r0, #0
 800d030:	f000 f8a4 	bl	800d17c <tcp_recv_null>
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d12a      	bne.n	800d096 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	f003 0320 	and.w	r3, r3, #32
 800d046:	2b00      	cmp	r3, #0
 800d048:	d033      	beq.n	800d0b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d04e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d052:	d005      	beq.n	800d060 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d058:	3301      	adds	r3, #1
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <tcp_process_refused_data+0xb2>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6918      	ldr	r0, [r3, #16]
 800d074:	2300      	movs	r3, #0
 800d076:	2200      	movs	r2, #0
 800d078:	6879      	ldr	r1, [r7, #4]
 800d07a:	47a0      	blx	r4
 800d07c:	4603      	mov	r3, r0
 800d07e:	73fb      	strb	r3, [r7, #15]
 800d080:	e001      	b.n	800d086 <tcp_process_refused_data+0xb6>
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d08a:	f113 0f0d 	cmn.w	r3, #13
 800d08e:	d110      	bne.n	800d0b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d090:	f06f 030c 	mvn.w	r3, #12
 800d094:	e00e      	b.n	800d0b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d09a:	f113 0f0d 	cmn.w	r3, #13
 800d09e:	d102      	bne.n	800d0a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d0a0:	f06f 030c 	mvn.w	r3, #12
 800d0a4:	e006      	b.n	800d0b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d0ac:	f06f 0304 	mvn.w	r3, #4
 800d0b0:	e000      	b.n	800d0b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd90      	pop	{r4, r7, pc}
 800d0bc:	080178c0 	.word	0x080178c0
 800d0c0:	08017dd0 	.word	0x08017dd0
 800d0c4:	08017904 	.word	0x08017904

0800d0c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d0d0:	e007      	b.n	800d0e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 f80a 	bl	800d0f2 <tcp_seg_free>
    seg = next;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1f4      	bne.n	800d0d2 <tcp_segs_free+0xa>
  }
}
 800d0e8:	bf00      	nop
 800d0ea:	bf00      	nop
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00c      	beq.n	800d11a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d004      	beq.n	800d112 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe fb6b 	bl	800b7e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	2003      	movs	r0, #3
 800d116:	f7fd fcc3 	bl	800aaa0 <memp_free>
  }
}
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
	...

0800d124 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d106      	bne.n	800d140 <tcp_seg_copy+0x1c>
 800d132:	4b0f      	ldr	r3, [pc, #60]	@ (800d170 <tcp_seg_copy+0x4c>)
 800d134:	f240 6282 	movw	r2, #1666	@ 0x682
 800d138:	490e      	ldr	r1, [pc, #56]	@ (800d174 <tcp_seg_copy+0x50>)
 800d13a:	480f      	ldr	r0, [pc, #60]	@ (800d178 <tcp_seg_copy+0x54>)
 800d13c:	f008 f892 	bl	8015264 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d140:	2003      	movs	r0, #3
 800d142:	f7fd fc37 	bl	800a9b4 <memp_malloc>
 800d146:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <tcp_seg_copy+0x2e>
    return NULL;
 800d14e:	2300      	movs	r3, #0
 800d150:	e00a      	b.n	800d168 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d152:	2210      	movs	r2, #16
 800d154:	6879      	ldr	r1, [r7, #4]
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f008 f9c7 	bl	80154ea <memcpy>
  pbuf_ref(cseg->p);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe fbe7 	bl	800b934 <pbuf_ref>
  return cseg;
 800d166:	68fb      	ldr	r3, [r7, #12]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	080178c0 	.word	0x080178c0
 800d174:	08017e14 	.word	0x08017e14
 800d178:	08017904 	.word	0x08017904

0800d17c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
 800d188:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d109      	bne.n	800d1a4 <tcp_recv_null+0x28>
 800d190:	4b12      	ldr	r3, [pc, #72]	@ (800d1dc <tcp_recv_null+0x60>)
 800d192:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d196:	4912      	ldr	r1, [pc, #72]	@ (800d1e0 <tcp_recv_null+0x64>)
 800d198:	4812      	ldr	r0, [pc, #72]	@ (800d1e4 <tcp_recv_null+0x68>)
 800d19a:	f008 f863 	bl	8015264 <iprintf>
 800d19e:	f06f 030f 	mvn.w	r3, #15
 800d1a2:	e016      	b.n	800d1d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d009      	beq.n	800d1be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	891b      	ldrh	r3, [r3, #8]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	68b8      	ldr	r0, [r7, #8]
 800d1b2:	f7ff fad1 	bl	800c758 <tcp_recved>
    pbuf_free(p);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7fe fb16 	bl	800b7e8 <pbuf_free>
 800d1bc:	e008      	b.n	800d1d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d1be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d104      	bne.n	800d1d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d1c6:	68b8      	ldr	r0, [r7, #8]
 800d1c8:	f7fe ffb8 	bl	800c13c <tcp_close>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	e000      	b.n	800d1d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	080178c0 	.word	0x080178c0
 800d1e0:	08017e30 	.word	0x08017e30
 800d1e4:	08017904 	.word	0x08017904

0800d1e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b086      	sub	sp, #24
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	db01      	blt.n	800d1fe <tcp_kill_prio+0x16>
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	e000      	b.n	800d200 <tcp_kill_prio+0x18>
 800d1fe:	237f      	movs	r3, #127	@ 0x7f
 800d200:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d202:	7afb      	ldrb	r3, [r7, #11]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d034      	beq.n	800d272 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d208:	7afb      	ldrb	r3, [r7, #11]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d20e:	2300      	movs	r3, #0
 800d210:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d212:	2300      	movs	r3, #0
 800d214:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d216:	4b19      	ldr	r3, [pc, #100]	@ (800d27c <tcp_kill_prio+0x94>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	617b      	str	r3, [r7, #20]
 800d21c:	e01f      	b.n	800d25e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	7d5b      	ldrb	r3, [r3, #21]
 800d222:	7afa      	ldrb	r2, [r7, #11]
 800d224:	429a      	cmp	r2, r3
 800d226:	d80c      	bhi.n	800d242 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d22c:	7afa      	ldrb	r2, [r7, #11]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d112      	bne.n	800d258 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d232:	4b13      	ldr	r3, [pc, #76]	@ (800d280 <tcp_kill_prio+0x98>)
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	6a1b      	ldr	r3, [r3, #32]
 800d23a:	1ad3      	subs	r3, r2, r3
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d80a      	bhi.n	800d258 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d242:	4b0f      	ldr	r3, [pc, #60]	@ (800d280 <tcp_kill_prio+0x98>)
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	6a1b      	ldr	r3, [r3, #32]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	7d5b      	ldrb	r3, [r3, #21]
 800d256:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1dc      	bne.n	800d21e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d004      	beq.n	800d274 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d26a:	6938      	ldr	r0, [r7, #16]
 800d26c:	f7ff f8ac 	bl	800c3c8 <tcp_abort>
 800d270:	e000      	b.n	800d274 <tcp_kill_prio+0x8c>
    return;
 800d272:	bf00      	nop
  }
}
 800d274:	3718      	adds	r7, #24
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	2000be74 	.word	0x2000be74
 800d280:	2000be68 	.word	0x2000be68

0800d284 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d28e:	79fb      	ldrb	r3, [r7, #7]
 800d290:	2b08      	cmp	r3, #8
 800d292:	d009      	beq.n	800d2a8 <tcp_kill_state+0x24>
 800d294:	79fb      	ldrb	r3, [r7, #7]
 800d296:	2b09      	cmp	r3, #9
 800d298:	d006      	beq.n	800d2a8 <tcp_kill_state+0x24>
 800d29a:	4b1a      	ldr	r3, [pc, #104]	@ (800d304 <tcp_kill_state+0x80>)
 800d29c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d2a0:	4919      	ldr	r1, [pc, #100]	@ (800d308 <tcp_kill_state+0x84>)
 800d2a2:	481a      	ldr	r0, [pc, #104]	@ (800d30c <tcp_kill_state+0x88>)
 800d2a4:	f007 ffde 	bl	8015264 <iprintf>

  inactivity = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2b0:	4b17      	ldr	r3, [pc, #92]	@ (800d310 <tcp_kill_state+0x8c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	617b      	str	r3, [r7, #20]
 800d2b6:	e017      	b.n	800d2e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	7d1b      	ldrb	r3, [r3, #20]
 800d2bc:	79fa      	ldrb	r2, [r7, #7]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d10f      	bne.n	800d2e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d2c2:	4b14      	ldr	r3, [pc, #80]	@ (800d314 <tcp_kill_state+0x90>)
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d807      	bhi.n	800d2e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d2d2:	4b10      	ldr	r3, [pc, #64]	@ (800d314 <tcp_kill_state+0x90>)
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e4      	bne.n	800d2b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d003      	beq.n	800d2fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	6938      	ldr	r0, [r7, #16]
 800d2f8:	f7fe ffa8 	bl	800c24c <tcp_abandon>
  }
}
 800d2fc:	bf00      	nop
 800d2fe:	3718      	adds	r7, #24
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	080178c0 	.word	0x080178c0
 800d308:	08017e4c 	.word	0x08017e4c
 800d30c:	08017904 	.word	0x08017904
 800d310:	2000be74 	.word	0x2000be74
 800d314:	2000be68 	.word	0x2000be68

0800d318 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d31e:	2300      	movs	r3, #0
 800d320:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d322:	2300      	movs	r3, #0
 800d324:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d326:	4b12      	ldr	r3, [pc, #72]	@ (800d370 <tcp_kill_timewait+0x58>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	60fb      	str	r3, [r7, #12]
 800d32c:	e012      	b.n	800d354 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d32e:	4b11      	ldr	r3, [pc, #68]	@ (800d374 <tcp_kill_timewait+0x5c>)
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6a1b      	ldr	r3, [r3, #32]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d807      	bhi.n	800d34e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d33e:	4b0d      	ldr	r3, [pc, #52]	@ (800d374 <tcp_kill_timewait+0x5c>)
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1e9      	bne.n	800d32e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d360:	68b8      	ldr	r0, [r7, #8]
 800d362:	f7ff f831 	bl	800c3c8 <tcp_abort>
  }
}
 800d366:	bf00      	nop
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	2000be78 	.word	0x2000be78
 800d374:	2000be68 	.word	0x2000be68

0800d378 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d37e:	4b10      	ldr	r3, [pc, #64]	@ (800d3c0 <tcp_handle_closepend+0x48>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d384:	e014      	b.n	800d3b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	8b5b      	ldrh	r3, [r3, #26]
 800d390:	f003 0308 	and.w	r3, r3, #8
 800d394:	2b00      	cmp	r3, #0
 800d396:	d009      	beq.n	800d3ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8b5b      	ldrh	r3, [r3, #26]
 800d39c:	f023 0308 	bic.w	r3, r3, #8
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7fe fe5e 	bl	800c068 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e7      	bne.n	800d386 <tcp_handle_closepend+0xe>
  }
}
 800d3b6:	bf00      	nop
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	2000be74 	.word	0x2000be74

0800d3c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3ce:	2001      	movs	r0, #1
 800d3d0:	f7fd faf0 	bl	800a9b4 <memp_malloc>
 800d3d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d126      	bne.n	800d42a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d3dc:	f7ff ffcc 	bl	800d378 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d3e0:	f7ff ff9a 	bl	800d318 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3e4:	2001      	movs	r0, #1
 800d3e6:	f7fd fae5 	bl	800a9b4 <memp_malloc>
 800d3ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d11b      	bne.n	800d42a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d3f2:	2009      	movs	r0, #9
 800d3f4:	f7ff ff46 	bl	800d284 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3f8:	2001      	movs	r0, #1
 800d3fa:	f7fd fadb 	bl	800a9b4 <memp_malloc>
 800d3fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d111      	bne.n	800d42a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d406:	2008      	movs	r0, #8
 800d408:	f7ff ff3c 	bl	800d284 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d40c:	2001      	movs	r0, #1
 800d40e:	f7fd fad1 	bl	800a9b4 <memp_malloc>
 800d412:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d107      	bne.n	800d42a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d41a:	79fb      	ldrb	r3, [r7, #7]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7ff fee3 	bl	800d1e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d422:	2001      	movs	r0, #1
 800d424:	f7fd fac6 	bl	800a9b4 <memp_malloc>
 800d428:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d03f      	beq.n	800d4b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d430:	229c      	movs	r2, #156	@ 0x9c
 800d432:	2100      	movs	r1, #0
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f007 ff7a 	bl	801532e <memset>
    pcb->prio = prio;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	79fa      	ldrb	r2, [r7, #7]
 800d43e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d446:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d450:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	22ff      	movs	r2, #255	@ 0xff
 800d45e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d466:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2206      	movs	r2, #6
 800d46c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2206      	movs	r2, #6
 800d474:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d47c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2201      	movs	r2, #1
 800d482:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d486:	4b0d      	ldr	r3, [pc, #52]	@ (800d4bc <tcp_alloc+0xf8>)
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d48e:	4b0c      	ldr	r3, [pc, #48]	@ (800d4c0 <tcp_alloc+0xfc>)
 800d490:	781a      	ldrb	r2, [r3, #0]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d49c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	4a08      	ldr	r2, [pc, #32]	@ (800d4c4 <tcp_alloc+0x100>)
 800d4a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	4a07      	ldr	r2, [pc, #28]	@ (800d4c8 <tcp_alloc+0x104>)
 800d4ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	2000be68 	.word	0x2000be68
 800d4c0:	2000be7e 	.word	0x2000be7e
 800d4c4:	0800d17d 	.word	0x0800d17d
 800d4c8:	006ddd00 	.word	0x006ddd00

0800d4cc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d4d6:	2040      	movs	r0, #64	@ 0x40
 800d4d8:	f7ff ff74 	bl	800d3c4 <tcp_alloc>
 800d4dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d4de:	68fb      	ldr	r3, [r7, #12]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	611a      	str	r2, [r3, #16]
  }
}
 800d4fe:	bf00      	nop
 800d500:	370c      	adds	r7, #12
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
	...

0800d50c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00e      	beq.n	800d53a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d106      	bne.n	800d532 <tcp_recv+0x26>
 800d524:	4b07      	ldr	r3, [pc, #28]	@ (800d544 <tcp_recv+0x38>)
 800d526:	f240 72df 	movw	r2, #2015	@ 0x7df
 800d52a:	4907      	ldr	r1, [pc, #28]	@ (800d548 <tcp_recv+0x3c>)
 800d52c:	4807      	ldr	r0, [pc, #28]	@ (800d54c <tcp_recv+0x40>)
 800d52e:	f007 fe99 	bl	8015264 <iprintf>
    pcb->recv = recv;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800d53a:	bf00      	nop
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	080178c0 	.word	0x080178c0
 800d548:	08017e5c 	.word	0x08017e5c
 800d54c:	08017904 	.word	0x08017904

0800d550 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00e      	beq.n	800d57e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	7d1b      	ldrb	r3, [r3, #20]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d106      	bne.n	800d576 <tcp_sent+0x26>
 800d568:	4b07      	ldr	r3, [pc, #28]	@ (800d588 <tcp_sent+0x38>)
 800d56a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800d56e:	4907      	ldr	r1, [pc, #28]	@ (800d58c <tcp_sent+0x3c>)
 800d570:	4807      	ldr	r0, [pc, #28]	@ (800d590 <tcp_sent+0x40>)
 800d572:	f007 fe77 	bl	8015264 <iprintf>
    pcb->sent = sent;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800d57e:	bf00      	nop
 800d580:	3708      	adds	r7, #8
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	080178c0 	.word	0x080178c0
 800d58c:	08017e84 	.word	0x08017e84
 800d590:	08017904 	.word	0x08017904

0800d594 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00e      	beq.n	800d5c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d106      	bne.n	800d5ba <tcp_err+0x26>
 800d5ac:	4b07      	ldr	r3, [pc, #28]	@ (800d5cc <tcp_err+0x38>)
 800d5ae:	f640 020d 	movw	r2, #2061	@ 0x80d
 800d5b2:	4907      	ldr	r1, [pc, #28]	@ (800d5d0 <tcp_err+0x3c>)
 800d5b4:	4807      	ldr	r0, [pc, #28]	@ (800d5d4 <tcp_err+0x40>)
 800d5b6:	f007 fe55 	bl	8015264 <iprintf>
    pcb->errf = err;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	080178c0 	.word	0x080178c0
 800d5d0:	08017eac 	.word	0x08017eac
 800d5d4:	08017904 	.word	0x08017904

0800d5d8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d008      	beq.n	800d5fa <tcp_accept+0x22>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	7d1b      	ldrb	r3, [r3, #20]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d104      	bne.n	800d5fa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	619a      	str	r2, [r3, #24]
  }
}
 800d5fa:	bf00      	nop
 800d5fc:	3714      	adds	r7, #20
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr
	...

0800d608 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	4613      	mov	r3, r2
 800d614:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d107      	bne.n	800d62c <tcp_poll+0x24>
 800d61c:	4b0e      	ldr	r3, [pc, #56]	@ (800d658 <tcp_poll+0x50>)
 800d61e:	f640 023d 	movw	r2, #2109	@ 0x83d
 800d622:	490e      	ldr	r1, [pc, #56]	@ (800d65c <tcp_poll+0x54>)
 800d624:	480e      	ldr	r0, [pc, #56]	@ (800d660 <tcp_poll+0x58>)
 800d626:	f007 fe1d 	bl	8015264 <iprintf>
 800d62a:	e011      	b.n	800d650 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	7d1b      	ldrb	r3, [r3, #20]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d106      	bne.n	800d642 <tcp_poll+0x3a>
 800d634:	4b08      	ldr	r3, [pc, #32]	@ (800d658 <tcp_poll+0x50>)
 800d636:	f640 023e 	movw	r2, #2110	@ 0x83e
 800d63a:	490a      	ldr	r1, [pc, #40]	@ (800d664 <tcp_poll+0x5c>)
 800d63c:	4808      	ldr	r0, [pc, #32]	@ (800d660 <tcp_poll+0x58>)
 800d63e:	f007 fe11 	bl	8015264 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	79fa      	ldrb	r2, [r7, #7]
 800d64e:	775a      	strb	r2, [r3, #29]
}
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	080178c0 	.word	0x080178c0
 800d65c:	08017ed4 	.word	0x08017ed4
 800d660:	08017904 	.word	0x08017904
 800d664:	08017eec 	.word	0x08017eec

0800d668 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d107      	bne.n	800d686 <tcp_pcb_purge+0x1e>
 800d676:	4b21      	ldr	r3, [pc, #132]	@ (800d6fc <tcp_pcb_purge+0x94>)
 800d678:	f640 0251 	movw	r2, #2129	@ 0x851
 800d67c:	4920      	ldr	r1, [pc, #128]	@ (800d700 <tcp_pcb_purge+0x98>)
 800d67e:	4821      	ldr	r0, [pc, #132]	@ (800d704 <tcp_pcb_purge+0x9c>)
 800d680:	f007 fdf0 	bl	8015264 <iprintf>
 800d684:	e037      	b.n	800d6f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	7d1b      	ldrb	r3, [r3, #20]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d033      	beq.n	800d6f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d692:	2b0a      	cmp	r3, #10
 800d694:	d02f      	beq.n	800d6f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d02b      	beq.n	800d6f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d007      	beq.n	800d6b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe f89c 	bl	800b7e8 <pbuf_free>
      pcb->refused_data = NULL;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f986 	bl	800d9d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6ca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7ff fcf9 	bl	800d0c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7ff fcf4 	bl	800d0c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	080178c0 	.word	0x080178c0
 800d700:	08017f0c 	.word	0x08017f0c
 800d704:	08017904 	.word	0x08017904

0800d708 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d106      	bne.n	800d726 <tcp_pcb_remove+0x1e>
 800d718:	4b3e      	ldr	r3, [pc, #248]	@ (800d814 <tcp_pcb_remove+0x10c>)
 800d71a:	f640 0283 	movw	r2, #2179	@ 0x883
 800d71e:	493e      	ldr	r1, [pc, #248]	@ (800d818 <tcp_pcb_remove+0x110>)
 800d720:	483e      	ldr	r0, [pc, #248]	@ (800d81c <tcp_pcb_remove+0x114>)
 800d722:	f007 fd9f 	bl	8015264 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d106      	bne.n	800d73a <tcp_pcb_remove+0x32>
 800d72c:	4b39      	ldr	r3, [pc, #228]	@ (800d814 <tcp_pcb_remove+0x10c>)
 800d72e:	f640 0284 	movw	r2, #2180	@ 0x884
 800d732:	493b      	ldr	r1, [pc, #236]	@ (800d820 <tcp_pcb_remove+0x118>)
 800d734:	4839      	ldr	r0, [pc, #228]	@ (800d81c <tcp_pcb_remove+0x114>)
 800d736:	f007 fd95 	bl	8015264 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	429a      	cmp	r2, r3
 800d742:	d105      	bne.n	800d750 <tcp_pcb_remove+0x48>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68da      	ldr	r2, [r3, #12]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	e013      	b.n	800d778 <tcp_pcb_remove+0x70>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	60fb      	str	r3, [r7, #12]
 800d756:	e00c      	b.n	800d772 <tcp_pcb_remove+0x6a>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d104      	bne.n	800d76c <tcp_pcb_remove+0x64>
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	68da      	ldr	r2, [r3, #12]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	60da      	str	r2, [r3, #12]
 800d76a:	e005      	b.n	800d778 <tcp_pcb_remove+0x70>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1ef      	bne.n	800d758 <tcp_pcb_remove+0x50>
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	2200      	movs	r2, #0
 800d77c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d77e:	6838      	ldr	r0, [r7, #0]
 800d780:	f7ff ff72 	bl	800d668 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	7d1b      	ldrb	r3, [r3, #20]
 800d788:	2b0a      	cmp	r3, #10
 800d78a:	d013      	beq.n	800d7b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d790:	2b01      	cmp	r3, #1
 800d792:	d00f      	beq.n	800d7b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	8b5b      	ldrh	r3, [r3, #26]
 800d798:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d009      	beq.n	800d7b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	8b5b      	ldrh	r3, [r3, #26]
 800d7a4:	f043 0302 	orr.w	r3, r3, #2
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d7ae:	6838      	ldr	r0, [r7, #0]
 800d7b0:	f003 fbc0 	bl	8010f34 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	7d1b      	ldrb	r3, [r3, #20]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d020      	beq.n	800d7fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <tcp_pcb_remove+0xca>
 800d7c4:	4b13      	ldr	r3, [pc, #76]	@ (800d814 <tcp_pcb_remove+0x10c>)
 800d7c6:	f640 0293 	movw	r2, #2195	@ 0x893
 800d7ca:	4916      	ldr	r1, [pc, #88]	@ (800d824 <tcp_pcb_remove+0x11c>)
 800d7cc:	4813      	ldr	r0, [pc, #76]	@ (800d81c <tcp_pcb_remove+0x114>)
 800d7ce:	f007 fd49 	bl	8015264 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d006      	beq.n	800d7e8 <tcp_pcb_remove+0xe0>
 800d7da:	4b0e      	ldr	r3, [pc, #56]	@ (800d814 <tcp_pcb_remove+0x10c>)
 800d7dc:	f640 0294 	movw	r2, #2196	@ 0x894
 800d7e0:	4911      	ldr	r1, [pc, #68]	@ (800d828 <tcp_pcb_remove+0x120>)
 800d7e2:	480e      	ldr	r0, [pc, #56]	@ (800d81c <tcp_pcb_remove+0x114>)
 800d7e4:	f007 fd3e 	bl	8015264 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d006      	beq.n	800d7fe <tcp_pcb_remove+0xf6>
 800d7f0:	4b08      	ldr	r3, [pc, #32]	@ (800d814 <tcp_pcb_remove+0x10c>)
 800d7f2:	f640 0296 	movw	r2, #2198	@ 0x896
 800d7f6:	490d      	ldr	r1, [pc, #52]	@ (800d82c <tcp_pcb_remove+0x124>)
 800d7f8:	4808      	ldr	r0, [pc, #32]	@ (800d81c <tcp_pcb_remove+0x114>)
 800d7fa:	f007 fd33 	bl	8015264 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	2200      	movs	r2, #0
 800d802:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2200      	movs	r2, #0
 800d808:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d80a:	bf00      	nop
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	080178c0 	.word	0x080178c0
 800d818:	08017f28 	.word	0x08017f28
 800d81c:	08017904 	.word	0x08017904
 800d820:	08017f44 	.word	0x08017f44
 800d824:	08017f64 	.word	0x08017f64
 800d828:	08017f7c 	.word	0x08017f7c
 800d82c:	08017f98 	.word	0x08017f98

0800d830 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <tcp_next_iss+0x1c>
 800d83e:	4b0a      	ldr	r3, [pc, #40]	@ (800d868 <tcp_next_iss+0x38>)
 800d840:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d844:	4909      	ldr	r1, [pc, #36]	@ (800d86c <tcp_next_iss+0x3c>)
 800d846:	480a      	ldr	r0, [pc, #40]	@ (800d870 <tcp_next_iss+0x40>)
 800d848:	f007 fd0c 	bl	8015264 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d84c:	4b09      	ldr	r3, [pc, #36]	@ (800d874 <tcp_next_iss+0x44>)
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	4b09      	ldr	r3, [pc, #36]	@ (800d878 <tcp_next_iss+0x48>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4413      	add	r3, r2
 800d856:	4a07      	ldr	r2, [pc, #28]	@ (800d874 <tcp_next_iss+0x44>)
 800d858:	6013      	str	r3, [r2, #0]
  return iss;
 800d85a:	4b06      	ldr	r3, [pc, #24]	@ (800d874 <tcp_next_iss+0x44>)
 800d85c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	080178c0 	.word	0x080178c0
 800d86c:	08017fb0 	.word	0x08017fb0
 800d870:	08017904 	.word	0x08017904
 800d874:	20000028 	.word	0x20000028
 800d878:	2000be68 	.word	0x2000be68

0800d87c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d106      	bne.n	800d89e <tcp_eff_send_mss_netif+0x22>
 800d890:	4b14      	ldr	r3, [pc, #80]	@ (800d8e4 <tcp_eff_send_mss_netif+0x68>)
 800d892:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d896:	4914      	ldr	r1, [pc, #80]	@ (800d8e8 <tcp_eff_send_mss_netif+0x6c>)
 800d898:	4814      	ldr	r0, [pc, #80]	@ (800d8ec <tcp_eff_send_mss_netif+0x70>)
 800d89a:	f007 fce3 	bl	8015264 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d8a4:	89fb      	ldrh	r3, [r7, #14]
 800d8a6:	e019      	b.n	800d8dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d8ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d8ae:	8afb      	ldrh	r3, [r7, #22]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d012      	beq.n	800d8da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d8b4:	2328      	movs	r3, #40	@ 0x28
 800d8b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d8b8:	8afa      	ldrh	r2, [r7, #22]
 800d8ba:	8abb      	ldrh	r3, [r7, #20]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d904      	bls.n	800d8ca <tcp_eff_send_mss_netif+0x4e>
 800d8c0:	8afa      	ldrh	r2, [r7, #22]
 800d8c2:	8abb      	ldrh	r3, [r7, #20]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	e000      	b.n	800d8cc <tcp_eff_send_mss_netif+0x50>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d8ce:	8a7a      	ldrh	r2, [r7, #18]
 800d8d0:	89fb      	ldrh	r3, [r7, #14]
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	bf28      	it	cs
 800d8d6:	4613      	movcs	r3, r2
 800d8d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d8da:	89fb      	ldrh	r3, [r7, #14]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3718      	adds	r7, #24
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	080178c0 	.word	0x080178c0
 800d8e8:	08017fcc 	.word	0x08017fcc
 800d8ec:	08017904 	.word	0x08017904

0800d8f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d119      	bne.n	800d938 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d904:	4b10      	ldr	r3, [pc, #64]	@ (800d948 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d906:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d90a:	4910      	ldr	r1, [pc, #64]	@ (800d94c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d90c:	4810      	ldr	r0, [pc, #64]	@ (800d950 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d90e:	f007 fca9 	bl	8015264 <iprintf>

  while (pcb != NULL) {
 800d912:	e011      	b.n	800d938 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d108      	bne.n	800d932 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f7fe fd4e 	bl	800c3c8 <tcp_abort>
      pcb = next;
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	e002      	b.n	800d938 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1ea      	bne.n	800d914 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d93e:	bf00      	nop
 800d940:	bf00      	nop
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	080178c0 	.word	0x080178c0
 800d94c:	08017ff4 	.word	0x08017ff4
 800d950:	08017904 	.word	0x08017904

0800d954 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d02a      	beq.n	800d9ba <tcp_netif_ip_addr_changed+0x66>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d026      	beq.n	800d9ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d96c:	4b15      	ldr	r3, [pc, #84]	@ (800d9c4 <tcp_netif_ip_addr_changed+0x70>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4619      	mov	r1, r3
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7ff ffbc 	bl	800d8f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d978:	4b13      	ldr	r3, [pc, #76]	@ (800d9c8 <tcp_netif_ip_addr_changed+0x74>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4619      	mov	r1, r3
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff ffb6 	bl	800d8f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d017      	beq.n	800d9ba <tcp_netif_ip_addr_changed+0x66>
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d013      	beq.n	800d9ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d992:	4b0e      	ldr	r3, [pc, #56]	@ (800d9cc <tcp_netif_ip_addr_changed+0x78>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	60fb      	str	r3, [r7, #12]
 800d998:	e00c      	b.n	800d9b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d103      	bne.n	800d9ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1ef      	bne.n	800d99a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d9ba:	bf00      	nop
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	2000be74 	.word	0x2000be74
 800d9c8:	2000be6c 	.word	0x2000be6c
 800d9cc:	2000be70 	.word	0x2000be70

0800d9d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d007      	beq.n	800d9f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff fb6f 	bl	800d0c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d9f8:	b590      	push	{r4, r7, lr}
 800d9fa:	b08d      	sub	sp, #52	@ 0x34
 800d9fc:	af04      	add	r7, sp, #16
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d105      	bne.n	800da14 <tcp_input+0x1c>
 800da08:	4b9b      	ldr	r3, [pc, #620]	@ (800dc78 <tcp_input+0x280>)
 800da0a:	2283      	movs	r2, #131	@ 0x83
 800da0c:	499b      	ldr	r1, [pc, #620]	@ (800dc7c <tcp_input+0x284>)
 800da0e:	489c      	ldr	r0, [pc, #624]	@ (800dc80 <tcp_input+0x288>)
 800da10:	f007 fc28 	bl	8015264 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	4a9a      	ldr	r2, [pc, #616]	@ (800dc84 <tcp_input+0x28c>)
 800da1a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	895b      	ldrh	r3, [r3, #10]
 800da20:	2b13      	cmp	r3, #19
 800da22:	f240 83d1 	bls.w	800e1c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800da26:	4b98      	ldr	r3, [pc, #608]	@ (800dc88 <tcp_input+0x290>)
 800da28:	695b      	ldr	r3, [r3, #20]
 800da2a:	4a97      	ldr	r2, [pc, #604]	@ (800dc88 <tcp_input+0x290>)
 800da2c:	6812      	ldr	r2, [r2, #0]
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f006 f9df 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f040 83c7 	bne.w	800e1cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800da3e:	4b92      	ldr	r3, [pc, #584]	@ (800dc88 <tcp_input+0x290>)
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800da46:	2be0      	cmp	r3, #224	@ 0xe0
 800da48:	f000 83c0 	beq.w	800e1cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800da4c:	4b8d      	ldr	r3, [pc, #564]	@ (800dc84 <tcp_input+0x28c>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	899b      	ldrh	r3, [r3, #12]
 800da52:	b29b      	uxth	r3, r3
 800da54:	4618      	mov	r0, r3
 800da56:	f7fc fad9 	bl	800a00c <lwip_htons>
 800da5a:	4603      	mov	r3, r0
 800da5c:	0b1b      	lsrs	r3, r3, #12
 800da5e:	b29b      	uxth	r3, r3
 800da60:	b2db      	uxtb	r3, r3
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800da66:	7cbb      	ldrb	r3, [r7, #18]
 800da68:	2b13      	cmp	r3, #19
 800da6a:	f240 83b1 	bls.w	800e1d0 <tcp_input+0x7d8>
 800da6e:	7cbb      	ldrb	r3, [r7, #18]
 800da70:	b29a      	uxth	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	891b      	ldrh	r3, [r3, #8]
 800da76:	429a      	cmp	r2, r3
 800da78:	f200 83aa 	bhi.w	800e1d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800da7c:	7cbb      	ldrb	r3, [r7, #18]
 800da7e:	b29b      	uxth	r3, r3
 800da80:	3b14      	subs	r3, #20
 800da82:	b29a      	uxth	r2, r3
 800da84:	4b81      	ldr	r3, [pc, #516]	@ (800dc8c <tcp_input+0x294>)
 800da86:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800da88:	4b81      	ldr	r3, [pc, #516]	@ (800dc90 <tcp_input+0x298>)
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	895a      	ldrh	r2, [r3, #10]
 800da92:	7cbb      	ldrb	r3, [r7, #18]
 800da94:	b29b      	uxth	r3, r3
 800da96:	429a      	cmp	r2, r3
 800da98:	d309      	bcc.n	800daae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800da9a:	4b7c      	ldr	r3, [pc, #496]	@ (800dc8c <tcp_input+0x294>)
 800da9c:	881a      	ldrh	r2, [r3, #0]
 800da9e:	4b7d      	ldr	r3, [pc, #500]	@ (800dc94 <tcp_input+0x29c>)
 800daa0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800daa2:	7cbb      	ldrb	r3, [r7, #18]
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7fd fe18 	bl	800b6dc <pbuf_remove_header>
 800daac:	e04e      	b.n	800db4c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d105      	bne.n	800dac2 <tcp_input+0xca>
 800dab6:	4b70      	ldr	r3, [pc, #448]	@ (800dc78 <tcp_input+0x280>)
 800dab8:	22c2      	movs	r2, #194	@ 0xc2
 800daba:	4977      	ldr	r1, [pc, #476]	@ (800dc98 <tcp_input+0x2a0>)
 800dabc:	4870      	ldr	r0, [pc, #448]	@ (800dc80 <tcp_input+0x288>)
 800dabe:	f007 fbd1 	bl	8015264 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dac2:	2114      	movs	r1, #20
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7fd fe09 	bl	800b6dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	895a      	ldrh	r2, [r3, #10]
 800dace:	4b71      	ldr	r3, [pc, #452]	@ (800dc94 <tcp_input+0x29c>)
 800dad0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dad2:	4b6e      	ldr	r3, [pc, #440]	@ (800dc8c <tcp_input+0x294>)
 800dad4:	881a      	ldrh	r2, [r3, #0]
 800dad6:	4b6f      	ldr	r3, [pc, #444]	@ (800dc94 <tcp_input+0x29c>)
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	1ad3      	subs	r3, r2, r3
 800dadc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dade:	4b6d      	ldr	r3, [pc, #436]	@ (800dc94 <tcp_input+0x29c>)
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	4619      	mov	r1, r3
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7fd fdf9 	bl	800b6dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	895b      	ldrh	r3, [r3, #10]
 800daf0:	8a3a      	ldrh	r2, [r7, #16]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	f200 836e 	bhi.w	800e1d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	4a64      	ldr	r2, [pc, #400]	@ (800dc90 <tcp_input+0x298>)
 800db00:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	8a3a      	ldrh	r2, [r7, #16]
 800db08:	4611      	mov	r1, r2
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fd fde6 	bl	800b6dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	891a      	ldrh	r2, [r3, #8]
 800db14:	8a3b      	ldrh	r3, [r7, #16]
 800db16:	1ad3      	subs	r3, r2, r3
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	895b      	ldrh	r3, [r3, #10]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d005      	beq.n	800db32 <tcp_input+0x13a>
 800db26:	4b54      	ldr	r3, [pc, #336]	@ (800dc78 <tcp_input+0x280>)
 800db28:	22df      	movs	r2, #223	@ 0xdf
 800db2a:	495c      	ldr	r1, [pc, #368]	@ (800dc9c <tcp_input+0x2a4>)
 800db2c:	4854      	ldr	r0, [pc, #336]	@ (800dc80 <tcp_input+0x288>)
 800db2e:	f007 fb99 	bl	8015264 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	891a      	ldrh	r2, [r3, #8]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	891b      	ldrh	r3, [r3, #8]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d005      	beq.n	800db4c <tcp_input+0x154>
 800db40:	4b4d      	ldr	r3, [pc, #308]	@ (800dc78 <tcp_input+0x280>)
 800db42:	22e0      	movs	r2, #224	@ 0xe0
 800db44:	4956      	ldr	r1, [pc, #344]	@ (800dca0 <tcp_input+0x2a8>)
 800db46:	484e      	ldr	r0, [pc, #312]	@ (800dc80 <tcp_input+0x288>)
 800db48:	f007 fb8c 	bl	8015264 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800db4c:	4b4d      	ldr	r3, [pc, #308]	@ (800dc84 <tcp_input+0x28c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	b29b      	uxth	r3, r3
 800db54:	4a4b      	ldr	r2, [pc, #300]	@ (800dc84 <tcp_input+0x28c>)
 800db56:	6814      	ldr	r4, [r2, #0]
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fc fa57 	bl	800a00c <lwip_htons>
 800db5e:	4603      	mov	r3, r0
 800db60:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800db62:	4b48      	ldr	r3, [pc, #288]	@ (800dc84 <tcp_input+0x28c>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	885b      	ldrh	r3, [r3, #2]
 800db68:	b29b      	uxth	r3, r3
 800db6a:	4a46      	ldr	r2, [pc, #280]	@ (800dc84 <tcp_input+0x28c>)
 800db6c:	6814      	ldr	r4, [r2, #0]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fc fa4c 	bl	800a00c <lwip_htons>
 800db74:	4603      	mov	r3, r0
 800db76:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800db78:	4b42      	ldr	r3, [pc, #264]	@ (800dc84 <tcp_input+0x28c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	4a41      	ldr	r2, [pc, #260]	@ (800dc84 <tcp_input+0x28c>)
 800db80:	6814      	ldr	r4, [r2, #0]
 800db82:	4618      	mov	r0, r3
 800db84:	f7fc fa57 	bl	800a036 <lwip_htonl>
 800db88:	4603      	mov	r3, r0
 800db8a:	6063      	str	r3, [r4, #4]
 800db8c:	6863      	ldr	r3, [r4, #4]
 800db8e:	4a45      	ldr	r2, [pc, #276]	@ (800dca4 <tcp_input+0x2ac>)
 800db90:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800db92:	4b3c      	ldr	r3, [pc, #240]	@ (800dc84 <tcp_input+0x28c>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	4a3a      	ldr	r2, [pc, #232]	@ (800dc84 <tcp_input+0x28c>)
 800db9a:	6814      	ldr	r4, [r2, #0]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fc fa4a 	bl	800a036 <lwip_htonl>
 800dba2:	4603      	mov	r3, r0
 800dba4:	60a3      	str	r3, [r4, #8]
 800dba6:	68a3      	ldr	r3, [r4, #8]
 800dba8:	4a3f      	ldr	r2, [pc, #252]	@ (800dca8 <tcp_input+0x2b0>)
 800dbaa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dbac:	4b35      	ldr	r3, [pc, #212]	@ (800dc84 <tcp_input+0x28c>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	89db      	ldrh	r3, [r3, #14]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	4a33      	ldr	r2, [pc, #204]	@ (800dc84 <tcp_input+0x28c>)
 800dbb6:	6814      	ldr	r4, [r2, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fc fa27 	bl	800a00c <lwip_htons>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dbc2:	4b30      	ldr	r3, [pc, #192]	@ (800dc84 <tcp_input+0x28c>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	899b      	ldrh	r3, [r3, #12]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fc fa1e 	bl	800a00c <lwip_htons>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	4b34      	ldr	r3, [pc, #208]	@ (800dcac <tcp_input+0x2b4>)
 800dbdc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	891a      	ldrh	r2, [r3, #8]
 800dbe2:	4b33      	ldr	r3, [pc, #204]	@ (800dcb0 <tcp_input+0x2b8>)
 800dbe4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dbe6:	4b31      	ldr	r3, [pc, #196]	@ (800dcac <tcp_input+0x2b4>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	f003 0303 	and.w	r3, r3, #3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00c      	beq.n	800dc0c <tcp_input+0x214>
    tcplen++;
 800dbf2:	4b2f      	ldr	r3, [pc, #188]	@ (800dcb0 <tcp_input+0x2b8>)
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	4b2d      	ldr	r3, [pc, #180]	@ (800dcb0 <tcp_input+0x2b8>)
 800dbfc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	891a      	ldrh	r2, [r3, #8]
 800dc02:	4b2b      	ldr	r3, [pc, #172]	@ (800dcb0 <tcp_input+0x2b8>)
 800dc04:	881b      	ldrh	r3, [r3, #0]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	f200 82e6 	bhi.w	800e1d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc10:	4b28      	ldr	r3, [pc, #160]	@ (800dcb4 <tcp_input+0x2bc>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	61fb      	str	r3, [r7, #28]
 800dc16:	e09d      	b.n	800dd54 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	7d1b      	ldrb	r3, [r3, #20]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d105      	bne.n	800dc2c <tcp_input+0x234>
 800dc20:	4b15      	ldr	r3, [pc, #84]	@ (800dc78 <tcp_input+0x280>)
 800dc22:	22fb      	movs	r2, #251	@ 0xfb
 800dc24:	4924      	ldr	r1, [pc, #144]	@ (800dcb8 <tcp_input+0x2c0>)
 800dc26:	4816      	ldr	r0, [pc, #88]	@ (800dc80 <tcp_input+0x288>)
 800dc28:	f007 fb1c 	bl	8015264 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	7d1b      	ldrb	r3, [r3, #20]
 800dc30:	2b0a      	cmp	r3, #10
 800dc32:	d105      	bne.n	800dc40 <tcp_input+0x248>
 800dc34:	4b10      	ldr	r3, [pc, #64]	@ (800dc78 <tcp_input+0x280>)
 800dc36:	22fc      	movs	r2, #252	@ 0xfc
 800dc38:	4920      	ldr	r1, [pc, #128]	@ (800dcbc <tcp_input+0x2c4>)
 800dc3a:	4811      	ldr	r0, [pc, #68]	@ (800dc80 <tcp_input+0x288>)
 800dc3c:	f007 fb12 	bl	8015264 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	7d1b      	ldrb	r3, [r3, #20]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d105      	bne.n	800dc54 <tcp_input+0x25c>
 800dc48:	4b0b      	ldr	r3, [pc, #44]	@ (800dc78 <tcp_input+0x280>)
 800dc4a:	22fd      	movs	r2, #253	@ 0xfd
 800dc4c:	491c      	ldr	r1, [pc, #112]	@ (800dcc0 <tcp_input+0x2c8>)
 800dc4e:	480c      	ldr	r0, [pc, #48]	@ (800dc80 <tcp_input+0x288>)
 800dc50:	f007 fb08 	bl	8015264 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	7a1b      	ldrb	r3, [r3, #8]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d033      	beq.n	800dcc4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	7a1a      	ldrb	r2, [r3, #8]
 800dc60:	4b09      	ldr	r3, [pc, #36]	@ (800dc88 <tcp_input+0x290>)
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc68:	3301      	adds	r3, #1
 800dc6a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d029      	beq.n	800dcc4 <tcp_input+0x2cc>
      prev = pcb;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	61bb      	str	r3, [r7, #24]
      continue;
 800dc74:	e06b      	b.n	800dd4e <tcp_input+0x356>
 800dc76:	bf00      	nop
 800dc78:	08018028 	.word	0x08018028
 800dc7c:	0801805c 	.word	0x0801805c
 800dc80:	08018074 	.word	0x08018074
 800dc84:	2000be90 	.word	0x2000be90
 800dc88:	20008d68 	.word	0x20008d68
 800dc8c:	2000be94 	.word	0x2000be94
 800dc90:	2000be98 	.word	0x2000be98
 800dc94:	2000be96 	.word	0x2000be96
 800dc98:	0801809c 	.word	0x0801809c
 800dc9c:	080180ac 	.word	0x080180ac
 800dca0:	080180b8 	.word	0x080180b8
 800dca4:	2000bea0 	.word	0x2000bea0
 800dca8:	2000bea4 	.word	0x2000bea4
 800dcac:	2000beac 	.word	0x2000beac
 800dcb0:	2000beaa 	.word	0x2000beaa
 800dcb4:	2000be74 	.word	0x2000be74
 800dcb8:	080180d8 	.word	0x080180d8
 800dcbc:	08018100 	.word	0x08018100
 800dcc0:	0801812c 	.word	0x0801812c
    }

    if (pcb->remote_port == tcphdr->src &&
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	8b1a      	ldrh	r2, [r3, #24]
 800dcc8:	4b72      	ldr	r3, [pc, #456]	@ (800de94 <tcp_input+0x49c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d13a      	bne.n	800dd4a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	8ada      	ldrh	r2, [r3, #22]
 800dcd8:	4b6e      	ldr	r3, [pc, #440]	@ (800de94 <tcp_input+0x49c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	885b      	ldrh	r3, [r3, #2]
 800dcde:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d132      	bne.n	800dd4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	685a      	ldr	r2, [r3, #4]
 800dce8:	4b6b      	ldr	r3, [pc, #428]	@ (800de98 <tcp_input+0x4a0>)
 800dcea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d12c      	bne.n	800dd4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	4b68      	ldr	r3, [pc, #416]	@ (800de98 <tcp_input+0x4a0>)
 800dcf6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d126      	bne.n	800dd4a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	69fa      	ldr	r2, [r7, #28]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d106      	bne.n	800dd14 <tcp_input+0x31c>
 800dd06:	4b65      	ldr	r3, [pc, #404]	@ (800de9c <tcp_input+0x4a4>)
 800dd08:	f240 120d 	movw	r2, #269	@ 0x10d
 800dd0c:	4964      	ldr	r1, [pc, #400]	@ (800dea0 <tcp_input+0x4a8>)
 800dd0e:	4865      	ldr	r0, [pc, #404]	@ (800dea4 <tcp_input+0x4ac>)
 800dd10:	f007 faa8 	bl	8015264 <iprintf>
      if (prev != NULL) {
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <tcp_input+0x338>
        prev->next = pcb->next;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	68da      	ldr	r2, [r3, #12]
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dd22:	4b61      	ldr	r3, [pc, #388]	@ (800dea8 <tcp_input+0x4b0>)
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dd2a:	4a5f      	ldr	r2, [pc, #380]	@ (800dea8 <tcp_input+0x4b0>)
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	69fa      	ldr	r2, [r7, #28]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d111      	bne.n	800dd5e <tcp_input+0x366>
 800dd3a:	4b58      	ldr	r3, [pc, #352]	@ (800de9c <tcp_input+0x4a4>)
 800dd3c:	f240 1215 	movw	r2, #277	@ 0x115
 800dd40:	495a      	ldr	r1, [pc, #360]	@ (800deac <tcp_input+0x4b4>)
 800dd42:	4858      	ldr	r0, [pc, #352]	@ (800dea4 <tcp_input+0x4ac>)
 800dd44:	f007 fa8e 	bl	8015264 <iprintf>
      break;
 800dd48:	e009      	b.n	800dd5e <tcp_input+0x366>
    }
    prev = pcb;
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	61fb      	str	r3, [r7, #28]
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f47f af5e 	bne.w	800dc18 <tcp_input+0x220>
 800dd5c:	e000      	b.n	800dd60 <tcp_input+0x368>
      break;
 800dd5e:	bf00      	nop
  }

  if (pcb == NULL) {
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f040 80aa 	bne.w	800debc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd68:	4b51      	ldr	r3, [pc, #324]	@ (800deb0 <tcp_input+0x4b8>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	61fb      	str	r3, [r7, #28]
 800dd6e:	e03f      	b.n	800ddf0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	7d1b      	ldrb	r3, [r3, #20]
 800dd74:	2b0a      	cmp	r3, #10
 800dd76:	d006      	beq.n	800dd86 <tcp_input+0x38e>
 800dd78:	4b48      	ldr	r3, [pc, #288]	@ (800de9c <tcp_input+0x4a4>)
 800dd7a:	f240 121f 	movw	r2, #287	@ 0x11f
 800dd7e:	494d      	ldr	r1, [pc, #308]	@ (800deb4 <tcp_input+0x4bc>)
 800dd80:	4848      	ldr	r0, [pc, #288]	@ (800dea4 <tcp_input+0x4ac>)
 800dd82:	f007 fa6f 	bl	8015264 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	7a1b      	ldrb	r3, [r3, #8]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d009      	beq.n	800dda2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	7a1a      	ldrb	r2, [r3, #8]
 800dd92:	4b41      	ldr	r3, [pc, #260]	@ (800de98 <tcp_input+0x4a0>)
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d122      	bne.n	800dde8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	8b1a      	ldrh	r2, [r3, #24]
 800dda6:	4b3b      	ldr	r3, [pc, #236]	@ (800de94 <tcp_input+0x49c>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d11b      	bne.n	800ddea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	8ada      	ldrh	r2, [r3, #22]
 800ddb6:	4b37      	ldr	r3, [pc, #220]	@ (800de94 <tcp_input+0x49c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	885b      	ldrh	r3, [r3, #2]
 800ddbc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d113      	bne.n	800ddea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	4b34      	ldr	r3, [pc, #208]	@ (800de98 <tcp_input+0x4a0>)
 800ddc8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d10d      	bne.n	800ddea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4b31      	ldr	r3, [pc, #196]	@ (800de98 <tcp_input+0x4a0>)
 800ddd4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d107      	bne.n	800ddea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ddda:	69f8      	ldr	r0, [r7, #28]
 800dddc:	f000 fb56 	bl	800e48c <tcp_timewait_input>
        }
        pbuf_free(p);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7fd fd01 	bl	800b7e8 <pbuf_free>
        return;
 800dde6:	e1fd      	b.n	800e1e4 <tcp_input+0x7ec>
        continue;
 800dde8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	61fb      	str	r3, [r7, #28]
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1bc      	bne.n	800dd70 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddfa:	4b2f      	ldr	r3, [pc, #188]	@ (800deb8 <tcp_input+0x4c0>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	e02a      	b.n	800de58 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	7a1b      	ldrb	r3, [r3, #8]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00c      	beq.n	800de24 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	7a1a      	ldrb	r2, [r3, #8]
 800de0e:	4b22      	ldr	r3, [pc, #136]	@ (800de98 <tcp_input+0x4a0>)
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de16:	3301      	adds	r3, #1
 800de18:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d002      	beq.n	800de24 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	61bb      	str	r3, [r7, #24]
        continue;
 800de22:	e016      	b.n	800de52 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	8ada      	ldrh	r2, [r3, #22]
 800de28:	4b1a      	ldr	r3, [pc, #104]	@ (800de94 <tcp_input+0x49c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	885b      	ldrh	r3, [r3, #2]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	429a      	cmp	r2, r3
 800de32:	d10c      	bne.n	800de4e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	4b17      	ldr	r3, [pc, #92]	@ (800de98 <tcp_input+0x4a0>)
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d00f      	beq.n	800de60 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00d      	beq.n	800de62 <tcp_input+0x46a>
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d009      	beq.n	800de62 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1d1      	bne.n	800de02 <tcp_input+0x40a>
 800de5e:	e000      	b.n	800de62 <tcp_input+0x46a>
            break;
 800de60:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d029      	beq.n	800debc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00a      	beq.n	800de84 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	68da      	ldr	r2, [r3, #12]
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800de76:	4b10      	ldr	r3, [pc, #64]	@ (800deb8 <tcp_input+0x4c0>)
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800de7e:	4a0e      	ldr	r2, [pc, #56]	@ (800deb8 <tcp_input+0x4c0>)
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800de84:	6978      	ldr	r0, [r7, #20]
 800de86:	f000 fa03 	bl	800e290 <tcp_listen_input>
      }
      pbuf_free(p);
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f7fd fcac 	bl	800b7e8 <pbuf_free>
      return;
 800de90:	e1a8      	b.n	800e1e4 <tcp_input+0x7ec>
 800de92:	bf00      	nop
 800de94:	2000be90 	.word	0x2000be90
 800de98:	20008d68 	.word	0x20008d68
 800de9c:	08018028 	.word	0x08018028
 800dea0:	08018154 	.word	0x08018154
 800dea4:	08018074 	.word	0x08018074
 800dea8:	2000be74 	.word	0x2000be74
 800deac:	08018180 	.word	0x08018180
 800deb0:	2000be78 	.word	0x2000be78
 800deb4:	080181ac 	.word	0x080181ac
 800deb8:	2000be70 	.word	0x2000be70
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f000 8158 	beq.w	800e174 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dec4:	4b95      	ldr	r3, [pc, #596]	@ (800e11c <tcp_input+0x724>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	891a      	ldrh	r2, [r3, #8]
 800dece:	4b93      	ldr	r3, [pc, #588]	@ (800e11c <tcp_input+0x724>)
 800ded0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ded2:	4a92      	ldr	r2, [pc, #584]	@ (800e11c <tcp_input+0x724>)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ded8:	4b91      	ldr	r3, [pc, #580]	@ (800e120 <tcp_input+0x728>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a8f      	ldr	r2, [pc, #572]	@ (800e11c <tcp_input+0x724>)
 800dede:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dee0:	4b90      	ldr	r3, [pc, #576]	@ (800e124 <tcp_input+0x72c>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dee6:	4b90      	ldr	r3, [pc, #576]	@ (800e128 <tcp_input+0x730>)
 800dee8:	2200      	movs	r2, #0
 800deea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800deec:	4b8f      	ldr	r3, [pc, #572]	@ (800e12c <tcp_input+0x734>)
 800deee:	2200      	movs	r2, #0
 800def0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800def2:	4b8f      	ldr	r3, [pc, #572]	@ (800e130 <tcp_input+0x738>)
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	f003 0308 	and.w	r3, r3, #8
 800defa:	2b00      	cmp	r3, #0
 800defc:	d006      	beq.n	800df0c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	7b5b      	ldrb	r3, [r3, #13]
 800df02:	f043 0301 	orr.w	r3, r3, #1
 800df06:	b2da      	uxtb	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df10:	2b00      	cmp	r3, #0
 800df12:	d017      	beq.n	800df44 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800df14:	69f8      	ldr	r0, [r7, #28]
 800df16:	f7ff f85b 	bl	800cfd0 <tcp_process_refused_data>
 800df1a:	4603      	mov	r3, r0
 800df1c:	f113 0f0d 	cmn.w	r3, #13
 800df20:	d007      	beq.n	800df32 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00c      	beq.n	800df44 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800df2a:	4b82      	ldr	r3, [pc, #520]	@ (800e134 <tcp_input+0x73c>)
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d008      	beq.n	800df44 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df36:	2b00      	cmp	r3, #0
 800df38:	f040 80e3 	bne.w	800e102 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800df3c:	69f8      	ldr	r0, [r7, #28]
 800df3e:	f003 fdff 	bl	8011b40 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800df42:	e0de      	b.n	800e102 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800df44:	4a7c      	ldr	r2, [pc, #496]	@ (800e138 <tcp_input+0x740>)
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800df4a:	69f8      	ldr	r0, [r7, #28]
 800df4c:	f000 fb18 	bl	800e580 <tcp_process>
 800df50:	4603      	mov	r3, r0
 800df52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800df54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df58:	f113 0f0d 	cmn.w	r3, #13
 800df5c:	f000 80d3 	beq.w	800e106 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800df60:	4b71      	ldr	r3, [pc, #452]	@ (800e128 <tcp_input+0x730>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	f003 0308 	and.w	r3, r3, #8
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d015      	beq.n	800df98 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df72:	2b00      	cmp	r3, #0
 800df74:	d008      	beq.n	800df88 <tcp_input+0x590>
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df7c:	69fa      	ldr	r2, [r7, #28]
 800df7e:	6912      	ldr	r2, [r2, #16]
 800df80:	f06f 010d 	mvn.w	r1, #13
 800df84:	4610      	mov	r0, r2
 800df86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800df88:	69f9      	ldr	r1, [r7, #28]
 800df8a:	486c      	ldr	r0, [pc, #432]	@ (800e13c <tcp_input+0x744>)
 800df8c:	f7ff fbbc 	bl	800d708 <tcp_pcb_remove>
        tcp_free(pcb);
 800df90:	69f8      	ldr	r0, [r7, #28]
 800df92:	f7fd fed5 	bl	800bd40 <tcp_free>
 800df96:	e0da      	b.n	800e14e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800df9c:	4b63      	ldr	r3, [pc, #396]	@ (800e12c <tcp_input+0x734>)
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01d      	beq.n	800dfe0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dfa4:	4b61      	ldr	r3, [pc, #388]	@ (800e12c <tcp_input+0x734>)
 800dfa6:	881b      	ldrh	r3, [r3, #0]
 800dfa8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00a      	beq.n	800dfca <tcp_input+0x5d2>
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfba:	69fa      	ldr	r2, [r7, #28]
 800dfbc:	6910      	ldr	r0, [r2, #16]
 800dfbe:	89fa      	ldrh	r2, [r7, #14]
 800dfc0:	69f9      	ldr	r1, [r7, #28]
 800dfc2:	4798      	blx	r3
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	74fb      	strb	r3, [r7, #19]
 800dfc8:	e001      	b.n	800dfce <tcp_input+0x5d6>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dfce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfd2:	f113 0f0d 	cmn.w	r3, #13
 800dfd6:	f000 8098 	beq.w	800e10a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dfda:	4b54      	ldr	r3, [pc, #336]	@ (800e12c <tcp_input+0x734>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dfe0:	69f8      	ldr	r0, [r7, #28]
 800dfe2:	f000 f915 	bl	800e210 <tcp_input_delayed_close>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f040 8090 	bne.w	800e10e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dfee:	4b4d      	ldr	r3, [pc, #308]	@ (800e124 <tcp_input+0x72c>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d041      	beq.n	800e07a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d006      	beq.n	800e00c <tcp_input+0x614>
 800dffe:	4b50      	ldr	r3, [pc, #320]	@ (800e140 <tcp_input+0x748>)
 800e000:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e004:	494f      	ldr	r1, [pc, #316]	@ (800e144 <tcp_input+0x74c>)
 800e006:	4850      	ldr	r0, [pc, #320]	@ (800e148 <tcp_input+0x750>)
 800e008:	f007 f92c 	bl	8015264 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	8b5b      	ldrh	r3, [r3, #26]
 800e010:	f003 0310 	and.w	r3, r3, #16
 800e014:	2b00      	cmp	r3, #0
 800e016:	d008      	beq.n	800e02a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e018:	4b42      	ldr	r3, [pc, #264]	@ (800e124 <tcp_input+0x72c>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fd fbe3 	bl	800b7e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e022:	69f8      	ldr	r0, [r7, #28]
 800e024:	f7fe f9d0 	bl	800c3c8 <tcp_abort>
            goto aborted;
 800e028:	e091      	b.n	800e14e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00c      	beq.n	800e04e <tcp_input+0x656>
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	6918      	ldr	r0, [r3, #16]
 800e03e:	4b39      	ldr	r3, [pc, #228]	@ (800e124 <tcp_input+0x72c>)
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	2300      	movs	r3, #0
 800e044:	69f9      	ldr	r1, [r7, #28]
 800e046:	47a0      	blx	r4
 800e048:	4603      	mov	r3, r0
 800e04a:	74fb      	strb	r3, [r7, #19]
 800e04c:	e008      	b.n	800e060 <tcp_input+0x668>
 800e04e:	4b35      	ldr	r3, [pc, #212]	@ (800e124 <tcp_input+0x72c>)
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	2300      	movs	r3, #0
 800e054:	69f9      	ldr	r1, [r7, #28]
 800e056:	2000      	movs	r0, #0
 800e058:	f7ff f890 	bl	800d17c <tcp_recv_null>
 800e05c:	4603      	mov	r3, r0
 800e05e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e060:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e064:	f113 0f0d 	cmn.w	r3, #13
 800e068:	d053      	beq.n	800e112 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e06a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d003      	beq.n	800e07a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e072:	4b2c      	ldr	r3, [pc, #176]	@ (800e124 <tcp_input+0x72c>)
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	69fb      	ldr	r3, [r7, #28]
 800e078:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e07a:	4b2b      	ldr	r3, [pc, #172]	@ (800e128 <tcp_input+0x730>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	f003 0320 	and.w	r3, r3, #32
 800e082:	2b00      	cmp	r3, #0
 800e084:	d030      	beq.n	800e0e8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d009      	beq.n	800e0a2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e092:	7b5a      	ldrb	r2, [r3, #13]
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e098:	f042 0220 	orr.w	r2, r2, #32
 800e09c:	b2d2      	uxtb	r2, r2
 800e09e:	735a      	strb	r2, [r3, #13]
 800e0a0:	e022      	b.n	800e0e8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e0aa:	d005      	beq.n	800e0b8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00b      	beq.n	800e0da <tcp_input+0x6e2>
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	6918      	ldr	r0, [r3, #16]
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	69f9      	ldr	r1, [r7, #28]
 800e0d2:	47a0      	blx	r4
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	74fb      	strb	r3, [r7, #19]
 800e0d8:	e001      	b.n	800e0de <tcp_input+0x6e6>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e0de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0e2:	f113 0f0d 	cmn.w	r3, #13
 800e0e6:	d016      	beq.n	800e116 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e0e8:	4b13      	ldr	r3, [pc, #76]	@ (800e138 <tcp_input+0x740>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e0ee:	69f8      	ldr	r0, [r7, #28]
 800e0f0:	f000 f88e 	bl	800e210 <tcp_input_delayed_close>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d128      	bne.n	800e14c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e0fa:	69f8      	ldr	r0, [r7, #28]
 800e0fc:	f002 ff1a 	bl	8010f34 <tcp_output>
 800e100:	e025      	b.n	800e14e <tcp_input+0x756>
        goto aborted;
 800e102:	bf00      	nop
 800e104:	e023      	b.n	800e14e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e106:	bf00      	nop
 800e108:	e021      	b.n	800e14e <tcp_input+0x756>
              goto aborted;
 800e10a:	bf00      	nop
 800e10c:	e01f      	b.n	800e14e <tcp_input+0x756>
          goto aborted;
 800e10e:	bf00      	nop
 800e110:	e01d      	b.n	800e14e <tcp_input+0x756>
            goto aborted;
 800e112:	bf00      	nop
 800e114:	e01b      	b.n	800e14e <tcp_input+0x756>
              goto aborted;
 800e116:	bf00      	nop
 800e118:	e019      	b.n	800e14e <tcp_input+0x756>
 800e11a:	bf00      	nop
 800e11c:	2000be80 	.word	0x2000be80
 800e120:	2000be90 	.word	0x2000be90
 800e124:	2000beb0 	.word	0x2000beb0
 800e128:	2000bead 	.word	0x2000bead
 800e12c:	2000bea8 	.word	0x2000bea8
 800e130:	2000beac 	.word	0x2000beac
 800e134:	2000beaa 	.word	0x2000beaa
 800e138:	2000beb4 	.word	0x2000beb4
 800e13c:	2000be74 	.word	0x2000be74
 800e140:	08018028 	.word	0x08018028
 800e144:	080181dc 	.word	0x080181dc
 800e148:	08018074 	.word	0x08018074
          goto aborted;
 800e14c:	bf00      	nop
    tcp_input_pcb = NULL;
 800e14e:	4b27      	ldr	r3, [pc, #156]	@ (800e1ec <tcp_input+0x7f4>)
 800e150:	2200      	movs	r2, #0
 800e152:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e154:	4b26      	ldr	r3, [pc, #152]	@ (800e1f0 <tcp_input+0x7f8>)
 800e156:	2200      	movs	r2, #0
 800e158:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e15a:	4b26      	ldr	r3, [pc, #152]	@ (800e1f4 <tcp_input+0x7fc>)
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d03f      	beq.n	800e1e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e162:	4b24      	ldr	r3, [pc, #144]	@ (800e1f4 <tcp_input+0x7fc>)
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	4618      	mov	r0, r3
 800e168:	f7fd fb3e 	bl	800b7e8 <pbuf_free>
      inseg.p = NULL;
 800e16c:	4b21      	ldr	r3, [pc, #132]	@ (800e1f4 <tcp_input+0x7fc>)
 800e16e:	2200      	movs	r2, #0
 800e170:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e172:	e036      	b.n	800e1e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e174:	4b20      	ldr	r3, [pc, #128]	@ (800e1f8 <tcp_input+0x800>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	899b      	ldrh	r3, [r3, #12]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fb ff45 	bl	800a00c <lwip_htons>
 800e182:	4603      	mov	r3, r0
 800e184:	b2db      	uxtb	r3, r3
 800e186:	f003 0304 	and.w	r3, r3, #4
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d118      	bne.n	800e1c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e18e:	4b1b      	ldr	r3, [pc, #108]	@ (800e1fc <tcp_input+0x804>)
 800e190:	6819      	ldr	r1, [r3, #0]
 800e192:	4b1b      	ldr	r3, [pc, #108]	@ (800e200 <tcp_input+0x808>)
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	4b1a      	ldr	r3, [pc, #104]	@ (800e204 <tcp_input+0x80c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e19e:	4b16      	ldr	r3, [pc, #88]	@ (800e1f8 <tcp_input+0x800>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1a2:	885b      	ldrh	r3, [r3, #2]
 800e1a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1a6:	4a14      	ldr	r2, [pc, #80]	@ (800e1f8 <tcp_input+0x800>)
 800e1a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1aa:	8812      	ldrh	r2, [r2, #0]
 800e1ac:	b292      	uxth	r2, r2
 800e1ae:	9202      	str	r2, [sp, #8]
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	4b15      	ldr	r3, [pc, #84]	@ (800e208 <tcp_input+0x810>)
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	4b15      	ldr	r3, [pc, #84]	@ (800e20c <tcp_input+0x814>)
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	2000      	movs	r0, #0
 800e1bc:	f003 fc6e 	bl	8011a9c <tcp_rst>
    pbuf_free(p);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7fd fb11 	bl	800b7e8 <pbuf_free>
  return;
 800e1c6:	e00c      	b.n	800e1e2 <tcp_input+0x7ea>
    goto dropped;
 800e1c8:	bf00      	nop
 800e1ca:	e006      	b.n	800e1da <tcp_input+0x7e2>
    goto dropped;
 800e1cc:	bf00      	nop
 800e1ce:	e004      	b.n	800e1da <tcp_input+0x7e2>
    goto dropped;
 800e1d0:	bf00      	nop
 800e1d2:	e002      	b.n	800e1da <tcp_input+0x7e2>
      goto dropped;
 800e1d4:	bf00      	nop
 800e1d6:	e000      	b.n	800e1da <tcp_input+0x7e2>
      goto dropped;
 800e1d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7fd fb04 	bl	800b7e8 <pbuf_free>
 800e1e0:	e000      	b.n	800e1e4 <tcp_input+0x7ec>
  return;
 800e1e2:	bf00      	nop
}
 800e1e4:	3724      	adds	r7, #36	@ 0x24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd90      	pop	{r4, r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	2000beb4 	.word	0x2000beb4
 800e1f0:	2000beb0 	.word	0x2000beb0
 800e1f4:	2000be80 	.word	0x2000be80
 800e1f8:	2000be90 	.word	0x2000be90
 800e1fc:	2000bea4 	.word	0x2000bea4
 800e200:	2000beaa 	.word	0x2000beaa
 800e204:	2000bea0 	.word	0x2000bea0
 800e208:	20008d78 	.word	0x20008d78
 800e20c:	20008d7c 	.word	0x20008d7c

0800e210 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d106      	bne.n	800e22c <tcp_input_delayed_close+0x1c>
 800e21e:	4b17      	ldr	r3, [pc, #92]	@ (800e27c <tcp_input_delayed_close+0x6c>)
 800e220:	f240 225a 	movw	r2, #602	@ 0x25a
 800e224:	4916      	ldr	r1, [pc, #88]	@ (800e280 <tcp_input_delayed_close+0x70>)
 800e226:	4817      	ldr	r0, [pc, #92]	@ (800e284 <tcp_input_delayed_close+0x74>)
 800e228:	f007 f81c 	bl	8015264 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e22c:	4b16      	ldr	r3, [pc, #88]	@ (800e288 <tcp_input_delayed_close+0x78>)
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	f003 0310 	and.w	r3, r3, #16
 800e234:	2b00      	cmp	r3, #0
 800e236:	d01c      	beq.n	800e272 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	8b5b      	ldrh	r3, [r3, #26]
 800e23c:	f003 0310 	and.w	r3, r3, #16
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10d      	bne.n	800e260 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d008      	beq.n	800e260 <tcp_input_delayed_close+0x50>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	6912      	ldr	r2, [r2, #16]
 800e258:	f06f 010e 	mvn.w	r1, #14
 800e25c:	4610      	mov	r0, r2
 800e25e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e260:	6879      	ldr	r1, [r7, #4]
 800e262:	480a      	ldr	r0, [pc, #40]	@ (800e28c <tcp_input_delayed_close+0x7c>)
 800e264:	f7ff fa50 	bl	800d708 <tcp_pcb_remove>
    tcp_free(pcb);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7fd fd69 	bl	800bd40 <tcp_free>
    return 1;
 800e26e:	2301      	movs	r3, #1
 800e270:	e000      	b.n	800e274 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	08018028 	.word	0x08018028
 800e280:	080181f8 	.word	0x080181f8
 800e284:	08018074 	.word	0x08018074
 800e288:	2000bead 	.word	0x2000bead
 800e28c:	2000be74 	.word	0x2000be74

0800e290 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e290:	b590      	push	{r4, r7, lr}
 800e292:	b08b      	sub	sp, #44	@ 0x2c
 800e294:	af04      	add	r7, sp, #16
 800e296:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e298:	4b6f      	ldr	r3, [pc, #444]	@ (800e458 <tcp_listen_input+0x1c8>)
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	f003 0304 	and.w	r3, r3, #4
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f040 80d2 	bne.w	800e44a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d106      	bne.n	800e2ba <tcp_listen_input+0x2a>
 800e2ac:	4b6b      	ldr	r3, [pc, #428]	@ (800e45c <tcp_listen_input+0x1cc>)
 800e2ae:	f240 2281 	movw	r2, #641	@ 0x281
 800e2b2:	496b      	ldr	r1, [pc, #428]	@ (800e460 <tcp_listen_input+0x1d0>)
 800e2b4:	486b      	ldr	r0, [pc, #428]	@ (800e464 <tcp_listen_input+0x1d4>)
 800e2b6:	f006 ffd5 	bl	8015264 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e2ba:	4b67      	ldr	r3, [pc, #412]	@ (800e458 <tcp_listen_input+0x1c8>)
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	f003 0310 	and.w	r3, r3, #16
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d019      	beq.n	800e2fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2c6:	4b68      	ldr	r3, [pc, #416]	@ (800e468 <tcp_listen_input+0x1d8>)
 800e2c8:	6819      	ldr	r1, [r3, #0]
 800e2ca:	4b68      	ldr	r3, [pc, #416]	@ (800e46c <tcp_listen_input+0x1dc>)
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	4b67      	ldr	r3, [pc, #412]	@ (800e470 <tcp_listen_input+0x1e0>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2d6:	4b67      	ldr	r3, [pc, #412]	@ (800e474 <tcp_listen_input+0x1e4>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2da:	885b      	ldrh	r3, [r3, #2]
 800e2dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2de:	4a65      	ldr	r2, [pc, #404]	@ (800e474 <tcp_listen_input+0x1e4>)
 800e2e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2e2:	8812      	ldrh	r2, [r2, #0]
 800e2e4:	b292      	uxth	r2, r2
 800e2e6:	9202      	str	r2, [sp, #8]
 800e2e8:	9301      	str	r3, [sp, #4]
 800e2ea:	4b63      	ldr	r3, [pc, #396]	@ (800e478 <tcp_listen_input+0x1e8>)
 800e2ec:	9300      	str	r3, [sp, #0]
 800e2ee:	4b63      	ldr	r3, [pc, #396]	@ (800e47c <tcp_listen_input+0x1ec>)
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f003 fbd2 	bl	8011a9c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e2f8:	e0a9      	b.n	800e44e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e2fa:	4b57      	ldr	r3, [pc, #348]	@ (800e458 <tcp_listen_input+0x1c8>)
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	f003 0302 	and.w	r3, r3, #2
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 80a3 	beq.w	800e44e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7d5b      	ldrb	r3, [r3, #21]
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7ff f859 	bl	800d3c4 <tcp_alloc>
 800e312:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d111      	bne.n	800e33e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00a      	beq.n	800e338 <tcp_listen_input+0xa8>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	699b      	ldr	r3, [r3, #24]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	6910      	ldr	r0, [r2, #16]
 800e32a:	f04f 32ff 	mov.w	r2, #4294967295
 800e32e:	2100      	movs	r1, #0
 800e330:	4798      	blx	r3
 800e332:	4603      	mov	r3, r0
 800e334:	73bb      	strb	r3, [r7, #14]
      return;
 800e336:	e08b      	b.n	800e450 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e338:	23f0      	movs	r3, #240	@ 0xf0
 800e33a:	73bb      	strb	r3, [r7, #14]
      return;
 800e33c:	e088      	b.n	800e450 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e33e:	4b50      	ldr	r3, [pc, #320]	@ (800e480 <tcp_listen_input+0x1f0>)
 800e340:	695a      	ldr	r2, [r3, #20]
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e346:	4b4e      	ldr	r3, [pc, #312]	@ (800e480 <tcp_listen_input+0x1f0>)
 800e348:	691a      	ldr	r2, [r3, #16]
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	8ada      	ldrh	r2, [r3, #22]
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e356:	4b47      	ldr	r3, [pc, #284]	@ (800e474 <tcp_listen_input+0x1e4>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	881b      	ldrh	r3, [r3, #0]
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	2203      	movs	r2, #3
 800e366:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e368:	4b41      	ldr	r3, [pc, #260]	@ (800e470 <tcp_listen_input+0x1e0>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	1c5a      	adds	r2, r3, #1
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e37a:	6978      	ldr	r0, [r7, #20]
 800e37c:	f7ff fa58 	bl	800d830 <tcp_next_iss>
 800e380:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	693a      	ldr	r2, [r7, #16]
 800e38c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	693a      	ldr	r2, [r7, #16]
 800e398:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e39a:	4b35      	ldr	r3, [pc, #212]	@ (800e470 <tcp_listen_input+0x1e0>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	1e5a      	subs	r2, r3, #1
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	691a      	ldr	r2, [r3, #16]
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	7a5b      	ldrb	r3, [r3, #9]
 800e3b6:	f003 030c 	and.w	r3, r3, #12
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	7a1a      	ldrb	r2, [r3, #8]
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e3c8:	4b2e      	ldr	r3, [pc, #184]	@ (800e484 <tcp_listen_input+0x1f4>)
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	60da      	str	r2, [r3, #12]
 800e3d0:	4a2c      	ldr	r2, [pc, #176]	@ (800e484 <tcp_listen_input+0x1f4>)
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	6013      	str	r3, [r2, #0]
 800e3d6:	f003 fd23 	bl	8011e20 <tcp_timer_needed>
 800e3da:	4b2b      	ldr	r3, [pc, #172]	@ (800e488 <tcp_listen_input+0x1f8>)
 800e3dc:	2201      	movs	r2, #1
 800e3de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e3e0:	6978      	ldr	r0, [r7, #20]
 800e3e2:	f001 fd8b 	bl	800fefc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e3e6:	4b23      	ldr	r3, [pc, #140]	@ (800e474 <tcp_listen_input+0x1e4>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	89db      	ldrh	r3, [r3, #14]
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	3304      	adds	r3, #4
 800e408:	4618      	mov	r0, r3
 800e40a:	f005 fa5d 	bl	80138c8 <ip4_route>
 800e40e:	4601      	mov	r1, r0
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	3304      	adds	r3, #4
 800e414:	461a      	mov	r2, r3
 800e416:	4620      	mov	r0, r4
 800e418:	f7ff fa30 	bl	800d87c <tcp_eff_send_mss_netif>
 800e41c:	4603      	mov	r3, r0
 800e41e:	461a      	mov	r2, r3
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e424:	2112      	movs	r1, #18
 800e426:	6978      	ldr	r0, [r7, #20]
 800e428:	f002 fc96 	bl	8010d58 <tcp_enqueue_flags>
 800e42c:	4603      	mov	r3, r0
 800e42e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d004      	beq.n	800e442 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e438:	2100      	movs	r1, #0
 800e43a:	6978      	ldr	r0, [r7, #20]
 800e43c:	f7fd ff06 	bl	800c24c <tcp_abandon>
      return;
 800e440:	e006      	b.n	800e450 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e442:	6978      	ldr	r0, [r7, #20]
 800e444:	f002 fd76 	bl	8010f34 <tcp_output>
  return;
 800e448:	e001      	b.n	800e44e <tcp_listen_input+0x1be>
    return;
 800e44a:	bf00      	nop
 800e44c:	e000      	b.n	800e450 <tcp_listen_input+0x1c0>
  return;
 800e44e:	bf00      	nop
}
 800e450:	371c      	adds	r7, #28
 800e452:	46bd      	mov	sp, r7
 800e454:	bd90      	pop	{r4, r7, pc}
 800e456:	bf00      	nop
 800e458:	2000beac 	.word	0x2000beac
 800e45c:	08018028 	.word	0x08018028
 800e460:	08018220 	.word	0x08018220
 800e464:	08018074 	.word	0x08018074
 800e468:	2000bea4 	.word	0x2000bea4
 800e46c:	2000beaa 	.word	0x2000beaa
 800e470:	2000bea0 	.word	0x2000bea0
 800e474:	2000be90 	.word	0x2000be90
 800e478:	20008d78 	.word	0x20008d78
 800e47c:	20008d7c 	.word	0x20008d7c
 800e480:	20008d68 	.word	0x20008d68
 800e484:	2000be74 	.word	0x2000be74
 800e488:	2000be7c 	.word	0x2000be7c

0800e48c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b086      	sub	sp, #24
 800e490:	af04      	add	r7, sp, #16
 800e492:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e494:	4b2f      	ldr	r3, [pc, #188]	@ (800e554 <tcp_timewait_input+0xc8>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	f003 0304 	and.w	r3, r3, #4
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d153      	bne.n	800e548 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d106      	bne.n	800e4b4 <tcp_timewait_input+0x28>
 800e4a6:	4b2c      	ldr	r3, [pc, #176]	@ (800e558 <tcp_timewait_input+0xcc>)
 800e4a8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e4ac:	492b      	ldr	r1, [pc, #172]	@ (800e55c <tcp_timewait_input+0xd0>)
 800e4ae:	482c      	ldr	r0, [pc, #176]	@ (800e560 <tcp_timewait_input+0xd4>)
 800e4b0:	f006 fed8 	bl	8015264 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e4b4:	4b27      	ldr	r3, [pc, #156]	@ (800e554 <tcp_timewait_input+0xc8>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	f003 0302 	and.w	r3, r3, #2
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d02a      	beq.n	800e516 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e4c0:	4b28      	ldr	r3, [pc, #160]	@ (800e564 <tcp_timewait_input+0xd8>)
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	db2d      	blt.n	800e52a <tcp_timewait_input+0x9e>
 800e4ce:	4b25      	ldr	r3, [pc, #148]	@ (800e564 <tcp_timewait_input+0xd8>)
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4d6:	6879      	ldr	r1, [r7, #4]
 800e4d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e4da:	440b      	add	r3, r1
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	dc23      	bgt.n	800e52a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4e2:	4b21      	ldr	r3, [pc, #132]	@ (800e568 <tcp_timewait_input+0xdc>)
 800e4e4:	6819      	ldr	r1, [r3, #0]
 800e4e6:	4b21      	ldr	r3, [pc, #132]	@ (800e56c <tcp_timewait_input+0xe0>)
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	4b1d      	ldr	r3, [pc, #116]	@ (800e564 <tcp_timewait_input+0xd8>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4f2:	4b1f      	ldr	r3, [pc, #124]	@ (800e570 <tcp_timewait_input+0xe4>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4f6:	885b      	ldrh	r3, [r3, #2]
 800e4f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4fa:	4a1d      	ldr	r2, [pc, #116]	@ (800e570 <tcp_timewait_input+0xe4>)
 800e4fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4fe:	8812      	ldrh	r2, [r2, #0]
 800e500:	b292      	uxth	r2, r2
 800e502:	9202      	str	r2, [sp, #8]
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	4b1b      	ldr	r3, [pc, #108]	@ (800e574 <tcp_timewait_input+0xe8>)
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	4b1b      	ldr	r3, [pc, #108]	@ (800e578 <tcp_timewait_input+0xec>)
 800e50c:	4602      	mov	r2, r0
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f003 fac4 	bl	8011a9c <tcp_rst>
      return;
 800e514:	e01b      	b.n	800e54e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e516:	4b0f      	ldr	r3, [pc, #60]	@ (800e554 <tcp_timewait_input+0xc8>)
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	f003 0301 	and.w	r3, r3, #1
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d003      	beq.n	800e52a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e522:	4b16      	ldr	r3, [pc, #88]	@ (800e57c <tcp_timewait_input+0xf0>)
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e52a:	4b10      	ldr	r3, [pc, #64]	@ (800e56c <tcp_timewait_input+0xe0>)
 800e52c:	881b      	ldrh	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00c      	beq.n	800e54c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	8b5b      	ldrh	r3, [r3, #26]
 800e536:	f043 0302 	orr.w	r3, r3, #2
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f002 fcf7 	bl	8010f34 <tcp_output>
  }
  return;
 800e546:	e001      	b.n	800e54c <tcp_timewait_input+0xc0>
    return;
 800e548:	bf00      	nop
 800e54a:	e000      	b.n	800e54e <tcp_timewait_input+0xc2>
  return;
 800e54c:	bf00      	nop
}
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	2000beac 	.word	0x2000beac
 800e558:	08018028 	.word	0x08018028
 800e55c:	08018240 	.word	0x08018240
 800e560:	08018074 	.word	0x08018074
 800e564:	2000bea0 	.word	0x2000bea0
 800e568:	2000bea4 	.word	0x2000bea4
 800e56c:	2000beaa 	.word	0x2000beaa
 800e570:	2000be90 	.word	0x2000be90
 800e574:	20008d78 	.word	0x20008d78
 800e578:	20008d7c 	.word	0x20008d7c
 800e57c:	2000be68 	.word	0x2000be68

0800e580 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e580:	b590      	push	{r4, r7, lr}
 800e582:	b08d      	sub	sp, #52	@ 0x34
 800e584:	af04      	add	r7, sp, #16
 800e586:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <tcp_process+0x24>
 800e596:	4b9d      	ldr	r3, [pc, #628]	@ (800e80c <tcp_process+0x28c>)
 800e598:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e59c:	499c      	ldr	r1, [pc, #624]	@ (800e810 <tcp_process+0x290>)
 800e59e:	489d      	ldr	r0, [pc, #628]	@ (800e814 <tcp_process+0x294>)
 800e5a0:	f006 fe60 	bl	8015264 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e5a4:	4b9c      	ldr	r3, [pc, #624]	@ (800e818 <tcp_process+0x298>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	f003 0304 	and.w	r3, r3, #4
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d04e      	beq.n	800e64e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	7d1b      	ldrb	r3, [r3, #20]
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d108      	bne.n	800e5ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5bc:	4b97      	ldr	r3, [pc, #604]	@ (800e81c <tcp_process+0x29c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d123      	bne.n	800e60c <tcp_process+0x8c>
        acceptable = 1;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	76fb      	strb	r3, [r7, #27]
 800e5c8:	e020      	b.n	800e60c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5ce:	4b94      	ldr	r3, [pc, #592]	@ (800e820 <tcp_process+0x2a0>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d102      	bne.n	800e5dc <tcp_process+0x5c>
        acceptable = 1;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	76fb      	strb	r3, [r7, #27]
 800e5da:	e017      	b.n	800e60c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e5dc:	4b90      	ldr	r3, [pc, #576]	@ (800e820 <tcp_process+0x2a0>)
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	db10      	blt.n	800e60c <tcp_process+0x8c>
 800e5ea:	4b8d      	ldr	r3, [pc, #564]	@ (800e820 <tcp_process+0x2a0>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5f2:	6879      	ldr	r1, [r7, #4]
 800e5f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e5f6:	440b      	add	r3, r1
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	dc06      	bgt.n	800e60c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	8b5b      	ldrh	r3, [r3, #26]
 800e602:	f043 0302 	orr.w	r3, r3, #2
 800e606:	b29a      	uxth	r2, r3
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e60c:	7efb      	ldrb	r3, [r7, #27]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d01b      	beq.n	800e64a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	7d1b      	ldrb	r3, [r3, #20]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d106      	bne.n	800e628 <tcp_process+0xa8>
 800e61a:	4b7c      	ldr	r3, [pc, #496]	@ (800e80c <tcp_process+0x28c>)
 800e61c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e620:	4980      	ldr	r1, [pc, #512]	@ (800e824 <tcp_process+0x2a4>)
 800e622:	487c      	ldr	r0, [pc, #496]	@ (800e814 <tcp_process+0x294>)
 800e624:	f006 fe1e 	bl	8015264 <iprintf>
      recv_flags |= TF_RESET;
 800e628:	4b7f      	ldr	r3, [pc, #508]	@ (800e828 <tcp_process+0x2a8>)
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	f043 0308 	orr.w	r3, r3, #8
 800e630:	b2da      	uxtb	r2, r3
 800e632:	4b7d      	ldr	r3, [pc, #500]	@ (800e828 <tcp_process+0x2a8>)
 800e634:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	8b5b      	ldrh	r3, [r3, #26]
 800e63a:	f023 0301 	bic.w	r3, r3, #1
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e644:	f06f 030d 	mvn.w	r3, #13
 800e648:	e37a      	b.n	800ed40 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e64a:	2300      	movs	r3, #0
 800e64c:	e378      	b.n	800ed40 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e64e:	4b72      	ldr	r3, [pc, #456]	@ (800e818 <tcp_process+0x298>)
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	f003 0302 	and.w	r3, r3, #2
 800e656:	2b00      	cmp	r3, #0
 800e658:	d010      	beq.n	800e67c <tcp_process+0xfc>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	7d1b      	ldrb	r3, [r3, #20]
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d00c      	beq.n	800e67c <tcp_process+0xfc>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	7d1b      	ldrb	r3, [r3, #20]
 800e666:	2b03      	cmp	r3, #3
 800e668:	d008      	beq.n	800e67c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	8b5b      	ldrh	r3, [r3, #26]
 800e66e:	f043 0302 	orr.w	r3, r3, #2
 800e672:	b29a      	uxth	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e678:	2300      	movs	r3, #0
 800e67a:	e361      	b.n	800ed40 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	8b5b      	ldrh	r3, [r3, #26]
 800e680:	f003 0310 	and.w	r3, r3, #16
 800e684:	2b00      	cmp	r3, #0
 800e686:	d103      	bne.n	800e690 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e688:	4b68      	ldr	r3, [pc, #416]	@ (800e82c <tcp_process+0x2ac>)
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f001 fc2b 	bl	800fefc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	7d1b      	ldrb	r3, [r3, #20]
 800e6aa:	3b02      	subs	r3, #2
 800e6ac:	2b07      	cmp	r3, #7
 800e6ae:	f200 8337 	bhi.w	800ed20 <tcp_process+0x7a0>
 800e6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e6b8 <tcp_process+0x138>)
 800e6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b8:	0800e6d9 	.word	0x0800e6d9
 800e6bc:	0800e909 	.word	0x0800e909
 800e6c0:	0800ea81 	.word	0x0800ea81
 800e6c4:	0800eaab 	.word	0x0800eaab
 800e6c8:	0800ebcf 	.word	0x0800ebcf
 800e6cc:	0800ea81 	.word	0x0800ea81
 800e6d0:	0800ec5b 	.word	0x0800ec5b
 800e6d4:	0800eceb 	.word	0x0800eceb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e6d8:	4b4f      	ldr	r3, [pc, #316]	@ (800e818 <tcp_process+0x298>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	f003 0310 	and.w	r3, r3, #16
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f000 80e4 	beq.w	800e8ae <tcp_process+0x32e>
 800e6e6:	4b4c      	ldr	r3, [pc, #304]	@ (800e818 <tcp_process+0x298>)
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	f003 0302 	and.w	r3, r3, #2
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f000 80dd 	beq.w	800e8ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	4b48      	ldr	r3, [pc, #288]	@ (800e81c <tcp_process+0x29c>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	f040 80d5 	bne.w	800e8ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e704:	4b46      	ldr	r3, [pc, #280]	@ (800e820 <tcp_process+0x2a0>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	1c5a      	adds	r2, r3, #1
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e716:	4b41      	ldr	r3, [pc, #260]	@ (800e81c <tcp_process+0x29c>)
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e71e:	4b44      	ldr	r3, [pc, #272]	@ (800e830 <tcp_process+0x2b0>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	89db      	ldrh	r3, [r3, #14]
 800e724:	b29a      	uxth	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e738:	4b39      	ldr	r3, [pc, #228]	@ (800e820 <tcp_process+0x2a0>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	1e5a      	subs	r2, r3, #1
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2204      	movs	r2, #4
 800e746:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	3304      	adds	r3, #4
 800e750:	4618      	mov	r0, r3
 800e752:	f005 f8b9 	bl	80138c8 <ip4_route>
 800e756:	4601      	mov	r1, r0
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	3304      	adds	r3, #4
 800e75c:	461a      	mov	r2, r3
 800e75e:	4620      	mov	r0, r4
 800e760:	f7ff f88c 	bl	800d87c <tcp_eff_send_mss_netif>
 800e764:	4603      	mov	r3, r0
 800e766:	461a      	mov	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e770:	009a      	lsls	r2, r3, #2
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e77c:	428b      	cmp	r3, r1
 800e77e:	bf38      	it	cc
 800e780:	460b      	movcc	r3, r1
 800e782:	429a      	cmp	r2, r3
 800e784:	d204      	bcs.n	800e790 <tcp_process+0x210>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	e00d      	b.n	800e7ac <tcp_process+0x22c>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d904      	bls.n	800e7a8 <tcp_process+0x228>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	e001      	b.n	800e7ac <tcp_process+0x22c>
 800e7a8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d106      	bne.n	800e7ca <tcp_process+0x24a>
 800e7bc:	4b13      	ldr	r3, [pc, #76]	@ (800e80c <tcp_process+0x28c>)
 800e7be:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e7c2:	491c      	ldr	r1, [pc, #112]	@ (800e834 <tcp_process+0x2b4>)
 800e7c4:	4813      	ldr	r0, [pc, #76]	@ (800e814 <tcp_process+0x294>)
 800e7c6:	f006 fd4d 	bl	8015264 <iprintf>
        --pcb->snd_queuelen;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d12a      	bne.n	800e83c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d106      	bne.n	800e800 <tcp_process+0x280>
 800e7f2:	4b06      	ldr	r3, [pc, #24]	@ (800e80c <tcp_process+0x28c>)
 800e7f4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e7f8:	490f      	ldr	r1, [pc, #60]	@ (800e838 <tcp_process+0x2b8>)
 800e7fa:	4806      	ldr	r0, [pc, #24]	@ (800e814 <tcp_process+0x294>)
 800e7fc:	f006 fd32 	bl	8015264 <iprintf>
          pcb->unsent = rseg->next;
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e808:	e01c      	b.n	800e844 <tcp_process+0x2c4>
 800e80a:	bf00      	nop
 800e80c:	08018028 	.word	0x08018028
 800e810:	08018260 	.word	0x08018260
 800e814:	08018074 	.word	0x08018074
 800e818:	2000beac 	.word	0x2000beac
 800e81c:	2000bea4 	.word	0x2000bea4
 800e820:	2000bea0 	.word	0x2000bea0
 800e824:	0801827c 	.word	0x0801827c
 800e828:	2000bead 	.word	0x2000bead
 800e82c:	2000be68 	.word	0x2000be68
 800e830:	2000be90 	.word	0x2000be90
 800e834:	0801829c 	.word	0x0801829c
 800e838:	080182b4 	.word	0x080182b4
        } else {
          pcb->unacked = rseg->next;
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e844:	69f8      	ldr	r0, [r7, #28]
 800e846:	f7fe fc54 	bl	800d0f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d104      	bne.n	800e85c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e858:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e85a:	e006      	b.n	800e86a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2200      	movs	r2, #0
 800e866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00a      	beq.n	800e88a <tcp_process+0x30a>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	6910      	ldr	r0, [r2, #16]
 800e87e:	2200      	movs	r2, #0
 800e880:	6879      	ldr	r1, [r7, #4]
 800e882:	4798      	blx	r3
 800e884:	4603      	mov	r3, r0
 800e886:	76bb      	strb	r3, [r7, #26]
 800e888:	e001      	b.n	800e88e <tcp_process+0x30e>
 800e88a:	2300      	movs	r3, #0
 800e88c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e88e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e892:	f113 0f0d 	cmn.w	r3, #13
 800e896:	d102      	bne.n	800e89e <tcp_process+0x31e>
          return ERR_ABRT;
 800e898:	f06f 030c 	mvn.w	r3, #12
 800e89c:	e250      	b.n	800ed40 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	8b5b      	ldrh	r3, [r3, #26]
 800e8a2:	f043 0302 	orr.w	r3, r3, #2
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e8ac:	e23a      	b.n	800ed24 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e8ae:	4b98      	ldr	r3, [pc, #608]	@ (800eb10 <tcp_process+0x590>)
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	f003 0310 	and.w	r3, r3, #16
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	f000 8234 	beq.w	800ed24 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8bc:	4b95      	ldr	r3, [pc, #596]	@ (800eb14 <tcp_process+0x594>)
 800e8be:	6819      	ldr	r1, [r3, #0]
 800e8c0:	4b95      	ldr	r3, [pc, #596]	@ (800eb18 <tcp_process+0x598>)
 800e8c2:	881b      	ldrh	r3, [r3, #0]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	4b95      	ldr	r3, [pc, #596]	@ (800eb1c <tcp_process+0x59c>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8cc:	4b94      	ldr	r3, [pc, #592]	@ (800eb20 <tcp_process+0x5a0>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8d0:	885b      	ldrh	r3, [r3, #2]
 800e8d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8d4:	4a92      	ldr	r2, [pc, #584]	@ (800eb20 <tcp_process+0x5a0>)
 800e8d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8d8:	8812      	ldrh	r2, [r2, #0]
 800e8da:	b292      	uxth	r2, r2
 800e8dc:	9202      	str	r2, [sp, #8]
 800e8de:	9301      	str	r3, [sp, #4]
 800e8e0:	4b90      	ldr	r3, [pc, #576]	@ (800eb24 <tcp_process+0x5a4>)
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	4b90      	ldr	r3, [pc, #576]	@ (800eb28 <tcp_process+0x5a8>)
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f003 f8d7 	bl	8011a9c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e8f4:	2b05      	cmp	r3, #5
 800e8f6:	f200 8215 	bhi.w	800ed24 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f002 fea3 	bl	801164c <tcp_rexmit_rto>
      break;
 800e906:	e20d      	b.n	800ed24 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e908:	4b81      	ldr	r3, [pc, #516]	@ (800eb10 <tcp_process+0x590>)
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f003 0310 	and.w	r3, r3, #16
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 80a1 	beq.w	800ea58 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e916:	4b7f      	ldr	r3, [pc, #508]	@ (800eb14 <tcp_process+0x594>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e91e:	1ad3      	subs	r3, r2, r3
 800e920:	3b01      	subs	r3, #1
 800e922:	2b00      	cmp	r3, #0
 800e924:	db7e      	blt.n	800ea24 <tcp_process+0x4a4>
 800e926:	4b7b      	ldr	r3, [pc, #492]	@ (800eb14 <tcp_process+0x594>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	2b00      	cmp	r3, #0
 800e932:	dc77      	bgt.n	800ea24 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2204      	movs	r2, #4
 800e938:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d102      	bne.n	800e948 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e942:	23fa      	movs	r3, #250	@ 0xfa
 800e944:	76bb      	strb	r3, [r7, #26]
 800e946:	e01d      	b.n	800e984 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d106      	bne.n	800e960 <tcp_process+0x3e0>
 800e952:	4b76      	ldr	r3, [pc, #472]	@ (800eb2c <tcp_process+0x5ac>)
 800e954:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e958:	4975      	ldr	r1, [pc, #468]	@ (800eb30 <tcp_process+0x5b0>)
 800e95a:	4876      	ldr	r0, [pc, #472]	@ (800eb34 <tcp_process+0x5b4>)
 800e95c:	f006 fc82 	bl	8015264 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e964:	699b      	ldr	r3, [r3, #24]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00a      	beq.n	800e980 <tcp_process+0x400>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e96e:	699b      	ldr	r3, [r3, #24]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	6910      	ldr	r0, [r2, #16]
 800e974:	2200      	movs	r2, #0
 800e976:	6879      	ldr	r1, [r7, #4]
 800e978:	4798      	blx	r3
 800e97a:	4603      	mov	r3, r0
 800e97c:	76bb      	strb	r3, [r7, #26]
 800e97e:	e001      	b.n	800e984 <tcp_process+0x404>
 800e980:	23f0      	movs	r3, #240	@ 0xf0
 800e982:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e984:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00a      	beq.n	800e9a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e98c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e990:	f113 0f0d 	cmn.w	r3, #13
 800e994:	d002      	beq.n	800e99c <tcp_process+0x41c>
              tcp_abort(pcb);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7fd fd16 	bl	800c3c8 <tcp_abort>
            }
            return ERR_ABRT;
 800e99c:	f06f 030c 	mvn.w	r3, #12
 800e9a0:	e1ce      	b.n	800ed40 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 fae0 	bl	800ef68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e9a8:	4b63      	ldr	r3, [pc, #396]	@ (800eb38 <tcp_process+0x5b8>)
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d005      	beq.n	800e9bc <tcp_process+0x43c>
            recv_acked--;
 800e9b0:	4b61      	ldr	r3, [pc, #388]	@ (800eb38 <tcp_process+0x5b8>)
 800e9b2:	881b      	ldrh	r3, [r3, #0]
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	4b5f      	ldr	r3, [pc, #380]	@ (800eb38 <tcp_process+0x5b8>)
 800e9ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e9c0:	009a      	lsls	r2, r3, #2
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e9c6:	005b      	lsls	r3, r3, #1
 800e9c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e9cc:	428b      	cmp	r3, r1
 800e9ce:	bf38      	it	cc
 800e9d0:	460b      	movcc	r3, r1
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d204      	bcs.n	800e9e0 <tcp_process+0x460>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	e00d      	b.n	800e9fc <tcp_process+0x47c>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d904      	bls.n	800e9f8 <tcp_process+0x478>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e9f2:	005b      	lsls	r3, r3, #1
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	e001      	b.n	800e9fc <tcp_process+0x47c>
 800e9f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ea02:	4b4e      	ldr	r3, [pc, #312]	@ (800eb3c <tcp_process+0x5bc>)
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	f003 0320 	and.w	r3, r3, #32
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d037      	beq.n	800ea7e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	8b5b      	ldrh	r3, [r3, #26]
 800ea12:	f043 0302 	orr.w	r3, r3, #2
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2207      	movs	r2, #7
 800ea20:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ea22:	e02c      	b.n	800ea7e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea24:	4b3b      	ldr	r3, [pc, #236]	@ (800eb14 <tcp_process+0x594>)
 800ea26:	6819      	ldr	r1, [r3, #0]
 800ea28:	4b3b      	ldr	r3, [pc, #236]	@ (800eb18 <tcp_process+0x598>)
 800ea2a:	881b      	ldrh	r3, [r3, #0]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	4b3b      	ldr	r3, [pc, #236]	@ (800eb1c <tcp_process+0x59c>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea34:	4b3a      	ldr	r3, [pc, #232]	@ (800eb20 <tcp_process+0x5a0>)
 800ea36:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea38:	885b      	ldrh	r3, [r3, #2]
 800ea3a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea3c:	4a38      	ldr	r2, [pc, #224]	@ (800eb20 <tcp_process+0x5a0>)
 800ea3e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea40:	8812      	ldrh	r2, [r2, #0]
 800ea42:	b292      	uxth	r2, r2
 800ea44:	9202      	str	r2, [sp, #8]
 800ea46:	9301      	str	r3, [sp, #4]
 800ea48:	4b36      	ldr	r3, [pc, #216]	@ (800eb24 <tcp_process+0x5a4>)
 800ea4a:	9300      	str	r3, [sp, #0]
 800ea4c:	4b36      	ldr	r3, [pc, #216]	@ (800eb28 <tcp_process+0x5a8>)
 800ea4e:	4602      	mov	r2, r0
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f003 f823 	bl	8011a9c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ea56:	e167      	b.n	800ed28 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ea58:	4b2d      	ldr	r3, [pc, #180]	@ (800eb10 <tcp_process+0x590>)
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	f003 0302 	and.w	r3, r3, #2
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f000 8161 	beq.w	800ed28 <tcp_process+0x7a8>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea6a:	1e5a      	subs	r2, r3, #1
 800ea6c:	4b2b      	ldr	r3, [pc, #172]	@ (800eb1c <tcp_process+0x59c>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	f040 8159 	bne.w	800ed28 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f002 fe0a 	bl	8011690 <tcp_rexmit>
      break;
 800ea7c:	e154      	b.n	800ed28 <tcp_process+0x7a8>
 800ea7e:	e153      	b.n	800ed28 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 fa71 	bl	800ef68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ea86:	4b2d      	ldr	r3, [pc, #180]	@ (800eb3c <tcp_process+0x5bc>)
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	f003 0320 	and.w	r3, r3, #32
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f000 814c 	beq.w	800ed2c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	8b5b      	ldrh	r3, [r3, #26]
 800ea98:	f043 0302 	orr.w	r3, r3, #2
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2207      	movs	r2, #7
 800eaa6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eaa8:	e140      	b.n	800ed2c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fa5c 	bl	800ef68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eab0:	4b22      	ldr	r3, [pc, #136]	@ (800eb3c <tcp_process+0x5bc>)
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	f003 0320 	and.w	r3, r3, #32
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d071      	beq.n	800eba0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eabc:	4b14      	ldr	r3, [pc, #80]	@ (800eb10 <tcp_process+0x590>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	f003 0310 	and.w	r3, r3, #16
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d060      	beq.n	800eb8a <tcp_process+0x60a>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eacc:	4b11      	ldr	r3, [pc, #68]	@ (800eb14 <tcp_process+0x594>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d15a      	bne.n	800eb8a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d156      	bne.n	800eb8a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	8b5b      	ldrh	r3, [r3, #26]
 800eae0:	f043 0302 	orr.w	r3, r3, #2
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7fe fdbc 	bl	800d668 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eaf0:	4b13      	ldr	r3, [pc, #76]	@ (800eb40 <tcp_process+0x5c0>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d105      	bne.n	800eb06 <tcp_process+0x586>
 800eafa:	4b11      	ldr	r3, [pc, #68]	@ (800eb40 <tcp_process+0x5c0>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	4a0f      	ldr	r2, [pc, #60]	@ (800eb40 <tcp_process+0x5c0>)
 800eb02:	6013      	str	r3, [r2, #0]
 800eb04:	e02e      	b.n	800eb64 <tcp_process+0x5e4>
 800eb06:	4b0e      	ldr	r3, [pc, #56]	@ (800eb40 <tcp_process+0x5c0>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	617b      	str	r3, [r7, #20]
 800eb0c:	e027      	b.n	800eb5e <tcp_process+0x5de>
 800eb0e:	bf00      	nop
 800eb10:	2000beac 	.word	0x2000beac
 800eb14:	2000bea4 	.word	0x2000bea4
 800eb18:	2000beaa 	.word	0x2000beaa
 800eb1c:	2000bea0 	.word	0x2000bea0
 800eb20:	2000be90 	.word	0x2000be90
 800eb24:	20008d78 	.word	0x20008d78
 800eb28:	20008d7c 	.word	0x20008d7c
 800eb2c:	08018028 	.word	0x08018028
 800eb30:	080182c8 	.word	0x080182c8
 800eb34:	08018074 	.word	0x08018074
 800eb38:	2000bea8 	.word	0x2000bea8
 800eb3c:	2000bead 	.word	0x2000bead
 800eb40:	2000be74 	.word	0x2000be74
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d104      	bne.n	800eb58 <tcp_process+0x5d8>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68da      	ldr	r2, [r3, #12]
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	60da      	str	r2, [r3, #12]
 800eb56:	e005      	b.n	800eb64 <tcp_process+0x5e4>
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	617b      	str	r3, [r7, #20]
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d1ef      	bne.n	800eb44 <tcp_process+0x5c4>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	60da      	str	r2, [r3, #12]
 800eb6a:	4b77      	ldr	r3, [pc, #476]	@ (800ed48 <tcp_process+0x7c8>)
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	220a      	movs	r2, #10
 800eb74:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eb76:	4b75      	ldr	r3, [pc, #468]	@ (800ed4c <tcp_process+0x7cc>)
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	60da      	str	r2, [r3, #12]
 800eb7e:	4a73      	ldr	r2, [pc, #460]	@ (800ed4c <tcp_process+0x7cc>)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6013      	str	r3, [r2, #0]
 800eb84:	f003 f94c 	bl	8011e20 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800eb88:	e0d2      	b.n	800ed30 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8b5b      	ldrh	r3, [r3, #26]
 800eb8e:	f043 0302 	orr.w	r3, r3, #2
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2208      	movs	r2, #8
 800eb9c:	751a      	strb	r2, [r3, #20]
      break;
 800eb9e:	e0c7      	b.n	800ed30 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eba0:	4b6b      	ldr	r3, [pc, #428]	@ (800ed50 <tcp_process+0x7d0>)
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	f003 0310 	and.w	r3, r3, #16
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f000 80c1 	beq.w	800ed30 <tcp_process+0x7b0>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebb2:	4b68      	ldr	r3, [pc, #416]	@ (800ed54 <tcp_process+0x7d4>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	f040 80ba 	bne.w	800ed30 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f040 80b5 	bne.w	800ed30 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2206      	movs	r2, #6
 800ebca:	751a      	strb	r2, [r3, #20]
      break;
 800ebcc:	e0b0      	b.n	800ed30 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f9ca 	bl	800ef68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ebd4:	4b60      	ldr	r3, [pc, #384]	@ (800ed58 <tcp_process+0x7d8>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	f003 0320 	and.w	r3, r3, #32
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 80a9 	beq.w	800ed34 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	8b5b      	ldrh	r3, [r3, #26]
 800ebe6:	f043 0302 	orr.w	r3, r3, #2
 800ebea:	b29a      	uxth	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7fe fd39 	bl	800d668 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ebf6:	4b59      	ldr	r3, [pc, #356]	@ (800ed5c <tcp_process+0x7dc>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d105      	bne.n	800ec0c <tcp_process+0x68c>
 800ec00:	4b56      	ldr	r3, [pc, #344]	@ (800ed5c <tcp_process+0x7dc>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	4a55      	ldr	r2, [pc, #340]	@ (800ed5c <tcp_process+0x7dc>)
 800ec08:	6013      	str	r3, [r2, #0]
 800ec0a:	e013      	b.n	800ec34 <tcp_process+0x6b4>
 800ec0c:	4b53      	ldr	r3, [pc, #332]	@ (800ed5c <tcp_process+0x7dc>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	613b      	str	r3, [r7, #16]
 800ec12:	e00c      	b.n	800ec2e <tcp_process+0x6ae>
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d104      	bne.n	800ec28 <tcp_process+0x6a8>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	68da      	ldr	r2, [r3, #12]
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	60da      	str	r2, [r3, #12]
 800ec26:	e005      	b.n	800ec34 <tcp_process+0x6b4>
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	613b      	str	r3, [r7, #16]
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1ef      	bne.n	800ec14 <tcp_process+0x694>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2200      	movs	r2, #0
 800ec38:	60da      	str	r2, [r3, #12]
 800ec3a:	4b43      	ldr	r3, [pc, #268]	@ (800ed48 <tcp_process+0x7c8>)
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	220a      	movs	r2, #10
 800ec44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec46:	4b41      	ldr	r3, [pc, #260]	@ (800ed4c <tcp_process+0x7cc>)
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	60da      	str	r2, [r3, #12]
 800ec4e:	4a3f      	ldr	r2, [pc, #252]	@ (800ed4c <tcp_process+0x7cc>)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6013      	str	r3, [r2, #0]
 800ec54:	f003 f8e4 	bl	8011e20 <tcp_timer_needed>
      }
      break;
 800ec58:	e06c      	b.n	800ed34 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 f984 	bl	800ef68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec60:	4b3b      	ldr	r3, [pc, #236]	@ (800ed50 <tcp_process+0x7d0>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	f003 0310 	and.w	r3, r3, #16
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d065      	beq.n	800ed38 <tcp_process+0x7b8>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec70:	4b38      	ldr	r3, [pc, #224]	@ (800ed54 <tcp_process+0x7d4>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d15f      	bne.n	800ed38 <tcp_process+0x7b8>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d15b      	bne.n	800ed38 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7fe fcf1 	bl	800d668 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec86:	4b35      	ldr	r3, [pc, #212]	@ (800ed5c <tcp_process+0x7dc>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d105      	bne.n	800ec9c <tcp_process+0x71c>
 800ec90:	4b32      	ldr	r3, [pc, #200]	@ (800ed5c <tcp_process+0x7dc>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	4a31      	ldr	r2, [pc, #196]	@ (800ed5c <tcp_process+0x7dc>)
 800ec98:	6013      	str	r3, [r2, #0]
 800ec9a:	e013      	b.n	800ecc4 <tcp_process+0x744>
 800ec9c:	4b2f      	ldr	r3, [pc, #188]	@ (800ed5c <tcp_process+0x7dc>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	60fb      	str	r3, [r7, #12]
 800eca2:	e00c      	b.n	800ecbe <tcp_process+0x73e>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d104      	bne.n	800ecb8 <tcp_process+0x738>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	68da      	ldr	r2, [r3, #12]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	60da      	str	r2, [r3, #12]
 800ecb6:	e005      	b.n	800ecc4 <tcp_process+0x744>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	60fb      	str	r3, [r7, #12]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1ef      	bne.n	800eca4 <tcp_process+0x724>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	60da      	str	r2, [r3, #12]
 800ecca:	4b1f      	ldr	r3, [pc, #124]	@ (800ed48 <tcp_process+0x7c8>)
 800eccc:	2201      	movs	r2, #1
 800ecce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	220a      	movs	r2, #10
 800ecd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ecd6:	4b1d      	ldr	r3, [pc, #116]	@ (800ed4c <tcp_process+0x7cc>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	60da      	str	r2, [r3, #12]
 800ecde:	4a1b      	ldr	r2, [pc, #108]	@ (800ed4c <tcp_process+0x7cc>)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6013      	str	r3, [r2, #0]
 800ece4:	f003 f89c 	bl	8011e20 <tcp_timer_needed>
      }
      break;
 800ece8:	e026      	b.n	800ed38 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f93c 	bl	800ef68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ecf0:	4b17      	ldr	r3, [pc, #92]	@ (800ed50 <tcp_process+0x7d0>)
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	f003 0310 	and.w	r3, r3, #16
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d01f      	beq.n	800ed3c <tcp_process+0x7bc>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed00:	4b14      	ldr	r3, [pc, #80]	@ (800ed54 <tcp_process+0x7d4>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d119      	bne.n	800ed3c <tcp_process+0x7bc>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d115      	bne.n	800ed3c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ed10:	4b11      	ldr	r3, [pc, #68]	@ (800ed58 <tcp_process+0x7d8>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	f043 0310 	orr.w	r3, r3, #16
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ed58 <tcp_process+0x7d8>)
 800ed1c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ed1e:	e00d      	b.n	800ed3c <tcp_process+0x7bc>
    default:
      break;
 800ed20:	bf00      	nop
 800ed22:	e00c      	b.n	800ed3e <tcp_process+0x7be>
      break;
 800ed24:	bf00      	nop
 800ed26:	e00a      	b.n	800ed3e <tcp_process+0x7be>
      break;
 800ed28:	bf00      	nop
 800ed2a:	e008      	b.n	800ed3e <tcp_process+0x7be>
      break;
 800ed2c:	bf00      	nop
 800ed2e:	e006      	b.n	800ed3e <tcp_process+0x7be>
      break;
 800ed30:	bf00      	nop
 800ed32:	e004      	b.n	800ed3e <tcp_process+0x7be>
      break;
 800ed34:	bf00      	nop
 800ed36:	e002      	b.n	800ed3e <tcp_process+0x7be>
      break;
 800ed38:	bf00      	nop
 800ed3a:	e000      	b.n	800ed3e <tcp_process+0x7be>
      break;
 800ed3c:	bf00      	nop
  }
  return ERR_OK;
 800ed3e:	2300      	movs	r3, #0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3724      	adds	r7, #36	@ 0x24
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd90      	pop	{r4, r7, pc}
 800ed48:	2000be7c 	.word	0x2000be7c
 800ed4c:	2000be78 	.word	0x2000be78
 800ed50:	2000beac 	.word	0x2000beac
 800ed54:	2000bea4 	.word	0x2000bea4
 800ed58:	2000bead 	.word	0x2000bead
 800ed5c:	2000be74 	.word	0x2000be74

0800ed60 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ed60:	b590      	push	{r4, r7, lr}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d106      	bne.n	800ed7e <tcp_oos_insert_segment+0x1e>
 800ed70:	4b3b      	ldr	r3, [pc, #236]	@ (800ee60 <tcp_oos_insert_segment+0x100>)
 800ed72:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ed76:	493b      	ldr	r1, [pc, #236]	@ (800ee64 <tcp_oos_insert_segment+0x104>)
 800ed78:	483b      	ldr	r0, [pc, #236]	@ (800ee68 <tcp_oos_insert_segment+0x108>)
 800ed7a:	f006 fa73 	bl	8015264 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	899b      	ldrh	r3, [r3, #12]
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fb f940 	bl	800a00c <lwip_htons>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d028      	beq.n	800edea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ed98:	6838      	ldr	r0, [r7, #0]
 800ed9a:	f7fe f995 	bl	800d0c8 <tcp_segs_free>
    next = NULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	603b      	str	r3, [r7, #0]
 800eda2:	e056      	b.n	800ee52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	899b      	ldrh	r3, [r3, #12]
 800edaa:	b29b      	uxth	r3, r3
 800edac:	4618      	mov	r0, r3
 800edae:	f7fb f92d 	bl	800a00c <lwip_htons>
 800edb2:	4603      	mov	r3, r0
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	f003 0301 	and.w	r3, r3, #1
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00d      	beq.n	800edda <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	899b      	ldrh	r3, [r3, #12]
 800edc4:	b29c      	uxth	r4, r3
 800edc6:	2001      	movs	r0, #1
 800edc8:	f7fb f920 	bl	800a00c <lwip_htons>
 800edcc:	4603      	mov	r3, r0
 800edce:	461a      	mov	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	4322      	orrs	r2, r4
 800edd6:	b292      	uxth	r2, r2
 800edd8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f7fe f984 	bl	800d0f2 <tcp_seg_free>
    while (next &&
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d00e      	beq.n	800ee0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	891b      	ldrh	r3, [r3, #8]
 800edf4:	461a      	mov	r2, r3
 800edf6:	4b1d      	ldr	r3, [pc, #116]	@ (800ee6c <tcp_oos_insert_segment+0x10c>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	441a      	add	r2, r3
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	8909      	ldrh	r1, [r1, #8]
 800ee06:	440b      	add	r3, r1
 800ee08:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	daca      	bge.n	800eda4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d01e      	beq.n	800ee52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	891b      	ldrh	r3, [r3, #8]
 800ee18:	461a      	mov	r2, r3
 800ee1a:	4b14      	ldr	r3, [pc, #80]	@ (800ee6c <tcp_oos_insert_segment+0x10c>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	441a      	add	r2, r3
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	dd12      	ble.n	800ee52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	4b0d      	ldr	r3, [pc, #52]	@ (800ee6c <tcp_oos_insert_segment+0x10c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	1ad3      	subs	r3, r2, r3
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	685a      	ldr	r2, [r3, #4]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	891b      	ldrh	r3, [r3, #8]
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	f7fc fb45 	bl	800b4dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	683a      	ldr	r2, [r7, #0]
 800ee56:	601a      	str	r2, [r3, #0]
}
 800ee58:	bf00      	nop
 800ee5a:	3714      	adds	r7, #20
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd90      	pop	{r4, r7, pc}
 800ee60:	08018028 	.word	0x08018028
 800ee64:	080182e8 	.word	0x080182e8
 800ee68:	08018074 	.word	0x08018074
 800ee6c:	2000bea0 	.word	0x2000bea0

0800ee70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ee70:	b5b0      	push	{r4, r5, r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
 800ee7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ee7e:	e03e      	b.n	800eefe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fc fd38 	bl	800b904 <pbuf_clen>
 800ee94:	4603      	mov	r3, r0
 800ee96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee9e:	8a7a      	ldrh	r2, [r7, #18]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d906      	bls.n	800eeb2 <tcp_free_acked_segments+0x42>
 800eea4:	4b2a      	ldr	r3, [pc, #168]	@ (800ef50 <tcp_free_acked_segments+0xe0>)
 800eea6:	f240 4257 	movw	r2, #1111	@ 0x457
 800eeaa:	492a      	ldr	r1, [pc, #168]	@ (800ef54 <tcp_free_acked_segments+0xe4>)
 800eeac:	482a      	ldr	r0, [pc, #168]	@ (800ef58 <tcp_free_acked_segments+0xe8>)
 800eeae:	f006 f9d9 	bl	8015264 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800eeb8:	8a7b      	ldrh	r3, [r7, #18]
 800eeba:	1ad3      	subs	r3, r2, r3
 800eebc:	b29a      	uxth	r2, r3
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	891a      	ldrh	r2, [r3, #8]
 800eec8:	4b24      	ldr	r3, [pc, #144]	@ (800ef5c <tcp_free_acked_segments+0xec>)
 800eeca:	881b      	ldrh	r3, [r3, #0]
 800eecc:	4413      	add	r3, r2
 800eece:	b29a      	uxth	r2, r3
 800eed0:	4b22      	ldr	r3, [pc, #136]	@ (800ef5c <tcp_free_acked_segments+0xec>)
 800eed2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eed4:	6978      	ldr	r0, [r7, #20]
 800eed6:	f7fe f90c 	bl	800d0f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00c      	beq.n	800eefe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d109      	bne.n	800eefe <tcp_free_acked_segments+0x8e>
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d106      	bne.n	800eefe <tcp_free_acked_segments+0x8e>
 800eef0:	4b17      	ldr	r3, [pc, #92]	@ (800ef50 <tcp_free_acked_segments+0xe0>)
 800eef2:	f240 4261 	movw	r2, #1121	@ 0x461
 800eef6:	491a      	ldr	r1, [pc, #104]	@ (800ef60 <tcp_free_acked_segments+0xf0>)
 800eef8:	4817      	ldr	r0, [pc, #92]	@ (800ef58 <tcp_free_acked_segments+0xe8>)
 800eefa:	f006 f9b3 	bl	8015264 <iprintf>
  while (seg_list != NULL &&
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d020      	beq.n	800ef46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fb f893 	bl	800a036 <lwip_htonl>
 800ef10:	4604      	mov	r4, r0
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	891b      	ldrh	r3, [r3, #8]
 800ef16:	461d      	mov	r5, r3
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	899b      	ldrh	r3, [r3, #12]
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fb f873 	bl	800a00c <lwip_htons>
 800ef26:	4603      	mov	r3, r0
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	f003 0303 	and.w	r3, r3, #3
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d001      	beq.n	800ef36 <tcp_free_acked_segments+0xc6>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <tcp_free_acked_segments+0xc8>
 800ef36:	2300      	movs	r3, #0
 800ef38:	442b      	add	r3, r5
 800ef3a:	18e2      	adds	r2, r4, r3
 800ef3c:	4b09      	ldr	r3, [pc, #36]	@ (800ef64 <tcp_free_acked_segments+0xf4>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	dd9c      	ble.n	800ee80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ef46:	68bb      	ldr	r3, [r7, #8]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3718      	adds	r7, #24
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ef50:	08018028 	.word	0x08018028
 800ef54:	08018310 	.word	0x08018310
 800ef58:	08018074 	.word	0x08018074
 800ef5c:	2000bea8 	.word	0x2000bea8
 800ef60:	08018338 	.word	0x08018338
 800ef64:	2000bea4 	.word	0x2000bea4

0800ef68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ef68:	b5b0      	push	{r4, r5, r7, lr}
 800ef6a:	b094      	sub	sp, #80	@ 0x50
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ef70:	2300      	movs	r3, #0
 800ef72:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d106      	bne.n	800ef88 <tcp_receive+0x20>
 800ef7a:	4b91      	ldr	r3, [pc, #580]	@ (800f1c0 <tcp_receive+0x258>)
 800ef7c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ef80:	4990      	ldr	r1, [pc, #576]	@ (800f1c4 <tcp_receive+0x25c>)
 800ef82:	4891      	ldr	r0, [pc, #580]	@ (800f1c8 <tcp_receive+0x260>)
 800ef84:	f006 f96e 	bl	8015264 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	7d1b      	ldrb	r3, [r3, #20]
 800ef8c:	2b03      	cmp	r3, #3
 800ef8e:	d806      	bhi.n	800ef9e <tcp_receive+0x36>
 800ef90:	4b8b      	ldr	r3, [pc, #556]	@ (800f1c0 <tcp_receive+0x258>)
 800ef92:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ef96:	498d      	ldr	r1, [pc, #564]	@ (800f1cc <tcp_receive+0x264>)
 800ef98:	488b      	ldr	r0, [pc, #556]	@ (800f1c8 <tcp_receive+0x260>)
 800ef9a:	f006 f963 	bl	8015264 <iprintf>

  if (flags & TCP_ACK) {
 800ef9e:	4b8c      	ldr	r3, [pc, #560]	@ (800f1d0 <tcp_receive+0x268>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	f003 0310 	and.w	r3, r3, #16
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f000 8264 	beq.w	800f474 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800efb2:	461a      	mov	r2, r3
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efb8:	4413      	add	r3, r2
 800efba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800efc0:	4b84      	ldr	r3, [pc, #528]	@ (800f1d4 <tcp_receive+0x26c>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	db1b      	blt.n	800f002 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800efce:	4b81      	ldr	r3, [pc, #516]	@ (800f1d4 <tcp_receive+0x26c>)
 800efd0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d106      	bne.n	800efe4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800efda:	4b7f      	ldr	r3, [pc, #508]	@ (800f1d8 <tcp_receive+0x270>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	db0e      	blt.n	800f002 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800efe8:	4b7b      	ldr	r3, [pc, #492]	@ (800f1d8 <tcp_receive+0x270>)
 800efea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efec:	429a      	cmp	r2, r3
 800efee:	d125      	bne.n	800f03c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eff0:	4b7a      	ldr	r3, [pc, #488]	@ (800f1dc <tcp_receive+0x274>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	89db      	ldrh	r3, [r3, #14]
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800effe:	429a      	cmp	r2, r3
 800f000:	d91c      	bls.n	800f03c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f002:	4b76      	ldr	r3, [pc, #472]	@ (800f1dc <tcp_receive+0x274>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	89db      	ldrh	r3, [r3, #14]
 800f008:	b29a      	uxth	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d205      	bcs.n	800f02c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f02c:	4b69      	ldr	r3, [pc, #420]	@ (800f1d4 <tcp_receive+0x26c>)
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f034:	4b68      	ldr	r3, [pc, #416]	@ (800f1d8 <tcp_receive+0x270>)
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f03c:	4b66      	ldr	r3, [pc, #408]	@ (800f1d8 <tcp_receive+0x270>)
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f044:	1ad3      	subs	r3, r2, r3
 800f046:	2b00      	cmp	r3, #0
 800f048:	dc58      	bgt.n	800f0fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f04a:	4b65      	ldr	r3, [pc, #404]	@ (800f1e0 <tcp_receive+0x278>)
 800f04c:	881b      	ldrh	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d14b      	bne.n	800f0ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f05c:	4413      	add	r3, r2
 800f05e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f060:	429a      	cmp	r2, r3
 800f062:	d142      	bne.n	800f0ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	db3d      	blt.n	800f0ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f072:	4b59      	ldr	r3, [pc, #356]	@ (800f1d8 <tcp_receive+0x270>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	429a      	cmp	r2, r3
 800f078:	d137      	bne.n	800f0ea <tcp_receive+0x182>
              found_dupack = 1;
 800f07a:	2301      	movs	r3, #1
 800f07c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f084:	2bff      	cmp	r3, #255	@ 0xff
 800f086:	d007      	beq.n	800f098 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f08e:	3301      	adds	r3, #1
 800f090:	b2da      	uxtb	r2, r3
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f09e:	2b03      	cmp	r3, #3
 800f0a0:	d91b      	bls.n	800f0da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0ac:	4413      	add	r3, r2
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d30a      	bcc.n	800f0d0 <tcp_receive+0x168>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0c4:	4413      	add	r3, r2
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f0ce:	e004      	b.n	800f0da <tcp_receive+0x172>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d902      	bls.n	800f0ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f002 fb3f 	bl	8011768 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f0ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f040 8161 	bne.w	800f3b4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f0fa:	e15b      	b.n	800f3b4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f0fc:	4b36      	ldr	r3, [pc, #216]	@ (800f1d8 <tcp_receive+0x270>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	3b01      	subs	r3, #1
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f2c0 814e 	blt.w	800f3aa <tcp_receive+0x442>
 800f10e:	4b32      	ldr	r3, [pc, #200]	@ (800f1d8 <tcp_receive+0x270>)
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f300 8146 	bgt.w	800f3aa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	8b5b      	ldrh	r3, [r3, #26]
 800f122:	f003 0304 	and.w	r3, r3, #4
 800f126:	2b00      	cmp	r3, #0
 800f128:	d010      	beq.n	800f14c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	8b5b      	ldrh	r3, [r3, #26]
 800f12e:	f023 0304 	bic.w	r3, r3, #4
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f15a:	10db      	asrs	r3, r3, #3
 800f15c:	b21b      	sxth	r3, r3
 800f15e:	b29a      	uxth	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f166:	b29b      	uxth	r3, r3
 800f168:	4413      	add	r3, r2
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	b21a      	sxth	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f174:	4b18      	ldr	r3, [pc, #96]	@ (800f1d8 <tcp_receive+0x270>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	b29a      	uxth	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f17e:	b29b      	uxth	r3, r3
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f18c:	4b12      	ldr	r3, [pc, #72]	@ (800f1d8 <tcp_receive+0x270>)
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	7d1b      	ldrb	r3, [r3, #20]
 800f198:	2b03      	cmp	r3, #3
 800f19a:	f240 8097 	bls.w	800f2cc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d245      	bcs.n	800f23a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	8b5b      	ldrh	r3, [r3, #26]
 800f1b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d014      	beq.n	800f1e4 <tcp_receive+0x27c>
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	e013      	b.n	800f1e6 <tcp_receive+0x27e>
 800f1be:	bf00      	nop
 800f1c0:	08018028 	.word	0x08018028
 800f1c4:	08018358 	.word	0x08018358
 800f1c8:	08018074 	.word	0x08018074
 800f1cc:	08018374 	.word	0x08018374
 800f1d0:	2000beac 	.word	0x2000beac
 800f1d4:	2000bea0 	.word	0x2000bea0
 800f1d8:	2000bea4 	.word	0x2000bea4
 800f1dc:	2000be90 	.word	0x2000be90
 800f1e0:	2000beaa 	.word	0x2000beaa
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f1ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1f4:	fb12 f303 	smulbb	r3, r2, r3
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	bf28      	it	cs
 800f200:	4613      	movcs	r3, r2
 800f202:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f20a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f20c:	4413      	add	r3, r2
 800f20e:	b29a      	uxth	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f216:	429a      	cmp	r2, r3
 800f218:	d309      	bcc.n	800f22e <tcp_receive+0x2c6>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f220:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f222:	4413      	add	r3, r2
 800f224:	b29a      	uxth	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f22c:	e04e      	b.n	800f2cc <tcp_receive+0x364>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f234:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f238:	e048      	b.n	800f2cc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f240:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f242:	4413      	add	r3, r2
 800f244:	b29a      	uxth	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d309      	bcc.n	800f264 <tcp_receive+0x2fc>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f256:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f258:	4413      	add	r3, r2
 800f25a:	b29a      	uxth	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f262:	e004      	b.n	800f26e <tcp_receive+0x306>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f26a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d326      	bcc.n	800f2cc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f29e:	4413      	add	r3, r2
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d30a      	bcc.n	800f2c2 <tcp_receive+0x35a>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f2b6:	4413      	add	r3, r2
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f2c0:	e004      	b.n	800f2cc <tcp_receive+0x364>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2d4:	4a98      	ldr	r2, [pc, #608]	@ (800f538 <tcp_receive+0x5d0>)
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7ff fdca 	bl	800ee70 <tcp_free_acked_segments>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2ea:	4a94      	ldr	r2, [pc, #592]	@ (800f53c <tcp_receive+0x5d4>)
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff fdbf 	bl	800ee70 <tcp_free_acked_segments>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d104      	bne.n	800f30a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f306:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f308:	e002      	b.n	800f310 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d103      	bne.n	800f326 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f32c:	4b84      	ldr	r3, [pc, #528]	@ (800f540 <tcp_receive+0x5d8>)
 800f32e:	881b      	ldrh	r3, [r3, #0]
 800f330:	4413      	add	r3, r2
 800f332:	b29a      	uxth	r2, r3
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	8b5b      	ldrh	r3, [r3, #26]
 800f33e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f342:	2b00      	cmp	r3, #0
 800f344:	d035      	beq.n	800f3b2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d118      	bne.n	800f380 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00c      	beq.n	800f370 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	4618      	mov	r0, r3
 800f364:	f7fa fe67 	bl	800a036 <lwip_htonl>
 800f368:	4603      	mov	r3, r0
 800f36a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	dc20      	bgt.n	800f3b2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	8b5b      	ldrh	r3, [r3, #26]
 800f374:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f378:	b29a      	uxth	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f37e:	e018      	b.n	800f3b2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fa fe52 	bl	800a036 <lwip_htonl>
 800f392:	4603      	mov	r3, r0
 800f394:	1ae3      	subs	r3, r4, r3
 800f396:	2b00      	cmp	r3, #0
 800f398:	dc0b      	bgt.n	800f3b2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	8b5b      	ldrh	r3, [r3, #26]
 800f39e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f3a2:	b29a      	uxth	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3a8:	e003      	b.n	800f3b2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f002 fbc8 	bl	8011b40 <tcp_send_empty_ack>
 800f3b0:	e000      	b.n	800f3b4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3b2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d05b      	beq.n	800f474 <tcp_receive+0x50c>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3c0:	4b60      	ldr	r3, [pc, #384]	@ (800f544 <tcp_receive+0x5dc>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	1ad3      	subs	r3, r2, r3
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	da54      	bge.n	800f474 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f3ca:	4b5f      	ldr	r3, [pc, #380]	@ (800f548 <tcp_receive+0x5e0>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f3de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f3e8:	10db      	asrs	r3, r3, #3
 800f3ea:	b21b      	sxth	r3, r3
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	1ad3      	subs	r3, r2, r3
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f402:	4413      	add	r3, r2
 800f404:	b29b      	uxth	r3, r3
 800f406:	b21a      	sxth	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f40c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f410:	2b00      	cmp	r3, #0
 800f412:	da05      	bge.n	800f420 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f414:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f418:	425b      	negs	r3, r3
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f420:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f42a:	109b      	asrs	r3, r3, #2
 800f42c:	b21b      	sxth	r3, r3
 800f42e:	b29b      	uxth	r3, r3
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	b29b      	uxth	r3, r3
 800f434:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f43e:	b29a      	uxth	r2, r3
 800f440:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f444:	4413      	add	r3, r2
 800f446:	b29b      	uxth	r3, r3
 800f448:	b21a      	sxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f454:	10db      	asrs	r3, r3, #3
 800f456:	b21b      	sxth	r3, r3
 800f458:	b29a      	uxth	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f460:	b29b      	uxth	r3, r3
 800f462:	4413      	add	r3, r2
 800f464:	b29b      	uxth	r3, r3
 800f466:	b21a      	sxth	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f474:	4b35      	ldr	r3, [pc, #212]	@ (800f54c <tcp_receive+0x5e4>)
 800f476:	881b      	ldrh	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f000 84df 	beq.w	800fe3c <tcp_receive+0xed4>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	7d1b      	ldrb	r3, [r3, #20]
 800f482:	2b06      	cmp	r3, #6
 800f484:	f200 84da 	bhi.w	800fe3c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f48c:	4b30      	ldr	r3, [pc, #192]	@ (800f550 <tcp_receive+0x5e8>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	3b01      	subs	r3, #1
 800f494:	2b00      	cmp	r3, #0
 800f496:	f2c0 808f 	blt.w	800f5b8 <tcp_receive+0x650>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f49e:	4b2b      	ldr	r3, [pc, #172]	@ (800f54c <tcp_receive+0x5e4>)
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4b2a      	ldr	r3, [pc, #168]	@ (800f550 <tcp_receive+0x5e8>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	440b      	add	r3, r1
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f300 8082 	bgt.w	800f5b8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f4b4:	4b27      	ldr	r3, [pc, #156]	@ (800f554 <tcp_receive+0x5ec>)
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4be:	4b24      	ldr	r3, [pc, #144]	@ (800f550 <tcp_receive+0x5e8>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f4c6:	4b23      	ldr	r3, [pc, #140]	@ (800f554 <tcp_receive+0x5ec>)
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d106      	bne.n	800f4dc <tcp_receive+0x574>
 800f4ce:	4b22      	ldr	r3, [pc, #136]	@ (800f558 <tcp_receive+0x5f0>)
 800f4d0:	f240 5294 	movw	r2, #1428	@ 0x594
 800f4d4:	4921      	ldr	r1, [pc, #132]	@ (800f55c <tcp_receive+0x5f4>)
 800f4d6:	4822      	ldr	r0, [pc, #136]	@ (800f560 <tcp_receive+0x5f8>)
 800f4d8:	f005 fec4 	bl	8015264 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d906      	bls.n	800f4f4 <tcp_receive+0x58c>
 800f4e6:	4b1c      	ldr	r3, [pc, #112]	@ (800f558 <tcp_receive+0x5f0>)
 800f4e8:	f240 5295 	movw	r2, #1429	@ 0x595
 800f4ec:	491d      	ldr	r1, [pc, #116]	@ (800f564 <tcp_receive+0x5fc>)
 800f4ee:	481c      	ldr	r0, [pc, #112]	@ (800f560 <tcp_receive+0x5f8>)
 800f4f0:	f005 feb8 	bl	8015264 <iprintf>
      off = (u16_t)off32;
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f4fa:	4b16      	ldr	r3, [pc, #88]	@ (800f554 <tcp_receive+0x5ec>)
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	891b      	ldrh	r3, [r3, #8]
 800f500:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f504:	429a      	cmp	r2, r3
 800f506:	d906      	bls.n	800f516 <tcp_receive+0x5ae>
 800f508:	4b13      	ldr	r3, [pc, #76]	@ (800f558 <tcp_receive+0x5f0>)
 800f50a:	f240 5297 	movw	r2, #1431	@ 0x597
 800f50e:	4916      	ldr	r1, [pc, #88]	@ (800f568 <tcp_receive+0x600>)
 800f510:	4813      	ldr	r0, [pc, #76]	@ (800f560 <tcp_receive+0x5f8>)
 800f512:	f005 fea7 	bl	8015264 <iprintf>
      inseg.len -= off;
 800f516:	4b0f      	ldr	r3, [pc, #60]	@ (800f554 <tcp_receive+0x5ec>)
 800f518:	891a      	ldrh	r2, [r3, #8]
 800f51a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	b29a      	uxth	r2, r3
 800f522:	4b0c      	ldr	r3, [pc, #48]	@ (800f554 <tcp_receive+0x5ec>)
 800f524:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f526:	4b0b      	ldr	r3, [pc, #44]	@ (800f554 <tcp_receive+0x5ec>)
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	891a      	ldrh	r2, [r3, #8]
 800f52c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f534:	e02a      	b.n	800f58c <tcp_receive+0x624>
 800f536:	bf00      	nop
 800f538:	08018390 	.word	0x08018390
 800f53c:	08018398 	.word	0x08018398
 800f540:	2000bea8 	.word	0x2000bea8
 800f544:	2000bea4 	.word	0x2000bea4
 800f548:	2000be68 	.word	0x2000be68
 800f54c:	2000beaa 	.word	0x2000beaa
 800f550:	2000bea0 	.word	0x2000bea0
 800f554:	2000be80 	.word	0x2000be80
 800f558:	08018028 	.word	0x08018028
 800f55c:	080183a0 	.word	0x080183a0
 800f560:	08018074 	.word	0x08018074
 800f564:	080183b0 	.word	0x080183b0
 800f568:	080183c0 	.word	0x080183c0
        off -= p->len;
 800f56c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f56e:	895b      	ldrh	r3, [r3, #10]
 800f570:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f57a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f57c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f57e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f582:	2200      	movs	r2, #0
 800f584:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f58c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f58e:	895b      	ldrh	r3, [r3, #10]
 800f590:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f594:	429a      	cmp	r2, r3
 800f596:	d8e9      	bhi.n	800f56c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f598:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f59c:	4619      	mov	r1, r3
 800f59e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f5a0:	f7fc f89c 	bl	800b6dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a8:	4a90      	ldr	r2, [pc, #576]	@ (800f7ec <tcp_receive+0x884>)
 800f5aa:	6013      	str	r3, [r2, #0]
 800f5ac:	4b90      	ldr	r3, [pc, #576]	@ (800f7f0 <tcp_receive+0x888>)
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	4a8e      	ldr	r2, [pc, #568]	@ (800f7ec <tcp_receive+0x884>)
 800f5b2:	6812      	ldr	r2, [r2, #0]
 800f5b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f5b6:	e00d      	b.n	800f5d4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f5b8:	4b8c      	ldr	r3, [pc, #560]	@ (800f7ec <tcp_receive+0x884>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5c0:	1ad3      	subs	r3, r2, r3
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	da06      	bge.n	800f5d4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	8b5b      	ldrh	r3, [r3, #26]
 800f5ca:	f043 0302 	orr.w	r3, r3, #2
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f5d4:	4b85      	ldr	r3, [pc, #532]	@ (800f7ec <tcp_receive+0x884>)
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f2c0 8427 	blt.w	800fe32 <tcp_receive+0xeca>
 800f5e4:	4b81      	ldr	r3, [pc, #516]	@ (800f7ec <tcp_receive+0x884>)
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ec:	6879      	ldr	r1, [r7, #4]
 800f5ee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f5f0:	440b      	add	r3, r1
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f300 841b 	bgt.w	800fe32 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f600:	4b7a      	ldr	r3, [pc, #488]	@ (800f7ec <tcp_receive+0x884>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	429a      	cmp	r2, r3
 800f606:	f040 8298 	bne.w	800fb3a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f60a:	4b79      	ldr	r3, [pc, #484]	@ (800f7f0 <tcp_receive+0x888>)
 800f60c:	891c      	ldrh	r4, [r3, #8]
 800f60e:	4b78      	ldr	r3, [pc, #480]	@ (800f7f0 <tcp_receive+0x888>)
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	899b      	ldrh	r3, [r3, #12]
 800f614:	b29b      	uxth	r3, r3
 800f616:	4618      	mov	r0, r3
 800f618:	f7fa fcf8 	bl	800a00c <lwip_htons>
 800f61c:	4603      	mov	r3, r0
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	f003 0303 	and.w	r3, r3, #3
 800f624:	2b00      	cmp	r3, #0
 800f626:	d001      	beq.n	800f62c <tcp_receive+0x6c4>
 800f628:	2301      	movs	r3, #1
 800f62a:	e000      	b.n	800f62e <tcp_receive+0x6c6>
 800f62c:	2300      	movs	r3, #0
 800f62e:	4423      	add	r3, r4
 800f630:	b29a      	uxth	r2, r3
 800f632:	4b70      	ldr	r3, [pc, #448]	@ (800f7f4 <tcp_receive+0x88c>)
 800f634:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f63a:	4b6e      	ldr	r3, [pc, #440]	@ (800f7f4 <tcp_receive+0x88c>)
 800f63c:	881b      	ldrh	r3, [r3, #0]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d274      	bcs.n	800f72c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f642:	4b6b      	ldr	r3, [pc, #428]	@ (800f7f0 <tcp_receive+0x888>)
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	899b      	ldrh	r3, [r3, #12]
 800f648:	b29b      	uxth	r3, r3
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fa fcde 	bl	800a00c <lwip_htons>
 800f650:	4603      	mov	r3, r0
 800f652:	b2db      	uxtb	r3, r3
 800f654:	f003 0301 	and.w	r3, r3, #1
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d01e      	beq.n	800f69a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f65c:	4b64      	ldr	r3, [pc, #400]	@ (800f7f0 <tcp_receive+0x888>)
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	899b      	ldrh	r3, [r3, #12]
 800f662:	b29b      	uxth	r3, r3
 800f664:	b21b      	sxth	r3, r3
 800f666:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f66a:	b21c      	sxth	r4, r3
 800f66c:	4b60      	ldr	r3, [pc, #384]	@ (800f7f0 <tcp_receive+0x888>)
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	899b      	ldrh	r3, [r3, #12]
 800f672:	b29b      	uxth	r3, r3
 800f674:	4618      	mov	r0, r3
 800f676:	f7fa fcc9 	bl	800a00c <lwip_htons>
 800f67a:	4603      	mov	r3, r0
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f682:	b29b      	uxth	r3, r3
 800f684:	4618      	mov	r0, r3
 800f686:	f7fa fcc1 	bl	800a00c <lwip_htons>
 800f68a:	4603      	mov	r3, r0
 800f68c:	b21b      	sxth	r3, r3
 800f68e:	4323      	orrs	r3, r4
 800f690:	b21a      	sxth	r2, r3
 800f692:	4b57      	ldr	r3, [pc, #348]	@ (800f7f0 <tcp_receive+0x888>)
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	b292      	uxth	r2, r2
 800f698:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f69e:	4b54      	ldr	r3, [pc, #336]	@ (800f7f0 <tcp_receive+0x888>)
 800f6a0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f6a2:	4b53      	ldr	r3, [pc, #332]	@ (800f7f0 <tcp_receive+0x888>)
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	899b      	ldrh	r3, [r3, #12]
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fa fcae 	bl	800a00c <lwip_htons>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	f003 0302 	and.w	r3, r3, #2
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d005      	beq.n	800f6c8 <tcp_receive+0x760>
            inseg.len -= 1;
 800f6bc:	4b4c      	ldr	r3, [pc, #304]	@ (800f7f0 <tcp_receive+0x888>)
 800f6be:	891b      	ldrh	r3, [r3, #8]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	4b4a      	ldr	r3, [pc, #296]	@ (800f7f0 <tcp_receive+0x888>)
 800f6c6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f6c8:	4b49      	ldr	r3, [pc, #292]	@ (800f7f0 <tcp_receive+0x888>)
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	4a48      	ldr	r2, [pc, #288]	@ (800f7f0 <tcp_receive+0x888>)
 800f6ce:	8912      	ldrh	r2, [r2, #8]
 800f6d0:	4611      	mov	r1, r2
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fb ff02 	bl	800b4dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f6d8:	4b45      	ldr	r3, [pc, #276]	@ (800f7f0 <tcp_receive+0x888>)
 800f6da:	891c      	ldrh	r4, [r3, #8]
 800f6dc:	4b44      	ldr	r3, [pc, #272]	@ (800f7f0 <tcp_receive+0x888>)
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	899b      	ldrh	r3, [r3, #12]
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fa fc91 	bl	800a00c <lwip_htons>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	f003 0303 	and.w	r3, r3, #3
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d001      	beq.n	800f6fa <tcp_receive+0x792>
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e000      	b.n	800f6fc <tcp_receive+0x794>
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	4423      	add	r3, r4
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	4b3c      	ldr	r3, [pc, #240]	@ (800f7f4 <tcp_receive+0x88c>)
 800f702:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f704:	4b3b      	ldr	r3, [pc, #236]	@ (800f7f4 <tcp_receive+0x88c>)
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	461a      	mov	r2, r3
 800f70a:	4b38      	ldr	r3, [pc, #224]	@ (800f7ec <tcp_receive+0x884>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	441a      	add	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f714:	6879      	ldr	r1, [r7, #4]
 800f716:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f718:	440b      	add	r3, r1
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d006      	beq.n	800f72c <tcp_receive+0x7c4>
 800f71e:	4b36      	ldr	r3, [pc, #216]	@ (800f7f8 <tcp_receive+0x890>)
 800f720:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f724:	4935      	ldr	r1, [pc, #212]	@ (800f7fc <tcp_receive+0x894>)
 800f726:	4836      	ldr	r0, [pc, #216]	@ (800f800 <tcp_receive+0x898>)
 800f728:	f005 fd9c 	bl	8015264 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 80e6 	beq.w	800f902 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f736:	4b2e      	ldr	r3, [pc, #184]	@ (800f7f0 <tcp_receive+0x888>)
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	899b      	ldrh	r3, [r3, #12]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fa fc64 	bl	800a00c <lwip_htons>
 800f744:	4603      	mov	r3, r0
 800f746:	b2db      	uxtb	r3, r3
 800f748:	f003 0301 	and.w	r3, r3, #1
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d010      	beq.n	800f772 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f750:	e00a      	b.n	800f768 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f756:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f7fd fcc5 	bl	800d0f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1f0      	bne.n	800f752 <tcp_receive+0x7ea>
 800f770:	e0c7      	b.n	800f902 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f776:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f778:	e051      	b.n	800f81e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	899b      	ldrh	r3, [r3, #12]
 800f780:	b29b      	uxth	r3, r3
 800f782:	4618      	mov	r0, r3
 800f784:	f7fa fc42 	bl	800a00c <lwip_htons>
 800f788:	4603      	mov	r3, r0
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	f003 0301 	and.w	r3, r3, #1
 800f790:	2b00      	cmp	r3, #0
 800f792:	d03c      	beq.n	800f80e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f794:	4b16      	ldr	r3, [pc, #88]	@ (800f7f0 <tcp_receive+0x888>)
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	899b      	ldrh	r3, [r3, #12]
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fa fc35 	bl	800a00c <lwip_htons>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d12f      	bne.n	800f80e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f7ae:	4b10      	ldr	r3, [pc, #64]	@ (800f7f0 <tcp_receive+0x888>)
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	899b      	ldrh	r3, [r3, #12]
 800f7b4:	b29c      	uxth	r4, r3
 800f7b6:	2001      	movs	r0, #1
 800f7b8:	f7fa fc28 	bl	800a00c <lwip_htons>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	461a      	mov	r2, r3
 800f7c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f7f0 <tcp_receive+0x888>)
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	4322      	orrs	r2, r4
 800f7c6:	b292      	uxth	r2, r2
 800f7c8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f7ca:	4b09      	ldr	r3, [pc, #36]	@ (800f7f0 <tcp_receive+0x888>)
 800f7cc:	891c      	ldrh	r4, [r3, #8]
 800f7ce:	4b08      	ldr	r3, [pc, #32]	@ (800f7f0 <tcp_receive+0x888>)
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	899b      	ldrh	r3, [r3, #12]
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fa fc18 	bl	800a00c <lwip_htons>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	f003 0303 	and.w	r3, r3, #3
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00d      	beq.n	800f804 <tcp_receive+0x89c>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	e00c      	b.n	800f806 <tcp_receive+0x89e>
 800f7ec:	2000bea0 	.word	0x2000bea0
 800f7f0:	2000be80 	.word	0x2000be80
 800f7f4:	2000beaa 	.word	0x2000beaa
 800f7f8:	08018028 	.word	0x08018028
 800f7fc:	080183d0 	.word	0x080183d0
 800f800:	08018074 	.word	0x08018074
 800f804:	2300      	movs	r3, #0
 800f806:	4423      	add	r3, r4
 800f808:	b29a      	uxth	r2, r3
 800f80a:	4b98      	ldr	r3, [pc, #608]	@ (800fa6c <tcp_receive+0xb04>)
 800f80c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f810:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f818:	6938      	ldr	r0, [r7, #16]
 800f81a:	f7fd fc6a 	bl	800d0f2 <tcp_seg_free>
            while (next &&
 800f81e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00e      	beq.n	800f842 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f824:	4b91      	ldr	r3, [pc, #580]	@ (800fa6c <tcp_receive+0xb04>)
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	461a      	mov	r2, r3
 800f82a:	4b91      	ldr	r3, [pc, #580]	@ (800fa70 <tcp_receive+0xb08>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	441a      	add	r2, r3
 800f830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f838:	8909      	ldrh	r1, [r1, #8]
 800f83a:	440b      	add	r3, r1
 800f83c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f83e:	2b00      	cmp	r3, #0
 800f840:	da9b      	bge.n	800f77a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f844:	2b00      	cmp	r3, #0
 800f846:	d059      	beq.n	800f8fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f848:	4b88      	ldr	r3, [pc, #544]	@ (800fa6c <tcp_receive+0xb04>)
 800f84a:	881b      	ldrh	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	4b88      	ldr	r3, [pc, #544]	@ (800fa70 <tcp_receive+0xb08>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	441a      	add	r2, r3
 800f854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	dd4d      	ble.n	800f8fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	b29a      	uxth	r2, r3
 800f868:	4b81      	ldr	r3, [pc, #516]	@ (800fa70 <tcp_receive+0xb08>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	1ad3      	subs	r3, r2, r3
 800f870:	b29a      	uxth	r2, r3
 800f872:	4b80      	ldr	r3, [pc, #512]	@ (800fa74 <tcp_receive+0xb0c>)
 800f874:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f876:	4b7f      	ldr	r3, [pc, #508]	@ (800fa74 <tcp_receive+0xb0c>)
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	899b      	ldrh	r3, [r3, #12]
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fa fbc4 	bl	800a00c <lwip_htons>
 800f884:	4603      	mov	r3, r0
 800f886:	b2db      	uxtb	r3, r3
 800f888:	f003 0302 	and.w	r3, r3, #2
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d005      	beq.n	800f89c <tcp_receive+0x934>
                inseg.len -= 1;
 800f890:	4b78      	ldr	r3, [pc, #480]	@ (800fa74 <tcp_receive+0xb0c>)
 800f892:	891b      	ldrh	r3, [r3, #8]
 800f894:	3b01      	subs	r3, #1
 800f896:	b29a      	uxth	r2, r3
 800f898:	4b76      	ldr	r3, [pc, #472]	@ (800fa74 <tcp_receive+0xb0c>)
 800f89a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f89c:	4b75      	ldr	r3, [pc, #468]	@ (800fa74 <tcp_receive+0xb0c>)
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	4a74      	ldr	r2, [pc, #464]	@ (800fa74 <tcp_receive+0xb0c>)
 800f8a2:	8912      	ldrh	r2, [r2, #8]
 800f8a4:	4611      	mov	r1, r2
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7fb fe18 	bl	800b4dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f8ac:	4b71      	ldr	r3, [pc, #452]	@ (800fa74 <tcp_receive+0xb0c>)
 800f8ae:	891c      	ldrh	r4, [r3, #8]
 800f8b0:	4b70      	ldr	r3, [pc, #448]	@ (800fa74 <tcp_receive+0xb0c>)
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	899b      	ldrh	r3, [r3, #12]
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fa fba7 	bl	800a00c <lwip_htons>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	f003 0303 	and.w	r3, r3, #3
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <tcp_receive+0x966>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e000      	b.n	800f8d0 <tcp_receive+0x968>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	4423      	add	r3, r4
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	4b65      	ldr	r3, [pc, #404]	@ (800fa6c <tcp_receive+0xb04>)
 800f8d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f8d8:	4b64      	ldr	r3, [pc, #400]	@ (800fa6c <tcp_receive+0xb04>)
 800f8da:	881b      	ldrh	r3, [r3, #0]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4b64      	ldr	r3, [pc, #400]	@ (800fa70 <tcp_receive+0xb08>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	441a      	add	r2, r3
 800f8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d006      	beq.n	800f8fc <tcp_receive+0x994>
 800f8ee:	4b62      	ldr	r3, [pc, #392]	@ (800fa78 <tcp_receive+0xb10>)
 800f8f0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f8f4:	4961      	ldr	r1, [pc, #388]	@ (800fa7c <tcp_receive+0xb14>)
 800f8f6:	4862      	ldr	r0, [pc, #392]	@ (800fa80 <tcp_receive+0xb18>)
 800f8f8:	f005 fcb4 	bl	8015264 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f900:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f902:	4b5a      	ldr	r3, [pc, #360]	@ (800fa6c <tcp_receive+0xb04>)
 800f904:	881b      	ldrh	r3, [r3, #0]
 800f906:	461a      	mov	r2, r3
 800f908:	4b59      	ldr	r3, [pc, #356]	@ (800fa70 <tcp_receive+0xb08>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	441a      	add	r2, r3
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f916:	4b55      	ldr	r3, [pc, #340]	@ (800fa6c <tcp_receive+0xb04>)
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d206      	bcs.n	800f92c <tcp_receive+0x9c4>
 800f91e:	4b56      	ldr	r3, [pc, #344]	@ (800fa78 <tcp_receive+0xb10>)
 800f920:	f240 6207 	movw	r2, #1543	@ 0x607
 800f924:	4957      	ldr	r1, [pc, #348]	@ (800fa84 <tcp_receive+0xb1c>)
 800f926:	4856      	ldr	r0, [pc, #344]	@ (800fa80 <tcp_receive+0xb18>)
 800f928:	f005 fc9c 	bl	8015264 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f930:	4b4e      	ldr	r3, [pc, #312]	@ (800fa6c <tcp_receive+0xb04>)
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	1ad3      	subs	r3, r2, r3
 800f936:	b29a      	uxth	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f7fc feb1 	bl	800c6a4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f942:	4b4c      	ldr	r3, [pc, #304]	@ (800fa74 <tcp_receive+0xb0c>)
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	891b      	ldrh	r3, [r3, #8]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d006      	beq.n	800f95a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f94c:	4b49      	ldr	r3, [pc, #292]	@ (800fa74 <tcp_receive+0xb0c>)
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	4a4d      	ldr	r2, [pc, #308]	@ (800fa88 <tcp_receive+0xb20>)
 800f952:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f954:	4b47      	ldr	r3, [pc, #284]	@ (800fa74 <tcp_receive+0xb0c>)
 800f956:	2200      	movs	r2, #0
 800f958:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f95a:	4b46      	ldr	r3, [pc, #280]	@ (800fa74 <tcp_receive+0xb0c>)
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	899b      	ldrh	r3, [r3, #12]
 800f960:	b29b      	uxth	r3, r3
 800f962:	4618      	mov	r0, r3
 800f964:	f7fa fb52 	bl	800a00c <lwip_htons>
 800f968:	4603      	mov	r3, r0
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	f003 0301 	and.w	r3, r3, #1
 800f970:	2b00      	cmp	r3, #0
 800f972:	f000 80b8 	beq.w	800fae6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f976:	4b45      	ldr	r3, [pc, #276]	@ (800fa8c <tcp_receive+0xb24>)
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	f043 0320 	orr.w	r3, r3, #32
 800f97e:	b2da      	uxtb	r2, r3
 800f980:	4b42      	ldr	r3, [pc, #264]	@ (800fa8c <tcp_receive+0xb24>)
 800f982:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f984:	e0af      	b.n	800fae6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f98a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	4a36      	ldr	r2, [pc, #216]	@ (800fa70 <tcp_receive+0xb08>)
 800f996:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	891b      	ldrh	r3, [r3, #8]
 800f99c:	461c      	mov	r4, r3
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	899b      	ldrh	r3, [r3, #12]
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fa fb30 	bl	800a00c <lwip_htons>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	f003 0303 	and.w	r3, r3, #3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <tcp_receive+0xa54>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e000      	b.n	800f9be <tcp_receive+0xa56>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	191a      	adds	r2, r3, r4
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9c4:	441a      	add	r2, r3
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9ce:	461c      	mov	r4, r3
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	891b      	ldrh	r3, [r3, #8]
 800f9d4:	461d      	mov	r5, r3
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	899b      	ldrh	r3, [r3, #12]
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fa fb14 	bl	800a00c <lwip_htons>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	f003 0303 	and.w	r3, r3, #3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <tcp_receive+0xa8c>
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e000      	b.n	800f9f6 <tcp_receive+0xa8e>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	442b      	add	r3, r5
 800f9f8:	429c      	cmp	r4, r3
 800f9fa:	d206      	bcs.n	800fa0a <tcp_receive+0xaa2>
 800f9fc:	4b1e      	ldr	r3, [pc, #120]	@ (800fa78 <tcp_receive+0xb10>)
 800f9fe:	f240 622b 	movw	r2, #1579	@ 0x62b
 800fa02:	4923      	ldr	r1, [pc, #140]	@ (800fa90 <tcp_receive+0xb28>)
 800fa04:	481e      	ldr	r0, [pc, #120]	@ (800fa80 <tcp_receive+0xb18>)
 800fa06:	f005 fc2d 	bl	8015264 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	891b      	ldrh	r3, [r3, #8]
 800fa0e:	461c      	mov	r4, r3
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	899b      	ldrh	r3, [r3, #12]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7fa faf7 	bl	800a00c <lwip_htons>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	f003 0303 	and.w	r3, r3, #3
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <tcp_receive+0xac6>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e000      	b.n	800fa30 <tcp_receive+0xac8>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	1919      	adds	r1, r3, r4
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fa36:	b28b      	uxth	r3, r1
 800fa38:	1ad3      	subs	r3, r2, r3
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7fc fe2f 	bl	800c6a4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	891b      	ldrh	r3, [r3, #8]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d028      	beq.n	800faa2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fa50:	4b0d      	ldr	r3, [pc, #52]	@ (800fa88 <tcp_receive+0xb20>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d01d      	beq.n	800fa94 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fa58:	4b0b      	ldr	r3, [pc, #44]	@ (800fa88 <tcp_receive+0xb20>)
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	4619      	mov	r1, r3
 800fa62:	4610      	mov	r0, r2
 800fa64:	f7fb ff8e 	bl	800b984 <pbuf_cat>
 800fa68:	e018      	b.n	800fa9c <tcp_receive+0xb34>
 800fa6a:	bf00      	nop
 800fa6c:	2000beaa 	.word	0x2000beaa
 800fa70:	2000bea0 	.word	0x2000bea0
 800fa74:	2000be80 	.word	0x2000be80
 800fa78:	08018028 	.word	0x08018028
 800fa7c:	08018408 	.word	0x08018408
 800fa80:	08018074 	.word	0x08018074
 800fa84:	08018444 	.word	0x08018444
 800fa88:	2000beb0 	.word	0x2000beb0
 800fa8c:	2000bead 	.word	0x2000bead
 800fa90:	08018464 	.word	0x08018464
            } else {
              recv_data = cseg->p;
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	4a70      	ldr	r2, [pc, #448]	@ (800fc5c <tcp_receive+0xcf4>)
 800fa9a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	899b      	ldrh	r3, [r3, #12]
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fa faae 	bl	800a00c <lwip_htons>
 800fab0:	4603      	mov	r3, r0
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	f003 0301 	and.w	r3, r3, #1
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00d      	beq.n	800fad8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fabc:	4b68      	ldr	r3, [pc, #416]	@ (800fc60 <tcp_receive+0xcf8>)
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	f043 0320 	orr.w	r3, r3, #32
 800fac4:	b2da      	uxtb	r2, r3
 800fac6:	4b66      	ldr	r3, [pc, #408]	@ (800fc60 <tcp_receive+0xcf8>)
 800fac8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	7d1b      	ldrb	r3, [r3, #20]
 800face:	2b04      	cmp	r3, #4
 800fad0:	d102      	bne.n	800fad8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2207      	movs	r2, #7
 800fad6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800fae0:	68b8      	ldr	r0, [r7, #8]
 800fae2:	f7fd fb06 	bl	800d0f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faea:	2b00      	cmp	r3, #0
 800faec:	d008      	beq.n	800fb00 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	685a      	ldr	r2, [r3, #4]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800fafa:	429a      	cmp	r2, r3
 800fafc:	f43f af43 	beq.w	800f986 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	8b5b      	ldrh	r3, [r3, #26]
 800fb04:	f003 0301 	and.w	r3, r3, #1
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00e      	beq.n	800fb2a <tcp_receive+0xbc2>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	8b5b      	ldrh	r3, [r3, #26]
 800fb10:	f023 0301 	bic.w	r3, r3, #1
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	835a      	strh	r2, [r3, #26]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	8b5b      	ldrh	r3, [r3, #26]
 800fb1e:	f043 0302 	orr.w	r3, r3, #2
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb28:	e187      	b.n	800fe3a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	8b5b      	ldrh	r3, [r3, #26]
 800fb2e:	f043 0301 	orr.w	r3, r3, #1
 800fb32:	b29a      	uxth	r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb38:	e17f      	b.n	800fe3a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d106      	bne.n	800fb50 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fb42:	4848      	ldr	r0, [pc, #288]	@ (800fc64 <tcp_receive+0xcfc>)
 800fb44:	f7fd faee 	bl	800d124 <tcp_seg_copy>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	675a      	str	r2, [r3, #116]	@ 0x74
 800fb4e:	e16c      	b.n	800fe2a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fb50:	2300      	movs	r3, #0
 800fb52:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb58:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fb5a:	e156      	b.n	800fe0a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800fb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb5e:	68db      	ldr	r3, [r3, #12]
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	4b41      	ldr	r3, [pc, #260]	@ (800fc68 <tcp_receive+0xd00>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d11d      	bne.n	800fba6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fb6a:	4b3e      	ldr	r3, [pc, #248]	@ (800fc64 <tcp_receive+0xcfc>)
 800fb6c:	891a      	ldrh	r2, [r3, #8]
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb70:	891b      	ldrh	r3, [r3, #8]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	f240 814e 	bls.w	800fe14 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb78:	483a      	ldr	r0, [pc, #232]	@ (800fc64 <tcp_receive+0xcfc>)
 800fb7a:	f7fd fad3 	bl	800d124 <tcp_seg_copy>
 800fb7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	f000 8148 	beq.w	800fe18 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800fb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d003      	beq.n	800fb96 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fb8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb90:	697a      	ldr	r2, [r7, #20]
 800fb92:	601a      	str	r2, [r3, #0]
 800fb94:	e002      	b.n	800fb9c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fb9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fb9e:	6978      	ldr	r0, [r7, #20]
 800fba0:	f7ff f8de 	bl	800ed60 <tcp_oos_insert_segment>
                }
                break;
 800fba4:	e138      	b.n	800fe18 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d117      	bne.n	800fbdc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fbac:	4b2e      	ldr	r3, [pc, #184]	@ (800fc68 <tcp_receive+0xd00>)
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	da57      	bge.n	800fc6c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fbbc:	4829      	ldr	r0, [pc, #164]	@ (800fc64 <tcp_receive+0xcfc>)
 800fbbe:	f7fd fab1 	bl	800d124 <tcp_seg_copy>
 800fbc2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f000 8128 	beq.w	800fe1c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	69ba      	ldr	r2, [r7, #24]
 800fbd0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fbd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fbd4:	69b8      	ldr	r0, [r7, #24]
 800fbd6:	f7ff f8c3 	bl	800ed60 <tcp_oos_insert_segment>
                  }
                  break;
 800fbda:	e11f      	b.n	800fe1c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fbdc:	4b22      	ldr	r3, [pc, #136]	@ (800fc68 <tcp_receive+0xd00>)
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	db3e      	blt.n	800fc6c <tcp_receive+0xd04>
 800fbee:	4b1e      	ldr	r3, [pc, #120]	@ (800fc68 <tcp_receive+0xd00>)
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	dc35      	bgt.n	800fc6c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc00:	4818      	ldr	r0, [pc, #96]	@ (800fc64 <tcp_receive+0xcfc>)
 800fc02:	f7fd fa8f 	bl	800d124 <tcp_seg_copy>
 800fc06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	f000 8108 	beq.w	800fe20 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fc10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc18:	8912      	ldrh	r2, [r2, #8]
 800fc1a:	441a      	add	r2, r3
 800fc1c:	4b12      	ldr	r3, [pc, #72]	@ (800fc68 <tcp_receive+0xd00>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	1ad3      	subs	r3, r2, r3
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	dd12      	ble.n	800fc4c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fc26:	4b10      	ldr	r3, [pc, #64]	@ (800fc68 <tcp_receive+0xd00>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	1ad3      	subs	r3, r2, r3
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fc3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc3e:	685a      	ldr	r2, [r3, #4]
 800fc40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc42:	891b      	ldrh	r3, [r3, #8]
 800fc44:	4619      	mov	r1, r3
 800fc46:	4610      	mov	r0, r2
 800fc48:	f7fb fc48 	bl	800b4dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc4e:	69fa      	ldr	r2, [r7, #28]
 800fc50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fc52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fc54:	69f8      	ldr	r0, [r7, #28]
 800fc56:	f7ff f883 	bl	800ed60 <tcp_oos_insert_segment>
                  }
                  break;
 800fc5a:	e0e1      	b.n	800fe20 <tcp_receive+0xeb8>
 800fc5c:	2000beb0 	.word	0x2000beb0
 800fc60:	2000bead 	.word	0x2000bead
 800fc64:	2000be80 	.word	0x2000be80
 800fc68:	2000bea0 	.word	0x2000bea0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f040 80c5 	bne.w	800fe04 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fc7a:	4b7f      	ldr	r3, [pc, #508]	@ (800fe78 <tcp_receive+0xf10>)
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f340 80bc 	ble.w	800fe04 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	899b      	ldrh	r3, [r3, #12]
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fa f9b9 	bl	800a00c <lwip_htons>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	f003 0301 	and.w	r3, r3, #1
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f040 80be 	bne.w	800fe24 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fca8:	4874      	ldr	r0, [pc, #464]	@ (800fe7c <tcp_receive+0xf14>)
 800fcaa:	f7fd fa3b 	bl	800d124 <tcp_seg_copy>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 80b5 	beq.w	800fe28 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcc6:	8912      	ldrh	r2, [r2, #8]
 800fcc8:	441a      	add	r2, r3
 800fcca:	4b6b      	ldr	r3, [pc, #428]	@ (800fe78 <tcp_receive+0xf10>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	dd12      	ble.n	800fcfa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fcd4:	4b68      	ldr	r3, [pc, #416]	@ (800fe78 <tcp_receive+0xf10>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	b29a      	uxth	r2, r3
 800fcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	1ad3      	subs	r3, r2, r3
 800fce4:	b29a      	uxth	r2, r3
 800fce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf0:	891b      	ldrh	r3, [r3, #8]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	4610      	mov	r0, r2
 800fcf6:	f7fb fbf1 	bl	800b4dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fcfa:	4b61      	ldr	r3, [pc, #388]	@ (800fe80 <tcp_receive+0xf18>)
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	4b5d      	ldr	r3, [pc, #372]	@ (800fe78 <tcp_receive+0xf10>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	441a      	add	r2, r3
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd0a:	6879      	ldr	r1, [r7, #4]
 800fd0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fd0e:	440b      	add	r3, r1
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f340 8088 	ble.w	800fe28 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	899b      	ldrh	r3, [r3, #12]
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fa f972 	bl	800a00c <lwip_htons>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	f003 0301 	and.w	r3, r3, #1
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d021      	beq.n	800fd78 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	899b      	ldrh	r3, [r3, #12]
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	b21b      	sxth	r3, r3
 800fd40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fd44:	b21c      	sxth	r4, r3
 800fd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	899b      	ldrh	r3, [r3, #12]
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7fa f95b 	bl	800a00c <lwip_htons>
 800fd56:	4603      	mov	r3, r0
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fa f953 	bl	800a00c <lwip_htons>
 800fd66:	4603      	mov	r3, r0
 800fd68:	b21b      	sxth	r3, r3
 800fd6a:	4323      	orrs	r3, r4
 800fd6c:	b21a      	sxth	r2, r3
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	b292      	uxth	r2, r2
 800fd76:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd82:	4413      	add	r3, r2
 800fd84:	b299      	uxth	r1, r3
 800fd86:	4b3c      	ldr	r3, [pc, #240]	@ (800fe78 <tcp_receive+0xf10>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	1a8a      	subs	r2, r1, r2
 800fd92:	b292      	uxth	r2, r2
 800fd94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	685a      	ldr	r2, [r3, #4]
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	891b      	ldrh	r3, [r3, #8]
 800fda2:	4619      	mov	r1, r3
 800fda4:	4610      	mov	r0, r2
 800fda6:	f7fb fb99 	bl	800b4dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	891c      	ldrh	r4, [r3, #8]
 800fdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	899b      	ldrh	r3, [r3, #12]
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fa f926 	bl	800a00c <lwip_htons>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	f003 0303 	and.w	r3, r3, #3
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d001      	beq.n	800fdd0 <tcp_receive+0xe68>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e000      	b.n	800fdd2 <tcp_receive+0xe6a>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	4423      	add	r3, r4
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	4b2a      	ldr	r3, [pc, #168]	@ (800fe80 <tcp_receive+0xf18>)
 800fdd8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fdda:	4b29      	ldr	r3, [pc, #164]	@ (800fe80 <tcp_receive+0xf18>)
 800fddc:	881b      	ldrh	r3, [r3, #0]
 800fdde:	461a      	mov	r2, r3
 800fde0:	4b25      	ldr	r3, [pc, #148]	@ (800fe78 <tcp_receive+0xf10>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	441a      	add	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdea:	6879      	ldr	r1, [r7, #4]
 800fdec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fdee:	440b      	add	r3, r1
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d019      	beq.n	800fe28 <tcp_receive+0xec0>
 800fdf4:	4b23      	ldr	r3, [pc, #140]	@ (800fe84 <tcp_receive+0xf1c>)
 800fdf6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800fdfa:	4923      	ldr	r1, [pc, #140]	@ (800fe88 <tcp_receive+0xf20>)
 800fdfc:	4823      	ldr	r0, [pc, #140]	@ (800fe8c <tcp_receive+0xf24>)
 800fdfe:	f005 fa31 	bl	8015264 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fe02:	e011      	b.n	800fe28 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fe0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f47f aea5 	bne.w	800fb5c <tcp_receive+0xbf4>
 800fe12:	e00a      	b.n	800fe2a <tcp_receive+0xec2>
                break;
 800fe14:	bf00      	nop
 800fe16:	e008      	b.n	800fe2a <tcp_receive+0xec2>
                break;
 800fe18:	bf00      	nop
 800fe1a:	e006      	b.n	800fe2a <tcp_receive+0xec2>
                  break;
 800fe1c:	bf00      	nop
 800fe1e:	e004      	b.n	800fe2a <tcp_receive+0xec2>
                  break;
 800fe20:	bf00      	nop
 800fe22:	e002      	b.n	800fe2a <tcp_receive+0xec2>
                  break;
 800fe24:	bf00      	nop
 800fe26:	e000      	b.n	800fe2a <tcp_receive+0xec2>
                break;
 800fe28:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f001 fe88 	bl	8011b40 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fe30:	e003      	b.n	800fe3a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f001 fe84 	bl	8011b40 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe38:	e01a      	b.n	800fe70 <tcp_receive+0xf08>
 800fe3a:	e019      	b.n	800fe70 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fe3c:	4b0e      	ldr	r3, [pc, #56]	@ (800fe78 <tcp_receive+0xf10>)
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	db0a      	blt.n	800fe60 <tcp_receive+0xef8>
 800fe4a:	4b0b      	ldr	r3, [pc, #44]	@ (800fe78 <tcp_receive+0xf10>)
 800fe4c:	681a      	ldr	r2, [r3, #0]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe52:	6879      	ldr	r1, [r7, #4]
 800fe54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fe56:	440b      	add	r3, r1
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	dd07      	ble.n	800fe70 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	8b5b      	ldrh	r3, [r3, #26]
 800fe64:	f043 0302 	orr.w	r3, r3, #2
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fe6e:	e7ff      	b.n	800fe70 <tcp_receive+0xf08>
 800fe70:	bf00      	nop
 800fe72:	3750      	adds	r7, #80	@ 0x50
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bdb0      	pop	{r4, r5, r7, pc}
 800fe78:	2000bea0 	.word	0x2000bea0
 800fe7c:	2000be80 	.word	0x2000be80
 800fe80:	2000beaa 	.word	0x2000beaa
 800fe84:	08018028 	.word	0x08018028
 800fe88:	080183d0 	.word	0x080183d0
 800fe8c:	08018074 	.word	0x08018074

0800fe90 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fe96:	4b15      	ldr	r3, [pc, #84]	@ (800feec <tcp_get_next_optbyte+0x5c>)
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	b291      	uxth	r1, r2
 800fe9e:	4a13      	ldr	r2, [pc, #76]	@ (800feec <tcp_get_next_optbyte+0x5c>)
 800fea0:	8011      	strh	r1, [r2, #0]
 800fea2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fea4:	4b12      	ldr	r3, [pc, #72]	@ (800fef0 <tcp_get_next_optbyte+0x60>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d004      	beq.n	800feb6 <tcp_get_next_optbyte+0x26>
 800feac:	4b11      	ldr	r3, [pc, #68]	@ (800fef4 <tcp_get_next_optbyte+0x64>)
 800feae:	881b      	ldrh	r3, [r3, #0]
 800feb0:	88fa      	ldrh	r2, [r7, #6]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d208      	bcs.n	800fec8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800feb6:	4b10      	ldr	r3, [pc, #64]	@ (800fef8 <tcp_get_next_optbyte+0x68>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	3314      	adds	r3, #20
 800febc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800febe:	88fb      	ldrh	r3, [r7, #6]
 800fec0:	683a      	ldr	r2, [r7, #0]
 800fec2:	4413      	add	r3, r2
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	e00b      	b.n	800fee0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fec8:	88fb      	ldrh	r3, [r7, #6]
 800feca:	b2da      	uxtb	r2, r3
 800fecc:	4b09      	ldr	r3, [pc, #36]	@ (800fef4 <tcp_get_next_optbyte+0x64>)
 800fece:	881b      	ldrh	r3, [r3, #0]
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fed6:	4b06      	ldr	r3, [pc, #24]	@ (800fef0 <tcp_get_next_optbyte+0x60>)
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	797b      	ldrb	r3, [r7, #5]
 800fedc:	4413      	add	r3, r2
 800fede:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	2000be9c 	.word	0x2000be9c
 800fef0:	2000be98 	.word	0x2000be98
 800fef4:	2000be96 	.word	0x2000be96
 800fef8:	2000be90 	.word	0x2000be90

0800fefc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d106      	bne.n	800ff18 <tcp_parseopt+0x1c>
 800ff0a:	4b32      	ldr	r3, [pc, #200]	@ (800ffd4 <tcp_parseopt+0xd8>)
 800ff0c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ff10:	4931      	ldr	r1, [pc, #196]	@ (800ffd8 <tcp_parseopt+0xdc>)
 800ff12:	4832      	ldr	r0, [pc, #200]	@ (800ffdc <tcp_parseopt+0xe0>)
 800ff14:	f005 f9a6 	bl	8015264 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ff18:	4b31      	ldr	r3, [pc, #196]	@ (800ffe0 <tcp_parseopt+0xe4>)
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d056      	beq.n	800ffce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ff20:	4b30      	ldr	r3, [pc, #192]	@ (800ffe4 <tcp_parseopt+0xe8>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	801a      	strh	r2, [r3, #0]
 800ff26:	e046      	b.n	800ffb6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800ff28:	f7ff ffb2 	bl	800fe90 <tcp_get_next_optbyte>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ff30:	7bfb      	ldrb	r3, [r7, #15]
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	d006      	beq.n	800ff44 <tcp_parseopt+0x48>
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	dc2a      	bgt.n	800ff90 <tcp_parseopt+0x94>
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d042      	beq.n	800ffc4 <tcp_parseopt+0xc8>
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d038      	beq.n	800ffb4 <tcp_parseopt+0xb8>
 800ff42:	e025      	b.n	800ff90 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ff44:	f7ff ffa4 	bl	800fe90 <tcp_get_next_optbyte>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b04      	cmp	r3, #4
 800ff4c:	d13c      	bne.n	800ffc8 <tcp_parseopt+0xcc>
 800ff4e:	4b25      	ldr	r3, [pc, #148]	@ (800ffe4 <tcp_parseopt+0xe8>)
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	3301      	adds	r3, #1
 800ff54:	4a22      	ldr	r2, [pc, #136]	@ (800ffe0 <tcp_parseopt+0xe4>)
 800ff56:	8812      	ldrh	r2, [r2, #0]
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	da35      	bge.n	800ffc8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ff5c:	f7ff ff98 	bl	800fe90 <tcp_get_next_optbyte>
 800ff60:	4603      	mov	r3, r0
 800ff62:	021b      	lsls	r3, r3, #8
 800ff64:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ff66:	f7ff ff93 	bl	800fe90 <tcp_get_next_optbyte>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	89bb      	ldrh	r3, [r7, #12]
 800ff70:	4313      	orrs	r3, r2
 800ff72:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ff74:	89bb      	ldrh	r3, [r7, #12]
 800ff76:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ff7a:	d804      	bhi.n	800ff86 <tcp_parseopt+0x8a>
 800ff7c:	89bb      	ldrh	r3, [r7, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d001      	beq.n	800ff86 <tcp_parseopt+0x8a>
 800ff82:	89ba      	ldrh	r2, [r7, #12]
 800ff84:	e001      	b.n	800ff8a <tcp_parseopt+0x8e>
 800ff86:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800ff8e:	e012      	b.n	800ffb6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ff90:	f7ff ff7e 	bl	800fe90 <tcp_get_next_optbyte>
 800ff94:	4603      	mov	r3, r0
 800ff96:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ff98:	7afb      	ldrb	r3, [r7, #11]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d916      	bls.n	800ffcc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ff9e:	7afb      	ldrb	r3, [r7, #11]
 800ffa0:	b29a      	uxth	r2, r3
 800ffa2:	4b10      	ldr	r3, [pc, #64]	@ (800ffe4 <tcp_parseopt+0xe8>)
 800ffa4:	881b      	ldrh	r3, [r3, #0]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	3b02      	subs	r3, #2
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	4b0d      	ldr	r3, [pc, #52]	@ (800ffe4 <tcp_parseopt+0xe8>)
 800ffb0:	801a      	strh	r2, [r3, #0]
 800ffb2:	e000      	b.n	800ffb6 <tcp_parseopt+0xba>
          break;
 800ffb4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ffb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ffe4 <tcp_parseopt+0xe8>)
 800ffb8:	881a      	ldrh	r2, [r3, #0]
 800ffba:	4b09      	ldr	r3, [pc, #36]	@ (800ffe0 <tcp_parseopt+0xe4>)
 800ffbc:	881b      	ldrh	r3, [r3, #0]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d3b2      	bcc.n	800ff28 <tcp_parseopt+0x2c>
 800ffc2:	e004      	b.n	800ffce <tcp_parseopt+0xd2>
          return;
 800ffc4:	bf00      	nop
 800ffc6:	e002      	b.n	800ffce <tcp_parseopt+0xd2>
            return;
 800ffc8:	bf00      	nop
 800ffca:	e000      	b.n	800ffce <tcp_parseopt+0xd2>
            return;
 800ffcc:	bf00      	nop
      }
    }
  }
}
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	08018028 	.word	0x08018028
 800ffd8:	0801848c 	.word	0x0801848c
 800ffdc:	08018074 	.word	0x08018074
 800ffe0:	2000be94 	.word	0x2000be94
 800ffe4:	2000be9c 	.word	0x2000be9c

0800ffe8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ffec:	4b05      	ldr	r3, [pc, #20]	@ (8010004 <tcp_trigger_input_pcb_close+0x1c>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f043 0310 	orr.w	r3, r3, #16
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	4b03      	ldr	r3, [pc, #12]	@ (8010004 <tcp_trigger_input_pcb_close+0x1c>)
 800fff8:	701a      	strb	r2, [r3, #0]
}
 800fffa:	bf00      	nop
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr
 8010004:	2000bead 	.word	0x2000bead

08010008 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00a      	beq.n	8010030 <tcp_route+0x28>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	7a1b      	ldrb	r3, [r3, #8]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d006      	beq.n	8010030 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	7a1b      	ldrb	r3, [r3, #8]
 8010026:	4618      	mov	r0, r3
 8010028:	f7fb f850 	bl	800b0cc <netif_get_by_index>
 801002c:	4603      	mov	r3, r0
 801002e:	e003      	b.n	8010038 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f003 fc49 	bl	80138c8 <ip4_route>
 8010036:	4603      	mov	r3, r0
  }
}
 8010038:	4618      	mov	r0, r3
 801003a:	3710      	adds	r7, #16
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010040:	b590      	push	{r4, r7, lr}
 8010042:	b087      	sub	sp, #28
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	603b      	str	r3, [r7, #0]
 801004c:	4613      	mov	r3, r2
 801004e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d105      	bne.n	8010062 <tcp_create_segment+0x22>
 8010056:	4b43      	ldr	r3, [pc, #268]	@ (8010164 <tcp_create_segment+0x124>)
 8010058:	22a3      	movs	r2, #163	@ 0xa3
 801005a:	4943      	ldr	r1, [pc, #268]	@ (8010168 <tcp_create_segment+0x128>)
 801005c:	4843      	ldr	r0, [pc, #268]	@ (801016c <tcp_create_segment+0x12c>)
 801005e:	f005 f901 	bl	8015264 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d105      	bne.n	8010074 <tcp_create_segment+0x34>
 8010068:	4b3e      	ldr	r3, [pc, #248]	@ (8010164 <tcp_create_segment+0x124>)
 801006a:	22a4      	movs	r2, #164	@ 0xa4
 801006c:	4940      	ldr	r1, [pc, #256]	@ (8010170 <tcp_create_segment+0x130>)
 801006e:	483f      	ldr	r0, [pc, #252]	@ (801016c <tcp_create_segment+0x12c>)
 8010070:	f005 f8f8 	bl	8015264 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010074:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	b2db      	uxtb	r3, r3
 801007c:	f003 0304 	and.w	r3, r3, #4
 8010080:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010082:	2003      	movs	r0, #3
 8010084:	f7fa fc96 	bl	800a9b4 <memp_malloc>
 8010088:	6138      	str	r0, [r7, #16]
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d104      	bne.n	801009a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010090:	68b8      	ldr	r0, [r7, #8]
 8010092:	f7fb fba9 	bl	800b7e8 <pbuf_free>
    return NULL;
 8010096:	2300      	movs	r3, #0
 8010098:	e060      	b.n	801015c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80100a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	2200      	movs	r2, #0
 80100a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	891a      	ldrh	r2, [r3, #8]
 80100b2:	7dfb      	ldrb	r3, [r7, #23]
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d205      	bcs.n	80100c6 <tcp_create_segment+0x86>
 80100ba:	4b2a      	ldr	r3, [pc, #168]	@ (8010164 <tcp_create_segment+0x124>)
 80100bc:	22b0      	movs	r2, #176	@ 0xb0
 80100be:	492d      	ldr	r1, [pc, #180]	@ (8010174 <tcp_create_segment+0x134>)
 80100c0:	482a      	ldr	r0, [pc, #168]	@ (801016c <tcp_create_segment+0x12c>)
 80100c2:	f005 f8cf 	bl	8015264 <iprintf>
  seg->len = p->tot_len - optlen;
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	891a      	ldrh	r2, [r3, #8]
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80100d6:	2114      	movs	r1, #20
 80100d8:	68b8      	ldr	r0, [r7, #8]
 80100da:	f7fb faef 	bl	800b6bc <pbuf_add_header>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d004      	beq.n	80100ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80100e4:	6938      	ldr	r0, [r7, #16]
 80100e6:	f7fd f804 	bl	800d0f2 <tcp_seg_free>
    return NULL;
 80100ea:	2300      	movs	r3, #0
 80100ec:	e036      	b.n	801015c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	685a      	ldr	r2, [r3, #4]
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	8ada      	ldrh	r2, [r3, #22]
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	68dc      	ldr	r4, [r3, #12]
 8010100:	4610      	mov	r0, r2
 8010102:	f7f9 ff83 	bl	800a00c <lwip_htons>
 8010106:	4603      	mov	r3, r0
 8010108:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	8b1a      	ldrh	r2, [r3, #24]
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	68dc      	ldr	r4, [r3, #12]
 8010112:	4610      	mov	r0, r2
 8010114:	f7f9 ff7a 	bl	800a00c <lwip_htons>
 8010118:	4603      	mov	r3, r0
 801011a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	68dc      	ldr	r4, [r3, #12]
 8010120:	6838      	ldr	r0, [r7, #0]
 8010122:	f7f9 ff88 	bl	800a036 <lwip_htonl>
 8010126:	4603      	mov	r3, r0
 8010128:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801012a:	7dfb      	ldrb	r3, [r7, #23]
 801012c:	089b      	lsrs	r3, r3, #2
 801012e:	b2db      	uxtb	r3, r3
 8010130:	3305      	adds	r3, #5
 8010132:	b29b      	uxth	r3, r3
 8010134:	031b      	lsls	r3, r3, #12
 8010136:	b29a      	uxth	r2, r3
 8010138:	79fb      	ldrb	r3, [r7, #7]
 801013a:	b29b      	uxth	r3, r3
 801013c:	4313      	orrs	r3, r2
 801013e:	b29a      	uxth	r2, r3
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	68dc      	ldr	r4, [r3, #12]
 8010144:	4610      	mov	r0, r2
 8010146:	f7f9 ff61 	bl	800a00c <lwip_htons>
 801014a:	4603      	mov	r3, r0
 801014c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	2200      	movs	r2, #0
 8010154:	749a      	strb	r2, [r3, #18]
 8010156:	2200      	movs	r2, #0
 8010158:	74da      	strb	r2, [r3, #19]
  return seg;
 801015a:	693b      	ldr	r3, [r7, #16]
}
 801015c:	4618      	mov	r0, r3
 801015e:	371c      	adds	r7, #28
 8010160:	46bd      	mov	sp, r7
 8010162:	bd90      	pop	{r4, r7, pc}
 8010164:	080184a8 	.word	0x080184a8
 8010168:	080184dc 	.word	0x080184dc
 801016c:	080184fc 	.word	0x080184fc
 8010170:	08018524 	.word	0x08018524
 8010174:	08018548 	.word	0x08018548

08010178 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af00      	add	r7, sp, #0
 801017e:	607b      	str	r3, [r7, #4]
 8010180:	4603      	mov	r3, r0
 8010182:	73fb      	strb	r3, [r7, #15]
 8010184:	460b      	mov	r3, r1
 8010186:	81bb      	strh	r3, [r7, #12]
 8010188:	4613      	mov	r3, r2
 801018a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801018c:	89bb      	ldrh	r3, [r7, #12]
 801018e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d105      	bne.n	80101a2 <tcp_pbuf_prealloc+0x2a>
 8010196:	4b30      	ldr	r3, [pc, #192]	@ (8010258 <tcp_pbuf_prealloc+0xe0>)
 8010198:	22e8      	movs	r2, #232	@ 0xe8
 801019a:	4930      	ldr	r1, [pc, #192]	@ (801025c <tcp_pbuf_prealloc+0xe4>)
 801019c:	4830      	ldr	r0, [pc, #192]	@ (8010260 <tcp_pbuf_prealloc+0xe8>)
 801019e:	f005 f861 	bl	8015264 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d105      	bne.n	80101b4 <tcp_pbuf_prealloc+0x3c>
 80101a8:	4b2b      	ldr	r3, [pc, #172]	@ (8010258 <tcp_pbuf_prealloc+0xe0>)
 80101aa:	22e9      	movs	r2, #233	@ 0xe9
 80101ac:	492d      	ldr	r1, [pc, #180]	@ (8010264 <tcp_pbuf_prealloc+0xec>)
 80101ae:	482c      	ldr	r0, [pc, #176]	@ (8010260 <tcp_pbuf_prealloc+0xe8>)
 80101b0:	f005 f858 	bl	8015264 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80101b4:	89ba      	ldrh	r2, [r7, #12]
 80101b6:	897b      	ldrh	r3, [r7, #10]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d221      	bcs.n	8010200 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80101bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80101c0:	f003 0302 	and.w	r3, r3, #2
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d111      	bne.n	80101ec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80101c8:	6a3b      	ldr	r3, [r7, #32]
 80101ca:	8b5b      	ldrh	r3, [r3, #26]
 80101cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d115      	bne.n	8010200 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80101d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d007      	beq.n	80101ec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80101dc:	6a3b      	ldr	r3, [r7, #32]
 80101de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d103      	bne.n	80101ec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80101e4:	6a3b      	ldr	r3, [r7, #32]
 80101e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d009      	beq.n	8010200 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80101ec:	89bb      	ldrh	r3, [r7, #12]
 80101ee:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80101f2:	f023 0203 	bic.w	r2, r3, #3
 80101f6:	897b      	ldrh	r3, [r7, #10]
 80101f8:	4293      	cmp	r3, r2
 80101fa:	bf28      	it	cs
 80101fc:	4613      	movcs	r3, r2
 80101fe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010200:	8af9      	ldrh	r1, [r7, #22]
 8010202:	7bfb      	ldrb	r3, [r7, #15]
 8010204:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010208:	4618      	mov	r0, r3
 801020a:	f7fb f809 	bl	800b220 <pbuf_alloc>
 801020e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010216:	2300      	movs	r3, #0
 8010218:	e019      	b.n	801024e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d006      	beq.n	8010230 <tcp_pbuf_prealloc+0xb8>
 8010222:	4b0d      	ldr	r3, [pc, #52]	@ (8010258 <tcp_pbuf_prealloc+0xe0>)
 8010224:	f240 120b 	movw	r2, #267	@ 0x10b
 8010228:	490f      	ldr	r1, [pc, #60]	@ (8010268 <tcp_pbuf_prealloc+0xf0>)
 801022a:	480d      	ldr	r0, [pc, #52]	@ (8010260 <tcp_pbuf_prealloc+0xe8>)
 801022c:	f005 f81a 	bl	8015264 <iprintf>
  *oversize = p->len - length;
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	895a      	ldrh	r2, [r3, #10]
 8010234:	89bb      	ldrh	r3, [r7, #12]
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	b29a      	uxth	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	89ba      	ldrh	r2, [r7, #12]
 8010242:	811a      	strh	r2, [r3, #8]
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	891a      	ldrh	r2, [r3, #8]
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	815a      	strh	r2, [r3, #10]
  return p;
 801024c:	693b      	ldr	r3, [r7, #16]
}
 801024e:	4618      	mov	r0, r3
 8010250:	3718      	adds	r7, #24
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	080184a8 	.word	0x080184a8
 801025c:	08018560 	.word	0x08018560
 8010260:	080184fc 	.word	0x080184fc
 8010264:	08018584 	.word	0x08018584
 8010268:	080185a4 	.word	0x080185a4

0801026c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d106      	bne.n	801028c <tcp_write_checks+0x20>
 801027e:	4b33      	ldr	r3, [pc, #204]	@ (801034c <tcp_write_checks+0xe0>)
 8010280:	f240 1233 	movw	r2, #307	@ 0x133
 8010284:	4932      	ldr	r1, [pc, #200]	@ (8010350 <tcp_write_checks+0xe4>)
 8010286:	4833      	ldr	r0, [pc, #204]	@ (8010354 <tcp_write_checks+0xe8>)
 8010288:	f004 ffec 	bl	8015264 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	7d1b      	ldrb	r3, [r3, #20]
 8010290:	2b04      	cmp	r3, #4
 8010292:	d00e      	beq.n	80102b2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010298:	2b07      	cmp	r3, #7
 801029a:	d00a      	beq.n	80102b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80102a0:	2b02      	cmp	r3, #2
 80102a2:	d006      	beq.n	80102b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80102a8:	2b03      	cmp	r3, #3
 80102aa:	d002      	beq.n	80102b2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80102ac:	f06f 030a 	mvn.w	r3, #10
 80102b0:	e048      	b.n	8010344 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80102b2:	887b      	ldrh	r3, [r7, #2]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d101      	bne.n	80102bc <tcp_write_checks+0x50>
    return ERR_OK;
 80102b8:	2300      	movs	r3, #0
 80102ba:	e043      	b.n	8010344 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80102c2:	887a      	ldrh	r2, [r7, #2]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d909      	bls.n	80102dc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	8b5b      	ldrh	r3, [r3, #26]
 80102cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80102d6:	f04f 33ff 	mov.w	r3, #4294967295
 80102da:	e033      	b.n	8010344 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102e2:	2b08      	cmp	r3, #8
 80102e4:	d909      	bls.n	80102fa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	8b5b      	ldrh	r3, [r3, #26]
 80102ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80102f4:	f04f 33ff 	mov.w	r3, #4294967295
 80102f8:	e024      	b.n	8010344 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010300:	2b00      	cmp	r3, #0
 8010302:	d00f      	beq.n	8010324 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010308:	2b00      	cmp	r3, #0
 801030a:	d11a      	bne.n	8010342 <tcp_write_checks+0xd6>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010310:	2b00      	cmp	r3, #0
 8010312:	d116      	bne.n	8010342 <tcp_write_checks+0xd6>
 8010314:	4b0d      	ldr	r3, [pc, #52]	@ (801034c <tcp_write_checks+0xe0>)
 8010316:	f240 1255 	movw	r2, #341	@ 0x155
 801031a:	490f      	ldr	r1, [pc, #60]	@ (8010358 <tcp_write_checks+0xec>)
 801031c:	480d      	ldr	r0, [pc, #52]	@ (8010354 <tcp_write_checks+0xe8>)
 801031e:	f004 ffa1 	bl	8015264 <iprintf>
 8010322:	e00e      	b.n	8010342 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010328:	2b00      	cmp	r3, #0
 801032a:	d103      	bne.n	8010334 <tcp_write_checks+0xc8>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <tcp_write_checks+0xd6>
 8010334:	4b05      	ldr	r3, [pc, #20]	@ (801034c <tcp_write_checks+0xe0>)
 8010336:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801033a:	4908      	ldr	r1, [pc, #32]	@ (801035c <tcp_write_checks+0xf0>)
 801033c:	4805      	ldr	r0, [pc, #20]	@ (8010354 <tcp_write_checks+0xe8>)
 801033e:	f004 ff91 	bl	8015264 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	080184a8 	.word	0x080184a8
 8010350:	080185b8 	.word	0x080185b8
 8010354:	080184fc 	.word	0x080184fc
 8010358:	080185d8 	.word	0x080185d8
 801035c:	08018614 	.word	0x08018614

08010360 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010360:	b590      	push	{r4, r7, lr}
 8010362:	b09b      	sub	sp, #108	@ 0x6c
 8010364:	af04      	add	r7, sp, #16
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	4611      	mov	r1, r2
 801036c:	461a      	mov	r2, r3
 801036e:	460b      	mov	r3, r1
 8010370:	80fb      	strh	r3, [r7, #6]
 8010372:	4613      	mov	r3, r2
 8010374:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010376:	2300      	movs	r3, #0
 8010378:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801037a:	2300      	movs	r3, #0
 801037c:	653b      	str	r3, [r7, #80]	@ 0x50
 801037e:	2300      	movs	r3, #0
 8010380:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010382:	2300      	movs	r3, #0
 8010384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010386:	2300      	movs	r3, #0
 8010388:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801038a:	2300      	movs	r3, #0
 801038c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010390:	2300      	movs	r3, #0
 8010392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010396:	2300      	movs	r3, #0
 8010398:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801039a:	2300      	movs	r3, #0
 801039c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801039e:	2300      	movs	r3, #0
 80103a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d109      	bne.n	80103bc <tcp_write+0x5c>
 80103a8:	4ba4      	ldr	r3, [pc, #656]	@ (801063c <tcp_write+0x2dc>)
 80103aa:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80103ae:	49a4      	ldr	r1, [pc, #656]	@ (8010640 <tcp_write+0x2e0>)
 80103b0:	48a4      	ldr	r0, [pc, #656]	@ (8010644 <tcp_write+0x2e4>)
 80103b2:	f004 ff57 	bl	8015264 <iprintf>
 80103b6:	f06f 030f 	mvn.w	r3, #15
 80103ba:	e32a      	b.n	8010a12 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80103c2:	085b      	lsrs	r3, r3, #1
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103ca:	4293      	cmp	r3, r2
 80103cc:	bf28      	it	cs
 80103ce:	4613      	movcs	r3, r2
 80103d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80103d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <tcp_write+0x7e>
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103dc:	e000      	b.n	80103e0 <tcp_write+0x80>
 80103de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d109      	bne.n	80103fc <tcp_write+0x9c>
 80103e8:	4b94      	ldr	r3, [pc, #592]	@ (801063c <tcp_write+0x2dc>)
 80103ea:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80103ee:	4996      	ldr	r1, [pc, #600]	@ (8010648 <tcp_write+0x2e8>)
 80103f0:	4894      	ldr	r0, [pc, #592]	@ (8010644 <tcp_write+0x2e4>)
 80103f2:	f004 ff37 	bl	8015264 <iprintf>
 80103f6:	f06f 030f 	mvn.w	r3, #15
 80103fa:	e30a      	b.n	8010a12 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80103fc:	88fb      	ldrh	r3, [r7, #6]
 80103fe:	4619      	mov	r1, r3
 8010400:	68f8      	ldr	r0, [r7, #12]
 8010402:	f7ff ff33 	bl	801026c <tcp_write_checks>
 8010406:	4603      	mov	r3, r0
 8010408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801040c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010410:	2b00      	cmp	r3, #0
 8010412:	d002      	beq.n	801041a <tcp_write+0xba>
    return err;
 8010414:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010418:	e2fb      	b.n	8010a12 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010420:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010424:	2300      	movs	r3, #0
 8010426:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801042e:	2b00      	cmp	r3, #0
 8010430:	f000 80f6 	beq.w	8010620 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010438:	653b      	str	r3, [r7, #80]	@ 0x50
 801043a:	e002      	b.n	8010442 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801043c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1f8      	bne.n	801043c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801044a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801044c:	7a9b      	ldrb	r3, [r3, #10]
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	b29b      	uxth	r3, r3
 8010452:	f003 0304 	and.w	r3, r3, #4
 8010456:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010458:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801045a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801045c:	891b      	ldrh	r3, [r3, #8]
 801045e:	4619      	mov	r1, r3
 8010460:	8c3b      	ldrh	r3, [r7, #32]
 8010462:	440b      	add	r3, r1
 8010464:	429a      	cmp	r2, r3
 8010466:	da06      	bge.n	8010476 <tcp_write+0x116>
 8010468:	4b74      	ldr	r3, [pc, #464]	@ (801063c <tcp_write+0x2dc>)
 801046a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801046e:	4977      	ldr	r1, [pc, #476]	@ (801064c <tcp_write+0x2ec>)
 8010470:	4874      	ldr	r0, [pc, #464]	@ (8010644 <tcp_write+0x2e4>)
 8010472:	f004 fef7 	bl	8015264 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010478:	891a      	ldrh	r2, [r3, #8]
 801047a:	8c3b      	ldrh	r3, [r7, #32]
 801047c:	4413      	add	r3, r2
 801047e:	b29b      	uxth	r3, r3
 8010480:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801048c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801048e:	8a7b      	ldrh	r3, [r7, #18]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d026      	beq.n	80104e2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010494:	8a7b      	ldrh	r3, [r7, #18]
 8010496:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010498:	429a      	cmp	r2, r3
 801049a:	d206      	bcs.n	80104aa <tcp_write+0x14a>
 801049c:	4b67      	ldr	r3, [pc, #412]	@ (801063c <tcp_write+0x2dc>)
 801049e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80104a2:	496b      	ldr	r1, [pc, #428]	@ (8010650 <tcp_write+0x2f0>)
 80104a4:	4867      	ldr	r0, [pc, #412]	@ (8010644 <tcp_write+0x2e4>)
 80104a6:	f004 fedd 	bl	8015264 <iprintf>
      seg = last_unsent;
 80104aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80104ae:	8a7b      	ldrh	r3, [r7, #18]
 80104b0:	88fa      	ldrh	r2, [r7, #6]
 80104b2:	4293      	cmp	r3, r2
 80104b4:	bf28      	it	cs
 80104b6:	4613      	movcs	r3, r2
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80104bc:	4293      	cmp	r3, r2
 80104be:	bf28      	it	cs
 80104c0:	4613      	movcs	r3, r2
 80104c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80104c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80104c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104ca:	4413      	add	r3, r2
 80104cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80104d0:	8a7a      	ldrh	r2, [r7, #18]
 80104d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104d4:	1ad3      	subs	r3, r2, r3
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80104da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80104dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104de:	1ad3      	subs	r3, r2, r3
 80104e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80104e2:	8a7b      	ldrh	r3, [r7, #18]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d00b      	beq.n	8010500 <tcp_write+0x1a0>
 80104e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80104ec:	88fb      	ldrh	r3, [r7, #6]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d006      	beq.n	8010500 <tcp_write+0x1a0>
 80104f2:	4b52      	ldr	r3, [pc, #328]	@ (801063c <tcp_write+0x2dc>)
 80104f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104f8:	4956      	ldr	r1, [pc, #344]	@ (8010654 <tcp_write+0x2f4>)
 80104fa:	4852      	ldr	r0, [pc, #328]	@ (8010644 <tcp_write+0x2e4>)
 80104fc:	f004 feb2 	bl	8015264 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010500:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010504:	88fb      	ldrh	r3, [r7, #6]
 8010506:	429a      	cmp	r2, r3
 8010508:	f080 8167 	bcs.w	80107da <tcp_write+0x47a>
 801050c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801050e:	2b00      	cmp	r3, #0
 8010510:	f000 8163 	beq.w	80107da <tcp_write+0x47a>
 8010514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010516:	891b      	ldrh	r3, [r3, #8]
 8010518:	2b00      	cmp	r3, #0
 801051a:	f000 815e 	beq.w	80107da <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801051e:	88fa      	ldrh	r2, [r7, #6]
 8010520:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010524:	1ad2      	subs	r2, r2, r3
 8010526:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010528:	4293      	cmp	r3, r2
 801052a:	bfa8      	it	ge
 801052c:	4613      	movge	r3, r2
 801052e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010532:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010534:	797b      	ldrb	r3, [r7, #5]
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d027      	beq.n	801058e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801053e:	f107 0012 	add.w	r0, r7, #18
 8010542:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010544:	8bf9      	ldrh	r1, [r7, #30]
 8010546:	2301      	movs	r3, #1
 8010548:	9302      	str	r3, [sp, #8]
 801054a:	797b      	ldrb	r3, [r7, #5]
 801054c:	9301      	str	r3, [sp, #4]
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	9300      	str	r3, [sp, #0]
 8010552:	4603      	mov	r3, r0
 8010554:	2000      	movs	r0, #0
 8010556:	f7ff fe0f 	bl	8010178 <tcp_pbuf_prealloc>
 801055a:	6578      	str	r0, [r7, #84]	@ 0x54
 801055c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801055e:	2b00      	cmp	r3, #0
 8010560:	f000 8225 	beq.w	80109ae <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010566:	6858      	ldr	r0, [r3, #4]
 8010568:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	4413      	add	r3, r2
 8010570:	8bfa      	ldrh	r2, [r7, #30]
 8010572:	4619      	mov	r1, r3
 8010574:	f004 ffb9 	bl	80154ea <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010578:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801057a:	f7fb f9c3 	bl	800b904 <pbuf_clen>
 801057e:	4603      	mov	r3, r0
 8010580:	461a      	mov	r2, r3
 8010582:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010586:	4413      	add	r3, r2
 8010588:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801058c:	e041      	b.n	8010612 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801058e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	637b      	str	r3, [r7, #52]	@ 0x34
 8010594:	e002      	b.n	801059c <tcp_write+0x23c>
 8010596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	637b      	str	r3, [r7, #52]	@ 0x34
 801059c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1f8      	bne.n	8010596 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80105a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105a6:	7b1b      	ldrb	r3, [r3, #12]
 80105a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d115      	bne.n	80105dc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80105b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105b6:	8952      	ldrh	r2, [r2, #10]
 80105b8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d10d      	bne.n	80105dc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80105c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d006      	beq.n	80105d6 <tcp_write+0x276>
 80105c8:	4b1c      	ldr	r3, [pc, #112]	@ (801063c <tcp_write+0x2dc>)
 80105ca:	f240 2231 	movw	r2, #561	@ 0x231
 80105ce:	4922      	ldr	r1, [pc, #136]	@ (8010658 <tcp_write+0x2f8>)
 80105d0:	481c      	ldr	r0, [pc, #112]	@ (8010644 <tcp_write+0x2e4>)
 80105d2:	f004 fe47 	bl	8015264 <iprintf>
          extendlen = seglen;
 80105d6:	8bfb      	ldrh	r3, [r7, #30]
 80105d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80105da:	e01a      	b.n	8010612 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80105dc:	8bfb      	ldrh	r3, [r7, #30]
 80105de:	2201      	movs	r2, #1
 80105e0:	4619      	mov	r1, r3
 80105e2:	2000      	movs	r0, #0
 80105e4:	f7fa fe1c 	bl	800b220 <pbuf_alloc>
 80105e8:	6578      	str	r0, [r7, #84]	@ 0x54
 80105ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	f000 81e0 	beq.w	80109b2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80105f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	441a      	add	r2, r3
 80105fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105fc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80105fe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010600:	f7fb f980 	bl	800b904 <pbuf_clen>
 8010604:	4603      	mov	r3, r0
 8010606:	461a      	mov	r2, r3
 8010608:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801060c:	4413      	add	r3, r2
 801060e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010612:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010616:	8bfb      	ldrh	r3, [r7, #30]
 8010618:	4413      	add	r3, r2
 801061a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801061e:	e0dc      	b.n	80107da <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010626:	2b00      	cmp	r3, #0
 8010628:	f000 80d7 	beq.w	80107da <tcp_write+0x47a>
 801062c:	4b03      	ldr	r3, [pc, #12]	@ (801063c <tcp_write+0x2dc>)
 801062e:	f240 224a 	movw	r2, #586	@ 0x24a
 8010632:	490a      	ldr	r1, [pc, #40]	@ (801065c <tcp_write+0x2fc>)
 8010634:	4803      	ldr	r0, [pc, #12]	@ (8010644 <tcp_write+0x2e4>)
 8010636:	f004 fe15 	bl	8015264 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801063a:	e0ce      	b.n	80107da <tcp_write+0x47a>
 801063c:	080184a8 	.word	0x080184a8
 8010640:	08018648 	.word	0x08018648
 8010644:	080184fc 	.word	0x080184fc
 8010648:	08018660 	.word	0x08018660
 801064c:	08018694 	.word	0x08018694
 8010650:	080186ac 	.word	0x080186ac
 8010654:	080186cc 	.word	0x080186cc
 8010658:	080186ec 	.word	0x080186ec
 801065c:	08018718 	.word	0x08018718
    struct pbuf *p;
    u16_t left = len - pos;
 8010660:	88fa      	ldrh	r2, [r7, #6]
 8010662:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801066a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801066e:	b29b      	uxth	r3, r3
 8010670:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010672:	1ad3      	subs	r3, r2, r3
 8010674:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010676:	8b7a      	ldrh	r2, [r7, #26]
 8010678:	8bbb      	ldrh	r3, [r7, #28]
 801067a:	4293      	cmp	r3, r2
 801067c:	bf28      	it	cs
 801067e:	4613      	movcs	r3, r2
 8010680:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010682:	797b      	ldrb	r3, [r7, #5]
 8010684:	f003 0301 	and.w	r3, r3, #1
 8010688:	2b00      	cmp	r3, #0
 801068a:	d036      	beq.n	80106fa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801068c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010690:	b29a      	uxth	r2, r3
 8010692:	8b3b      	ldrh	r3, [r7, #24]
 8010694:	4413      	add	r3, r2
 8010696:	b299      	uxth	r1, r3
 8010698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801069a:	2b00      	cmp	r3, #0
 801069c:	bf0c      	ite	eq
 801069e:	2301      	moveq	r3, #1
 80106a0:	2300      	movne	r3, #0
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	f107 0012 	add.w	r0, r7, #18
 80106a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106aa:	9302      	str	r3, [sp, #8]
 80106ac:	797b      	ldrb	r3, [r7, #5]
 80106ae:	9301      	str	r3, [sp, #4]
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	4603      	mov	r3, r0
 80106b6:	2036      	movs	r0, #54	@ 0x36
 80106b8:	f7ff fd5e 	bl	8010178 <tcp_pbuf_prealloc>
 80106bc:	6338      	str	r0, [r7, #48]	@ 0x30
 80106be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f000 8178 	beq.w	80109b6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80106c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c8:	895b      	ldrh	r3, [r3, #10]
 80106ca:	8b3a      	ldrh	r2, [r7, #24]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d906      	bls.n	80106de <tcp_write+0x37e>
 80106d0:	4b8c      	ldr	r3, [pc, #560]	@ (8010904 <tcp_write+0x5a4>)
 80106d2:	f240 2266 	movw	r2, #614	@ 0x266
 80106d6:	498c      	ldr	r1, [pc, #560]	@ (8010908 <tcp_write+0x5a8>)
 80106d8:	488c      	ldr	r0, [pc, #560]	@ (801090c <tcp_write+0x5ac>)
 80106da:	f004 fdc3 	bl	8015264 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80106de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e0:	685a      	ldr	r2, [r3, #4]
 80106e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80106e6:	18d0      	adds	r0, r2, r3
 80106e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	4413      	add	r3, r2
 80106f0:	8b3a      	ldrh	r2, [r7, #24]
 80106f2:	4619      	mov	r1, r3
 80106f4:	f004 fef9 	bl	80154ea <memcpy>
 80106f8:	e02f      	b.n	801075a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80106fa:	8a7b      	ldrh	r3, [r7, #18]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d006      	beq.n	801070e <tcp_write+0x3ae>
 8010700:	4b80      	ldr	r3, [pc, #512]	@ (8010904 <tcp_write+0x5a4>)
 8010702:	f240 2271 	movw	r2, #625	@ 0x271
 8010706:	4982      	ldr	r1, [pc, #520]	@ (8010910 <tcp_write+0x5b0>)
 8010708:	4880      	ldr	r0, [pc, #512]	@ (801090c <tcp_write+0x5ac>)
 801070a:	f004 fdab 	bl	8015264 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801070e:	8b3b      	ldrh	r3, [r7, #24]
 8010710:	2201      	movs	r2, #1
 8010712:	4619      	mov	r1, r3
 8010714:	2036      	movs	r0, #54	@ 0x36
 8010716:	f7fa fd83 	bl	800b220 <pbuf_alloc>
 801071a:	6178      	str	r0, [r7, #20]
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	2b00      	cmp	r3, #0
 8010720:	f000 814b 	beq.w	80109ba <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010724:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	441a      	add	r2, r3
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010730:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010734:	b29b      	uxth	r3, r3
 8010736:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801073a:	4619      	mov	r1, r3
 801073c:	2036      	movs	r0, #54	@ 0x36
 801073e:	f7fa fd6f 	bl	800b220 <pbuf_alloc>
 8010742:	6338      	str	r0, [r7, #48]	@ 0x30
 8010744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010746:	2b00      	cmp	r3, #0
 8010748:	d103      	bne.n	8010752 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801074a:	6978      	ldr	r0, [r7, #20]
 801074c:	f7fb f84c 	bl	800b7e8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010750:	e136      	b.n	80109c0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010752:	6979      	ldr	r1, [r7, #20]
 8010754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010756:	f7fb f915 	bl	800b984 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801075a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801075c:	f7fb f8d2 	bl	800b904 <pbuf_clen>
 8010760:	4603      	mov	r3, r0
 8010762:	461a      	mov	r2, r3
 8010764:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010768:	4413      	add	r3, r2
 801076a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801076e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010772:	2b09      	cmp	r3, #9
 8010774:	d903      	bls.n	801077e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010776:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010778:	f7fb f836 	bl	800b7e8 <pbuf_free>
      goto memerr;
 801077c:	e120      	b.n	80109c0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010782:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010786:	441a      	add	r2, r3
 8010788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801078c:	9300      	str	r3, [sp, #0]
 801078e:	4613      	mov	r3, r2
 8010790:	2200      	movs	r2, #0
 8010792:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	f7ff fc53 	bl	8010040 <tcp_create_segment>
 801079a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801079c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f000 810d 	beq.w	80109be <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80107a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d102      	bne.n	80107b0 <tcp_write+0x450>
      queue = seg;
 80107aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80107ae:	e00c      	b.n	80107ca <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80107b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d106      	bne.n	80107c4 <tcp_write+0x464>
 80107b6:	4b53      	ldr	r3, [pc, #332]	@ (8010904 <tcp_write+0x5a4>)
 80107b8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80107bc:	4955      	ldr	r1, [pc, #340]	@ (8010914 <tcp_write+0x5b4>)
 80107be:	4853      	ldr	r0, [pc, #332]	@ (801090c <tcp_write+0x5ac>)
 80107c0:	f004 fd50 	bl	8015264 <iprintf>
      prev_seg->next = seg;
 80107c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80107c8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80107ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107cc:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80107ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80107d2:	8b3b      	ldrh	r3, [r7, #24]
 80107d4:	4413      	add	r3, r2
 80107d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80107da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80107de:	88fb      	ldrh	r3, [r7, #6]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	f4ff af3d 	bcc.w	8010660 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80107e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d02c      	beq.n	8010846 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80107ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107f2:	e01e      	b.n	8010832 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80107f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f6:	891a      	ldrh	r2, [r3, #8]
 80107f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80107fa:	4413      	add	r3, r2
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010800:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d110      	bne.n	801082c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801080a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010810:	8952      	ldrh	r2, [r2, #10]
 8010812:	4413      	add	r3, r2
 8010814:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010816:	68b9      	ldr	r1, [r7, #8]
 8010818:	4618      	mov	r0, r3
 801081a:	f004 fe66 	bl	80154ea <memcpy>
        p->len += oversize_used;
 801081e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010820:	895a      	ldrh	r2, [r3, #10]
 8010822:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010824:	4413      	add	r3, r2
 8010826:	b29a      	uxth	r2, r3
 8010828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801082c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010834:	2b00      	cmp	r3, #0
 8010836:	d1dd      	bne.n	80107f4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801083a:	891a      	ldrh	r2, [r3, #8]
 801083c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801083e:	4413      	add	r3, r2
 8010840:	b29a      	uxth	r2, r3
 8010842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010844:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010846:	8a7a      	ldrh	r2, [r7, #18]
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801084e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010850:	2b00      	cmp	r3, #0
 8010852:	d018      	beq.n	8010886 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010856:	2b00      	cmp	r3, #0
 8010858:	d106      	bne.n	8010868 <tcp_write+0x508>
 801085a:	4b2a      	ldr	r3, [pc, #168]	@ (8010904 <tcp_write+0x5a4>)
 801085c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8010860:	492d      	ldr	r1, [pc, #180]	@ (8010918 <tcp_write+0x5b8>)
 8010862:	482a      	ldr	r0, [pc, #168]	@ (801090c <tcp_write+0x5ac>)
 8010864:	f004 fcfe 	bl	8015264 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801086e:	4618      	mov	r0, r3
 8010870:	f7fb f888 	bl	800b984 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010876:	891a      	ldrh	r2, [r3, #8]
 8010878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801087a:	891b      	ldrh	r3, [r3, #8]
 801087c:	4413      	add	r3, r2
 801087e:	b29a      	uxth	r2, r3
 8010880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010882:	811a      	strh	r2, [r3, #8]
 8010884:	e037      	b.n	80108f6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010886:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010888:	2b00      	cmp	r3, #0
 801088a:	d034      	beq.n	80108f6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801088c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801088e:	2b00      	cmp	r3, #0
 8010890:	d003      	beq.n	801089a <tcp_write+0x53a>
 8010892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d106      	bne.n	80108a8 <tcp_write+0x548>
 801089a:	4b1a      	ldr	r3, [pc, #104]	@ (8010904 <tcp_write+0x5a4>)
 801089c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80108a0:	491e      	ldr	r1, [pc, #120]	@ (801091c <tcp_write+0x5bc>)
 80108a2:	481a      	ldr	r0, [pc, #104]	@ (801090c <tcp_write+0x5ac>)
 80108a4:	f004 fcde 	bl	8015264 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108ae:	e009      	b.n	80108c4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80108b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b2:	891a      	ldrh	r2, [r3, #8]
 80108b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108b6:	4413      	add	r3, r2
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108bc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d1f1      	bne.n	80108b0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80108cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ce:	891a      	ldrh	r2, [r3, #8]
 80108d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108d2:	4413      	add	r3, r2
 80108d4:	b29a      	uxth	r2, r3
 80108d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80108da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108dc:	895a      	ldrh	r2, [r3, #10]
 80108de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108e0:	4413      	add	r3, r2
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80108e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ea:	891a      	ldrh	r2, [r3, #8]
 80108ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80108ee:	4413      	add	r3, r2
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108f4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80108f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d111      	bne.n	8010920 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010900:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010902:	e010      	b.n	8010926 <tcp_write+0x5c6>
 8010904:	080184a8 	.word	0x080184a8
 8010908:	08018748 	.word	0x08018748
 801090c:	080184fc 	.word	0x080184fc
 8010910:	08018788 	.word	0x08018788
 8010914:	08018798 	.word	0x08018798
 8010918:	080187ac 	.word	0x080187ac
 801091c:	080187e4 	.word	0x080187e4
  } else {
    last_unsent->next = queue;
 8010920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010924:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801092a:	88fb      	ldrh	r3, [r7, #6]
 801092c:	441a      	add	r2, r3
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010938:	88fb      	ldrh	r3, [r7, #6]
 801093a:	1ad3      	subs	r3, r2, r3
 801093c:	b29a      	uxth	r2, r3
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801094a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00e      	beq.n	8010976 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10a      	bne.n	8010976 <tcp_write+0x616>
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010964:	2b00      	cmp	r3, #0
 8010966:	d106      	bne.n	8010976 <tcp_write+0x616>
 8010968:	4b2c      	ldr	r3, [pc, #176]	@ (8010a1c <tcp_write+0x6bc>)
 801096a:	f240 3212 	movw	r2, #786	@ 0x312
 801096e:	492c      	ldr	r1, [pc, #176]	@ (8010a20 <tcp_write+0x6c0>)
 8010970:	482c      	ldr	r0, [pc, #176]	@ (8010a24 <tcp_write+0x6c4>)
 8010972:	f004 fc77 	bl	8015264 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010978:	2b00      	cmp	r3, #0
 801097a:	d016      	beq.n	80109aa <tcp_write+0x64a>
 801097c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801097e:	68db      	ldr	r3, [r3, #12]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d012      	beq.n	80109aa <tcp_write+0x64a>
 8010984:	797b      	ldrb	r3, [r7, #5]
 8010986:	f003 0302 	and.w	r3, r3, #2
 801098a:	2b00      	cmp	r3, #0
 801098c:	d10d      	bne.n	80109aa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801098e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010990:	68db      	ldr	r3, [r3, #12]
 8010992:	899b      	ldrh	r3, [r3, #12]
 8010994:	b29c      	uxth	r4, r3
 8010996:	2008      	movs	r0, #8
 8010998:	f7f9 fb38 	bl	800a00c <lwip_htons>
 801099c:	4603      	mov	r3, r0
 801099e:	461a      	mov	r2, r3
 80109a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	4322      	orrs	r2, r4
 80109a6:	b292      	uxth	r2, r2
 80109a8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80109aa:	2300      	movs	r3, #0
 80109ac:	e031      	b.n	8010a12 <tcp_write+0x6b2>
          goto memerr;
 80109ae:	bf00      	nop
 80109b0:	e006      	b.n	80109c0 <tcp_write+0x660>
            goto memerr;
 80109b2:	bf00      	nop
 80109b4:	e004      	b.n	80109c0 <tcp_write+0x660>
        goto memerr;
 80109b6:	bf00      	nop
 80109b8:	e002      	b.n	80109c0 <tcp_write+0x660>
        goto memerr;
 80109ba:	bf00      	nop
 80109bc:	e000      	b.n	80109c0 <tcp_write+0x660>
      goto memerr;
 80109be:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	8b5b      	ldrh	r3, [r3, #26]
 80109c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80109ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d002      	beq.n	80109da <tcp_write+0x67a>
    pbuf_free(concat_p);
 80109d4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80109d6:	f7fa ff07 	bl	800b7e8 <pbuf_free>
  }
  if (queue != NULL) {
 80109da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80109e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80109e2:	f7fc fb71 	bl	800d0c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00e      	beq.n	8010a0e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d10a      	bne.n	8010a0e <tcp_write+0x6ae>
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d106      	bne.n	8010a0e <tcp_write+0x6ae>
 8010a00:	4b06      	ldr	r3, [pc, #24]	@ (8010a1c <tcp_write+0x6bc>)
 8010a02:	f240 3227 	movw	r2, #807	@ 0x327
 8010a06:	4906      	ldr	r1, [pc, #24]	@ (8010a20 <tcp_write+0x6c0>)
 8010a08:	4806      	ldr	r0, [pc, #24]	@ (8010a24 <tcp_write+0x6c4>)
 8010a0a:	f004 fc2b 	bl	8015264 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	375c      	adds	r7, #92	@ 0x5c
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd90      	pop	{r4, r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	080184a8 	.word	0x080184a8
 8010a20:	0801881c 	.word	0x0801881c
 8010a24:	080184fc 	.word	0x080184fc

08010a28 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010a28:	b590      	push	{r4, r7, lr}
 8010a2a:	b08b      	sub	sp, #44	@ 0x2c
 8010a2c:	af02      	add	r7, sp, #8
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	460b      	mov	r3, r1
 8010a32:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010a34:	2300      	movs	r3, #0
 8010a36:	61fb      	str	r3, [r7, #28]
 8010a38:	2300      	movs	r3, #0
 8010a3a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d106      	bne.n	8010a54 <tcp_split_unsent_seg+0x2c>
 8010a46:	4b95      	ldr	r3, [pc, #596]	@ (8010c9c <tcp_split_unsent_seg+0x274>)
 8010a48:	f240 324b 	movw	r2, #843	@ 0x34b
 8010a4c:	4994      	ldr	r1, [pc, #592]	@ (8010ca0 <tcp_split_unsent_seg+0x278>)
 8010a4e:	4895      	ldr	r0, [pc, #596]	@ (8010ca4 <tcp_split_unsent_seg+0x27c>)
 8010a50:	f004 fc08 	bl	8015264 <iprintf>

  useg = pcb->unsent;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a58:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d102      	bne.n	8010a66 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010a60:	f04f 33ff 	mov.w	r3, #4294967295
 8010a64:	e116      	b.n	8010c94 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010a66:	887b      	ldrh	r3, [r7, #2]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d109      	bne.n	8010a80 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010a6c:	4b8b      	ldr	r3, [pc, #556]	@ (8010c9c <tcp_split_unsent_seg+0x274>)
 8010a6e:	f240 3253 	movw	r2, #851	@ 0x353
 8010a72:	498d      	ldr	r1, [pc, #564]	@ (8010ca8 <tcp_split_unsent_seg+0x280>)
 8010a74:	488b      	ldr	r0, [pc, #556]	@ (8010ca4 <tcp_split_unsent_seg+0x27c>)
 8010a76:	f004 fbf5 	bl	8015264 <iprintf>
    return ERR_VAL;
 8010a7a:	f06f 0305 	mvn.w	r3, #5
 8010a7e:	e109      	b.n	8010c94 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	891b      	ldrh	r3, [r3, #8]
 8010a84:	887a      	ldrh	r2, [r7, #2]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d301      	bcc.n	8010a8e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e102      	b.n	8010c94 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a92:	887a      	ldrh	r2, [r7, #2]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d906      	bls.n	8010aa6 <tcp_split_unsent_seg+0x7e>
 8010a98:	4b80      	ldr	r3, [pc, #512]	@ (8010c9c <tcp_split_unsent_seg+0x274>)
 8010a9a:	f240 325b 	movw	r2, #859	@ 0x35b
 8010a9e:	4983      	ldr	r1, [pc, #524]	@ (8010cac <tcp_split_unsent_seg+0x284>)
 8010aa0:	4880      	ldr	r0, [pc, #512]	@ (8010ca4 <tcp_split_unsent_seg+0x27c>)
 8010aa2:	f004 fbdf 	bl	8015264 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	891b      	ldrh	r3, [r3, #8]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d106      	bne.n	8010abc <tcp_split_unsent_seg+0x94>
 8010aae:	4b7b      	ldr	r3, [pc, #492]	@ (8010c9c <tcp_split_unsent_seg+0x274>)
 8010ab0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010ab4:	497e      	ldr	r1, [pc, #504]	@ (8010cb0 <tcp_split_unsent_seg+0x288>)
 8010ab6:	487b      	ldr	r0, [pc, #492]	@ (8010ca4 <tcp_split_unsent_seg+0x27c>)
 8010ab8:	f004 fbd4 	bl	8015264 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	7a9b      	ldrb	r3, [r3, #10]
 8010ac0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
 8010ac4:	009b      	lsls	r3, r3, #2
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	f003 0304 	and.w	r3, r3, #4
 8010acc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	891a      	ldrh	r2, [r3, #8]
 8010ad2:	887b      	ldrh	r3, [r7, #2]
 8010ad4:	1ad3      	subs	r3, r2, r3
 8010ad6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010ad8:	7bbb      	ldrb	r3, [r7, #14]
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	89bb      	ldrh	r3, [r7, #12]
 8010ade:	4413      	add	r3, r2
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	2036      	movs	r0, #54	@ 0x36
 8010aea:	f7fa fb99 	bl	800b220 <pbuf_alloc>
 8010aee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f000 80b7 	beq.w	8010c66 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	891a      	ldrh	r2, [r3, #8]
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	891b      	ldrh	r3, [r3, #8]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	887b      	ldrh	r3, [r7, #2]
 8010b08:	4413      	add	r3, r2
 8010b0a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	6858      	ldr	r0, [r3, #4]
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	685a      	ldr	r2, [r3, #4]
 8010b14:	7bbb      	ldrb	r3, [r7, #14]
 8010b16:	18d1      	adds	r1, r2, r3
 8010b18:	897b      	ldrh	r3, [r7, #10]
 8010b1a:	89ba      	ldrh	r2, [r7, #12]
 8010b1c:	f7fb f85a 	bl	800bbd4 <pbuf_copy_partial>
 8010b20:	4603      	mov	r3, r0
 8010b22:	461a      	mov	r2, r3
 8010b24:	89bb      	ldrh	r3, [r7, #12]
 8010b26:	4293      	cmp	r3, r2
 8010b28:	f040 809f 	bne.w	8010c6a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	899b      	ldrh	r3, [r3, #12]
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7f9 fa69 	bl	800a00c <lwip_htons>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b42:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010b44:	2300      	movs	r3, #0
 8010b46:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010b48:	7efb      	ldrb	r3, [r7, #27]
 8010b4a:	f003 0308 	and.w	r3, r3, #8
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d007      	beq.n	8010b62 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010b52:	7efb      	ldrb	r3, [r7, #27]
 8010b54:	f023 0308 	bic.w	r3, r3, #8
 8010b58:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010b5a:	7ebb      	ldrb	r3, [r7, #26]
 8010b5c:	f043 0308 	orr.w	r3, r3, #8
 8010b60:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010b62:	7efb      	ldrb	r3, [r7, #27]
 8010b64:	f003 0301 	and.w	r3, r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d007      	beq.n	8010b7c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010b6c:	7efb      	ldrb	r3, [r7, #27]
 8010b6e:	f023 0301 	bic.w	r3, r3, #1
 8010b72:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010b74:	7ebb      	ldrb	r3, [r7, #26]
 8010b76:	f043 0301 	orr.w	r3, r3, #1
 8010b7a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7f9 fa57 	bl	800a036 <lwip_htonl>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	887b      	ldrh	r3, [r7, #2]
 8010b8c:	18d1      	adds	r1, r2, r3
 8010b8e:	7eba      	ldrb	r2, [r7, #26]
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
 8010b92:	9300      	str	r3, [sp, #0]
 8010b94:	460b      	mov	r3, r1
 8010b96:	6939      	ldr	r1, [r7, #16]
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7ff fa51 	bl	8010040 <tcp_create_segment>
 8010b9e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d063      	beq.n	8010c6e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7fa feaa 	bl	800b904 <pbuf_clen>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010bba:	1a9b      	subs	r3, r3, r2
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	6858      	ldr	r0, [r3, #4]
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	891a      	ldrh	r2, [r3, #8]
 8010bce:	89bb      	ldrh	r3, [r7, #12]
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	f7fa fc81 	bl	800b4dc <pbuf_realloc>
  useg->len -= remainder;
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	891a      	ldrh	r2, [r3, #8]
 8010bde:	89bb      	ldrh	r3, [r7, #12]
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	b29a      	uxth	r2, r3
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	899b      	ldrh	r3, [r3, #12]
 8010bee:	b29c      	uxth	r4, r3
 8010bf0:	7efb      	ldrb	r3, [r7, #27]
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7f9 fa09 	bl	800a00c <lwip_htons>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	4322      	orrs	r2, r4
 8010c04:	b292      	uxth	r2, r2
 8010c06:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fa fe79 	bl	800b904 <pbuf_clen>
 8010c12:	4603      	mov	r3, r0
 8010c14:	461a      	mov	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c1c:	4413      	add	r3, r2
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fa fe6a 	bl	800b904 <pbuf_clen>
 8010c30:	4603      	mov	r3, r0
 8010c32:	461a      	mov	r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c3a:	4413      	add	r3, r2
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	681a      	ldr	r2, [r3, #0]
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	69fa      	ldr	r2, [r7, #28]
 8010c50:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d103      	bne.n	8010c62 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010c62:	2300      	movs	r3, #0
 8010c64:	e016      	b.n	8010c94 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010c66:	bf00      	nop
 8010c68:	e002      	b.n	8010c70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010c6a:	bf00      	nop
 8010c6c:	e000      	b.n	8010c70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010c6e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010c70:	69fb      	ldr	r3, [r7, #28]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d006      	beq.n	8010c84 <tcp_split_unsent_seg+0x25c>
 8010c76:	4b09      	ldr	r3, [pc, #36]	@ (8010c9c <tcp_split_unsent_seg+0x274>)
 8010c78:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010c7c:	490d      	ldr	r1, [pc, #52]	@ (8010cb4 <tcp_split_unsent_seg+0x28c>)
 8010c7e:	4809      	ldr	r0, [pc, #36]	@ (8010ca4 <tcp_split_unsent_seg+0x27c>)
 8010c80:	f004 faf0 	bl	8015264 <iprintf>
  if (p != NULL) {
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d002      	beq.n	8010c90 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010c8a:	6938      	ldr	r0, [r7, #16]
 8010c8c:	f7fa fdac 	bl	800b7e8 <pbuf_free>
  }

  return ERR_MEM;
 8010c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3724      	adds	r7, #36	@ 0x24
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd90      	pop	{r4, r7, pc}
 8010c9c:	080184a8 	.word	0x080184a8
 8010ca0:	0801883c 	.word	0x0801883c
 8010ca4:	080184fc 	.word	0x080184fc
 8010ca8:	08018860 	.word	0x08018860
 8010cac:	08018884 	.word	0x08018884
 8010cb0:	08018894 	.word	0x08018894
 8010cb4:	080188a4 	.word	0x080188a4

08010cb8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010cb8:	b590      	push	{r4, r7, lr}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d106      	bne.n	8010cd4 <tcp_send_fin+0x1c>
 8010cc6:	4b21      	ldr	r3, [pc, #132]	@ (8010d4c <tcp_send_fin+0x94>)
 8010cc8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010ccc:	4920      	ldr	r1, [pc, #128]	@ (8010d50 <tcp_send_fin+0x98>)
 8010cce:	4821      	ldr	r0, [pc, #132]	@ (8010d54 <tcp_send_fin+0x9c>)
 8010cd0:	f004 fac8 	bl	8015264 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d02e      	beq.n	8010d3a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ce0:	60fb      	str	r3, [r7, #12]
 8010ce2:	e002      	b.n	8010cea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d1f8      	bne.n	8010ce4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	899b      	ldrh	r3, [r3, #12]
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f9 f986 	bl	800a00c <lwip_htons>
 8010d00:	4603      	mov	r3, r0
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	f003 0307 	and.w	r3, r3, #7
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d116      	bne.n	8010d3a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	899b      	ldrh	r3, [r3, #12]
 8010d12:	b29c      	uxth	r4, r3
 8010d14:	2001      	movs	r0, #1
 8010d16:	f7f9 f979 	bl	800a00c <lwip_htons>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	4322      	orrs	r2, r4
 8010d24:	b292      	uxth	r2, r2
 8010d26:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	8b5b      	ldrh	r3, [r3, #26]
 8010d2c:	f043 0320 	orr.w	r3, r3, #32
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010d36:	2300      	movs	r3, #0
 8010d38:	e004      	b.n	8010d44 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010d3a:	2101      	movs	r1, #1
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 f80b 	bl	8010d58 <tcp_enqueue_flags>
 8010d42:	4603      	mov	r3, r0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3714      	adds	r7, #20
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd90      	pop	{r4, r7, pc}
 8010d4c:	080184a8 	.word	0x080184a8
 8010d50:	080188b0 	.word	0x080188b0
 8010d54:	080184fc 	.word	0x080184fc

08010d58 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b08a      	sub	sp, #40	@ 0x28
 8010d5c:	af02      	add	r7, sp, #8
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	460b      	mov	r3, r1
 8010d62:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010d6c:	78fb      	ldrb	r3, [r7, #3]
 8010d6e:	f003 0303 	and.w	r3, r3, #3
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d106      	bne.n	8010d84 <tcp_enqueue_flags+0x2c>
 8010d76:	4b67      	ldr	r3, [pc, #412]	@ (8010f14 <tcp_enqueue_flags+0x1bc>)
 8010d78:	f240 4211 	movw	r2, #1041	@ 0x411
 8010d7c:	4966      	ldr	r1, [pc, #408]	@ (8010f18 <tcp_enqueue_flags+0x1c0>)
 8010d7e:	4867      	ldr	r0, [pc, #412]	@ (8010f1c <tcp_enqueue_flags+0x1c4>)
 8010d80:	f004 fa70 	bl	8015264 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d106      	bne.n	8010d98 <tcp_enqueue_flags+0x40>
 8010d8a:	4b62      	ldr	r3, [pc, #392]	@ (8010f14 <tcp_enqueue_flags+0x1bc>)
 8010d8c:	f240 4213 	movw	r2, #1043	@ 0x413
 8010d90:	4963      	ldr	r1, [pc, #396]	@ (8010f20 <tcp_enqueue_flags+0x1c8>)
 8010d92:	4862      	ldr	r0, [pc, #392]	@ (8010f1c <tcp_enqueue_flags+0x1c4>)
 8010d94:	f004 fa66 	bl	8015264 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010d98:	78fb      	ldrb	r3, [r7, #3]
 8010d9a:	f003 0302 	and.w	r3, r3, #2
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d001      	beq.n	8010da6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010da2:	2301      	movs	r3, #1
 8010da4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010da6:	7ffb      	ldrb	r3, [r7, #31]
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	f003 0304 	and.w	r3, r3, #4
 8010db0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010db2:	7dfb      	ldrb	r3, [r7, #23]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010dba:	4619      	mov	r1, r3
 8010dbc:	2036      	movs	r0, #54	@ 0x36
 8010dbe:	f7fa fa2f 	bl	800b220 <pbuf_alloc>
 8010dc2:	6138      	str	r0, [r7, #16]
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d109      	bne.n	8010dde <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	8b5b      	ldrh	r3, [r3, #26]
 8010dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dd2:	b29a      	uxth	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010ddc:	e095      	b.n	8010f0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	895a      	ldrh	r2, [r3, #10]
 8010de2:	7dfb      	ldrb	r3, [r7, #23]
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d206      	bcs.n	8010df8 <tcp_enqueue_flags+0xa0>
 8010dea:	4b4a      	ldr	r3, [pc, #296]	@ (8010f14 <tcp_enqueue_flags+0x1bc>)
 8010dec:	f240 4239 	movw	r2, #1081	@ 0x439
 8010df0:	494c      	ldr	r1, [pc, #304]	@ (8010f24 <tcp_enqueue_flags+0x1cc>)
 8010df2:	484a      	ldr	r0, [pc, #296]	@ (8010f1c <tcp_enqueue_flags+0x1c4>)
 8010df4:	f004 fa36 	bl	8015264 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010dfc:	78fa      	ldrb	r2, [r7, #3]
 8010dfe:	7ffb      	ldrb	r3, [r7, #31]
 8010e00:	9300      	str	r3, [sp, #0]
 8010e02:	460b      	mov	r3, r1
 8010e04:	6939      	ldr	r1, [r7, #16]
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f7ff f91a 	bl	8010040 <tcp_create_segment>
 8010e0c:	60f8      	str	r0, [r7, #12]
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d109      	bne.n	8010e28 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	8b5b      	ldrh	r3, [r3, #26]
 8010e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e22:	f04f 33ff 	mov.w	r3, #4294967295
 8010e26:	e070      	b.n	8010f0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	f003 0303 	and.w	r3, r3, #3
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d006      	beq.n	8010e42 <tcp_enqueue_flags+0xea>
 8010e34:	4b37      	ldr	r3, [pc, #220]	@ (8010f14 <tcp_enqueue_flags+0x1bc>)
 8010e36:	f240 4242 	movw	r2, #1090	@ 0x442
 8010e3a:	493b      	ldr	r1, [pc, #236]	@ (8010f28 <tcp_enqueue_flags+0x1d0>)
 8010e3c:	4837      	ldr	r0, [pc, #220]	@ (8010f1c <tcp_enqueue_flags+0x1c4>)
 8010e3e:	f004 fa11 	bl	8015264 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	891b      	ldrh	r3, [r3, #8]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d006      	beq.n	8010e58 <tcp_enqueue_flags+0x100>
 8010e4a:	4b32      	ldr	r3, [pc, #200]	@ (8010f14 <tcp_enqueue_flags+0x1bc>)
 8010e4c:	f240 4243 	movw	r2, #1091	@ 0x443
 8010e50:	4936      	ldr	r1, [pc, #216]	@ (8010f2c <tcp_enqueue_flags+0x1d4>)
 8010e52:	4832      	ldr	r0, [pc, #200]	@ (8010f1c <tcp_enqueue_flags+0x1c4>)
 8010e54:	f004 fa06 	bl	8015264 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d103      	bne.n	8010e68 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	68fa      	ldr	r2, [r7, #12]
 8010e64:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010e66:	e00d      	b.n	8010e84 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e6c:	61bb      	str	r3, [r7, #24]
 8010e6e:	e002      	b.n	8010e76 <tcp_enqueue_flags+0x11e>
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	61bb      	str	r3, [r7, #24]
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d1f8      	bne.n	8010e70 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	68fa      	ldr	r2, [r7, #12]
 8010e82:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010e8c:	78fb      	ldrb	r3, [r7, #3]
 8010e8e:	f003 0302 	and.w	r3, r3, #2
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d104      	bne.n	8010ea0 <tcp_enqueue_flags+0x148>
 8010e96:	78fb      	ldrb	r3, [r7, #3]
 8010e98:	f003 0301 	and.w	r3, r3, #1
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d004      	beq.n	8010eaa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ea4:	1c5a      	adds	r2, r3, #1
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010eaa:	78fb      	ldrb	r3, [r7, #3]
 8010eac:	f003 0301 	and.w	r3, r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d006      	beq.n	8010ec2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	8b5b      	ldrh	r3, [r3, #26]
 8010eb8:	f043 0320 	orr.w	r3, r3, #32
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fa fd1c 	bl	800b904 <pbuf_clen>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	461a      	mov	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ed6:	4413      	add	r3, r2
 8010ed8:	b29a      	uxth	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00e      	beq.n	8010f08 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d10a      	bne.n	8010f08 <tcp_enqueue_flags+0x1b0>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d106      	bne.n	8010f08 <tcp_enqueue_flags+0x1b0>
 8010efa:	4b06      	ldr	r3, [pc, #24]	@ (8010f14 <tcp_enqueue_flags+0x1bc>)
 8010efc:	f240 4265 	movw	r2, #1125	@ 0x465
 8010f00:	490b      	ldr	r1, [pc, #44]	@ (8010f30 <tcp_enqueue_flags+0x1d8>)
 8010f02:	4806      	ldr	r0, [pc, #24]	@ (8010f1c <tcp_enqueue_flags+0x1c4>)
 8010f04:	f004 f9ae 	bl	8015264 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010f08:	2300      	movs	r3, #0
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3720      	adds	r7, #32
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	080184a8 	.word	0x080184a8
 8010f18:	080188cc 	.word	0x080188cc
 8010f1c:	080184fc 	.word	0x080184fc
 8010f20:	08018924 	.word	0x08018924
 8010f24:	08018944 	.word	0x08018944
 8010f28:	08018980 	.word	0x08018980
 8010f2c:	08018998 	.word	0x08018998
 8010f30:	080189c4 	.word	0x080189c4

08010f34 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010f34:	b5b0      	push	{r4, r5, r7, lr}
 8010f36:	b08a      	sub	sp, #40	@ 0x28
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d106      	bne.n	8010f50 <tcp_output+0x1c>
 8010f42:	4b8a      	ldr	r3, [pc, #552]	@ (801116c <tcp_output+0x238>)
 8010f44:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010f48:	4989      	ldr	r1, [pc, #548]	@ (8011170 <tcp_output+0x23c>)
 8010f4a:	488a      	ldr	r0, [pc, #552]	@ (8011174 <tcp_output+0x240>)
 8010f4c:	f004 f98a 	bl	8015264 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	7d1b      	ldrb	r3, [r3, #20]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d106      	bne.n	8010f66 <tcp_output+0x32>
 8010f58:	4b84      	ldr	r3, [pc, #528]	@ (801116c <tcp_output+0x238>)
 8010f5a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010f5e:	4986      	ldr	r1, [pc, #536]	@ (8011178 <tcp_output+0x244>)
 8010f60:	4884      	ldr	r0, [pc, #528]	@ (8011174 <tcp_output+0x240>)
 8010f62:	f004 f97f 	bl	8015264 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010f66:	4b85      	ldr	r3, [pc, #532]	@ (801117c <tcp_output+0x248>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d101      	bne.n	8010f74 <tcp_output+0x40>
    return ERR_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	e1ce      	b.n	8011312 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f80:	4293      	cmp	r3, r2
 8010f82:	bf28      	it	cs
 8010f84:	4613      	movcs	r3, r2
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d10b      	bne.n	8010fae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	8b5b      	ldrh	r3, [r3, #26]
 8010f9a:	f003 0302 	and.w	r3, r3, #2
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f000 81aa 	beq.w	80112f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f000 fdcb 	bl	8011b40 <tcp_send_empty_ack>
 8010faa:	4603      	mov	r3, r0
 8010fac:	e1b1      	b.n	8011312 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010fae:	6879      	ldr	r1, [r7, #4]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	3304      	adds	r3, #4
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f7ff f826 	bl	8010008 <tcp_route>
 8010fbc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d102      	bne.n	8010fca <tcp_output+0x96>
    return ERR_RTE;
 8010fc4:	f06f 0303 	mvn.w	r3, #3
 8010fc8:	e1a3      	b.n	8011312 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d003      	beq.n	8010fd8 <tcp_output+0xa4>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d111      	bne.n	8010ffc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d002      	beq.n	8010fe4 <tcp_output+0xb0>
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	3304      	adds	r3, #4
 8010fe2:	e000      	b.n	8010fe6 <tcp_output+0xb2>
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d102      	bne.n	8010ff4 <tcp_output+0xc0>
      return ERR_RTE;
 8010fee:	f06f 0303 	mvn.w	r3, #3
 8010ff2:	e18e      	b.n	8011312 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	4618      	mov	r0, r3
 8011004:	f7f9 f817 	bl	800a036 <lwip_htonl>
 8011008:	4602      	mov	r2, r0
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801100e:	1ad3      	subs	r3, r2, r3
 8011010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011012:	8912      	ldrh	r2, [r2, #8]
 8011014:	4413      	add	r3, r2
 8011016:	69ba      	ldr	r2, [r7, #24]
 8011018:	429a      	cmp	r2, r3
 801101a:	d227      	bcs.n	801106c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011022:	461a      	mov	r2, r3
 8011024:	69bb      	ldr	r3, [r7, #24]
 8011026:	4293      	cmp	r3, r2
 8011028:	d114      	bne.n	8011054 <tcp_output+0x120>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801102e:	2b00      	cmp	r3, #0
 8011030:	d110      	bne.n	8011054 <tcp_output+0x120>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011038:	2b00      	cmp	r3, #0
 801103a:	d10b      	bne.n	8011054 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2200      	movs	r2, #0
 8011040:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2201      	movs	r2, #1
 8011048:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	8b5b      	ldrh	r3, [r3, #26]
 8011058:	f003 0302 	and.w	r3, r3, #2
 801105c:	2b00      	cmp	r3, #0
 801105e:	f000 814d 	beq.w	80112fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 fd6c 	bl	8011b40 <tcp_send_empty_ack>
 8011068:	4603      	mov	r3, r0
 801106a:	e152      	b.n	8011312 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011078:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801107a:	6a3b      	ldr	r3, [r7, #32]
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 811c 	beq.w	80112ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011082:	e002      	b.n	801108a <tcp_output+0x156>
 8011084:	6a3b      	ldr	r3, [r7, #32]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	623b      	str	r3, [r7, #32]
 801108a:	6a3b      	ldr	r3, [r7, #32]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1f8      	bne.n	8011084 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011092:	e112      	b.n	80112ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	899b      	ldrh	r3, [r3, #12]
 801109a:	b29b      	uxth	r3, r3
 801109c:	4618      	mov	r0, r3
 801109e:	f7f8 ffb5 	bl	800a00c <lwip_htons>
 80110a2:	4603      	mov	r3, r0
 80110a4:	b2db      	uxtb	r3, r3
 80110a6:	f003 0304 	and.w	r3, r3, #4
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d006      	beq.n	80110bc <tcp_output+0x188>
 80110ae:	4b2f      	ldr	r3, [pc, #188]	@ (801116c <tcp_output+0x238>)
 80110b0:	f240 5236 	movw	r2, #1334	@ 0x536
 80110b4:	4932      	ldr	r1, [pc, #200]	@ (8011180 <tcp_output+0x24c>)
 80110b6:	482f      	ldr	r0, [pc, #188]	@ (8011174 <tcp_output+0x240>)
 80110b8:	f004 f8d4 	bl	8015264 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d01f      	beq.n	8011104 <tcp_output+0x1d0>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8b5b      	ldrh	r3, [r3, #26]
 80110c8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d119      	bne.n	8011104 <tcp_output+0x1d0>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d00b      	beq.n	80110f0 <tcp_output+0x1bc>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d110      	bne.n	8011104 <tcp_output+0x1d0>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110e6:	891a      	ldrh	r2, [r3, #8]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d209      	bcs.n	8011104 <tcp_output+0x1d0>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d004      	beq.n	8011104 <tcp_output+0x1d0>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011100:	2b08      	cmp	r3, #8
 8011102:	d901      	bls.n	8011108 <tcp_output+0x1d4>
 8011104:	2301      	movs	r3, #1
 8011106:	e000      	b.n	801110a <tcp_output+0x1d6>
 8011108:	2300      	movs	r3, #0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d106      	bne.n	801111c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	8b5b      	ldrh	r3, [r3, #26]
 8011112:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011116:	2b00      	cmp	r3, #0
 8011118:	f000 80e4 	beq.w	80112e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	7d1b      	ldrb	r3, [r3, #20]
 8011120:	2b02      	cmp	r3, #2
 8011122:	d00d      	beq.n	8011140 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	899b      	ldrh	r3, [r3, #12]
 801112a:	b29c      	uxth	r4, r3
 801112c:	2010      	movs	r0, #16
 801112e:	f7f8 ff6d 	bl	800a00c <lwip_htons>
 8011132:	4603      	mov	r3, r0
 8011134:	461a      	mov	r2, r3
 8011136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	4322      	orrs	r2, r4
 801113c:	b292      	uxth	r2, r2
 801113e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011140:	697a      	ldr	r2, [r7, #20]
 8011142:	6879      	ldr	r1, [r7, #4]
 8011144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011146:	f000 f909 	bl	801135c <tcp_output_segment>
 801114a:	4603      	mov	r3, r0
 801114c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d016      	beq.n	8011184 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	8b5b      	ldrh	r3, [r3, #26]
 801115a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801115e:	b29a      	uxth	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	835a      	strh	r2, [r3, #26]
      return err;
 8011164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011168:	e0d3      	b.n	8011312 <tcp_output+0x3de>
 801116a:	bf00      	nop
 801116c:	080184a8 	.word	0x080184a8
 8011170:	080189ec 	.word	0x080189ec
 8011174:	080184fc 	.word	0x080184fc
 8011178:	08018a04 	.word	0x08018a04
 801117c:	2000beb4 	.word	0x2000beb4
 8011180:	08018a2c 	.word	0x08018a2c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	7d1b      	ldrb	r3, [r3, #20]
 8011190:	2b02      	cmp	r3, #2
 8011192:	d006      	beq.n	80111a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	8b5b      	ldrh	r3, [r3, #26]
 8011198:	f023 0303 	bic.w	r3, r3, #3
 801119c:	b29a      	uxth	r2, r3
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80111a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7f8 ff44 	bl	800a036 <lwip_htonl>
 80111ae:	4604      	mov	r4, r0
 80111b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b2:	891b      	ldrh	r3, [r3, #8]
 80111b4:	461d      	mov	r5, r3
 80111b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	899b      	ldrh	r3, [r3, #12]
 80111bc:	b29b      	uxth	r3, r3
 80111be:	4618      	mov	r0, r3
 80111c0:	f7f8 ff24 	bl	800a00c <lwip_htons>
 80111c4:	4603      	mov	r3, r0
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	f003 0303 	and.w	r3, r3, #3
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d001      	beq.n	80111d4 <tcp_output+0x2a0>
 80111d0:	2301      	movs	r3, #1
 80111d2:	e000      	b.n	80111d6 <tcp_output+0x2a2>
 80111d4:	2300      	movs	r3, #0
 80111d6:	442b      	add	r3, r5
 80111d8:	4423      	add	r3, r4
 80111da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	da02      	bge.n	80111ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	68ba      	ldr	r2, [r7, #8]
 80111ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80111ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f0:	891b      	ldrh	r3, [r3, #8]
 80111f2:	461c      	mov	r4, r3
 80111f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	899b      	ldrh	r3, [r3, #12]
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7f8 ff05 	bl	800a00c <lwip_htons>
 8011202:	4603      	mov	r3, r0
 8011204:	b2db      	uxtb	r3, r3
 8011206:	f003 0303 	and.w	r3, r3, #3
 801120a:	2b00      	cmp	r3, #0
 801120c:	d001      	beq.n	8011212 <tcp_output+0x2de>
 801120e:	2301      	movs	r3, #1
 8011210:	e000      	b.n	8011214 <tcp_output+0x2e0>
 8011212:	2300      	movs	r3, #0
 8011214:	4423      	add	r3, r4
 8011216:	2b00      	cmp	r3, #0
 8011218:	d049      	beq.n	80112ae <tcp_output+0x37a>
      seg->next = NULL;
 801121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801121c:	2200      	movs	r2, #0
 801121e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011224:	2b00      	cmp	r3, #0
 8011226:	d105      	bne.n	8011234 <tcp_output+0x300>
        pcb->unacked = seg;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801122c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011230:	623b      	str	r3, [r7, #32]
 8011232:	e03f      	b.n	80112b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	4618      	mov	r0, r3
 801123c:	f7f8 fefb 	bl	800a036 <lwip_htonl>
 8011240:	4604      	mov	r4, r0
 8011242:	6a3b      	ldr	r3, [r7, #32]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	4618      	mov	r0, r3
 801124a:	f7f8 fef4 	bl	800a036 <lwip_htonl>
 801124e:	4603      	mov	r3, r0
 8011250:	1ae3      	subs	r3, r4, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	da24      	bge.n	80112a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	3370      	adds	r3, #112	@ 0x70
 801125a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801125c:	e002      	b.n	8011264 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801125e:	69fb      	ldr	r3, [r7, #28]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d011      	beq.n	8011290 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	685b      	ldr	r3, [r3, #4]
 8011274:	4618      	mov	r0, r3
 8011276:	f7f8 fede 	bl	800a036 <lwip_htonl>
 801127a:	4604      	mov	r4, r0
 801127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	4618      	mov	r0, r3
 8011284:	f7f8 fed7 	bl	800a036 <lwip_htonl>
 8011288:	4603      	mov	r3, r0
 801128a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801128c:	2b00      	cmp	r3, #0
 801128e:	dbe6      	blt.n	801125e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011290:	69fb      	ldr	r3, [r7, #28]
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011296:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011298:	69fb      	ldr	r3, [r7, #28]
 801129a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801129c:	601a      	str	r2, [r3, #0]
 801129e:	e009      	b.n	80112b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80112a0:	6a3b      	ldr	r3, [r7, #32]
 80112a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80112a6:	6a3b      	ldr	r3, [r7, #32]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	623b      	str	r3, [r7, #32]
 80112ac:	e002      	b.n	80112b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80112ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112b0:	f7fb ff1f 	bl	800d0f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80112ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d012      	beq.n	80112e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80112c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7f8 feb5 	bl	800a036 <lwip_htonl>
 80112cc:	4602      	mov	r2, r0
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112d6:	8912      	ldrh	r2, [r2, #8]
 80112d8:	4413      	add	r3, r2
  while (seg != NULL &&
 80112da:	69ba      	ldr	r2, [r7, #24]
 80112dc:	429a      	cmp	r2, r3
 80112de:	f4bf aed9 	bcs.w	8011094 <tcp_output+0x160>
 80112e2:	e000      	b.n	80112e6 <tcp_output+0x3b2>
      break;
 80112e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d108      	bne.n	8011300 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2200      	movs	r2, #0
 80112f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80112f6:	e004      	b.n	8011302 <tcp_output+0x3ce>
    goto output_done;
 80112f8:	bf00      	nop
 80112fa:	e002      	b.n	8011302 <tcp_output+0x3ce>
    goto output_done;
 80112fc:	bf00      	nop
 80112fe:	e000      	b.n	8011302 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011300:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	8b5b      	ldrh	r3, [r3, #26]
 8011306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801130a:	b29a      	uxth	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	3728      	adds	r7, #40	@ 0x28
 8011316:	46bd      	mov	sp, r7
 8011318:	bdb0      	pop	{r4, r5, r7, pc}
 801131a:	bf00      	nop

0801131c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d106      	bne.n	8011338 <tcp_output_segment_busy+0x1c>
 801132a:	4b09      	ldr	r3, [pc, #36]	@ (8011350 <tcp_output_segment_busy+0x34>)
 801132c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011330:	4908      	ldr	r1, [pc, #32]	@ (8011354 <tcp_output_segment_busy+0x38>)
 8011332:	4809      	ldr	r0, [pc, #36]	@ (8011358 <tcp_output_segment_busy+0x3c>)
 8011334:	f003 ff96 	bl	8015264 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	7b9b      	ldrb	r3, [r3, #14]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d001      	beq.n	8011346 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011342:	2301      	movs	r3, #1
 8011344:	e000      	b.n	8011348 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011346:	2300      	movs	r3, #0
}
 8011348:	4618      	mov	r0, r3
 801134a:	3708      	adds	r7, #8
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	080184a8 	.word	0x080184a8
 8011354:	08018a44 	.word	0x08018a44
 8011358:	080184fc 	.word	0x080184fc

0801135c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801135c:	b5b0      	push	{r4, r5, r7, lr}
 801135e:	b08c      	sub	sp, #48	@ 0x30
 8011360:	af04      	add	r7, sp, #16
 8011362:	60f8      	str	r0, [r7, #12]
 8011364:	60b9      	str	r1, [r7, #8]
 8011366:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d106      	bne.n	801137c <tcp_output_segment+0x20>
 801136e:	4b64      	ldr	r3, [pc, #400]	@ (8011500 <tcp_output_segment+0x1a4>)
 8011370:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011374:	4963      	ldr	r1, [pc, #396]	@ (8011504 <tcp_output_segment+0x1a8>)
 8011376:	4864      	ldr	r0, [pc, #400]	@ (8011508 <tcp_output_segment+0x1ac>)
 8011378:	f003 ff74 	bl	8015264 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d106      	bne.n	8011390 <tcp_output_segment+0x34>
 8011382:	4b5f      	ldr	r3, [pc, #380]	@ (8011500 <tcp_output_segment+0x1a4>)
 8011384:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011388:	4960      	ldr	r1, [pc, #384]	@ (801150c <tcp_output_segment+0x1b0>)
 801138a:	485f      	ldr	r0, [pc, #380]	@ (8011508 <tcp_output_segment+0x1ac>)
 801138c:	f003 ff6a 	bl	8015264 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d106      	bne.n	80113a4 <tcp_output_segment+0x48>
 8011396:	4b5a      	ldr	r3, [pc, #360]	@ (8011500 <tcp_output_segment+0x1a4>)
 8011398:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801139c:	495c      	ldr	r1, [pc, #368]	@ (8011510 <tcp_output_segment+0x1b4>)
 801139e:	485a      	ldr	r0, [pc, #360]	@ (8011508 <tcp_output_segment+0x1ac>)
 80113a0:	f003 ff60 	bl	8015264 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80113a4:	68f8      	ldr	r0, [r7, #12]
 80113a6:	f7ff ffb9 	bl	801131c <tcp_output_segment_busy>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d001      	beq.n	80113b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80113b0:	2300      	movs	r3, #0
 80113b2:	e0a1      	b.n	80114f8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	68dc      	ldr	r4, [r3, #12]
 80113bc:	4610      	mov	r0, r2
 80113be:	f7f8 fe3a 	bl	800a036 <lwip_htonl>
 80113c2:	4603      	mov	r3, r0
 80113c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	68dc      	ldr	r4, [r3, #12]
 80113ce:	4610      	mov	r0, r2
 80113d0:	f7f8 fe1c 	bl	800a00c <lwip_htons>
 80113d4:	4603      	mov	r3, r0
 80113d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80113e0:	441a      	add	r2, r3
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	3314      	adds	r3, #20
 80113ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	7a9b      	ldrb	r3, [r3, #10]
 80113f2:	f003 0301 	and.w	r3, r3, #1
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d015      	beq.n	8011426 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	3304      	adds	r3, #4
 80113fe:	461a      	mov	r2, r3
 8011400:	6879      	ldr	r1, [r7, #4]
 8011402:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8011406:	f7fc fa39 	bl	800d87c <tcp_eff_send_mss_netif>
 801140a:	4603      	mov	r3, r0
 801140c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801140e:	8b7b      	ldrh	r3, [r7, #26]
 8011410:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011414:	4618      	mov	r0, r3
 8011416:	f7f8 fe0e 	bl	800a036 <lwip_htonl>
 801141a:	4602      	mov	r2, r0
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	3304      	adds	r3, #4
 8011424:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801142c:	2b00      	cmp	r3, #0
 801142e:	da02      	bge.n	8011436 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	2200      	movs	r2, #0
 8011434:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801143a:	2b00      	cmp	r3, #0
 801143c:	d10c      	bne.n	8011458 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801143e:	4b35      	ldr	r3, [pc, #212]	@ (8011514 <tcp_output_segment+0x1b8>)
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	68db      	ldr	r3, [r3, #12]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	4618      	mov	r0, r3
 801144e:	f7f8 fdf2 	bl	800a036 <lwip_htonl>
 8011452:	4602      	mov	r2, r0
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	68da      	ldr	r2, [r3, #12]
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	1ad3      	subs	r3, r2, r3
 8011464:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	8959      	ldrh	r1, [r3, #10]
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	8b3a      	ldrh	r2, [r7, #24]
 8011472:	1a8a      	subs	r2, r1, r2
 8011474:	b292      	uxth	r2, r2
 8011476:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	8919      	ldrh	r1, [r3, #8]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	8b3a      	ldrh	r2, [r7, #24]
 8011484:	1a8a      	subs	r2, r1, r2
 8011486:	b292      	uxth	r2, r2
 8011488:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	68fa      	ldr	r2, [r7, #12]
 8011490:	68d2      	ldr	r2, [r2, #12]
 8011492:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	2200      	movs	r2, #0
 801149a:	741a      	strb	r2, [r3, #16]
 801149c:	2200      	movs	r2, #0
 801149e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	68da      	ldr	r2, [r3, #12]
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	7a9b      	ldrb	r3, [r3, #10]
 80114a8:	f003 0301 	and.w	r3, r3, #1
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d001      	beq.n	80114b4 <tcp_output_segment+0x158>
 80114b0:	2318      	movs	r3, #24
 80114b2:	e000      	b.n	80114b6 <tcp_output_segment+0x15a>
 80114b4:	2314      	movs	r3, #20
 80114b6:	4413      	add	r3, r2
 80114b8:	69fa      	ldr	r2, [r7, #28]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d006      	beq.n	80114cc <tcp_output_segment+0x170>
 80114be:	4b10      	ldr	r3, [pc, #64]	@ (8011500 <tcp_output_segment+0x1a4>)
 80114c0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80114c4:	4914      	ldr	r1, [pc, #80]	@ (8011518 <tcp_output_segment+0x1bc>)
 80114c6:	4810      	ldr	r0, [pc, #64]	@ (8011508 <tcp_output_segment+0x1ac>)
 80114c8:	f003 fecc 	bl	8015264 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6858      	ldr	r0, [r3, #4]
 80114d0:	68b9      	ldr	r1, [r7, #8]
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	1d1c      	adds	r4, r3, #4
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	7add      	ldrb	r5, [r3, #11]
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	7a9b      	ldrb	r3, [r3, #10]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	9202      	str	r2, [sp, #8]
 80114e2:	2206      	movs	r2, #6
 80114e4:	9201      	str	r2, [sp, #4]
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	462b      	mov	r3, r5
 80114ea:	4622      	mov	r2, r4
 80114ec:	f002 fbaa 	bl	8013c44 <ip4_output_if>
 80114f0:	4603      	mov	r3, r0
 80114f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80114f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3720      	adds	r7, #32
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bdb0      	pop	{r4, r5, r7, pc}
 8011500:	080184a8 	.word	0x080184a8
 8011504:	08018a6c 	.word	0x08018a6c
 8011508:	080184fc 	.word	0x080184fc
 801150c:	08018a8c 	.word	0x08018a8c
 8011510:	08018aac 	.word	0x08018aac
 8011514:	2000be68 	.word	0x2000be68
 8011518:	08018ad0 	.word	0x08018ad0

0801151c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801151c:	b5b0      	push	{r4, r5, r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d106      	bne.n	8011538 <tcp_rexmit_rto_prepare+0x1c>
 801152a:	4b31      	ldr	r3, [pc, #196]	@ (80115f0 <tcp_rexmit_rto_prepare+0xd4>)
 801152c:	f240 6263 	movw	r2, #1635	@ 0x663
 8011530:	4930      	ldr	r1, [pc, #192]	@ (80115f4 <tcp_rexmit_rto_prepare+0xd8>)
 8011532:	4831      	ldr	r0, [pc, #196]	@ (80115f8 <tcp_rexmit_rto_prepare+0xdc>)
 8011534:	f003 fe96 	bl	8015264 <iprintf>

  if (pcb->unacked == NULL) {
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801153c:	2b00      	cmp	r3, #0
 801153e:	d102      	bne.n	8011546 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011540:	f06f 0305 	mvn.w	r3, #5
 8011544:	e050      	b.n	80115e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801154a:	60fb      	str	r3, [r7, #12]
 801154c:	e00b      	b.n	8011566 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f7ff fee4 	bl	801131c <tcp_output_segment_busy>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d002      	beq.n	8011560 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801155a:	f06f 0305 	mvn.w	r3, #5
 801155e:	e043      	b.n	80115e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	60fb      	str	r3, [r7, #12]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d1ef      	bne.n	801154e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f7ff fed4 	bl	801131c <tcp_output_segment_busy>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801157a:	f06f 0305 	mvn.w	r3, #5
 801157e:	e033      	b.n	80115e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2200      	movs	r2, #0
 8011594:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	8b5b      	ldrh	r3, [r3, #26]
 801159a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801159e:	b29a      	uxth	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7f8 fd43 	bl	800a036 <lwip_htonl>
 80115b0:	4604      	mov	r4, r0
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	891b      	ldrh	r3, [r3, #8]
 80115b6:	461d      	mov	r5, r3
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	899b      	ldrh	r3, [r3, #12]
 80115be:	b29b      	uxth	r3, r3
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7f8 fd23 	bl	800a00c <lwip_htons>
 80115c6:	4603      	mov	r3, r0
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	f003 0303 	and.w	r3, r3, #3
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <tcp_rexmit_rto_prepare+0xba>
 80115d2:	2301      	movs	r3, #1
 80115d4:	e000      	b.n	80115d8 <tcp_rexmit_rto_prepare+0xbc>
 80115d6:	2300      	movs	r3, #0
 80115d8:	442b      	add	r3, r5
 80115da:	18e2      	adds	r2, r4, r3
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80115e6:	2300      	movs	r3, #0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bdb0      	pop	{r4, r5, r7, pc}
 80115f0:	080184a8 	.word	0x080184a8
 80115f4:	08018ae4 	.word	0x08018ae4
 80115f8:	080184fc 	.word	0x080184fc

080115fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d106      	bne.n	8011618 <tcp_rexmit_rto_commit+0x1c>
 801160a:	4b0d      	ldr	r3, [pc, #52]	@ (8011640 <tcp_rexmit_rto_commit+0x44>)
 801160c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011610:	490c      	ldr	r1, [pc, #48]	@ (8011644 <tcp_rexmit_rto_commit+0x48>)
 8011612:	480d      	ldr	r0, [pc, #52]	@ (8011648 <tcp_rexmit_rto_commit+0x4c>)
 8011614:	f003 fe26 	bl	8015264 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801161e:	2bff      	cmp	r3, #255	@ 0xff
 8011620:	d007      	beq.n	8011632 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011628:	3301      	adds	r3, #1
 801162a:	b2da      	uxtb	r2, r3
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7ff fc7e 	bl	8010f34 <tcp_output>
}
 8011638:	bf00      	nop
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}
 8011640:	080184a8 	.word	0x080184a8
 8011644:	08018b08 	.word	0x08018b08
 8011648:	080184fc 	.word	0x080184fc

0801164c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_rexmit_rto+0x1c>
 801165a:	4b0a      	ldr	r3, [pc, #40]	@ (8011684 <tcp_rexmit_rto+0x38>)
 801165c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011660:	4909      	ldr	r1, [pc, #36]	@ (8011688 <tcp_rexmit_rto+0x3c>)
 8011662:	480a      	ldr	r0, [pc, #40]	@ (801168c <tcp_rexmit_rto+0x40>)
 8011664:	f003 fdfe 	bl	8015264 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f7ff ff57 	bl	801151c <tcp_rexmit_rto_prepare>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f7ff ffc1 	bl	80115fc <tcp_rexmit_rto_commit>
  }
}
 801167a:	bf00      	nop
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	080184a8 	.word	0x080184a8
 8011688:	08018b2c 	.word	0x08018b2c
 801168c:	080184fc 	.word	0x080184fc

08011690 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011690:	b590      	push	{r4, r7, lr}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d106      	bne.n	80116ac <tcp_rexmit+0x1c>
 801169e:	4b2f      	ldr	r3, [pc, #188]	@ (801175c <tcp_rexmit+0xcc>)
 80116a0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80116a4:	492e      	ldr	r1, [pc, #184]	@ (8011760 <tcp_rexmit+0xd0>)
 80116a6:	482f      	ldr	r0, [pc, #188]	@ (8011764 <tcp_rexmit+0xd4>)
 80116a8:	f003 fddc 	bl	8015264 <iprintf>

  if (pcb->unacked == NULL) {
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d102      	bne.n	80116ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80116b4:	f06f 0305 	mvn.w	r3, #5
 80116b8:	e04c      	b.n	8011754 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80116c0:	68b8      	ldr	r0, [r7, #8]
 80116c2:	f7ff fe2b 	bl	801131c <tcp_output_segment_busy>
 80116c6:	4603      	mov	r3, r0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80116cc:	f06f 0305 	mvn.w	r3, #5
 80116d0:	e040      	b.n	8011754 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	336c      	adds	r3, #108	@ 0x6c
 80116de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80116e0:	e002      	b.n	80116e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d011      	beq.n	8011714 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7f8 fc9c 	bl	800a036 <lwip_htonl>
 80116fe:	4604      	mov	r4, r0
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	4618      	mov	r0, r3
 8011708:	f7f8 fc95 	bl	800a036 <lwip_htonl>
 801170c:	4603      	mov	r3, r0
 801170e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011710:	2b00      	cmp	r3, #0
 8011712:	dbe6      	blt.n	80116e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	68ba      	ldr	r2, [r7, #8]
 8011720:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d103      	bne.n	8011732 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011738:	2bff      	cmp	r3, #255	@ 0xff
 801173a:	d007      	beq.n	801174c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011742:	3301      	adds	r3, #1
 8011744:	b2da      	uxtb	r2, r3
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011752:	2300      	movs	r3, #0
}
 8011754:	4618      	mov	r0, r3
 8011756:	3714      	adds	r7, #20
 8011758:	46bd      	mov	sp, r7
 801175a:	bd90      	pop	{r4, r7, pc}
 801175c:	080184a8 	.word	0x080184a8
 8011760:	08018b48 	.word	0x08018b48
 8011764:	080184fc 	.word	0x080184fc

08011768 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d106      	bne.n	8011784 <tcp_rexmit_fast+0x1c>
 8011776:	4b2a      	ldr	r3, [pc, #168]	@ (8011820 <tcp_rexmit_fast+0xb8>)
 8011778:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801177c:	4929      	ldr	r1, [pc, #164]	@ (8011824 <tcp_rexmit_fast+0xbc>)
 801177e:	482a      	ldr	r0, [pc, #168]	@ (8011828 <tcp_rexmit_fast+0xc0>)
 8011780:	f003 fd70 	bl	8015264 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011788:	2b00      	cmp	r3, #0
 801178a:	d045      	beq.n	8011818 <tcp_rexmit_fast+0xb0>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	8b5b      	ldrh	r3, [r3, #26]
 8011790:	f003 0304 	and.w	r3, r3, #4
 8011794:	2b00      	cmp	r3, #0
 8011796:	d13f      	bne.n	8011818 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7ff ff79 	bl	8011690 <tcp_rexmit>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d139      	bne.n	8011818 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80117b0:	4293      	cmp	r3, r2
 80117b2:	bf28      	it	cs
 80117b4:	4613      	movcs	r3, r2
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	da00      	bge.n	80117be <tcp_rexmit_fast+0x56>
 80117bc:	3301      	adds	r3, #1
 80117be:	105b      	asrs	r3, r3, #1
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80117ce:	461a      	mov	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117d4:	005b      	lsls	r3, r3, #1
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d206      	bcs.n	80117e8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117de:	005b      	lsls	r3, r3, #1
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117f2:	4619      	mov	r1, r3
 80117f4:	0049      	lsls	r1, r1, #1
 80117f6:	440b      	add	r3, r1
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	4413      	add	r3, r2
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	8b5b      	ldrh	r3, [r3, #26]
 8011808:	f043 0304 	orr.w	r3, r3, #4
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011818:	bf00      	nop
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	080184a8 	.word	0x080184a8
 8011824:	08018b60 	.word	0x08018b60
 8011828:	080184fc 	.word	0x080184fc

0801182c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b086      	sub	sp, #24
 8011830:	af00      	add	r7, sp, #0
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	607b      	str	r3, [r7, #4]
 8011836:	460b      	mov	r3, r1
 8011838:	817b      	strh	r3, [r7, #10]
 801183a:	4613      	mov	r3, r2
 801183c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801183e:	897a      	ldrh	r2, [r7, #10]
 8011840:	893b      	ldrh	r3, [r7, #8]
 8011842:	4413      	add	r3, r2
 8011844:	b29b      	uxth	r3, r3
 8011846:	3314      	adds	r3, #20
 8011848:	b29b      	uxth	r3, r3
 801184a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801184e:	4619      	mov	r1, r3
 8011850:	2022      	movs	r0, #34	@ 0x22
 8011852:	f7f9 fce5 	bl	800b220 <pbuf_alloc>
 8011856:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d04d      	beq.n	80118fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801185e:	897b      	ldrh	r3, [r7, #10]
 8011860:	3313      	adds	r3, #19
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	8952      	ldrh	r2, [r2, #10]
 8011866:	4293      	cmp	r3, r2
 8011868:	db06      	blt.n	8011878 <tcp_output_alloc_header_common+0x4c>
 801186a:	4b26      	ldr	r3, [pc, #152]	@ (8011904 <tcp_output_alloc_header_common+0xd8>)
 801186c:	f240 7223 	movw	r2, #1827	@ 0x723
 8011870:	4925      	ldr	r1, [pc, #148]	@ (8011908 <tcp_output_alloc_header_common+0xdc>)
 8011872:	4826      	ldr	r0, [pc, #152]	@ (801190c <tcp_output_alloc_header_common+0xe0>)
 8011874:	f003 fcf6 	bl	8015264 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801187e:	8c3b      	ldrh	r3, [r7, #32]
 8011880:	4618      	mov	r0, r3
 8011882:	f7f8 fbc3 	bl	800a00c <lwip_htons>
 8011886:	4603      	mov	r3, r0
 8011888:	461a      	mov	r2, r3
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801188e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011890:	4618      	mov	r0, r3
 8011892:	f7f8 fbbb 	bl	800a00c <lwip_htons>
 8011896:	4603      	mov	r3, r0
 8011898:	461a      	mov	r2, r3
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f7f8 fbc6 	bl	800a036 <lwip_htonl>
 80118aa:	4602      	mov	r2, r0
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80118b0:	897b      	ldrh	r3, [r7, #10]
 80118b2:	089b      	lsrs	r3, r3, #2
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	3305      	adds	r3, #5
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	031b      	lsls	r3, r3, #12
 80118bc:	b29a      	uxth	r2, r3
 80118be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	4313      	orrs	r3, r2
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7f8 fb9f 	bl	800a00c <lwip_htons>
 80118ce:	4603      	mov	r3, r0
 80118d0:	461a      	mov	r2, r3
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80118d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80118d8:	4618      	mov	r0, r3
 80118da:	f7f8 fb97 	bl	800a00c <lwip_htons>
 80118de:	4603      	mov	r3, r0
 80118e0:	461a      	mov	r2, r3
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	2200      	movs	r2, #0
 80118ea:	741a      	strb	r2, [r3, #16]
 80118ec:	2200      	movs	r2, #0
 80118ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	2200      	movs	r2, #0
 80118f4:	749a      	strb	r2, [r3, #18]
 80118f6:	2200      	movs	r2, #0
 80118f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80118fa:	697b      	ldr	r3, [r7, #20]
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3718      	adds	r7, #24
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	080184a8 	.word	0x080184a8
 8011908:	08018b80 	.word	0x08018b80
 801190c:	080184fc 	.word	0x080184fc

08011910 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011910:	b5b0      	push	{r4, r5, r7, lr}
 8011912:	b08a      	sub	sp, #40	@ 0x28
 8011914:	af04      	add	r7, sp, #16
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	607b      	str	r3, [r7, #4]
 801191a:	460b      	mov	r3, r1
 801191c:	817b      	strh	r3, [r7, #10]
 801191e:	4613      	mov	r3, r2
 8011920:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d106      	bne.n	8011936 <tcp_output_alloc_header+0x26>
 8011928:	4b15      	ldr	r3, [pc, #84]	@ (8011980 <tcp_output_alloc_header+0x70>)
 801192a:	f240 7242 	movw	r2, #1858	@ 0x742
 801192e:	4915      	ldr	r1, [pc, #84]	@ (8011984 <tcp_output_alloc_header+0x74>)
 8011930:	4815      	ldr	r0, [pc, #84]	@ (8011988 <tcp_output_alloc_header+0x78>)
 8011932:	f003 fc97 	bl	8015264 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	8adb      	ldrh	r3, [r3, #22]
 801193e:	68fa      	ldr	r2, [r7, #12]
 8011940:	8b12      	ldrh	r2, [r2, #24]
 8011942:	68f9      	ldr	r1, [r7, #12]
 8011944:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011946:	893d      	ldrh	r5, [r7, #8]
 8011948:	897c      	ldrh	r4, [r7, #10]
 801194a:	9103      	str	r1, [sp, #12]
 801194c:	2110      	movs	r1, #16
 801194e:	9102      	str	r1, [sp, #8]
 8011950:	9201      	str	r2, [sp, #4]
 8011952:	9300      	str	r3, [sp, #0]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	462a      	mov	r2, r5
 8011958:	4621      	mov	r1, r4
 801195a:	f7ff ff67 	bl	801182c <tcp_output_alloc_header_common>
 801195e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d006      	beq.n	8011974 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801196a:	68fa      	ldr	r2, [r7, #12]
 801196c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801196e:	441a      	add	r2, r3
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011974:	697b      	ldr	r3, [r7, #20]
}
 8011976:	4618      	mov	r0, r3
 8011978:	3718      	adds	r7, #24
 801197a:	46bd      	mov	sp, r7
 801197c:	bdb0      	pop	{r4, r5, r7, pc}
 801197e:	bf00      	nop
 8011980:	080184a8 	.word	0x080184a8
 8011984:	08018bb0 	.word	0x08018bb0
 8011988:	080184fc 	.word	0x080184fc

0801198c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b088      	sub	sp, #32
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	60b9      	str	r1, [r7, #8]
 8011996:	4611      	mov	r1, r2
 8011998:	461a      	mov	r2, r3
 801199a:	460b      	mov	r3, r1
 801199c:	71fb      	strb	r3, [r7, #7]
 801199e:	4613      	mov	r3, r2
 80119a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80119a2:	2300      	movs	r3, #0
 80119a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d106      	bne.n	80119ba <tcp_output_fill_options+0x2e>
 80119ac:	4b12      	ldr	r3, [pc, #72]	@ (80119f8 <tcp_output_fill_options+0x6c>)
 80119ae:	f240 7256 	movw	r2, #1878	@ 0x756
 80119b2:	4912      	ldr	r1, [pc, #72]	@ (80119fc <tcp_output_fill_options+0x70>)
 80119b4:	4812      	ldr	r0, [pc, #72]	@ (8011a00 <tcp_output_fill_options+0x74>)
 80119b6:	f003 fc55 	bl	8015264 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	3314      	adds	r3, #20
 80119c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80119c6:	8bfb      	ldrh	r3, [r7, #30]
 80119c8:	009b      	lsls	r3, r3, #2
 80119ca:	461a      	mov	r2, r3
 80119cc:	79fb      	ldrb	r3, [r7, #7]
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	f003 0304 	and.w	r3, r3, #4
 80119d4:	4413      	add	r3, r2
 80119d6:	3314      	adds	r3, #20
 80119d8:	69ba      	ldr	r2, [r7, #24]
 80119da:	4413      	add	r3, r2
 80119dc:	697a      	ldr	r2, [r7, #20]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d006      	beq.n	80119f0 <tcp_output_fill_options+0x64>
 80119e2:	4b05      	ldr	r3, [pc, #20]	@ (80119f8 <tcp_output_fill_options+0x6c>)
 80119e4:	f240 7275 	movw	r2, #1909	@ 0x775
 80119e8:	4906      	ldr	r1, [pc, #24]	@ (8011a04 <tcp_output_fill_options+0x78>)
 80119ea:	4805      	ldr	r0, [pc, #20]	@ (8011a00 <tcp_output_fill_options+0x74>)
 80119ec:	f003 fc3a 	bl	8015264 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80119f0:	bf00      	nop
 80119f2:	3720      	adds	r7, #32
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}
 80119f8:	080184a8 	.word	0x080184a8
 80119fc:	08018bd8 	.word	0x08018bd8
 8011a00:	080184fc 	.word	0x080184fc
 8011a04:	08018ad0 	.word	0x08018ad0

08011a08 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b08a      	sub	sp, #40	@ 0x28
 8011a0c:	af04      	add	r7, sp, #16
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	607a      	str	r2, [r7, #4]
 8011a14:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d106      	bne.n	8011a2a <tcp_output_control_segment+0x22>
 8011a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8011a90 <tcp_output_control_segment+0x88>)
 8011a1e:	f240 7287 	movw	r2, #1927	@ 0x787
 8011a22:	491c      	ldr	r1, [pc, #112]	@ (8011a94 <tcp_output_control_segment+0x8c>)
 8011a24:	481c      	ldr	r0, [pc, #112]	@ (8011a98 <tcp_output_control_segment+0x90>)
 8011a26:	f003 fc1d 	bl	8015264 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011a2a:	683a      	ldr	r2, [r7, #0]
 8011a2c:	6879      	ldr	r1, [r7, #4]
 8011a2e:	68f8      	ldr	r0, [r7, #12]
 8011a30:	f7fe faea 	bl	8010008 <tcp_route>
 8011a34:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d102      	bne.n	8011a42 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011a3c:	23fc      	movs	r3, #252	@ 0xfc
 8011a3e:	75fb      	strb	r3, [r7, #23]
 8011a40:	e01c      	b.n	8011a7c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d006      	beq.n	8011a56 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	7adb      	ldrb	r3, [r3, #11]
 8011a4c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	7a9b      	ldrb	r3, [r3, #10]
 8011a52:	757b      	strb	r3, [r7, #21]
 8011a54:	e003      	b.n	8011a5e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011a56:	23ff      	movs	r3, #255	@ 0xff
 8011a58:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011a5e:	7dba      	ldrb	r2, [r7, #22]
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	9302      	str	r3, [sp, #8]
 8011a64:	2306      	movs	r3, #6
 8011a66:	9301      	str	r3, [sp, #4]
 8011a68:	7d7b      	ldrb	r3, [r7, #21]
 8011a6a:	9300      	str	r3, [sp, #0]
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	683a      	ldr	r2, [r7, #0]
 8011a70:	6879      	ldr	r1, [r7, #4]
 8011a72:	68b8      	ldr	r0, [r7, #8]
 8011a74:	f002 f8e6 	bl	8013c44 <ip4_output_if>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011a7c:	68b8      	ldr	r0, [r7, #8]
 8011a7e:	f7f9 feb3 	bl	800b7e8 <pbuf_free>
  return err;
 8011a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3718      	adds	r7, #24
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	080184a8 	.word	0x080184a8
 8011a94:	08018c00 	.word	0x08018c00
 8011a98:	080184fc 	.word	0x080184fc

08011a9c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011a9c:	b590      	push	{r4, r7, lr}
 8011a9e:	b08b      	sub	sp, #44	@ 0x2c
 8011aa0:	af04      	add	r7, sp, #16
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
 8011aa8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d106      	bne.n	8011abe <tcp_rst+0x22>
 8011ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8011b30 <tcp_rst+0x94>)
 8011ab2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011ab6:	491f      	ldr	r1, [pc, #124]	@ (8011b34 <tcp_rst+0x98>)
 8011ab8:	481f      	ldr	r0, [pc, #124]	@ (8011b38 <tcp_rst+0x9c>)
 8011aba:	f003 fbd3 	bl	8015264 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d106      	bne.n	8011ad2 <tcp_rst+0x36>
 8011ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8011b30 <tcp_rst+0x94>)
 8011ac6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011aca:	491c      	ldr	r1, [pc, #112]	@ (8011b3c <tcp_rst+0xa0>)
 8011acc:	481a      	ldr	r0, [pc, #104]	@ (8011b38 <tcp_rst+0x9c>)
 8011ace:	f003 fbc9 	bl	8015264 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011ad6:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011ada:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011adc:	7dfb      	ldrb	r3, [r7, #23]
 8011ade:	b29c      	uxth	r4, r3
 8011ae0:	68b8      	ldr	r0, [r7, #8]
 8011ae2:	f7f8 faa8 	bl	800a036 <lwip_htonl>
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	8abb      	ldrh	r3, [r7, #20]
 8011aea:	9303      	str	r3, [sp, #12]
 8011aec:	2314      	movs	r3, #20
 8011aee:	9302      	str	r3, [sp, #8]
 8011af0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011af2:	9301      	str	r3, [sp, #4]
 8011af4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	4613      	mov	r3, r2
 8011afa:	2200      	movs	r2, #0
 8011afc:	4621      	mov	r1, r4
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f7ff fe94 	bl	801182c <tcp_output_alloc_header_common>
 8011b04:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00c      	beq.n	8011b26 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b0c:	7dfb      	ldrb	r3, [r7, #23]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	6939      	ldr	r1, [r7, #16]
 8011b12:	68f8      	ldr	r0, [r7, #12]
 8011b14:	f7ff ff3a 	bl	801198c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b1a:	683a      	ldr	r2, [r7, #0]
 8011b1c:	6939      	ldr	r1, [r7, #16]
 8011b1e:	68f8      	ldr	r0, [r7, #12]
 8011b20:	f7ff ff72 	bl	8011a08 <tcp_output_control_segment>
 8011b24:	e000      	b.n	8011b28 <tcp_rst+0x8c>
    return;
 8011b26:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011b28:	371c      	adds	r7, #28
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd90      	pop	{r4, r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	080184a8 	.word	0x080184a8
 8011b34:	08018c2c 	.word	0x08018c2c
 8011b38:	080184fc 	.word	0x080184fc
 8011b3c:	08018c48 	.word	0x08018c48

08011b40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011b40:	b590      	push	{r4, r7, lr}
 8011b42:	b087      	sub	sp, #28
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d106      	bne.n	8011b64 <tcp_send_empty_ack+0x24>
 8011b56:	4b28      	ldr	r3, [pc, #160]	@ (8011bf8 <tcp_send_empty_ack+0xb8>)
 8011b58:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011b5c:	4927      	ldr	r1, [pc, #156]	@ (8011bfc <tcp_send_empty_ack+0xbc>)
 8011b5e:	4828      	ldr	r0, [pc, #160]	@ (8011c00 <tcp_send_empty_ack+0xc0>)
 8011b60:	f003 fb80 	bl	8015264 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b64:	7dfb      	ldrb	r3, [r7, #23]
 8011b66:	009b      	lsls	r3, r3, #2
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	f003 0304 	and.w	r3, r3, #4
 8011b6e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011b70:	7d7b      	ldrb	r3, [r7, #21]
 8011b72:	b29c      	uxth	r4, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7f8 fa5c 	bl	800a036 <lwip_htonl>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2200      	movs	r2, #0
 8011b82:	4621      	mov	r1, r4
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f7ff fec3 	bl	8011910 <tcp_output_alloc_header>
 8011b8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d109      	bne.n	8011ba6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	8b5b      	ldrh	r3, [r3, #26]
 8011b96:	f043 0303 	orr.w	r3, r3, #3
 8011b9a:	b29a      	uxth	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ba0:	f06f 0301 	mvn.w	r3, #1
 8011ba4:	e023      	b.n	8011bee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011ba6:	7dbb      	ldrb	r3, [r7, #22]
 8011ba8:	7dfa      	ldrb	r2, [r7, #23]
 8011baa:	6939      	ldr	r1, [r7, #16]
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7ff feed 	bl	801198c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	3304      	adds	r3, #4
 8011bb8:	6939      	ldr	r1, [r7, #16]
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f7ff ff24 	bl	8011a08 <tcp_output_control_segment>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d007      	beq.n	8011bdc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	8b5b      	ldrh	r3, [r3, #26]
 8011bd0:	f043 0303 	orr.w	r3, r3, #3
 8011bd4:	b29a      	uxth	r2, r3
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	835a      	strh	r2, [r3, #26]
 8011bda:	e006      	b.n	8011bea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	8b5b      	ldrh	r3, [r3, #26]
 8011be0:	f023 0303 	bic.w	r3, r3, #3
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	371c      	adds	r7, #28
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd90      	pop	{r4, r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	080184a8 	.word	0x080184a8
 8011bfc:	08018c64 	.word	0x08018c64
 8011c00:	080184fc 	.word	0x080184fc

08011c04 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011c04:	b590      	push	{r4, r7, lr}
 8011c06:	b087      	sub	sp, #28
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d106      	bne.n	8011c24 <tcp_keepalive+0x20>
 8011c16:	4b18      	ldr	r3, [pc, #96]	@ (8011c78 <tcp_keepalive+0x74>)
 8011c18:	f640 0224 	movw	r2, #2084	@ 0x824
 8011c1c:	4917      	ldr	r1, [pc, #92]	@ (8011c7c <tcp_keepalive+0x78>)
 8011c1e:	4818      	ldr	r0, [pc, #96]	@ (8011c80 <tcp_keepalive+0x7c>)
 8011c20:	f003 fb20 	bl	8015264 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011c24:	7dfb      	ldrb	r3, [r7, #23]
 8011c26:	b29c      	uxth	r4, r3
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c2c:	3b01      	subs	r3, #1
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7f8 fa01 	bl	800a036 <lwip_htonl>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2200      	movs	r2, #0
 8011c38:	4621      	mov	r1, r4
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f7ff fe68 	bl	8011910 <tcp_output_alloc_header>
 8011c40:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d102      	bne.n	8011c4e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011c48:	f04f 33ff 	mov.w	r3, #4294967295
 8011c4c:	e010      	b.n	8011c70 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c4e:	7dfb      	ldrb	r3, [r7, #23]
 8011c50:	2200      	movs	r2, #0
 8011c52:	6939      	ldr	r1, [r7, #16]
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7ff fe99 	bl	801198c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	3304      	adds	r3, #4
 8011c60:	6939      	ldr	r1, [r7, #16]
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f7ff fed0 	bl	8011a08 <tcp_output_control_segment>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	371c      	adds	r7, #28
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd90      	pop	{r4, r7, pc}
 8011c78:	080184a8 	.word	0x080184a8
 8011c7c:	08018c84 	.word	0x08018c84
 8011c80:	080184fc 	.word	0x080184fc

08011c84 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011c84:	b590      	push	{r4, r7, lr}
 8011c86:	b08b      	sub	sp, #44	@ 0x2c
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d106      	bne.n	8011ca6 <tcp_zero_window_probe+0x22>
 8011c98:	4b4c      	ldr	r3, [pc, #304]	@ (8011dcc <tcp_zero_window_probe+0x148>)
 8011c9a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011c9e:	494c      	ldr	r1, [pc, #304]	@ (8011dd0 <tcp_zero_window_probe+0x14c>)
 8011ca0:	484c      	ldr	r0, [pc, #304]	@ (8011dd4 <tcp_zero_window_probe+0x150>)
 8011ca2:	f003 fadf 	bl	8015264 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011caa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d101      	bne.n	8011cb6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	e086      	b.n	8011dc4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011cbc:	2bff      	cmp	r3, #255	@ 0xff
 8011cbe:	d007      	beq.n	8011cd0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	b2da      	uxtb	r2, r3
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011cd0:	6a3b      	ldr	r3, [r7, #32]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	899b      	ldrh	r3, [r3, #12]
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7f8 f997 	bl	800a00c <lwip_htons>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	f003 0301 	and.w	r3, r3, #1
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d005      	beq.n	8011cf6 <tcp_zero_window_probe+0x72>
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	891b      	ldrh	r3, [r3, #8]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d101      	bne.n	8011cf6 <tcp_zero_window_probe+0x72>
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	e000      	b.n	8011cf8 <tcp_zero_window_probe+0x74>
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011cfa:	7ffb      	ldrb	r3, [r7, #31]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	bf0c      	ite	eq
 8011d00:	2301      	moveq	r3, #1
 8011d02:	2300      	movne	r3, #0
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d0c:	b299      	uxth	r1, r3
 8011d0e:	6a3b      	ldr	r3, [r7, #32]
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	8bba      	ldrh	r2, [r7, #28]
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ff fdfa 	bl	8011910 <tcp_output_alloc_header>
 8011d1c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d102      	bne.n	8011d2a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011d24:	f04f 33ff 	mov.w	r3, #4294967295
 8011d28:	e04c      	b.n	8011dc4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011d30:	7ffb      	ldrb	r3, [r7, #31]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d011      	beq.n	8011d5a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	899b      	ldrh	r3, [r3, #12]
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	b21b      	sxth	r3, r3
 8011d3e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011d42:	b21c      	sxth	r4, r3
 8011d44:	2011      	movs	r0, #17
 8011d46:	f7f8 f961 	bl	800a00c <lwip_htons>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	b21b      	sxth	r3, r3
 8011d4e:	4323      	orrs	r3, r4
 8011d50:	b21b      	sxth	r3, r3
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	819a      	strh	r2, [r3, #12]
 8011d58:	e010      	b.n	8011d7c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	3314      	adds	r3, #20
 8011d60:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011d62:	6a3b      	ldr	r3, [r7, #32]
 8011d64:	6858      	ldr	r0, [r3, #4]
 8011d66:	6a3b      	ldr	r3, [r7, #32]
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	891a      	ldrh	r2, [r3, #8]
 8011d6c:	6a3b      	ldr	r3, [r7, #32]
 8011d6e:	891b      	ldrh	r3, [r3, #8]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	2201      	movs	r2, #1
 8011d76:	6939      	ldr	r1, [r7, #16]
 8011d78:	f7f9 ff2c 	bl	800bbd4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7f8 f957 	bl	800a036 <lwip_htonl>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	1ad3      	subs	r3, r2, r3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	da02      	bge.n	8011da0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	68fa      	ldr	r2, [r7, #12]
 8011d9e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011da4:	2200      	movs	r2, #0
 8011da6:	69b9      	ldr	r1, [r7, #24]
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff fdef 	bl	801198c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	3304      	adds	r3, #4
 8011db4:	69b9      	ldr	r1, [r7, #24]
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7ff fe26 	bl	8011a08 <tcp_output_control_segment>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011dc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	372c      	adds	r7, #44	@ 0x2c
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd90      	pop	{r4, r7, pc}
 8011dcc:	080184a8 	.word	0x080184a8
 8011dd0:	08018ca0 	.word	0x08018ca0
 8011dd4:	080184fc 	.word	0x080184fc

08011dd8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011de0:	f7f9 ffe6 	bl	800bdb0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011de4:	4b0a      	ldr	r3, [pc, #40]	@ (8011e10 <tcpip_tcp_timer+0x38>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d103      	bne.n	8011df4 <tcpip_tcp_timer+0x1c>
 8011dec:	4b09      	ldr	r3, [pc, #36]	@ (8011e14 <tcpip_tcp_timer+0x3c>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d005      	beq.n	8011e00 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011df4:	2200      	movs	r2, #0
 8011df6:	4908      	ldr	r1, [pc, #32]	@ (8011e18 <tcpip_tcp_timer+0x40>)
 8011df8:	20fa      	movs	r0, #250	@ 0xfa
 8011dfa:	f000 f8f3 	bl	8011fe4 <sys_timeout>
 8011dfe:	e003      	b.n	8011e08 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011e00:	4b06      	ldr	r3, [pc, #24]	@ (8011e1c <tcpip_tcp_timer+0x44>)
 8011e02:	2200      	movs	r2, #0
 8011e04:	601a      	str	r2, [r3, #0]
  }
}
 8011e06:	bf00      	nop
 8011e08:	bf00      	nop
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	2000be74 	.word	0x2000be74
 8011e14:	2000be78 	.word	0x2000be78
 8011e18:	08011dd9 	.word	0x08011dd9
 8011e1c:	2000bec0 	.word	0x2000bec0

08011e20 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011e24:	4b0a      	ldr	r3, [pc, #40]	@ (8011e50 <tcp_timer_needed+0x30>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d10f      	bne.n	8011e4c <tcp_timer_needed+0x2c>
 8011e2c:	4b09      	ldr	r3, [pc, #36]	@ (8011e54 <tcp_timer_needed+0x34>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d103      	bne.n	8011e3c <tcp_timer_needed+0x1c>
 8011e34:	4b08      	ldr	r3, [pc, #32]	@ (8011e58 <tcp_timer_needed+0x38>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d007      	beq.n	8011e4c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011e3c:	4b04      	ldr	r3, [pc, #16]	@ (8011e50 <tcp_timer_needed+0x30>)
 8011e3e:	2201      	movs	r2, #1
 8011e40:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e42:	2200      	movs	r2, #0
 8011e44:	4905      	ldr	r1, [pc, #20]	@ (8011e5c <tcp_timer_needed+0x3c>)
 8011e46:	20fa      	movs	r0, #250	@ 0xfa
 8011e48:	f000 f8cc 	bl	8011fe4 <sys_timeout>
  }
}
 8011e4c:	bf00      	nop
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	2000bec0 	.word	0x2000bec0
 8011e54:	2000be74 	.word	0x2000be74
 8011e58:	2000be78 	.word	0x2000be78
 8011e5c:	08011dd9 	.word	0x08011dd9

08011e60 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b086      	sub	sp, #24
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	60b9      	str	r1, [r7, #8]
 8011e6a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011e6c:	200a      	movs	r0, #10
 8011e6e:	f7f8 fda1 	bl	800a9b4 <memp_malloc>
 8011e72:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d109      	bne.n	8011e8e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d151      	bne.n	8011f24 <sys_timeout_abs+0xc4>
 8011e80:	4b2a      	ldr	r3, [pc, #168]	@ (8011f2c <sys_timeout_abs+0xcc>)
 8011e82:	22be      	movs	r2, #190	@ 0xbe
 8011e84:	492a      	ldr	r1, [pc, #168]	@ (8011f30 <sys_timeout_abs+0xd0>)
 8011e86:	482b      	ldr	r0, [pc, #172]	@ (8011f34 <sys_timeout_abs+0xd4>)
 8011e88:	f003 f9ec 	bl	8015264 <iprintf>
    return;
 8011e8c:	e04a      	b.n	8011f24 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	2200      	movs	r2, #0
 8011e92:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	68fa      	ldr	r2, [r7, #12]
 8011ea4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011ea6:	4b24      	ldr	r3, [pc, #144]	@ (8011f38 <sys_timeout_abs+0xd8>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d103      	bne.n	8011eb6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011eae:	4a22      	ldr	r2, [pc, #136]	@ (8011f38 <sys_timeout_abs+0xd8>)
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	6013      	str	r3, [r2, #0]
    return;
 8011eb4:	e037      	b.n	8011f26 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	685a      	ldr	r2, [r3, #4]
 8011eba:	4b1f      	ldr	r3, [pc, #124]	@ (8011f38 <sys_timeout_abs+0xd8>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	0fdb      	lsrs	r3, r3, #31
 8011ec4:	f003 0301 	and.w	r3, r3, #1
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d007      	beq.n	8011ede <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011ece:	4b1a      	ldr	r3, [pc, #104]	@ (8011f38 <sys_timeout_abs+0xd8>)
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011ed6:	4a18      	ldr	r2, [pc, #96]	@ (8011f38 <sys_timeout_abs+0xd8>)
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	6013      	str	r3, [r2, #0]
 8011edc:	e023      	b.n	8011f26 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011ede:	4b16      	ldr	r3, [pc, #88]	@ (8011f38 <sys_timeout_abs+0xd8>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	617b      	str	r3, [r7, #20]
 8011ee4:	e01a      	b.n	8011f1c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d00b      	beq.n	8011f06 <sys_timeout_abs+0xa6>
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	1ad3      	subs	r3, r2, r3
 8011efa:	0fdb      	lsrs	r3, r3, #31
 8011efc:	f003 0301 	and.w	r3, r3, #1
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d007      	beq.n	8011f16 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	693a      	ldr	r2, [r7, #16]
 8011f12:	601a      	str	r2, [r3, #0]
        break;
 8011f14:	e007      	b.n	8011f26 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	617b      	str	r3, [r7, #20]
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d1e1      	bne.n	8011ee6 <sys_timeout_abs+0x86>
 8011f22:	e000      	b.n	8011f26 <sys_timeout_abs+0xc6>
    return;
 8011f24:	bf00      	nop
      }
    }
  }
}
 8011f26:	3718      	adds	r7, #24
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	08018cc4 	.word	0x08018cc4
 8011f30:	08018cf8 	.word	0x08018cf8
 8011f34:	08018d38 	.word	0x08018d38
 8011f38:	2000beb8 	.word	0x2000beb8

08011f3c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b086      	sub	sp, #24
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	4798      	blx	r3

  now = sys_now();
 8011f4e:	f7f2 f9bf 	bl	80042d0 <sys_now>
 8011f52:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	4b0f      	ldr	r3, [pc, #60]	@ (8011f98 <lwip_cyclic_timer+0x5c>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011f60:	68fa      	ldr	r2, [r7, #12]
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	1ad3      	subs	r3, r2, r3
 8011f66:	0fdb      	lsrs	r3, r3, #31
 8011f68:	f003 0301 	and.w	r3, r3, #1
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d009      	beq.n	8011f86 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	4413      	add	r3, r2
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	4907      	ldr	r1, [pc, #28]	@ (8011f9c <lwip_cyclic_timer+0x60>)
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7ff ff6e 	bl	8011e60 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011f84:	e004      	b.n	8011f90 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	4904      	ldr	r1, [pc, #16]	@ (8011f9c <lwip_cyclic_timer+0x60>)
 8011f8a:	68f8      	ldr	r0, [r7, #12]
 8011f8c:	f7ff ff68 	bl	8011e60 <sys_timeout_abs>
}
 8011f90:	bf00      	nop
 8011f92:	3718      	adds	r7, #24
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	2000bebc 	.word	0x2000bebc
 8011f9c:	08011f3d 	.word	0x08011f3d

08011fa0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	607b      	str	r3, [r7, #4]
 8011faa:	e00e      	b.n	8011fca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011fac:	4a0b      	ldr	r2, [pc, #44]	@ (8011fdc <sys_timeouts_init+0x3c>)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	00db      	lsls	r3, r3, #3
 8011fb8:	4a08      	ldr	r2, [pc, #32]	@ (8011fdc <sys_timeouts_init+0x3c>)
 8011fba:	4413      	add	r3, r2
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	4908      	ldr	r1, [pc, #32]	@ (8011fe0 <sys_timeouts_init+0x40>)
 8011fc0:	f000 f810 	bl	8011fe4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	607b      	str	r3, [r7, #4]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	d9ed      	bls.n	8011fac <sys_timeouts_init+0xc>
  }
}
 8011fd0:	bf00      	nop
 8011fd2:	bf00      	nop
 8011fd4:	3708      	adds	r7, #8
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	08022bb4 	.word	0x08022bb4
 8011fe0:	08011f3d 	.word	0x08011f3d

08011fe4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011ff6:	d306      	bcc.n	8012006 <sys_timeout+0x22>
 8011ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8012024 <sys_timeout+0x40>)
 8011ffa:	f240 1229 	movw	r2, #297	@ 0x129
 8011ffe:	490a      	ldr	r1, [pc, #40]	@ (8012028 <sys_timeout+0x44>)
 8012000:	480a      	ldr	r0, [pc, #40]	@ (801202c <sys_timeout+0x48>)
 8012002:	f003 f92f 	bl	8015264 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012006:	f7f2 f963 	bl	80042d0 <sys_now>
 801200a:	4602      	mov	r2, r0
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	4413      	add	r3, r2
 8012010:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012012:	687a      	ldr	r2, [r7, #4]
 8012014:	68b9      	ldr	r1, [r7, #8]
 8012016:	6978      	ldr	r0, [r7, #20]
 8012018:	f7ff ff22 	bl	8011e60 <sys_timeout_abs>
#endif
}
 801201c:	bf00      	nop
 801201e:	3718      	adds	r7, #24
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	08018cc4 	.word	0x08018cc4
 8012028:	08018d60 	.word	0x08018d60
 801202c:	08018d38 	.word	0x08018d38

08012030 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b084      	sub	sp, #16
 8012034:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012036:	f7f2 f94b 	bl	80042d0 <sys_now>
 801203a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801203c:	4b17      	ldr	r3, [pc, #92]	@ (801209c <sys_check_timeouts+0x6c>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d022      	beq.n	801208e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	68fa      	ldr	r2, [r7, #12]
 801204e:	1ad3      	subs	r3, r2, r3
 8012050:	0fdb      	lsrs	r3, r3, #31
 8012052:	f003 0301 	and.w	r3, r3, #1
 8012056:	b2db      	uxtb	r3, r3
 8012058:	2b00      	cmp	r3, #0
 801205a:	d11a      	bne.n	8012092 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4a0e      	ldr	r2, [pc, #56]	@ (801209c <sys_check_timeouts+0x6c>)
 8012062:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	689b      	ldr	r3, [r3, #8]
 8012068:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	68db      	ldr	r3, [r3, #12]
 801206e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	4a0a      	ldr	r2, [pc, #40]	@ (80120a0 <sys_check_timeouts+0x70>)
 8012076:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012078:	68b9      	ldr	r1, [r7, #8]
 801207a:	200a      	movs	r0, #10
 801207c:	f7f8 fd10 	bl	800aaa0 <memp_free>
    if (handler != NULL) {
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d0da      	beq.n	801203c <sys_check_timeouts+0xc>
      handler(arg);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6838      	ldr	r0, [r7, #0]
 801208a:	4798      	blx	r3
  do {
 801208c:	e7d6      	b.n	801203c <sys_check_timeouts+0xc>
      return;
 801208e:	bf00      	nop
 8012090:	e000      	b.n	8012094 <sys_check_timeouts+0x64>
      return;
 8012092:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012094:	3710      	adds	r7, #16
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	2000beb8 	.word	0x2000beb8
 80120a0:	2000bebc 	.word	0x2000bebc

080120a4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80120aa:	4b16      	ldr	r3, [pc, #88]	@ (8012104 <sys_timeouts_sleeptime+0x60>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d102      	bne.n	80120b8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80120b2:	f04f 33ff 	mov.w	r3, #4294967295
 80120b6:	e020      	b.n	80120fa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80120b8:	f7f2 f90a 	bl	80042d0 <sys_now>
 80120bc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80120be:	4b11      	ldr	r3, [pc, #68]	@ (8012104 <sys_timeouts_sleeptime+0x60>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	685a      	ldr	r2, [r3, #4]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	1ad3      	subs	r3, r2, r3
 80120c8:	0fdb      	lsrs	r3, r3, #31
 80120ca:	f003 0301 	and.w	r3, r3, #1
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d001      	beq.n	80120d8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80120d4:	2300      	movs	r3, #0
 80120d6:	e010      	b.n	80120fa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80120d8:	4b0a      	ldr	r3, [pc, #40]	@ (8012104 <sys_timeouts_sleeptime+0x60>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	685a      	ldr	r2, [r3, #4]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	1ad3      	subs	r3, r2, r3
 80120e2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	da06      	bge.n	80120f8 <sys_timeouts_sleeptime+0x54>
 80120ea:	4b07      	ldr	r3, [pc, #28]	@ (8012108 <sys_timeouts_sleeptime+0x64>)
 80120ec:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80120f0:	4906      	ldr	r1, [pc, #24]	@ (801210c <sys_timeouts_sleeptime+0x68>)
 80120f2:	4807      	ldr	r0, [pc, #28]	@ (8012110 <sys_timeouts_sleeptime+0x6c>)
 80120f4:	f003 f8b6 	bl	8015264 <iprintf>
    return ret;
 80120f8:	683b      	ldr	r3, [r7, #0]
  }
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	2000beb8 	.word	0x2000beb8
 8012108:	08018cc4 	.word	0x08018cc4
 801210c:	08018d98 	.word	0x08018d98
 8012110:	08018d38 	.word	0x08018d38

08012114 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012118:	f002 ffa4 	bl	8015064 <rand>
 801211c:	4603      	mov	r3, r0
 801211e:	b29b      	uxth	r3, r3
 8012120:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012124:	b29b      	uxth	r3, r3
 8012126:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801212a:	b29a      	uxth	r2, r3
 801212c:	4b01      	ldr	r3, [pc, #4]	@ (8012134 <udp_init+0x20>)
 801212e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012130:	bf00      	nop
 8012132:	bd80      	pop	{r7, pc}
 8012134:	2000002c 	.word	0x2000002c

08012138 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801213e:	2300      	movs	r3, #0
 8012140:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012142:	4b17      	ldr	r3, [pc, #92]	@ (80121a0 <udp_new_port+0x68>)
 8012144:	881b      	ldrh	r3, [r3, #0]
 8012146:	1c5a      	adds	r2, r3, #1
 8012148:	b291      	uxth	r1, r2
 801214a:	4a15      	ldr	r2, [pc, #84]	@ (80121a0 <udp_new_port+0x68>)
 801214c:	8011      	strh	r1, [r2, #0]
 801214e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012152:	4293      	cmp	r3, r2
 8012154:	d103      	bne.n	801215e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012156:	4b12      	ldr	r3, [pc, #72]	@ (80121a0 <udp_new_port+0x68>)
 8012158:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801215c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801215e:	4b11      	ldr	r3, [pc, #68]	@ (80121a4 <udp_new_port+0x6c>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	603b      	str	r3, [r7, #0]
 8012164:	e011      	b.n	801218a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	8a5a      	ldrh	r2, [r3, #18]
 801216a:	4b0d      	ldr	r3, [pc, #52]	@ (80121a0 <udp_new_port+0x68>)
 801216c:	881b      	ldrh	r3, [r3, #0]
 801216e:	429a      	cmp	r2, r3
 8012170:	d108      	bne.n	8012184 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012172:	88fb      	ldrh	r3, [r7, #6]
 8012174:	3301      	adds	r3, #1
 8012176:	80fb      	strh	r3, [r7, #6]
 8012178:	88fb      	ldrh	r3, [r7, #6]
 801217a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801217e:	d3e0      	bcc.n	8012142 <udp_new_port+0xa>
        return 0;
 8012180:	2300      	movs	r3, #0
 8012182:	e007      	b.n	8012194 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	603b      	str	r3, [r7, #0]
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d1ea      	bne.n	8012166 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012190:	4b03      	ldr	r3, [pc, #12]	@ (80121a0 <udp_new_port+0x68>)
 8012192:	881b      	ldrh	r3, [r3, #0]
}
 8012194:	4618      	mov	r0, r3
 8012196:	370c      	adds	r7, #12
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr
 80121a0:	2000002c 	.word	0x2000002c
 80121a4:	2000bec4 	.word	0x2000bec4

080121a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	4613      	mov	r3, r2
 80121b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d105      	bne.n	80121c8 <udp_input_local_match+0x20>
 80121bc:	4b27      	ldr	r3, [pc, #156]	@ (801225c <udp_input_local_match+0xb4>)
 80121be:	2287      	movs	r2, #135	@ 0x87
 80121c0:	4927      	ldr	r1, [pc, #156]	@ (8012260 <udp_input_local_match+0xb8>)
 80121c2:	4828      	ldr	r0, [pc, #160]	@ (8012264 <udp_input_local_match+0xbc>)
 80121c4:	f003 f84e 	bl	8015264 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d105      	bne.n	80121da <udp_input_local_match+0x32>
 80121ce:	4b23      	ldr	r3, [pc, #140]	@ (801225c <udp_input_local_match+0xb4>)
 80121d0:	2288      	movs	r2, #136	@ 0x88
 80121d2:	4925      	ldr	r1, [pc, #148]	@ (8012268 <udp_input_local_match+0xc0>)
 80121d4:	4823      	ldr	r0, [pc, #140]	@ (8012264 <udp_input_local_match+0xbc>)
 80121d6:	f003 f845 	bl	8015264 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	7a1b      	ldrb	r3, [r3, #8]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d00b      	beq.n	80121fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	7a1a      	ldrb	r2, [r3, #8]
 80121e6:	4b21      	ldr	r3, [pc, #132]	@ (801226c <udp_input_local_match+0xc4>)
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80121ee:	3301      	adds	r3, #1
 80121f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d001      	beq.n	80121fa <udp_input_local_match+0x52>
    return 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	e02b      	b.n	8012252 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80121fa:	79fb      	ldrb	r3, [r7, #7]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d018      	beq.n	8012232 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d013      	beq.n	801222e <udp_input_local_match+0x86>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d00f      	beq.n	801222e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801220e:	4b17      	ldr	r3, [pc, #92]	@ (801226c <udp_input_local_match+0xc4>)
 8012210:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012216:	d00a      	beq.n	801222e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	4b13      	ldr	r3, [pc, #76]	@ (801226c <udp_input_local_match+0xc4>)
 801221e:	695b      	ldr	r3, [r3, #20]
 8012220:	405a      	eors	r2, r3
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	3308      	adds	r3, #8
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801222a:	2b00      	cmp	r3, #0
 801222c:	d110      	bne.n	8012250 <udp_input_local_match+0xa8>
          return 1;
 801222e:	2301      	movs	r3, #1
 8012230:	e00f      	b.n	8012252 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d009      	beq.n	801224c <udp_input_local_match+0xa4>
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d005      	beq.n	801224c <udp_input_local_match+0xa4>
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	4b09      	ldr	r3, [pc, #36]	@ (801226c <udp_input_local_match+0xc4>)
 8012246:	695b      	ldr	r3, [r3, #20]
 8012248:	429a      	cmp	r2, r3
 801224a:	d101      	bne.n	8012250 <udp_input_local_match+0xa8>
        return 1;
 801224c:	2301      	movs	r3, #1
 801224e:	e000      	b.n	8012252 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012250:	2300      	movs	r3, #0
}
 8012252:	4618      	mov	r0, r3
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	08018dac 	.word	0x08018dac
 8012260:	08018ddc 	.word	0x08018ddc
 8012264:	08018e00 	.word	0x08018e00
 8012268:	08018e28 	.word	0x08018e28
 801226c:	20008d68 	.word	0x20008d68

08012270 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012270:	b590      	push	{r4, r7, lr}
 8012272:	b08d      	sub	sp, #52	@ 0x34
 8012274:	af02      	add	r7, sp, #8
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801227a:	2300      	movs	r3, #0
 801227c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d105      	bne.n	8012290 <udp_input+0x20>
 8012284:	4b7c      	ldr	r3, [pc, #496]	@ (8012478 <udp_input+0x208>)
 8012286:	22cf      	movs	r2, #207	@ 0xcf
 8012288:	497c      	ldr	r1, [pc, #496]	@ (801247c <udp_input+0x20c>)
 801228a:	487d      	ldr	r0, [pc, #500]	@ (8012480 <udp_input+0x210>)
 801228c:	f002 ffea 	bl	8015264 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d105      	bne.n	80122a2 <udp_input+0x32>
 8012296:	4b78      	ldr	r3, [pc, #480]	@ (8012478 <udp_input+0x208>)
 8012298:	22d0      	movs	r2, #208	@ 0xd0
 801229a:	497a      	ldr	r1, [pc, #488]	@ (8012484 <udp_input+0x214>)
 801229c:	4878      	ldr	r0, [pc, #480]	@ (8012480 <udp_input+0x210>)
 801229e:	f002 ffe1 	bl	8015264 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	895b      	ldrh	r3, [r3, #10]
 80122a6:	2b07      	cmp	r3, #7
 80122a8:	d803      	bhi.n	80122b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7f9 fa9c 	bl	800b7e8 <pbuf_free>
    goto end;
 80122b0:	e0de      	b.n	8012470 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80122b8:	4b73      	ldr	r3, [pc, #460]	@ (8012488 <udp_input+0x218>)
 80122ba:	695b      	ldr	r3, [r3, #20]
 80122bc:	4a72      	ldr	r2, [pc, #456]	@ (8012488 <udp_input+0x218>)
 80122be:	6812      	ldr	r2, [r2, #0]
 80122c0:	4611      	mov	r1, r2
 80122c2:	4618      	mov	r0, r3
 80122c4:	f001 fd96 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 80122c8:	4603      	mov	r3, r0
 80122ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7f7 fe9a 	bl	800a00c <lwip_htons>
 80122d8:	4603      	mov	r3, r0
 80122da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	885b      	ldrh	r3, [r3, #2]
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7f7 fe92 	bl	800a00c <lwip_htons>
 80122e8:	4603      	mov	r3, r0
 80122ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80122ec:	2300      	movs	r3, #0
 80122ee:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80122f0:	2300      	movs	r3, #0
 80122f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80122f4:	2300      	movs	r3, #0
 80122f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122f8:	4b64      	ldr	r3, [pc, #400]	@ (801248c <udp_input+0x21c>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80122fe:	e054      	b.n	80123aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012302:	8a5b      	ldrh	r3, [r3, #18]
 8012304:	89fa      	ldrh	r2, [r7, #14]
 8012306:	429a      	cmp	r2, r3
 8012308:	d14a      	bne.n	80123a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801230a:	7cfb      	ldrb	r3, [r7, #19]
 801230c:	461a      	mov	r2, r3
 801230e:	6839      	ldr	r1, [r7, #0]
 8012310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012312:	f7ff ff49 	bl	80121a8 <udp_input_local_match>
 8012316:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012318:	2b00      	cmp	r3, #0
 801231a:	d041      	beq.n	80123a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801231e:	7c1b      	ldrb	r3, [r3, #16]
 8012320:	f003 0304 	and.w	r3, r3, #4
 8012324:	2b00      	cmp	r3, #0
 8012326:	d11d      	bne.n	8012364 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d102      	bne.n	8012334 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012330:	61fb      	str	r3, [r7, #28]
 8012332:	e017      	b.n	8012364 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012334:	7cfb      	ldrb	r3, [r7, #19]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d014      	beq.n	8012364 <udp_input+0xf4>
 801233a:	4b53      	ldr	r3, [pc, #332]	@ (8012488 <udp_input+0x218>)
 801233c:	695b      	ldr	r3, [r3, #20]
 801233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012342:	d10f      	bne.n	8012364 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	3304      	adds	r3, #4
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	429a      	cmp	r2, r3
 8012350:	d008      	beq.n	8012364 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012354:	681a      	ldr	r2, [r3, #0]
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	3304      	adds	r3, #4
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	429a      	cmp	r2, r3
 801235e:	d101      	bne.n	8012364 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012362:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012366:	8a9b      	ldrh	r3, [r3, #20]
 8012368:	8a3a      	ldrh	r2, [r7, #16]
 801236a:	429a      	cmp	r2, r3
 801236c:	d118      	bne.n	80123a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012370:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012372:	2b00      	cmp	r3, #0
 8012374:	d005      	beq.n	8012382 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012378:	685a      	ldr	r2, [r3, #4]
 801237a:	4b43      	ldr	r3, [pc, #268]	@ (8012488 <udp_input+0x218>)
 801237c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801237e:	429a      	cmp	r2, r3
 8012380:	d10e      	bne.n	80123a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012382:	6a3b      	ldr	r3, [r7, #32]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d014      	beq.n	80123b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801238a:	68da      	ldr	r2, [r3, #12]
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012390:	4b3e      	ldr	r3, [pc, #248]	@ (801248c <udp_input+0x21c>)
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012396:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012398:	4a3c      	ldr	r2, [pc, #240]	@ (801248c <udp_input+0x21c>)
 801239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801239e:	e008      	b.n	80123b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80123a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80123a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a6:	68db      	ldr	r3, [r3, #12]
 80123a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80123aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1a7      	bne.n	8012300 <udp_input+0x90>
 80123b0:	e000      	b.n	80123b4 <udp_input+0x144>
        break;
 80123b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80123b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d101      	bne.n	80123be <udp_input+0x14e>
    pcb = uncon_pcb;
 80123ba:	69fb      	ldr	r3, [r7, #28]
 80123bc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80123be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d002      	beq.n	80123ca <udp_input+0x15a>
    for_us = 1;
 80123c4:	2301      	movs	r3, #1
 80123c6:	76fb      	strb	r3, [r7, #27]
 80123c8:	e00a      	b.n	80123e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	3304      	adds	r3, #4
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	4b2d      	ldr	r3, [pc, #180]	@ (8012488 <udp_input+0x218>)
 80123d2:	695b      	ldr	r3, [r3, #20]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	bf0c      	ite	eq
 80123d8:	2301      	moveq	r3, #1
 80123da:	2300      	movne	r3, #0
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80123e0:	7efb      	ldrb	r3, [r7, #27]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d041      	beq.n	801246a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80123e6:	2108      	movs	r1, #8
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f7f9 f977 	bl	800b6dc <pbuf_remove_header>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00a      	beq.n	801240a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80123f4:	4b20      	ldr	r3, [pc, #128]	@ (8012478 <udp_input+0x208>)
 80123f6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80123fa:	4925      	ldr	r1, [pc, #148]	@ (8012490 <udp_input+0x220>)
 80123fc:	4820      	ldr	r0, [pc, #128]	@ (8012480 <udp_input+0x210>)
 80123fe:	f002 ff31 	bl	8015264 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f7f9 f9f0 	bl	800b7e8 <pbuf_free>
      goto end;
 8012408:	e032      	b.n	8012470 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801240c:	2b00      	cmp	r3, #0
 801240e:	d012      	beq.n	8012436 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012412:	699b      	ldr	r3, [r3, #24]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d00a      	beq.n	801242e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801241a:	699c      	ldr	r4, [r3, #24]
 801241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801241e:	69d8      	ldr	r0, [r3, #28]
 8012420:	8a3b      	ldrh	r3, [r7, #16]
 8012422:	9300      	str	r3, [sp, #0]
 8012424:	4b1b      	ldr	r3, [pc, #108]	@ (8012494 <udp_input+0x224>)
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801242a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801242c:	e021      	b.n	8012472 <udp_input+0x202>
        pbuf_free(p);
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7f9 f9da 	bl	800b7e8 <pbuf_free>
        goto end;
 8012434:	e01c      	b.n	8012470 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012436:	7cfb      	ldrb	r3, [r7, #19]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d112      	bne.n	8012462 <udp_input+0x1f2>
 801243c:	4b12      	ldr	r3, [pc, #72]	@ (8012488 <udp_input+0x218>)
 801243e:	695b      	ldr	r3, [r3, #20]
 8012440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012444:	2be0      	cmp	r3, #224	@ 0xe0
 8012446:	d00c      	beq.n	8012462 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012448:	4b0f      	ldr	r3, [pc, #60]	@ (8012488 <udp_input+0x218>)
 801244a:	899b      	ldrh	r3, [r3, #12]
 801244c:	3308      	adds	r3, #8
 801244e:	b29b      	uxth	r3, r3
 8012450:	b21b      	sxth	r3, r3
 8012452:	4619      	mov	r1, r3
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7f9 f9b4 	bl	800b7c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801245a:	2103      	movs	r1, #3
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f001 f9a9 	bl	80137b4 <icmp_dest_unreach>
      pbuf_free(p);
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7f9 f9c0 	bl	800b7e8 <pbuf_free>
  return;
 8012468:	e003      	b.n	8012472 <udp_input+0x202>
    pbuf_free(p);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f7f9 f9bc 	bl	800b7e8 <pbuf_free>
  return;
 8012470:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012472:	372c      	adds	r7, #44	@ 0x2c
 8012474:	46bd      	mov	sp, r7
 8012476:	bd90      	pop	{r4, r7, pc}
 8012478:	08018dac 	.word	0x08018dac
 801247c:	08018e50 	.word	0x08018e50
 8012480:	08018e00 	.word	0x08018e00
 8012484:	08018e68 	.word	0x08018e68
 8012488:	20008d68 	.word	0x20008d68
 801248c:	2000bec4 	.word	0x2000bec4
 8012490:	08018e84 	.word	0x08018e84
 8012494:	20008d78 	.word	0x20008d78

08012498 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b086      	sub	sp, #24
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	4613      	mov	r3, r2
 80124a4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d101      	bne.n	80124b0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80124ac:	4b39      	ldr	r3, [pc, #228]	@ (8012594 <udp_bind+0xfc>)
 80124ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d109      	bne.n	80124ca <udp_bind+0x32>
 80124b6:	4b38      	ldr	r3, [pc, #224]	@ (8012598 <udp_bind+0x100>)
 80124b8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80124bc:	4937      	ldr	r1, [pc, #220]	@ (801259c <udp_bind+0x104>)
 80124be:	4838      	ldr	r0, [pc, #224]	@ (80125a0 <udp_bind+0x108>)
 80124c0:	f002 fed0 	bl	8015264 <iprintf>
 80124c4:	f06f 030f 	mvn.w	r3, #15
 80124c8:	e060      	b.n	801258c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80124ca:	2300      	movs	r3, #0
 80124cc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124ce:	4b35      	ldr	r3, [pc, #212]	@ (80125a4 <udp_bind+0x10c>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	617b      	str	r3, [r7, #20]
 80124d4:	e009      	b.n	80124ea <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80124d6:	68fa      	ldr	r2, [r7, #12]
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d102      	bne.n	80124e4 <udp_bind+0x4c>
      rebind = 1;
 80124de:	2301      	movs	r3, #1
 80124e0:	74fb      	strb	r3, [r7, #19]
      break;
 80124e2:	e005      	b.n	80124f0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	617b      	str	r3, [r7, #20]
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d1f2      	bne.n	80124d6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80124f0:	88fb      	ldrh	r3, [r7, #6]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d109      	bne.n	801250a <udp_bind+0x72>
    port = udp_new_port();
 80124f6:	f7ff fe1f 	bl	8012138 <udp_new_port>
 80124fa:	4603      	mov	r3, r0
 80124fc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80124fe:	88fb      	ldrh	r3, [r7, #6]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d12c      	bne.n	801255e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012504:	f06f 0307 	mvn.w	r3, #7
 8012508:	e040      	b.n	801258c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801250a:	4b26      	ldr	r3, [pc, #152]	@ (80125a4 <udp_bind+0x10c>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	617b      	str	r3, [r7, #20]
 8012510:	e022      	b.n	8012558 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	429a      	cmp	r2, r3
 8012518:	d01b      	beq.n	8012552 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	8a5b      	ldrh	r3, [r3, #18]
 801251e:	88fa      	ldrh	r2, [r7, #6]
 8012520:	429a      	cmp	r2, r3
 8012522:	d116      	bne.n	8012552 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801252c:	429a      	cmp	r2, r3
 801252e:	d00d      	beq.n	801254c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00a      	beq.n	801254c <udp_bind+0xb4>
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d006      	beq.n	801254c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801253e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012540:	2b00      	cmp	r3, #0
 8012542:	d003      	beq.n	801254c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d102      	bne.n	8012552 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801254c:	f06f 0307 	mvn.w	r3, #7
 8012550:	e01c      	b.n	801258c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	617b      	str	r3, [r7, #20]
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d1d9      	bne.n	8012512 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d002      	beq.n	801256a <udp_bind+0xd2>
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	e000      	b.n	801256c <udp_bind+0xd4>
 801256a:	2300      	movs	r3, #0
 801256c:	68fa      	ldr	r2, [r7, #12]
 801256e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	88fa      	ldrh	r2, [r7, #6]
 8012574:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012576:	7cfb      	ldrb	r3, [r7, #19]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d106      	bne.n	801258a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801257c:	4b09      	ldr	r3, [pc, #36]	@ (80125a4 <udp_bind+0x10c>)
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012584:	4a07      	ldr	r2, [pc, #28]	@ (80125a4 <udp_bind+0x10c>)
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801258a:	2300      	movs	r3, #0
}
 801258c:	4618      	mov	r0, r3
 801258e:	3718      	adds	r7, #24
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	08022bcc 	.word	0x08022bcc
 8012598:	08018dac 	.word	0x08018dac
 801259c:	08019074 	.word	0x08019074
 80125a0:	08018e00 	.word	0x08018e00
 80125a4:	2000bec4 	.word	0x2000bec4

080125a8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d107      	bne.n	80125ca <udp_recv+0x22>
 80125ba:	4b08      	ldr	r3, [pc, #32]	@ (80125dc <udp_recv+0x34>)
 80125bc:	f240 428a 	movw	r2, #1162	@ 0x48a
 80125c0:	4907      	ldr	r1, [pc, #28]	@ (80125e0 <udp_recv+0x38>)
 80125c2:	4808      	ldr	r0, [pc, #32]	@ (80125e4 <udp_recv+0x3c>)
 80125c4:	f002 fe4e 	bl	8015264 <iprintf>
 80125c8:	e005      	b.n	80125d6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	68ba      	ldr	r2, [r7, #8]
 80125ce:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	61da      	str	r2, [r3, #28]
}
 80125d6:	3710      	adds	r7, #16
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	08018dac 	.word	0x08018dac
 80125e0:	080190e0 	.word	0x080190e0
 80125e4:	08018e00 	.word	0x08018e00

080125e8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d107      	bne.n	8012606 <udp_remove+0x1e>
 80125f6:	4b19      	ldr	r3, [pc, #100]	@ (801265c <udp_remove+0x74>)
 80125f8:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80125fc:	4918      	ldr	r1, [pc, #96]	@ (8012660 <udp_remove+0x78>)
 80125fe:	4819      	ldr	r0, [pc, #100]	@ (8012664 <udp_remove+0x7c>)
 8012600:	f002 fe30 	bl	8015264 <iprintf>
 8012604:	e026      	b.n	8012654 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012606:	4b18      	ldr	r3, [pc, #96]	@ (8012668 <udp_remove+0x80>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	429a      	cmp	r2, r3
 801260e:	d105      	bne.n	801261c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012610:	4b15      	ldr	r3, [pc, #84]	@ (8012668 <udp_remove+0x80>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	4a14      	ldr	r2, [pc, #80]	@ (8012668 <udp_remove+0x80>)
 8012618:	6013      	str	r3, [r2, #0]
 801261a:	e017      	b.n	801264c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801261c:	4b12      	ldr	r3, [pc, #72]	@ (8012668 <udp_remove+0x80>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	60fb      	str	r3, [r7, #12]
 8012622:	e010      	b.n	8012646 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	68db      	ldr	r3, [r3, #12]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d009      	beq.n	8012640 <udp_remove+0x58>
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	429a      	cmp	r2, r3
 8012634:	d104      	bne.n	8012640 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	68da      	ldr	r2, [r3, #12]
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	60da      	str	r2, [r3, #12]
        break;
 801263e:	e005      	b.n	801264c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	60fb      	str	r3, [r7, #12]
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1eb      	bne.n	8012624 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801264c:	6879      	ldr	r1, [r7, #4]
 801264e:	2000      	movs	r0, #0
 8012650:	f7f8 fa26 	bl	800aaa0 <memp_free>
}
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	08018dac 	.word	0x08018dac
 8012660:	080190f8 	.word	0x080190f8
 8012664:	08018e00 	.word	0x08018e00
 8012668:	2000bec4 	.word	0x2000bec4

0801266c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012672:	2000      	movs	r0, #0
 8012674:	f7f8 f99e 	bl	800a9b4 <memp_malloc>
 8012678:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d007      	beq.n	8012690 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012680:	2220      	movs	r2, #32
 8012682:	2100      	movs	r1, #0
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f002 fe52 	bl	801532e <memset>
    pcb->ttl = UDP_TTL;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	22ff      	movs	r2, #255	@ 0xff
 801268e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012690:	687b      	ldr	r3, [r7, #4]
}
 8012692:	4618      	mov	r0, r3
 8012694:	3708      	adds	r7, #8
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}

0801269a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801269a:	b580      	push	{r7, lr}
 801269c:	b084      	sub	sp, #16
 801269e:	af00      	add	r7, sp, #0
 80126a0:	4603      	mov	r3, r0
 80126a2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80126a4:	f7ff ffe2 	bl	801266c <udp_new>
 80126a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80126aa:	68fb      	ldr	r3, [r7, #12]
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3710      	adds	r7, #16
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d01e      	beq.n	8012702 <udp_netif_ip_addr_changed+0x4e>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d01a      	beq.n	8012702 <udp_netif_ip_addr_changed+0x4e>
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d017      	beq.n	8012702 <udp_netif_ip_addr_changed+0x4e>
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d013      	beq.n	8012702 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80126da:	4b0d      	ldr	r3, [pc, #52]	@ (8012710 <udp_netif_ip_addr_changed+0x5c>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	60fb      	str	r3, [r7, #12]
 80126e0:	e00c      	b.n	80126fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d103      	bne.n	80126f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	60fb      	str	r3, [r7, #12]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d1ef      	bne.n	80126e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012702:	bf00      	nop
 8012704:	3714      	adds	r7, #20
 8012706:	46bd      	mov	sp, r7
 8012708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270c:	4770      	bx	lr
 801270e:	bf00      	nop
 8012710:	2000bec4 	.word	0x2000bec4

08012714 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801271c:	4915      	ldr	r1, [pc, #84]	@ (8012774 <etharp_free_entry+0x60>)
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	4613      	mov	r3, r2
 8012722:	005b      	lsls	r3, r3, #1
 8012724:	4413      	add	r3, r2
 8012726:	00db      	lsls	r3, r3, #3
 8012728:	440b      	add	r3, r1
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d013      	beq.n	8012758 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012730:	4910      	ldr	r1, [pc, #64]	@ (8012774 <etharp_free_entry+0x60>)
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	4613      	mov	r3, r2
 8012736:	005b      	lsls	r3, r3, #1
 8012738:	4413      	add	r3, r2
 801273a:	00db      	lsls	r3, r3, #3
 801273c:	440b      	add	r3, r1
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	4618      	mov	r0, r3
 8012742:	f7f9 f851 	bl	800b7e8 <pbuf_free>
    arp_table[i].q = NULL;
 8012746:	490b      	ldr	r1, [pc, #44]	@ (8012774 <etharp_free_entry+0x60>)
 8012748:	687a      	ldr	r2, [r7, #4]
 801274a:	4613      	mov	r3, r2
 801274c:	005b      	lsls	r3, r3, #1
 801274e:	4413      	add	r3, r2
 8012750:	00db      	lsls	r3, r3, #3
 8012752:	440b      	add	r3, r1
 8012754:	2200      	movs	r2, #0
 8012756:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012758:	4906      	ldr	r1, [pc, #24]	@ (8012774 <etharp_free_entry+0x60>)
 801275a:	687a      	ldr	r2, [r7, #4]
 801275c:	4613      	mov	r3, r2
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	4413      	add	r3, r2
 8012762:	00db      	lsls	r3, r3, #3
 8012764:	440b      	add	r3, r1
 8012766:	3314      	adds	r3, #20
 8012768:	2200      	movs	r2, #0
 801276a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801276c:	bf00      	nop
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	2000bec8 	.word	0x2000bec8

08012778 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801277e:	2300      	movs	r3, #0
 8012780:	607b      	str	r3, [r7, #4]
 8012782:	e096      	b.n	80128b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012784:	494f      	ldr	r1, [pc, #316]	@ (80128c4 <etharp_tmr+0x14c>)
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	4613      	mov	r3, r2
 801278a:	005b      	lsls	r3, r3, #1
 801278c:	4413      	add	r3, r2
 801278e:	00db      	lsls	r3, r3, #3
 8012790:	440b      	add	r3, r1
 8012792:	3314      	adds	r3, #20
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012798:	78fb      	ldrb	r3, [r7, #3]
 801279a:	2b00      	cmp	r3, #0
 801279c:	f000 8086 	beq.w	80128ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80127a0:	4948      	ldr	r1, [pc, #288]	@ (80128c4 <etharp_tmr+0x14c>)
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	4613      	mov	r3, r2
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	4413      	add	r3, r2
 80127aa:	00db      	lsls	r3, r3, #3
 80127ac:	440b      	add	r3, r1
 80127ae:	3312      	adds	r3, #18
 80127b0:	881b      	ldrh	r3, [r3, #0]
 80127b2:	3301      	adds	r3, #1
 80127b4:	b298      	uxth	r0, r3
 80127b6:	4943      	ldr	r1, [pc, #268]	@ (80128c4 <etharp_tmr+0x14c>)
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	4613      	mov	r3, r2
 80127bc:	005b      	lsls	r3, r3, #1
 80127be:	4413      	add	r3, r2
 80127c0:	00db      	lsls	r3, r3, #3
 80127c2:	440b      	add	r3, r1
 80127c4:	3312      	adds	r3, #18
 80127c6:	4602      	mov	r2, r0
 80127c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80127ca:	493e      	ldr	r1, [pc, #248]	@ (80128c4 <etharp_tmr+0x14c>)
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	4613      	mov	r3, r2
 80127d0:	005b      	lsls	r3, r3, #1
 80127d2:	4413      	add	r3, r2
 80127d4:	00db      	lsls	r3, r3, #3
 80127d6:	440b      	add	r3, r1
 80127d8:	3312      	adds	r3, #18
 80127da:	881b      	ldrh	r3, [r3, #0]
 80127dc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80127e0:	d215      	bcs.n	801280e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80127e2:	4938      	ldr	r1, [pc, #224]	@ (80128c4 <etharp_tmr+0x14c>)
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	4613      	mov	r3, r2
 80127e8:	005b      	lsls	r3, r3, #1
 80127ea:	4413      	add	r3, r2
 80127ec:	00db      	lsls	r3, r3, #3
 80127ee:	440b      	add	r3, r1
 80127f0:	3314      	adds	r3, #20
 80127f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80127f4:	2b01      	cmp	r3, #1
 80127f6:	d10e      	bne.n	8012816 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80127f8:	4932      	ldr	r1, [pc, #200]	@ (80128c4 <etharp_tmr+0x14c>)
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	4613      	mov	r3, r2
 80127fe:	005b      	lsls	r3, r3, #1
 8012800:	4413      	add	r3, r2
 8012802:	00db      	lsls	r3, r3, #3
 8012804:	440b      	add	r3, r1
 8012806:	3312      	adds	r3, #18
 8012808:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801280a:	2b04      	cmp	r3, #4
 801280c:	d903      	bls.n	8012816 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f7ff ff80 	bl	8012714 <etharp_free_entry>
 8012814:	e04a      	b.n	80128ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012816:	492b      	ldr	r1, [pc, #172]	@ (80128c4 <etharp_tmr+0x14c>)
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	4613      	mov	r3, r2
 801281c:	005b      	lsls	r3, r3, #1
 801281e:	4413      	add	r3, r2
 8012820:	00db      	lsls	r3, r3, #3
 8012822:	440b      	add	r3, r1
 8012824:	3314      	adds	r3, #20
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	2b03      	cmp	r3, #3
 801282a:	d10a      	bne.n	8012842 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801282c:	4925      	ldr	r1, [pc, #148]	@ (80128c4 <etharp_tmr+0x14c>)
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	4613      	mov	r3, r2
 8012832:	005b      	lsls	r3, r3, #1
 8012834:	4413      	add	r3, r2
 8012836:	00db      	lsls	r3, r3, #3
 8012838:	440b      	add	r3, r1
 801283a:	3314      	adds	r3, #20
 801283c:	2204      	movs	r2, #4
 801283e:	701a      	strb	r2, [r3, #0]
 8012840:	e034      	b.n	80128ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012842:	4920      	ldr	r1, [pc, #128]	@ (80128c4 <etharp_tmr+0x14c>)
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	4613      	mov	r3, r2
 8012848:	005b      	lsls	r3, r3, #1
 801284a:	4413      	add	r3, r2
 801284c:	00db      	lsls	r3, r3, #3
 801284e:	440b      	add	r3, r1
 8012850:	3314      	adds	r3, #20
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	2b04      	cmp	r3, #4
 8012856:	d10a      	bne.n	801286e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012858:	491a      	ldr	r1, [pc, #104]	@ (80128c4 <etharp_tmr+0x14c>)
 801285a:	687a      	ldr	r2, [r7, #4]
 801285c:	4613      	mov	r3, r2
 801285e:	005b      	lsls	r3, r3, #1
 8012860:	4413      	add	r3, r2
 8012862:	00db      	lsls	r3, r3, #3
 8012864:	440b      	add	r3, r1
 8012866:	3314      	adds	r3, #20
 8012868:	2202      	movs	r2, #2
 801286a:	701a      	strb	r2, [r3, #0]
 801286c:	e01e      	b.n	80128ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801286e:	4915      	ldr	r1, [pc, #84]	@ (80128c4 <etharp_tmr+0x14c>)
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	4613      	mov	r3, r2
 8012874:	005b      	lsls	r3, r3, #1
 8012876:	4413      	add	r3, r2
 8012878:	00db      	lsls	r3, r3, #3
 801287a:	440b      	add	r3, r1
 801287c:	3314      	adds	r3, #20
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	2b01      	cmp	r3, #1
 8012882:	d113      	bne.n	80128ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012884:	490f      	ldr	r1, [pc, #60]	@ (80128c4 <etharp_tmr+0x14c>)
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	4613      	mov	r3, r2
 801288a:	005b      	lsls	r3, r3, #1
 801288c:	4413      	add	r3, r2
 801288e:	00db      	lsls	r3, r3, #3
 8012890:	440b      	add	r3, r1
 8012892:	3308      	adds	r3, #8
 8012894:	6818      	ldr	r0, [r3, #0]
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	4613      	mov	r3, r2
 801289a:	005b      	lsls	r3, r3, #1
 801289c:	4413      	add	r3, r2
 801289e:	00db      	lsls	r3, r3, #3
 80128a0:	4a08      	ldr	r2, [pc, #32]	@ (80128c4 <etharp_tmr+0x14c>)
 80128a2:	4413      	add	r3, r2
 80128a4:	3304      	adds	r3, #4
 80128a6:	4619      	mov	r1, r3
 80128a8:	f000 fe6e 	bl	8013588 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	3301      	adds	r3, #1
 80128b0:	607b      	str	r3, [r7, #4]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2b09      	cmp	r3, #9
 80128b6:	f77f af65 	ble.w	8012784 <etharp_tmr+0xc>
      }
    }
  }
}
 80128ba:	bf00      	nop
 80128bc:	bf00      	nop
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	2000bec8 	.word	0x2000bec8

080128c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b08a      	sub	sp, #40	@ 0x28
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	60f8      	str	r0, [r7, #12]
 80128d0:	460b      	mov	r3, r1
 80128d2:	607a      	str	r2, [r7, #4]
 80128d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80128d6:	230a      	movs	r3, #10
 80128d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80128da:	230a      	movs	r3, #10
 80128dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80128de:	230a      	movs	r3, #10
 80128e0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80128e2:	2300      	movs	r3, #0
 80128e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80128e6:	230a      	movs	r3, #10
 80128e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80128ea:	2300      	movs	r3, #0
 80128ec:	83bb      	strh	r3, [r7, #28]
 80128ee:	2300      	movs	r3, #0
 80128f0:	837b      	strh	r3, [r7, #26]
 80128f2:	2300      	movs	r3, #0
 80128f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128f6:	2300      	movs	r3, #0
 80128f8:	843b      	strh	r3, [r7, #32]
 80128fa:	e0ae      	b.n	8012a5a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80128fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012900:	49a6      	ldr	r1, [pc, #664]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012902:	4613      	mov	r3, r2
 8012904:	005b      	lsls	r3, r3, #1
 8012906:	4413      	add	r3, r2
 8012908:	00db      	lsls	r3, r3, #3
 801290a:	440b      	add	r3, r1
 801290c:	3314      	adds	r3, #20
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012912:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012916:	2b0a      	cmp	r3, #10
 8012918:	d105      	bne.n	8012926 <etharp_find_entry+0x5e>
 801291a:	7dfb      	ldrb	r3, [r7, #23]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d102      	bne.n	8012926 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012920:	8c3b      	ldrh	r3, [r7, #32]
 8012922:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012924:	e095      	b.n	8012a52 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012926:	7dfb      	ldrb	r3, [r7, #23]
 8012928:	2b00      	cmp	r3, #0
 801292a:	f000 8092 	beq.w	8012a52 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801292e:	7dfb      	ldrb	r3, [r7, #23]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d009      	beq.n	8012948 <etharp_find_entry+0x80>
 8012934:	7dfb      	ldrb	r3, [r7, #23]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d806      	bhi.n	8012948 <etharp_find_entry+0x80>
 801293a:	4b99      	ldr	r3, [pc, #612]	@ (8012ba0 <etharp_find_entry+0x2d8>)
 801293c:	f240 1223 	movw	r2, #291	@ 0x123
 8012940:	4998      	ldr	r1, [pc, #608]	@ (8012ba4 <etharp_find_entry+0x2dc>)
 8012942:	4899      	ldr	r0, [pc, #612]	@ (8012ba8 <etharp_find_entry+0x2e0>)
 8012944:	f002 fc8e 	bl	8015264 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d020      	beq.n	8012990 <etharp_find_entry+0xc8>
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	6819      	ldr	r1, [r3, #0]
 8012952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012956:	4891      	ldr	r0, [pc, #580]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012958:	4613      	mov	r3, r2
 801295a:	005b      	lsls	r3, r3, #1
 801295c:	4413      	add	r3, r2
 801295e:	00db      	lsls	r3, r3, #3
 8012960:	4403      	add	r3, r0
 8012962:	3304      	adds	r3, #4
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	4299      	cmp	r1, r3
 8012968:	d112      	bne.n	8012990 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d00c      	beq.n	801298a <etharp_find_entry+0xc2>
 8012970:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012974:	4989      	ldr	r1, [pc, #548]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012976:	4613      	mov	r3, r2
 8012978:	005b      	lsls	r3, r3, #1
 801297a:	4413      	add	r3, r2
 801297c:	00db      	lsls	r3, r3, #3
 801297e:	440b      	add	r3, r1
 8012980:	3308      	adds	r3, #8
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	429a      	cmp	r2, r3
 8012988:	d102      	bne.n	8012990 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801298a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801298e:	e100      	b.n	8012b92 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012990:	7dfb      	ldrb	r3, [r7, #23]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d140      	bne.n	8012a18 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801299a:	4980      	ldr	r1, [pc, #512]	@ (8012b9c <etharp_find_entry+0x2d4>)
 801299c:	4613      	mov	r3, r2
 801299e:	005b      	lsls	r3, r3, #1
 80129a0:	4413      	add	r3, r2
 80129a2:	00db      	lsls	r3, r3, #3
 80129a4:	440b      	add	r3, r1
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d01a      	beq.n	80129e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80129ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129b0:	497a      	ldr	r1, [pc, #488]	@ (8012b9c <etharp_find_entry+0x2d4>)
 80129b2:	4613      	mov	r3, r2
 80129b4:	005b      	lsls	r3, r3, #1
 80129b6:	4413      	add	r3, r2
 80129b8:	00db      	lsls	r3, r3, #3
 80129ba:	440b      	add	r3, r1
 80129bc:	3312      	adds	r3, #18
 80129be:	881b      	ldrh	r3, [r3, #0]
 80129c0:	8bba      	ldrh	r2, [r7, #28]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d845      	bhi.n	8012a52 <etharp_find_entry+0x18a>
            old_queue = i;
 80129c6:	8c3b      	ldrh	r3, [r7, #32]
 80129c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80129ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129ce:	4973      	ldr	r1, [pc, #460]	@ (8012b9c <etharp_find_entry+0x2d4>)
 80129d0:	4613      	mov	r3, r2
 80129d2:	005b      	lsls	r3, r3, #1
 80129d4:	4413      	add	r3, r2
 80129d6:	00db      	lsls	r3, r3, #3
 80129d8:	440b      	add	r3, r1
 80129da:	3312      	adds	r3, #18
 80129dc:	881b      	ldrh	r3, [r3, #0]
 80129de:	83bb      	strh	r3, [r7, #28]
 80129e0:	e037      	b.n	8012a52 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80129e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129e6:	496d      	ldr	r1, [pc, #436]	@ (8012b9c <etharp_find_entry+0x2d4>)
 80129e8:	4613      	mov	r3, r2
 80129ea:	005b      	lsls	r3, r3, #1
 80129ec:	4413      	add	r3, r2
 80129ee:	00db      	lsls	r3, r3, #3
 80129f0:	440b      	add	r3, r1
 80129f2:	3312      	adds	r3, #18
 80129f4:	881b      	ldrh	r3, [r3, #0]
 80129f6:	8b7a      	ldrh	r2, [r7, #26]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d82a      	bhi.n	8012a52 <etharp_find_entry+0x18a>
            old_pending = i;
 80129fc:	8c3b      	ldrh	r3, [r7, #32]
 80129fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012a00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a04:	4965      	ldr	r1, [pc, #404]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012a06:	4613      	mov	r3, r2
 8012a08:	005b      	lsls	r3, r3, #1
 8012a0a:	4413      	add	r3, r2
 8012a0c:	00db      	lsls	r3, r3, #3
 8012a0e:	440b      	add	r3, r1
 8012a10:	3312      	adds	r3, #18
 8012a12:	881b      	ldrh	r3, [r3, #0]
 8012a14:	837b      	strh	r3, [r7, #26]
 8012a16:	e01c      	b.n	8012a52 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012a18:	7dfb      	ldrb	r3, [r7, #23]
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d919      	bls.n	8012a52 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012a1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a22:	495e      	ldr	r1, [pc, #376]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012a24:	4613      	mov	r3, r2
 8012a26:	005b      	lsls	r3, r3, #1
 8012a28:	4413      	add	r3, r2
 8012a2a:	00db      	lsls	r3, r3, #3
 8012a2c:	440b      	add	r3, r1
 8012a2e:	3312      	adds	r3, #18
 8012a30:	881b      	ldrh	r3, [r3, #0]
 8012a32:	8b3a      	ldrh	r2, [r7, #24]
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d80c      	bhi.n	8012a52 <etharp_find_entry+0x18a>
            old_stable = i;
 8012a38:	8c3b      	ldrh	r3, [r7, #32]
 8012a3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012a3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a40:	4956      	ldr	r1, [pc, #344]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012a42:	4613      	mov	r3, r2
 8012a44:	005b      	lsls	r3, r3, #1
 8012a46:	4413      	add	r3, r2
 8012a48:	00db      	lsls	r3, r3, #3
 8012a4a:	440b      	add	r3, r1
 8012a4c:	3312      	adds	r3, #18
 8012a4e:	881b      	ldrh	r3, [r3, #0]
 8012a50:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a52:	8c3b      	ldrh	r3, [r7, #32]
 8012a54:	3301      	adds	r3, #1
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	843b      	strh	r3, [r7, #32]
 8012a5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a5e:	2b09      	cmp	r3, #9
 8012a60:	f77f af4c 	ble.w	80128fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012a64:	7afb      	ldrb	r3, [r7, #11]
 8012a66:	f003 0302 	and.w	r3, r3, #2
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d108      	bne.n	8012a80 <etharp_find_entry+0x1b8>
 8012a6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012a72:	2b0a      	cmp	r3, #10
 8012a74:	d107      	bne.n	8012a86 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012a76:	7afb      	ldrb	r3, [r7, #11]
 8012a78:	f003 0301 	and.w	r3, r3, #1
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d102      	bne.n	8012a86 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012a80:	f04f 33ff 	mov.w	r3, #4294967295
 8012a84:	e085      	b.n	8012b92 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012a86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012a8a:	2b09      	cmp	r3, #9
 8012a8c:	dc02      	bgt.n	8012a94 <etharp_find_entry+0x1cc>
    i = empty;
 8012a8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012a90:	843b      	strh	r3, [r7, #32]
 8012a92:	e039      	b.n	8012b08 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012a94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012a98:	2b09      	cmp	r3, #9
 8012a9a:	dc14      	bgt.n	8012ac6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012a9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a9e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012aa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012aa4:	493d      	ldr	r1, [pc, #244]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012aa6:	4613      	mov	r3, r2
 8012aa8:	005b      	lsls	r3, r3, #1
 8012aaa:	4413      	add	r3, r2
 8012aac:	00db      	lsls	r3, r3, #3
 8012aae:	440b      	add	r3, r1
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d018      	beq.n	8012ae8 <etharp_find_entry+0x220>
 8012ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8012ba0 <etharp_find_entry+0x2d8>)
 8012ab8:	f240 126d 	movw	r2, #365	@ 0x16d
 8012abc:	493b      	ldr	r1, [pc, #236]	@ (8012bac <etharp_find_entry+0x2e4>)
 8012abe:	483a      	ldr	r0, [pc, #232]	@ (8012ba8 <etharp_find_entry+0x2e0>)
 8012ac0:	f002 fbd0 	bl	8015264 <iprintf>
 8012ac4:	e010      	b.n	8012ae8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012ac6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012aca:	2b09      	cmp	r3, #9
 8012acc:	dc02      	bgt.n	8012ad4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012ace:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012ad0:	843b      	strh	r3, [r7, #32]
 8012ad2:	e009      	b.n	8012ae8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012ad4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012ad8:	2b09      	cmp	r3, #9
 8012ada:	dc02      	bgt.n	8012ae2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012adc:	8bfb      	ldrh	r3, [r7, #30]
 8012ade:	843b      	strh	r3, [r7, #32]
 8012ae0:	e002      	b.n	8012ae8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae6:	e054      	b.n	8012b92 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012ae8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012aec:	2b09      	cmp	r3, #9
 8012aee:	dd06      	ble.n	8012afe <etharp_find_entry+0x236>
 8012af0:	4b2b      	ldr	r3, [pc, #172]	@ (8012ba0 <etharp_find_entry+0x2d8>)
 8012af2:	f240 127f 	movw	r2, #383	@ 0x17f
 8012af6:	492e      	ldr	r1, [pc, #184]	@ (8012bb0 <etharp_find_entry+0x2e8>)
 8012af8:	482b      	ldr	r0, [pc, #172]	@ (8012ba8 <etharp_find_entry+0x2e0>)
 8012afa:	f002 fbb3 	bl	8015264 <iprintf>
    etharp_free_entry(i);
 8012afe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7ff fe06 	bl	8012714 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b0c:	2b09      	cmp	r3, #9
 8012b0e:	dd06      	ble.n	8012b1e <etharp_find_entry+0x256>
 8012b10:	4b23      	ldr	r3, [pc, #140]	@ (8012ba0 <etharp_find_entry+0x2d8>)
 8012b12:	f240 1283 	movw	r2, #387	@ 0x183
 8012b16:	4926      	ldr	r1, [pc, #152]	@ (8012bb0 <etharp_find_entry+0x2e8>)
 8012b18:	4823      	ldr	r0, [pc, #140]	@ (8012ba8 <etharp_find_entry+0x2e0>)
 8012b1a:	f002 fba3 	bl	8015264 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012b1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b22:	491e      	ldr	r1, [pc, #120]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012b24:	4613      	mov	r3, r2
 8012b26:	005b      	lsls	r3, r3, #1
 8012b28:	4413      	add	r3, r2
 8012b2a:	00db      	lsls	r3, r3, #3
 8012b2c:	440b      	add	r3, r1
 8012b2e:	3314      	adds	r3, #20
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d006      	beq.n	8012b44 <etharp_find_entry+0x27c>
 8012b36:	4b1a      	ldr	r3, [pc, #104]	@ (8012ba0 <etharp_find_entry+0x2d8>)
 8012b38:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012b3c:	491d      	ldr	r1, [pc, #116]	@ (8012bb4 <etharp_find_entry+0x2ec>)
 8012b3e:	481a      	ldr	r0, [pc, #104]	@ (8012ba8 <etharp_find_entry+0x2e0>)
 8012b40:	f002 fb90 	bl	8015264 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d00b      	beq.n	8012b62 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012b4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	6819      	ldr	r1, [r3, #0]
 8012b52:	4812      	ldr	r0, [pc, #72]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012b54:	4613      	mov	r3, r2
 8012b56:	005b      	lsls	r3, r3, #1
 8012b58:	4413      	add	r3, r2
 8012b5a:	00db      	lsls	r3, r3, #3
 8012b5c:	4403      	add	r3, r0
 8012b5e:	3304      	adds	r3, #4
 8012b60:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012b62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b66:	490d      	ldr	r1, [pc, #52]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012b68:	4613      	mov	r3, r2
 8012b6a:	005b      	lsls	r3, r3, #1
 8012b6c:	4413      	add	r3, r2
 8012b6e:	00db      	lsls	r3, r3, #3
 8012b70:	440b      	add	r3, r1
 8012b72:	3312      	adds	r3, #18
 8012b74:	2200      	movs	r2, #0
 8012b76:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012b78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b7c:	4907      	ldr	r1, [pc, #28]	@ (8012b9c <etharp_find_entry+0x2d4>)
 8012b7e:	4613      	mov	r3, r2
 8012b80:	005b      	lsls	r3, r3, #1
 8012b82:	4413      	add	r3, r2
 8012b84:	00db      	lsls	r3, r3, #3
 8012b86:	440b      	add	r3, r1
 8012b88:	3308      	adds	r3, #8
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012b8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3728      	adds	r7, #40	@ 0x28
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	2000bec8 	.word	0x2000bec8
 8012ba0:	08019110 	.word	0x08019110
 8012ba4:	08019148 	.word	0x08019148
 8012ba8:	08019188 	.word	0x08019188
 8012bac:	080191b0 	.word	0x080191b0
 8012bb0:	080191c8 	.word	0x080191c8
 8012bb4:	080191dc 	.word	0x080191dc

08012bb8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b088      	sub	sp, #32
 8012bbc:	af02      	add	r7, sp, #8
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
 8012bc4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012bcc:	2b06      	cmp	r3, #6
 8012bce:	d006      	beq.n	8012bde <etharp_update_arp_entry+0x26>
 8012bd0:	4b48      	ldr	r3, [pc, #288]	@ (8012cf4 <etharp_update_arp_entry+0x13c>)
 8012bd2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012bd6:	4948      	ldr	r1, [pc, #288]	@ (8012cf8 <etharp_update_arp_entry+0x140>)
 8012bd8:	4848      	ldr	r0, [pc, #288]	@ (8012cfc <etharp_update_arp_entry+0x144>)
 8012bda:	f002 fb43 	bl	8015264 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d012      	beq.n	8012c0a <etharp_update_arp_entry+0x52>
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d00e      	beq.n	8012c0a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	68f9      	ldr	r1, [r7, #12]
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f001 f8fe 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 8012bf8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d105      	bne.n	8012c0a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c06:	2be0      	cmp	r3, #224	@ 0xe0
 8012c08:	d102      	bne.n	8012c10 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012c0a:	f06f 030f 	mvn.w	r3, #15
 8012c0e:	e06c      	b.n	8012cea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012c10:	78fb      	ldrb	r3, [r7, #3]
 8012c12:	68fa      	ldr	r2, [r7, #12]
 8012c14:	4619      	mov	r1, r3
 8012c16:	68b8      	ldr	r0, [r7, #8]
 8012c18:	f7ff fe56 	bl	80128c8 <etharp_find_entry>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012c20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	da02      	bge.n	8012c2e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012c28:	8afb      	ldrh	r3, [r7, #22]
 8012c2a:	b25b      	sxtb	r3, r3
 8012c2c:	e05d      	b.n	8012cea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012c2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c32:	4933      	ldr	r1, [pc, #204]	@ (8012d00 <etharp_update_arp_entry+0x148>)
 8012c34:	4613      	mov	r3, r2
 8012c36:	005b      	lsls	r3, r3, #1
 8012c38:	4413      	add	r3, r2
 8012c3a:	00db      	lsls	r3, r3, #3
 8012c3c:	440b      	add	r3, r1
 8012c3e:	3314      	adds	r3, #20
 8012c40:	2202      	movs	r2, #2
 8012c42:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012c44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c48:	492d      	ldr	r1, [pc, #180]	@ (8012d00 <etharp_update_arp_entry+0x148>)
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	005b      	lsls	r3, r3, #1
 8012c4e:	4413      	add	r3, r2
 8012c50:	00db      	lsls	r3, r3, #3
 8012c52:	440b      	add	r3, r1
 8012c54:	3308      	adds	r3, #8
 8012c56:	68fa      	ldr	r2, [r7, #12]
 8012c58:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012c5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c5e:	4613      	mov	r3, r2
 8012c60:	005b      	lsls	r3, r3, #1
 8012c62:	4413      	add	r3, r2
 8012c64:	00db      	lsls	r3, r3, #3
 8012c66:	3308      	adds	r3, #8
 8012c68:	4a25      	ldr	r2, [pc, #148]	@ (8012d00 <etharp_update_arp_entry+0x148>)
 8012c6a:	4413      	add	r3, r2
 8012c6c:	3304      	adds	r3, #4
 8012c6e:	2206      	movs	r2, #6
 8012c70:	6879      	ldr	r1, [r7, #4]
 8012c72:	4618      	mov	r0, r3
 8012c74:	f002 fc39 	bl	80154ea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012c78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c7c:	4920      	ldr	r1, [pc, #128]	@ (8012d00 <etharp_update_arp_entry+0x148>)
 8012c7e:	4613      	mov	r3, r2
 8012c80:	005b      	lsls	r3, r3, #1
 8012c82:	4413      	add	r3, r2
 8012c84:	00db      	lsls	r3, r3, #3
 8012c86:	440b      	add	r3, r1
 8012c88:	3312      	adds	r3, #18
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012c8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c92:	491b      	ldr	r1, [pc, #108]	@ (8012d00 <etharp_update_arp_entry+0x148>)
 8012c94:	4613      	mov	r3, r2
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	4413      	add	r3, r2
 8012c9a:	00db      	lsls	r3, r3, #3
 8012c9c:	440b      	add	r3, r1
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d021      	beq.n	8012ce8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ca8:	4915      	ldr	r1, [pc, #84]	@ (8012d00 <etharp_update_arp_entry+0x148>)
 8012caa:	4613      	mov	r3, r2
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	4413      	add	r3, r2
 8012cb0:	00db      	lsls	r3, r3, #3
 8012cb2:	440b      	add	r3, r1
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012cb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cbc:	4910      	ldr	r1, [pc, #64]	@ (8012d00 <etharp_update_arp_entry+0x148>)
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	005b      	lsls	r3, r3, #1
 8012cc2:	4413      	add	r3, r2
 8012cc4:	00db      	lsls	r3, r3, #3
 8012cc6:	440b      	add	r3, r1
 8012cc8:	2200      	movs	r2, #0
 8012cca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012cd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012cd6:	9300      	str	r3, [sp, #0]
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6939      	ldr	r1, [r7, #16]
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f001 ff97 	bl	8014c10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012ce2:	6938      	ldr	r0, [r7, #16]
 8012ce4:	f7f8 fd80 	bl	800b7e8 <pbuf_free>
  }
  return ERR_OK;
 8012ce8:	2300      	movs	r3, #0
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3718      	adds	r7, #24
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	08019110 	.word	0x08019110
 8012cf8:	08019208 	.word	0x08019208
 8012cfc:	08019188 	.word	0x08019188
 8012d00:	2000bec8 	.word	0x2000bec8

08012d04 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	60fb      	str	r3, [r7, #12]
 8012d10:	e01e      	b.n	8012d50 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012d12:	4913      	ldr	r1, [pc, #76]	@ (8012d60 <etharp_cleanup_netif+0x5c>)
 8012d14:	68fa      	ldr	r2, [r7, #12]
 8012d16:	4613      	mov	r3, r2
 8012d18:	005b      	lsls	r3, r3, #1
 8012d1a:	4413      	add	r3, r2
 8012d1c:	00db      	lsls	r3, r3, #3
 8012d1e:	440b      	add	r3, r1
 8012d20:	3314      	adds	r3, #20
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012d26:	7afb      	ldrb	r3, [r7, #11]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d00e      	beq.n	8012d4a <etharp_cleanup_netif+0x46>
 8012d2c:	490c      	ldr	r1, [pc, #48]	@ (8012d60 <etharp_cleanup_netif+0x5c>)
 8012d2e:	68fa      	ldr	r2, [r7, #12]
 8012d30:	4613      	mov	r3, r2
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	4413      	add	r3, r2
 8012d36:	00db      	lsls	r3, r3, #3
 8012d38:	440b      	add	r3, r1
 8012d3a:	3308      	adds	r3, #8
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d102      	bne.n	8012d4a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012d44:	68f8      	ldr	r0, [r7, #12]
 8012d46:	f7ff fce5 	bl	8012714 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	60fb      	str	r3, [r7, #12]
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2b09      	cmp	r3, #9
 8012d54:	dddd      	ble.n	8012d12 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012d56:	bf00      	nop
 8012d58:	bf00      	nop
 8012d5a:	3710      	adds	r7, #16
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	2000bec8 	.word	0x2000bec8

08012d64 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012d64:	b5b0      	push	{r4, r5, r7, lr}
 8012d66:	b08a      	sub	sp, #40	@ 0x28
 8012d68:	af04      	add	r7, sp, #16
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d107      	bne.n	8012d84 <etharp_input+0x20>
 8012d74:	4b3d      	ldr	r3, [pc, #244]	@ (8012e6c <etharp_input+0x108>)
 8012d76:	f240 228a 	movw	r2, #650	@ 0x28a
 8012d7a:	493d      	ldr	r1, [pc, #244]	@ (8012e70 <etharp_input+0x10c>)
 8012d7c:	483d      	ldr	r0, [pc, #244]	@ (8012e74 <etharp_input+0x110>)
 8012d7e:	f002 fa71 	bl	8015264 <iprintf>
 8012d82:	e06f      	b.n	8012e64 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	881b      	ldrh	r3, [r3, #0]
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d94:	d10c      	bne.n	8012db0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012d9a:	2b06      	cmp	r3, #6
 8012d9c:	d108      	bne.n	8012db0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012da2:	2b04      	cmp	r3, #4
 8012da4:	d104      	bne.n	8012db0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	885b      	ldrh	r3, [r3, #2]
 8012daa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012dac:	2b08      	cmp	r3, #8
 8012dae:	d003      	beq.n	8012db8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7f8 fd19 	bl	800b7e8 <pbuf_free>
    return;
 8012db6:	e055      	b.n	8012e64 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	330e      	adds	r3, #14
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	3318      	adds	r3, #24
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	3304      	adds	r3, #4
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d102      	bne.n	8012dd8 <etharp_input+0x74>
    for_us = 0;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	75fb      	strb	r3, [r7, #23]
 8012dd6:	e009      	b.n	8012dec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012dd8:	68ba      	ldr	r2, [r7, #8]
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	bf0c      	ite	eq
 8012de4:	2301      	moveq	r3, #1
 8012de6:	2300      	movne	r3, #0
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	f103 0208 	add.w	r2, r3, #8
 8012df2:	7dfb      	ldrb	r3, [r7, #23]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d001      	beq.n	8012dfc <etharp_input+0x98>
 8012df8:	2301      	movs	r3, #1
 8012dfa:	e000      	b.n	8012dfe <etharp_input+0x9a>
 8012dfc:	2302      	movs	r3, #2
 8012dfe:	f107 010c 	add.w	r1, r7, #12
 8012e02:	6838      	ldr	r0, [r7, #0]
 8012e04:	f7ff fed8 	bl	8012bb8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	88db      	ldrh	r3, [r3, #6]
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e12:	d003      	beq.n	8012e1c <etharp_input+0xb8>
 8012e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e18:	d01e      	beq.n	8012e58 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012e1a:	e020      	b.n	8012e5e <etharp_input+0xfa>
      if (for_us) {
 8012e1c:	7dfb      	ldrb	r3, [r7, #23]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d01c      	beq.n	8012e5c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012e38:	693a      	ldr	r2, [r7, #16]
 8012e3a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012e3c:	2102      	movs	r1, #2
 8012e3e:	9103      	str	r1, [sp, #12]
 8012e40:	f107 010c 	add.w	r1, r7, #12
 8012e44:	9102      	str	r1, [sp, #8]
 8012e46:	9201      	str	r2, [sp, #4]
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	462b      	mov	r3, r5
 8012e4c:	4622      	mov	r2, r4
 8012e4e:	4601      	mov	r1, r0
 8012e50:	6838      	ldr	r0, [r7, #0]
 8012e52:	f000 faeb 	bl	801342c <etharp_raw>
      break;
 8012e56:	e001      	b.n	8012e5c <etharp_input+0xf8>
      break;
 8012e58:	bf00      	nop
 8012e5a:	e000      	b.n	8012e5e <etharp_input+0xfa>
      break;
 8012e5c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7f8 fcc2 	bl	800b7e8 <pbuf_free>
}
 8012e64:	3718      	adds	r7, #24
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bdb0      	pop	{r4, r5, r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	08019110 	.word	0x08019110
 8012e70:	08019260 	.word	0x08019260
 8012e74:	08019188 	.word	0x08019188

08012e78 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b086      	sub	sp, #24
 8012e7c:	af02      	add	r7, sp, #8
 8012e7e:	60f8      	str	r0, [r7, #12]
 8012e80:	60b9      	str	r1, [r7, #8]
 8012e82:	4613      	mov	r3, r2
 8012e84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012e86:	79fa      	ldrb	r2, [r7, #7]
 8012e88:	4944      	ldr	r1, [pc, #272]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012e8a:	4613      	mov	r3, r2
 8012e8c:	005b      	lsls	r3, r3, #1
 8012e8e:	4413      	add	r3, r2
 8012e90:	00db      	lsls	r3, r3, #3
 8012e92:	440b      	add	r3, r1
 8012e94:	3314      	adds	r3, #20
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d806      	bhi.n	8012eaa <etharp_output_to_arp_index+0x32>
 8012e9c:	4b40      	ldr	r3, [pc, #256]	@ (8012fa0 <etharp_output_to_arp_index+0x128>)
 8012e9e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012ea2:	4940      	ldr	r1, [pc, #256]	@ (8012fa4 <etharp_output_to_arp_index+0x12c>)
 8012ea4:	4840      	ldr	r0, [pc, #256]	@ (8012fa8 <etharp_output_to_arp_index+0x130>)
 8012ea6:	f002 f9dd 	bl	8015264 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012eaa:	79fa      	ldrb	r2, [r7, #7]
 8012eac:	493b      	ldr	r1, [pc, #236]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012eae:	4613      	mov	r3, r2
 8012eb0:	005b      	lsls	r3, r3, #1
 8012eb2:	4413      	add	r3, r2
 8012eb4:	00db      	lsls	r3, r3, #3
 8012eb6:	440b      	add	r3, r1
 8012eb8:	3314      	adds	r3, #20
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	2b02      	cmp	r3, #2
 8012ebe:	d153      	bne.n	8012f68 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012ec0:	79fa      	ldrb	r2, [r7, #7]
 8012ec2:	4936      	ldr	r1, [pc, #216]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012ec4:	4613      	mov	r3, r2
 8012ec6:	005b      	lsls	r3, r3, #1
 8012ec8:	4413      	add	r3, r2
 8012eca:	00db      	lsls	r3, r3, #3
 8012ecc:	440b      	add	r3, r1
 8012ece:	3312      	adds	r3, #18
 8012ed0:	881b      	ldrh	r3, [r3, #0]
 8012ed2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012ed6:	d919      	bls.n	8012f0c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012ed8:	79fa      	ldrb	r2, [r7, #7]
 8012eda:	4613      	mov	r3, r2
 8012edc:	005b      	lsls	r3, r3, #1
 8012ede:	4413      	add	r3, r2
 8012ee0:	00db      	lsls	r3, r3, #3
 8012ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012ee4:	4413      	add	r3, r2
 8012ee6:	3304      	adds	r3, #4
 8012ee8:	4619      	mov	r1, r3
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f000 fb4c 	bl	8013588 <etharp_request>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d138      	bne.n	8012f68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012ef6:	79fa      	ldrb	r2, [r7, #7]
 8012ef8:	4928      	ldr	r1, [pc, #160]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012efa:	4613      	mov	r3, r2
 8012efc:	005b      	lsls	r3, r3, #1
 8012efe:	4413      	add	r3, r2
 8012f00:	00db      	lsls	r3, r3, #3
 8012f02:	440b      	add	r3, r1
 8012f04:	3314      	adds	r3, #20
 8012f06:	2203      	movs	r2, #3
 8012f08:	701a      	strb	r2, [r3, #0]
 8012f0a:	e02d      	b.n	8012f68 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012f0c:	79fa      	ldrb	r2, [r7, #7]
 8012f0e:	4923      	ldr	r1, [pc, #140]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012f10:	4613      	mov	r3, r2
 8012f12:	005b      	lsls	r3, r3, #1
 8012f14:	4413      	add	r3, r2
 8012f16:	00db      	lsls	r3, r3, #3
 8012f18:	440b      	add	r3, r1
 8012f1a:	3312      	adds	r3, #18
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012f22:	d321      	bcc.n	8012f68 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012f24:	79fa      	ldrb	r2, [r7, #7]
 8012f26:	4613      	mov	r3, r2
 8012f28:	005b      	lsls	r3, r3, #1
 8012f2a:	4413      	add	r3, r2
 8012f2c:	00db      	lsls	r3, r3, #3
 8012f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012f30:	4413      	add	r3, r2
 8012f32:	1d19      	adds	r1, r3, #4
 8012f34:	79fa      	ldrb	r2, [r7, #7]
 8012f36:	4613      	mov	r3, r2
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	4413      	add	r3, r2
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	3308      	adds	r3, #8
 8012f40:	4a16      	ldr	r2, [pc, #88]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012f42:	4413      	add	r3, r2
 8012f44:	3304      	adds	r3, #4
 8012f46:	461a      	mov	r2, r3
 8012f48:	68f8      	ldr	r0, [r7, #12]
 8012f4a:	f000 fafb 	bl	8013544 <etharp_request_dst>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d109      	bne.n	8012f68 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f54:	79fa      	ldrb	r2, [r7, #7]
 8012f56:	4911      	ldr	r1, [pc, #68]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012f58:	4613      	mov	r3, r2
 8012f5a:	005b      	lsls	r3, r3, #1
 8012f5c:	4413      	add	r3, r2
 8012f5e:	00db      	lsls	r3, r3, #3
 8012f60:	440b      	add	r3, r1
 8012f62:	3314      	adds	r3, #20
 8012f64:	2203      	movs	r2, #3
 8012f66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012f6e:	79fa      	ldrb	r2, [r7, #7]
 8012f70:	4613      	mov	r3, r2
 8012f72:	005b      	lsls	r3, r3, #1
 8012f74:	4413      	add	r3, r2
 8012f76:	00db      	lsls	r3, r3, #3
 8012f78:	3308      	adds	r3, #8
 8012f7a:	4a08      	ldr	r2, [pc, #32]	@ (8012f9c <etharp_output_to_arp_index+0x124>)
 8012f7c:	4413      	add	r3, r2
 8012f7e:	3304      	adds	r3, #4
 8012f80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012f84:	9200      	str	r2, [sp, #0]
 8012f86:	460a      	mov	r2, r1
 8012f88:	68b9      	ldr	r1, [r7, #8]
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f001 fe40 	bl	8014c10 <ethernet_output>
 8012f90:	4603      	mov	r3, r0
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	2000bec8 	.word	0x2000bec8
 8012fa0:	08019110 	.word	0x08019110
 8012fa4:	08019280 	.word	0x08019280
 8012fa8:	08019188 	.word	0x08019188

08012fac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b08a      	sub	sp, #40	@ 0x28
 8012fb0:	af02      	add	r7, sp, #8
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	60b9      	str	r1, [r7, #8]
 8012fb6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d106      	bne.n	8012fd0 <etharp_output+0x24>
 8012fc2:	4b73      	ldr	r3, [pc, #460]	@ (8013190 <etharp_output+0x1e4>)
 8012fc4:	f240 321e 	movw	r2, #798	@ 0x31e
 8012fc8:	4972      	ldr	r1, [pc, #456]	@ (8013194 <etharp_output+0x1e8>)
 8012fca:	4873      	ldr	r0, [pc, #460]	@ (8013198 <etharp_output+0x1ec>)
 8012fcc:	f002 f94a 	bl	8015264 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d106      	bne.n	8012fe4 <etharp_output+0x38>
 8012fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8013190 <etharp_output+0x1e4>)
 8012fd8:	f240 321f 	movw	r2, #799	@ 0x31f
 8012fdc:	496f      	ldr	r1, [pc, #444]	@ (801319c <etharp_output+0x1f0>)
 8012fde:	486e      	ldr	r0, [pc, #440]	@ (8013198 <etharp_output+0x1ec>)
 8012fe0:	f002 f940 	bl	8015264 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d106      	bne.n	8012ff8 <etharp_output+0x4c>
 8012fea:	4b69      	ldr	r3, [pc, #420]	@ (8013190 <etharp_output+0x1e4>)
 8012fec:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012ff0:	496b      	ldr	r1, [pc, #428]	@ (80131a0 <etharp_output+0x1f4>)
 8012ff2:	4869      	ldr	r0, [pc, #420]	@ (8013198 <etharp_output+0x1ec>)
 8012ff4:	f002 f936 	bl	8015264 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	68f9      	ldr	r1, [r7, #12]
 8012ffe:	4618      	mov	r0, r3
 8013000:	f000 fef8 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d002      	beq.n	8013010 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801300a:	4b66      	ldr	r3, [pc, #408]	@ (80131a4 <etharp_output+0x1f8>)
 801300c:	61fb      	str	r3, [r7, #28]
 801300e:	e0af      	b.n	8013170 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013018:	2be0      	cmp	r3, #224	@ 0xe0
 801301a:	d118      	bne.n	801304e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801301c:	2301      	movs	r3, #1
 801301e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013020:	2300      	movs	r3, #0
 8013022:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013024:	235e      	movs	r3, #94	@ 0x5e
 8013026:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	3301      	adds	r3, #1
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013032:	b2db      	uxtb	r3, r3
 8013034:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	3302      	adds	r3, #2
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	3303      	adds	r3, #3
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013046:	f107 0310 	add.w	r3, r7, #16
 801304a:	61fb      	str	r3, [r7, #28]
 801304c:	e090      	b.n	8013170 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	3304      	adds	r3, #4
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	405a      	eors	r2, r3
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	3308      	adds	r3, #8
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4013      	ands	r3, r2
 8013062:	2b00      	cmp	r3, #0
 8013064:	d012      	beq.n	801308c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801306c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8013070:	4293      	cmp	r3, r2
 8013072:	d00b      	beq.n	801308c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	330c      	adds	r3, #12
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d003      	beq.n	8013086 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	330c      	adds	r3, #12
 8013082:	61bb      	str	r3, [r7, #24]
 8013084:	e002      	b.n	801308c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013086:	f06f 0303 	mvn.w	r3, #3
 801308a:	e07d      	b.n	8013188 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801308c:	4b46      	ldr	r3, [pc, #280]	@ (80131a8 <etharp_output+0x1fc>)
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	4619      	mov	r1, r3
 8013092:	4a46      	ldr	r2, [pc, #280]	@ (80131ac <etharp_output+0x200>)
 8013094:	460b      	mov	r3, r1
 8013096:	005b      	lsls	r3, r3, #1
 8013098:	440b      	add	r3, r1
 801309a:	00db      	lsls	r3, r3, #3
 801309c:	4413      	add	r3, r2
 801309e:	3314      	adds	r3, #20
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d925      	bls.n	80130f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80130a6:	4b40      	ldr	r3, [pc, #256]	@ (80131a8 <etharp_output+0x1fc>)
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	4619      	mov	r1, r3
 80130ac:	4a3f      	ldr	r2, [pc, #252]	@ (80131ac <etharp_output+0x200>)
 80130ae:	460b      	mov	r3, r1
 80130b0:	005b      	lsls	r3, r3, #1
 80130b2:	440b      	add	r3, r1
 80130b4:	00db      	lsls	r3, r3, #3
 80130b6:	4413      	add	r3, r2
 80130b8:	3308      	adds	r3, #8
 80130ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d117      	bne.n	80130f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	681a      	ldr	r2, [r3, #0]
 80130c6:	4b38      	ldr	r3, [pc, #224]	@ (80131a8 <etharp_output+0x1fc>)
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	4618      	mov	r0, r3
 80130cc:	4937      	ldr	r1, [pc, #220]	@ (80131ac <etharp_output+0x200>)
 80130ce:	4603      	mov	r3, r0
 80130d0:	005b      	lsls	r3, r3, #1
 80130d2:	4403      	add	r3, r0
 80130d4:	00db      	lsls	r3, r3, #3
 80130d6:	440b      	add	r3, r1
 80130d8:	3304      	adds	r3, #4
 80130da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80130dc:	429a      	cmp	r2, r3
 80130de:	d108      	bne.n	80130f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80130e0:	4b31      	ldr	r3, [pc, #196]	@ (80131a8 <etharp_output+0x1fc>)
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	461a      	mov	r2, r3
 80130e6:	68b9      	ldr	r1, [r7, #8]
 80130e8:	68f8      	ldr	r0, [r7, #12]
 80130ea:	f7ff fec5 	bl	8012e78 <etharp_output_to_arp_index>
 80130ee:	4603      	mov	r3, r0
 80130f0:	e04a      	b.n	8013188 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80130f2:	2300      	movs	r3, #0
 80130f4:	75fb      	strb	r3, [r7, #23]
 80130f6:	e031      	b.n	801315c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80130f8:	7dfa      	ldrb	r2, [r7, #23]
 80130fa:	492c      	ldr	r1, [pc, #176]	@ (80131ac <etharp_output+0x200>)
 80130fc:	4613      	mov	r3, r2
 80130fe:	005b      	lsls	r3, r3, #1
 8013100:	4413      	add	r3, r2
 8013102:	00db      	lsls	r3, r3, #3
 8013104:	440b      	add	r3, r1
 8013106:	3314      	adds	r3, #20
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	2b01      	cmp	r3, #1
 801310c:	d923      	bls.n	8013156 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801310e:	7dfa      	ldrb	r2, [r7, #23]
 8013110:	4926      	ldr	r1, [pc, #152]	@ (80131ac <etharp_output+0x200>)
 8013112:	4613      	mov	r3, r2
 8013114:	005b      	lsls	r3, r3, #1
 8013116:	4413      	add	r3, r2
 8013118:	00db      	lsls	r3, r3, #3
 801311a:	440b      	add	r3, r1
 801311c:	3308      	adds	r3, #8
 801311e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013120:	68fa      	ldr	r2, [r7, #12]
 8013122:	429a      	cmp	r2, r3
 8013124:	d117      	bne.n	8013156 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013126:	69bb      	ldr	r3, [r7, #24]
 8013128:	6819      	ldr	r1, [r3, #0]
 801312a:	7dfa      	ldrb	r2, [r7, #23]
 801312c:	481f      	ldr	r0, [pc, #124]	@ (80131ac <etharp_output+0x200>)
 801312e:	4613      	mov	r3, r2
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	4413      	add	r3, r2
 8013134:	00db      	lsls	r3, r3, #3
 8013136:	4403      	add	r3, r0
 8013138:	3304      	adds	r3, #4
 801313a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801313c:	4299      	cmp	r1, r3
 801313e:	d10a      	bne.n	8013156 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013140:	4a19      	ldr	r2, [pc, #100]	@ (80131a8 <etharp_output+0x1fc>)
 8013142:	7dfb      	ldrb	r3, [r7, #23]
 8013144:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013146:	7dfb      	ldrb	r3, [r7, #23]
 8013148:	461a      	mov	r2, r3
 801314a:	68b9      	ldr	r1, [r7, #8]
 801314c:	68f8      	ldr	r0, [r7, #12]
 801314e:	f7ff fe93 	bl	8012e78 <etharp_output_to_arp_index>
 8013152:	4603      	mov	r3, r0
 8013154:	e018      	b.n	8013188 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013156:	7dfb      	ldrb	r3, [r7, #23]
 8013158:	3301      	adds	r3, #1
 801315a:	75fb      	strb	r3, [r7, #23]
 801315c:	7dfb      	ldrb	r3, [r7, #23]
 801315e:	2b09      	cmp	r3, #9
 8013160:	d9ca      	bls.n	80130f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013162:	68ba      	ldr	r2, [r7, #8]
 8013164:	69b9      	ldr	r1, [r7, #24]
 8013166:	68f8      	ldr	r0, [r7, #12]
 8013168:	f000 f822 	bl	80131b0 <etharp_query>
 801316c:	4603      	mov	r3, r0
 801316e:	e00b      	b.n	8013188 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013176:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	68b9      	ldr	r1, [r7, #8]
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f001 fd45 	bl	8014c10 <ethernet_output>
 8013186:	4603      	mov	r3, r0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3720      	adds	r7, #32
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	08019110 	.word	0x08019110
 8013194:	08019260 	.word	0x08019260
 8013198:	08019188 	.word	0x08019188
 801319c:	080192b0 	.word	0x080192b0
 80131a0:	08019250 	.word	0x08019250
 80131a4:	08022bd0 	.word	0x08022bd0
 80131a8:	2000bfb8 	.word	0x2000bfb8
 80131ac:	2000bec8 	.word	0x2000bec8

080131b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b08c      	sub	sp, #48	@ 0x30
 80131b4:	af02      	add	r7, sp, #8
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	60b9      	str	r1, [r7, #8]
 80131ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	3326      	adds	r3, #38	@ 0x26
 80131c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80131c2:	23ff      	movs	r3, #255	@ 0xff
 80131c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80131c8:	2300      	movs	r3, #0
 80131ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	68f9      	ldr	r1, [r7, #12]
 80131d2:	4618      	mov	r0, r3
 80131d4:	f000 fe0e 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d10c      	bne.n	80131f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80131e6:	2be0      	cmp	r3, #224	@ 0xe0
 80131e8:	d006      	beq.n	80131f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d003      	beq.n	80131f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d102      	bne.n	80131fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80131f8:	f06f 030f 	mvn.w	r3, #15
 80131fc:	e101      	b.n	8013402 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80131fe:	68fa      	ldr	r2, [r7, #12]
 8013200:	2101      	movs	r1, #1
 8013202:	68b8      	ldr	r0, [r7, #8]
 8013204:	f7ff fb60 	bl	80128c8 <etharp_find_entry>
 8013208:	4603      	mov	r3, r0
 801320a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801320c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013210:	2b00      	cmp	r3, #0
 8013212:	da02      	bge.n	801321a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013214:	8a7b      	ldrh	r3, [r7, #18]
 8013216:	b25b      	sxtb	r3, r3
 8013218:	e0f3      	b.n	8013402 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801321a:	8a7b      	ldrh	r3, [r7, #18]
 801321c:	2b7e      	cmp	r3, #126	@ 0x7e
 801321e:	d906      	bls.n	801322e <etharp_query+0x7e>
 8013220:	4b7a      	ldr	r3, [pc, #488]	@ (801340c <etharp_query+0x25c>)
 8013222:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013226:	497a      	ldr	r1, [pc, #488]	@ (8013410 <etharp_query+0x260>)
 8013228:	487a      	ldr	r0, [pc, #488]	@ (8013414 <etharp_query+0x264>)
 801322a:	f002 f81b 	bl	8015264 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801322e:	8a7b      	ldrh	r3, [r7, #18]
 8013230:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013232:	7c7a      	ldrb	r2, [r7, #17]
 8013234:	4978      	ldr	r1, [pc, #480]	@ (8013418 <etharp_query+0x268>)
 8013236:	4613      	mov	r3, r2
 8013238:	005b      	lsls	r3, r3, #1
 801323a:	4413      	add	r3, r2
 801323c:	00db      	lsls	r3, r3, #3
 801323e:	440b      	add	r3, r1
 8013240:	3314      	adds	r3, #20
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d115      	bne.n	8013274 <etharp_query+0xc4>
    is_new_entry = 1;
 8013248:	2301      	movs	r3, #1
 801324a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801324c:	7c7a      	ldrb	r2, [r7, #17]
 801324e:	4972      	ldr	r1, [pc, #456]	@ (8013418 <etharp_query+0x268>)
 8013250:	4613      	mov	r3, r2
 8013252:	005b      	lsls	r3, r3, #1
 8013254:	4413      	add	r3, r2
 8013256:	00db      	lsls	r3, r3, #3
 8013258:	440b      	add	r3, r1
 801325a:	3314      	adds	r3, #20
 801325c:	2201      	movs	r2, #1
 801325e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013260:	7c7a      	ldrb	r2, [r7, #17]
 8013262:	496d      	ldr	r1, [pc, #436]	@ (8013418 <etharp_query+0x268>)
 8013264:	4613      	mov	r3, r2
 8013266:	005b      	lsls	r3, r3, #1
 8013268:	4413      	add	r3, r2
 801326a:	00db      	lsls	r3, r3, #3
 801326c:	440b      	add	r3, r1
 801326e:	3308      	adds	r3, #8
 8013270:	68fa      	ldr	r2, [r7, #12]
 8013272:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013274:	7c7a      	ldrb	r2, [r7, #17]
 8013276:	4968      	ldr	r1, [pc, #416]	@ (8013418 <etharp_query+0x268>)
 8013278:	4613      	mov	r3, r2
 801327a:	005b      	lsls	r3, r3, #1
 801327c:	4413      	add	r3, r2
 801327e:	00db      	lsls	r3, r3, #3
 8013280:	440b      	add	r3, r1
 8013282:	3314      	adds	r3, #20
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b01      	cmp	r3, #1
 8013288:	d011      	beq.n	80132ae <etharp_query+0xfe>
 801328a:	7c7a      	ldrb	r2, [r7, #17]
 801328c:	4962      	ldr	r1, [pc, #392]	@ (8013418 <etharp_query+0x268>)
 801328e:	4613      	mov	r3, r2
 8013290:	005b      	lsls	r3, r3, #1
 8013292:	4413      	add	r3, r2
 8013294:	00db      	lsls	r3, r3, #3
 8013296:	440b      	add	r3, r1
 8013298:	3314      	adds	r3, #20
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	2b01      	cmp	r3, #1
 801329e:	d806      	bhi.n	80132ae <etharp_query+0xfe>
 80132a0:	4b5a      	ldr	r3, [pc, #360]	@ (801340c <etharp_query+0x25c>)
 80132a2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80132a6:	495d      	ldr	r1, [pc, #372]	@ (801341c <etharp_query+0x26c>)
 80132a8:	485a      	ldr	r0, [pc, #360]	@ (8013414 <etharp_query+0x264>)
 80132aa:	f001 ffdb 	bl	8015264 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80132ae:	6a3b      	ldr	r3, [r7, #32]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d102      	bne.n	80132ba <etharp_query+0x10a>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d10c      	bne.n	80132d4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80132ba:	68b9      	ldr	r1, [r7, #8]
 80132bc:	68f8      	ldr	r0, [r7, #12]
 80132be:	f000 f963 	bl	8013588 <etharp_request>
 80132c2:	4603      	mov	r3, r0
 80132c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d102      	bne.n	80132d4 <etharp_query+0x124>
      return result;
 80132ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80132d2:	e096      	b.n	8013402 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d106      	bne.n	80132e8 <etharp_query+0x138>
 80132da:	4b4c      	ldr	r3, [pc, #304]	@ (801340c <etharp_query+0x25c>)
 80132dc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80132e0:	494f      	ldr	r1, [pc, #316]	@ (8013420 <etharp_query+0x270>)
 80132e2:	484c      	ldr	r0, [pc, #304]	@ (8013414 <etharp_query+0x264>)
 80132e4:	f001 ffbe 	bl	8015264 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80132e8:	7c7a      	ldrb	r2, [r7, #17]
 80132ea:	494b      	ldr	r1, [pc, #300]	@ (8013418 <etharp_query+0x268>)
 80132ec:	4613      	mov	r3, r2
 80132ee:	005b      	lsls	r3, r3, #1
 80132f0:	4413      	add	r3, r2
 80132f2:	00db      	lsls	r3, r3, #3
 80132f4:	440b      	add	r3, r1
 80132f6:	3314      	adds	r3, #20
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	d917      	bls.n	801332e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80132fe:	4a49      	ldr	r2, [pc, #292]	@ (8013424 <etharp_query+0x274>)
 8013300:	7c7b      	ldrb	r3, [r7, #17]
 8013302:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013304:	7c7a      	ldrb	r2, [r7, #17]
 8013306:	4613      	mov	r3, r2
 8013308:	005b      	lsls	r3, r3, #1
 801330a:	4413      	add	r3, r2
 801330c:	00db      	lsls	r3, r3, #3
 801330e:	3308      	adds	r3, #8
 8013310:	4a41      	ldr	r2, [pc, #260]	@ (8013418 <etharp_query+0x268>)
 8013312:	4413      	add	r3, r2
 8013314:	3304      	adds	r3, #4
 8013316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801331a:	9200      	str	r2, [sp, #0]
 801331c:	697a      	ldr	r2, [r7, #20]
 801331e:	6879      	ldr	r1, [r7, #4]
 8013320:	68f8      	ldr	r0, [r7, #12]
 8013322:	f001 fc75 	bl	8014c10 <ethernet_output>
 8013326:	4603      	mov	r3, r0
 8013328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801332c:	e067      	b.n	80133fe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801332e:	7c7a      	ldrb	r2, [r7, #17]
 8013330:	4939      	ldr	r1, [pc, #228]	@ (8013418 <etharp_query+0x268>)
 8013332:	4613      	mov	r3, r2
 8013334:	005b      	lsls	r3, r3, #1
 8013336:	4413      	add	r3, r2
 8013338:	00db      	lsls	r3, r3, #3
 801333a:	440b      	add	r3, r1
 801333c:	3314      	adds	r3, #20
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	2b01      	cmp	r3, #1
 8013342:	d15c      	bne.n	80133fe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013344:	2300      	movs	r3, #0
 8013346:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801334c:	e01c      	b.n	8013388 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	895a      	ldrh	r2, [r3, #10]
 8013352:	69fb      	ldr	r3, [r7, #28]
 8013354:	891b      	ldrh	r3, [r3, #8]
 8013356:	429a      	cmp	r2, r3
 8013358:	d10a      	bne.n	8013370 <etharp_query+0x1c0>
 801335a:	69fb      	ldr	r3, [r7, #28]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d006      	beq.n	8013370 <etharp_query+0x1c0>
 8013362:	4b2a      	ldr	r3, [pc, #168]	@ (801340c <etharp_query+0x25c>)
 8013364:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8013368:	492f      	ldr	r1, [pc, #188]	@ (8013428 <etharp_query+0x278>)
 801336a:	482a      	ldr	r0, [pc, #168]	@ (8013414 <etharp_query+0x264>)
 801336c:	f001 ff7a 	bl	8015264 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013370:	69fb      	ldr	r3, [r7, #28]
 8013372:	7b1b      	ldrb	r3, [r3, #12]
 8013374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013378:	2b00      	cmp	r3, #0
 801337a:	d002      	beq.n	8013382 <etharp_query+0x1d2>
        copy_needed = 1;
 801337c:	2301      	movs	r3, #1
 801337e:	61bb      	str	r3, [r7, #24]
        break;
 8013380:	e005      	b.n	801338e <etharp_query+0x1de>
      }
      p = p->next;
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d1df      	bne.n	801334e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d007      	beq.n	80133a4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013394:	687a      	ldr	r2, [r7, #4]
 8013396:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801339a:	200e      	movs	r0, #14
 801339c:	f7f8 fc8c 	bl	800bcb8 <pbuf_clone>
 80133a0:	61f8      	str	r0, [r7, #28]
 80133a2:	e004      	b.n	80133ae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80133a8:	69f8      	ldr	r0, [r7, #28]
 80133aa:	f7f8 fac3 	bl	800b934 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80133ae:	69fb      	ldr	r3, [r7, #28]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d021      	beq.n	80133f8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80133b4:	7c7a      	ldrb	r2, [r7, #17]
 80133b6:	4918      	ldr	r1, [pc, #96]	@ (8013418 <etharp_query+0x268>)
 80133b8:	4613      	mov	r3, r2
 80133ba:	005b      	lsls	r3, r3, #1
 80133bc:	4413      	add	r3, r2
 80133be:	00db      	lsls	r3, r3, #3
 80133c0:	440b      	add	r3, r1
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00a      	beq.n	80133de <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80133c8:	7c7a      	ldrb	r2, [r7, #17]
 80133ca:	4913      	ldr	r1, [pc, #76]	@ (8013418 <etharp_query+0x268>)
 80133cc:	4613      	mov	r3, r2
 80133ce:	005b      	lsls	r3, r3, #1
 80133d0:	4413      	add	r3, r2
 80133d2:	00db      	lsls	r3, r3, #3
 80133d4:	440b      	add	r3, r1
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4618      	mov	r0, r3
 80133da:	f7f8 fa05 	bl	800b7e8 <pbuf_free>
      }
      arp_table[i].q = p;
 80133de:	7c7a      	ldrb	r2, [r7, #17]
 80133e0:	490d      	ldr	r1, [pc, #52]	@ (8013418 <etharp_query+0x268>)
 80133e2:	4613      	mov	r3, r2
 80133e4:	005b      	lsls	r3, r3, #1
 80133e6:	4413      	add	r3, r2
 80133e8:	00db      	lsls	r3, r3, #3
 80133ea:	440b      	add	r3, r1
 80133ec:	69fa      	ldr	r2, [r7, #28]
 80133ee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80133f0:	2300      	movs	r3, #0
 80133f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80133f6:	e002      	b.n	80133fe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80133f8:	23ff      	movs	r3, #255	@ 0xff
 80133fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80133fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013402:	4618      	mov	r0, r3
 8013404:	3728      	adds	r7, #40	@ 0x28
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	08019110 	.word	0x08019110
 8013410:	080192bc 	.word	0x080192bc
 8013414:	08019188 	.word	0x08019188
 8013418:	2000bec8 	.word	0x2000bec8
 801341c:	080192cc 	.word	0x080192cc
 8013420:	080192b0 	.word	0x080192b0
 8013424:	2000bfb8 	.word	0x2000bfb8
 8013428:	080192f4 	.word	0x080192f4

0801342c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b08a      	sub	sp, #40	@ 0x28
 8013430:	af02      	add	r7, sp, #8
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	60b9      	str	r1, [r7, #8]
 8013436:	607a      	str	r2, [r7, #4]
 8013438:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801343a:	2300      	movs	r3, #0
 801343c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d106      	bne.n	8013452 <etharp_raw+0x26>
 8013444:	4b3a      	ldr	r3, [pc, #232]	@ (8013530 <etharp_raw+0x104>)
 8013446:	f240 4257 	movw	r2, #1111	@ 0x457
 801344a:	493a      	ldr	r1, [pc, #232]	@ (8013534 <etharp_raw+0x108>)
 801344c:	483a      	ldr	r0, [pc, #232]	@ (8013538 <etharp_raw+0x10c>)
 801344e:	f001 ff09 	bl	8015264 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013452:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013456:	211c      	movs	r1, #28
 8013458:	200e      	movs	r0, #14
 801345a:	f7f7 fee1 	bl	800b220 <pbuf_alloc>
 801345e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d102      	bne.n	801346c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013466:	f04f 33ff 	mov.w	r3, #4294967295
 801346a:	e05d      	b.n	8013528 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801346c:	69bb      	ldr	r3, [r7, #24]
 801346e:	895b      	ldrh	r3, [r3, #10]
 8013470:	2b1b      	cmp	r3, #27
 8013472:	d806      	bhi.n	8013482 <etharp_raw+0x56>
 8013474:	4b2e      	ldr	r3, [pc, #184]	@ (8013530 <etharp_raw+0x104>)
 8013476:	f240 4262 	movw	r2, #1122	@ 0x462
 801347a:	4930      	ldr	r1, [pc, #192]	@ (801353c <etharp_raw+0x110>)
 801347c:	482e      	ldr	r0, [pc, #184]	@ (8013538 <etharp_raw+0x10c>)
 801347e:	f001 fef1 	bl	8015264 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	685b      	ldr	r3, [r3, #4]
 8013486:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013488:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801348a:	4618      	mov	r0, r3
 801348c:	f7f6 fdbe 	bl	800a00c <lwip_htons>
 8013490:	4603      	mov	r3, r0
 8013492:	461a      	mov	r2, r3
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801349e:	2b06      	cmp	r3, #6
 80134a0:	d006      	beq.n	80134b0 <etharp_raw+0x84>
 80134a2:	4b23      	ldr	r3, [pc, #140]	@ (8013530 <etharp_raw+0x104>)
 80134a4:	f240 4269 	movw	r2, #1129	@ 0x469
 80134a8:	4925      	ldr	r1, [pc, #148]	@ (8013540 <etharp_raw+0x114>)
 80134aa:	4823      	ldr	r0, [pc, #140]	@ (8013538 <etharp_raw+0x10c>)
 80134ac:	f001 feda 	bl	8015264 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	3308      	adds	r3, #8
 80134b4:	2206      	movs	r2, #6
 80134b6:	6839      	ldr	r1, [r7, #0]
 80134b8:	4618      	mov	r0, r3
 80134ba:	f002 f816 	bl	80154ea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	3312      	adds	r3, #18
 80134c2:	2206      	movs	r2, #6
 80134c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80134c6:	4618      	mov	r0, r3
 80134c8:	f002 f80f 	bl	80154ea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	330e      	adds	r3, #14
 80134d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134d2:	6812      	ldr	r2, [r2, #0]
 80134d4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	3318      	adds	r3, #24
 80134da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80134dc:	6812      	ldr	r2, [r2, #0]
 80134de:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	2200      	movs	r2, #0
 80134e4:	701a      	strb	r2, [r3, #0]
 80134e6:	2200      	movs	r2, #0
 80134e8:	f042 0201 	orr.w	r2, r2, #1
 80134ec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	2200      	movs	r2, #0
 80134f2:	f042 0208 	orr.w	r2, r2, #8
 80134f6:	709a      	strb	r2, [r3, #2]
 80134f8:	2200      	movs	r2, #0
 80134fa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	2206      	movs	r2, #6
 8013500:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	2204      	movs	r2, #4
 8013506:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013508:	f640 0306 	movw	r3, #2054	@ 0x806
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	69b9      	ldr	r1, [r7, #24]
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f001 fb7b 	bl	8014c10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801351a:	69b8      	ldr	r0, [r7, #24]
 801351c:	f7f8 f964 	bl	800b7e8 <pbuf_free>
  p = NULL;
 8013520:	2300      	movs	r3, #0
 8013522:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013524:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013528:	4618      	mov	r0, r3
 801352a:	3720      	adds	r7, #32
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	08019110 	.word	0x08019110
 8013534:	08019260 	.word	0x08019260
 8013538:	08019188 	.word	0x08019188
 801353c:	08019310 	.word	0x08019310
 8013540:	08019344 	.word	0x08019344

08013544 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b088      	sub	sp, #32
 8013548:	af04      	add	r7, sp, #16
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013560:	2201      	movs	r2, #1
 8013562:	9203      	str	r2, [sp, #12]
 8013564:	68ba      	ldr	r2, [r7, #8]
 8013566:	9202      	str	r2, [sp, #8]
 8013568:	4a06      	ldr	r2, [pc, #24]	@ (8013584 <etharp_request_dst+0x40>)
 801356a:	9201      	str	r2, [sp, #4]
 801356c:	9300      	str	r3, [sp, #0]
 801356e:	4603      	mov	r3, r0
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	68f8      	ldr	r0, [r7, #12]
 8013574:	f7ff ff5a 	bl	801342c <etharp_raw>
 8013578:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801357a:	4618      	mov	r0, r3
 801357c:	3710      	adds	r7, #16
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	08022bd8 	.word	0x08022bd8

08013588 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013592:	4a05      	ldr	r2, [pc, #20]	@ (80135a8 <etharp_request+0x20>)
 8013594:	6839      	ldr	r1, [r7, #0]
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f7ff ffd4 	bl	8013544 <etharp_request_dst>
 801359c:	4603      	mov	r3, r0
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3708      	adds	r7, #8
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop
 80135a8:	08022bd0 	.word	0x08022bd0

080135ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b08e      	sub	sp, #56	@ 0x38
 80135b0:	af04      	add	r7, sp, #16
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80135b6:	4b79      	ldr	r3, [pc, #484]	@ (801379c <icmp_input+0x1f0>)
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80135bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	f003 030f 	and.w	r3, r3, #15
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80135cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135ce:	2b13      	cmp	r3, #19
 80135d0:	f240 80cd 	bls.w	801376e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	895b      	ldrh	r3, [r3, #10]
 80135d8:	2b03      	cmp	r3, #3
 80135da:	f240 80ca 	bls.w	8013772 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80135e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f000 80b7 	beq.w	8013760 <icmp_input+0x1b4>
 80135f2:	2b08      	cmp	r3, #8
 80135f4:	f040 80b7 	bne.w	8013766 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80135f8:	4b69      	ldr	r3, [pc, #420]	@ (80137a0 <icmp_input+0x1f4>)
 80135fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80135fc:	4b67      	ldr	r3, [pc, #412]	@ (801379c <icmp_input+0x1f0>)
 80135fe:	695b      	ldr	r3, [r3, #20]
 8013600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013604:	2be0      	cmp	r3, #224	@ 0xe0
 8013606:	f000 80bb 	beq.w	8013780 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801360a:	4b64      	ldr	r3, [pc, #400]	@ (801379c <icmp_input+0x1f0>)
 801360c:	695b      	ldr	r3, [r3, #20]
 801360e:	4a63      	ldr	r2, [pc, #396]	@ (801379c <icmp_input+0x1f0>)
 8013610:	6812      	ldr	r2, [r2, #0]
 8013612:	4611      	mov	r1, r2
 8013614:	4618      	mov	r0, r3
 8013616:	f000 fbed 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 801361a:	4603      	mov	r3, r0
 801361c:	2b00      	cmp	r3, #0
 801361e:	f040 80b1 	bne.w	8013784 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	891b      	ldrh	r3, [r3, #8]
 8013626:	2b07      	cmp	r3, #7
 8013628:	f240 80a5 	bls.w	8013776 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801362c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801362e:	330e      	adds	r3, #14
 8013630:	4619      	mov	r1, r3
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7f8 f842 	bl	800b6bc <pbuf_add_header>
 8013638:	4603      	mov	r3, r0
 801363a:	2b00      	cmp	r3, #0
 801363c:	d04b      	beq.n	80136d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	891a      	ldrh	r2, [r3, #8]
 8013642:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013644:	4413      	add	r3, r2
 8013646:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	891b      	ldrh	r3, [r3, #8]
 801364c:	8b7a      	ldrh	r2, [r7, #26]
 801364e:	429a      	cmp	r2, r3
 8013650:	f0c0 809a 	bcc.w	8013788 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013654:	8b7b      	ldrh	r3, [r7, #26]
 8013656:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801365a:	4619      	mov	r1, r3
 801365c:	200e      	movs	r0, #14
 801365e:	f7f7 fddf 	bl	800b220 <pbuf_alloc>
 8013662:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	2b00      	cmp	r3, #0
 8013668:	f000 8090 	beq.w	801378c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	895b      	ldrh	r3, [r3, #10]
 8013670:	461a      	mov	r2, r3
 8013672:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013674:	3308      	adds	r3, #8
 8013676:	429a      	cmp	r2, r3
 8013678:	d203      	bcs.n	8013682 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801367a:	6978      	ldr	r0, [r7, #20]
 801367c:	f7f8 f8b4 	bl	800b7e8 <pbuf_free>
          goto icmperr;
 8013680:	e085      	b.n	801378e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801368a:	4618      	mov	r0, r3
 801368c:	f001 ff2d 	bl	80154ea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013690:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013692:	4619      	mov	r1, r3
 8013694:	6978      	ldr	r0, [r7, #20]
 8013696:	f7f8 f821 	bl	800b6dc <pbuf_remove_header>
 801369a:	4603      	mov	r3, r0
 801369c:	2b00      	cmp	r3, #0
 801369e:	d009      	beq.n	80136b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80136a0:	4b40      	ldr	r3, [pc, #256]	@ (80137a4 <icmp_input+0x1f8>)
 80136a2:	22b6      	movs	r2, #182	@ 0xb6
 80136a4:	4940      	ldr	r1, [pc, #256]	@ (80137a8 <icmp_input+0x1fc>)
 80136a6:	4841      	ldr	r0, [pc, #260]	@ (80137ac <icmp_input+0x200>)
 80136a8:	f001 fddc 	bl	8015264 <iprintf>
          pbuf_free(r);
 80136ac:	6978      	ldr	r0, [r7, #20]
 80136ae:	f7f8 f89b 	bl	800b7e8 <pbuf_free>
          goto icmperr;
 80136b2:	e06c      	b.n	801378e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80136b4:	6879      	ldr	r1, [r7, #4]
 80136b6:	6978      	ldr	r0, [r7, #20]
 80136b8:	f7f8 f9ba 	bl	800ba30 <pbuf_copy>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d003      	beq.n	80136ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80136c2:	6978      	ldr	r0, [r7, #20]
 80136c4:	f7f8 f890 	bl	800b7e8 <pbuf_free>
          goto icmperr;
 80136c8:	e061      	b.n	801378e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7f8 f88c 	bl	800b7e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	607b      	str	r3, [r7, #4]
 80136d4:	e00f      	b.n	80136f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80136d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136d8:	330e      	adds	r3, #14
 80136da:	4619      	mov	r1, r3
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f7f7 fffd 	bl	800b6dc <pbuf_remove_header>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d006      	beq.n	80136f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80136e8:	4b2e      	ldr	r3, [pc, #184]	@ (80137a4 <icmp_input+0x1f8>)
 80136ea:	22c7      	movs	r2, #199	@ 0xc7
 80136ec:	4930      	ldr	r1, [pc, #192]	@ (80137b0 <icmp_input+0x204>)
 80136ee:	482f      	ldr	r0, [pc, #188]	@ (80137ac <icmp_input+0x200>)
 80136f0:	f001 fdb8 	bl	8015264 <iprintf>
          goto icmperr;
 80136f4:	e04b      	b.n	801378e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80136fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136fe:	4619      	mov	r1, r3
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7f7 ffdb 	bl	800b6bc <pbuf_add_header>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d12b      	bne.n	8013764 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801371a:	4b20      	ldr	r3, [pc, #128]	@ (801379c <icmp_input+0x1f0>)
 801371c:	691a      	ldr	r2, [r3, #16]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	2200      	movs	r2, #0
 8013726:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	2200      	movs	r2, #0
 801372c:	709a      	strb	r2, [r3, #2]
 801372e:	2200      	movs	r2, #0
 8013730:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	22ff      	movs	r2, #255	@ 0xff
 8013736:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	2200      	movs	r2, #0
 801373c:	729a      	strb	r2, [r3, #10]
 801373e:	2200      	movs	r2, #0
 8013740:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	9302      	str	r3, [sp, #8]
 8013746:	2301      	movs	r3, #1
 8013748:	9301      	str	r3, [sp, #4]
 801374a:	2300      	movs	r3, #0
 801374c:	9300      	str	r3, [sp, #0]
 801374e:	23ff      	movs	r3, #255	@ 0xff
 8013750:	2200      	movs	r2, #0
 8013752:	69f9      	ldr	r1, [r7, #28]
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f000 fa75 	bl	8013c44 <ip4_output_if>
 801375a:	4603      	mov	r3, r0
 801375c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801375e:	e001      	b.n	8013764 <icmp_input+0x1b8>
      break;
 8013760:	bf00      	nop
 8013762:	e000      	b.n	8013766 <icmp_input+0x1ba>
      break;
 8013764:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7f8 f83e 	bl	800b7e8 <pbuf_free>
  return;
 801376c:	e013      	b.n	8013796 <icmp_input+0x1ea>
    goto lenerr;
 801376e:	bf00      	nop
 8013770:	e002      	b.n	8013778 <icmp_input+0x1cc>
    goto lenerr;
 8013772:	bf00      	nop
 8013774:	e000      	b.n	8013778 <icmp_input+0x1cc>
        goto lenerr;
 8013776:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7f8 f835 	bl	800b7e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801377e:	e00a      	b.n	8013796 <icmp_input+0x1ea>
        goto icmperr;
 8013780:	bf00      	nop
 8013782:	e004      	b.n	801378e <icmp_input+0x1e2>
        goto icmperr;
 8013784:	bf00      	nop
 8013786:	e002      	b.n	801378e <icmp_input+0x1e2>
          goto icmperr;
 8013788:	bf00      	nop
 801378a:	e000      	b.n	801378e <icmp_input+0x1e2>
          goto icmperr;
 801378c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7f8 f82a 	bl	800b7e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013794:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013796:	3728      	adds	r7, #40	@ 0x28
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	20008d68 	.word	0x20008d68
 80137a0:	20008d7c 	.word	0x20008d7c
 80137a4:	08019388 	.word	0x08019388
 80137a8:	080193c0 	.word	0x080193c0
 80137ac:	080193f8 	.word	0x080193f8
 80137b0:	08019420 	.word	0x08019420

080137b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	460b      	mov	r3, r1
 80137be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80137c0:	78fb      	ldrb	r3, [r7, #3]
 80137c2:	461a      	mov	r2, r3
 80137c4:	2103      	movs	r1, #3
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f000 f814 	bl	80137f4 <icmp_send_response>
}
 80137cc:	bf00      	nop
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	460b      	mov	r3, r1
 80137de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80137e0:	78fb      	ldrb	r3, [r7, #3]
 80137e2:	461a      	mov	r2, r3
 80137e4:	210b      	movs	r1, #11
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f000 f804 	bl	80137f4 <icmp_send_response>
}
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b08c      	sub	sp, #48	@ 0x30
 80137f8:	af04      	add	r7, sp, #16
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	460b      	mov	r3, r1
 80137fe:	70fb      	strb	r3, [r7, #3]
 8013800:	4613      	mov	r3, r2
 8013802:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013804:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013808:	2124      	movs	r1, #36	@ 0x24
 801380a:	2022      	movs	r0, #34	@ 0x22
 801380c:	f7f7 fd08 	bl	800b220 <pbuf_alloc>
 8013810:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013812:	69fb      	ldr	r3, [r7, #28]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d04c      	beq.n	80138b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013818:	69fb      	ldr	r3, [r7, #28]
 801381a:	895b      	ldrh	r3, [r3, #10]
 801381c:	2b23      	cmp	r3, #35	@ 0x23
 801381e:	d806      	bhi.n	801382e <icmp_send_response+0x3a>
 8013820:	4b26      	ldr	r3, [pc, #152]	@ (80138bc <icmp_send_response+0xc8>)
 8013822:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013826:	4926      	ldr	r1, [pc, #152]	@ (80138c0 <icmp_send_response+0xcc>)
 8013828:	4826      	ldr	r0, [pc, #152]	@ (80138c4 <icmp_send_response+0xd0>)
 801382a:	f001 fd1b 	bl	8015264 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	78fa      	ldrb	r2, [r7, #3]
 801383e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	78ba      	ldrb	r2, [r7, #2]
 8013844:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	2200      	movs	r2, #0
 801384a:	711a      	strb	r2, [r3, #4]
 801384c:	2200      	movs	r2, #0
 801384e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	2200      	movs	r2, #0
 8013854:	719a      	strb	r2, [r3, #6]
 8013856:	2200      	movs	r2, #0
 8013858:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	f103 0008 	add.w	r0, r3, #8
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	221c      	movs	r2, #28
 8013868:	4619      	mov	r1, r3
 801386a:	f001 fe3e 	bl	80154ea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013874:	f107 030c 	add.w	r3, r7, #12
 8013878:	4618      	mov	r0, r3
 801387a:	f000 f825 	bl	80138c8 <ip4_route>
 801387e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d011      	beq.n	80138aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	2200      	movs	r2, #0
 801388a:	709a      	strb	r2, [r3, #2]
 801388c:	2200      	movs	r2, #0
 801388e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013890:	f107 020c 	add.w	r2, r7, #12
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	9302      	str	r3, [sp, #8]
 8013898:	2301      	movs	r3, #1
 801389a:	9301      	str	r3, [sp, #4]
 801389c:	2300      	movs	r3, #0
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	23ff      	movs	r3, #255	@ 0xff
 80138a2:	2100      	movs	r1, #0
 80138a4:	69f8      	ldr	r0, [r7, #28]
 80138a6:	f000 f9cd 	bl	8013c44 <ip4_output_if>
  }
  pbuf_free(q);
 80138aa:	69f8      	ldr	r0, [r7, #28]
 80138ac:	f7f7 ff9c 	bl	800b7e8 <pbuf_free>
 80138b0:	e000      	b.n	80138b4 <icmp_send_response+0xc0>
    return;
 80138b2:	bf00      	nop
}
 80138b4:	3720      	adds	r7, #32
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	08019388 	.word	0x08019388
 80138c0:	08019454 	.word	0x08019454
 80138c4:	080193f8 	.word	0x080193f8

080138c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b085      	sub	sp, #20
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80138d0:	4b33      	ldr	r3, [pc, #204]	@ (80139a0 <ip4_route+0xd8>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	60fb      	str	r3, [r7, #12]
 80138d6:	e036      	b.n	8013946 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80138de:	f003 0301 	and.w	r3, r3, #1
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d02b      	beq.n	8013940 <ip4_route+0x78>
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80138ee:	089b      	lsrs	r3, r3, #2
 80138f0:	f003 0301 	and.w	r3, r3, #1
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d022      	beq.n	8013940 <ip4_route+0x78>
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	3304      	adds	r3, #4
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d01d      	beq.n	8013940 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	3304      	adds	r3, #4
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	405a      	eors	r2, r3
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	3308      	adds	r3, #8
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	4013      	ands	r3, r2
 8013918:	2b00      	cmp	r3, #0
 801391a:	d101      	bne.n	8013920 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	e038      	b.n	8013992 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013926:	f003 0302 	and.w	r3, r3, #2
 801392a:	2b00      	cmp	r3, #0
 801392c:	d108      	bne.n	8013940 <ip4_route+0x78>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	330c      	adds	r3, #12
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	429a      	cmp	r2, r3
 801393a:	d101      	bne.n	8013940 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	e028      	b.n	8013992 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	60fb      	str	r3, [r7, #12]
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d1c5      	bne.n	80138d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801394c:	4b15      	ldr	r3, [pc, #84]	@ (80139a4 <ip4_route+0xdc>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d01a      	beq.n	801398a <ip4_route+0xc2>
 8013954:	4b13      	ldr	r3, [pc, #76]	@ (80139a4 <ip4_route+0xdc>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801395c:	f003 0301 	and.w	r3, r3, #1
 8013960:	2b00      	cmp	r3, #0
 8013962:	d012      	beq.n	801398a <ip4_route+0xc2>
 8013964:	4b0f      	ldr	r3, [pc, #60]	@ (80139a4 <ip4_route+0xdc>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801396c:	f003 0304 	and.w	r3, r3, #4
 8013970:	2b00      	cmp	r3, #0
 8013972:	d00a      	beq.n	801398a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013974:	4b0b      	ldr	r3, [pc, #44]	@ (80139a4 <ip4_route+0xdc>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	3304      	adds	r3, #4
 801397a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801397c:	2b00      	cmp	r3, #0
 801397e:	d004      	beq.n	801398a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	b2db      	uxtb	r3, r3
 8013986:	2b7f      	cmp	r3, #127	@ 0x7f
 8013988:	d101      	bne.n	801398e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801398a:	2300      	movs	r3, #0
 801398c:	e001      	b.n	8013992 <ip4_route+0xca>
  }

  return netif_default;
 801398e:	4b05      	ldr	r3, [pc, #20]	@ (80139a4 <ip4_route+0xdc>)
 8013990:	681b      	ldr	r3, [r3, #0]
}
 8013992:	4618      	mov	r0, r3
 8013994:	3714      	adds	r7, #20
 8013996:	46bd      	mov	sp, r7
 8013998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop
 80139a0:	2000be5c 	.word	0x2000be5c
 80139a4:	2000be60 	.word	0x2000be60

080139a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139b6:	f003 0301 	and.w	r3, r3, #1
 80139ba:	b2db      	uxtb	r3, r3
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d016      	beq.n	80139ee <ip4_input_accept+0x46>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	3304      	adds	r3, #4
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d011      	beq.n	80139ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80139ca:	4b0b      	ldr	r3, [pc, #44]	@ (80139f8 <ip4_input_accept+0x50>)
 80139cc:	695a      	ldr	r2, [r3, #20]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	3304      	adds	r3, #4
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	429a      	cmp	r2, r3
 80139d6:	d008      	beq.n	80139ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80139d8:	4b07      	ldr	r3, [pc, #28]	@ (80139f8 <ip4_input_accept+0x50>)
 80139da:	695b      	ldr	r3, [r3, #20]
 80139dc:	6879      	ldr	r1, [r7, #4]
 80139de:	4618      	mov	r0, r3
 80139e0:	f000 fa08 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 80139e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d001      	beq.n	80139ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80139ea:	2301      	movs	r3, #1
 80139ec:	e000      	b.n	80139f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80139ee:	2300      	movs	r3, #0
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	20008d68 	.word	0x20008d68

080139fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b086      	sub	sp, #24
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	685b      	ldr	r3, [r3, #4]
 8013a0a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	091b      	lsrs	r3, r3, #4
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	2b04      	cmp	r3, #4
 8013a16:	d004      	beq.n	8013a22 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7f7 fee5 	bl	800b7e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	e107      	b.n	8013c32 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	f003 030f 	and.w	r3, r3, #15
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	009b      	lsls	r3, r3, #2
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	885b      	ldrh	r3, [r3, #2]
 8013a36:	b29b      	uxth	r3, r3
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7f6 fae7 	bl	800a00c <lwip_htons>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	891b      	ldrh	r3, [r3, #8]
 8013a46:	89ba      	ldrh	r2, [r7, #12]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d204      	bcs.n	8013a56 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013a4c:	89bb      	ldrh	r3, [r7, #12]
 8013a4e:	4619      	mov	r1, r3
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f7f7 fd43 	bl	800b4dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	895b      	ldrh	r3, [r3, #10]
 8013a5a:	89fa      	ldrh	r2, [r7, #14]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d807      	bhi.n	8013a70 <ip4_input+0x74>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	891b      	ldrh	r3, [r3, #8]
 8013a64:	89ba      	ldrh	r2, [r7, #12]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d802      	bhi.n	8013a70 <ip4_input+0x74>
 8013a6a:	89fb      	ldrh	r3, [r7, #14]
 8013a6c:	2b13      	cmp	r3, #19
 8013a6e:	d804      	bhi.n	8013a7a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7f7 feb9 	bl	800b7e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013a76:	2300      	movs	r3, #0
 8013a78:	e0db      	b.n	8013c32 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	691b      	ldr	r3, [r3, #16]
 8013a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8013c3c <ip4_input+0x240>)
 8013a80:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	68db      	ldr	r3, [r3, #12]
 8013a86:	4a6d      	ldr	r2, [pc, #436]	@ (8013c3c <ip4_input+0x240>)
 8013a88:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8013c3c <ip4_input+0x240>)
 8013a8c:	695b      	ldr	r3, [r3, #20]
 8013a8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013a92:	2be0      	cmp	r3, #224	@ 0xe0
 8013a94:	d112      	bne.n	8013abc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a9c:	f003 0301 	and.w	r3, r3, #1
 8013aa0:	b2db      	uxtb	r3, r3
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d007      	beq.n	8013ab6 <ip4_input+0xba>
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	3304      	adds	r3, #4
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d002      	beq.n	8013ab6 <ip4_input+0xba>
      netif = inp;
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	613b      	str	r3, [r7, #16]
 8013ab4:	e02a      	b.n	8013b0c <ip4_input+0x110>
    } else {
      netif = NULL;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	613b      	str	r3, [r7, #16]
 8013aba:	e027      	b.n	8013b0c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013abc:	6838      	ldr	r0, [r7, #0]
 8013abe:	f7ff ff73 	bl	80139a8 <ip4_input_accept>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d002      	beq.n	8013ace <ip4_input+0xd2>
      netif = inp;
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	613b      	str	r3, [r7, #16]
 8013acc:	e01e      	b.n	8013b0c <ip4_input+0x110>
    } else {
      netif = NULL;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8013c3c <ip4_input+0x240>)
 8013ad4:	695b      	ldr	r3, [r3, #20]
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ada:	d017      	beq.n	8013b0c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013adc:	4b58      	ldr	r3, [pc, #352]	@ (8013c40 <ip4_input+0x244>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	613b      	str	r3, [r7, #16]
 8013ae2:	e00e      	b.n	8013b02 <ip4_input+0x106>
          if (netif == inp) {
 8013ae4:	693a      	ldr	r2, [r7, #16]
 8013ae6:	683b      	ldr	r3, [r7, #0]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d006      	beq.n	8013afa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013aec:	6938      	ldr	r0, [r7, #16]
 8013aee:	f7ff ff5b 	bl	80139a8 <ip4_input_accept>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d108      	bne.n	8013b0a <ip4_input+0x10e>
 8013af8:	e000      	b.n	8013afc <ip4_input+0x100>
            continue;
 8013afa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	613b      	str	r3, [r7, #16]
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d1ed      	bne.n	8013ae4 <ip4_input+0xe8>
 8013b08:	e000      	b.n	8013b0c <ip4_input+0x110>
            break;
 8013b0a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8013c3c <ip4_input+0x240>)
 8013b0e:	691b      	ldr	r3, [r3, #16]
 8013b10:	6839      	ldr	r1, [r7, #0]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f000 f96e 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d105      	bne.n	8013b2a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013b1e:	4b47      	ldr	r3, [pc, #284]	@ (8013c3c <ip4_input+0x240>)
 8013b20:	691b      	ldr	r3, [r3, #16]
 8013b22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013b26:	2be0      	cmp	r3, #224	@ 0xe0
 8013b28:	d104      	bne.n	8013b34 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7f7 fe5c 	bl	800b7e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013b30:	2300      	movs	r3, #0
 8013b32:	e07e      	b.n	8013c32 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d104      	bne.n	8013b44 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f7f7 fe54 	bl	800b7e8 <pbuf_free>
    return ERR_OK;
 8013b40:	2300      	movs	r3, #0
 8013b42:	e076      	b.n	8013c32 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	88db      	ldrh	r3, [r3, #6]
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	461a      	mov	r2, r3
 8013b4c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013b50:	4013      	ands	r3, r2
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00b      	beq.n	8013b6e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 fc92 	bl	8014480 <ip4_reass>
 8013b5c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d101      	bne.n	8013b68 <ip4_input+0x16c>
      return ERR_OK;
 8013b64:	2300      	movs	r3, #0
 8013b66:	e064      	b.n	8013c32 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013b6e:	4a33      	ldr	r2, [pc, #204]	@ (8013c3c <ip4_input+0x240>)
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013b74:	4a31      	ldr	r2, [pc, #196]	@ (8013c3c <ip4_input+0x240>)
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013b7a:	4a30      	ldr	r2, [pc, #192]	@ (8013c3c <ip4_input+0x240>)
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	f003 030f 	and.w	r3, r3, #15
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	b2db      	uxtb	r3, r3
 8013b8e:	461a      	mov	r2, r3
 8013b90:	4b2a      	ldr	r3, [pc, #168]	@ (8013c3c <ip4_input+0x240>)
 8013b92:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013b94:	89fb      	ldrh	r3, [r7, #14]
 8013b96:	4619      	mov	r1, r3
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f7f7 fd9f 	bl	800b6dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	7a5b      	ldrb	r3, [r3, #9]
 8013ba2:	2b11      	cmp	r3, #17
 8013ba4:	d006      	beq.n	8013bb4 <ip4_input+0x1b8>
 8013ba6:	2b11      	cmp	r3, #17
 8013ba8:	dc13      	bgt.n	8013bd2 <ip4_input+0x1d6>
 8013baa:	2b01      	cmp	r3, #1
 8013bac:	d00c      	beq.n	8013bc8 <ip4_input+0x1cc>
 8013bae:	2b06      	cmp	r3, #6
 8013bb0:	d005      	beq.n	8013bbe <ip4_input+0x1c2>
 8013bb2:	e00e      	b.n	8013bd2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013bb4:	6839      	ldr	r1, [r7, #0]
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f7fe fb5a 	bl	8012270 <udp_input>
        break;
 8013bbc:	e026      	b.n	8013c0c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013bbe:	6839      	ldr	r1, [r7, #0]
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f7f9 ff19 	bl	800d9f8 <tcp_input>
        break;
 8013bc6:	e021      	b.n	8013c0c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013bc8:	6839      	ldr	r1, [r7, #0]
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f7ff fcee 	bl	80135ac <icmp_input>
        break;
 8013bd0:	e01c      	b.n	8013c0c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8013c3c <ip4_input+0x240>)
 8013bd4:	695b      	ldr	r3, [r3, #20]
 8013bd6:	6939      	ldr	r1, [r7, #16]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f000 f90b 	bl	8013df4 <ip4_addr_isbroadcast_u32>
 8013bde:	4603      	mov	r3, r0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d10f      	bne.n	8013c04 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013be4:	4b15      	ldr	r3, [pc, #84]	@ (8013c3c <ip4_input+0x240>)
 8013be6:	695b      	ldr	r3, [r3, #20]
 8013be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013bec:	2be0      	cmp	r3, #224	@ 0xe0
 8013bee:	d009      	beq.n	8013c04 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013bf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7f7 fde3 	bl	800b7c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013bfc:	2102      	movs	r1, #2
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f7ff fdd8 	bl	80137b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f7f7 fdef 	bl	800b7e8 <pbuf_free>
        break;
 8013c0a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8013c3c <ip4_input+0x240>)
 8013c0e:	2200      	movs	r2, #0
 8013c10:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013c12:	4b0a      	ldr	r3, [pc, #40]	@ (8013c3c <ip4_input+0x240>)
 8013c14:	2200      	movs	r2, #0
 8013c16:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013c18:	4b08      	ldr	r3, [pc, #32]	@ (8013c3c <ip4_input+0x240>)
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013c1e:	4b07      	ldr	r3, [pc, #28]	@ (8013c3c <ip4_input+0x240>)
 8013c20:	2200      	movs	r2, #0
 8013c22:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013c24:	4b05      	ldr	r3, [pc, #20]	@ (8013c3c <ip4_input+0x240>)
 8013c26:	2200      	movs	r2, #0
 8013c28:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013c2a:	4b04      	ldr	r3, [pc, #16]	@ (8013c3c <ip4_input+0x240>)
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013c30:	2300      	movs	r3, #0
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3718      	adds	r7, #24
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	20008d68 	.word	0x20008d68
 8013c40:	2000be5c 	.word	0x2000be5c

08013c44 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b08a      	sub	sp, #40	@ 0x28
 8013c48:	af04      	add	r7, sp, #16
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	60b9      	str	r1, [r7, #8]
 8013c4e:	607a      	str	r2, [r7, #4]
 8013c50:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d009      	beq.n	8013c70 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d003      	beq.n	8013c6a <ip4_output_if+0x26>
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d102      	bne.n	8013c70 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c6c:	3304      	adds	r3, #4
 8013c6e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013c70:	78fa      	ldrb	r2, [r7, #3]
 8013c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c74:	9302      	str	r3, [sp, #8]
 8013c76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013c7a:	9301      	str	r3, [sp, #4]
 8013c7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013c80:	9300      	str	r3, [sp, #0]
 8013c82:	4613      	mov	r3, r2
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	6979      	ldr	r1, [r7, #20]
 8013c88:	68f8      	ldr	r0, [r7, #12]
 8013c8a:	f000 f805 	bl	8013c98 <ip4_output_if_src>
 8013c8e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3718      	adds	r7, #24
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b088      	sub	sp, #32
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
 8013ca4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	7b9b      	ldrb	r3, [r3, #14]
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	d006      	beq.n	8013cbc <ip4_output_if_src+0x24>
 8013cae:	4b4b      	ldr	r3, [pc, #300]	@ (8013ddc <ip4_output_if_src+0x144>)
 8013cb0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013cb4:	494a      	ldr	r1, [pc, #296]	@ (8013de0 <ip4_output_if_src+0x148>)
 8013cb6:	484b      	ldr	r0, [pc, #300]	@ (8013de4 <ip4_output_if_src+0x14c>)
 8013cb8:	f001 fad4 	bl	8015264 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d060      	beq.n	8013d84 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013cc2:	2314      	movs	r3, #20
 8013cc4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013cc6:	2114      	movs	r1, #20
 8013cc8:	68f8      	ldr	r0, [r7, #12]
 8013cca:	f7f7 fcf7 	bl	800b6bc <pbuf_add_header>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d002      	beq.n	8013cda <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013cd4:	f06f 0301 	mvn.w	r3, #1
 8013cd8:	e07c      	b.n	8013dd4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	895b      	ldrh	r3, [r3, #10]
 8013ce4:	2b13      	cmp	r3, #19
 8013ce6:	d806      	bhi.n	8013cf6 <ip4_output_if_src+0x5e>
 8013ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8013ddc <ip4_output_if_src+0x144>)
 8013cea:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013cee:	493e      	ldr	r1, [pc, #248]	@ (8013de8 <ip4_output_if_src+0x150>)
 8013cf0:	483c      	ldr	r0, [pc, #240]	@ (8013de4 <ip4_output_if_src+0x14c>)
 8013cf2:	f001 fab7 	bl	8015264 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013cf6:	69fb      	ldr	r3, [r7, #28]
 8013cf8:	78fa      	ldrb	r2, [r7, #3]
 8013cfa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013d02:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013d0c:	8b7b      	ldrh	r3, [r7, #26]
 8013d0e:	089b      	lsrs	r3, r3, #2
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	b2db      	uxtb	r3, r3
 8013d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d18:	b2da      	uxtb	r2, r3
 8013d1a:	69fb      	ldr	r3, [r7, #28]
 8013d1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013d1e:	69fb      	ldr	r3, [r7, #28]
 8013d20:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013d24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	891b      	ldrh	r3, [r3, #8]
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7f6 f96e 	bl	800a00c <lwip_htons>
 8013d30:	4603      	mov	r3, r0
 8013d32:	461a      	mov	r2, r3
 8013d34:	69fb      	ldr	r3, [r7, #28]
 8013d36:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013d38:	69fb      	ldr	r3, [r7, #28]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	719a      	strb	r2, [r3, #6]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013d42:	4b2a      	ldr	r3, [pc, #168]	@ (8013dec <ip4_output_if_src+0x154>)
 8013d44:	881b      	ldrh	r3, [r3, #0]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7f6 f960 	bl	800a00c <lwip_htons>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	461a      	mov	r2, r3
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013d54:	4b25      	ldr	r3, [pc, #148]	@ (8013dec <ip4_output_if_src+0x154>)
 8013d56:	881b      	ldrh	r3, [r3, #0]
 8013d58:	3301      	adds	r3, #1
 8013d5a:	b29a      	uxth	r2, r3
 8013d5c:	4b23      	ldr	r3, [pc, #140]	@ (8013dec <ip4_output_if_src+0x154>)
 8013d5e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d104      	bne.n	8013d70 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013d66:	4b22      	ldr	r3, [pc, #136]	@ (8013df0 <ip4_output_if_src+0x158>)
 8013d68:	681a      	ldr	r2, [r3, #0]
 8013d6a:	69fb      	ldr	r3, [r7, #28]
 8013d6c:	60da      	str	r2, [r3, #12]
 8013d6e:	e003      	b.n	8013d78 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	729a      	strb	r2, [r3, #10]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	72da      	strb	r2, [r3, #11]
 8013d82:	e00f      	b.n	8013da4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	895b      	ldrh	r3, [r3, #10]
 8013d88:	2b13      	cmp	r3, #19
 8013d8a:	d802      	bhi.n	8013d92 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013d8c:	f06f 0301 	mvn.w	r3, #1
 8013d90:	e020      	b.n	8013dd4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	691b      	ldr	r3, [r3, #16]
 8013d9c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013d9e:	f107 0314 	add.w	r3, r7, #20
 8013da2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013da6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d00c      	beq.n	8013dc6 <ip4_output_if_src+0x12e>
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	891a      	ldrh	r2, [r3, #8]
 8013db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013db2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d906      	bls.n	8013dc6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f000 fd53 	bl	8014868 <ip4_frag>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	e006      	b.n	8013dd4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dc8:	695b      	ldr	r3, [r3, #20]
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	68f9      	ldr	r1, [r7, #12]
 8013dce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013dd0:	4798      	blx	r3
 8013dd2:	4603      	mov	r3, r0
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3720      	adds	r7, #32
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	08019480 	.word	0x08019480
 8013de0:	080194b4 	.word	0x080194b4
 8013de4:	080194c0 	.word	0x080194c0
 8013de8:	080194e8 	.word	0x080194e8
 8013dec:	2000bfba 	.word	0x2000bfba
 8013df0:	08022bcc 	.word	0x08022bcc

08013df4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b085      	sub	sp, #20
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e08:	d002      	beq.n	8013e10 <ip4_addr_isbroadcast_u32+0x1c>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d101      	bne.n	8013e14 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013e10:	2301      	movs	r3, #1
 8013e12:	e02a      	b.n	8013e6a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e1a:	f003 0302 	and.w	r3, r3, #2
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d101      	bne.n	8013e26 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	e021      	b.n	8013e6a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	3304      	adds	r3, #4
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d101      	bne.n	8013e36 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013e32:	2300      	movs	r3, #0
 8013e34:	e019      	b.n	8013e6a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	3304      	adds	r3, #4
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	405a      	eors	r2, r3
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	3308      	adds	r3, #8
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	4013      	ands	r3, r2
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d10d      	bne.n	8013e68 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	3308      	adds	r3, #8
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	43da      	mvns	r2, r3
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	3308      	adds	r3, #8
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d101      	bne.n	8013e68 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013e64:	2301      	movs	r3, #1
 8013e66:	e000      	b.n	8013e6a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013e68:	2300      	movs	r3, #0
  }
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3714      	adds	r7, #20
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e74:	4770      	bx	lr
	...

08013e78 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013e82:	4b12      	ldr	r3, [pc, #72]	@ (8013ecc <ip_reass_tmr+0x54>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013e88:	e018      	b.n	8013ebc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	7fdb      	ldrb	r3, [r3, #31]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d00b      	beq.n	8013eaa <ip_reass_tmr+0x32>
      r->timer--;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	7fdb      	ldrb	r3, [r3, #31]
 8013e96:	3b01      	subs	r3, #1
 8013e98:	b2da      	uxtb	r2, r3
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	60fb      	str	r3, [r7, #12]
 8013ea8:	e008      	b.n	8013ebc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013eb4:	68b9      	ldr	r1, [r7, #8]
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	f000 f80a 	bl	8013ed0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d1e3      	bne.n	8013e8a <ip_reass_tmr+0x12>
    }
  }
}
 8013ec2:	bf00      	nop
 8013ec4:	bf00      	nop
 8013ec6:	3710      	adds	r7, #16
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	2000bfbc 	.word	0x2000bfbc

08013ed0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b088      	sub	sp, #32
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013eda:	2300      	movs	r3, #0
 8013edc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013ede:	683a      	ldr	r2, [r7, #0]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d105      	bne.n	8013ef2 <ip_reass_free_complete_datagram+0x22>
 8013ee6:	4b45      	ldr	r3, [pc, #276]	@ (8013ffc <ip_reass_free_complete_datagram+0x12c>)
 8013ee8:	22ab      	movs	r2, #171	@ 0xab
 8013eea:	4945      	ldr	r1, [pc, #276]	@ (8014000 <ip_reass_free_complete_datagram+0x130>)
 8013eec:	4845      	ldr	r0, [pc, #276]	@ (8014004 <ip_reass_free_complete_datagram+0x134>)
 8013eee:	f001 f9b9 	bl	8015264 <iprintf>
  if (prev != NULL) {
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d00a      	beq.n	8013f0e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d005      	beq.n	8013f0e <ip_reass_free_complete_datagram+0x3e>
 8013f02:	4b3e      	ldr	r3, [pc, #248]	@ (8013ffc <ip_reass_free_complete_datagram+0x12c>)
 8013f04:	22ad      	movs	r2, #173	@ 0xad
 8013f06:	4940      	ldr	r1, [pc, #256]	@ (8014008 <ip_reass_free_complete_datagram+0x138>)
 8013f08:	483e      	ldr	r0, [pc, #248]	@ (8014004 <ip_reass_free_complete_datagram+0x134>)
 8013f0a:	f001 f9ab 	bl	8015264 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	889b      	ldrh	r3, [r3, #4]
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d12a      	bne.n	8013f76 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013f2e:	69bb      	ldr	r3, [r7, #24]
 8013f30:	6858      	ldr	r0, [r3, #4]
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	3308      	adds	r3, #8
 8013f36:	2214      	movs	r2, #20
 8013f38:	4619      	mov	r1, r3
 8013f3a:	f001 fad6 	bl	80154ea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013f3e:	2101      	movs	r1, #1
 8013f40:	69b8      	ldr	r0, [r7, #24]
 8013f42:	f7ff fc47 	bl	80137d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013f46:	69b8      	ldr	r0, [r7, #24]
 8013f48:	f7f7 fcdc 	bl	800b904 <pbuf_clen>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013f50:	8bfa      	ldrh	r2, [r7, #30]
 8013f52:	8a7b      	ldrh	r3, [r7, #18]
 8013f54:	4413      	add	r3, r2
 8013f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f5a:	db05      	blt.n	8013f68 <ip_reass_free_complete_datagram+0x98>
 8013f5c:	4b27      	ldr	r3, [pc, #156]	@ (8013ffc <ip_reass_free_complete_datagram+0x12c>)
 8013f5e:	22bc      	movs	r2, #188	@ 0xbc
 8013f60:	492a      	ldr	r1, [pc, #168]	@ (801400c <ip_reass_free_complete_datagram+0x13c>)
 8013f62:	4828      	ldr	r0, [pc, #160]	@ (8014004 <ip_reass_free_complete_datagram+0x134>)
 8013f64:	f001 f97e 	bl	8015264 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013f68:	8bfa      	ldrh	r2, [r7, #30]
 8013f6a:	8a7b      	ldrh	r3, [r7, #18]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013f70:	69b8      	ldr	r0, [r7, #24]
 8013f72:	f7f7 fc39 	bl	800b7e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013f7c:	e01f      	b.n	8013fbe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	f7f7 fcb8 	bl	800b904 <pbuf_clen>
 8013f94:	4603      	mov	r3, r0
 8013f96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013f98:	8bfa      	ldrh	r2, [r7, #30]
 8013f9a:	8a7b      	ldrh	r3, [r7, #18]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013fa2:	db05      	blt.n	8013fb0 <ip_reass_free_complete_datagram+0xe0>
 8013fa4:	4b15      	ldr	r3, [pc, #84]	@ (8013ffc <ip_reass_free_complete_datagram+0x12c>)
 8013fa6:	22cc      	movs	r2, #204	@ 0xcc
 8013fa8:	4918      	ldr	r1, [pc, #96]	@ (801400c <ip_reass_free_complete_datagram+0x13c>)
 8013faa:	4816      	ldr	r0, [pc, #88]	@ (8014004 <ip_reass_free_complete_datagram+0x134>)
 8013fac:	f001 f95a 	bl	8015264 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013fb0:	8bfa      	ldrh	r2, [r7, #30]
 8013fb2:	8a7b      	ldrh	r3, [r7, #18]
 8013fb4:	4413      	add	r3, r2
 8013fb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013fb8:	68f8      	ldr	r0, [r7, #12]
 8013fba:	f7f7 fc15 	bl	800b7e8 <pbuf_free>
  while (p != NULL) {
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d1dc      	bne.n	8013f7e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013fc4:	6839      	ldr	r1, [r7, #0]
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f000 f8c2 	bl	8014150 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013fcc:	4b10      	ldr	r3, [pc, #64]	@ (8014010 <ip_reass_free_complete_datagram+0x140>)
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	8bfa      	ldrh	r2, [r7, #30]
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	d905      	bls.n	8013fe2 <ip_reass_free_complete_datagram+0x112>
 8013fd6:	4b09      	ldr	r3, [pc, #36]	@ (8013ffc <ip_reass_free_complete_datagram+0x12c>)
 8013fd8:	22d2      	movs	r2, #210	@ 0xd2
 8013fda:	490e      	ldr	r1, [pc, #56]	@ (8014014 <ip_reass_free_complete_datagram+0x144>)
 8013fdc:	4809      	ldr	r0, [pc, #36]	@ (8014004 <ip_reass_free_complete_datagram+0x134>)
 8013fde:	f001 f941 	bl	8015264 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8014010 <ip_reass_free_complete_datagram+0x140>)
 8013fe4:	881a      	ldrh	r2, [r3, #0]
 8013fe6:	8bfb      	ldrh	r3, [r7, #30]
 8013fe8:	1ad3      	subs	r3, r2, r3
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	4b08      	ldr	r3, [pc, #32]	@ (8014010 <ip_reass_free_complete_datagram+0x140>)
 8013fee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013ff0:	8bfb      	ldrh	r3, [r7, #30]
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3720      	adds	r7, #32
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	08019518 	.word	0x08019518
 8014000:	08019554 	.word	0x08019554
 8014004:	08019560 	.word	0x08019560
 8014008:	08019588 	.word	0x08019588
 801400c:	0801959c 	.word	0x0801959c
 8014010:	2000bfc0 	.word	0x2000bfc0
 8014014:	080195bc 	.word	0x080195bc

08014018 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b08a      	sub	sp, #40	@ 0x28
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014022:	2300      	movs	r3, #0
 8014024:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014026:	2300      	movs	r3, #0
 8014028:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801402a:	2300      	movs	r3, #0
 801402c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801402e:	2300      	movs	r3, #0
 8014030:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014032:	2300      	movs	r3, #0
 8014034:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014036:	4b28      	ldr	r3, [pc, #160]	@ (80140d8 <ip_reass_remove_oldest_datagram+0xc0>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801403c:	e030      	b.n	80140a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014040:	695a      	ldr	r2, [r3, #20]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	429a      	cmp	r2, r3
 8014048:	d10c      	bne.n	8014064 <ip_reass_remove_oldest_datagram+0x4c>
 801404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801404c:	699a      	ldr	r2, [r3, #24]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	691b      	ldr	r3, [r3, #16]
 8014052:	429a      	cmp	r2, r3
 8014054:	d106      	bne.n	8014064 <ip_reass_remove_oldest_datagram+0x4c>
 8014056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014058:	899a      	ldrh	r2, [r3, #12]
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	889b      	ldrh	r3, [r3, #4]
 801405e:	b29b      	uxth	r3, r3
 8014060:	429a      	cmp	r2, r3
 8014062:	d014      	beq.n	801408e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	3301      	adds	r3, #1
 8014068:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801406a:	6a3b      	ldr	r3, [r7, #32]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d104      	bne.n	801407a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014072:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	61bb      	str	r3, [r7, #24]
 8014078:	e009      	b.n	801408e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801407c:	7fda      	ldrb	r2, [r3, #31]
 801407e:	6a3b      	ldr	r3, [r7, #32]
 8014080:	7fdb      	ldrb	r3, [r3, #31]
 8014082:	429a      	cmp	r2, r3
 8014084:	d803      	bhi.n	801408e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014088:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801408a:	69fb      	ldr	r3, [r7, #28]
 801408c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d001      	beq.n	801409a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014098:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80140a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d1cb      	bne.n	801403e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80140a6:	6a3b      	ldr	r3, [r7, #32]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d008      	beq.n	80140be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80140ac:	69b9      	ldr	r1, [r7, #24]
 80140ae:	6a38      	ldr	r0, [r7, #32]
 80140b0:	f7ff ff0e 	bl	8013ed0 <ip_reass_free_complete_datagram>
 80140b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80140b6:	697a      	ldr	r2, [r7, #20]
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	4413      	add	r3, r2
 80140bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80140be:	697a      	ldr	r2, [r7, #20]
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	da02      	bge.n	80140cc <ip_reass_remove_oldest_datagram+0xb4>
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	2b01      	cmp	r3, #1
 80140ca:	dcac      	bgt.n	8014026 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80140cc:	697b      	ldr	r3, [r7, #20]
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3728      	adds	r7, #40	@ 0x28
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
 80140d6:	bf00      	nop
 80140d8:	2000bfbc 	.word	0x2000bfbc

080140dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80140e6:	2004      	movs	r0, #4
 80140e8:	f7f6 fc64 	bl	800a9b4 <memp_malloc>
 80140ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d110      	bne.n	8014116 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80140f4:	6839      	ldr	r1, [r7, #0]
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f7ff ff8e 	bl	8014018 <ip_reass_remove_oldest_datagram>
 80140fc:	4602      	mov	r2, r0
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	4293      	cmp	r3, r2
 8014102:	dc03      	bgt.n	801410c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014104:	2004      	movs	r0, #4
 8014106:	f7f6 fc55 	bl	800a9b4 <memp_malloc>
 801410a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d101      	bne.n	8014116 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014112:	2300      	movs	r3, #0
 8014114:	e016      	b.n	8014144 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014116:	2220      	movs	r2, #32
 8014118:	2100      	movs	r1, #0
 801411a:	68f8      	ldr	r0, [r7, #12]
 801411c:	f001 f907 	bl	801532e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	220f      	movs	r2, #15
 8014124:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014126:	4b09      	ldr	r3, [pc, #36]	@ (801414c <ip_reass_enqueue_new_datagram+0x70>)
 8014128:	681a      	ldr	r2, [r3, #0]
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801412e:	4a07      	ldr	r2, [pc, #28]	@ (801414c <ip_reass_enqueue_new_datagram+0x70>)
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	3308      	adds	r3, #8
 8014138:	2214      	movs	r2, #20
 801413a:	6879      	ldr	r1, [r7, #4]
 801413c:	4618      	mov	r0, r3
 801413e:	f001 f9d4 	bl	80154ea <memcpy>
  return ipr;
 8014142:	68fb      	ldr	r3, [r7, #12]
}
 8014144:	4618      	mov	r0, r3
 8014146:	3710      	adds	r7, #16
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}
 801414c:	2000bfbc 	.word	0x2000bfbc

08014150 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801415a:	4b10      	ldr	r3, [pc, #64]	@ (801419c <ip_reass_dequeue_datagram+0x4c>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	429a      	cmp	r2, r3
 8014162:	d104      	bne.n	801416e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	4a0c      	ldr	r2, [pc, #48]	@ (801419c <ip_reass_dequeue_datagram+0x4c>)
 801416a:	6013      	str	r3, [r2, #0]
 801416c:	e00d      	b.n	801418a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d106      	bne.n	8014182 <ip_reass_dequeue_datagram+0x32>
 8014174:	4b0a      	ldr	r3, [pc, #40]	@ (80141a0 <ip_reass_dequeue_datagram+0x50>)
 8014176:	f240 1245 	movw	r2, #325	@ 0x145
 801417a:	490a      	ldr	r1, [pc, #40]	@ (80141a4 <ip_reass_dequeue_datagram+0x54>)
 801417c:	480a      	ldr	r0, [pc, #40]	@ (80141a8 <ip_reass_dequeue_datagram+0x58>)
 801417e:	f001 f871 	bl	8015264 <iprintf>
    prev->next = ipr->next;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681a      	ldr	r2, [r3, #0]
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801418a:	6879      	ldr	r1, [r7, #4]
 801418c:	2004      	movs	r0, #4
 801418e:	f7f6 fc87 	bl	800aaa0 <memp_free>
}
 8014192:	bf00      	nop
 8014194:	3708      	adds	r7, #8
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	2000bfbc 	.word	0x2000bfbc
 80141a0:	08019518 	.word	0x08019518
 80141a4:	080195e0 	.word	0x080195e0
 80141a8:	08019560 	.word	0x08019560

080141ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b08c      	sub	sp, #48	@ 0x30
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	60f8      	str	r0, [r7, #12]
 80141b4:	60b9      	str	r1, [r7, #8]
 80141b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80141b8:	2300      	movs	r3, #0
 80141ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80141bc:	2301      	movs	r3, #1
 80141be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	885b      	ldrh	r3, [r3, #2]
 80141ca:	b29b      	uxth	r3, r3
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7f5 ff1d 	bl	800a00c <lwip_htons>
 80141d2:	4603      	mov	r3, r0
 80141d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	781b      	ldrb	r3, [r3, #0]
 80141da:	f003 030f 	and.w	r3, r3, #15
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	009b      	lsls	r3, r3, #2
 80141e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80141e4:	7e7b      	ldrb	r3, [r7, #25]
 80141e6:	b29b      	uxth	r3, r3
 80141e8:	8b7a      	ldrh	r2, [r7, #26]
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d202      	bcs.n	80141f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80141ee:	f04f 33ff 	mov.w	r3, #4294967295
 80141f2:	e135      	b.n	8014460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80141f4:	7e7b      	ldrb	r3, [r7, #25]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	8b7a      	ldrh	r2, [r7, #26]
 80141fa:	1ad3      	subs	r3, r2, r3
 80141fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80141fe:	69fb      	ldr	r3, [r7, #28]
 8014200:	88db      	ldrh	r3, [r3, #6]
 8014202:	b29b      	uxth	r3, r3
 8014204:	4618      	mov	r0, r3
 8014206:	f7f5 ff01 	bl	800a00c <lwip_htons>
 801420a:	4603      	mov	r3, r0
 801420c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014210:	b29b      	uxth	r3, r3
 8014212:	00db      	lsls	r3, r3, #3
 8014214:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801421e:	2200      	movs	r2, #0
 8014220:	701a      	strb	r2, [r3, #0]
 8014222:	2200      	movs	r2, #0
 8014224:	705a      	strb	r2, [r3, #1]
 8014226:	2200      	movs	r2, #0
 8014228:	709a      	strb	r2, [r3, #2]
 801422a:	2200      	movs	r2, #0
 801422c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801422e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014230:	8afa      	ldrh	r2, [r7, #22]
 8014232:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014234:	8afa      	ldrh	r2, [r7, #22]
 8014236:	8b7b      	ldrh	r3, [r7, #26]
 8014238:	4413      	add	r3, r2
 801423a:	b29a      	uxth	r2, r3
 801423c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801423e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014242:	88db      	ldrh	r3, [r3, #6]
 8014244:	b29b      	uxth	r3, r3
 8014246:	8afa      	ldrh	r2, [r7, #22]
 8014248:	429a      	cmp	r2, r3
 801424a:	d902      	bls.n	8014252 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801424c:	f04f 33ff 	mov.w	r3, #4294967295
 8014250:	e106      	b.n	8014460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	627b      	str	r3, [r7, #36]	@ 0x24
 8014258:	e068      	b.n	801432c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014262:	889b      	ldrh	r3, [r3, #4]
 8014264:	b29a      	uxth	r2, r3
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	889b      	ldrh	r3, [r3, #4]
 801426a:	b29b      	uxth	r3, r3
 801426c:	429a      	cmp	r2, r3
 801426e:	d235      	bcs.n	80142dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014274:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014278:	2b00      	cmp	r3, #0
 801427a:	d020      	beq.n	80142be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801427e:	889b      	ldrh	r3, [r3, #4]
 8014280:	b29a      	uxth	r2, r3
 8014282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014284:	88db      	ldrh	r3, [r3, #6]
 8014286:	b29b      	uxth	r3, r3
 8014288:	429a      	cmp	r2, r3
 801428a:	d307      	bcc.n	801429c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428e:	88db      	ldrh	r3, [r3, #6]
 8014290:	b29a      	uxth	r2, r3
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	889b      	ldrh	r3, [r3, #4]
 8014296:	b29b      	uxth	r3, r3
 8014298:	429a      	cmp	r2, r3
 801429a:	d902      	bls.n	80142a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801429c:	f04f 33ff 	mov.w	r3, #4294967295
 80142a0:	e0de      	b.n	8014460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80142a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142a4:	68ba      	ldr	r2, [r7, #8]
 80142a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80142a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142aa:	88db      	ldrh	r3, [r3, #6]
 80142ac:	b29a      	uxth	r2, r3
 80142ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b0:	889b      	ldrh	r3, [r3, #4]
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d03d      	beq.n	8014334 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80142b8:	2300      	movs	r3, #0
 80142ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80142bc:	e03a      	b.n	8014334 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80142be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142c0:	88db      	ldrh	r3, [r3, #6]
 80142c2:	b29a      	uxth	r2, r3
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	889b      	ldrh	r3, [r3, #4]
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d902      	bls.n	80142d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142ce:	f04f 33ff 	mov.w	r3, #4294967295
 80142d2:	e0c5      	b.n	8014460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	68ba      	ldr	r2, [r7, #8]
 80142d8:	605a      	str	r2, [r3, #4]
      break;
 80142da:	e02b      	b.n	8014334 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80142dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142de:	889b      	ldrh	r3, [r3, #4]
 80142e0:	b29a      	uxth	r2, r3
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	889b      	ldrh	r3, [r3, #4]
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d102      	bne.n	80142f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142ec:	f04f 33ff 	mov.w	r3, #4294967295
 80142f0:	e0b6      	b.n	8014460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80142f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f4:	889b      	ldrh	r3, [r3, #4]
 80142f6:	b29a      	uxth	r2, r3
 80142f8:	693b      	ldr	r3, [r7, #16]
 80142fa:	88db      	ldrh	r3, [r3, #6]
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	429a      	cmp	r2, r3
 8014300:	d202      	bcs.n	8014308 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014302:	f04f 33ff 	mov.w	r3, #4294967295
 8014306:	e0ab      	b.n	8014460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801430a:	2b00      	cmp	r3, #0
 801430c:	d009      	beq.n	8014322 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014310:	88db      	ldrh	r3, [r3, #6]
 8014312:	b29a      	uxth	r2, r3
 8014314:	693b      	ldr	r3, [r7, #16]
 8014316:	889b      	ldrh	r3, [r3, #4]
 8014318:	b29b      	uxth	r3, r3
 801431a:	429a      	cmp	r2, r3
 801431c:	d001      	beq.n	8014322 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801431e:	2300      	movs	r3, #0
 8014320:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801432e:	2b00      	cmp	r3, #0
 8014330:	d193      	bne.n	801425a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014332:	e000      	b.n	8014336 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014334:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014338:	2b00      	cmp	r3, #0
 801433a:	d12d      	bne.n	8014398 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801433e:	2b00      	cmp	r3, #0
 8014340:	d01c      	beq.n	801437c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014344:	88db      	ldrh	r3, [r3, #6]
 8014346:	b29a      	uxth	r2, r3
 8014348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801434a:	889b      	ldrh	r3, [r3, #4]
 801434c:	b29b      	uxth	r3, r3
 801434e:	429a      	cmp	r2, r3
 8014350:	d906      	bls.n	8014360 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014352:	4b45      	ldr	r3, [pc, #276]	@ (8014468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014354:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8014358:	4944      	ldr	r1, [pc, #272]	@ (801446c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801435a:	4845      	ldr	r0, [pc, #276]	@ (8014470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801435c:	f000 ff82 	bl	8015264 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014362:	68ba      	ldr	r2, [r7, #8]
 8014364:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014368:	88db      	ldrh	r3, [r3, #6]
 801436a:	b29a      	uxth	r2, r3
 801436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801436e:	889b      	ldrh	r3, [r3, #4]
 8014370:	b29b      	uxth	r3, r3
 8014372:	429a      	cmp	r2, r3
 8014374:	d010      	beq.n	8014398 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014376:	2300      	movs	r3, #0
 8014378:	623b      	str	r3, [r7, #32]
 801437a:	e00d      	b.n	8014398 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d006      	beq.n	8014392 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014384:	4b38      	ldr	r3, [pc, #224]	@ (8014468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014386:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801438a:	493a      	ldr	r1, [pc, #232]	@ (8014474 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801438c:	4838      	ldr	r0, [pc, #224]	@ (8014470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801438e:	f000 ff69 	bl	8015264 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	68ba      	ldr	r2, [r7, #8]
 8014396:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d105      	bne.n	80143aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	7f9b      	ldrb	r3, [r3, #30]
 80143a2:	f003 0301 	and.w	r3, r3, #1
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d059      	beq.n	801445e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80143aa:	6a3b      	ldr	r3, [r7, #32]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d04f      	beq.n	8014450 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d006      	beq.n	80143c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	685b      	ldr	r3, [r3, #4]
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	889b      	ldrh	r3, [r3, #4]
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d002      	beq.n	80143cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80143c6:	2300      	movs	r3, #0
 80143c8:	623b      	str	r3, [r7, #32]
 80143ca:	e041      	b.n	8014450 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80143cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ce:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80143d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80143d6:	e012      	b.n	80143fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80143d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80143de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e0:	88db      	ldrh	r3, [r3, #6]
 80143e2:	b29a      	uxth	r2, r3
 80143e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143e6:	889b      	ldrh	r3, [r3, #4]
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d002      	beq.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80143ee:	2300      	movs	r3, #0
 80143f0:	623b      	str	r3, [r7, #32]
            break;
 80143f2:	e007      	b.n	8014404 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80143f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143f6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80143f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80143fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014400:	2b00      	cmp	r3, #0
 8014402:	d1e9      	bne.n	80143d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014404:	6a3b      	ldr	r3, [r7, #32]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d022      	beq.n	8014450 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d106      	bne.n	8014420 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014412:	4b15      	ldr	r3, [pc, #84]	@ (8014468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014414:	f240 12df 	movw	r2, #479	@ 0x1df
 8014418:	4917      	ldr	r1, [pc, #92]	@ (8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801441a:	4815      	ldr	r0, [pc, #84]	@ (8014470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801441c:	f000 ff22 	bl	8015264 <iprintf>
          LWIP_ASSERT("sanity check",
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014428:	429a      	cmp	r2, r3
 801442a:	d106      	bne.n	801443a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801442c:	4b0e      	ldr	r3, [pc, #56]	@ (8014468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801442e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8014432:	4911      	ldr	r1, [pc, #68]	@ (8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014434:	480e      	ldr	r0, [pc, #56]	@ (8014470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014436:	f000 ff15 	bl	8015264 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801443a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d006      	beq.n	8014450 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014442:	4b09      	ldr	r3, [pc, #36]	@ (8014468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014444:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8014448:	490c      	ldr	r1, [pc, #48]	@ (801447c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801444a:	4809      	ldr	r0, [pc, #36]	@ (8014470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801444c:	f000 ff0a 	bl	8015264 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014450:	6a3b      	ldr	r3, [r7, #32]
 8014452:	2b00      	cmp	r3, #0
 8014454:	bf14      	ite	ne
 8014456:	2301      	movne	r3, #1
 8014458:	2300      	moveq	r3, #0
 801445a:	b2db      	uxtb	r3, r3
 801445c:	e000      	b.n	8014460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801445e:	2300      	movs	r3, #0
}
 8014460:	4618      	mov	r0, r3
 8014462:	3730      	adds	r7, #48	@ 0x30
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}
 8014468:	08019518 	.word	0x08019518
 801446c:	080195fc 	.word	0x080195fc
 8014470:	08019560 	.word	0x08019560
 8014474:	0801961c 	.word	0x0801961c
 8014478:	08019654 	.word	0x08019654
 801447c:	08019664 	.word	0x08019664

08014480 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b08e      	sub	sp, #56	@ 0x38
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801448e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	f003 030f 	and.w	r3, r3, #15
 8014496:	b2db      	uxtb	r3, r3
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	b2db      	uxtb	r3, r3
 801449c:	2b14      	cmp	r3, #20
 801449e:	f040 8171 	bne.w	8014784 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80144a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144a4:	88db      	ldrh	r3, [r3, #6]
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7f5 fdaf 	bl	800a00c <lwip_htons>
 80144ae:	4603      	mov	r3, r0
 80144b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	00db      	lsls	r3, r3, #3
 80144b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80144ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144bc:	885b      	ldrh	r3, [r3, #2]
 80144be:	b29b      	uxth	r3, r3
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f5 fda3 	bl	800a00c <lwip_htons>
 80144c6:	4603      	mov	r3, r0
 80144c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80144ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	f003 030f 	and.w	r3, r3, #15
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80144da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80144de:	b29b      	uxth	r3, r3
 80144e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80144e2:	429a      	cmp	r2, r3
 80144e4:	f0c0 8150 	bcc.w	8014788 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80144e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80144f0:	1ad3      	subs	r3, r2, r3
 80144f2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f7f7 fa05 	bl	800b904 <pbuf_clen>
 80144fa:	4603      	mov	r3, r0
 80144fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80144fe:	4b8c      	ldr	r3, [pc, #560]	@ (8014730 <ip4_reass+0x2b0>)
 8014500:	881b      	ldrh	r3, [r3, #0]
 8014502:	461a      	mov	r2, r3
 8014504:	8c3b      	ldrh	r3, [r7, #32]
 8014506:	4413      	add	r3, r2
 8014508:	2b0a      	cmp	r3, #10
 801450a:	dd10      	ble.n	801452e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801450c:	8c3b      	ldrh	r3, [r7, #32]
 801450e:	4619      	mov	r1, r3
 8014510:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014512:	f7ff fd81 	bl	8014018 <ip_reass_remove_oldest_datagram>
 8014516:	4603      	mov	r3, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	f000 8137 	beq.w	801478c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801451e:	4b84      	ldr	r3, [pc, #528]	@ (8014730 <ip4_reass+0x2b0>)
 8014520:	881b      	ldrh	r3, [r3, #0]
 8014522:	461a      	mov	r2, r3
 8014524:	8c3b      	ldrh	r3, [r7, #32]
 8014526:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014528:	2b0a      	cmp	r3, #10
 801452a:	f300 812f 	bgt.w	801478c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801452e:	4b81      	ldr	r3, [pc, #516]	@ (8014734 <ip4_reass+0x2b4>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	633b      	str	r3, [r7, #48]	@ 0x30
 8014534:	e015      	b.n	8014562 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014538:	695a      	ldr	r2, [r3, #20]
 801453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801453c:	68db      	ldr	r3, [r3, #12]
 801453e:	429a      	cmp	r2, r3
 8014540:	d10c      	bne.n	801455c <ip4_reass+0xdc>
 8014542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014544:	699a      	ldr	r2, [r3, #24]
 8014546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014548:	691b      	ldr	r3, [r3, #16]
 801454a:	429a      	cmp	r2, r3
 801454c:	d106      	bne.n	801455c <ip4_reass+0xdc>
 801454e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014550:	899a      	ldrh	r2, [r3, #12]
 8014552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014554:	889b      	ldrh	r3, [r3, #4]
 8014556:	b29b      	uxth	r3, r3
 8014558:	429a      	cmp	r2, r3
 801455a:	d006      	beq.n	801456a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	633b      	str	r3, [r7, #48]	@ 0x30
 8014562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014564:	2b00      	cmp	r3, #0
 8014566:	d1e6      	bne.n	8014536 <ip4_reass+0xb6>
 8014568:	e000      	b.n	801456c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801456a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801456e:	2b00      	cmp	r3, #0
 8014570:	d109      	bne.n	8014586 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014572:	8c3b      	ldrh	r3, [r7, #32]
 8014574:	4619      	mov	r1, r3
 8014576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014578:	f7ff fdb0 	bl	80140dc <ip_reass_enqueue_new_datagram>
 801457c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014580:	2b00      	cmp	r3, #0
 8014582:	d11c      	bne.n	80145be <ip4_reass+0x13e>
      goto nullreturn;
 8014584:	e105      	b.n	8014792 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014588:	88db      	ldrh	r3, [r3, #6]
 801458a:	b29b      	uxth	r3, r3
 801458c:	4618      	mov	r0, r3
 801458e:	f7f5 fd3d 	bl	800a00c <lwip_htons>
 8014592:	4603      	mov	r3, r0
 8014594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014598:	2b00      	cmp	r3, #0
 801459a:	d110      	bne.n	80145be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801459e:	89db      	ldrh	r3, [r3, #14]
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7f5 fd33 	bl	800a00c <lwip_htons>
 80145a6:	4603      	mov	r3, r0
 80145a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d006      	beq.n	80145be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80145b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b2:	3308      	adds	r3, #8
 80145b4:	2214      	movs	r2, #20
 80145b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80145b8:	4618      	mov	r0, r3
 80145ba:	f000 ff96 	bl	80154ea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80145be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145c0:	88db      	ldrh	r3, [r3, #6]
 80145c2:	b29b      	uxth	r3, r3
 80145c4:	f003 0320 	and.w	r3, r3, #32
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	bf0c      	ite	eq
 80145cc:	2301      	moveq	r3, #1
 80145ce:	2300      	movne	r3, #0
 80145d0:	b2db      	uxtb	r3, r3
 80145d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80145d4:	69fb      	ldr	r3, [r7, #28]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d00e      	beq.n	80145f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80145da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80145dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80145de:	4413      	add	r3, r2
 80145e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80145e2:	8b7a      	ldrh	r2, [r7, #26]
 80145e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80145e6:	429a      	cmp	r2, r3
 80145e8:	f0c0 80a0 	bcc.w	801472c <ip4_reass+0x2ac>
 80145ec:	8b7b      	ldrh	r3, [r7, #26]
 80145ee:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80145f2:	4293      	cmp	r3, r2
 80145f4:	f200 809a 	bhi.w	801472c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80145f8:	69fa      	ldr	r2, [r7, #28]
 80145fa:	6879      	ldr	r1, [r7, #4]
 80145fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145fe:	f7ff fdd5 	bl	80141ac <ip_reass_chain_frag_into_datagram_and_validate>
 8014602:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801460a:	f000 809b 	beq.w	8014744 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801460e:	4b48      	ldr	r3, [pc, #288]	@ (8014730 <ip4_reass+0x2b0>)
 8014610:	881a      	ldrh	r2, [r3, #0]
 8014612:	8c3b      	ldrh	r3, [r7, #32]
 8014614:	4413      	add	r3, r2
 8014616:	b29a      	uxth	r2, r3
 8014618:	4b45      	ldr	r3, [pc, #276]	@ (8014730 <ip4_reass+0x2b0>)
 801461a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d00d      	beq.n	801463e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014622:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014624:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014626:	4413      	add	r3, r2
 8014628:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801462c:	8a7a      	ldrh	r2, [r7, #18]
 801462e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014632:	7f9b      	ldrb	r3, [r3, #30]
 8014634:	f043 0301 	orr.w	r3, r3, #1
 8014638:	b2da      	uxtb	r2, r3
 801463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801463c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	2b01      	cmp	r3, #1
 8014642:	d171      	bne.n	8014728 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014646:	8b9b      	ldrh	r3, [r3, #28]
 8014648:	3314      	adds	r3, #20
 801464a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	685b      	ldr	r3, [r3, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	685b      	ldr	r3, [r3, #4]
 801465c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014660:	3308      	adds	r3, #8
 8014662:	2214      	movs	r2, #20
 8014664:	4619      	mov	r1, r3
 8014666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014668:	f000 ff3f 	bl	80154ea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801466c:	8a3b      	ldrh	r3, [r7, #16]
 801466e:	4618      	mov	r0, r3
 8014670:	f7f5 fccc 	bl	800a00c <lwip_htons>
 8014674:	4603      	mov	r3, r0
 8014676:	461a      	mov	r2, r3
 8014678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801467a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801467e:	2200      	movs	r2, #0
 8014680:	719a      	strb	r2, [r3, #6]
 8014682:	2200      	movs	r2, #0
 8014684:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014688:	2200      	movs	r2, #0
 801468a:	729a      	strb	r2, [r3, #10]
 801468c:	2200      	movs	r2, #0
 801468e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014696:	e00d      	b.n	80146b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801469e:	2114      	movs	r1, #20
 80146a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80146a2:	f7f7 f81b 	bl	800b6dc <pbuf_remove_header>
      pbuf_cat(p, r);
 80146a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f7f7 f96b 	bl	800b984 <pbuf_cat>
      r = iprh->next_pbuf;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80146b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d1ee      	bne.n	8014698 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80146ba:	4b1e      	ldr	r3, [pc, #120]	@ (8014734 <ip4_reass+0x2b4>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d102      	bne.n	80146ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80146c4:	2300      	movs	r3, #0
 80146c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80146c8:	e010      	b.n	80146ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80146ca:	4b1a      	ldr	r3, [pc, #104]	@ (8014734 <ip4_reass+0x2b4>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80146d0:	e007      	b.n	80146e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80146d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80146d8:	429a      	cmp	r2, r3
 80146da:	d006      	beq.n	80146ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80146dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80146e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d1f4      	bne.n	80146d2 <ip4_reass+0x252>
 80146e8:	e000      	b.n	80146ec <ip4_reass+0x26c>
          break;
 80146ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80146ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80146ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146f0:	f7ff fd2e 	bl	8014150 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f7f7 f905 	bl	800b904 <pbuf_clen>
 80146fa:	4603      	mov	r3, r0
 80146fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80146fe:	4b0c      	ldr	r3, [pc, #48]	@ (8014730 <ip4_reass+0x2b0>)
 8014700:	881b      	ldrh	r3, [r3, #0]
 8014702:	8c3a      	ldrh	r2, [r7, #32]
 8014704:	429a      	cmp	r2, r3
 8014706:	d906      	bls.n	8014716 <ip4_reass+0x296>
 8014708:	4b0b      	ldr	r3, [pc, #44]	@ (8014738 <ip4_reass+0x2b8>)
 801470a:	f240 229b 	movw	r2, #667	@ 0x29b
 801470e:	490b      	ldr	r1, [pc, #44]	@ (801473c <ip4_reass+0x2bc>)
 8014710:	480b      	ldr	r0, [pc, #44]	@ (8014740 <ip4_reass+0x2c0>)
 8014712:	f000 fda7 	bl	8015264 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014716:	4b06      	ldr	r3, [pc, #24]	@ (8014730 <ip4_reass+0x2b0>)
 8014718:	881a      	ldrh	r2, [r3, #0]
 801471a:	8c3b      	ldrh	r3, [r7, #32]
 801471c:	1ad3      	subs	r3, r2, r3
 801471e:	b29a      	uxth	r2, r3
 8014720:	4b03      	ldr	r3, [pc, #12]	@ (8014730 <ip4_reass+0x2b0>)
 8014722:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	e038      	b.n	801479a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014728:	2300      	movs	r3, #0
 801472a:	e036      	b.n	801479a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801472c:	bf00      	nop
 801472e:	e00a      	b.n	8014746 <ip4_reass+0x2c6>
 8014730:	2000bfc0 	.word	0x2000bfc0
 8014734:	2000bfbc 	.word	0x2000bfbc
 8014738:	08019518 	.word	0x08019518
 801473c:	08019688 	.word	0x08019688
 8014740:	08019560 	.word	0x08019560
    goto nullreturn_ipr;
 8014744:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014748:	2b00      	cmp	r3, #0
 801474a:	d106      	bne.n	801475a <ip4_reass+0x2da>
 801474c:	4b15      	ldr	r3, [pc, #84]	@ (80147a4 <ip4_reass+0x324>)
 801474e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8014752:	4915      	ldr	r1, [pc, #84]	@ (80147a8 <ip4_reass+0x328>)
 8014754:	4815      	ldr	r0, [pc, #84]	@ (80147ac <ip4_reass+0x32c>)
 8014756:	f000 fd85 	bl	8015264 <iprintf>
  if (ipr->p == NULL) {
 801475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801475c:	685b      	ldr	r3, [r3, #4]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d116      	bne.n	8014790 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014762:	4b13      	ldr	r3, [pc, #76]	@ (80147b0 <ip4_reass+0x330>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014768:	429a      	cmp	r2, r3
 801476a:	d006      	beq.n	801477a <ip4_reass+0x2fa>
 801476c:	4b0d      	ldr	r3, [pc, #52]	@ (80147a4 <ip4_reass+0x324>)
 801476e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014772:	4910      	ldr	r1, [pc, #64]	@ (80147b4 <ip4_reass+0x334>)
 8014774:	480d      	ldr	r0, [pc, #52]	@ (80147ac <ip4_reass+0x32c>)
 8014776:	f000 fd75 	bl	8015264 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801477a:	2100      	movs	r1, #0
 801477c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801477e:	f7ff fce7 	bl	8014150 <ip_reass_dequeue_datagram>
 8014782:	e006      	b.n	8014792 <ip4_reass+0x312>
    goto nullreturn;
 8014784:	bf00      	nop
 8014786:	e004      	b.n	8014792 <ip4_reass+0x312>
    goto nullreturn;
 8014788:	bf00      	nop
 801478a:	e002      	b.n	8014792 <ip4_reass+0x312>
      goto nullreturn;
 801478c:	bf00      	nop
 801478e:	e000      	b.n	8014792 <ip4_reass+0x312>
  }

nullreturn:
 8014790:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f7f7 f828 	bl	800b7e8 <pbuf_free>
  return NULL;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	3738      	adds	r7, #56	@ 0x38
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	08019518 	.word	0x08019518
 80147a8:	080196a4 	.word	0x080196a4
 80147ac:	08019560 	.word	0x08019560
 80147b0:	2000bfbc 	.word	0x2000bfbc
 80147b4:	080196b0 	.word	0x080196b0

080147b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80147bc:	2005      	movs	r0, #5
 80147be:	f7f6 f8f9 	bl	800a9b4 <memp_malloc>
 80147c2:	4603      	mov	r3, r0
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d106      	bne.n	80147e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80147d6:	4b07      	ldr	r3, [pc, #28]	@ (80147f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80147d8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80147dc:	4906      	ldr	r1, [pc, #24]	@ (80147f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80147de:	4807      	ldr	r0, [pc, #28]	@ (80147fc <ip_frag_free_pbuf_custom_ref+0x34>)
 80147e0:	f000 fd40 	bl	8015264 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80147e4:	6879      	ldr	r1, [r7, #4]
 80147e6:	2005      	movs	r0, #5
 80147e8:	f7f6 f95a 	bl	800aaa0 <memp_free>
}
 80147ec:	bf00      	nop
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	08019518 	.word	0x08019518
 80147f8:	080196d0 	.word	0x080196d0
 80147fc:	08019560 	.word	0x08019560

08014800 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d106      	bne.n	8014820 <ipfrag_free_pbuf_custom+0x20>
 8014812:	4b11      	ldr	r3, [pc, #68]	@ (8014858 <ipfrag_free_pbuf_custom+0x58>)
 8014814:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014818:	4910      	ldr	r1, [pc, #64]	@ (801485c <ipfrag_free_pbuf_custom+0x5c>)
 801481a:	4811      	ldr	r0, [pc, #68]	@ (8014860 <ipfrag_free_pbuf_custom+0x60>)
 801481c:	f000 fd22 	bl	8015264 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014820:	68fa      	ldr	r2, [r7, #12]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	429a      	cmp	r2, r3
 8014826:	d006      	beq.n	8014836 <ipfrag_free_pbuf_custom+0x36>
 8014828:	4b0b      	ldr	r3, [pc, #44]	@ (8014858 <ipfrag_free_pbuf_custom+0x58>)
 801482a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801482e:	490d      	ldr	r1, [pc, #52]	@ (8014864 <ipfrag_free_pbuf_custom+0x64>)
 8014830:	480b      	ldr	r0, [pc, #44]	@ (8014860 <ipfrag_free_pbuf_custom+0x60>)
 8014832:	f000 fd17 	bl	8015264 <iprintf>
  if (pcr->original != NULL) {
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	695b      	ldr	r3, [r3, #20]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d004      	beq.n	8014848 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	695b      	ldr	r3, [r3, #20]
 8014842:	4618      	mov	r0, r3
 8014844:	f7f6 ffd0 	bl	800b7e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014848:	68f8      	ldr	r0, [r7, #12]
 801484a:	f7ff ffbd 	bl	80147c8 <ip_frag_free_pbuf_custom_ref>
}
 801484e:	bf00      	nop
 8014850:	3710      	adds	r7, #16
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	08019518 	.word	0x08019518
 801485c:	080196dc 	.word	0x080196dc
 8014860:	08019560 	.word	0x08019560
 8014864:	080196e8 	.word	0x080196e8

08014868 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b094      	sub	sp, #80	@ 0x50
 801486c:	af02      	add	r7, sp, #8
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	60b9      	str	r1, [r7, #8]
 8014872:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014874:	2300      	movs	r3, #0
 8014876:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801487e:	3b14      	subs	r3, #20
 8014880:	2b00      	cmp	r3, #0
 8014882:	da00      	bge.n	8014886 <ip4_frag+0x1e>
 8014884:	3307      	adds	r3, #7
 8014886:	10db      	asrs	r3, r3, #3
 8014888:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801488a:	2314      	movs	r3, #20
 801488c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014896:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	f003 030f 	and.w	r3, r3, #15
 80148a0:	b2db      	uxtb	r3, r3
 80148a2:	009b      	lsls	r3, r3, #2
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	2b14      	cmp	r3, #20
 80148a8:	d002      	beq.n	80148b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80148aa:	f06f 0305 	mvn.w	r3, #5
 80148ae:	e110      	b.n	8014ad2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	895b      	ldrh	r3, [r3, #10]
 80148b4:	2b13      	cmp	r3, #19
 80148b6:	d809      	bhi.n	80148cc <ip4_frag+0x64>
 80148b8:	4b88      	ldr	r3, [pc, #544]	@ (8014adc <ip4_frag+0x274>)
 80148ba:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80148be:	4988      	ldr	r1, [pc, #544]	@ (8014ae0 <ip4_frag+0x278>)
 80148c0:	4888      	ldr	r0, [pc, #544]	@ (8014ae4 <ip4_frag+0x27c>)
 80148c2:	f000 fccf 	bl	8015264 <iprintf>
 80148c6:	f06f 0305 	mvn.w	r3, #5
 80148ca:	e102      	b.n	8014ad2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80148cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148ce:	88db      	ldrh	r3, [r3, #6]
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7f5 fb9a 	bl	800a00c <lwip_htons>
 80148d8:	4603      	mov	r3, r0
 80148da:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80148dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80148de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80148e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80148e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80148e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80148ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	891b      	ldrh	r3, [r3, #8]
 80148f2:	3b14      	subs	r3, #20
 80148f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80148f8:	e0e1      	b.n	8014abe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80148fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80148fc:	00db      	lsls	r3, r3, #3
 80148fe:	b29b      	uxth	r3, r3
 8014900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014904:	4293      	cmp	r3, r2
 8014906:	bf28      	it	cs
 8014908:	4613      	movcs	r3, r2
 801490a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801490c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014910:	2114      	movs	r1, #20
 8014912:	200e      	movs	r0, #14
 8014914:	f7f6 fc84 	bl	800b220 <pbuf_alloc>
 8014918:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801491c:	2b00      	cmp	r3, #0
 801491e:	f000 80d5 	beq.w	8014acc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014924:	895b      	ldrh	r3, [r3, #10]
 8014926:	2b13      	cmp	r3, #19
 8014928:	d806      	bhi.n	8014938 <ip4_frag+0xd0>
 801492a:	4b6c      	ldr	r3, [pc, #432]	@ (8014adc <ip4_frag+0x274>)
 801492c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014930:	496d      	ldr	r1, [pc, #436]	@ (8014ae8 <ip4_frag+0x280>)
 8014932:	486c      	ldr	r0, [pc, #432]	@ (8014ae4 <ip4_frag+0x27c>)
 8014934:	f000 fc96 	bl	8015264 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	2214      	movs	r2, #20
 801493e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014940:	4618      	mov	r0, r3
 8014942:	f000 fdd2 	bl	80154ea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801494c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801494e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014952:	e064      	b.n	8014a1e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	895a      	ldrh	r2, [r3, #10]
 8014958:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801495a:	1ad3      	subs	r3, r2, r3
 801495c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	895b      	ldrh	r3, [r3, #10]
 8014962:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014964:	429a      	cmp	r2, r3
 8014966:	d906      	bls.n	8014976 <ip4_frag+0x10e>
 8014968:	4b5c      	ldr	r3, [pc, #368]	@ (8014adc <ip4_frag+0x274>)
 801496a:	f240 322d 	movw	r2, #813	@ 0x32d
 801496e:	495f      	ldr	r1, [pc, #380]	@ (8014aec <ip4_frag+0x284>)
 8014970:	485c      	ldr	r0, [pc, #368]	@ (8014ae4 <ip4_frag+0x27c>)
 8014972:	f000 fc77 	bl	8015264 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014976:	8bfa      	ldrh	r2, [r7, #30]
 8014978:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801497c:	4293      	cmp	r3, r2
 801497e:	bf28      	it	cs
 8014980:	4613      	movcs	r3, r2
 8014982:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014986:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801498a:	2b00      	cmp	r3, #0
 801498c:	d105      	bne.n	801499a <ip4_frag+0x132>
        poff = 0;
 801498e:	2300      	movs	r3, #0
 8014990:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	60fb      	str	r3, [r7, #12]
        continue;
 8014998:	e041      	b.n	8014a1e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801499a:	f7ff ff0d 	bl	80147b8 <ip_frag_alloc_pbuf_custom_ref>
 801499e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80149a0:	69bb      	ldr	r3, [r7, #24]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d103      	bne.n	80149ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80149a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149a8:	f7f6 ff1e 	bl	800b7e8 <pbuf_free>
        goto memerr;
 80149ac:	e08f      	b.n	8014ace <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80149ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80149b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80149b6:	4413      	add	r3, r2
 80149b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80149bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80149c0:	9201      	str	r2, [sp, #4]
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	4603      	mov	r3, r0
 80149c6:	2241      	movs	r2, #65	@ 0x41
 80149c8:	2000      	movs	r0, #0
 80149ca:	f7f6 fd53 	bl	800b474 <pbuf_alloced_custom>
 80149ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d106      	bne.n	80149e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80149d6:	69b8      	ldr	r0, [r7, #24]
 80149d8:	f7ff fef6 	bl	80147c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80149dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149de:	f7f6 ff03 	bl	800b7e8 <pbuf_free>
        goto memerr;
 80149e2:	e074      	b.n	8014ace <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80149e4:	68f8      	ldr	r0, [r7, #12]
 80149e6:	f7f6 ffa5 	bl	800b934 <pbuf_ref>
      pcr->original = p;
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	68fa      	ldr	r2, [r7, #12]
 80149ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	4a3f      	ldr	r2, [pc, #252]	@ (8014af0 <ip4_frag+0x288>)
 80149f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80149f6:	6979      	ldr	r1, [r7, #20]
 80149f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149fa:	f7f6 ffc3 	bl	800b984 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80149fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014a02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014a06:	1ad3      	subs	r3, r2, r3
 8014a08:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014a0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d004      	beq.n	8014a1e <ip4_frag+0x1b6>
        poff = 0;
 8014a14:	2300      	movs	r3, #0
 8014a16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014a1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d196      	bne.n	8014954 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014a26:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014a28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014a2c:	4413      	add	r3, r2
 8014a2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014a34:	f1a3 0213 	sub.w	r2, r3, #19
 8014a38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	bfcc      	ite	gt
 8014a40:	2301      	movgt	r3, #1
 8014a42:	2300      	movle	r3, #0
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014a48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a50:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014a52:	6a3b      	ldr	r3, [r7, #32]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d002      	beq.n	8014a5e <ip4_frag+0x1f6>
 8014a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d003      	beq.n	8014a66 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014a5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014a60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014a64:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014a66:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7f5 facf 	bl	800a00c <lwip_htons>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	461a      	mov	r2, r3
 8014a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a74:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014a76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014a78:	3314      	adds	r3, #20
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7f5 fac5 	bl	800a00c <lwip_htons>
 8014a82:	4603      	mov	r3, r0
 8014a84:	461a      	mov	r2, r3
 8014a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a88:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	729a      	strb	r2, [r3, #10]
 8014a90:	2200      	movs	r2, #0
 8014a92:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	695b      	ldr	r3, [r3, #20]
 8014a98:	687a      	ldr	r2, [r7, #4]
 8014a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014a9c:	68b8      	ldr	r0, [r7, #8]
 8014a9e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014aa0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014aa2:	f7f6 fea1 	bl	800b7e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014aa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014aaa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014aac:	1ad3      	subs	r3, r2, r3
 8014aae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014ab2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014ab6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014ab8:	4413      	add	r3, r2
 8014aba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014abe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	f47f af19 	bne.w	80148fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	e002      	b.n	8014ad2 <ip4_frag+0x26a>
      goto memerr;
 8014acc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3748      	adds	r7, #72	@ 0x48
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	08019518 	.word	0x08019518
 8014ae0:	080196f4 	.word	0x080196f4
 8014ae4:	08019560 	.word	0x08019560
 8014ae8:	08019710 	.word	0x08019710
 8014aec:	08019730 	.word	0x08019730
 8014af0:	08014801 	.word	0x08014801

08014af4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b086      	sub	sp, #24
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014afe:	230e      	movs	r3, #14
 8014b00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	895b      	ldrh	r3, [r3, #10]
 8014b06:	2b0e      	cmp	r3, #14
 8014b08:	d96e      	bls.n	8014be8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	7bdb      	ldrb	r3, [r3, #15]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d106      	bne.n	8014b20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014b18:	3301      	adds	r3, #1
 8014b1a:	b2da      	uxtb	r2, r3
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	7b1a      	ldrb	r2, [r3, #12]
 8014b2a:	7b5b      	ldrb	r3, [r3, #13]
 8014b2c:	021b      	lsls	r3, r3, #8
 8014b2e:	4313      	orrs	r3, r2
 8014b30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014b32:	693b      	ldr	r3, [r7, #16]
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	f003 0301 	and.w	r3, r3, #1
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d023      	beq.n	8014b86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014b3e:	693b      	ldr	r3, [r7, #16]
 8014b40:	781b      	ldrb	r3, [r3, #0]
 8014b42:	2b01      	cmp	r3, #1
 8014b44:	d10f      	bne.n	8014b66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	785b      	ldrb	r3, [r3, #1]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d11b      	bne.n	8014b86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014b52:	2b5e      	cmp	r3, #94	@ 0x5e
 8014b54:	d117      	bne.n	8014b86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	7b5b      	ldrb	r3, [r3, #13]
 8014b5a:	f043 0310 	orr.w	r3, r3, #16
 8014b5e:	b2da      	uxtb	r2, r3
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	735a      	strb	r2, [r3, #13]
 8014b64:	e00f      	b.n	8014b86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	2206      	movs	r2, #6
 8014b6a:	4928      	ldr	r1, [pc, #160]	@ (8014c0c <ethernet_input+0x118>)
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f000 fbce 	bl	801530e <memcmp>
 8014b72:	4603      	mov	r3, r0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d106      	bne.n	8014b86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	7b5b      	ldrb	r3, [r3, #13]
 8014b7c:	f043 0308 	orr.w	r3, r3, #8
 8014b80:	b2da      	uxtb	r2, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014b86:	89fb      	ldrh	r3, [r7, #14]
 8014b88:	2b08      	cmp	r3, #8
 8014b8a:	d003      	beq.n	8014b94 <ethernet_input+0xa0>
 8014b8c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014b90:	d014      	beq.n	8014bbc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014b92:	e032      	b.n	8014bfa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b9a:	f003 0308 	and.w	r3, r3, #8
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d024      	beq.n	8014bec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014ba2:	8afb      	ldrh	r3, [r7, #22]
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f7f6 fd98 	bl	800b6dc <pbuf_remove_header>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d11e      	bne.n	8014bf0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014bb2:	6839      	ldr	r1, [r7, #0]
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f7fe ff21 	bl	80139fc <ip4_input>
      break;
 8014bba:	e013      	b.n	8014be4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014bc2:	f003 0308 	and.w	r3, r3, #8
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d014      	beq.n	8014bf4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014bca:	8afb      	ldrh	r3, [r7, #22]
 8014bcc:	4619      	mov	r1, r3
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f7f6 fd84 	bl	800b6dc <pbuf_remove_header>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d10e      	bne.n	8014bf8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014bda:	6839      	ldr	r1, [r7, #0]
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f7fe f8c1 	bl	8012d64 <etharp_input>
      break;
 8014be2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014be4:	2300      	movs	r3, #0
 8014be6:	e00c      	b.n	8014c02 <ethernet_input+0x10e>
    goto free_and_return;
 8014be8:	bf00      	nop
 8014bea:	e006      	b.n	8014bfa <ethernet_input+0x106>
        goto free_and_return;
 8014bec:	bf00      	nop
 8014bee:	e004      	b.n	8014bfa <ethernet_input+0x106>
        goto free_and_return;
 8014bf0:	bf00      	nop
 8014bf2:	e002      	b.n	8014bfa <ethernet_input+0x106>
        goto free_and_return;
 8014bf4:	bf00      	nop
 8014bf6:	e000      	b.n	8014bfa <ethernet_input+0x106>
        goto free_and_return;
 8014bf8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f7f6 fdf4 	bl	800b7e8 <pbuf_free>
  return ERR_OK;
 8014c00:	2300      	movs	r3, #0
}
 8014c02:	4618      	mov	r0, r3
 8014c04:	3718      	adds	r7, #24
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	bf00      	nop
 8014c0c:	08022bd0 	.word	0x08022bd0

08014c10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b086      	sub	sp, #24
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	607a      	str	r2, [r7, #4]
 8014c1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014c1e:	8c3b      	ldrh	r3, [r7, #32]
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7f5 f9f3 	bl	800a00c <lwip_htons>
 8014c26:	4603      	mov	r3, r0
 8014c28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014c2a:	210e      	movs	r1, #14
 8014c2c:	68b8      	ldr	r0, [r7, #8]
 8014c2e:	f7f6 fd45 	bl	800b6bc <pbuf_add_header>
 8014c32:	4603      	mov	r3, r0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d125      	bne.n	8014c84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	8afa      	ldrh	r2, [r7, #22]
 8014c42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	2206      	movs	r2, #6
 8014c48:	6839      	ldr	r1, [r7, #0]
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f000 fc4d 	bl	80154ea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	3306      	adds	r3, #6
 8014c54:	2206      	movs	r2, #6
 8014c56:	6879      	ldr	r1, [r7, #4]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f000 fc46 	bl	80154ea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014c64:	2b06      	cmp	r3, #6
 8014c66:	d006      	beq.n	8014c76 <ethernet_output+0x66>
 8014c68:	4b0a      	ldr	r3, [pc, #40]	@ (8014c94 <ethernet_output+0x84>)
 8014c6a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014c6e:	490a      	ldr	r1, [pc, #40]	@ (8014c98 <ethernet_output+0x88>)
 8014c70:	480a      	ldr	r0, [pc, #40]	@ (8014c9c <ethernet_output+0x8c>)
 8014c72:	f000 faf7 	bl	8015264 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	699b      	ldr	r3, [r3, #24]
 8014c7a:	68b9      	ldr	r1, [r7, #8]
 8014c7c:	68f8      	ldr	r0, [r7, #12]
 8014c7e:	4798      	blx	r3
 8014c80:	4603      	mov	r3, r0
 8014c82:	e002      	b.n	8014c8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014c84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014c86:	f06f 0301 	mvn.w	r3, #1
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3718      	adds	r7, #24
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop
 8014c94:	08019740 	.word	0x08019740
 8014c98:	08019778 	.word	0x08019778
 8014c9c:	080197ac 	.word	0x080197ac

08014ca0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b086      	sub	sp, #24
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
 8014ca8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	60bb      	str	r3, [r7, #8]
 8014cae:	2304      	movs	r3, #4
 8014cb0:	60fb      	str	r3, [r7, #12]
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	613b      	str	r3, [r7, #16]
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014cba:	f107 0308 	add.w	r3, r7, #8
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7ef ff50 	bl	8004b66 <osMessageCreate>
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d102      	bne.n	8014cda <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014cd8:	e000      	b.n	8014cdc <sys_mbox_new+0x3c>

  return ERR_OK;
 8014cda:	2300      	movs	r3, #0
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3718      	adds	r7, #24
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7f0 f815 	bl	8004d20 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7f0 f826 	bl	8004d4c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014d00:	bf00      	nop
 8014d02:	3708      	adds	r7, #8
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b084      	sub	sp, #16
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	6839      	ldr	r1, [r7, #0]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7ef ff4c 	bl	8004bb8 <osMessagePut>
 8014d20:	4603      	mov	r3, r0
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d102      	bne.n	8014d2c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014d26:	2300      	movs	r3, #0
 8014d28:	73fb      	strb	r3, [r7, #15]
 8014d2a:	e001      	b.n	8014d30 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014d2c:	23ff      	movs	r3, #255	@ 0xff
 8014d2e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3710      	adds	r7, #16
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}

08014d3c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b08c      	sub	sp, #48	@ 0x30
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	61f8      	str	r0, [r7, #28]
 8014d44:	61b9      	str	r1, [r7, #24]
 8014d46:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014d48:	f7ef fd2b 	bl	80047a2 <osKernelSysTick>
 8014d4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d017      	beq.n	8014d84 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014d54:	69fb      	ldr	r3, [r7, #28]
 8014d56:	6819      	ldr	r1, [r3, #0]
 8014d58:	f107 0320 	add.w	r3, r7, #32
 8014d5c:	697a      	ldr	r2, [r7, #20]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7ef ff6a 	bl	8004c38 <osMessageGet>

    if(event.status == osEventMessage)
 8014d64:	6a3b      	ldr	r3, [r7, #32]
 8014d66:	2b10      	cmp	r3, #16
 8014d68:	d109      	bne.n	8014d7e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014d72:	f7ef fd16 	bl	80047a2 <osKernelSysTick>
 8014d76:	4602      	mov	r2, r0
 8014d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d7a:	1ad3      	subs	r3, r2, r3
 8014d7c:	e019      	b.n	8014db2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d82:	e016      	b.n	8014db2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	6819      	ldr	r1, [r3, #0]
 8014d88:	463b      	mov	r3, r7
 8014d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7ef ff52 	bl	8004c38 <osMessageGet>
 8014d94:	f107 0320 	add.w	r3, r7, #32
 8014d98:	463a      	mov	r2, r7
 8014d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8014d9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014da2:	461a      	mov	r2, r3
 8014da4:	69bb      	ldr	r3, [r7, #24]
 8014da6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014da8:	f7ef fcfb 	bl	80047a2 <osKernelSysTick>
 8014dac:	4602      	mov	r2, r0
 8014dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014db0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3730      	adds	r7, #48	@ 0x30
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}

08014dba <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014dba:	b580      	push	{r7, lr}
 8014dbc:	b086      	sub	sp, #24
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	6078      	str	r0, [r7, #4]
 8014dc2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6819      	ldr	r1, [r3, #0]
 8014dc8:	f107 030c 	add.w	r3, r7, #12
 8014dcc:	2200      	movs	r2, #0
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7ef ff32 	bl	8004c38 <osMessageGet>

  if(event.status == osEventMessage)
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	2b10      	cmp	r3, #16
 8014dd8:	d105      	bne.n	8014de6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	461a      	mov	r2, r3
 8014dde:	683b      	ldr	r3, [r7, #0]
 8014de0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8014de2:	2300      	movs	r3, #0
 8014de4:	e001      	b.n	8014dea <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014de6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8014dea:	4618      	mov	r0, r3
 8014dec:	3718      	adds	r7, #24
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}

08014df2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014df2:	b480      	push	{r7}
 8014df4:	b083      	sub	sp, #12
 8014df6:	af00      	add	r7, sp, #0
 8014df8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d101      	bne.n	8014e06 <sys_mbox_valid+0x14>
    return 0;
 8014e02:	2300      	movs	r3, #0
 8014e04:	e000      	b.n	8014e08 <sys_mbox_valid+0x16>
  else
    return 1;
 8014e06:	2301      	movs	r3, #1
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	370c      	adds	r7, #12
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e12:	4770      	bx	lr

08014e14 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b083      	sub	sp, #12
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	601a      	str	r2, [r3, #0]
}
 8014e22:	bf00      	nop
 8014e24:	370c      	adds	r7, #12
 8014e26:	46bd      	mov	sp, r7
 8014e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2c:	4770      	bx	lr

08014e2e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014e2e:	b580      	push	{r7, lr}
 8014e30:	b084      	sub	sp, #16
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
 8014e36:	460b      	mov	r3, r1
 8014e38:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	60bb      	str	r3, [r7, #8]
 8014e3e:	2300      	movs	r3, #0
 8014e40:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8014e42:	f107 0308 	add.w	r3, r7, #8
 8014e46:	2101      	movs	r1, #1
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f7ef fdc3 	bl	80049d4 <osSemaphoreCreate>
 8014e4e:	4602      	mov	r2, r0
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d102      	bne.n	8014e62 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e60:	e009      	b.n	8014e76 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8014e62:	78fb      	ldrb	r3, [r7, #3]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d105      	bne.n	8014e74 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	2100      	movs	r1, #0
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7ef fde2 	bl	8004a38 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014e74:	2300      	movs	r3, #0
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3710      	adds	r7, #16
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}

08014e7e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014e7e:	b580      	push	{r7, lr}
 8014e80:	b084      	sub	sp, #16
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	6078      	str	r0, [r7, #4]
 8014e86:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014e88:	f7ef fc8b 	bl	80047a2 <osKernelSysTick>
 8014e8c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d011      	beq.n	8014eb8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	6839      	ldr	r1, [r7, #0]
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7ef fdcc 	bl	8004a38 <osSemaphoreWait>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d105      	bne.n	8014eb2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8014ea6:	f7ef fc7c 	bl	80047a2 <osKernelSysTick>
 8014eaa:	4602      	mov	r2, r0
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	1ad3      	subs	r3, r2, r3
 8014eb0:	e012      	b.n	8014ed8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8014eb6:	e00f      	b.n	8014ed8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014eb8:	bf00      	nop
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7ef fdb8 	bl	8004a38 <osSemaphoreWait>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d1f5      	bne.n	8014eba <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8014ece:	f7ef fc68 	bl	80047a2 <osKernelSysTick>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3710      	adds	r7, #16
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7ef fdf1 	bl	8004ad4 <osSemaphoreRelease>
}
 8014ef2:	bf00      	nop
 8014ef4:	3708      	adds	r7, #8
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}

08014efa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8014efa:	b580      	push	{r7, lr}
 8014efc:	b082      	sub	sp, #8
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	4618      	mov	r0, r3
 8014f08:	f7ef fe1a 	bl	8004b40 <osSemaphoreDelete>
}
 8014f0c:	bf00      	nop
 8014f0e:	3708      	adds	r7, #8
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8014f14:	b480      	push	{r7}
 8014f16:	b083      	sub	sp, #12
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d101      	bne.n	8014f28 <sys_sem_valid+0x14>
    return 0;
 8014f24:	2300      	movs	r3, #0
 8014f26:	e000      	b.n	8014f2a <sys_sem_valid+0x16>
  else
    return 1;
 8014f28:	2301      	movs	r3, #1
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	370c      	adds	r7, #12
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f34:	4770      	bx	lr

08014f36 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8014f36:	b480      	push	{r7}
 8014f38:	b083      	sub	sp, #12
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2200      	movs	r2, #0
 8014f42:	601a      	str	r2, [r3, #0]
}
 8014f44:	bf00      	nop
 8014f46:	370c      	adds	r7, #12
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4e:	4770      	bx	lr

08014f50 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014f54:	4803      	ldr	r0, [pc, #12]	@ (8014f64 <sys_init+0x14>)
 8014f56:	f7ef fca0 	bl	800489a <osMutexCreate>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	4a02      	ldr	r2, [pc, #8]	@ (8014f68 <sys_init+0x18>)
 8014f5e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014f60:	bf00      	nop
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	08022be0 	.word	0x08022be0
 8014f68:	2000bfc4 	.word	0x2000bfc4

08014f6c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b084      	sub	sp, #16
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014f74:	2300      	movs	r3, #0
 8014f76:	60bb      	str	r3, [r7, #8]
 8014f78:	2300      	movs	r3, #0
 8014f7a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014f7c:	f107 0308 	add.w	r3, r7, #8
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7ef fc8a 	bl	800489a <osMutexCreate>
 8014f86:	4602      	mov	r2, r0
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d102      	bne.n	8014f9a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014f94:	f04f 33ff 	mov.w	r3, #4294967295
 8014f98:	e000      	b.n	8014f9c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014f9a:	2300      	movs	r3, #0
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3710      	adds	r7, #16
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}

08014fa4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b082      	sub	sp, #8
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7ef fc89 	bl	80048cc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014fba:	bf00      	nop
 8014fbc:	3708      	adds	r7, #8
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}

08014fc2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014fc2:	b580      	push	{r7, lr}
 8014fc4:	b082      	sub	sp, #8
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7ef fcca 	bl	8004968 <osMutexRelease>
}
 8014fd4:	bf00      	nop
 8014fd6:	3708      	adds	r7, #8
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}

08014fdc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b08c      	sub	sp, #48	@ 0x30
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
 8014fe8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014fea:	f107 0314 	add.w	r3, r7, #20
 8014fee:	2200      	movs	r2, #0
 8014ff0:	601a      	str	r2, [r3, #0]
 8014ff2:	605a      	str	r2, [r3, #4]
 8014ff4:	609a      	str	r2, [r3, #8]
 8014ff6:	60da      	str	r2, [r3, #12]
 8014ff8:	611a      	str	r2, [r3, #16]
 8014ffa:	615a      	str	r2, [r3, #20]
 8014ffc:	619a      	str	r2, [r3, #24]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	617b      	str	r3, [r7, #20]
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	61bb      	str	r3, [r7, #24]
 8015006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015008:	b21b      	sxth	r3, r3
 801500a:	83bb      	strh	r3, [r7, #28]
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015010:	f107 0314 	add.w	r3, r7, #20
 8015014:	6879      	ldr	r1, [r7, #4]
 8015016:	4618      	mov	r0, r3
 8015018:	f7ef fbd3 	bl	80047c2 <osThreadCreate>
 801501c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801501e:	4618      	mov	r0, r3
 8015020:	3730      	adds	r7, #48	@ 0x30
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
	...

08015028 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801502c:	4b04      	ldr	r3, [pc, #16]	@ (8015040 <sys_arch_protect+0x18>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	f04f 31ff 	mov.w	r1, #4294967295
 8015034:	4618      	mov	r0, r3
 8015036:	f7ef fc49 	bl	80048cc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801503a:	2301      	movs	r3, #1
}
 801503c:	4618      	mov	r0, r3
 801503e:	bd80      	pop	{r7, pc}
 8015040:	2000bfc4 	.word	0x2000bfc4

08015044 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801504c:	4b04      	ldr	r3, [pc, #16]	@ (8015060 <sys_arch_unprotect+0x1c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	4618      	mov	r0, r3
 8015052:	f7ef fc89 	bl	8004968 <osMutexRelease>
}
 8015056:	bf00      	nop
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	2000bfc4 	.word	0x2000bfc4

08015064 <rand>:
 8015064:	4b16      	ldr	r3, [pc, #88]	@ (80150c0 <rand+0x5c>)
 8015066:	b510      	push	{r4, lr}
 8015068:	681c      	ldr	r4, [r3, #0]
 801506a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801506c:	b9b3      	cbnz	r3, 801509c <rand+0x38>
 801506e:	2018      	movs	r0, #24
 8015070:	f000 fab2 	bl	80155d8 <malloc>
 8015074:	4602      	mov	r2, r0
 8015076:	6320      	str	r0, [r4, #48]	@ 0x30
 8015078:	b920      	cbnz	r0, 8015084 <rand+0x20>
 801507a:	4b12      	ldr	r3, [pc, #72]	@ (80150c4 <rand+0x60>)
 801507c:	4812      	ldr	r0, [pc, #72]	@ (80150c8 <rand+0x64>)
 801507e:	2152      	movs	r1, #82	@ 0x52
 8015080:	f000 fa42 	bl	8015508 <__assert_func>
 8015084:	4911      	ldr	r1, [pc, #68]	@ (80150cc <rand+0x68>)
 8015086:	4b12      	ldr	r3, [pc, #72]	@ (80150d0 <rand+0x6c>)
 8015088:	e9c0 1300 	strd	r1, r3, [r0]
 801508c:	4b11      	ldr	r3, [pc, #68]	@ (80150d4 <rand+0x70>)
 801508e:	6083      	str	r3, [r0, #8]
 8015090:	230b      	movs	r3, #11
 8015092:	8183      	strh	r3, [r0, #12]
 8015094:	2100      	movs	r1, #0
 8015096:	2001      	movs	r0, #1
 8015098:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801509c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801509e:	480e      	ldr	r0, [pc, #56]	@ (80150d8 <rand+0x74>)
 80150a0:	690b      	ldr	r3, [r1, #16]
 80150a2:	694c      	ldr	r4, [r1, #20]
 80150a4:	4a0d      	ldr	r2, [pc, #52]	@ (80150dc <rand+0x78>)
 80150a6:	4358      	muls	r0, r3
 80150a8:	fb02 0004 	mla	r0, r2, r4, r0
 80150ac:	fba3 3202 	umull	r3, r2, r3, r2
 80150b0:	3301      	adds	r3, #1
 80150b2:	eb40 0002 	adc.w	r0, r0, r2
 80150b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80150ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80150be:	bd10      	pop	{r4, pc}
 80150c0:	2000003c 	.word	0x2000003c
 80150c4:	08022be8 	.word	0x08022be8
 80150c8:	08022bff 	.word	0x08022bff
 80150cc:	abcd330e 	.word	0xabcd330e
 80150d0:	e66d1234 	.word	0xe66d1234
 80150d4:	0005deec 	.word	0x0005deec
 80150d8:	5851f42d 	.word	0x5851f42d
 80150dc:	4c957f2d 	.word	0x4c957f2d

080150e0 <std>:
 80150e0:	2300      	movs	r3, #0
 80150e2:	b510      	push	{r4, lr}
 80150e4:	4604      	mov	r4, r0
 80150e6:	e9c0 3300 	strd	r3, r3, [r0]
 80150ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150ee:	6083      	str	r3, [r0, #8]
 80150f0:	8181      	strh	r1, [r0, #12]
 80150f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80150f4:	81c2      	strh	r2, [r0, #14]
 80150f6:	6183      	str	r3, [r0, #24]
 80150f8:	4619      	mov	r1, r3
 80150fa:	2208      	movs	r2, #8
 80150fc:	305c      	adds	r0, #92	@ 0x5c
 80150fe:	f000 f916 	bl	801532e <memset>
 8015102:	4b0d      	ldr	r3, [pc, #52]	@ (8015138 <std+0x58>)
 8015104:	6263      	str	r3, [r4, #36]	@ 0x24
 8015106:	4b0d      	ldr	r3, [pc, #52]	@ (801513c <std+0x5c>)
 8015108:	62a3      	str	r3, [r4, #40]	@ 0x28
 801510a:	4b0d      	ldr	r3, [pc, #52]	@ (8015140 <std+0x60>)
 801510c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801510e:	4b0d      	ldr	r3, [pc, #52]	@ (8015144 <std+0x64>)
 8015110:	6323      	str	r3, [r4, #48]	@ 0x30
 8015112:	4b0d      	ldr	r3, [pc, #52]	@ (8015148 <std+0x68>)
 8015114:	6224      	str	r4, [r4, #32]
 8015116:	429c      	cmp	r4, r3
 8015118:	d006      	beq.n	8015128 <std+0x48>
 801511a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801511e:	4294      	cmp	r4, r2
 8015120:	d002      	beq.n	8015128 <std+0x48>
 8015122:	33d0      	adds	r3, #208	@ 0xd0
 8015124:	429c      	cmp	r4, r3
 8015126:	d105      	bne.n	8015134 <std+0x54>
 8015128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801512c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015130:	f000 b9d8 	b.w	80154e4 <__retarget_lock_init_recursive>
 8015134:	bd10      	pop	{r4, pc}
 8015136:	bf00      	nop
 8015138:	08015289 	.word	0x08015289
 801513c:	080152ab 	.word	0x080152ab
 8015140:	080152e3 	.word	0x080152e3
 8015144:	08015307 	.word	0x08015307
 8015148:	2000bfc8 	.word	0x2000bfc8

0801514c <stdio_exit_handler>:
 801514c:	4a02      	ldr	r2, [pc, #8]	@ (8015158 <stdio_exit_handler+0xc>)
 801514e:	4903      	ldr	r1, [pc, #12]	@ (801515c <stdio_exit_handler+0x10>)
 8015150:	4803      	ldr	r0, [pc, #12]	@ (8015160 <stdio_exit_handler+0x14>)
 8015152:	f000 b869 	b.w	8015228 <_fwalk_sglue>
 8015156:	bf00      	nop
 8015158:	20000030 	.word	0x20000030
 801515c:	08015ded 	.word	0x08015ded
 8015160:	20000040 	.word	0x20000040

08015164 <cleanup_stdio>:
 8015164:	6841      	ldr	r1, [r0, #4]
 8015166:	4b0c      	ldr	r3, [pc, #48]	@ (8015198 <cleanup_stdio+0x34>)
 8015168:	4299      	cmp	r1, r3
 801516a:	b510      	push	{r4, lr}
 801516c:	4604      	mov	r4, r0
 801516e:	d001      	beq.n	8015174 <cleanup_stdio+0x10>
 8015170:	f000 fe3c 	bl	8015dec <_fflush_r>
 8015174:	68a1      	ldr	r1, [r4, #8]
 8015176:	4b09      	ldr	r3, [pc, #36]	@ (801519c <cleanup_stdio+0x38>)
 8015178:	4299      	cmp	r1, r3
 801517a:	d002      	beq.n	8015182 <cleanup_stdio+0x1e>
 801517c:	4620      	mov	r0, r4
 801517e:	f000 fe35 	bl	8015dec <_fflush_r>
 8015182:	68e1      	ldr	r1, [r4, #12]
 8015184:	4b06      	ldr	r3, [pc, #24]	@ (80151a0 <cleanup_stdio+0x3c>)
 8015186:	4299      	cmp	r1, r3
 8015188:	d004      	beq.n	8015194 <cleanup_stdio+0x30>
 801518a:	4620      	mov	r0, r4
 801518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015190:	f000 be2c 	b.w	8015dec <_fflush_r>
 8015194:	bd10      	pop	{r4, pc}
 8015196:	bf00      	nop
 8015198:	2000bfc8 	.word	0x2000bfc8
 801519c:	2000c030 	.word	0x2000c030
 80151a0:	2000c098 	.word	0x2000c098

080151a4 <global_stdio_init.part.0>:
 80151a4:	b510      	push	{r4, lr}
 80151a6:	4b0b      	ldr	r3, [pc, #44]	@ (80151d4 <global_stdio_init.part.0+0x30>)
 80151a8:	4c0b      	ldr	r4, [pc, #44]	@ (80151d8 <global_stdio_init.part.0+0x34>)
 80151aa:	4a0c      	ldr	r2, [pc, #48]	@ (80151dc <global_stdio_init.part.0+0x38>)
 80151ac:	601a      	str	r2, [r3, #0]
 80151ae:	4620      	mov	r0, r4
 80151b0:	2200      	movs	r2, #0
 80151b2:	2104      	movs	r1, #4
 80151b4:	f7ff ff94 	bl	80150e0 <std>
 80151b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80151bc:	2201      	movs	r2, #1
 80151be:	2109      	movs	r1, #9
 80151c0:	f7ff ff8e 	bl	80150e0 <std>
 80151c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80151c8:	2202      	movs	r2, #2
 80151ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151ce:	2112      	movs	r1, #18
 80151d0:	f7ff bf86 	b.w	80150e0 <std>
 80151d4:	2000c100 	.word	0x2000c100
 80151d8:	2000bfc8 	.word	0x2000bfc8
 80151dc:	0801514d 	.word	0x0801514d

080151e0 <__sfp_lock_acquire>:
 80151e0:	4801      	ldr	r0, [pc, #4]	@ (80151e8 <__sfp_lock_acquire+0x8>)
 80151e2:	f000 b980 	b.w	80154e6 <__retarget_lock_acquire_recursive>
 80151e6:	bf00      	nop
 80151e8:	2000c109 	.word	0x2000c109

080151ec <__sfp_lock_release>:
 80151ec:	4801      	ldr	r0, [pc, #4]	@ (80151f4 <__sfp_lock_release+0x8>)
 80151ee:	f000 b97b 	b.w	80154e8 <__retarget_lock_release_recursive>
 80151f2:	bf00      	nop
 80151f4:	2000c109 	.word	0x2000c109

080151f8 <__sinit>:
 80151f8:	b510      	push	{r4, lr}
 80151fa:	4604      	mov	r4, r0
 80151fc:	f7ff fff0 	bl	80151e0 <__sfp_lock_acquire>
 8015200:	6a23      	ldr	r3, [r4, #32]
 8015202:	b11b      	cbz	r3, 801520c <__sinit+0x14>
 8015204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015208:	f7ff bff0 	b.w	80151ec <__sfp_lock_release>
 801520c:	4b04      	ldr	r3, [pc, #16]	@ (8015220 <__sinit+0x28>)
 801520e:	6223      	str	r3, [r4, #32]
 8015210:	4b04      	ldr	r3, [pc, #16]	@ (8015224 <__sinit+0x2c>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d1f5      	bne.n	8015204 <__sinit+0xc>
 8015218:	f7ff ffc4 	bl	80151a4 <global_stdio_init.part.0>
 801521c:	e7f2      	b.n	8015204 <__sinit+0xc>
 801521e:	bf00      	nop
 8015220:	08015165 	.word	0x08015165
 8015224:	2000c100 	.word	0x2000c100

08015228 <_fwalk_sglue>:
 8015228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801522c:	4607      	mov	r7, r0
 801522e:	4688      	mov	r8, r1
 8015230:	4614      	mov	r4, r2
 8015232:	2600      	movs	r6, #0
 8015234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015238:	f1b9 0901 	subs.w	r9, r9, #1
 801523c:	d505      	bpl.n	801524a <_fwalk_sglue+0x22>
 801523e:	6824      	ldr	r4, [r4, #0]
 8015240:	2c00      	cmp	r4, #0
 8015242:	d1f7      	bne.n	8015234 <_fwalk_sglue+0xc>
 8015244:	4630      	mov	r0, r6
 8015246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801524a:	89ab      	ldrh	r3, [r5, #12]
 801524c:	2b01      	cmp	r3, #1
 801524e:	d907      	bls.n	8015260 <_fwalk_sglue+0x38>
 8015250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015254:	3301      	adds	r3, #1
 8015256:	d003      	beq.n	8015260 <_fwalk_sglue+0x38>
 8015258:	4629      	mov	r1, r5
 801525a:	4638      	mov	r0, r7
 801525c:	47c0      	blx	r8
 801525e:	4306      	orrs	r6, r0
 8015260:	3568      	adds	r5, #104	@ 0x68
 8015262:	e7e9      	b.n	8015238 <_fwalk_sglue+0x10>

08015264 <iprintf>:
 8015264:	b40f      	push	{r0, r1, r2, r3}
 8015266:	b507      	push	{r0, r1, r2, lr}
 8015268:	4906      	ldr	r1, [pc, #24]	@ (8015284 <iprintf+0x20>)
 801526a:	ab04      	add	r3, sp, #16
 801526c:	6808      	ldr	r0, [r1, #0]
 801526e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015272:	6881      	ldr	r1, [r0, #8]
 8015274:	9301      	str	r3, [sp, #4]
 8015276:	f000 fa8f 	bl	8015798 <_vfiprintf_r>
 801527a:	b003      	add	sp, #12
 801527c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015280:	b004      	add	sp, #16
 8015282:	4770      	bx	lr
 8015284:	2000003c 	.word	0x2000003c

08015288 <__sread>:
 8015288:	b510      	push	{r4, lr}
 801528a:	460c      	mov	r4, r1
 801528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015290:	f000 f8e0 	bl	8015454 <_read_r>
 8015294:	2800      	cmp	r0, #0
 8015296:	bfab      	itete	ge
 8015298:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801529a:	89a3      	ldrhlt	r3, [r4, #12]
 801529c:	181b      	addge	r3, r3, r0
 801529e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80152a2:	bfac      	ite	ge
 80152a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80152a6:	81a3      	strhlt	r3, [r4, #12]
 80152a8:	bd10      	pop	{r4, pc}

080152aa <__swrite>:
 80152aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152ae:	461f      	mov	r7, r3
 80152b0:	898b      	ldrh	r3, [r1, #12]
 80152b2:	05db      	lsls	r3, r3, #23
 80152b4:	4605      	mov	r5, r0
 80152b6:	460c      	mov	r4, r1
 80152b8:	4616      	mov	r6, r2
 80152ba:	d505      	bpl.n	80152c8 <__swrite+0x1e>
 80152bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152c0:	2302      	movs	r3, #2
 80152c2:	2200      	movs	r2, #0
 80152c4:	f000 f8b4 	bl	8015430 <_lseek_r>
 80152c8:	89a3      	ldrh	r3, [r4, #12]
 80152ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80152d2:	81a3      	strh	r3, [r4, #12]
 80152d4:	4632      	mov	r2, r6
 80152d6:	463b      	mov	r3, r7
 80152d8:	4628      	mov	r0, r5
 80152da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152de:	f000 b8cb 	b.w	8015478 <_write_r>

080152e2 <__sseek>:
 80152e2:	b510      	push	{r4, lr}
 80152e4:	460c      	mov	r4, r1
 80152e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152ea:	f000 f8a1 	bl	8015430 <_lseek_r>
 80152ee:	1c43      	adds	r3, r0, #1
 80152f0:	89a3      	ldrh	r3, [r4, #12]
 80152f2:	bf15      	itete	ne
 80152f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80152f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80152fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80152fe:	81a3      	strheq	r3, [r4, #12]
 8015300:	bf18      	it	ne
 8015302:	81a3      	strhne	r3, [r4, #12]
 8015304:	bd10      	pop	{r4, pc}

08015306 <__sclose>:
 8015306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801530a:	f000 b82b 	b.w	8015364 <_close_r>

0801530e <memcmp>:
 801530e:	b510      	push	{r4, lr}
 8015310:	3901      	subs	r1, #1
 8015312:	4402      	add	r2, r0
 8015314:	4290      	cmp	r0, r2
 8015316:	d101      	bne.n	801531c <memcmp+0xe>
 8015318:	2000      	movs	r0, #0
 801531a:	e005      	b.n	8015328 <memcmp+0x1a>
 801531c:	7803      	ldrb	r3, [r0, #0]
 801531e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015322:	42a3      	cmp	r3, r4
 8015324:	d001      	beq.n	801532a <memcmp+0x1c>
 8015326:	1b18      	subs	r0, r3, r4
 8015328:	bd10      	pop	{r4, pc}
 801532a:	3001      	adds	r0, #1
 801532c:	e7f2      	b.n	8015314 <memcmp+0x6>

0801532e <memset>:
 801532e:	4402      	add	r2, r0
 8015330:	4603      	mov	r3, r0
 8015332:	4293      	cmp	r3, r2
 8015334:	d100      	bne.n	8015338 <memset+0xa>
 8015336:	4770      	bx	lr
 8015338:	f803 1b01 	strb.w	r1, [r3], #1
 801533c:	e7f9      	b.n	8015332 <memset+0x4>

0801533e <strncmp>:
 801533e:	b510      	push	{r4, lr}
 8015340:	b16a      	cbz	r2, 801535e <strncmp+0x20>
 8015342:	3901      	subs	r1, #1
 8015344:	1884      	adds	r4, r0, r2
 8015346:	f810 2b01 	ldrb.w	r2, [r0], #1
 801534a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801534e:	429a      	cmp	r2, r3
 8015350:	d103      	bne.n	801535a <strncmp+0x1c>
 8015352:	42a0      	cmp	r0, r4
 8015354:	d001      	beq.n	801535a <strncmp+0x1c>
 8015356:	2a00      	cmp	r2, #0
 8015358:	d1f5      	bne.n	8015346 <strncmp+0x8>
 801535a:	1ad0      	subs	r0, r2, r3
 801535c:	bd10      	pop	{r4, pc}
 801535e:	4610      	mov	r0, r2
 8015360:	e7fc      	b.n	801535c <strncmp+0x1e>
	...

08015364 <_close_r>:
 8015364:	b538      	push	{r3, r4, r5, lr}
 8015366:	4d06      	ldr	r5, [pc, #24]	@ (8015380 <_close_r+0x1c>)
 8015368:	2300      	movs	r3, #0
 801536a:	4604      	mov	r4, r0
 801536c:	4608      	mov	r0, r1
 801536e:	602b      	str	r3, [r5, #0]
 8015370:	f7eb fc82 	bl	8000c78 <_close>
 8015374:	1c43      	adds	r3, r0, #1
 8015376:	d102      	bne.n	801537e <_close_r+0x1a>
 8015378:	682b      	ldr	r3, [r5, #0]
 801537a:	b103      	cbz	r3, 801537e <_close_r+0x1a>
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	2000c104 	.word	0x2000c104

08015384 <_reclaim_reent>:
 8015384:	4b29      	ldr	r3, [pc, #164]	@ (801542c <_reclaim_reent+0xa8>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	4283      	cmp	r3, r0
 801538a:	b570      	push	{r4, r5, r6, lr}
 801538c:	4604      	mov	r4, r0
 801538e:	d04b      	beq.n	8015428 <_reclaim_reent+0xa4>
 8015390:	69c3      	ldr	r3, [r0, #28]
 8015392:	b1ab      	cbz	r3, 80153c0 <_reclaim_reent+0x3c>
 8015394:	68db      	ldr	r3, [r3, #12]
 8015396:	b16b      	cbz	r3, 80153b4 <_reclaim_reent+0x30>
 8015398:	2500      	movs	r5, #0
 801539a:	69e3      	ldr	r3, [r4, #28]
 801539c:	68db      	ldr	r3, [r3, #12]
 801539e:	5959      	ldr	r1, [r3, r5]
 80153a0:	2900      	cmp	r1, #0
 80153a2:	d13b      	bne.n	801541c <_reclaim_reent+0x98>
 80153a4:	3504      	adds	r5, #4
 80153a6:	2d80      	cmp	r5, #128	@ 0x80
 80153a8:	d1f7      	bne.n	801539a <_reclaim_reent+0x16>
 80153aa:	69e3      	ldr	r3, [r4, #28]
 80153ac:	4620      	mov	r0, r4
 80153ae:	68d9      	ldr	r1, [r3, #12]
 80153b0:	f000 f8c8 	bl	8015544 <_free_r>
 80153b4:	69e3      	ldr	r3, [r4, #28]
 80153b6:	6819      	ldr	r1, [r3, #0]
 80153b8:	b111      	cbz	r1, 80153c0 <_reclaim_reent+0x3c>
 80153ba:	4620      	mov	r0, r4
 80153bc:	f000 f8c2 	bl	8015544 <_free_r>
 80153c0:	6961      	ldr	r1, [r4, #20]
 80153c2:	b111      	cbz	r1, 80153ca <_reclaim_reent+0x46>
 80153c4:	4620      	mov	r0, r4
 80153c6:	f000 f8bd 	bl	8015544 <_free_r>
 80153ca:	69e1      	ldr	r1, [r4, #28]
 80153cc:	b111      	cbz	r1, 80153d4 <_reclaim_reent+0x50>
 80153ce:	4620      	mov	r0, r4
 80153d0:	f000 f8b8 	bl	8015544 <_free_r>
 80153d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80153d6:	b111      	cbz	r1, 80153de <_reclaim_reent+0x5a>
 80153d8:	4620      	mov	r0, r4
 80153da:	f000 f8b3 	bl	8015544 <_free_r>
 80153de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80153e0:	b111      	cbz	r1, 80153e8 <_reclaim_reent+0x64>
 80153e2:	4620      	mov	r0, r4
 80153e4:	f000 f8ae 	bl	8015544 <_free_r>
 80153e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80153ea:	b111      	cbz	r1, 80153f2 <_reclaim_reent+0x6e>
 80153ec:	4620      	mov	r0, r4
 80153ee:	f000 f8a9 	bl	8015544 <_free_r>
 80153f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80153f4:	b111      	cbz	r1, 80153fc <_reclaim_reent+0x78>
 80153f6:	4620      	mov	r0, r4
 80153f8:	f000 f8a4 	bl	8015544 <_free_r>
 80153fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80153fe:	b111      	cbz	r1, 8015406 <_reclaim_reent+0x82>
 8015400:	4620      	mov	r0, r4
 8015402:	f000 f89f 	bl	8015544 <_free_r>
 8015406:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015408:	b111      	cbz	r1, 8015410 <_reclaim_reent+0x8c>
 801540a:	4620      	mov	r0, r4
 801540c:	f000 f89a 	bl	8015544 <_free_r>
 8015410:	6a23      	ldr	r3, [r4, #32]
 8015412:	b14b      	cbz	r3, 8015428 <_reclaim_reent+0xa4>
 8015414:	4620      	mov	r0, r4
 8015416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801541a:	4718      	bx	r3
 801541c:	680e      	ldr	r6, [r1, #0]
 801541e:	4620      	mov	r0, r4
 8015420:	f000 f890 	bl	8015544 <_free_r>
 8015424:	4631      	mov	r1, r6
 8015426:	e7bb      	b.n	80153a0 <_reclaim_reent+0x1c>
 8015428:	bd70      	pop	{r4, r5, r6, pc}
 801542a:	bf00      	nop
 801542c:	2000003c 	.word	0x2000003c

08015430 <_lseek_r>:
 8015430:	b538      	push	{r3, r4, r5, lr}
 8015432:	4d07      	ldr	r5, [pc, #28]	@ (8015450 <_lseek_r+0x20>)
 8015434:	4604      	mov	r4, r0
 8015436:	4608      	mov	r0, r1
 8015438:	4611      	mov	r1, r2
 801543a:	2200      	movs	r2, #0
 801543c:	602a      	str	r2, [r5, #0]
 801543e:	461a      	mov	r2, r3
 8015440:	f7eb fc41 	bl	8000cc6 <_lseek>
 8015444:	1c43      	adds	r3, r0, #1
 8015446:	d102      	bne.n	801544e <_lseek_r+0x1e>
 8015448:	682b      	ldr	r3, [r5, #0]
 801544a:	b103      	cbz	r3, 801544e <_lseek_r+0x1e>
 801544c:	6023      	str	r3, [r4, #0]
 801544e:	bd38      	pop	{r3, r4, r5, pc}
 8015450:	2000c104 	.word	0x2000c104

08015454 <_read_r>:
 8015454:	b538      	push	{r3, r4, r5, lr}
 8015456:	4d07      	ldr	r5, [pc, #28]	@ (8015474 <_read_r+0x20>)
 8015458:	4604      	mov	r4, r0
 801545a:	4608      	mov	r0, r1
 801545c:	4611      	mov	r1, r2
 801545e:	2200      	movs	r2, #0
 8015460:	602a      	str	r2, [r5, #0]
 8015462:	461a      	mov	r2, r3
 8015464:	f7eb fbcf 	bl	8000c06 <_read>
 8015468:	1c43      	adds	r3, r0, #1
 801546a:	d102      	bne.n	8015472 <_read_r+0x1e>
 801546c:	682b      	ldr	r3, [r5, #0]
 801546e:	b103      	cbz	r3, 8015472 <_read_r+0x1e>
 8015470:	6023      	str	r3, [r4, #0]
 8015472:	bd38      	pop	{r3, r4, r5, pc}
 8015474:	2000c104 	.word	0x2000c104

08015478 <_write_r>:
 8015478:	b538      	push	{r3, r4, r5, lr}
 801547a:	4d07      	ldr	r5, [pc, #28]	@ (8015498 <_write_r+0x20>)
 801547c:	4604      	mov	r4, r0
 801547e:	4608      	mov	r0, r1
 8015480:	4611      	mov	r1, r2
 8015482:	2200      	movs	r2, #0
 8015484:	602a      	str	r2, [r5, #0]
 8015486:	461a      	mov	r2, r3
 8015488:	f7eb fbda 	bl	8000c40 <_write>
 801548c:	1c43      	adds	r3, r0, #1
 801548e:	d102      	bne.n	8015496 <_write_r+0x1e>
 8015490:	682b      	ldr	r3, [r5, #0]
 8015492:	b103      	cbz	r3, 8015496 <_write_r+0x1e>
 8015494:	6023      	str	r3, [r4, #0]
 8015496:	bd38      	pop	{r3, r4, r5, pc}
 8015498:	2000c104 	.word	0x2000c104

0801549c <__libc_init_array>:
 801549c:	b570      	push	{r4, r5, r6, lr}
 801549e:	4d0d      	ldr	r5, [pc, #52]	@ (80154d4 <__libc_init_array+0x38>)
 80154a0:	4c0d      	ldr	r4, [pc, #52]	@ (80154d8 <__libc_init_array+0x3c>)
 80154a2:	1b64      	subs	r4, r4, r5
 80154a4:	10a4      	asrs	r4, r4, #2
 80154a6:	2600      	movs	r6, #0
 80154a8:	42a6      	cmp	r6, r4
 80154aa:	d109      	bne.n	80154c0 <__libc_init_array+0x24>
 80154ac:	4d0b      	ldr	r5, [pc, #44]	@ (80154dc <__libc_init_array+0x40>)
 80154ae:	4c0c      	ldr	r4, [pc, #48]	@ (80154e0 <__libc_init_array+0x44>)
 80154b0:	f000 fe4a 	bl	8016148 <_init>
 80154b4:	1b64      	subs	r4, r4, r5
 80154b6:	10a4      	asrs	r4, r4, #2
 80154b8:	2600      	movs	r6, #0
 80154ba:	42a6      	cmp	r6, r4
 80154bc:	d105      	bne.n	80154ca <__libc_init_array+0x2e>
 80154be:	bd70      	pop	{r4, r5, r6, pc}
 80154c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80154c4:	4798      	blx	r3
 80154c6:	3601      	adds	r6, #1
 80154c8:	e7ee      	b.n	80154a8 <__libc_init_array+0xc>
 80154ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80154ce:	4798      	blx	r3
 80154d0:	3601      	adds	r6, #1
 80154d2:	e7f2      	b.n	80154ba <__libc_init_array+0x1e>
 80154d4:	08022cd0 	.word	0x08022cd0
 80154d8:	08022cd0 	.word	0x08022cd0
 80154dc:	08022cd0 	.word	0x08022cd0
 80154e0:	08022cd4 	.word	0x08022cd4

080154e4 <__retarget_lock_init_recursive>:
 80154e4:	4770      	bx	lr

080154e6 <__retarget_lock_acquire_recursive>:
 80154e6:	4770      	bx	lr

080154e8 <__retarget_lock_release_recursive>:
 80154e8:	4770      	bx	lr

080154ea <memcpy>:
 80154ea:	440a      	add	r2, r1
 80154ec:	4291      	cmp	r1, r2
 80154ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80154f2:	d100      	bne.n	80154f6 <memcpy+0xc>
 80154f4:	4770      	bx	lr
 80154f6:	b510      	push	{r4, lr}
 80154f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80154fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015500:	4291      	cmp	r1, r2
 8015502:	d1f9      	bne.n	80154f8 <memcpy+0xe>
 8015504:	bd10      	pop	{r4, pc}
	...

08015508 <__assert_func>:
 8015508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801550a:	4614      	mov	r4, r2
 801550c:	461a      	mov	r2, r3
 801550e:	4b09      	ldr	r3, [pc, #36]	@ (8015534 <__assert_func+0x2c>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	4605      	mov	r5, r0
 8015514:	68d8      	ldr	r0, [r3, #12]
 8015516:	b954      	cbnz	r4, 801552e <__assert_func+0x26>
 8015518:	4b07      	ldr	r3, [pc, #28]	@ (8015538 <__assert_func+0x30>)
 801551a:	461c      	mov	r4, r3
 801551c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015520:	9100      	str	r1, [sp, #0]
 8015522:	462b      	mov	r3, r5
 8015524:	4905      	ldr	r1, [pc, #20]	@ (801553c <__assert_func+0x34>)
 8015526:	f000 fc89 	bl	8015e3c <fiprintf>
 801552a:	f000 fd3d 	bl	8015fa8 <abort>
 801552e:	4b04      	ldr	r3, [pc, #16]	@ (8015540 <__assert_func+0x38>)
 8015530:	e7f4      	b.n	801551c <__assert_func+0x14>
 8015532:	bf00      	nop
 8015534:	2000003c 	.word	0x2000003c
 8015538:	08022c92 	.word	0x08022c92
 801553c:	08022c64 	.word	0x08022c64
 8015540:	08022c57 	.word	0x08022c57

08015544 <_free_r>:
 8015544:	b538      	push	{r3, r4, r5, lr}
 8015546:	4605      	mov	r5, r0
 8015548:	2900      	cmp	r1, #0
 801554a:	d041      	beq.n	80155d0 <_free_r+0x8c>
 801554c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015550:	1f0c      	subs	r4, r1, #4
 8015552:	2b00      	cmp	r3, #0
 8015554:	bfb8      	it	lt
 8015556:	18e4      	addlt	r4, r4, r3
 8015558:	f000 f8e8 	bl	801572c <__malloc_lock>
 801555c:	4a1d      	ldr	r2, [pc, #116]	@ (80155d4 <_free_r+0x90>)
 801555e:	6813      	ldr	r3, [r2, #0]
 8015560:	b933      	cbnz	r3, 8015570 <_free_r+0x2c>
 8015562:	6063      	str	r3, [r4, #4]
 8015564:	6014      	str	r4, [r2, #0]
 8015566:	4628      	mov	r0, r5
 8015568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801556c:	f000 b8e4 	b.w	8015738 <__malloc_unlock>
 8015570:	42a3      	cmp	r3, r4
 8015572:	d908      	bls.n	8015586 <_free_r+0x42>
 8015574:	6820      	ldr	r0, [r4, #0]
 8015576:	1821      	adds	r1, r4, r0
 8015578:	428b      	cmp	r3, r1
 801557a:	bf01      	itttt	eq
 801557c:	6819      	ldreq	r1, [r3, #0]
 801557e:	685b      	ldreq	r3, [r3, #4]
 8015580:	1809      	addeq	r1, r1, r0
 8015582:	6021      	streq	r1, [r4, #0]
 8015584:	e7ed      	b.n	8015562 <_free_r+0x1e>
 8015586:	461a      	mov	r2, r3
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	b10b      	cbz	r3, 8015590 <_free_r+0x4c>
 801558c:	42a3      	cmp	r3, r4
 801558e:	d9fa      	bls.n	8015586 <_free_r+0x42>
 8015590:	6811      	ldr	r1, [r2, #0]
 8015592:	1850      	adds	r0, r2, r1
 8015594:	42a0      	cmp	r0, r4
 8015596:	d10b      	bne.n	80155b0 <_free_r+0x6c>
 8015598:	6820      	ldr	r0, [r4, #0]
 801559a:	4401      	add	r1, r0
 801559c:	1850      	adds	r0, r2, r1
 801559e:	4283      	cmp	r3, r0
 80155a0:	6011      	str	r1, [r2, #0]
 80155a2:	d1e0      	bne.n	8015566 <_free_r+0x22>
 80155a4:	6818      	ldr	r0, [r3, #0]
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	6053      	str	r3, [r2, #4]
 80155aa:	4408      	add	r0, r1
 80155ac:	6010      	str	r0, [r2, #0]
 80155ae:	e7da      	b.n	8015566 <_free_r+0x22>
 80155b0:	d902      	bls.n	80155b8 <_free_r+0x74>
 80155b2:	230c      	movs	r3, #12
 80155b4:	602b      	str	r3, [r5, #0]
 80155b6:	e7d6      	b.n	8015566 <_free_r+0x22>
 80155b8:	6820      	ldr	r0, [r4, #0]
 80155ba:	1821      	adds	r1, r4, r0
 80155bc:	428b      	cmp	r3, r1
 80155be:	bf04      	itt	eq
 80155c0:	6819      	ldreq	r1, [r3, #0]
 80155c2:	685b      	ldreq	r3, [r3, #4]
 80155c4:	6063      	str	r3, [r4, #4]
 80155c6:	bf04      	itt	eq
 80155c8:	1809      	addeq	r1, r1, r0
 80155ca:	6021      	streq	r1, [r4, #0]
 80155cc:	6054      	str	r4, [r2, #4]
 80155ce:	e7ca      	b.n	8015566 <_free_r+0x22>
 80155d0:	bd38      	pop	{r3, r4, r5, pc}
 80155d2:	bf00      	nop
 80155d4:	2000c110 	.word	0x2000c110

080155d8 <malloc>:
 80155d8:	4b02      	ldr	r3, [pc, #8]	@ (80155e4 <malloc+0xc>)
 80155da:	4601      	mov	r1, r0
 80155dc:	6818      	ldr	r0, [r3, #0]
 80155de:	f000 b825 	b.w	801562c <_malloc_r>
 80155e2:	bf00      	nop
 80155e4:	2000003c 	.word	0x2000003c

080155e8 <sbrk_aligned>:
 80155e8:	b570      	push	{r4, r5, r6, lr}
 80155ea:	4e0f      	ldr	r6, [pc, #60]	@ (8015628 <sbrk_aligned+0x40>)
 80155ec:	460c      	mov	r4, r1
 80155ee:	6831      	ldr	r1, [r6, #0]
 80155f0:	4605      	mov	r5, r0
 80155f2:	b911      	cbnz	r1, 80155fa <sbrk_aligned+0x12>
 80155f4:	f000 fcc8 	bl	8015f88 <_sbrk_r>
 80155f8:	6030      	str	r0, [r6, #0]
 80155fa:	4621      	mov	r1, r4
 80155fc:	4628      	mov	r0, r5
 80155fe:	f000 fcc3 	bl	8015f88 <_sbrk_r>
 8015602:	1c43      	adds	r3, r0, #1
 8015604:	d103      	bne.n	801560e <sbrk_aligned+0x26>
 8015606:	f04f 34ff 	mov.w	r4, #4294967295
 801560a:	4620      	mov	r0, r4
 801560c:	bd70      	pop	{r4, r5, r6, pc}
 801560e:	1cc4      	adds	r4, r0, #3
 8015610:	f024 0403 	bic.w	r4, r4, #3
 8015614:	42a0      	cmp	r0, r4
 8015616:	d0f8      	beq.n	801560a <sbrk_aligned+0x22>
 8015618:	1a21      	subs	r1, r4, r0
 801561a:	4628      	mov	r0, r5
 801561c:	f000 fcb4 	bl	8015f88 <_sbrk_r>
 8015620:	3001      	adds	r0, #1
 8015622:	d1f2      	bne.n	801560a <sbrk_aligned+0x22>
 8015624:	e7ef      	b.n	8015606 <sbrk_aligned+0x1e>
 8015626:	bf00      	nop
 8015628:	2000c10c 	.word	0x2000c10c

0801562c <_malloc_r>:
 801562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015630:	1ccd      	adds	r5, r1, #3
 8015632:	f025 0503 	bic.w	r5, r5, #3
 8015636:	3508      	adds	r5, #8
 8015638:	2d0c      	cmp	r5, #12
 801563a:	bf38      	it	cc
 801563c:	250c      	movcc	r5, #12
 801563e:	2d00      	cmp	r5, #0
 8015640:	4606      	mov	r6, r0
 8015642:	db01      	blt.n	8015648 <_malloc_r+0x1c>
 8015644:	42a9      	cmp	r1, r5
 8015646:	d904      	bls.n	8015652 <_malloc_r+0x26>
 8015648:	230c      	movs	r3, #12
 801564a:	6033      	str	r3, [r6, #0]
 801564c:	2000      	movs	r0, #0
 801564e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015652:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015728 <_malloc_r+0xfc>
 8015656:	f000 f869 	bl	801572c <__malloc_lock>
 801565a:	f8d8 3000 	ldr.w	r3, [r8]
 801565e:	461c      	mov	r4, r3
 8015660:	bb44      	cbnz	r4, 80156b4 <_malloc_r+0x88>
 8015662:	4629      	mov	r1, r5
 8015664:	4630      	mov	r0, r6
 8015666:	f7ff ffbf 	bl	80155e8 <sbrk_aligned>
 801566a:	1c43      	adds	r3, r0, #1
 801566c:	4604      	mov	r4, r0
 801566e:	d158      	bne.n	8015722 <_malloc_r+0xf6>
 8015670:	f8d8 4000 	ldr.w	r4, [r8]
 8015674:	4627      	mov	r7, r4
 8015676:	2f00      	cmp	r7, #0
 8015678:	d143      	bne.n	8015702 <_malloc_r+0xd6>
 801567a:	2c00      	cmp	r4, #0
 801567c:	d04b      	beq.n	8015716 <_malloc_r+0xea>
 801567e:	6823      	ldr	r3, [r4, #0]
 8015680:	4639      	mov	r1, r7
 8015682:	4630      	mov	r0, r6
 8015684:	eb04 0903 	add.w	r9, r4, r3
 8015688:	f000 fc7e 	bl	8015f88 <_sbrk_r>
 801568c:	4581      	cmp	r9, r0
 801568e:	d142      	bne.n	8015716 <_malloc_r+0xea>
 8015690:	6821      	ldr	r1, [r4, #0]
 8015692:	1a6d      	subs	r5, r5, r1
 8015694:	4629      	mov	r1, r5
 8015696:	4630      	mov	r0, r6
 8015698:	f7ff ffa6 	bl	80155e8 <sbrk_aligned>
 801569c:	3001      	adds	r0, #1
 801569e:	d03a      	beq.n	8015716 <_malloc_r+0xea>
 80156a0:	6823      	ldr	r3, [r4, #0]
 80156a2:	442b      	add	r3, r5
 80156a4:	6023      	str	r3, [r4, #0]
 80156a6:	f8d8 3000 	ldr.w	r3, [r8]
 80156aa:	685a      	ldr	r2, [r3, #4]
 80156ac:	bb62      	cbnz	r2, 8015708 <_malloc_r+0xdc>
 80156ae:	f8c8 7000 	str.w	r7, [r8]
 80156b2:	e00f      	b.n	80156d4 <_malloc_r+0xa8>
 80156b4:	6822      	ldr	r2, [r4, #0]
 80156b6:	1b52      	subs	r2, r2, r5
 80156b8:	d420      	bmi.n	80156fc <_malloc_r+0xd0>
 80156ba:	2a0b      	cmp	r2, #11
 80156bc:	d917      	bls.n	80156ee <_malloc_r+0xc2>
 80156be:	1961      	adds	r1, r4, r5
 80156c0:	42a3      	cmp	r3, r4
 80156c2:	6025      	str	r5, [r4, #0]
 80156c4:	bf18      	it	ne
 80156c6:	6059      	strne	r1, [r3, #4]
 80156c8:	6863      	ldr	r3, [r4, #4]
 80156ca:	bf08      	it	eq
 80156cc:	f8c8 1000 	streq.w	r1, [r8]
 80156d0:	5162      	str	r2, [r4, r5]
 80156d2:	604b      	str	r3, [r1, #4]
 80156d4:	4630      	mov	r0, r6
 80156d6:	f000 f82f 	bl	8015738 <__malloc_unlock>
 80156da:	f104 000b 	add.w	r0, r4, #11
 80156de:	1d23      	adds	r3, r4, #4
 80156e0:	f020 0007 	bic.w	r0, r0, #7
 80156e4:	1ac2      	subs	r2, r0, r3
 80156e6:	bf1c      	itt	ne
 80156e8:	1a1b      	subne	r3, r3, r0
 80156ea:	50a3      	strne	r3, [r4, r2]
 80156ec:	e7af      	b.n	801564e <_malloc_r+0x22>
 80156ee:	6862      	ldr	r2, [r4, #4]
 80156f0:	42a3      	cmp	r3, r4
 80156f2:	bf0c      	ite	eq
 80156f4:	f8c8 2000 	streq.w	r2, [r8]
 80156f8:	605a      	strne	r2, [r3, #4]
 80156fa:	e7eb      	b.n	80156d4 <_malloc_r+0xa8>
 80156fc:	4623      	mov	r3, r4
 80156fe:	6864      	ldr	r4, [r4, #4]
 8015700:	e7ae      	b.n	8015660 <_malloc_r+0x34>
 8015702:	463c      	mov	r4, r7
 8015704:	687f      	ldr	r7, [r7, #4]
 8015706:	e7b6      	b.n	8015676 <_malloc_r+0x4a>
 8015708:	461a      	mov	r2, r3
 801570a:	685b      	ldr	r3, [r3, #4]
 801570c:	42a3      	cmp	r3, r4
 801570e:	d1fb      	bne.n	8015708 <_malloc_r+0xdc>
 8015710:	2300      	movs	r3, #0
 8015712:	6053      	str	r3, [r2, #4]
 8015714:	e7de      	b.n	80156d4 <_malloc_r+0xa8>
 8015716:	230c      	movs	r3, #12
 8015718:	6033      	str	r3, [r6, #0]
 801571a:	4630      	mov	r0, r6
 801571c:	f000 f80c 	bl	8015738 <__malloc_unlock>
 8015720:	e794      	b.n	801564c <_malloc_r+0x20>
 8015722:	6005      	str	r5, [r0, #0]
 8015724:	e7d6      	b.n	80156d4 <_malloc_r+0xa8>
 8015726:	bf00      	nop
 8015728:	2000c110 	.word	0x2000c110

0801572c <__malloc_lock>:
 801572c:	4801      	ldr	r0, [pc, #4]	@ (8015734 <__malloc_lock+0x8>)
 801572e:	f7ff beda 	b.w	80154e6 <__retarget_lock_acquire_recursive>
 8015732:	bf00      	nop
 8015734:	2000c108 	.word	0x2000c108

08015738 <__malloc_unlock>:
 8015738:	4801      	ldr	r0, [pc, #4]	@ (8015740 <__malloc_unlock+0x8>)
 801573a:	f7ff bed5 	b.w	80154e8 <__retarget_lock_release_recursive>
 801573e:	bf00      	nop
 8015740:	2000c108 	.word	0x2000c108

08015744 <__sfputc_r>:
 8015744:	6893      	ldr	r3, [r2, #8]
 8015746:	3b01      	subs	r3, #1
 8015748:	2b00      	cmp	r3, #0
 801574a:	b410      	push	{r4}
 801574c:	6093      	str	r3, [r2, #8]
 801574e:	da08      	bge.n	8015762 <__sfputc_r+0x1e>
 8015750:	6994      	ldr	r4, [r2, #24]
 8015752:	42a3      	cmp	r3, r4
 8015754:	db01      	blt.n	801575a <__sfputc_r+0x16>
 8015756:	290a      	cmp	r1, #10
 8015758:	d103      	bne.n	8015762 <__sfputc_r+0x1e>
 801575a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801575e:	f000 bb7f 	b.w	8015e60 <__swbuf_r>
 8015762:	6813      	ldr	r3, [r2, #0]
 8015764:	1c58      	adds	r0, r3, #1
 8015766:	6010      	str	r0, [r2, #0]
 8015768:	7019      	strb	r1, [r3, #0]
 801576a:	4608      	mov	r0, r1
 801576c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015770:	4770      	bx	lr

08015772 <__sfputs_r>:
 8015772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015774:	4606      	mov	r6, r0
 8015776:	460f      	mov	r7, r1
 8015778:	4614      	mov	r4, r2
 801577a:	18d5      	adds	r5, r2, r3
 801577c:	42ac      	cmp	r4, r5
 801577e:	d101      	bne.n	8015784 <__sfputs_r+0x12>
 8015780:	2000      	movs	r0, #0
 8015782:	e007      	b.n	8015794 <__sfputs_r+0x22>
 8015784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015788:	463a      	mov	r2, r7
 801578a:	4630      	mov	r0, r6
 801578c:	f7ff ffda 	bl	8015744 <__sfputc_r>
 8015790:	1c43      	adds	r3, r0, #1
 8015792:	d1f3      	bne.n	801577c <__sfputs_r+0xa>
 8015794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015798 <_vfiprintf_r>:
 8015798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801579c:	460d      	mov	r5, r1
 801579e:	b09d      	sub	sp, #116	@ 0x74
 80157a0:	4614      	mov	r4, r2
 80157a2:	4698      	mov	r8, r3
 80157a4:	4606      	mov	r6, r0
 80157a6:	b118      	cbz	r0, 80157b0 <_vfiprintf_r+0x18>
 80157a8:	6a03      	ldr	r3, [r0, #32]
 80157aa:	b90b      	cbnz	r3, 80157b0 <_vfiprintf_r+0x18>
 80157ac:	f7ff fd24 	bl	80151f8 <__sinit>
 80157b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80157b2:	07d9      	lsls	r1, r3, #31
 80157b4:	d405      	bmi.n	80157c2 <_vfiprintf_r+0x2a>
 80157b6:	89ab      	ldrh	r3, [r5, #12]
 80157b8:	059a      	lsls	r2, r3, #22
 80157ba:	d402      	bmi.n	80157c2 <_vfiprintf_r+0x2a>
 80157bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80157be:	f7ff fe92 	bl	80154e6 <__retarget_lock_acquire_recursive>
 80157c2:	89ab      	ldrh	r3, [r5, #12]
 80157c4:	071b      	lsls	r3, r3, #28
 80157c6:	d501      	bpl.n	80157cc <_vfiprintf_r+0x34>
 80157c8:	692b      	ldr	r3, [r5, #16]
 80157ca:	b99b      	cbnz	r3, 80157f4 <_vfiprintf_r+0x5c>
 80157cc:	4629      	mov	r1, r5
 80157ce:	4630      	mov	r0, r6
 80157d0:	f000 fb84 	bl	8015edc <__swsetup_r>
 80157d4:	b170      	cbz	r0, 80157f4 <_vfiprintf_r+0x5c>
 80157d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80157d8:	07dc      	lsls	r4, r3, #31
 80157da:	d504      	bpl.n	80157e6 <_vfiprintf_r+0x4e>
 80157dc:	f04f 30ff 	mov.w	r0, #4294967295
 80157e0:	b01d      	add	sp, #116	@ 0x74
 80157e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e6:	89ab      	ldrh	r3, [r5, #12]
 80157e8:	0598      	lsls	r0, r3, #22
 80157ea:	d4f7      	bmi.n	80157dc <_vfiprintf_r+0x44>
 80157ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80157ee:	f7ff fe7b 	bl	80154e8 <__retarget_lock_release_recursive>
 80157f2:	e7f3      	b.n	80157dc <_vfiprintf_r+0x44>
 80157f4:	2300      	movs	r3, #0
 80157f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80157f8:	2320      	movs	r3, #32
 80157fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80157fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015802:	2330      	movs	r3, #48	@ 0x30
 8015804:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80159b4 <_vfiprintf_r+0x21c>
 8015808:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801580c:	f04f 0901 	mov.w	r9, #1
 8015810:	4623      	mov	r3, r4
 8015812:	469a      	mov	sl, r3
 8015814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015818:	b10a      	cbz	r2, 801581e <_vfiprintf_r+0x86>
 801581a:	2a25      	cmp	r2, #37	@ 0x25
 801581c:	d1f9      	bne.n	8015812 <_vfiprintf_r+0x7a>
 801581e:	ebba 0b04 	subs.w	fp, sl, r4
 8015822:	d00b      	beq.n	801583c <_vfiprintf_r+0xa4>
 8015824:	465b      	mov	r3, fp
 8015826:	4622      	mov	r2, r4
 8015828:	4629      	mov	r1, r5
 801582a:	4630      	mov	r0, r6
 801582c:	f7ff ffa1 	bl	8015772 <__sfputs_r>
 8015830:	3001      	adds	r0, #1
 8015832:	f000 80a7 	beq.w	8015984 <_vfiprintf_r+0x1ec>
 8015836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015838:	445a      	add	r2, fp
 801583a:	9209      	str	r2, [sp, #36]	@ 0x24
 801583c:	f89a 3000 	ldrb.w	r3, [sl]
 8015840:	2b00      	cmp	r3, #0
 8015842:	f000 809f 	beq.w	8015984 <_vfiprintf_r+0x1ec>
 8015846:	2300      	movs	r3, #0
 8015848:	f04f 32ff 	mov.w	r2, #4294967295
 801584c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015850:	f10a 0a01 	add.w	sl, sl, #1
 8015854:	9304      	str	r3, [sp, #16]
 8015856:	9307      	str	r3, [sp, #28]
 8015858:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801585c:	931a      	str	r3, [sp, #104]	@ 0x68
 801585e:	4654      	mov	r4, sl
 8015860:	2205      	movs	r2, #5
 8015862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015866:	4853      	ldr	r0, [pc, #332]	@ (80159b4 <_vfiprintf_r+0x21c>)
 8015868:	f7ea fce2 	bl	8000230 <memchr>
 801586c:	9a04      	ldr	r2, [sp, #16]
 801586e:	b9d8      	cbnz	r0, 80158a8 <_vfiprintf_r+0x110>
 8015870:	06d1      	lsls	r1, r2, #27
 8015872:	bf44      	itt	mi
 8015874:	2320      	movmi	r3, #32
 8015876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801587a:	0713      	lsls	r3, r2, #28
 801587c:	bf44      	itt	mi
 801587e:	232b      	movmi	r3, #43	@ 0x2b
 8015880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015884:	f89a 3000 	ldrb.w	r3, [sl]
 8015888:	2b2a      	cmp	r3, #42	@ 0x2a
 801588a:	d015      	beq.n	80158b8 <_vfiprintf_r+0x120>
 801588c:	9a07      	ldr	r2, [sp, #28]
 801588e:	4654      	mov	r4, sl
 8015890:	2000      	movs	r0, #0
 8015892:	f04f 0c0a 	mov.w	ip, #10
 8015896:	4621      	mov	r1, r4
 8015898:	f811 3b01 	ldrb.w	r3, [r1], #1
 801589c:	3b30      	subs	r3, #48	@ 0x30
 801589e:	2b09      	cmp	r3, #9
 80158a0:	d94b      	bls.n	801593a <_vfiprintf_r+0x1a2>
 80158a2:	b1b0      	cbz	r0, 80158d2 <_vfiprintf_r+0x13a>
 80158a4:	9207      	str	r2, [sp, #28]
 80158a6:	e014      	b.n	80158d2 <_vfiprintf_r+0x13a>
 80158a8:	eba0 0308 	sub.w	r3, r0, r8
 80158ac:	fa09 f303 	lsl.w	r3, r9, r3
 80158b0:	4313      	orrs	r3, r2
 80158b2:	9304      	str	r3, [sp, #16]
 80158b4:	46a2      	mov	sl, r4
 80158b6:	e7d2      	b.n	801585e <_vfiprintf_r+0xc6>
 80158b8:	9b03      	ldr	r3, [sp, #12]
 80158ba:	1d19      	adds	r1, r3, #4
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	9103      	str	r1, [sp, #12]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	bfbb      	ittet	lt
 80158c4:	425b      	neglt	r3, r3
 80158c6:	f042 0202 	orrlt.w	r2, r2, #2
 80158ca:	9307      	strge	r3, [sp, #28]
 80158cc:	9307      	strlt	r3, [sp, #28]
 80158ce:	bfb8      	it	lt
 80158d0:	9204      	strlt	r2, [sp, #16]
 80158d2:	7823      	ldrb	r3, [r4, #0]
 80158d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80158d6:	d10a      	bne.n	80158ee <_vfiprintf_r+0x156>
 80158d8:	7863      	ldrb	r3, [r4, #1]
 80158da:	2b2a      	cmp	r3, #42	@ 0x2a
 80158dc:	d132      	bne.n	8015944 <_vfiprintf_r+0x1ac>
 80158de:	9b03      	ldr	r3, [sp, #12]
 80158e0:	1d1a      	adds	r2, r3, #4
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	9203      	str	r2, [sp, #12]
 80158e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80158ea:	3402      	adds	r4, #2
 80158ec:	9305      	str	r3, [sp, #20]
 80158ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80159c4 <_vfiprintf_r+0x22c>
 80158f2:	7821      	ldrb	r1, [r4, #0]
 80158f4:	2203      	movs	r2, #3
 80158f6:	4650      	mov	r0, sl
 80158f8:	f7ea fc9a 	bl	8000230 <memchr>
 80158fc:	b138      	cbz	r0, 801590e <_vfiprintf_r+0x176>
 80158fe:	9b04      	ldr	r3, [sp, #16]
 8015900:	eba0 000a 	sub.w	r0, r0, sl
 8015904:	2240      	movs	r2, #64	@ 0x40
 8015906:	4082      	lsls	r2, r0
 8015908:	4313      	orrs	r3, r2
 801590a:	3401      	adds	r4, #1
 801590c:	9304      	str	r3, [sp, #16]
 801590e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015912:	4829      	ldr	r0, [pc, #164]	@ (80159b8 <_vfiprintf_r+0x220>)
 8015914:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015918:	2206      	movs	r2, #6
 801591a:	f7ea fc89 	bl	8000230 <memchr>
 801591e:	2800      	cmp	r0, #0
 8015920:	d03f      	beq.n	80159a2 <_vfiprintf_r+0x20a>
 8015922:	4b26      	ldr	r3, [pc, #152]	@ (80159bc <_vfiprintf_r+0x224>)
 8015924:	bb1b      	cbnz	r3, 801596e <_vfiprintf_r+0x1d6>
 8015926:	9b03      	ldr	r3, [sp, #12]
 8015928:	3307      	adds	r3, #7
 801592a:	f023 0307 	bic.w	r3, r3, #7
 801592e:	3308      	adds	r3, #8
 8015930:	9303      	str	r3, [sp, #12]
 8015932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015934:	443b      	add	r3, r7
 8015936:	9309      	str	r3, [sp, #36]	@ 0x24
 8015938:	e76a      	b.n	8015810 <_vfiprintf_r+0x78>
 801593a:	fb0c 3202 	mla	r2, ip, r2, r3
 801593e:	460c      	mov	r4, r1
 8015940:	2001      	movs	r0, #1
 8015942:	e7a8      	b.n	8015896 <_vfiprintf_r+0xfe>
 8015944:	2300      	movs	r3, #0
 8015946:	3401      	adds	r4, #1
 8015948:	9305      	str	r3, [sp, #20]
 801594a:	4619      	mov	r1, r3
 801594c:	f04f 0c0a 	mov.w	ip, #10
 8015950:	4620      	mov	r0, r4
 8015952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015956:	3a30      	subs	r2, #48	@ 0x30
 8015958:	2a09      	cmp	r2, #9
 801595a:	d903      	bls.n	8015964 <_vfiprintf_r+0x1cc>
 801595c:	2b00      	cmp	r3, #0
 801595e:	d0c6      	beq.n	80158ee <_vfiprintf_r+0x156>
 8015960:	9105      	str	r1, [sp, #20]
 8015962:	e7c4      	b.n	80158ee <_vfiprintf_r+0x156>
 8015964:	fb0c 2101 	mla	r1, ip, r1, r2
 8015968:	4604      	mov	r4, r0
 801596a:	2301      	movs	r3, #1
 801596c:	e7f0      	b.n	8015950 <_vfiprintf_r+0x1b8>
 801596e:	ab03      	add	r3, sp, #12
 8015970:	9300      	str	r3, [sp, #0]
 8015972:	462a      	mov	r2, r5
 8015974:	4b12      	ldr	r3, [pc, #72]	@ (80159c0 <_vfiprintf_r+0x228>)
 8015976:	a904      	add	r1, sp, #16
 8015978:	4630      	mov	r0, r6
 801597a:	f3af 8000 	nop.w
 801597e:	4607      	mov	r7, r0
 8015980:	1c78      	adds	r0, r7, #1
 8015982:	d1d6      	bne.n	8015932 <_vfiprintf_r+0x19a>
 8015984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015986:	07d9      	lsls	r1, r3, #31
 8015988:	d405      	bmi.n	8015996 <_vfiprintf_r+0x1fe>
 801598a:	89ab      	ldrh	r3, [r5, #12]
 801598c:	059a      	lsls	r2, r3, #22
 801598e:	d402      	bmi.n	8015996 <_vfiprintf_r+0x1fe>
 8015990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015992:	f7ff fda9 	bl	80154e8 <__retarget_lock_release_recursive>
 8015996:	89ab      	ldrh	r3, [r5, #12]
 8015998:	065b      	lsls	r3, r3, #25
 801599a:	f53f af1f 	bmi.w	80157dc <_vfiprintf_r+0x44>
 801599e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80159a0:	e71e      	b.n	80157e0 <_vfiprintf_r+0x48>
 80159a2:	ab03      	add	r3, sp, #12
 80159a4:	9300      	str	r3, [sp, #0]
 80159a6:	462a      	mov	r2, r5
 80159a8:	4b05      	ldr	r3, [pc, #20]	@ (80159c0 <_vfiprintf_r+0x228>)
 80159aa:	a904      	add	r1, sp, #16
 80159ac:	4630      	mov	r0, r6
 80159ae:	f000 f879 	bl	8015aa4 <_printf_i>
 80159b2:	e7e4      	b.n	801597e <_vfiprintf_r+0x1e6>
 80159b4:	08022c93 	.word	0x08022c93
 80159b8:	08022c9d 	.word	0x08022c9d
 80159bc:	00000000 	.word	0x00000000
 80159c0:	08015773 	.word	0x08015773
 80159c4:	08022c99 	.word	0x08022c99

080159c8 <_printf_common>:
 80159c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159cc:	4616      	mov	r6, r2
 80159ce:	4698      	mov	r8, r3
 80159d0:	688a      	ldr	r2, [r1, #8]
 80159d2:	690b      	ldr	r3, [r1, #16]
 80159d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80159d8:	4293      	cmp	r3, r2
 80159da:	bfb8      	it	lt
 80159dc:	4613      	movlt	r3, r2
 80159de:	6033      	str	r3, [r6, #0]
 80159e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80159e4:	4607      	mov	r7, r0
 80159e6:	460c      	mov	r4, r1
 80159e8:	b10a      	cbz	r2, 80159ee <_printf_common+0x26>
 80159ea:	3301      	adds	r3, #1
 80159ec:	6033      	str	r3, [r6, #0]
 80159ee:	6823      	ldr	r3, [r4, #0]
 80159f0:	0699      	lsls	r1, r3, #26
 80159f2:	bf42      	ittt	mi
 80159f4:	6833      	ldrmi	r3, [r6, #0]
 80159f6:	3302      	addmi	r3, #2
 80159f8:	6033      	strmi	r3, [r6, #0]
 80159fa:	6825      	ldr	r5, [r4, #0]
 80159fc:	f015 0506 	ands.w	r5, r5, #6
 8015a00:	d106      	bne.n	8015a10 <_printf_common+0x48>
 8015a02:	f104 0a19 	add.w	sl, r4, #25
 8015a06:	68e3      	ldr	r3, [r4, #12]
 8015a08:	6832      	ldr	r2, [r6, #0]
 8015a0a:	1a9b      	subs	r3, r3, r2
 8015a0c:	42ab      	cmp	r3, r5
 8015a0e:	dc26      	bgt.n	8015a5e <_printf_common+0x96>
 8015a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015a14:	6822      	ldr	r2, [r4, #0]
 8015a16:	3b00      	subs	r3, #0
 8015a18:	bf18      	it	ne
 8015a1a:	2301      	movne	r3, #1
 8015a1c:	0692      	lsls	r2, r2, #26
 8015a1e:	d42b      	bmi.n	8015a78 <_printf_common+0xb0>
 8015a20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015a24:	4641      	mov	r1, r8
 8015a26:	4638      	mov	r0, r7
 8015a28:	47c8      	blx	r9
 8015a2a:	3001      	adds	r0, #1
 8015a2c:	d01e      	beq.n	8015a6c <_printf_common+0xa4>
 8015a2e:	6823      	ldr	r3, [r4, #0]
 8015a30:	6922      	ldr	r2, [r4, #16]
 8015a32:	f003 0306 	and.w	r3, r3, #6
 8015a36:	2b04      	cmp	r3, #4
 8015a38:	bf02      	ittt	eq
 8015a3a:	68e5      	ldreq	r5, [r4, #12]
 8015a3c:	6833      	ldreq	r3, [r6, #0]
 8015a3e:	1aed      	subeq	r5, r5, r3
 8015a40:	68a3      	ldr	r3, [r4, #8]
 8015a42:	bf0c      	ite	eq
 8015a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015a48:	2500      	movne	r5, #0
 8015a4a:	4293      	cmp	r3, r2
 8015a4c:	bfc4      	itt	gt
 8015a4e:	1a9b      	subgt	r3, r3, r2
 8015a50:	18ed      	addgt	r5, r5, r3
 8015a52:	2600      	movs	r6, #0
 8015a54:	341a      	adds	r4, #26
 8015a56:	42b5      	cmp	r5, r6
 8015a58:	d11a      	bne.n	8015a90 <_printf_common+0xc8>
 8015a5a:	2000      	movs	r0, #0
 8015a5c:	e008      	b.n	8015a70 <_printf_common+0xa8>
 8015a5e:	2301      	movs	r3, #1
 8015a60:	4652      	mov	r2, sl
 8015a62:	4641      	mov	r1, r8
 8015a64:	4638      	mov	r0, r7
 8015a66:	47c8      	blx	r9
 8015a68:	3001      	adds	r0, #1
 8015a6a:	d103      	bne.n	8015a74 <_printf_common+0xac>
 8015a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a74:	3501      	adds	r5, #1
 8015a76:	e7c6      	b.n	8015a06 <_printf_common+0x3e>
 8015a78:	18e1      	adds	r1, r4, r3
 8015a7a:	1c5a      	adds	r2, r3, #1
 8015a7c:	2030      	movs	r0, #48	@ 0x30
 8015a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015a82:	4422      	add	r2, r4
 8015a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015a88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015a8c:	3302      	adds	r3, #2
 8015a8e:	e7c7      	b.n	8015a20 <_printf_common+0x58>
 8015a90:	2301      	movs	r3, #1
 8015a92:	4622      	mov	r2, r4
 8015a94:	4641      	mov	r1, r8
 8015a96:	4638      	mov	r0, r7
 8015a98:	47c8      	blx	r9
 8015a9a:	3001      	adds	r0, #1
 8015a9c:	d0e6      	beq.n	8015a6c <_printf_common+0xa4>
 8015a9e:	3601      	adds	r6, #1
 8015aa0:	e7d9      	b.n	8015a56 <_printf_common+0x8e>
	...

08015aa4 <_printf_i>:
 8015aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015aa8:	7e0f      	ldrb	r7, [r1, #24]
 8015aaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015aac:	2f78      	cmp	r7, #120	@ 0x78
 8015aae:	4691      	mov	r9, r2
 8015ab0:	4680      	mov	r8, r0
 8015ab2:	460c      	mov	r4, r1
 8015ab4:	469a      	mov	sl, r3
 8015ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015aba:	d807      	bhi.n	8015acc <_printf_i+0x28>
 8015abc:	2f62      	cmp	r7, #98	@ 0x62
 8015abe:	d80a      	bhi.n	8015ad6 <_printf_i+0x32>
 8015ac0:	2f00      	cmp	r7, #0
 8015ac2:	f000 80d2 	beq.w	8015c6a <_printf_i+0x1c6>
 8015ac6:	2f58      	cmp	r7, #88	@ 0x58
 8015ac8:	f000 80b9 	beq.w	8015c3e <_printf_i+0x19a>
 8015acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015ad4:	e03a      	b.n	8015b4c <_printf_i+0xa8>
 8015ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015ada:	2b15      	cmp	r3, #21
 8015adc:	d8f6      	bhi.n	8015acc <_printf_i+0x28>
 8015ade:	a101      	add	r1, pc, #4	@ (adr r1, 8015ae4 <_printf_i+0x40>)
 8015ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ae4:	08015b3d 	.word	0x08015b3d
 8015ae8:	08015b51 	.word	0x08015b51
 8015aec:	08015acd 	.word	0x08015acd
 8015af0:	08015acd 	.word	0x08015acd
 8015af4:	08015acd 	.word	0x08015acd
 8015af8:	08015acd 	.word	0x08015acd
 8015afc:	08015b51 	.word	0x08015b51
 8015b00:	08015acd 	.word	0x08015acd
 8015b04:	08015acd 	.word	0x08015acd
 8015b08:	08015acd 	.word	0x08015acd
 8015b0c:	08015acd 	.word	0x08015acd
 8015b10:	08015c51 	.word	0x08015c51
 8015b14:	08015b7b 	.word	0x08015b7b
 8015b18:	08015c0b 	.word	0x08015c0b
 8015b1c:	08015acd 	.word	0x08015acd
 8015b20:	08015acd 	.word	0x08015acd
 8015b24:	08015c73 	.word	0x08015c73
 8015b28:	08015acd 	.word	0x08015acd
 8015b2c:	08015b7b 	.word	0x08015b7b
 8015b30:	08015acd 	.word	0x08015acd
 8015b34:	08015acd 	.word	0x08015acd
 8015b38:	08015c13 	.word	0x08015c13
 8015b3c:	6833      	ldr	r3, [r6, #0]
 8015b3e:	1d1a      	adds	r2, r3, #4
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	6032      	str	r2, [r6, #0]
 8015b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	e09d      	b.n	8015c8c <_printf_i+0x1e8>
 8015b50:	6833      	ldr	r3, [r6, #0]
 8015b52:	6820      	ldr	r0, [r4, #0]
 8015b54:	1d19      	adds	r1, r3, #4
 8015b56:	6031      	str	r1, [r6, #0]
 8015b58:	0606      	lsls	r6, r0, #24
 8015b5a:	d501      	bpl.n	8015b60 <_printf_i+0xbc>
 8015b5c:	681d      	ldr	r5, [r3, #0]
 8015b5e:	e003      	b.n	8015b68 <_printf_i+0xc4>
 8015b60:	0645      	lsls	r5, r0, #25
 8015b62:	d5fb      	bpl.n	8015b5c <_printf_i+0xb8>
 8015b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015b68:	2d00      	cmp	r5, #0
 8015b6a:	da03      	bge.n	8015b74 <_printf_i+0xd0>
 8015b6c:	232d      	movs	r3, #45	@ 0x2d
 8015b6e:	426d      	negs	r5, r5
 8015b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015b74:	4859      	ldr	r0, [pc, #356]	@ (8015cdc <_printf_i+0x238>)
 8015b76:	230a      	movs	r3, #10
 8015b78:	e011      	b.n	8015b9e <_printf_i+0xfa>
 8015b7a:	6821      	ldr	r1, [r4, #0]
 8015b7c:	6833      	ldr	r3, [r6, #0]
 8015b7e:	0608      	lsls	r0, r1, #24
 8015b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8015b84:	d402      	bmi.n	8015b8c <_printf_i+0xe8>
 8015b86:	0649      	lsls	r1, r1, #25
 8015b88:	bf48      	it	mi
 8015b8a:	b2ad      	uxthmi	r5, r5
 8015b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8015b8e:	4853      	ldr	r0, [pc, #332]	@ (8015cdc <_printf_i+0x238>)
 8015b90:	6033      	str	r3, [r6, #0]
 8015b92:	bf14      	ite	ne
 8015b94:	230a      	movne	r3, #10
 8015b96:	2308      	moveq	r3, #8
 8015b98:	2100      	movs	r1, #0
 8015b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015b9e:	6866      	ldr	r6, [r4, #4]
 8015ba0:	60a6      	str	r6, [r4, #8]
 8015ba2:	2e00      	cmp	r6, #0
 8015ba4:	bfa2      	ittt	ge
 8015ba6:	6821      	ldrge	r1, [r4, #0]
 8015ba8:	f021 0104 	bicge.w	r1, r1, #4
 8015bac:	6021      	strge	r1, [r4, #0]
 8015bae:	b90d      	cbnz	r5, 8015bb4 <_printf_i+0x110>
 8015bb0:	2e00      	cmp	r6, #0
 8015bb2:	d04b      	beq.n	8015c4c <_printf_i+0x1a8>
 8015bb4:	4616      	mov	r6, r2
 8015bb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8015bba:	fb03 5711 	mls	r7, r3, r1, r5
 8015bbe:	5dc7      	ldrb	r7, [r0, r7]
 8015bc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015bc4:	462f      	mov	r7, r5
 8015bc6:	42bb      	cmp	r3, r7
 8015bc8:	460d      	mov	r5, r1
 8015bca:	d9f4      	bls.n	8015bb6 <_printf_i+0x112>
 8015bcc:	2b08      	cmp	r3, #8
 8015bce:	d10b      	bne.n	8015be8 <_printf_i+0x144>
 8015bd0:	6823      	ldr	r3, [r4, #0]
 8015bd2:	07df      	lsls	r7, r3, #31
 8015bd4:	d508      	bpl.n	8015be8 <_printf_i+0x144>
 8015bd6:	6923      	ldr	r3, [r4, #16]
 8015bd8:	6861      	ldr	r1, [r4, #4]
 8015bda:	4299      	cmp	r1, r3
 8015bdc:	bfde      	ittt	le
 8015bde:	2330      	movle	r3, #48	@ 0x30
 8015be0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015be4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015be8:	1b92      	subs	r2, r2, r6
 8015bea:	6122      	str	r2, [r4, #16]
 8015bec:	f8cd a000 	str.w	sl, [sp]
 8015bf0:	464b      	mov	r3, r9
 8015bf2:	aa03      	add	r2, sp, #12
 8015bf4:	4621      	mov	r1, r4
 8015bf6:	4640      	mov	r0, r8
 8015bf8:	f7ff fee6 	bl	80159c8 <_printf_common>
 8015bfc:	3001      	adds	r0, #1
 8015bfe:	d14a      	bne.n	8015c96 <_printf_i+0x1f2>
 8015c00:	f04f 30ff 	mov.w	r0, #4294967295
 8015c04:	b004      	add	sp, #16
 8015c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c0a:	6823      	ldr	r3, [r4, #0]
 8015c0c:	f043 0320 	orr.w	r3, r3, #32
 8015c10:	6023      	str	r3, [r4, #0]
 8015c12:	4833      	ldr	r0, [pc, #204]	@ (8015ce0 <_printf_i+0x23c>)
 8015c14:	2778      	movs	r7, #120	@ 0x78
 8015c16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015c1a:	6823      	ldr	r3, [r4, #0]
 8015c1c:	6831      	ldr	r1, [r6, #0]
 8015c1e:	061f      	lsls	r7, r3, #24
 8015c20:	f851 5b04 	ldr.w	r5, [r1], #4
 8015c24:	d402      	bmi.n	8015c2c <_printf_i+0x188>
 8015c26:	065f      	lsls	r7, r3, #25
 8015c28:	bf48      	it	mi
 8015c2a:	b2ad      	uxthmi	r5, r5
 8015c2c:	6031      	str	r1, [r6, #0]
 8015c2e:	07d9      	lsls	r1, r3, #31
 8015c30:	bf44      	itt	mi
 8015c32:	f043 0320 	orrmi.w	r3, r3, #32
 8015c36:	6023      	strmi	r3, [r4, #0]
 8015c38:	b11d      	cbz	r5, 8015c42 <_printf_i+0x19e>
 8015c3a:	2310      	movs	r3, #16
 8015c3c:	e7ac      	b.n	8015b98 <_printf_i+0xf4>
 8015c3e:	4827      	ldr	r0, [pc, #156]	@ (8015cdc <_printf_i+0x238>)
 8015c40:	e7e9      	b.n	8015c16 <_printf_i+0x172>
 8015c42:	6823      	ldr	r3, [r4, #0]
 8015c44:	f023 0320 	bic.w	r3, r3, #32
 8015c48:	6023      	str	r3, [r4, #0]
 8015c4a:	e7f6      	b.n	8015c3a <_printf_i+0x196>
 8015c4c:	4616      	mov	r6, r2
 8015c4e:	e7bd      	b.n	8015bcc <_printf_i+0x128>
 8015c50:	6833      	ldr	r3, [r6, #0]
 8015c52:	6825      	ldr	r5, [r4, #0]
 8015c54:	6961      	ldr	r1, [r4, #20]
 8015c56:	1d18      	adds	r0, r3, #4
 8015c58:	6030      	str	r0, [r6, #0]
 8015c5a:	062e      	lsls	r6, r5, #24
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	d501      	bpl.n	8015c64 <_printf_i+0x1c0>
 8015c60:	6019      	str	r1, [r3, #0]
 8015c62:	e002      	b.n	8015c6a <_printf_i+0x1c6>
 8015c64:	0668      	lsls	r0, r5, #25
 8015c66:	d5fb      	bpl.n	8015c60 <_printf_i+0x1bc>
 8015c68:	8019      	strh	r1, [r3, #0]
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	6123      	str	r3, [r4, #16]
 8015c6e:	4616      	mov	r6, r2
 8015c70:	e7bc      	b.n	8015bec <_printf_i+0x148>
 8015c72:	6833      	ldr	r3, [r6, #0]
 8015c74:	1d1a      	adds	r2, r3, #4
 8015c76:	6032      	str	r2, [r6, #0]
 8015c78:	681e      	ldr	r6, [r3, #0]
 8015c7a:	6862      	ldr	r2, [r4, #4]
 8015c7c:	2100      	movs	r1, #0
 8015c7e:	4630      	mov	r0, r6
 8015c80:	f7ea fad6 	bl	8000230 <memchr>
 8015c84:	b108      	cbz	r0, 8015c8a <_printf_i+0x1e6>
 8015c86:	1b80      	subs	r0, r0, r6
 8015c88:	6060      	str	r0, [r4, #4]
 8015c8a:	6863      	ldr	r3, [r4, #4]
 8015c8c:	6123      	str	r3, [r4, #16]
 8015c8e:	2300      	movs	r3, #0
 8015c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015c94:	e7aa      	b.n	8015bec <_printf_i+0x148>
 8015c96:	6923      	ldr	r3, [r4, #16]
 8015c98:	4632      	mov	r2, r6
 8015c9a:	4649      	mov	r1, r9
 8015c9c:	4640      	mov	r0, r8
 8015c9e:	47d0      	blx	sl
 8015ca0:	3001      	adds	r0, #1
 8015ca2:	d0ad      	beq.n	8015c00 <_printf_i+0x15c>
 8015ca4:	6823      	ldr	r3, [r4, #0]
 8015ca6:	079b      	lsls	r3, r3, #30
 8015ca8:	d413      	bmi.n	8015cd2 <_printf_i+0x22e>
 8015caa:	68e0      	ldr	r0, [r4, #12]
 8015cac:	9b03      	ldr	r3, [sp, #12]
 8015cae:	4298      	cmp	r0, r3
 8015cb0:	bfb8      	it	lt
 8015cb2:	4618      	movlt	r0, r3
 8015cb4:	e7a6      	b.n	8015c04 <_printf_i+0x160>
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	4632      	mov	r2, r6
 8015cba:	4649      	mov	r1, r9
 8015cbc:	4640      	mov	r0, r8
 8015cbe:	47d0      	blx	sl
 8015cc0:	3001      	adds	r0, #1
 8015cc2:	d09d      	beq.n	8015c00 <_printf_i+0x15c>
 8015cc4:	3501      	adds	r5, #1
 8015cc6:	68e3      	ldr	r3, [r4, #12]
 8015cc8:	9903      	ldr	r1, [sp, #12]
 8015cca:	1a5b      	subs	r3, r3, r1
 8015ccc:	42ab      	cmp	r3, r5
 8015cce:	dcf2      	bgt.n	8015cb6 <_printf_i+0x212>
 8015cd0:	e7eb      	b.n	8015caa <_printf_i+0x206>
 8015cd2:	2500      	movs	r5, #0
 8015cd4:	f104 0619 	add.w	r6, r4, #25
 8015cd8:	e7f5      	b.n	8015cc6 <_printf_i+0x222>
 8015cda:	bf00      	nop
 8015cdc:	08022ca4 	.word	0x08022ca4
 8015ce0:	08022cb5 	.word	0x08022cb5

08015ce4 <__sflush_r>:
 8015ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cec:	0716      	lsls	r6, r2, #28
 8015cee:	4605      	mov	r5, r0
 8015cf0:	460c      	mov	r4, r1
 8015cf2:	d454      	bmi.n	8015d9e <__sflush_r+0xba>
 8015cf4:	684b      	ldr	r3, [r1, #4]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	dc02      	bgt.n	8015d00 <__sflush_r+0x1c>
 8015cfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	dd48      	ble.n	8015d92 <__sflush_r+0xae>
 8015d00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015d02:	2e00      	cmp	r6, #0
 8015d04:	d045      	beq.n	8015d92 <__sflush_r+0xae>
 8015d06:	2300      	movs	r3, #0
 8015d08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015d0c:	682f      	ldr	r7, [r5, #0]
 8015d0e:	6a21      	ldr	r1, [r4, #32]
 8015d10:	602b      	str	r3, [r5, #0]
 8015d12:	d030      	beq.n	8015d76 <__sflush_r+0x92>
 8015d14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015d16:	89a3      	ldrh	r3, [r4, #12]
 8015d18:	0759      	lsls	r1, r3, #29
 8015d1a:	d505      	bpl.n	8015d28 <__sflush_r+0x44>
 8015d1c:	6863      	ldr	r3, [r4, #4]
 8015d1e:	1ad2      	subs	r2, r2, r3
 8015d20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015d22:	b10b      	cbz	r3, 8015d28 <__sflush_r+0x44>
 8015d24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015d26:	1ad2      	subs	r2, r2, r3
 8015d28:	2300      	movs	r3, #0
 8015d2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015d2c:	6a21      	ldr	r1, [r4, #32]
 8015d2e:	4628      	mov	r0, r5
 8015d30:	47b0      	blx	r6
 8015d32:	1c43      	adds	r3, r0, #1
 8015d34:	89a3      	ldrh	r3, [r4, #12]
 8015d36:	d106      	bne.n	8015d46 <__sflush_r+0x62>
 8015d38:	6829      	ldr	r1, [r5, #0]
 8015d3a:	291d      	cmp	r1, #29
 8015d3c:	d82b      	bhi.n	8015d96 <__sflush_r+0xb2>
 8015d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8015de8 <__sflush_r+0x104>)
 8015d40:	410a      	asrs	r2, r1
 8015d42:	07d6      	lsls	r6, r2, #31
 8015d44:	d427      	bmi.n	8015d96 <__sflush_r+0xb2>
 8015d46:	2200      	movs	r2, #0
 8015d48:	6062      	str	r2, [r4, #4]
 8015d4a:	04d9      	lsls	r1, r3, #19
 8015d4c:	6922      	ldr	r2, [r4, #16]
 8015d4e:	6022      	str	r2, [r4, #0]
 8015d50:	d504      	bpl.n	8015d5c <__sflush_r+0x78>
 8015d52:	1c42      	adds	r2, r0, #1
 8015d54:	d101      	bne.n	8015d5a <__sflush_r+0x76>
 8015d56:	682b      	ldr	r3, [r5, #0]
 8015d58:	b903      	cbnz	r3, 8015d5c <__sflush_r+0x78>
 8015d5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8015d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015d5e:	602f      	str	r7, [r5, #0]
 8015d60:	b1b9      	cbz	r1, 8015d92 <__sflush_r+0xae>
 8015d62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015d66:	4299      	cmp	r1, r3
 8015d68:	d002      	beq.n	8015d70 <__sflush_r+0x8c>
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	f7ff fbea 	bl	8015544 <_free_r>
 8015d70:	2300      	movs	r3, #0
 8015d72:	6363      	str	r3, [r4, #52]	@ 0x34
 8015d74:	e00d      	b.n	8015d92 <__sflush_r+0xae>
 8015d76:	2301      	movs	r3, #1
 8015d78:	4628      	mov	r0, r5
 8015d7a:	47b0      	blx	r6
 8015d7c:	4602      	mov	r2, r0
 8015d7e:	1c50      	adds	r0, r2, #1
 8015d80:	d1c9      	bne.n	8015d16 <__sflush_r+0x32>
 8015d82:	682b      	ldr	r3, [r5, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d0c6      	beq.n	8015d16 <__sflush_r+0x32>
 8015d88:	2b1d      	cmp	r3, #29
 8015d8a:	d001      	beq.n	8015d90 <__sflush_r+0xac>
 8015d8c:	2b16      	cmp	r3, #22
 8015d8e:	d11e      	bne.n	8015dce <__sflush_r+0xea>
 8015d90:	602f      	str	r7, [r5, #0]
 8015d92:	2000      	movs	r0, #0
 8015d94:	e022      	b.n	8015ddc <__sflush_r+0xf8>
 8015d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d9a:	b21b      	sxth	r3, r3
 8015d9c:	e01b      	b.n	8015dd6 <__sflush_r+0xf2>
 8015d9e:	690f      	ldr	r7, [r1, #16]
 8015da0:	2f00      	cmp	r7, #0
 8015da2:	d0f6      	beq.n	8015d92 <__sflush_r+0xae>
 8015da4:	0793      	lsls	r3, r2, #30
 8015da6:	680e      	ldr	r6, [r1, #0]
 8015da8:	bf08      	it	eq
 8015daa:	694b      	ldreq	r3, [r1, #20]
 8015dac:	600f      	str	r7, [r1, #0]
 8015dae:	bf18      	it	ne
 8015db0:	2300      	movne	r3, #0
 8015db2:	eba6 0807 	sub.w	r8, r6, r7
 8015db6:	608b      	str	r3, [r1, #8]
 8015db8:	f1b8 0f00 	cmp.w	r8, #0
 8015dbc:	dde9      	ble.n	8015d92 <__sflush_r+0xae>
 8015dbe:	6a21      	ldr	r1, [r4, #32]
 8015dc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015dc2:	4643      	mov	r3, r8
 8015dc4:	463a      	mov	r2, r7
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	47b0      	blx	r6
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	dc08      	bgt.n	8015de0 <__sflush_r+0xfc>
 8015dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015dd6:	81a3      	strh	r3, [r4, #12]
 8015dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de0:	4407      	add	r7, r0
 8015de2:	eba8 0800 	sub.w	r8, r8, r0
 8015de6:	e7e7      	b.n	8015db8 <__sflush_r+0xd4>
 8015de8:	dfbffffe 	.word	0xdfbffffe

08015dec <_fflush_r>:
 8015dec:	b538      	push	{r3, r4, r5, lr}
 8015dee:	690b      	ldr	r3, [r1, #16]
 8015df0:	4605      	mov	r5, r0
 8015df2:	460c      	mov	r4, r1
 8015df4:	b913      	cbnz	r3, 8015dfc <_fflush_r+0x10>
 8015df6:	2500      	movs	r5, #0
 8015df8:	4628      	mov	r0, r5
 8015dfa:	bd38      	pop	{r3, r4, r5, pc}
 8015dfc:	b118      	cbz	r0, 8015e06 <_fflush_r+0x1a>
 8015dfe:	6a03      	ldr	r3, [r0, #32]
 8015e00:	b90b      	cbnz	r3, 8015e06 <_fflush_r+0x1a>
 8015e02:	f7ff f9f9 	bl	80151f8 <__sinit>
 8015e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d0f3      	beq.n	8015df6 <_fflush_r+0xa>
 8015e0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015e10:	07d0      	lsls	r0, r2, #31
 8015e12:	d404      	bmi.n	8015e1e <_fflush_r+0x32>
 8015e14:	0599      	lsls	r1, r3, #22
 8015e16:	d402      	bmi.n	8015e1e <_fflush_r+0x32>
 8015e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e1a:	f7ff fb64 	bl	80154e6 <__retarget_lock_acquire_recursive>
 8015e1e:	4628      	mov	r0, r5
 8015e20:	4621      	mov	r1, r4
 8015e22:	f7ff ff5f 	bl	8015ce4 <__sflush_r>
 8015e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015e28:	07da      	lsls	r2, r3, #31
 8015e2a:	4605      	mov	r5, r0
 8015e2c:	d4e4      	bmi.n	8015df8 <_fflush_r+0xc>
 8015e2e:	89a3      	ldrh	r3, [r4, #12]
 8015e30:	059b      	lsls	r3, r3, #22
 8015e32:	d4e1      	bmi.n	8015df8 <_fflush_r+0xc>
 8015e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e36:	f7ff fb57 	bl	80154e8 <__retarget_lock_release_recursive>
 8015e3a:	e7dd      	b.n	8015df8 <_fflush_r+0xc>

08015e3c <fiprintf>:
 8015e3c:	b40e      	push	{r1, r2, r3}
 8015e3e:	b503      	push	{r0, r1, lr}
 8015e40:	4601      	mov	r1, r0
 8015e42:	ab03      	add	r3, sp, #12
 8015e44:	4805      	ldr	r0, [pc, #20]	@ (8015e5c <fiprintf+0x20>)
 8015e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e4a:	6800      	ldr	r0, [r0, #0]
 8015e4c:	9301      	str	r3, [sp, #4]
 8015e4e:	f7ff fca3 	bl	8015798 <_vfiprintf_r>
 8015e52:	b002      	add	sp, #8
 8015e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e58:	b003      	add	sp, #12
 8015e5a:	4770      	bx	lr
 8015e5c:	2000003c 	.word	0x2000003c

08015e60 <__swbuf_r>:
 8015e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e62:	460e      	mov	r6, r1
 8015e64:	4614      	mov	r4, r2
 8015e66:	4605      	mov	r5, r0
 8015e68:	b118      	cbz	r0, 8015e72 <__swbuf_r+0x12>
 8015e6a:	6a03      	ldr	r3, [r0, #32]
 8015e6c:	b90b      	cbnz	r3, 8015e72 <__swbuf_r+0x12>
 8015e6e:	f7ff f9c3 	bl	80151f8 <__sinit>
 8015e72:	69a3      	ldr	r3, [r4, #24]
 8015e74:	60a3      	str	r3, [r4, #8]
 8015e76:	89a3      	ldrh	r3, [r4, #12]
 8015e78:	071a      	lsls	r2, r3, #28
 8015e7a:	d501      	bpl.n	8015e80 <__swbuf_r+0x20>
 8015e7c:	6923      	ldr	r3, [r4, #16]
 8015e7e:	b943      	cbnz	r3, 8015e92 <__swbuf_r+0x32>
 8015e80:	4621      	mov	r1, r4
 8015e82:	4628      	mov	r0, r5
 8015e84:	f000 f82a 	bl	8015edc <__swsetup_r>
 8015e88:	b118      	cbz	r0, 8015e92 <__swbuf_r+0x32>
 8015e8a:	f04f 37ff 	mov.w	r7, #4294967295
 8015e8e:	4638      	mov	r0, r7
 8015e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e92:	6823      	ldr	r3, [r4, #0]
 8015e94:	6922      	ldr	r2, [r4, #16]
 8015e96:	1a98      	subs	r0, r3, r2
 8015e98:	6963      	ldr	r3, [r4, #20]
 8015e9a:	b2f6      	uxtb	r6, r6
 8015e9c:	4283      	cmp	r3, r0
 8015e9e:	4637      	mov	r7, r6
 8015ea0:	dc05      	bgt.n	8015eae <__swbuf_r+0x4e>
 8015ea2:	4621      	mov	r1, r4
 8015ea4:	4628      	mov	r0, r5
 8015ea6:	f7ff ffa1 	bl	8015dec <_fflush_r>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	d1ed      	bne.n	8015e8a <__swbuf_r+0x2a>
 8015eae:	68a3      	ldr	r3, [r4, #8]
 8015eb0:	3b01      	subs	r3, #1
 8015eb2:	60a3      	str	r3, [r4, #8]
 8015eb4:	6823      	ldr	r3, [r4, #0]
 8015eb6:	1c5a      	adds	r2, r3, #1
 8015eb8:	6022      	str	r2, [r4, #0]
 8015eba:	701e      	strb	r6, [r3, #0]
 8015ebc:	6962      	ldr	r2, [r4, #20]
 8015ebe:	1c43      	adds	r3, r0, #1
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d004      	beq.n	8015ece <__swbuf_r+0x6e>
 8015ec4:	89a3      	ldrh	r3, [r4, #12]
 8015ec6:	07db      	lsls	r3, r3, #31
 8015ec8:	d5e1      	bpl.n	8015e8e <__swbuf_r+0x2e>
 8015eca:	2e0a      	cmp	r6, #10
 8015ecc:	d1df      	bne.n	8015e8e <__swbuf_r+0x2e>
 8015ece:	4621      	mov	r1, r4
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	f7ff ff8b 	bl	8015dec <_fflush_r>
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	d0d9      	beq.n	8015e8e <__swbuf_r+0x2e>
 8015eda:	e7d6      	b.n	8015e8a <__swbuf_r+0x2a>

08015edc <__swsetup_r>:
 8015edc:	b538      	push	{r3, r4, r5, lr}
 8015ede:	4b29      	ldr	r3, [pc, #164]	@ (8015f84 <__swsetup_r+0xa8>)
 8015ee0:	4605      	mov	r5, r0
 8015ee2:	6818      	ldr	r0, [r3, #0]
 8015ee4:	460c      	mov	r4, r1
 8015ee6:	b118      	cbz	r0, 8015ef0 <__swsetup_r+0x14>
 8015ee8:	6a03      	ldr	r3, [r0, #32]
 8015eea:	b90b      	cbnz	r3, 8015ef0 <__swsetup_r+0x14>
 8015eec:	f7ff f984 	bl	80151f8 <__sinit>
 8015ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ef4:	0719      	lsls	r1, r3, #28
 8015ef6:	d422      	bmi.n	8015f3e <__swsetup_r+0x62>
 8015ef8:	06da      	lsls	r2, r3, #27
 8015efa:	d407      	bmi.n	8015f0c <__swsetup_r+0x30>
 8015efc:	2209      	movs	r2, #9
 8015efe:	602a      	str	r2, [r5, #0]
 8015f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f04:	81a3      	strh	r3, [r4, #12]
 8015f06:	f04f 30ff 	mov.w	r0, #4294967295
 8015f0a:	e033      	b.n	8015f74 <__swsetup_r+0x98>
 8015f0c:	0758      	lsls	r0, r3, #29
 8015f0e:	d512      	bpl.n	8015f36 <__swsetup_r+0x5a>
 8015f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015f12:	b141      	cbz	r1, 8015f26 <__swsetup_r+0x4a>
 8015f14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015f18:	4299      	cmp	r1, r3
 8015f1a:	d002      	beq.n	8015f22 <__swsetup_r+0x46>
 8015f1c:	4628      	mov	r0, r5
 8015f1e:	f7ff fb11 	bl	8015544 <_free_r>
 8015f22:	2300      	movs	r3, #0
 8015f24:	6363      	str	r3, [r4, #52]	@ 0x34
 8015f26:	89a3      	ldrh	r3, [r4, #12]
 8015f28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015f2c:	81a3      	strh	r3, [r4, #12]
 8015f2e:	2300      	movs	r3, #0
 8015f30:	6063      	str	r3, [r4, #4]
 8015f32:	6923      	ldr	r3, [r4, #16]
 8015f34:	6023      	str	r3, [r4, #0]
 8015f36:	89a3      	ldrh	r3, [r4, #12]
 8015f38:	f043 0308 	orr.w	r3, r3, #8
 8015f3c:	81a3      	strh	r3, [r4, #12]
 8015f3e:	6923      	ldr	r3, [r4, #16]
 8015f40:	b94b      	cbnz	r3, 8015f56 <__swsetup_r+0x7a>
 8015f42:	89a3      	ldrh	r3, [r4, #12]
 8015f44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015f4c:	d003      	beq.n	8015f56 <__swsetup_r+0x7a>
 8015f4e:	4621      	mov	r1, r4
 8015f50:	4628      	mov	r0, r5
 8015f52:	f000 f856 	bl	8016002 <__smakebuf_r>
 8015f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f5a:	f013 0201 	ands.w	r2, r3, #1
 8015f5e:	d00a      	beq.n	8015f76 <__swsetup_r+0x9a>
 8015f60:	2200      	movs	r2, #0
 8015f62:	60a2      	str	r2, [r4, #8]
 8015f64:	6962      	ldr	r2, [r4, #20]
 8015f66:	4252      	negs	r2, r2
 8015f68:	61a2      	str	r2, [r4, #24]
 8015f6a:	6922      	ldr	r2, [r4, #16]
 8015f6c:	b942      	cbnz	r2, 8015f80 <__swsetup_r+0xa4>
 8015f6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015f72:	d1c5      	bne.n	8015f00 <__swsetup_r+0x24>
 8015f74:	bd38      	pop	{r3, r4, r5, pc}
 8015f76:	0799      	lsls	r1, r3, #30
 8015f78:	bf58      	it	pl
 8015f7a:	6962      	ldrpl	r2, [r4, #20]
 8015f7c:	60a2      	str	r2, [r4, #8]
 8015f7e:	e7f4      	b.n	8015f6a <__swsetup_r+0x8e>
 8015f80:	2000      	movs	r0, #0
 8015f82:	e7f7      	b.n	8015f74 <__swsetup_r+0x98>
 8015f84:	2000003c 	.word	0x2000003c

08015f88 <_sbrk_r>:
 8015f88:	b538      	push	{r3, r4, r5, lr}
 8015f8a:	4d06      	ldr	r5, [pc, #24]	@ (8015fa4 <_sbrk_r+0x1c>)
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	4604      	mov	r4, r0
 8015f90:	4608      	mov	r0, r1
 8015f92:	602b      	str	r3, [r5, #0]
 8015f94:	f7ea fea4 	bl	8000ce0 <_sbrk>
 8015f98:	1c43      	adds	r3, r0, #1
 8015f9a:	d102      	bne.n	8015fa2 <_sbrk_r+0x1a>
 8015f9c:	682b      	ldr	r3, [r5, #0]
 8015f9e:	b103      	cbz	r3, 8015fa2 <_sbrk_r+0x1a>
 8015fa0:	6023      	str	r3, [r4, #0]
 8015fa2:	bd38      	pop	{r3, r4, r5, pc}
 8015fa4:	2000c104 	.word	0x2000c104

08015fa8 <abort>:
 8015fa8:	b508      	push	{r3, lr}
 8015faa:	2006      	movs	r0, #6
 8015fac:	f000 f88e 	bl	80160cc <raise>
 8015fb0:	2001      	movs	r0, #1
 8015fb2:	f7ea fe1d 	bl	8000bf0 <_exit>

08015fb6 <__swhatbuf_r>:
 8015fb6:	b570      	push	{r4, r5, r6, lr}
 8015fb8:	460c      	mov	r4, r1
 8015fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fbe:	2900      	cmp	r1, #0
 8015fc0:	b096      	sub	sp, #88	@ 0x58
 8015fc2:	4615      	mov	r5, r2
 8015fc4:	461e      	mov	r6, r3
 8015fc6:	da0d      	bge.n	8015fe4 <__swhatbuf_r+0x2e>
 8015fc8:	89a3      	ldrh	r3, [r4, #12]
 8015fca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015fce:	f04f 0100 	mov.w	r1, #0
 8015fd2:	bf14      	ite	ne
 8015fd4:	2340      	movne	r3, #64	@ 0x40
 8015fd6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015fda:	2000      	movs	r0, #0
 8015fdc:	6031      	str	r1, [r6, #0]
 8015fde:	602b      	str	r3, [r5, #0]
 8015fe0:	b016      	add	sp, #88	@ 0x58
 8015fe2:	bd70      	pop	{r4, r5, r6, pc}
 8015fe4:	466a      	mov	r2, sp
 8015fe6:	f000 f879 	bl	80160dc <_fstat_r>
 8015fea:	2800      	cmp	r0, #0
 8015fec:	dbec      	blt.n	8015fc8 <__swhatbuf_r+0x12>
 8015fee:	9901      	ldr	r1, [sp, #4]
 8015ff0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015ff4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015ff8:	4259      	negs	r1, r3
 8015ffa:	4159      	adcs	r1, r3
 8015ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016000:	e7eb      	b.n	8015fda <__swhatbuf_r+0x24>

08016002 <__smakebuf_r>:
 8016002:	898b      	ldrh	r3, [r1, #12]
 8016004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016006:	079d      	lsls	r5, r3, #30
 8016008:	4606      	mov	r6, r0
 801600a:	460c      	mov	r4, r1
 801600c:	d507      	bpl.n	801601e <__smakebuf_r+0x1c>
 801600e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016012:	6023      	str	r3, [r4, #0]
 8016014:	6123      	str	r3, [r4, #16]
 8016016:	2301      	movs	r3, #1
 8016018:	6163      	str	r3, [r4, #20]
 801601a:	b003      	add	sp, #12
 801601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801601e:	ab01      	add	r3, sp, #4
 8016020:	466a      	mov	r2, sp
 8016022:	f7ff ffc8 	bl	8015fb6 <__swhatbuf_r>
 8016026:	9f00      	ldr	r7, [sp, #0]
 8016028:	4605      	mov	r5, r0
 801602a:	4639      	mov	r1, r7
 801602c:	4630      	mov	r0, r6
 801602e:	f7ff fafd 	bl	801562c <_malloc_r>
 8016032:	b948      	cbnz	r0, 8016048 <__smakebuf_r+0x46>
 8016034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016038:	059a      	lsls	r2, r3, #22
 801603a:	d4ee      	bmi.n	801601a <__smakebuf_r+0x18>
 801603c:	f023 0303 	bic.w	r3, r3, #3
 8016040:	f043 0302 	orr.w	r3, r3, #2
 8016044:	81a3      	strh	r3, [r4, #12]
 8016046:	e7e2      	b.n	801600e <__smakebuf_r+0xc>
 8016048:	89a3      	ldrh	r3, [r4, #12]
 801604a:	6020      	str	r0, [r4, #0]
 801604c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016050:	81a3      	strh	r3, [r4, #12]
 8016052:	9b01      	ldr	r3, [sp, #4]
 8016054:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016058:	b15b      	cbz	r3, 8016072 <__smakebuf_r+0x70>
 801605a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801605e:	4630      	mov	r0, r6
 8016060:	f000 f84e 	bl	8016100 <_isatty_r>
 8016064:	b128      	cbz	r0, 8016072 <__smakebuf_r+0x70>
 8016066:	89a3      	ldrh	r3, [r4, #12]
 8016068:	f023 0303 	bic.w	r3, r3, #3
 801606c:	f043 0301 	orr.w	r3, r3, #1
 8016070:	81a3      	strh	r3, [r4, #12]
 8016072:	89a3      	ldrh	r3, [r4, #12]
 8016074:	431d      	orrs	r5, r3
 8016076:	81a5      	strh	r5, [r4, #12]
 8016078:	e7cf      	b.n	801601a <__smakebuf_r+0x18>

0801607a <_raise_r>:
 801607a:	291f      	cmp	r1, #31
 801607c:	b538      	push	{r3, r4, r5, lr}
 801607e:	4605      	mov	r5, r0
 8016080:	460c      	mov	r4, r1
 8016082:	d904      	bls.n	801608e <_raise_r+0x14>
 8016084:	2316      	movs	r3, #22
 8016086:	6003      	str	r3, [r0, #0]
 8016088:	f04f 30ff 	mov.w	r0, #4294967295
 801608c:	bd38      	pop	{r3, r4, r5, pc}
 801608e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016090:	b112      	cbz	r2, 8016098 <_raise_r+0x1e>
 8016092:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016096:	b94b      	cbnz	r3, 80160ac <_raise_r+0x32>
 8016098:	4628      	mov	r0, r5
 801609a:	f000 f853 	bl	8016144 <_getpid_r>
 801609e:	4622      	mov	r2, r4
 80160a0:	4601      	mov	r1, r0
 80160a2:	4628      	mov	r0, r5
 80160a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160a8:	f000 b83a 	b.w	8016120 <_kill_r>
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d00a      	beq.n	80160c6 <_raise_r+0x4c>
 80160b0:	1c59      	adds	r1, r3, #1
 80160b2:	d103      	bne.n	80160bc <_raise_r+0x42>
 80160b4:	2316      	movs	r3, #22
 80160b6:	6003      	str	r3, [r0, #0]
 80160b8:	2001      	movs	r0, #1
 80160ba:	e7e7      	b.n	801608c <_raise_r+0x12>
 80160bc:	2100      	movs	r1, #0
 80160be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80160c2:	4620      	mov	r0, r4
 80160c4:	4798      	blx	r3
 80160c6:	2000      	movs	r0, #0
 80160c8:	e7e0      	b.n	801608c <_raise_r+0x12>
	...

080160cc <raise>:
 80160cc:	4b02      	ldr	r3, [pc, #8]	@ (80160d8 <raise+0xc>)
 80160ce:	4601      	mov	r1, r0
 80160d0:	6818      	ldr	r0, [r3, #0]
 80160d2:	f7ff bfd2 	b.w	801607a <_raise_r>
 80160d6:	bf00      	nop
 80160d8:	2000003c 	.word	0x2000003c

080160dc <_fstat_r>:
 80160dc:	b538      	push	{r3, r4, r5, lr}
 80160de:	4d07      	ldr	r5, [pc, #28]	@ (80160fc <_fstat_r+0x20>)
 80160e0:	2300      	movs	r3, #0
 80160e2:	4604      	mov	r4, r0
 80160e4:	4608      	mov	r0, r1
 80160e6:	4611      	mov	r1, r2
 80160e8:	602b      	str	r3, [r5, #0]
 80160ea:	f7ea fdd1 	bl	8000c90 <_fstat>
 80160ee:	1c43      	adds	r3, r0, #1
 80160f0:	d102      	bne.n	80160f8 <_fstat_r+0x1c>
 80160f2:	682b      	ldr	r3, [r5, #0]
 80160f4:	b103      	cbz	r3, 80160f8 <_fstat_r+0x1c>
 80160f6:	6023      	str	r3, [r4, #0]
 80160f8:	bd38      	pop	{r3, r4, r5, pc}
 80160fa:	bf00      	nop
 80160fc:	2000c104 	.word	0x2000c104

08016100 <_isatty_r>:
 8016100:	b538      	push	{r3, r4, r5, lr}
 8016102:	4d06      	ldr	r5, [pc, #24]	@ (801611c <_isatty_r+0x1c>)
 8016104:	2300      	movs	r3, #0
 8016106:	4604      	mov	r4, r0
 8016108:	4608      	mov	r0, r1
 801610a:	602b      	str	r3, [r5, #0]
 801610c:	f7ea fdd0 	bl	8000cb0 <_isatty>
 8016110:	1c43      	adds	r3, r0, #1
 8016112:	d102      	bne.n	801611a <_isatty_r+0x1a>
 8016114:	682b      	ldr	r3, [r5, #0]
 8016116:	b103      	cbz	r3, 801611a <_isatty_r+0x1a>
 8016118:	6023      	str	r3, [r4, #0]
 801611a:	bd38      	pop	{r3, r4, r5, pc}
 801611c:	2000c104 	.word	0x2000c104

08016120 <_kill_r>:
 8016120:	b538      	push	{r3, r4, r5, lr}
 8016122:	4d07      	ldr	r5, [pc, #28]	@ (8016140 <_kill_r+0x20>)
 8016124:	2300      	movs	r3, #0
 8016126:	4604      	mov	r4, r0
 8016128:	4608      	mov	r0, r1
 801612a:	4611      	mov	r1, r2
 801612c:	602b      	str	r3, [r5, #0]
 801612e:	f7ea fd4d 	bl	8000bcc <_kill>
 8016132:	1c43      	adds	r3, r0, #1
 8016134:	d102      	bne.n	801613c <_kill_r+0x1c>
 8016136:	682b      	ldr	r3, [r5, #0]
 8016138:	b103      	cbz	r3, 801613c <_kill_r+0x1c>
 801613a:	6023      	str	r3, [r4, #0]
 801613c:	bd38      	pop	{r3, r4, r5, pc}
 801613e:	bf00      	nop
 8016140:	2000c104 	.word	0x2000c104

08016144 <_getpid_r>:
 8016144:	f7ea bd3a 	b.w	8000bbc <_getpid>

08016148 <_init>:
 8016148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801614a:	bf00      	nop
 801614c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801614e:	bc08      	pop	{r3}
 8016150:	469e      	mov	lr, r3
 8016152:	4770      	bx	lr

08016154 <_fini>:
 8016154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016156:	bf00      	nop
 8016158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801615a:	bc08      	pop	{r3}
 801615c:	469e      	mov	lr, r3
 801615e:	4770      	bx	lr
