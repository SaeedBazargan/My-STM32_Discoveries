
UDP_Server_Netconn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003690  08016678  08016678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019d08  08019d08  0001b1cc  2**0
                  CONTENTS
  4 .ARM          00000008  08019d08  08019d08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019d10  08019d10  0001b1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019d10  08019d10  0001ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019d14  08019d14  0001ad14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08019d18  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08019da4  0001b08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08019e44  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c048  200001cc  08019ee4  0001b1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000c214  08019ee4  0001b214  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001b1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002df4a  00000000  00000000  0001b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000077bc  00000000  00000000  00049146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002130  00000000  00000000  00050908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a2f  00000000  00000000  00052a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000372ac  00000000  00000000  00054467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00035d18  00000000  00000000  0008b713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010fd38  00000000  00000000  000c142b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d1163  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000091d0  00000000  00000000  001d11a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000d5  00000000  00000000  001da378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016660 	.word	0x08016660

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08016660 	.word	0x08016660

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200001e8 	.word	0x200001e8
 80005d0:	20000288 	.word	0x20000288

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fc6c 	bl	8000eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f81b 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f887 	bl	80006f4 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <main+0x3c>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f852 	bl	80046a6 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <main+0x40>)
 8000606:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000608:	f004 f836 	bl	8004678 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0x38>
 8000610:	08016684 	.word	0x08016684
 8000614:	20000488 	.word	0x20000488

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f014 ff7f 	bl	801552a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <SystemClock_Config+0xd4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a2a      	ldr	r2, [pc, #168]	@ (80006ec <SystemClock_Config+0xd4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xd4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <SystemClock_Config+0xd8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <SystemClock_Config+0xd8>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000680:	2319      	movs	r3, #25
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000684:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f9be 	bl	8002a18 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a2:	f000 f881 	bl	80007a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a6:	f002 f967 	bl	8002978 <HAL_PWREx_EnableOverDrive>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b0:	f000 f87a 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2107      	movs	r1, #7
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fc44 	bl	8002f60 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006de:	f000 f863 	bl	80007a8 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_GPIO_Init+0x74>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_GPIO_Init+0x74>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_GPIO_Init+0x74>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000774:	f003 f8cc 	bl	8003910 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  udpserver_init();
 8000778:	f000 fa5a 	bl	8000c30 <udpserver_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f003 ffea 	bl	8004756 <osDelay>
 8000782:	e7fb      	b.n	800077c <StartDefaultTask+0x10>

08000784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d101      	bne.n	800079a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000796:	f000 fb9b 	bl	8000ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40001000 	.word	0x40001000

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <Error_Handler+0x8>

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <HAL_MspInit+0x4c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	210f      	movs	r1, #15
 80007ee:	f06f 0001 	mvn.w	r0, #1
 80007f2:	f000 fc75 	bl	80010e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	@ 0x38
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000814:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <HAL_InitTick+0xe0>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	4a32      	ldr	r2, [pc, #200]	@ (80008e4 <HAL_InitTick+0xe0>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000820:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <HAL_InitTick+0xe0>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800082c:	f107 0210 	add.w	r2, r7, #16
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fd64 	bl	8003304 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000842:	2b00      	cmp	r3, #0
 8000844:	d103      	bne.n	800084e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000846:	f002 fd49 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 800084a:	6378      	str	r0, [r7, #52]	@ 0x34
 800084c:	e004      	b.n	8000858 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800084e:	f002 fd45 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8000852:	4603      	mov	r3, r0
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800085a:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <HAL_InitTick+0xe4>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	0c9b      	lsrs	r3, r3, #18
 8000862:	3b01      	subs	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <HAL_InitTick+0xe8>)
 8000868:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <HAL_InitTick+0xec>)
 800086a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <HAL_InitTick+0xe8>)
 800086e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000872:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000874:	4a1d      	ldr	r2, [pc, #116]	@ (80008ec <HAL_InitTick+0xe8>)
 8000876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000878:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800087a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <HAL_InitTick+0xe8>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <HAL_InitTick+0xe8>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <HAL_InitTick+0xe8>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800088c:	4817      	ldr	r0, [pc, #92]	@ (80008ec <HAL_InitTick+0xe8>)
 800088e:	f002 fd6b 	bl	8003368 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000898:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800089c:	2b00      	cmp	r3, #0
 800089e:	d11b      	bne.n	80008d8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008a0:	4812      	ldr	r0, [pc, #72]	@ (80008ec <HAL_InitTick+0xe8>)
 80008a2:	f002 fdc3 	bl	800342c <HAL_TIM_Base_Start_IT>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b4:	2036      	movs	r0, #54	@ 0x36
 80008b6:	f000 fc2f 	bl	8001118 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d808      	bhi.n	80008d2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2036      	movs	r0, #54	@ 0x36
 80008c6:	f000 fc0b 	bl	80010e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_InitTick+0xf0>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e002      	b.n	80008d8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3738      	adds	r7, #56	@ 0x38
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	2000048c 	.word	0x2000048c
 80008f0:	40001000 	.word	0x40001000
 80008f4:	20000004 	.word	0x20000004

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <TIM6_DAC_IRQHandler+0x10>)
 8000936:	f002 fdf1 	bl	800351c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000048c 	.word	0x2000048c

08000944 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <ETH_IRQHandler+0x10>)
 800094a:	f000 ff81 	bl	8001850 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20004fc4 	.word	0x20004fc4

08000958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return 1;
 800095c:	2301      	movs	r3, #1
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <_kill>:

int _kill(int pid, int sig)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000972:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <_kill+0x20>)
 8000974:	2216      	movs	r2, #22
 8000976:	601a      	str	r2, [r3, #0]
  return -1;
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	2000c204 	.word	0x2000c204

0800098c <_exit>:

void _exit (int status)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ffe5 	bl	8000968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <_exit+0x12>

080009a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e00a      	b.n	80009ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b4:	f3af 8000 	nop.w
 80009b8:	4601      	mov	r1, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	60ba      	str	r2, [r7, #8]
 80009c0:	b2ca      	uxtb	r2, r1
 80009c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbf0      	blt.n	80009b4 <_read+0x12>
  }

  return len;
 80009d2:	687b      	ldr	r3, [r7, #4]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e009      	b.n	8000a02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1c5a      	adds	r2, r3, #1
 80009f2:	60ba      	str	r2, [r7, #8]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	3301      	adds	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dbf1      	blt.n	80009ee <_write+0x12>
  }
  return len;
 8000a0a:	687b      	ldr	r3, [r7, #4]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_close>:

int _close(int file)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a3c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_isatty>:

int _isatty(int file)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b085      	sub	sp, #20
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b087      	sub	sp, #28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d205      	bcs.n	8000ab8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <_sbrk+0x6c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	20050000 	.word	0x20050000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	200004d8 	.word	0x200004d8
 8000ae4:	2000c218 	.word	0x2000c218
 8000ae8:	2000c204 	.word	0x2000c204

08000aec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <udp_thread>:
static char msg[MSG_LEN];
static char responseMsg[MSG_LEN + 50];

// UDP Server thread
static void udp_thread(void *arg)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    err_t err;
    struct pbuf *responseBuf;

    // Create a new UDP connection
    conn = netconn_new(NETCONN_UDP);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2020      	movs	r0, #32
 8000b1e:	f006 fedb 	bl	80078d8 <netconn_new_with_proto_and_callback>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a3c      	ldr	r2, [pc, #240]	@ (8000c18 <udp_thread+0x108>)
 8000b26:	6013      	str	r3, [r2, #0]
    if (conn == NULL) {
 8000b28:	4b3b      	ldr	r3, [pc, #236]	@ (8000c18 <udp_thread+0x108>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d06f      	beq.n	8000c10 <udp_thread+0x100>
        return; // Exit if connection creation fails
    }

    // Bind the connection to port 7
    err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8000b30:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <udp_thread+0x108>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2207      	movs	r2, #7
 8000b36:	4939      	ldr	r1, [pc, #228]	@ (8000c1c <udp_thread+0x10c>)
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 ff87 	bl	8007a4c <netconn_bind>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 8000b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <udp_thread+0x46>
        netconn_delete(conn);
 8000b4a:	4b33      	ldr	r3, [pc, #204]	@ (8000c18 <udp_thread+0x108>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f006 ff60 	bl	8007a14 <netconn_delete>
        return; // Exit if binding fails
 8000b54:	e05d      	b.n	8000c12 <udp_thread+0x102>
    }

    // Main server loop
    while (1) {
        // Wait to receive data
        err = netconn_recv(conn, &buf);
 8000b56:	4b30      	ldr	r3, [pc, #192]	@ (8000c18 <udp_thread+0x108>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4931      	ldr	r1, [pc, #196]	@ (8000c20 <udp_thread+0x110>)
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 f961 	bl	8007e24 <netconn_recv>
 8000b62:	4603      	mov	r3, r0
 8000b64:	77fb      	strb	r3, [r7, #31]
        if (err == ERR_OK) {
 8000b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f3      	bne.n	8000b56 <udp_thread+0x46>
            // Extract client information
            ip_addr_t *addr = netbuf_fromaddr(buf);   // Client IP address
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c20 <udp_thread+0x110>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3308      	adds	r3, #8
 8000b74:	61bb      	str	r3, [r7, #24]
            unsigned short port = netbuf_fromport(buf); // Client port
 8000b76:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <udp_thread+0x110>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	899b      	ldrh	r3, [r3, #12]
 8000b7c:	82fb      	strh	r3, [r7, #22]

            // Copy client data to msg buffer
            strncpy(msg, buf->p->payload, MSG_LEN);
 8000b7e:	4b28      	ldr	r3, [pc, #160]	@ (8000c20 <udp_thread+0x110>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2264      	movs	r2, #100	@ 0x64
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4826      	ldr	r0, [pc, #152]	@ (8000c24 <udp_thread+0x114>)
 8000b8c:	f014 fcd5 	bl	801553a <strncpy>
            msg[MSG_LEN - 1] = '\0'; // Ensure null termination
 8000b90:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <udp_thread+0x114>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

            // Format the response message
            int responseLen = snprintf(responseMsg, sizeof(responseMsg), "\"%s\" was sent by the Client\n", msg);
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <udp_thread+0x114>)
 8000b9a:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <udp_thread+0x118>)
 8000b9c:	2196      	movs	r1, #150	@ 0x96
 8000b9e:	4823      	ldr	r0, [pc, #140]	@ (8000c2c <udp_thread+0x11c>)
 8000ba0:	f014 fc22 	bl	80153e8 <sniprintf>
 8000ba4:	6138      	str	r0, [r7, #16]

            // Allocate memory for the response buffer
            responseBuf = pbuf_alloc(PBUF_TRANSPORT, responseLen, PBUF_RAM);
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000bae:	4619      	mov	r1, r3
 8000bb0:	2036      	movs	r0, #54	@ 0x36
 8000bb2:	f00a f89d 	bl	800acf0 <pbuf_alloc>
 8000bb6:	60f8      	str	r0, [r7, #12]
            if (responseBuf != NULL) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d022      	beq.n	8000c04 <udp_thread+0xf4>
                // Copy response message into the buffer
                pbuf_take(responseBuf, responseMsg, responseLen);
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4919      	ldr	r1, [pc, #100]	@ (8000c2c <udp_thread+0x11c>)
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f00a fdee 	bl	800b7a8 <pbuf_take>

                // Attach the response buffer to the network buffer
                buf->p = responseBuf;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <udp_thread+0x110>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	601a      	str	r2, [r3, #0]

                // Send response to the client
                netconn_connect(conn, addr, port);
 8000bd4:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <udp_thread+0x108>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	8afa      	ldrh	r2, [r7, #22]
 8000bda:	69b9      	ldr	r1, [r7, #24]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f006 ff6d 	bl	8007abc <netconn_connect>
                netconn_send(conn, buf);
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <udp_thread+0x108>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <udp_thread+0x110>)
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f007 f993 	bl	8007f18 <netconn_send>

                // Clean up resources
                pbuf_free(responseBuf);
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f00a fb60 	bl	800b2b8 <pbuf_free>
                netbuf_delete(buf);
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <udp_thread+0x110>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f008 fd95 	bl	800972c <netbuf_delete>
 8000c02:	e7a8      	b.n	8000b56 <udp_thread+0x46>
            } else {
                // Clean up resources if response buffer allocation fails
                netbuf_delete(buf);
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <udp_thread+0x110>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f008 fd8f 	bl	800972c <netbuf_delete>
        err = netconn_recv(conn, &buf);
 8000c0e:	e7a2      	b.n	8000b56 <udp_thread+0x46>
        return; // Exit if connection creation fails
 8000c10:	bf00      	nop
            }
        }
    }
}
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200004dc 	.word	0x200004dc
 8000c1c:	08019c0c 	.word	0x08019c0c
 8000c20:	200004e0 	.word	0x200004e0
 8000c24:	200004e4 	.word	0x200004e4
 8000c28:	080166a0 	.word	0x080166a0
 8000c2c:	20000548 	.word	0x20000548

08000c30 <udpserver_init>:

// Initialize UDP server
void udpserver_init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af02      	add	r7, sp, #8
    sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8000c36:	2300      	movs	r3, #0
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4903      	ldr	r1, [pc, #12]	@ (8000c50 <udpserver_init+0x20>)
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <udpserver_init+0x24>)
 8000c44:	f014 fa7a 	bl	801513c <sys_thread_new>
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08000b11 	.word	0x08000b11
 8000c54:	080166c0 	.word	0x080166c0

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5c:	f7ff ff46 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f014 fd07 	bl	8015698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fca3 	bl	80005d4 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000c9c:	08019d18 	.word	0x08019d18
  ldr r2, =_sbss
 8000ca0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000ca4:	2000c214 	.word	0x2000c214

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>

08000caa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00b      	beq.n	8000cd2 <LAN8742_RegisterBusIO+0x28>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <LAN8742_RegisterBusIO+0x28>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <LAN8742_RegisterBusIO+0x28>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e014      	b.n	8000d02 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d139      	bne.n	8000d9e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e01c      	b.n	8000d7e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f107 020c 	add.w	r2, r7, #12
 8000d4c:	2112      	movs	r1, #18
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	4798      	blx	r3
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	da03      	bge.n	8000d60 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d58:	f06f 0304 	mvn.w	r3, #4
 8000d5c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d5e:	e00b      	b.n	8000d78 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d105      	bne.n	8000d78 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
         break;
 8000d76:	e005      	b.n	8000d84 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b1f      	cmp	r3, #31
 8000d82:	d9df      	bls.n	8000d44 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b1f      	cmp	r3, #31
 8000d8a:	d902      	bls.n	8000d92 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d8c:	f06f 0302 	mvn.w	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 }
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6810      	ldr	r0, [r2, #0]
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4798      	blx	r3
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	da02      	bge.n	8000dd0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dca:	f06f 0304 	mvn.w	r3, #4
 8000dce:	e06e      	b.n	8000eae <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6810      	ldr	r0, [r2, #0]
 8000dd8:	f107 020c 	add.w	r2, r7, #12
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4798      	blx	r3
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da02      	bge.n	8000dec <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000de6:	f06f 0304 	mvn.w	r3, #4
 8000dea:	e060      	b.n	8000eae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e059      	b.n	8000eae <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6810      	ldr	r0, [r2, #0]
 8000e02:	f107 020c 	add.w	r2, r7, #12
 8000e06:	2100      	movs	r1, #0
 8000e08:	4798      	blx	r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da02      	bge.n	8000e16 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e10:	f06f 0304 	mvn.w	r3, #4
 8000e14:	e04b      	b.n	8000eae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d11b      	bne.n	8000e58 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <LAN8742_GetLinkState+0x90>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e34:	2302      	movs	r3, #2
 8000e36:	e03a      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e033      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e50:	2304      	movs	r3, #4
 8000e52:	e02c      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e54:	2305      	movs	r3, #5
 8000e56:	e02a      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6810      	ldr	r0, [r2, #0]
 8000e60:	f107 020c 	add.w	r2, r7, #12
 8000e64:	211f      	movs	r1, #31
 8000e66:	4798      	blx	r3
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	da02      	bge.n	8000e74 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e6e:	f06f 0304 	mvn.w	r3, #4
 8000e72:	e01c      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e015      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f003 031c 	and.w	r3, r3, #28
 8000e88:	2b18      	cmp	r3, #24
 8000e8a:	d101      	bne.n	8000e90 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e00e      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 031c 	and.w	r3, r3, #28
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d101      	bne.n	8000e9e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e007      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f003 031c 	and.w	r3, r3, #28
 8000ea4:	2b14      	cmp	r3, #20
 8000ea6:	d101      	bne.n	8000eac <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	e000      	b.n	8000eae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000eac:	2305      	movs	r3, #5
    }
  }
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f000 f905 	bl	80010ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec0:	200f      	movs	r0, #15
 8000ec2:	f7ff fc9f 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec6:	f7ff fc75 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	200005e0 	.word	0x200005e0

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200005e0 	.word	0x200005e0

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_GetREVID+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0c1b      	lsrs	r3, r3, #16
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e0042000 	.word	0xe0042000

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0000 	.word	0x05fa0000

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff4c 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f2:	f7ff ff61 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffb1 	bl	8001064 <NVIC_EncodePriority>
 8001102:	4602      	mov	r2, r0
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff80 	bl	8001010 <__NVIC_SetPriority>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff54 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e086      	b.n	8001254 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800114c:	2b00      	cmp	r3, #0
 800114e:	d106      	bne.n	800115e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2223      	movs	r2, #35	@ 0x23
 8001154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f003 f833 	bl	80041c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b3f      	ldr	r3, [pc, #252]	@ (800125c <HAL_ETH_Init+0x128>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a3e      	ldr	r2, [pc, #248]	@ (800125c <HAL_ETH_Init+0x128>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b3c      	ldr	r3, [pc, #240]	@ (800125c <HAL_ETH_Init+0x128>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001176:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <HAL_ETH_Init+0x12c>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a39      	ldr	r2, [pc, #228]	@ (8001260 <HAL_ETH_Init+0x12c>)
 800117c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001180:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001182:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <HAL_ETH_Init+0x12c>)
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4935      	ldr	r1, [pc, #212]	@ (8001260 <HAL_ETH_Init+0x12c>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_ETH_Init+0x12c>)
 8001192:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ac:	f7ff fea4 	bl	8000ef8 <HAL_GetTick>
 80011b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011b2:	e011      	b.n	80011d8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011b4:	f7ff fea0 	bl	8000ef8 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011c2:	d909      	bls.n	80011d8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2204      	movs	r2, #4
 80011c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	22e0      	movs	r2, #224	@ 0xe0
 80011d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e03d      	b.n	8001254 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1e4      	bne.n	80011b4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 ff5c 	bl	80020a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f001 f807 	bl	8002204 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f001 f85d 	bl	80022b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	461a      	mov	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 ffc5 	bl	8002194 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001218:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_ETH_Init+0x130>)
 8001228:	430b      	orrs	r3, r1
 800122a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800123e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2210      	movs	r2, #16
 800124e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40013800 	.word	0x40013800
 8001264:	00020060 	.word	0x00020060

08001268 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001276:	2b10      	cmp	r3, #16
 8001278:	d15f      	bne.n	800133a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2223      	movs	r2, #35	@ 0x23
 800127e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2204      	movs	r2, #4
 800128c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f9f6 	bl	8001680 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fe37 	bl	8000f10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012c0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012d8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fd80 	bl	8001de0 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0208 	orr.w	r2, r2, #8
 80012ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff fe09 	bl	8000f10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0204 	orr.w	r2, r2, #4
 8001314:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800131e:	69d9      	ldr	r1, [r3, #28]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <HAL_ETH_Start_IT+0xdc>)
 8001326:	430b      	orrs	r3, r1
 8001328:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800132c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2223      	movs	r2, #35	@ 0x23
 8001332:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
  }
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0001a0c1 	.word	0x0001a0c1

08001348 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001356:	2b23      	cmp	r3, #35	@ 0x23
 8001358:	d16e      	bne.n	8001438 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2223      	movs	r2, #35	@ 0x23
 800135e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800136a:	69d9      	ldr	r1, [r3, #28]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <HAL_ETH_Stop_IT+0xfc>)
 8001372:	400b      	ands	r3, r1
 8001374:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001378:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800138c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001390:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	f023 0302 	bic.w	r3, r3, #2
 80013a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013a8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0204 	bic.w	r2, r2, #4
 80013b8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff fda4 	bl	8000f10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fd05 	bl	8001de0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0208 	bic.w	r2, r2, #8
 80013e4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fd8e 	bl	8000f10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e00e      	b.n	8001420 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	3212      	adds	r2, #18
 8001408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d9ed      	bls.n	8001402 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2210      	movs	r2, #16
 8001430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e000      	b.n	800143a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
  }
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	fffe5f3e 	.word	0xfffe5f3e

08001448 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e045      	b.n	80014f8 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001472:	2b23      	cmp	r3, #35	@ 0x23
 8001474:	d13f      	bne.n	80014f6 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800147e:	2201      	movs	r2, #1
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 ff86 	bl	8002394 <ETH_Prepare_Tx_Descriptors>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001494:	f043 0202 	orr.w	r2, r3, #2
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e02a      	b.n	80014f8 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d904      	bls.n	80014c4 <HAL_ETH_Transmit_IT+0x7c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	1f1a      	subs	r2, r3, #4
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00d      	beq.n	80014f2 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014de:	461a      	mov	r2, r3
 80014e0:	2304      	movs	r3, #4
 80014e2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ec:	461a      	mov	r2, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0a4      	b.n	8001676 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001532:	2b23      	cmp	r3, #35	@ 0x23
 8001534:	d001      	beq.n	800153a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e09d      	b.n	8001676 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	3212      	adds	r2, #18
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001550:	f1c3 0304 	rsb	r3, r3, #4
 8001554:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001556:	e066      	b.n	8001626 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <HAL_ETH_ReadData+0x88>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001584:	2b00      	cmp	r3, #0
 8001586:	d03c      	beq.n	8001602 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80015aa:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f002 ff9d 	bl	8004520 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	441a      	add	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d902      	bls.n	8001614 <HAL_ETH_ReadData+0x114>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b04      	subs	r3, #4
 8001612:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	3212      	adds	r2, #18
 800161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800162a:	2b00      	cmp	r3, #0
 800162c:	db06      	blt.n	800163c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	429a      	cmp	r2, r3
 8001634:	d202      	bcs.n	800163c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001636:	7cfb      	ldrb	r3, [r7, #19]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d08d      	beq.n	8001558 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	441a      	add	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f815 	bl	8001680 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800165c:	7cfb      	ldrb	r3, [r7, #19]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800168c:	2301      	movs	r3, #1
 800168e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001694:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	3212      	adds	r2, #18
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016a6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016a8:	e042      	b.n	8001730 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d112      	bne.n	80016d8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 ff02 	bl	80044c0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	74fb      	strb	r3, [r7, #19]
 80016c6:	e007      	b.n	80016d8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	461a      	mov	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	461a      	mov	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80016d8:	7cfb      	ldrb	r3, [r7, #19]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d028      	beq.n	8001730 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d106      	bne.n	80016f4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <ETH_UpdateDescriptor+0x104>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	6053      	str	r3, [r2, #4]
 80016f2:	e005      	b.n	8001700 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3301      	adds	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d902      	bls.n	800171e <ETH_UpdateDescriptor+0x9e>
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	3b04      	subs	r3, #4
 800171c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	3212      	adds	r2, #18
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	617b      	str	r3, [r7, #20]
      desccount--;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	3b01      	subs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <ETH_UpdateDescriptor+0xbc>
 8001736:	7cfb      	ldrb	r3, [r7, #19]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1b6      	bne.n	80016aa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	429a      	cmp	r2, r3
 8001744:	d01a      	beq.n	800177c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001750:	f3bf 8f5f 	dmb	sy
}
 8001754:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	18ca      	adds	r2, r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800176e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	80004000 	.word	0x80004000

08001788 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3318      	adds	r3, #24
 8001794:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80017a6:	e047      	b.n	8001838 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	3304      	adds	r3, #4
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10a      	bne.n	80017d8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	3301      	adds	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d902      	bls.n	80017d4 <HAL_ETH_ReleaseTxPacket+0x4c>
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3b04      	subs	r3, #4
 80017d2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80017d8:	7bbb      	ldrb	r3, [r7, #14]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d02c      	beq.n	8001838 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68d9      	ldr	r1, [r3, #12]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db1f      	blt.n	8001834 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	3304      	adds	r3, #4
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f002 fecf 	bl	80045a4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	3304      	adds	r3, #4
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	3301      	adds	r3, #1
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d902      	bls.n	8001826 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	3b04      	subs	r3, #4
 8001824:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001832:	e001      	b.n	8001838 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HAL_ETH_ReleaseTxPacket+0xbc>
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1b1      	bne.n	80017a8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001878:	4b4b      	ldr	r3, [pc, #300]	@ (80019a8 <HAL_ETH_IRQHandler+0x158>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00e      	beq.n	80018a6 <HAL_ETH_IRQHandler+0x56>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189a:	461a      	mov	r2, r3
 800189c:	4b43      	ldr	r3, [pc, #268]	@ (80019ac <HAL_ETH_IRQHandler+0x15c>)
 800189e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f002 f9a3 	bl	8003bec <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00f      	beq.n	80018d0 <HAL_ETH_IRQHandler+0x80>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c2:	461a      	mov	r2, r3
 80018c4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80018c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f002 f99e 	bl	8003c0c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d042      	beq.n	8001960 <HAL_ETH_IRQHandler+0x110>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d03d      	beq.n	8001960 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ea:	f043 0208 	orr.w	r2, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01a      	beq.n	8001934 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	4b29      	ldr	r3, [pc, #164]	@ (80019b0 <HAL_ETH_IRQHandler+0x160>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001924:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001928:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	22e0      	movs	r2, #224	@ 0xe0
 800192e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001932:	e012      	b.n	800195a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001952:	461a      	mov	r2, r3
 8001954:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001958:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f002 f966 	bl	8003c2c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00e      	beq.n	8001988 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f81a 	bl	80019b4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001992:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_ETH_IRQHandler+0x158>)
 8001994:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001998:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f814 	bl	80019c8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013c00 	.word	0x40013c00
 80019ac:	00010040 	.word	0x00010040
 80019b0:	007e2000 	.word	0x007e2000

080019b4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 031c 	and.w	r3, r3, #28
 80019f8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	02db      	lsls	r3, r3, #11
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f023 0302 	bic.w	r3, r3, #2
 8001a1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a2c:	f7ff fa64 	bl	8000ef8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a32:	e00d      	b.n	8001a50 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a34:	f7ff fa60 	bl	8000ef8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a42:	d301      	bcc.n	8001a48 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e010      	b.n	8001a6a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ec      	bne.n	8001a34 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 031c 	and.w	r3, r3, #28
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	02db      	lsls	r3, r3, #11
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	019b      	lsls	r3, r3, #6
 8001aa0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001acc:	f7ff fa14 	bl	8000ef8 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad2:	e00d      	b.n	8001af0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ad4:	f7ff fa10 	bl	8000ef8 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae2:	d301      	bcc.n	8001ae8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e009      	b.n	8001afc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ec      	bne.n	8001ad4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0e6      	b.n	8001ce6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf14      	ite	ne
 8001c0a:	2301      	movne	r3, #1
 8001c0c:	2300      	moveq	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf14      	ite	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	2300      	moveq	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf14      	ite	ne
 8001cd6:	2301      	movne	r3, #1
 8001cd8:	2300      	moveq	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00b      	b.n	8001d1e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d105      	bne.n	8001d1c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d10:	6839      	ldr	r1, [r7, #0]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f88a 	bl	8001e2c <ETH_SetMACConfig>

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
  }
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f023 031c 	bic.w	r3, r3, #28
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d40:	f001 fac0 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8001d44:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <HAL_ETH_SetMDIOClockRange+0x74>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d804      	bhi.n	8001d58 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e019      	b.n	8001d8c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4a11      	ldr	r2, [pc, #68]	@ (8001da0 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d204      	bcs.n	8001d6a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f043 030c 	orr.w	r3, r3, #12
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	e010      	b.n	8001d8c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d90c      	bls.n	8001d8c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d804      	bhi.n	8001d84 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e003      	b.n	8001d8c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	611a      	str	r2, [r3, #16]
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	02160ebf 	.word	0x02160ebf
 8001da0:	03938700 	.word	0x03938700
 8001da4:	05f5e0ff 	.word	0x05f5e0ff
 8001da8:	08f0d17f 	.word	0x08f0d17f

08001dac <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e02:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff f87d 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e20:	6193      	str	r3, [r2, #24]
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4b53      	ldr	r3, [pc, #332]	@ (8001f90 <ETH_SetMACConfig+0x164>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7b9b      	ldrb	r3, [r3, #14]
 8001e4a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	7c12      	ldrb	r2, [r2, #16]
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d102      	bne.n	8001e5a <ETH_SetMACConfig+0x2e>
 8001e54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e58:	e000      	b.n	8001e5c <ETH_SetMACConfig+0x30>
 8001e5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	7c52      	ldrb	r2, [r2, #17]
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d102      	bne.n	8001e6c <ETH_SetMACConfig+0x40>
 8001e66:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e6a:	e000      	b.n	8001e6e <ETH_SetMACConfig+0x42>
 8001e6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e6e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	7fdb      	ldrb	r3, [r3, #31]
 8001e7a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e7c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	7f92      	ldrb	r2, [r2, #30]
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d102      	bne.n	8001e92 <ETH_SetMACConfig+0x66>
 8001e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e90:	e000      	b.n	8001e94 <ETH_SetMACConfig+0x68>
 8001e92:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	7f1b      	ldrb	r3, [r3, #28]
 8001e9a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e9c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ea2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001eaa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d102      	bne.n	8001ebc <ETH_SetMACConfig+0x90>
 8001eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eba:	e000      	b.n	8001ebe <ETH_SetMACConfig+0x92>
 8001ebc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ebe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	7bdb      	ldrb	r3, [r3, #15]
 8001ec4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ec6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ecc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ed4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff f80e 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d101      	bne.n	8001f22 <ETH_SetMACConfig+0xf6>
 8001f1e:	2280      	movs	r2, #128	@ 0x80
 8001f20:	e000      	b.n	8001f24 <ETH_SetMACConfig+0xf8>
 8001f22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f32:	2a01      	cmp	r2, #1
 8001f34:	d101      	bne.n	8001f3a <ETH_SetMACConfig+0x10e>
 8001f36:	2208      	movs	r2, #8
 8001f38:	e000      	b.n	8001f3c <ETH_SetMACConfig+0x110>
 8001f3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f44:	2a01      	cmp	r2, #1
 8001f46:	d101      	bne.n	8001f4c <ETH_SetMACConfig+0x120>
 8001f48:	2204      	movs	r2, #4
 8001f4a:	e000      	b.n	8001f4e <ETH_SetMACConfig+0x122>
 8001f4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f56:	2a01      	cmp	r2, #1
 8001f58:	d101      	bne.n	8001f5e <ETH_SetMACConfig+0x132>
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	e000      	b.n	8001f60 <ETH_SetMACConfig+0x134>
 8001f5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f60:	4313      	orrs	r3, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7fe ffc9 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	fd20810f 	.word	0xfd20810f

08001f94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <ETH_SetDMAConfig+0x110>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7b1b      	ldrb	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <ETH_SetDMAConfig+0x2c>
 8001fba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fbe:	e000      	b.n	8001fc2 <ETH_SetDMAConfig+0x2e>
 8001fc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7b5b      	ldrb	r3, [r3, #13]
 8001fc6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fc8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	7f52      	ldrb	r2, [r2, #29]
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d102      	bne.n	8001fd8 <ETH_SetDMAConfig+0x44>
 8001fd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001fd6:	e000      	b.n	8001fda <ETH_SetDMAConfig+0x46>
 8001fd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	7b9b      	ldrb	r3, [r3, #14]
 8001fe0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fe2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7f1b      	ldrb	r3, [r3, #28]
 8001fee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ff0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	7f9b      	ldrb	r3, [r3, #30]
 8001ff6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ff8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ffe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002006:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002008:	4313      	orrs	r3, r2
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002018:	461a      	mov	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800202a:	2001      	movs	r0, #1
 800202c:	f7fe ff70 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002038:	461a      	mov	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	791b      	ldrb	r3, [r3, #4]
 8002042:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002048:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800204e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002054:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800205c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800205e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002066:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800206c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002076:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800207a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002088:	2001      	movs	r0, #1
 800208a:	f7fe ff41 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	f8de3f23 	.word	0xf8de3f23

080020a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0a6      	sub	sp, #152	@ 0x98
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020bc:	2300      	movs	r3, #0
 80020be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80020d8:	2301      	movs	r3, #1
 80020da:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020ea:	2300      	movs	r3, #0
 80020ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002110:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002114:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002116:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800211a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002122:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe7f 	bl	8001e2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800212e:	2301      	movs	r3, #1
 8002130:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002132:	2301      	movs	r3, #1
 8002134:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800213c:	2301      	movs	r3, #1
 800213e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800215a:	2301      	movs	r3, #1
 800215c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800215e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002162:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002164:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002168:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800216a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800216e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002170:	2301      	movs	r3, #1
 8002172:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002176:	2300      	movs	r3, #0
 8002178:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff05 	bl	8001f94 <ETH_SetDMAConfig>
}
 800218a:	bf00      	nop
 800218c:	3798      	adds	r7, #152	@ 0x98
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3305      	adds	r3, #5
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	3204      	adds	r2, #4
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <ETH_MACAddressConfig+0x68>)
 80021b6:	4413      	add	r3, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3303      	adds	r3, #3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	061a      	lsls	r2, r3, #24
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3302      	adds	r3, #2
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3301      	adds	r3, #1
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	4313      	orrs	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <ETH_MACAddressConfig+0x6c>)
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6013      	str	r3, [r2, #0]
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40028040 	.word	0x40028040
 8002200:	40028044 	.word	0x40028044

08002204 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e03e      	b.n	8002290 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68d9      	ldr	r1, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	3206      	adds	r2, #6
 8002244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d80c      	bhi.n	8002274 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68d9      	ldr	r1, [r3, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	e004      	b.n	800227e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3301      	adds	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d9bd      	bls.n	8002212 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a8:	611a      	str	r2, [r3, #16]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e048      	b.n	8002356 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6919      	ldr	r1, [r3, #16]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002300:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	3212      	adds	r2, #18
 8002322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d80c      	bhi.n	8002346 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e004      	b.n	8002350 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d9b3      	bls.n	80022c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002386:	60da      	str	r2, [r3, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002394:	b480      	push	{r7}
 8002396:	b091      	sub	sp, #68	@ 0x44
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3318      	adds	r3, #24
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023be:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023d6:	d007      	beq.n	80023e8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023dc:	3304      	adds	r3, #4
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80023e8:	2302      	movs	r3, #2
 80023ea:	e111      	b.n	8002610 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80023ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ee:	3301      	adds	r3, #1
 80023f0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80023f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4b86      	ldr	r3, [pc, #536]	@ (800261c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002402:	4013      	ands	r3, r2
 8002404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002406:	6852      	ldr	r2, [r2, #4]
 8002408:	431a      	orrs	r2, r3
 800240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	431a      	orrs	r2, r3
 8002428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	431a      	orrs	r2, r3
 8002446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002448:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800246e:	e082      	b.n	8002576 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e005      	b.n	800249c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800249c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800249e:	3301      	adds	r3, #1
 80024a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d902      	bls.n	80024ae <ETH_Prepare_Tx_Descriptors+0x11a>
 80024a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024aa:	3b04      	subs	r3, #4
 80024ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80024c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024c4:	d007      	beq.n	80024d6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ca:	3304      	adds	r3, #4
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d029      	beq.n	800252a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024e8:	e019      	b.n	800251e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80024ea:	f3bf 8f5f 	dmb	sy
}
 80024ee:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80024fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fe:	3301      	adds	r3, #1
 8002500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002504:	2b03      	cmp	r3, #3
 8002506:	d902      	bls.n	800250e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250a:	3b04      	subs	r3, #4
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251a:	3301      	adds	r3, #1
 800251c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800251e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002522:	429a      	cmp	r2, r3
 8002524:	d3e1      	bcc.n	80024ea <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	e072      	b.n	8002610 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002538:	3301      	adds	r3, #1
 800253a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800253c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4b32      	ldr	r3, [pc, #200]	@ (800261c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002552:	4013      	ands	r3, r2
 8002554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002556:	6852      	ldr	r2, [r2, #4]
 8002558:	431a      	orrs	r2, r3
 800255a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800255e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002560:	3301      	adds	r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002564:	f3bf 8f5f 	dmb	sy
}
 8002568:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002574:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f47f af78 	bne.w	8002470 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e005      	b.n	80025a0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80025b6:	f3bf 8f5f 	dmb	sy
}
 80025ba:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d0:	3304      	adds	r3, #4
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025dc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025de:	f3ef 8310 	mrs	r3, PRIMASK
 80025e2:	613b      	str	r3, [r7, #16]
  return(result);
 80025e4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	2301      	movs	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f383 8810 	msr	PRIMASK, r3
}
 80025f2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fa:	4413      	add	r3, r2
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f383 8810 	msr	PRIMASK, r3
}
 800260c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3744      	adds	r7, #68	@ 0x44
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	ffffe000 	.word	0xffffe000

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	@ 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e175      	b.n	800292c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	429a      	cmp	r2, r3
 800265a:	f040 8164 	bne.w	8002926 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d005      	beq.n	8002676 <HAL_GPIO_Init+0x56>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d130      	bne.n	80026d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2203      	movs	r2, #3
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 0201 	and.w	r2, r3, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d017      	beq.n	8002714 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d123      	bne.n	8002768 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	08da      	lsrs	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3208      	adds	r2, #8
 8002728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	220f      	movs	r2, #15
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	08da      	lsrs	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3208      	adds	r2, #8
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80be 	beq.w	8002926 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	4b66      	ldr	r3, [pc, #408]	@ (8002944 <HAL_GPIO_Init+0x324>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4a65      	ldr	r2, [pc, #404]	@ (8002944 <HAL_GPIO_Init+0x324>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	4b63      	ldr	r3, [pc, #396]	@ (8002944 <HAL_GPIO_Init+0x324>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027c2:	4a61      	ldr	r2, [pc, #388]	@ (8002948 <HAL_GPIO_Init+0x328>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a58      	ldr	r2, [pc, #352]	@ (800294c <HAL_GPIO_Init+0x32c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d037      	beq.n	800285e <HAL_GPIO_Init+0x23e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a57      	ldr	r2, [pc, #348]	@ (8002950 <HAL_GPIO_Init+0x330>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d031      	beq.n	800285a <HAL_GPIO_Init+0x23a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a56      	ldr	r2, [pc, #344]	@ (8002954 <HAL_GPIO_Init+0x334>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d02b      	beq.n	8002856 <HAL_GPIO_Init+0x236>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a55      	ldr	r2, [pc, #340]	@ (8002958 <HAL_GPIO_Init+0x338>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d025      	beq.n	8002852 <HAL_GPIO_Init+0x232>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a54      	ldr	r2, [pc, #336]	@ (800295c <HAL_GPIO_Init+0x33c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01f      	beq.n	800284e <HAL_GPIO_Init+0x22e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a53      	ldr	r2, [pc, #332]	@ (8002960 <HAL_GPIO_Init+0x340>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d019      	beq.n	800284a <HAL_GPIO_Init+0x22a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a52      	ldr	r2, [pc, #328]	@ (8002964 <HAL_GPIO_Init+0x344>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_GPIO_Init+0x226>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a51      	ldr	r2, [pc, #324]	@ (8002968 <HAL_GPIO_Init+0x348>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00d      	beq.n	8002842 <HAL_GPIO_Init+0x222>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a50      	ldr	r2, [pc, #320]	@ (800296c <HAL_GPIO_Init+0x34c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x21e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4f      	ldr	r2, [pc, #316]	@ (8002970 <HAL_GPIO_Init+0x350>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_GPIO_Init+0x21a>
 8002836:	2309      	movs	r3, #9
 8002838:	e012      	b.n	8002860 <HAL_GPIO_Init+0x240>
 800283a:	230a      	movs	r3, #10
 800283c:	e010      	b.n	8002860 <HAL_GPIO_Init+0x240>
 800283e:	2308      	movs	r3, #8
 8002840:	e00e      	b.n	8002860 <HAL_GPIO_Init+0x240>
 8002842:	2307      	movs	r3, #7
 8002844:	e00c      	b.n	8002860 <HAL_GPIO_Init+0x240>
 8002846:	2306      	movs	r3, #6
 8002848:	e00a      	b.n	8002860 <HAL_GPIO_Init+0x240>
 800284a:	2305      	movs	r3, #5
 800284c:	e008      	b.n	8002860 <HAL_GPIO_Init+0x240>
 800284e:	2304      	movs	r3, #4
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x240>
 8002852:	2303      	movs	r3, #3
 8002854:	e004      	b.n	8002860 <HAL_GPIO_Init+0x240>
 8002856:	2302      	movs	r3, #2
 8002858:	e002      	b.n	8002860 <HAL_GPIO_Init+0x240>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_GPIO_Init+0x240>
 800285e:	2300      	movs	r3, #0
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f002 0203 	and.w	r2, r2, #3
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	4093      	lsls	r3, r2
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002870:	4935      	ldr	r1, [pc, #212]	@ (8002948 <HAL_GPIO_Init+0x328>)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287e:	4b3d      	ldr	r3, [pc, #244]	@ (8002974 <HAL_GPIO_Init+0x354>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028a2:	4a34      	ldr	r2, [pc, #208]	@ (8002974 <HAL_GPIO_Init+0x354>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a8:	4b32      	ldr	r3, [pc, #200]	@ (8002974 <HAL_GPIO_Init+0x354>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028cc:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <HAL_GPIO_Init+0x354>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028d2:	4b28      	ldr	r3, [pc, #160]	@ (8002974 <HAL_GPIO_Init+0x354>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <HAL_GPIO_Init+0x354>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <HAL_GPIO_Init+0x354>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002920:	4a14      	ldr	r2, [pc, #80]	@ (8002974 <HAL_GPIO_Init+0x354>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3301      	adds	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	f67f ae86 	bls.w	8002640 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3724      	adds	r7, #36	@ 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40013800 	.word	0x40013800
 800294c:	40020000 	.word	0x40020000
 8002950:	40020400 	.word	0x40020400
 8002954:	40020800 	.word	0x40020800
 8002958:	40020c00 	.word	0x40020c00
 800295c:	40021000 	.word	0x40021000
 8002960:	40021400 	.word	0x40021400
 8002964:	40021800 	.word	0x40021800
 8002968:	40021c00 	.word	0x40021c00
 800296c:	40022000 	.word	0x40022000
 8002970:	40022400 	.word	0x40022400
 8002974:	40013c00 	.word	0x40013c00

08002978 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b23      	ldr	r3, [pc, #140]	@ (8002a10 <HAL_PWREx_EnableOverDrive+0x98>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	4a22      	ldr	r2, [pc, #136]	@ (8002a10 <HAL_PWREx_EnableOverDrive+0x98>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800298c:	6413      	str	r3, [r2, #64]	@ 0x40
 800298e:	4b20      	ldr	r3, [pc, #128]	@ (8002a10 <HAL_PWREx_EnableOverDrive+0x98>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800299a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a6:	f7fe faa7 	bl	8000ef8 <HAL_GetTick>
 80029aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ac:	e009      	b.n	80029c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029ae:	f7fe faa3 	bl	8000ef8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029bc:	d901      	bls.n	80029c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e022      	b.n	8002a08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ce:	d1ee      	bne.n	80029ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029d0:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029dc:	f7fe fa8c 	bl	8000ef8 <HAL_GetTick>
 80029e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029e2:	e009      	b.n	80029f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029e4:	f7fe fa88 	bl	8000ef8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029f2:	d901      	bls.n	80029f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e007      	b.n	8002a08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a04:	d1ee      	bne.n	80029e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40007000 	.word	0x40007000

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e291      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8087 	beq.w	8002b4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3c:	4b96      	ldr	r3, [pc, #600]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d00c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a48:	4b93      	ldr	r3, [pc, #588]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d112      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62>
 8002a54:	4b90      	ldr	r3, [pc, #576]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a60:	d10b      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a62:	4b8d      	ldr	r3, [pc, #564]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d06c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x130>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d168      	bne.n	8002b48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e26b      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7a>
 8002a84:	4b84      	ldr	r3, [pc, #528]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a83      	ldr	r2, [pc, #524]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e02e      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x9c>
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7b      	ldr	r2, [pc, #492]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002aac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e01d      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xc0>
 8002abe:	4b76      	ldr	r3, [pc, #472]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a75      	ldr	r2, [pc, #468]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b73      	ldr	r3, [pc, #460]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a72      	ldr	r2, [pc, #456]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xd8>
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a6e      	ldr	r2, [pc, #440]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6b      	ldr	r2, [pc, #428]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe f9fe 	bl	8000ef8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7fe f9fa 	bl	8000ef8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	@ 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e21f      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b61      	ldr	r3, [pc, #388]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe8>
 8002b1e:	e014      	b.n	8002b4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe f9ea 	bl	8000ef8 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe f9e6 	bl	8000ef8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e20b      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	4b57      	ldr	r3, [pc, #348]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x110>
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d069      	beq.n	8002c2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b56:	4b50      	ldr	r3, [pc, #320]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b4d      	ldr	r3, [pc, #308]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x190>
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	4b47      	ldr	r3, [pc, #284]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1df      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b41      	ldr	r3, [pc, #260]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	493d      	ldr	r1, [pc, #244]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	e040      	b.n	8002c2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb0:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe f99c 	bl	8000ef8 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fe f998 	bl	8000ef8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1bd      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b30      	ldr	r3, [pc, #192]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4929      	ldr	r1, [pc, #164]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
 8002bf6:	e018      	b.n	8002c2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf8:	4b27      	ldr	r3, [pc, #156]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe f978 	bl	8000ef8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe f974 	bl	8000ef8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e199      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d038      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d019      	beq.n	8002c72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c42:	4a15      	ldr	r2, [pc, #84]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4a:	f7fe f955 	bl	8000ef8 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c52:	f7fe f951 	bl	8000ef8 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e176      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c64:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x23a>
 8002c70:	e01a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c76:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <HAL_RCC_OscConfig+0x280>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f93b 	bl	8000ef8 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c86:	f7fe f937 	bl	8000ef8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d903      	bls.n	8002c9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e15c      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
 8002c98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b91      	ldr	r3, [pc, #580]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ee      	bne.n	8002c86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a4 	beq.w	8002dfe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	4a87      	ldr	r2, [pc, #540]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cce:	4b85      	ldr	r3, [pc, #532]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cde:	4b82      	ldr	r3, [pc, #520]	@ (8002ee8 <HAL_RCC_OscConfig+0x4d0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d118      	bne.n	8002d1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee8 <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7e      	ldr	r2, [pc, #504]	@ (8002ee8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe f8ff 	bl	8000ef8 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfe:	f7fe f8fb 	bl	8000ef8 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	@ 0x64
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e120      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	4b75      	ldr	r3, [pc, #468]	@ (8002ee8 <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x31a>
 8002d24:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d30:	e02d      	b.n	8002d8e <HAL_RCC_OscConfig+0x376>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x33c>
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3e:	4a69      	ldr	r2, [pc, #420]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d46:	4b67      	ldr	r3, [pc, #412]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	4a66      	ldr	r2, [pc, #408]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d52:	e01c      	b.n	8002d8e <HAL_RCC_OscConfig+0x376>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0x35e>
 8002d5c:	4b61      	ldr	r3, [pc, #388]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a60      	ldr	r2, [pc, #384]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d68:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d74:	e00b      	b.n	8002d8e <HAL_RCC_OscConfig+0x376>
 8002d76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d82:	4b58      	ldr	r3, [pc, #352]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a57      	ldr	r2, [pc, #348]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d015      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d96:	f7fe f8af 	bl	8000ef8 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe f8ab 	bl	8000ef8 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0ce      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ee      	beq.n	8002d9e <HAL_RCC_OscConfig+0x386>
 8002dc0:	e014      	b.n	8002dec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe f899 	bl	8000ef8 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fe f895 	bl	8000ef8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0b8      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de0:	4b40      	ldr	r3, [pc, #256]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ee      	bne.n	8002dca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80a4 	beq.w	8002f50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e08:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d06b      	beq.n	8002eec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d149      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b31      	ldr	r3, [pc, #196]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a30      	ldr	r2, [pc, #192]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f866 	bl	8000ef8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe f862 	bl	8000ef8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e087      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	3b01      	subs	r3, #1
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	4313      	orrs	r3, r2
 8002e74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e7a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a18      	ldr	r2, [pc, #96]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe f836 	bl	8000ef8 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe f832 	bl	8000ef8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e057      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x478>
 8002eae:	e04f      	b.n	8002f50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f81c 	bl	8000ef8 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe f818 	bl	8000ef8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e03d      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4ac>
 8002ee2:	e035      	b.n	8002f50 <HAL_RCC_OscConfig+0x538>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <HAL_RCC_OscConfig+0x544>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d028      	beq.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d121      	bne.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d11a      	bne.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d111      	bne.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	4965      	ldr	r1, [pc, #404]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fd ff50 	bl	8000ef8 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fd ff4c 	bl	8000ef8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	4922      	ldr	r1, [pc, #136]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_RCC_ClockConfig+0x1d0>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_RCC_ClockConfig+0x1d4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fb76 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00
 8003128:	40023800 	.word	0x40023800
 800312c:	08019ad4 	.word	0x08019ad4
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b090      	sub	sp, #64	@ 0x40
 800313e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	637b      	str	r3, [r7, #52]	@ 0x34
 8003144:	2300      	movs	r3, #0
 8003146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003148:	2300      	movs	r3, #0
 800314a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003150:	4b59      	ldr	r3, [pc, #356]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d00d      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x40>
 800315c:	2b08      	cmp	r3, #8
 800315e:	f200 80a1 	bhi.w	80032a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x3a>
 800316a:	e09b      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b53      	ldr	r3, [pc, #332]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x184>)
 800316e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003170:	e09b      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003172:	4b53      	ldr	r3, [pc, #332]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003176:	e098      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003178:	4b4f      	ldr	r3, [pc, #316]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003180:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003182:	4b4d      	ldr	r3, [pc, #308]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d028      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b4a      	ldr	r3, [pc, #296]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	2200      	movs	r2, #0
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	627a      	str	r2, [r7, #36]	@ 0x24
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031a0:	2100      	movs	r1, #0
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a4:	fb03 f201 	mul.w	r2, r3, r1
 80031a8:	2300      	movs	r3, #0
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	4a43      	ldr	r2, [pc, #268]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031b2:	fba0 1202 	umull	r1, r2, r0, r2
 80031b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031b8:	460a      	mov	r2, r1
 80031ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031be:	4413      	add	r3, r2
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	2200      	movs	r2, #0
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	61fa      	str	r2, [r7, #28]
 80031ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031d2:	f7fd f86d 	bl	80002b0 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4613      	mov	r3, r2
 80031dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031de:	e053      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e0:	4b35      	ldr	r3, [pc, #212]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	2200      	movs	r2, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	617a      	str	r2, [r7, #20]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031f2:	f04f 0b00 	mov.w	fp, #0
 80031f6:	4652      	mov	r2, sl
 80031f8:	465b      	mov	r3, fp
 80031fa:	f04f 0000 	mov.w	r0, #0
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	0159      	lsls	r1, r3, #5
 8003204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003208:	0150      	lsls	r0, r2, #5
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	ebb2 080a 	subs.w	r8, r2, sl
 8003212:	eb63 090b 	sbc.w	r9, r3, fp
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800322a:	ebb2 0408 	subs.w	r4, r2, r8
 800322e:	eb63 0509 	sbc.w	r5, r3, r9
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	00eb      	lsls	r3, r5, #3
 800323c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003240:	00e2      	lsls	r2, r4, #3
 8003242:	4614      	mov	r4, r2
 8003244:	461d      	mov	r5, r3
 8003246:	eb14 030a 	adds.w	r3, r4, sl
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	eb45 030b 	adc.w	r3, r5, fp
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325e:	4629      	mov	r1, r5
 8003260:	028b      	lsls	r3, r1, #10
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003268:	4621      	mov	r1, r4
 800326a:	028a      	lsls	r2, r1, #10
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003272:	2200      	movs	r2, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	60fa      	str	r2, [r7, #12]
 8003278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800327c:	f7fd f818 	bl	80002b0 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	3301      	adds	r3, #1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032a2:	e002      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x184>)
 80032a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3740      	adds	r7, #64	@ 0x40
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	017d7840 	.word	0x017d7840

080032c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b03      	ldr	r3, [pc, #12]	@ (80032d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e0:	f7ff fff0 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	@ (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	08019ae4 	.word	0x08019ae4

08003304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	220f      	movs	r2, #15
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003314:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003320:	4b0f      	ldr	r3, [pc, #60]	@ (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800332c:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003338:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003346:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <HAL_RCC_GetClockConfig+0x60>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 020f 	and.w	r2, r3, #15
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40023c00 	.word	0x40023c00

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e049      	b.n	800340e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f841 	bl	8003416 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 f9e8 	bl	800377c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d001      	beq.n	8003444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e054      	b.n	80034ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a26      	ldr	r2, [pc, #152]	@ (80034fc <HAL_TIM_Base_Start_IT+0xd0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d022      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346e:	d01d      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a22      	ldr	r2, [pc, #136]	@ (8003500 <HAL_TIM_Base_Start_IT+0xd4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d018      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a21      	ldr	r2, [pc, #132]	@ (8003504 <HAL_TIM_Base_Start_IT+0xd8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <HAL_TIM_Base_Start_IT+0xdc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00e      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1e      	ldr	r2, [pc, #120]	@ (800350c <HAL_TIM_Base_Start_IT+0xe0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d009      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1c      	ldr	r2, [pc, #112]	@ (8003510 <HAL_TIM_Base_Start_IT+0xe4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003514 <HAL_TIM_Base_Start_IT+0xe8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d115      	bne.n	80034d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_TIM_Base_Start_IT+0xec>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d015      	beq.n	80034ea <HAL_TIM_Base_Start_IT+0xbe>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c4:	d011      	beq.n	80034ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d6:	e008      	b.n	80034ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e000      	b.n	80034ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40010000 	.word	0x40010000
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00
 800350c:	40010400 	.word	0x40010400
 8003510:	40014000 	.word	0x40014000
 8003514:	40001800 	.word	0x40001800
 8003518:	00010007 	.word	0x00010007

0800351c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0202 	mvn.w	r2, #2
 8003550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f8e9 	bl	800373e <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8db 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f8ec 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d020      	beq.n	80035cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0204 	mvn.w	r2, #4
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8c3 	bl	800373e <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f8b5 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f8c6 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d020      	beq.n	8003618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0208 	mvn.w	r2, #8
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f89d 	bl	800373e <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f88f 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8a0 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0210 	mvn.w	r2, #16
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2208      	movs	r2, #8
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f877 	bl	800373e <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f869 	bl	800372a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f87a 	bl	8003752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00c      	beq.n	8003688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0201 	mvn.w	r2, #1
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd f87e 	bl	8000784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00c      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f919 	bl	80038e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00c      	beq.n	80036da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f911 	bl	80038fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f834 	bl	8003766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00c      	beq.n	8003722 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f06f 0220 	mvn.w	r2, #32
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8d9 	bl	80038d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a46      	ldr	r2, [pc, #280]	@ (80038a8 <TIM_Base_SetConfig+0x12c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379a:	d00f      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a43      	ldr	r2, [pc, #268]	@ (80038ac <TIM_Base_SetConfig+0x130>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00b      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a42      	ldr	r2, [pc, #264]	@ (80038b0 <TIM_Base_SetConfig+0x134>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a41      	ldr	r2, [pc, #260]	@ (80038b4 <TIM_Base_SetConfig+0x138>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_Base_SetConfig+0x40>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a40      	ldr	r2, [pc, #256]	@ (80038b8 <TIM_Base_SetConfig+0x13c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d108      	bne.n	80037ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a35      	ldr	r2, [pc, #212]	@ (80038a8 <TIM_Base_SetConfig+0x12c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02b      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037dc:	d027      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a32      	ldr	r2, [pc, #200]	@ (80038ac <TIM_Base_SetConfig+0x130>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d023      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a31      	ldr	r2, [pc, #196]	@ (80038b0 <TIM_Base_SetConfig+0x134>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01f      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a30      	ldr	r2, [pc, #192]	@ (80038b4 <TIM_Base_SetConfig+0x138>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01b      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a2f      	ldr	r2, [pc, #188]	@ (80038b8 <TIM_Base_SetConfig+0x13c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d017      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a2e      	ldr	r2, [pc, #184]	@ (80038bc <TIM_Base_SetConfig+0x140>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a2d      	ldr	r2, [pc, #180]	@ (80038c0 <TIM_Base_SetConfig+0x144>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00f      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a2c      	ldr	r2, [pc, #176]	@ (80038c4 <TIM_Base_SetConfig+0x148>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00b      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2b      	ldr	r2, [pc, #172]	@ (80038c8 <TIM_Base_SetConfig+0x14c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2a      	ldr	r2, [pc, #168]	@ (80038cc <TIM_Base_SetConfig+0x150>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a29      	ldr	r2, [pc, #164]	@ (80038d0 <TIM_Base_SetConfig+0x154>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d108      	bne.n	8003840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a10      	ldr	r2, [pc, #64]	@ (80038a8 <TIM_Base_SetConfig+0x12c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_Base_SetConfig+0xf8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a12      	ldr	r2, [pc, #72]	@ (80038b8 <TIM_Base_SetConfig+0x13c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d103      	bne.n	800387c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d105      	bne.n	800389a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f023 0201 	bic.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	611a      	str	r2, [r3, #16]
  }
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40010400 	.word	0x40010400
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40014400 	.word	0x40014400
 80038c4:	40014800 	.word	0x40014800
 80038c8:	40001800 	.word	0x40001800
 80038cc:	40001c00 	.word	0x40001c00
 80038d0:	40002000 	.word	0x40002000

080038d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003910:	b5b0      	push	{r4, r5, r7, lr}
 8003912:	b08c      	sub	sp, #48	@ 0x30
 8003914:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003916:	4b8f      	ldr	r3, [pc, #572]	@ (8003b54 <MX_LWIP_Init+0x244>)
 8003918:	22c0      	movs	r2, #192	@ 0xc0
 800391a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800391c:	4b8d      	ldr	r3, [pc, #564]	@ (8003b54 <MX_LWIP_Init+0x244>)
 800391e:	22a8      	movs	r2, #168	@ 0xa8
 8003920:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 123;
 8003922:	4b8c      	ldr	r3, [pc, #560]	@ (8003b54 <MX_LWIP_Init+0x244>)
 8003924:	227b      	movs	r2, #123	@ 0x7b
 8003926:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 101;
 8003928:	4b8a      	ldr	r3, [pc, #552]	@ (8003b54 <MX_LWIP_Init+0x244>)
 800392a:	2265      	movs	r2, #101	@ 0x65
 800392c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800392e:	4b8a      	ldr	r3, [pc, #552]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003930:	22ff      	movs	r2, #255	@ 0xff
 8003932:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003934:	4b88      	ldr	r3, [pc, #544]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003936:	22ff      	movs	r2, #255	@ 0xff
 8003938:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800393a:	4b87      	ldr	r3, [pc, #540]	@ (8003b58 <MX_LWIP_Init+0x248>)
 800393c:	22ff      	movs	r2, #255	@ 0xff
 800393e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003940:	4b85      	ldr	r3, [pc, #532]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003942:	2200      	movs	r2, #0
 8003944:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003946:	4b85      	ldr	r3, [pc, #532]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003948:	22c0      	movs	r2, #192	@ 0xc0
 800394a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800394c:	4b83      	ldr	r3, [pc, #524]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 800394e:	22a8      	movs	r2, #168	@ 0xa8
 8003950:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 123;
 8003952:	4b82      	ldr	r3, [pc, #520]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003954:	227b      	movs	r2, #123	@ 0x7b
 8003956:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003958:	4b80      	ldr	r3, [pc, #512]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 800395a:	2201      	movs	r2, #1
 800395c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800395e:	2100      	movs	r1, #0
 8003960:	2000      	movs	r0, #0
 8003962:	f006 f871 	bl	8009a48 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003966:	4b7b      	ldr	r3, [pc, #492]	@ (8003b54 <MX_LWIP_Init+0x244>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	061a      	lsls	r2, r3, #24
 800396c:	4b79      	ldr	r3, [pc, #484]	@ (8003b54 <MX_LWIP_Init+0x244>)
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	431a      	orrs	r2, r3
 8003974:	4b77      	ldr	r3, [pc, #476]	@ (8003b54 <MX_LWIP_Init+0x244>)
 8003976:	789b      	ldrb	r3, [r3, #2]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	4313      	orrs	r3, r2
 800397c:	4a75      	ldr	r2, [pc, #468]	@ (8003b54 <MX_LWIP_Init+0x244>)
 800397e:	78d2      	ldrb	r2, [r2, #3]
 8003980:	4313      	orrs	r3, r2
 8003982:	061a      	lsls	r2, r3, #24
 8003984:	4b73      	ldr	r3, [pc, #460]	@ (8003b54 <MX_LWIP_Init+0x244>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	0619      	lsls	r1, r3, #24
 800398a:	4b72      	ldr	r3, [pc, #456]	@ (8003b54 <MX_LWIP_Init+0x244>)
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	4319      	orrs	r1, r3
 8003992:	4b70      	ldr	r3, [pc, #448]	@ (8003b54 <MX_LWIP_Init+0x244>)
 8003994:	789b      	ldrb	r3, [r3, #2]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	430b      	orrs	r3, r1
 800399a:	496e      	ldr	r1, [pc, #440]	@ (8003b54 <MX_LWIP_Init+0x244>)
 800399c:	78c9      	ldrb	r1, [r1, #3]
 800399e:	430b      	orrs	r3, r1
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80039a6:	431a      	orrs	r2, r3
 80039a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b54 <MX_LWIP_Init+0x244>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	0619      	lsls	r1, r3, #24
 80039ae:	4b69      	ldr	r3, [pc, #420]	@ (8003b54 <MX_LWIP_Init+0x244>)
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	4319      	orrs	r1, r3
 80039b6:	4b67      	ldr	r3, [pc, #412]	@ (8003b54 <MX_LWIP_Init+0x244>)
 80039b8:	789b      	ldrb	r3, [r3, #2]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	430b      	orrs	r3, r1
 80039be:	4965      	ldr	r1, [pc, #404]	@ (8003b54 <MX_LWIP_Init+0x244>)
 80039c0:	78c9      	ldrb	r1, [r1, #3]
 80039c2:	430b      	orrs	r3, r1
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80039ca:	431a      	orrs	r2, r3
 80039cc:	4b61      	ldr	r3, [pc, #388]	@ (8003b54 <MX_LWIP_Init+0x244>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	0619      	lsls	r1, r3, #24
 80039d2:	4b60      	ldr	r3, [pc, #384]	@ (8003b54 <MX_LWIP_Init+0x244>)
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	4319      	orrs	r1, r3
 80039da:	4b5e      	ldr	r3, [pc, #376]	@ (8003b54 <MX_LWIP_Init+0x244>)
 80039dc:	789b      	ldrb	r3, [r3, #2]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	430b      	orrs	r3, r1
 80039e2:	495c      	ldr	r1, [pc, #368]	@ (8003b54 <MX_LWIP_Init+0x244>)
 80039e4:	78c9      	ldrb	r1, [r1, #3]
 80039e6:	430b      	orrs	r3, r1
 80039e8:	0e1b      	lsrs	r3, r3, #24
 80039ea:	4313      	orrs	r3, r2
 80039ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003b60 <MX_LWIP_Init+0x250>)
 80039ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80039f0:	4b59      	ldr	r3, [pc, #356]	@ (8003b58 <MX_LWIP_Init+0x248>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	061a      	lsls	r2, r3, #24
 80039f6:	4b58      	ldr	r3, [pc, #352]	@ (8003b58 <MX_LWIP_Init+0x248>)
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	431a      	orrs	r2, r3
 80039fe:	4b56      	ldr	r3, [pc, #344]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a00:	789b      	ldrb	r3, [r3, #2]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	4313      	orrs	r3, r2
 8003a06:	4a54      	ldr	r2, [pc, #336]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a08:	78d2      	ldrb	r2, [r2, #3]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	061a      	lsls	r2, r3, #24
 8003a0e:	4b52      	ldr	r3, [pc, #328]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	0619      	lsls	r1, r3, #24
 8003a14:	4b50      	ldr	r3, [pc, #320]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a16:	785b      	ldrb	r3, [r3, #1]
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	4319      	orrs	r1, r3
 8003a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a1e:	789b      	ldrb	r3, [r3, #2]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	430b      	orrs	r3, r1
 8003a24:	494c      	ldr	r1, [pc, #304]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a26:	78c9      	ldrb	r1, [r1, #3]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a30:	431a      	orrs	r2, r3
 8003a32:	4b49      	ldr	r3, [pc, #292]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	0619      	lsls	r1, r3, #24
 8003a38:	4b47      	ldr	r3, [pc, #284]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	4319      	orrs	r1, r3
 8003a40:	4b45      	ldr	r3, [pc, #276]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a42:	789b      	ldrb	r3, [r3, #2]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	430b      	orrs	r3, r1
 8003a48:	4943      	ldr	r1, [pc, #268]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a4a:	78c9      	ldrb	r1, [r1, #3]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a54:	431a      	orrs	r2, r3
 8003a56:	4b40      	ldr	r3, [pc, #256]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	0619      	lsls	r1, r3, #24
 8003a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	4319      	orrs	r1, r3
 8003a64:	4b3c      	ldr	r3, [pc, #240]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a66:	789b      	ldrb	r3, [r3, #2]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	493a      	ldr	r1, [pc, #232]	@ (8003b58 <MX_LWIP_Init+0x248>)
 8003a6e:	78c9      	ldrb	r1, [r1, #3]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	0e1b      	lsrs	r3, r3, #24
 8003a74:	4313      	orrs	r3, r2
 8003a76:	4a3b      	ldr	r2, [pc, #236]	@ (8003b64 <MX_LWIP_Init+0x254>)
 8003a78:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003a7a:	4b38      	ldr	r3, [pc, #224]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	061a      	lsls	r2, r3, #24
 8003a80:	4b36      	ldr	r3, [pc, #216]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	4b34      	ldr	r3, [pc, #208]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003a8a:	789b      	ldrb	r3, [r3, #2]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	4a32      	ldr	r2, [pc, #200]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003a92:	78d2      	ldrb	r2, [r2, #3]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	061a      	lsls	r2, r3, #24
 8003a98:	4b30      	ldr	r3, [pc, #192]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	0619      	lsls	r1, r3, #24
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	4319      	orrs	r1, r3
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003aa8:	789b      	ldrb	r3, [r3, #2]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	430b      	orrs	r3, r1
 8003aae:	492b      	ldr	r1, [pc, #172]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003ab0:	78c9      	ldrb	r1, [r1, #3]
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003aba:	431a      	orrs	r2, r3
 8003abc:	4b27      	ldr	r3, [pc, #156]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	0619      	lsls	r1, r3, #24
 8003ac2:	4b26      	ldr	r3, [pc, #152]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003ac4:	785b      	ldrb	r3, [r3, #1]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	4319      	orrs	r1, r3
 8003aca:	4b24      	ldr	r3, [pc, #144]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003acc:	789b      	ldrb	r3, [r3, #2]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	4922      	ldr	r1, [pc, #136]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003ad4:	78c9      	ldrb	r1, [r1, #3]
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	0619      	lsls	r1, r3, #24
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003ae8:	785b      	ldrb	r3, [r3, #1]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	4319      	orrs	r1, r3
 8003aee:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003af0:	789b      	ldrb	r3, [r3, #2]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	430b      	orrs	r3, r1
 8003af6:	4919      	ldr	r1, [pc, #100]	@ (8003b5c <MX_LWIP_Init+0x24c>)
 8003af8:	78c9      	ldrb	r1, [r1, #3]
 8003afa:	430b      	orrs	r3, r1
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	4313      	orrs	r3, r2
 8003b00:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <MX_LWIP_Init+0x258>)
 8003b02:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <MX_LWIP_Init+0x25c>)
 8003b06:	9302      	str	r3, [sp, #8]
 8003b08:	4b19      	ldr	r3, [pc, #100]	@ (8003b70 <MX_LWIP_Init+0x260>)
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4b15      	ldr	r3, [pc, #84]	@ (8003b68 <MX_LWIP_Init+0x258>)
 8003b12:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <MX_LWIP_Init+0x254>)
 8003b14:	4912      	ldr	r1, [pc, #72]	@ (8003b60 <MX_LWIP_Init+0x250>)
 8003b16:	4817      	ldr	r0, [pc, #92]	@ (8003b74 <MX_LWIP_Init+0x264>)
 8003b18:	f006 fd5c 	bl	800a5d4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003b1c:	4815      	ldr	r0, [pc, #84]	@ (8003b74 <MX_LWIP_Init+0x264>)
 8003b1e:	f006 ff0b 	bl	800a938 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003b22:	4814      	ldr	r0, [pc, #80]	@ (8003b74 <MX_LWIP_Init+0x264>)
 8003b24:	f006 ff18 	bl	800a958 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003b28:	4913      	ldr	r1, [pc, #76]	@ (8003b78 <MX_LWIP_Init+0x268>)
 8003b2a:	4812      	ldr	r0, [pc, #72]	@ (8003b74 <MX_LWIP_Init+0x264>)
 8003b2c:	f007 f816 	bl	800ab5c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8003b30:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <MX_LWIP_Init+0x26c>)
 8003b32:	1d3c      	adds	r4, r7, #4
 8003b34:	461d      	mov	r5, r3
 8003b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	490b      	ldr	r1, [pc, #44]	@ (8003b74 <MX_LWIP_Init+0x264>)
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fdad 	bl	80046a6 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003b4c:	bf00      	nop
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bdb0      	pop	{r4, r5, r7, pc}
 8003b54:	20000624 	.word	0x20000624
 8003b58:	20000628 	.word	0x20000628
 8003b5c:	2000062c 	.word	0x2000062c
 8003b60:	20000618 	.word	0x20000618
 8003b64:	2000061c 	.word	0x2000061c
 8003b68:	20000620 	.word	0x20000620
 8003b6c:	08009959 	.word	0x08009959
 8003b70:	08004119 	.word	0x08004119
 8003b74:	200005e4 	.word	0x200005e4
 8003b78:	08003b81 	.word	0x08003b81
 8003b7c:	080166d4 	.word	0x080166d4

08003b80 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003ba6:	2320      	movs	r3, #32
 8003ba8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003baa:	f3bf 8f4f 	dsb	sy
}
 8003bae:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8003bb0:	e00b      	b.n	8003bca <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	dcf0      	bgt.n	8003bb2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003bd0:	f3bf 8f4f 	dsb	sy
}
 8003bd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bd6:	f3bf 8f6f 	isb	sy
}
 8003bda:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003bf4:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <HAL_ETH_RxCpltCallback+0x1c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fedd 	bl	80049b8 <osSemaphoreRelease>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20004fbc 	.word	0x20004fbc

08003c0c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003c14:	4b04      	ldr	r3, [pc, #16]	@ (8003c28 <HAL_ETH_TxCpltCallback+0x1c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fecd 	bl	80049b8 <osSemaphoreRelease>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20004fc0 	.word	0x20004fc0

08003c2c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fe f8c6 	bl	8001dc6 <HAL_ETH_GetDMAError>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c40:	2b80      	cmp	r3, #128	@ 0x80
 8003c42:	d104      	bne.n	8003c4e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <HAL_ETH_ErrorCallback+0x2c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 feb5 	bl	80049b8 <osSemaphoreRelease>
  }
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20004fbc 	.word	0x20004fbc

08003c5c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003c5c:	b5b0      	push	{r4, r5, r7, lr}
 8003c5e:	b0b4      	sub	sp, #208	@ 0xd0
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8003c76:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003c7a:	2264      	movs	r2, #100	@ 0x64
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f011 fc53 	bl	801552a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003c84:	4b9f      	ldr	r3, [pc, #636]	@ (8003f04 <low_level_init+0x2a8>)
 8003c86:	4aa0      	ldr	r2, [pc, #640]	@ (8003f08 <low_level_init+0x2ac>)
 8003c88:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8003c90:	2380      	movs	r3, #128	@ 0x80
 8003c92:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8003c96:	23e1      	movs	r3, #225	@ 0xe1
 8003c98:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8003cae:	4a95      	ldr	r2, [pc, #596]	@ (8003f04 <low_level_init+0x2a8>)
 8003cb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003cb4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003cb6:	4b93      	ldr	r3, [pc, #588]	@ (8003f04 <low_level_init+0x2a8>)
 8003cb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cbc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003cbe:	4b91      	ldr	r3, [pc, #580]	@ (8003f04 <low_level_init+0x2a8>)
 8003cc0:	4a92      	ldr	r2, [pc, #584]	@ (8003f0c <low_level_init+0x2b0>)
 8003cc2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8003f04 <low_level_init+0x2a8>)
 8003cc6:	4a92      	ldr	r2, [pc, #584]	@ (8003f10 <low_level_init+0x2b4>)
 8003cc8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003cca:	4b8e      	ldr	r3, [pc, #568]	@ (8003f04 <low_level_init+0x2a8>)
 8003ccc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003cd0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003cd2:	488c      	ldr	r0, [pc, #560]	@ (8003f04 <low_level_init+0x2a8>)
 8003cd4:	f7fd fa2e 	bl	8001134 <HAL_ETH_Init>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003cde:	2238      	movs	r2, #56	@ 0x38
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	488c      	ldr	r0, [pc, #560]	@ (8003f14 <low_level_init+0x2b8>)
 8003ce4:	f011 fc21 	bl	801552a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003ce8:	4b8a      	ldr	r3, [pc, #552]	@ (8003f14 <low_level_init+0x2b8>)
 8003cea:	2221      	movs	r2, #33	@ 0x21
 8003cec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003cee:	4b89      	ldr	r3, [pc, #548]	@ (8003f14 <low_level_init+0x2b8>)
 8003cf0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003cf4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003cf6:	4b87      	ldr	r3, [pc, #540]	@ (8003f14 <low_level_init+0x2b8>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003cfc:	4886      	ldr	r0, [pc, #536]	@ (8003f18 <low_level_init+0x2bc>)
 8003cfe:	f006 fb23 	bl	800a348 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2206      	movs	r2, #6
 8003d06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003d0a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f04 <low_level_init+0x2a8>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003d16:	4b7b      	ldr	r3, [pc, #492]	@ (8003f04 <low_level_init+0x2a8>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	785a      	ldrb	r2, [r3, #1]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003d22:	4b78      	ldr	r3, [pc, #480]	@ (8003f04 <low_level_init+0x2a8>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	789a      	ldrb	r2, [r3, #2]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003d2e:	4b75      	ldr	r3, [pc, #468]	@ (8003f04 <low_level_init+0x2a8>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	78da      	ldrb	r2, [r3, #3]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003d3a:	4b72      	ldr	r3, [pc, #456]	@ (8003f04 <low_level_init+0x2a8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	791a      	ldrb	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003d46:	4b6f      	ldr	r3, [pc, #444]	@ (8003f04 <low_level_init+0x2a8>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	795a      	ldrb	r2, [r3, #5]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003d58:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003d60:	f043 030a 	orr.w	r3, r3, #10
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d70:	2300      	movs	r3, #0
 8003d72:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8003d74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fd9c 	bl	80048b8 <osSemaphoreCreate>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4a66      	ldr	r2, [pc, #408]	@ (8003f1c <low_level_init+0x2c0>)
 8003d84:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8003d86:	2300      	movs	r3, #0
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8003d8e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fd8f 	bl	80048b8 <osSemaphoreCreate>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4a60      	ldr	r2, [pc, #384]	@ (8003f20 <low_level_init+0x2c4>)
 8003d9e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8003da0:	4b5e      	ldr	r3, [pc, #376]	@ (8003f1c <low_level_init+0x2c0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fdb8 	bl	800491c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8003dac:	4b5c      	ldr	r3, [pc, #368]	@ (8003f20 <low_level_init+0x2c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fdb2 	bl	800491c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003db8:	4b5a      	ldr	r3, [pc, #360]	@ (8003f24 <low_level_init+0x2c8>)
 8003dba:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003dcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fc67 	bl	80046a6 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003dd8:	4953      	ldr	r1, [pc, #332]	@ (8003f28 <low_level_init+0x2cc>)
 8003dda:	4854      	ldr	r0, [pc, #336]	@ (8003f2c <low_level_init+0x2d0>)
 8003ddc:	f7fc ff65 	bl	8000caa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003de0:	4852      	ldr	r0, [pc, #328]	@ (8003f2c <low_level_init+0x2d0>)
 8003de2:	f7fc ff94 	bl	8000d0e <LAN8742_Init>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d006      	beq.n	8003dfa <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f006 fe85 	bl	800aafc <netif_set_link_down>
    netif_set_down(netif);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f006 fe1c 	bl	800aa30 <netif_set_down>
 8003df8:	e081      	b.n	8003efe <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003dfa:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d165      	bne.n	8003ece <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003e02:	484a      	ldr	r0, [pc, #296]	@ (8003f2c <low_level_init+0x2d0>)
 8003e04:	f7fc ffd0 	bl	8000da8 <LAN8742_GetLinkState>
 8003e08:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	dc06      	bgt.n	8003e22 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f006 fe71 	bl	800aafc <netif_set_link_down>
      netif_set_down(netif);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f006 fe08 	bl	800aa30 <netif_set_down>
 8003e20:	e057      	b.n	8003ed2 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8003e22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e26:	3b02      	subs	r3, #2
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d82b      	bhi.n	8003e84 <low_level_init+0x228>
 8003e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <low_level_init+0x1d8>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e57 	.word	0x08003e57
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e77 	.word	0x08003e77
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003e44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003e4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e54:	e01f      	b.n	8003e96 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003e5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e64:	e017      	b.n	8003e96 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003e66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e74:	e00f      	b.n	8003e96 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e82:	e008      	b.n	8003e96 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8003e84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8003e8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8003e94:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003e96:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4819      	ldr	r0, [pc, #100]	@ (8003f04 <low_level_init+0x2a8>)
 8003e9e:	f7fd fe31 	bl	8001b04 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003ea2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ea6:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8003ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003eac:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003eae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4813      	ldr	r0, [pc, #76]	@ (8003f04 <low_level_init+0x2a8>)
 8003eb6:	f7fd ff1c 	bl	8001cf2 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8003eba:	4812      	ldr	r0, [pc, #72]	@ (8003f04 <low_level_init+0x2a8>)
 8003ebc:	f7fd f9d4 	bl	8001268 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f006 fd49 	bl	800a958 <netif_set_up>
    netif_set_link_up(netif);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f006 fde4 	bl	800aa94 <netif_set_link_up>
 8003ecc:	e001      	b.n	8003ed2 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8003ece:	f7fc fc6b 	bl	80007a8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8003ed2:	f7fd f841 	bl	8000f58 <HAL_GetREVID>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003edc:	d10f      	bne.n	8003efe <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8003ede:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <low_level_init+0x2d4>)
 8003ee0:	f107 040c 	add.w	r4, r7, #12
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8003ef2:	f107 030c 	add.w	r3, r7, #12
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fbd4 	bl	80046a6 <osThreadCreate>
  }
}
 8003efe:	37d0      	adds	r7, #208	@ 0xd0
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bdb0      	pop	{r4, r5, r7, pc}
 8003f04:	20004fc4 	.word	0x20004fc4
 8003f08:	40028000 	.word	0x40028000
 8003f0c:	2000012c 	.word	0x2000012c
 8003f10:	2000008c 	.word	0x2000008c
 8003f14:	20005074 	.word	0x20005074
 8003f18:	08019aec 	.word	0x08019aec
 8003f1c:	20004fbc 	.word	0x20004fbc
 8003f20:	20004fc0 	.word	0x20004fc0
 8003f24:	080166f8 	.word	0x080166f8
 8003f28:	2000000c 	.word	0x2000000c
 8003f2c:	200050ac 	.word	0x200050ac
 8003f30:	08016724 	.word	0x08016724

08003f34 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b092      	sub	sp, #72	@ 0x48
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003f4c:	f107 030c 	add.w	r3, r7, #12
 8003f50:	2230      	movs	r2, #48	@ 0x30
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f011 fae8 	bl	801552a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003f5a:	f107 030c 	add.w	r3, r7, #12
 8003f5e:	2230      	movs	r2, #48	@ 0x30
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f011 fae1 	bl	801552a <memset>

  for(q = p; q != NULL; q = q->next)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f6c:	e045      	b.n	8003ffa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d902      	bls.n	8003f7a <low_level_output+0x46>
      return ERR_IF;
 8003f74:	f06f 030b 	mvn.w	r3, #11
 8003f78:	e07f      	b.n	800407a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	3348      	adds	r3, #72	@ 0x48
 8003f8a:	443b      	add	r3, r7
 8003f8c:	3b3c      	subs	r3, #60	@ 0x3c
 8003f8e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f92:	895b      	ldrh	r3, [r3, #10]
 8003f94:	4619      	mov	r1, r3
 8003f96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	3348      	adds	r3, #72	@ 0x48
 8003fa2:	443b      	add	r3, r7
 8003fa4:	3b38      	subs	r3, #56	@ 0x38
 8003fa6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	f107 000c 	add.w	r0, r7, #12
 8003fb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fb8:	460b      	mov	r3, r1
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	440b      	add	r3, r1
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	18c1      	adds	r1, r0, r3
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	3348      	adds	r3, #72	@ 0x48
 8003fcc:	443b      	add	r3, r7
 8003fce:	3b34      	subs	r3, #52	@ 0x34
 8003fd0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fdc:	4613      	mov	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	3348      	adds	r3, #72	@ 0x48
 8003fe6:	443b      	add	r3, r7
 8003fe8:	3b34      	subs	r3, #52	@ 0x34
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1b6      	bne.n	8003f6e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	891b      	ldrh	r3, [r3, #8]
 8004004:	461a      	mov	r2, r3
 8004006:	4b1f      	ldr	r3, [pc, #124]	@ (8004084 <low_level_output+0x150>)
 8004008:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800400a:	4a1e      	ldr	r2, [pc, #120]	@ (8004084 <low_level_output+0x150>)
 800400c:	f107 030c 	add.w	r3, r7, #12
 8004010:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004012:	4a1c      	ldr	r2, [pc, #112]	@ (8004084 <low_level_output+0x150>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004018:	6838      	ldr	r0, [r7, #0]
 800401a:	f007 f9f3 	bl	800b404 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800401e:	4919      	ldr	r1, [pc, #100]	@ (8004084 <low_level_output+0x150>)
 8004020:	4819      	ldr	r0, [pc, #100]	@ (8004088 <low_level_output+0x154>)
 8004022:	f7fd fa11 	bl	8001448 <HAL_ETH_Transmit_IT>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004032:	e01b      	b.n	800406c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004034:	4814      	ldr	r0, [pc, #80]	@ (8004088 <low_level_output+0x154>)
 8004036:	f7fd feb9 	bl	8001dac <HAL_ETH_GetError>
 800403a:	4603      	mov	r3, r0
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8004044:	4b11      	ldr	r3, [pc, #68]	@ (800408c <low_level_output+0x158>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fc65 	bl	800491c <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8004052:	480d      	ldr	r0, [pc, #52]	@ (8004088 <low_level_output+0x154>)
 8004054:	f7fd fb98 	bl	8001788 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8004058:	23fe      	movs	r3, #254	@ 0xfe
 800405a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800405e:	e005      	b.n	800406c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8004060:	6838      	ldr	r0, [r7, #0]
 8004062:	f007 f929 	bl	800b2b8 <pbuf_free>
        errval =  ERR_IF;
 8004066:	23f4      	movs	r3, #244	@ 0xf4
 8004068:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800406c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004070:	f113 0f02 	cmn.w	r3, #2
 8004074:	d0d3      	beq.n	800401e <low_level_output+0xea>

  return errval;
 8004076:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800407a:	4618      	mov	r0, r3
 800407c:	3748      	adds	r7, #72	@ 0x48
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20005074 	.word	0x20005074
 8004088:	20004fc4 	.word	0x20004fc4
 800408c:	20004fc0 	.word	0x20004fc0

08004090 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800409c:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <low_level_input+0x2c>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	4619      	mov	r1, r3
 80040aa:	4805      	ldr	r0, [pc, #20]	@ (80040c0 <low_level_input+0x30>)
 80040ac:	f7fd fa28 	bl	8001500 <HAL_ETH_ReadData>
  }

  return p;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20004fb8 	.word	0x20004fb8
 80040c0:	20004fc4 	.word	0x20004fc4

080040c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80040d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <ethernetif_input+0x50>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fc1d 	bl	800491c <osSemaphoreWait>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f5      	bne.n	80040d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80040e8:	68b8      	ldr	r0, [r7, #8]
 80040ea:	f7ff ffd1 	bl	8004090 <low_level_input>
 80040ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	4798      	blx	r3
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f007 f8d6 	bl	800b2b8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1ea      	bne.n	80040e8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004112:	e7df      	b.n	80040d4 <ethernetif_input+0x10>
 8004114:	20004fbc 	.word	0x20004fbc

08004118 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <ethernetif_init+0x1c>
 8004126:	4b0e      	ldr	r3, [pc, #56]	@ (8004160 <ethernetif_init+0x48>)
 8004128:	f240 2217 	movw	r2, #535	@ 0x217
 800412c:	490d      	ldr	r1, [pc, #52]	@ (8004164 <ethernetif_init+0x4c>)
 800412e:	480e      	ldr	r0, [pc, #56]	@ (8004168 <ethernetif_init+0x50>)
 8004130:	f011 f948 	bl	80153c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2273      	movs	r2, #115	@ 0x73
 8004138:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2274      	movs	r2, #116	@ 0x74
 8004140:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a09      	ldr	r2, [pc, #36]	@ (800416c <ethernetif_init+0x54>)
 8004148:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a08      	ldr	r2, [pc, #32]	@ (8004170 <ethernetif_init+0x58>)
 800414e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fd83 	bl	8003c5c <low_level_init>

  return ERR_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	08016740 	.word	0x08016740
 8004164:	0801675c 	.word	0x0801675c
 8004168:	0801676c 	.word	0x0801676c
 800416c:	0801310d 	.word	0x0801310d
 8004170:	08003f35 	.word	0x08003f35

08004174 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	4809      	ldr	r0, [pc, #36]	@ (80041a8 <pbuf_free_custom+0x34>)
 8004184:	f006 f9d0 	bl	800a528 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004188:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <pbuf_free_custom+0x38>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d107      	bne.n	80041a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004190:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <pbuf_free_custom+0x38>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004196:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <pbuf_free_custom+0x3c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fc0c 	bl	80049b8 <osSemaphoreRelease>
  }
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	08019aec 	.word	0x08019aec
 80041ac:	20004fb8 	.word	0x20004fb8
 80041b0:	20004fbc 	.word	0x20004fbc

080041b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80041b8:	f7fc fe9e 	bl	8000ef8 <HAL_GetTick>
 80041bc:	4603      	mov	r3, r0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	@ 0x38
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a44      	ldr	r2, [pc, #272]	@ (80042f4 <HAL_ETH_MspInit+0x130>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	f040 8081 	bne.w	80042ea <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80041e8:	4b43      	ldr	r3, [pc, #268]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 80041ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ec:	4a42      	ldr	r2, [pc, #264]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 80041ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041f4:	4b40      	ldr	r3, [pc, #256]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	4b3d      	ldr	r3, [pc, #244]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	4a3c      	ldr	r2, [pc, #240]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 8004206:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800420a:	6313      	str	r3, [r2, #48]	@ 0x30
 800420c:	4b3a      	ldr	r3, [pc, #232]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4b37      	ldr	r3, [pc, #220]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	4a36      	ldr	r2, [pc, #216]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 800421e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004222:	6313      	str	r3, [r2, #48]	@ 0x30
 8004224:	4b34      	ldr	r3, [pc, #208]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004230:	4b31      	ldr	r3, [pc, #196]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	4a30      	ldr	r2, [pc, #192]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 8004236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800423a:	6313      	str	r3, [r2, #48]	@ 0x30
 800423c:	4b2e      	ldr	r3, [pc, #184]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004248:	4b2b      	ldr	r3, [pc, #172]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 800424e:	f043 0304 	orr.w	r3, r3, #4
 8004252:	6313      	str	r3, [r2, #48]	@ 0x30
 8004254:	4b28      	ldr	r3, [pc, #160]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004260:	4b25      	ldr	r3, [pc, #148]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	4a24      	ldr	r2, [pc, #144]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6313      	str	r3, [r2, #48]	@ 0x30
 800426c:	4b22      	ldr	r3, [pc, #136]	@ (80042f8 <HAL_ETH_MspInit+0x134>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8004278:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	2302      	movs	r3, #2
 8004280:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004286:	2303      	movs	r3, #3
 8004288:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800428a:	230b      	movs	r3, #11
 800428c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800428e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004292:	4619      	mov	r1, r3
 8004294:	4819      	ldr	r0, [pc, #100]	@ (80042fc <HAL_ETH_MspInit+0x138>)
 8004296:	f7fe f9c3 	bl	8002620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800429a:	2332      	movs	r3, #50	@ 0x32
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429e:	2302      	movs	r3, #2
 80042a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a6:	2303      	movs	r3, #3
 80042a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042aa:	230b      	movs	r3, #11
 80042ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042b2:	4619      	mov	r1, r3
 80042b4:	4812      	ldr	r0, [pc, #72]	@ (8004300 <HAL_ETH_MspInit+0x13c>)
 80042b6:	f7fe f9b3 	bl	8002620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80042ba:	2386      	movs	r3, #134	@ 0x86
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042be:	2302      	movs	r3, #2
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c6:	2303      	movs	r3, #3
 80042c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042ca:	230b      	movs	r3, #11
 80042cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042d2:	4619      	mov	r1, r3
 80042d4:	480b      	ldr	r0, [pc, #44]	@ (8004304 <HAL_ETH_MspInit+0x140>)
 80042d6:	f7fe f9a3 	bl	8002620 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2105      	movs	r1, #5
 80042de:	203d      	movs	r0, #61	@ 0x3d
 80042e0:	f7fc fefe 	bl	80010e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80042e4:	203d      	movs	r0, #61	@ 0x3d
 80042e6:	f7fc ff17 	bl	8001118 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80042ea:	bf00      	nop
 80042ec:	3738      	adds	r7, #56	@ 0x38
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40028000 	.word	0x40028000
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40021800 	.word	0x40021800
 8004300:	40020800 	.word	0x40020800
 8004304:	40020000 	.word	0x40020000

08004308 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800430c:	4802      	ldr	r0, [pc, #8]	@ (8004318 <ETH_PHY_IO_Init+0x10>)
 800430e:	f7fd fd0b 	bl	8001d28 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20004fc4 	.word	0x20004fc4

0800431c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	68f9      	ldr	r1, [r7, #12]
 800433e:	4807      	ldr	r0, [pc, #28]	@ (800435c <ETH_PHY_IO_ReadReg+0x30>)
 8004340:	f7fd fb4c 	bl	80019dc <HAL_ETH_ReadPHYRegister>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295
 800434e:	e000      	b.n	8004352 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20004fc4 	.word	0x20004fc4

08004360 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	4807      	ldr	r0, [pc, #28]	@ (8004390 <ETH_PHY_IO_WriteReg+0x30>)
 8004374:	f7fd fb7d 	bl	8001a72 <HAL_ETH_WritePHYRegister>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	e000      	b.n	8004386 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20004fc4 	.word	0x20004fc4

08004394 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004398:	f7fc fdae 	bl	8000ef8 <HAL_GetTick>
 800439c:	4603      	mov	r3, r0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b0a0      	sub	sp, #128	@ 0x80
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	2264      	movs	r2, #100	@ 0x64
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f011 f8b8 	bl	801552a <memset>
  int32_t PHYLinkState = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043c2:	2300      	movs	r3, #0
 80043c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043c6:	2300      	movs	r3, #0
 80043c8:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80043ce:	483a      	ldr	r0, [pc, #232]	@ (80044b8 <ethernet_link_thread+0x114>)
 80043d0:	f7fc fcea 	bl	8000da8 <LAN8742_GetLinkState>
 80043d4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80043d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <ethernet_link_thread+0x5e>
 80043e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	dc09      	bgt.n	8004402 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80043ee:	4833      	ldr	r0, [pc, #204]	@ (80044bc <ethernet_link_thread+0x118>)
 80043f0:	f7fc ffaa 	bl	8001348 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80043f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043f6:	f006 fb1b 	bl	800aa30 <netif_set_down>
    netif_set_link_down(netif);
 80043fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043fc:	f006 fb7e 	bl	800aafc <netif_set_link_down>
 8004400:	e055      	b.n	80044ae <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004404:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d14e      	bne.n	80044ae <ethernet_link_thread+0x10a>
 8004410:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004412:	2b01      	cmp	r3, #1
 8004414:	dd4b      	ble.n	80044ae <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004418:	3b02      	subs	r3, #2
 800441a:	2b03      	cmp	r3, #3
 800441c:	d82a      	bhi.n	8004474 <ethernet_link_thread+0xd0>
 800441e:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <ethernet_link_thread+0x80>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004435 	.word	0x08004435
 8004428:	08004447 	.word	0x08004447
 800442c:	08004457 	.word	0x08004457
 8004430:	08004467 	.word	0x08004467
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004434:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004438:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800443a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800443e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004440:	2301      	movs	r3, #1
 8004442:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004444:	e017      	b.n	8004476 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004446:	2300      	movs	r3, #0
 8004448:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800444a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800444e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004450:	2301      	movs	r3, #1
 8004452:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004454:	e00f      	b.n	8004476 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004456:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800445a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800445c:	2300      	movs	r3, #0
 800445e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004460:	2301      	movs	r3, #1
 8004462:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004464:	e007      	b.n	8004476 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004466:	2300      	movs	r3, #0
 8004468:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800446a:	2300      	movs	r3, #0
 800446c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004472:	e000      	b.n	8004476 <ethernet_link_thread+0xd2>
    default:
      break;
 8004474:	bf00      	nop
    }

    if(linkchanged)
 8004476:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d018      	beq.n	80044ae <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	4619      	mov	r1, r3
 8004482:	480e      	ldr	r0, [pc, #56]	@ (80044bc <ethernet_link_thread+0x118>)
 8004484:	f7fd fb3e 	bl	8001b04 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800448a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800448c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	4619      	mov	r1, r3
 8004496:	4809      	ldr	r0, [pc, #36]	@ (80044bc <ethernet_link_thread+0x118>)
 8004498:	f7fd fc2b 	bl	8001cf2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800449c:	4807      	ldr	r0, [pc, #28]	@ (80044bc <ethernet_link_thread+0x118>)
 800449e:	f7fc fee3 	bl	8001268 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80044a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044a4:	f006 fa58 	bl	800a958 <netif_set_up>
      netif_set_link_up(netif);
 80044a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044aa:	f006 faf3 	bl	800aa94 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80044ae:	2064      	movs	r0, #100	@ 0x64
 80044b0:	f000 f951 	bl	8004756 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80044b4:	e78b      	b.n	80043ce <ethernet_link_thread+0x2a>
 80044b6:	bf00      	nop
 80044b8:	200050ac 	.word	0x200050ac
 80044bc:	20004fc4 	.word	0x20004fc4

080044c0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80044c8:	4812      	ldr	r0, [pc, #72]	@ (8004514 <HAL_ETH_RxAllocateCallback+0x54>)
 80044ca:	f005 ffb9 	bl	800a440 <memp_malloc_pool>
 80044ce:	60f8      	str	r0, [r7, #12]
  if (p)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d014      	beq.n	8004500 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f103 0220 	add.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004518 <HAL_ETH_RxAllocateCallback+0x58>)
 80044e4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80044ee:	9201      	str	r2, [sp, #4]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2241      	movs	r2, #65	@ 0x41
 80044f6:	2100      	movs	r1, #0
 80044f8:	2000      	movs	r0, #0
 80044fa:	f006 fd23 	bl	800af44 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80044fe:	e005      	b.n	800450c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004500:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	08019aec 	.word	0x08019aec
 8004518:	08004175 	.word	0x08004175
 800451c:	20004fb8 	.word	0x20004fb8

08004520 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3b20      	subs	r3, #32
 800453e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2200      	movs	r2, #0
 800454a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e003      	b.n	800456a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	e009      	b.n	800458c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	891a      	ldrh	r2, [r3, #8]
 800457c:	887b      	ldrh	r3, [r7, #2]
 800457e:	4413      	add	r3, r2
 8004580:	b29a      	uxth	r2, r3
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f2      	bne.n	8004578 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff fafc 	bl	8003b94 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800459c:	bf00      	nop
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f006 fe83 	bl	800b2b8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 80045c4:	4b15      	ldr	r3, [pc, #84]	@ (800461c <RMII_Thread+0x60>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80045d0:	2000      	movs	r0, #0
 80045d2:	f000 f8b4 	bl	800473e <osThreadTerminate>
 80045d6:	e7f5      	b.n	80045c4 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80045d8:	4b10      	ldr	r3, [pc, #64]	@ (800461c <RMII_Thread+0x60>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80045e0:	2b0a      	cmp	r3, #10
 80045e2:	d916      	bls.n	8004612 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80045e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004620 <RMII_Thread+0x64>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004620 <RMII_Thread+0x64>)
 80045ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045ee:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <RMII_Thread+0x64>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004620 <RMII_Thread+0x64>)
 80045f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045fa:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 80045fc:	4b07      	ldr	r3, [pc, #28]	@ (800461c <RMII_Thread+0x60>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <RMII_Thread+0x60>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004610:	e7d8      	b.n	80045c4 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8004612:	20c8      	movs	r0, #200	@ 0xc8
 8004614:	f000 f89f 	bl	8004756 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8004618:	e7d4      	b.n	80045c4 <RMII_Thread+0x8>
 800461a:	bf00      	nop
 800461c:	20004fc4 	.word	0x20004fc4
 8004620:	40013800 	.word	0x40013800

08004624 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004636:	2b84      	cmp	r3, #132	@ 0x84
 8004638:	d005      	beq.n	8004646 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800463a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	3303      	adds	r3, #3
 8004644:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004646:	68fb      	ldr	r3, [r7, #12]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465a:	f3ef 8305 	mrs	r3, IPSR
 800465e:	607b      	str	r3, [r7, #4]
  return(result);
 8004660:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004662:	2b00      	cmp	r3, #0
 8004664:	bf14      	ite	ne
 8004666:	2301      	movne	r3, #1
 8004668:	2300      	moveq	r3, #0
 800466a:	b2db      	uxtb	r3, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800467c:	f001 fe4c 	bl	8006318 <vTaskStartScheduler>
  
  return osOK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	bd80      	pop	{r7, pc}

08004686 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800468a:	f7ff ffe3 	bl	8004654 <inHandlerMode>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004694:	f001 ff6c 	bl	8006570 <xTaskGetTickCountFromISR>
 8004698:	4603      	mov	r3, r0
 800469a:	e002      	b.n	80046a2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800469c:	f001 ff58 	bl	8006550 <xTaskGetTickCount>
 80046a0:	4603      	mov	r3, r0
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a8:	b089      	sub	sp, #36	@ 0x24
 80046aa:	af04      	add	r7, sp, #16
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <osThreadCreate+0x54>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01c      	beq.n	80046fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685c      	ldr	r4, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691e      	ldr	r6, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ffa6 	bl	8004624 <makeFreeRtosPriority>
 80046d8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046e2:	9202      	str	r2, [sp, #8]
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	9100      	str	r1, [sp, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4632      	mov	r2, r6
 80046ec:	4629      	mov	r1, r5
 80046ee:	4620      	mov	r0, r4
 80046f0:	f001 fb90 	bl	8005e14 <xTaskCreateStatic>
 80046f4:	4603      	mov	r3, r0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e01c      	b.n	8004734 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685c      	ldr	r4, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004706:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ff88 	bl	8004624 <makeFreeRtosPriority>
 8004714:	4602      	mov	r2, r0
 8004716:	f107 030c 	add.w	r3, r7, #12
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	9200      	str	r2, [sp, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	4632      	mov	r2, r6
 8004722:	4629      	mov	r1, r5
 8004724:	4620      	mov	r0, r4
 8004726:	f001 fbdb 	bl	8005ee0 <xTaskCreate>
 800472a:	4603      	mov	r3, r0
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800473e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 fd1c 	bl	8006184 <vTaskDelete>
  return osOK;
 800474c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <osDelay+0x16>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	e000      	b.n	800476e <osDelay+0x18>
 800476c:	2301      	movs	r3, #1
 800476e:	4618      	mov	r0, r3
 8004770:	f001 fd9a 	bl	80062a8 <vTaskDelay>
  
  return osOK;
 8004774:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4619      	mov	r1, r3
 8004794:	2001      	movs	r0, #1
 8004796:	f000 fc9a 	bl	80050ce <xQueueCreateMutexStatic>
 800479a:	4603      	mov	r3, r0
 800479c:	e003      	b.n	80047a6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800479e:	2001      	movs	r0, #1
 80047a0:	f000 fc7d 	bl	800509e <xQueueCreateMutex>
 80047a4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <osMutexWait+0x18>
    return osErrorParameter;
 80047c4:	2380      	movs	r3, #128	@ 0x80
 80047c6:	e03a      	b.n	800483e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d103      	bne.n	80047dc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80047d4:	f04f 33ff 	mov.w	r3, #4294967295
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e009      	b.n	80047f0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <osMutexWait+0x40>
      ticks = 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80047f0:	f7ff ff30 	bl	8004654 <inHandlerMode>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	461a      	mov	r2, r3
 8004800:	2100      	movs	r1, #0
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 f8c4 	bl	8005990 <xQueueReceiveFromISR>
 8004808:	4603      	mov	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <osMutexWait+0x62>
      return osErrorOS;
 800480e:	23ff      	movs	r3, #255	@ 0xff
 8004810:	e015      	b.n	800483e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <osMutexWait+0x8c>
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <osMutexWait+0x98>)
 800481a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	e008      	b.n	800483c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800482a:	68f9      	ldr	r1, [r7, #12]
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 ff97 	bl	8005760 <xQueueSemaphoreTake>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <osMutexWait+0x8c>
    return osErrorOS;
 8004838:	23ff      	movs	r3, #255	@ 0xff
 800483a:	e000      	b.n	800483e <osMutexWait+0x8e>
  }
  
  return osOK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800485c:	f7ff fefa 	bl	8004654 <inHandlerMode>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d016      	beq.n	8004894 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fdf6 	bl	800545e <xQueueGiveFromISR>
 8004872:	4603      	mov	r3, r0
 8004874:	2b01      	cmp	r3, #1
 8004876:	d001      	beq.n	800487c <osMutexRelease+0x30>
      return osErrorOS;
 8004878:	23ff      	movs	r3, #255	@ 0xff
 800487a:	e017      	b.n	80048ac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d013      	beq.n	80048aa <osMutexRelease+0x5e>
 8004882:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <osMutexRelease+0x68>)
 8004884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	e00a      	b.n	80048aa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	2100      	movs	r1, #0
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fc32 	bl	8005104 <xQueueGenericSend>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d001      	beq.n	80048aa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80048a6:	23ff      	movs	r3, #255	@ 0xff
 80048a8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af02      	add	r7, sp, #8
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00f      	beq.n	80048ea <osSemaphoreCreate+0x32>
    if (count == 1) {
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10a      	bne.n	80048e6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2203      	movs	r2, #3
 80048d6:	9200      	str	r2, [sp, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	2100      	movs	r1, #0
 80048dc:	2001      	movs	r0, #1
 80048de:	f000 fadb 	bl	8004e98 <xQueueGenericCreateStatic>
 80048e2:	4603      	mov	r3, r0
 80048e4:	e016      	b.n	8004914 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e014      	b.n	8004914 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d110      	bne.n	8004912 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80048f0:	2203      	movs	r2, #3
 80048f2:	2100      	movs	r1, #0
 80048f4:	2001      	movs	r0, #1
 80048f6:	f000 fb56 	bl	8004fa6 <xQueueGenericCreate>
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <osSemaphoreCreate+0x56>
 8004902:	2300      	movs	r3, #0
 8004904:	2200      	movs	r2, #0
 8004906:	2100      	movs	r1, #0
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fbfb 	bl	8005104 <xQueueGenericSend>
      return sema;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	e000      	b.n	8004914 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004912:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004930:	2380      	movs	r3, #128	@ 0x80
 8004932:	e03a      	b.n	80049aa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d103      	bne.n	8004948 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004940:	f04f 33ff 	mov.w	r3, #4294967295
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	e009      	b.n	800495c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d006      	beq.n	800495c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <osSemaphoreWait+0x40>
      ticks = 1;
 8004958:	2301      	movs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800495c:	f7ff fe7a 	bl	8004654 <inHandlerMode>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d017      	beq.n	8004996 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004966:	f107 0308 	add.w	r3, r7, #8
 800496a:	461a      	mov	r2, r3
 800496c:	2100      	movs	r1, #0
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 f80e 	bl	8005990 <xQueueReceiveFromISR>
 8004974:	4603      	mov	r3, r0
 8004976:	2b01      	cmp	r3, #1
 8004978:	d001      	beq.n	800497e <osSemaphoreWait+0x62>
      return osErrorOS;
 800497a:	23ff      	movs	r3, #255	@ 0xff
 800497c:	e015      	b.n	80049aa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d011      	beq.n	80049a8 <osSemaphoreWait+0x8c>
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <osSemaphoreWait+0x98>)
 8004986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	e008      	b.n	80049a8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fee1 	bl	8005760 <xQueueSemaphoreTake>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d001      	beq.n	80049a8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80049a4:	23ff      	movs	r3, #255	@ 0xff
 80049a6:	e000      	b.n	80049aa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80049c8:	f7ff fe44 	bl	8004654 <inHandlerMode>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	4619      	mov	r1, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fd40 	bl	800545e <xQueueGiveFromISR>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d001      	beq.n	80049e8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80049e4:	23ff      	movs	r3, #255	@ 0xff
 80049e6:	e017      	b.n	8004a18 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d013      	beq.n	8004a16 <osSemaphoreRelease+0x5e>
 80049ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <osSemaphoreRelease+0x68>)
 80049f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	e00a      	b.n	8004a16 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004a00:	2300      	movs	r3, #0
 8004a02:	2200      	movs	r2, #0
 8004a04:	2100      	movs	r1, #0
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fb7c 	bl	8005104 <xQueueGenericSend>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d001      	beq.n	8004a16 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004a12:	23ff      	movs	r3, #255	@ 0xff
 8004a14:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	e000ed04 	.word	0xe000ed04

08004a24 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004a2c:	f7ff fe12 	bl	8004654 <inHandlerMode>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004a36:	2382      	movs	r3, #130	@ 0x82
 8004a38:	e003      	b.n	8004a42 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f001 f872 	bl	8005b24 <vQueueDelete>

  return osOK; 
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004a4a:	b590      	push	{r4, r7, lr}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af02      	add	r7, sp, #8
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <osMessageCreate+0x36>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2400      	movs	r4, #0
 8004a76:	9400      	str	r4, [sp, #0]
 8004a78:	f000 fa0e 	bl	8004e98 <xQueueGenericCreateStatic>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	e008      	b.n	8004a92 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f000 fa8b 	bl	8004fa6 <xQueueGenericCreate>
 8004a90:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd90      	pop	{r4, r7, pc}
	...

08004a9c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <osMessagePut+0x1e>
    ticks = 1;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004aba:	f7ff fdcb 	bl	8004654 <inHandlerMode>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d018      	beq.n	8004af6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004ac4:	f107 0210 	add.w	r2, r7, #16
 8004ac8:	f107 0108 	add.w	r1, r7, #8
 8004acc:	2300      	movs	r3, #0
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fc22 	bl	8005318 <xQueueGenericSendFromISR>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d001      	beq.n	8004ade <osMessagePut+0x42>
      return osErrorOS;
 8004ada:	23ff      	movs	r3, #255	@ 0xff
 8004adc:	e018      	b.n	8004b10 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d014      	beq.n	8004b0e <osMessagePut+0x72>
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b18 <osMessagePut+0x7c>)
 8004ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	e00b      	b.n	8004b0e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004af6:	f107 0108 	add.w	r1, r7, #8
 8004afa:	2300      	movs	r3, #0
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fb00 	bl	8005104 <xQueueGenericSend>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <osMessagePut+0x72>
      return osErrorOS;
 8004b0a:	23ff      	movs	r3, #255	@ 0xff
 8004b0c:	e000      	b.n	8004b10 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b08b      	sub	sp, #44	@ 0x2c
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004b36:	2380      	movs	r3, #128	@ 0x80
 8004b38:	617b      	str	r3, [r7, #20]
    return event;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	461c      	mov	r4, r3
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b4a:	e054      	b.n	8004bf6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5a:	d103      	bne.n	8004b64 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b62:	e009      	b.n	8004b78 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d006      	beq.n	8004b78 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <osMessageGet+0x5c>
      ticks = 1;
 8004b74:	2301      	movs	r3, #1
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004b78:	f7ff fd6c 	bl	8004654 <inHandlerMode>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004b82:	f107 0220 	add.w	r2, r7, #32
 8004b86:	f107 0314 	add.w	r3, r7, #20
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	68b8      	ldr	r0, [r7, #8]
 8004b90:	f000 fefe 	bl	8005990 <xQueueReceiveFromISR>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d102      	bne.n	8004ba0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e001      	b.n	8004ba4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01d      	beq.n	8004be6 <osMessageGet+0xca>
 8004baa:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <osMessageGet+0xe4>)
 8004bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	e014      	b.n	8004be6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	68b8      	ldr	r0, [r7, #8]
 8004bc8:	f000 fce2 	bl	8005590 <xQueueReceive>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d102      	bne.n	8004bd8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e006      	b.n	8004be6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <osMessageGet+0xc6>
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <osMessageGet+0xc8>
 8004be2:	2340      	movs	r3, #64	@ 0x40
 8004be4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	461c      	mov	r4, r3
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	372c      	adds	r7, #44	@ 0x2c
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004c0c:	f7ff fd22 	bl	8004654 <inHandlerMode>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d004      	beq.n	8004c20 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 ff63 	bl	8005ae2 <uxQueueMessagesWaitingFromISR>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	e003      	b.n	8004c28 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 ff3d 	bl	8005aa0 <uxQueueMessagesWaiting>
 8004c26:	4603      	mov	r3, r0
  }
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004c38:	f7ff fd0c 	bl	8004654 <inHandlerMode>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <osMessageDelete+0x16>
    return osErrorISR;
 8004c42:	2382      	movs	r3, #130	@ 0x82
 8004c44:	e003      	b.n	8004c4e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 ff6c 	bl	8005b24 <vQueueDelete>

  return osOK; 
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f103 0208 	add.w	r2, r3, #8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f103 0208 	add.w	r2, r3, #8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f103 0208 	add.w	r2, r3, #8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	601a      	str	r2, [r3, #0]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d103      	bne.n	8004d18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e00c      	b.n	8004d32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e002      	b.n	8004d26 <vListInsert+0x2e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d2f6      	bcs.n	8004d20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	601a      	str	r2, [r3, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6892      	ldr	r2, [r2, #8]
 8004d80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6852      	ldr	r2, [r2, #4]
 8004d8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d103      	bne.n	8004d9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10d      	bne.n	8004df0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	b672      	cpsid	i
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	b662      	cpsie	i
 8004de8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004df0:	f002 fa3c 	bl	800726c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfc:	68f9      	ldr	r1, [r7, #12]
 8004dfe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	441a      	add	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	3b01      	subs	r3, #1
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	22ff      	movs	r2, #255	@ 0xff
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	22ff      	movs	r2, #255	@ 0xff
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d114      	bne.n	8004e70 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01a      	beq.n	8004e84 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3310      	adds	r3, #16
 8004e52:	4618      	mov	r0, r3
 8004e54:	f001 fce8 	bl	8006828 <xTaskRemoveFromEventList>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d012      	beq.n	8004e84 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <xQueueGenericReset+0xd4>)
 8004e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	e009      	b.n	8004e84 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3310      	adds	r3, #16
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff feee 	bl	8004c56 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3324      	adds	r3, #36	@ 0x24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fee9 	bl	8004c56 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e84:	f002 fa28 	bl	80072d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e88:	2301      	movs	r3, #1
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08e      	sub	sp, #56	@ 0x38
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10d      	bne.n	8004ec8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	b672      	cpsid	i
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	b662      	cpsie	i
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10d      	bne.n	8004eea <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	b672      	cpsid	i
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	b662      	cpsie	i
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	e7fd      	b.n	8004ee6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <xQueueGenericCreateStatic+0x5e>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <xQueueGenericCreateStatic+0x62>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueGenericCreateStatic+0x64>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10d      	bne.n	8004f1c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	b672      	cpsid	i
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	b662      	cpsie	i
 8004f14:	623b      	str	r3, [r7, #32]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <xQueueGenericCreateStatic+0x90>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <xQueueGenericCreateStatic+0x94>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <xQueueGenericCreateStatic+0x96>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10d      	bne.n	8004f4e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	b672      	cpsid	i
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	b662      	cpsie	i
 8004f46:	61fb      	str	r3, [r7, #28]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f4e:	2348      	movs	r3, #72	@ 0x48
 8004f50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b48      	cmp	r3, #72	@ 0x48
 8004f56:	d00d      	beq.n	8004f74 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5c:	b672      	cpsid	i
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	b662      	cpsie	i
 8004f6c:	61bb      	str	r3, [r7, #24]
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	e7fd      	b.n	8004f70 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00d      	beq.n	8004f9c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f848 	bl	800502c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3730      	adds	r7, #48	@ 0x30
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b08a      	sub	sp, #40	@ 0x28
 8004faa:	af02      	add	r7, sp, #8
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <xQueueGenericCreate+0x30>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	b672      	cpsid	i
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	b662      	cpsie	i
 8004fce:	613b      	str	r3, [r7, #16]
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	e7fd      	b.n	8004fd2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e004      	b.n	8004fec <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3348      	adds	r3, #72	@ 0x48
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f002 fa69 	bl	80074c8 <pvPortMalloc>
 8004ff6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d011      	beq.n	8005022 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3348      	adds	r3, #72	@ 0x48
 8005006:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005010:	79fa      	ldrb	r2, [r7, #7]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f805 	bl	800502c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005022:	69bb      	ldr	r3, [r7, #24]
	}
 8005024:	4618      	mov	r0, r3
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e002      	b.n	800504e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800505a:	2101      	movs	r1, #1
 800505c:	69b8      	ldr	r0, [r7, #24]
 800505e:	f7ff feaf 	bl	8004dc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00e      	beq.n	8005096 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800508a:	2300      	movs	r3, #0
 800508c:	2200      	movs	r2, #0
 800508e:	2100      	movs	r1, #0
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f837 	bl	8005104 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	4603      	mov	r3, r0
 80050a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	461a      	mov	r2, r3
 80050b4:	6939      	ldr	r1, [r7, #16]
 80050b6:	6978      	ldr	r0, [r7, #20]
 80050b8:	f7ff ff75 	bl	8004fa6 <xQueueGenericCreate>
 80050bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff ffd3 	bl	800506a <prvInitialiseMutex>

		return xNewQueue;
 80050c4:	68fb      	ldr	r3, [r7, #12]
	}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b088      	sub	sp, #32
 80050d2:	af02      	add	r7, sp, #8
 80050d4:	4603      	mov	r3, r0
 80050d6:	6039      	str	r1, [r7, #0]
 80050d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80050da:	2301      	movs	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2200      	movs	r2, #0
 80050ea:	6939      	ldr	r1, [r7, #16]
 80050ec:	6978      	ldr	r0, [r7, #20]
 80050ee:	f7ff fed3 	bl	8004e98 <xQueueGenericCreateStatic>
 80050f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff ffb8 	bl	800506a <prvInitialiseMutex>

		return xNewQueue;
 80050fa:	68fb      	ldr	r3, [r7, #12]
	}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08e      	sub	sp, #56	@ 0x38
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005112:	2300      	movs	r3, #0
 8005114:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10d      	bne.n	800513c <xQueueGenericSend+0x38>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005124:	b672      	cpsid	i
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	b662      	cpsie	i
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <xQueueGenericSend+0x46>
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <xQueueGenericSend+0x4a>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <xQueueGenericSend+0x4c>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <xQueueGenericSend+0x6c>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	b672      	cpsid	i
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	b662      	cpsie	i
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800516a:	bf00      	nop
 800516c:	bf00      	nop
 800516e:	e7fd      	b.n	800516c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d103      	bne.n	800517e <xQueueGenericSend+0x7a>
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <xQueueGenericSend+0x7e>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <xQueueGenericSend+0x80>
 8005182:	2300      	movs	r3, #0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10d      	bne.n	80051a4 <xQueueGenericSend+0xa0>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	b672      	cpsid	i
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	b662      	cpsie	i
 800519c:	623b      	str	r3, [r7, #32]
}
 800519e:	bf00      	nop
 80051a0:	bf00      	nop
 80051a2:	e7fd      	b.n	80051a0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051a4:	f001 fd0e 	bl	8006bc4 <xTaskGetSchedulerState>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <xQueueGenericSend+0xb0>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <xQueueGenericSend+0xb4>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <xQueueGenericSend+0xb6>
 80051b8:	2300      	movs	r3, #0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10d      	bne.n	80051da <xQueueGenericSend+0xd6>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	b672      	cpsid	i
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	b662      	cpsie	i
 80051d2:	61fb      	str	r3, [r7, #28]
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051da:	f002 f847 	bl	800726c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <xQueueGenericSend+0xec>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d129      	bne.n	8005244 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051f6:	f000 fcd3 	bl	8005ba0 <prvCopyDataToQueue>
 80051fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	3324      	adds	r3, #36	@ 0x24
 8005208:	4618      	mov	r0, r3
 800520a:	f001 fb0d 	bl	8006828 <xTaskRemoveFromEventList>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d013      	beq.n	800523c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005214:	4b3f      	ldr	r3, [pc, #252]	@ (8005314 <xQueueGenericSend+0x210>)
 8005216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	e00a      	b.n	800523c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800522c:	4b39      	ldr	r3, [pc, #228]	@ (8005314 <xQueueGenericSend+0x210>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800523c:	f002 f84c 	bl	80072d8 <vPortExitCritical>
				return pdPASS;
 8005240:	2301      	movs	r3, #1
 8005242:	e063      	b.n	800530c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800524a:	f002 f845 	bl	80072d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800524e:	2300      	movs	r3, #0
 8005250:	e05c      	b.n	800530c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	4618      	mov	r0, r3
 800525e:	f001 fb49 	bl	80068f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005262:	2301      	movs	r3, #1
 8005264:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005266:	f002 f837 	bl	80072d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800526a:	f001 f8c3 	bl	80063f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800526e:	f001 fffd 	bl	800726c <vPortEnterCritical>
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005278:	b25b      	sxtb	r3, r3
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d103      	bne.n	8005288 <xQueueGenericSend+0x184>
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800528e:	b25b      	sxtb	r3, r3
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d103      	bne.n	800529e <xQueueGenericSend+0x19a>
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800529e:	f002 f81b 	bl	80072d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052a2:	1d3a      	adds	r2, r7, #4
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	4611      	mov	r1, r2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 fb38 	bl	8006920 <xTaskCheckForTimeOut>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d124      	bne.n	8005300 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052b8:	f000 fd6a 	bl	8005d90 <prvIsQueueFull>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d018      	beq.n	80052f4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	3310      	adds	r3, #16
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 fa84 	bl	80067d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052d2:	f000 fcf5 	bl	8005cc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052d6:	f001 f89b 	bl	8006410 <xTaskResumeAll>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f47f af7c 	bne.w	80051da <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <xQueueGenericSend+0x210>)
 80052e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	e772      	b.n	80051da <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052f6:	f000 fce3 	bl	8005cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052fa:	f001 f889 	bl	8006410 <xTaskResumeAll>
 80052fe:	e76c      	b.n	80051da <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005302:	f000 fcdd 	bl	8005cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005306:	f001 f883 	bl	8006410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800530a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800530c:	4618      	mov	r0, r3
 800530e:	3738      	adds	r7, #56	@ 0x38
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	@ 0x38
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10d      	bne.n	800534c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	b672      	cpsid	i
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	b662      	cpsie	i
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	e7fd      	b.n	8005348 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <xQueueGenericSendFromISR+0x42>
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <xQueueGenericSendFromISR+0x46>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <xQueueGenericSendFromISR+0x48>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10d      	bne.n	8005380 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	b672      	cpsid	i
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	b662      	cpsie	i
 8005378:	623b      	str	r3, [r7, #32]
}
 800537a:	bf00      	nop
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d103      	bne.n	800538e <xQueueGenericSendFromISR+0x76>
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <xQueueGenericSendFromISR+0x7a>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xQueueGenericSendFromISR+0x7c>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539c:	b672      	cpsid	i
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	b662      	cpsie	i
 80053ac:	61fb      	str	r3, [r7, #28]
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053b4:	f002 f842 	bl	800743c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053b8:	f3ef 8211 	mrs	r2, BASEPRI
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	b672      	cpsid	i
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	b662      	cpsie	i
 80053d0:	61ba      	str	r2, [r7, #24]
 80053d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <xQueueGenericSendFromISR+0xd2>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d12c      	bne.n	8005444 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053fa:	f000 fbd1 	bl	8005ba0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d112      	bne.n	800542e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d016      	beq.n	800543e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005412:	3324      	adds	r3, #36	@ 0x24
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fa07 	bl	8006828 <xTaskRemoveFromEventList>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e007      	b.n	800543e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800542e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005432:	3301      	adds	r3, #1
 8005434:	b2db      	uxtb	r3, r3
 8005436:	b25a      	sxtb	r2, r3
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800543e:	2301      	movs	r3, #1
 8005440:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005442:	e001      	b.n	8005448 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005444:	2300      	movs	r3, #0
 8005446:	637b      	str	r3, [r7, #52]	@ 0x34
 8005448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005452:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005456:	4618      	mov	r0, r3
 8005458:	3738      	adds	r7, #56	@ 0x38
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b08e      	sub	sp, #56	@ 0x38
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10d      	bne.n	800548e <xQueueGiveFromISR+0x30>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	b672      	cpsid	i
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	b662      	cpsie	i
 8005486:	623b      	str	r3, [r7, #32]
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	e7fd      	b.n	800548a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <xQueueGiveFromISR+0x54>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	b672      	cpsid	i
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	b662      	cpsie	i
 80054aa:	61fb      	str	r3, [r7, #28]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d103      	bne.n	80054c2 <xQueueGiveFromISR+0x64>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <xQueueGiveFromISR+0x68>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <xQueueGiveFromISR+0x6a>
 80054c6:	2300      	movs	r3, #0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10d      	bne.n	80054e8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d0:	b672      	cpsid	i
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	b662      	cpsie	i
 80054e0:	61bb      	str	r3, [r7, #24]
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054e8:	f001 ffa8 	bl	800743c <vPortValidateInterruptPriority>
	__asm volatile
 80054ec:	f3ef 8211 	mrs	r2, BASEPRI
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	b672      	cpsid	i
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	b662      	cpsie	i
 8005504:	617a      	str	r2, [r7, #20]
 8005506:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005508:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800550a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005518:	429a      	cmp	r2, r3
 800551a:	d22b      	bcs.n	8005574 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800551c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800552e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d112      	bne.n	800555e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d016      	beq.n	800556e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	3324      	adds	r3, #36	@ 0x24
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f96f 	bl	8006828 <xTaskRemoveFromEventList>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e007      	b.n	800556e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800555e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005562:	3301      	adds	r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	b25a      	sxtb	r2, r3
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800556e:	2301      	movs	r3, #1
 8005570:	637b      	str	r3, [r7, #52]	@ 0x34
 8005572:	e001      	b.n	8005578 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005574:	2300      	movs	r3, #0
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
 8005578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f383 8811 	msr	BASEPRI, r3
}
 8005582:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005586:	4618      	mov	r0, r3
 8005588:	3738      	adds	r7, #56	@ 0x38
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	@ 0x30
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800559c:	2300      	movs	r3, #0
 800559e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10d      	bne.n	80055c6 <xQueueReceive+0x36>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	b672      	cpsid	i
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	b662      	cpsie	i
 80055be:	623b      	str	r3, [r7, #32]
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d103      	bne.n	80055d4 <xQueueReceive+0x44>
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <xQueueReceive+0x48>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <xQueueReceive+0x4a>
 80055d8:	2300      	movs	r3, #0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <xQueueReceive+0x6a>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	b672      	cpsid	i
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	b662      	cpsie	i
 80055f2:	61fb      	str	r3, [r7, #28]
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	e7fd      	b.n	80055f6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055fa:	f001 fae3 	bl	8006bc4 <xTaskGetSchedulerState>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <xQueueReceive+0x7a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <xQueueReceive+0x7e>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <xQueueReceive+0x80>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10d      	bne.n	8005630 <xQueueReceive+0xa0>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005618:	b672      	cpsid	i
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	b662      	cpsie	i
 8005628:	61bb      	str	r3, [r7, #24]
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	e7fd      	b.n	800562c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005630:	f001 fe1c 	bl	800726c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01f      	beq.n	8005680 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005644:	f000 fb16 	bl	8005c74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00f      	beq.n	8005678 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	3310      	adds	r3, #16
 800565c:	4618      	mov	r0, r3
 800565e:	f001 f8e3 	bl	8006828 <xTaskRemoveFromEventList>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005668:	4b3c      	ldr	r3, [pc, #240]	@ (800575c <xQueueReceive+0x1cc>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005678:	f001 fe2e 	bl	80072d8 <vPortExitCritical>
				return pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	e069      	b.n	8005754 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d103      	bne.n	800568e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005686:	f001 fe27 	bl	80072d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800568a:	2300      	movs	r3, #0
 800568c:	e062      	b.n	8005754 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005694:	f107 0310 	add.w	r3, r7, #16
 8005698:	4618      	mov	r0, r3
 800569a:	f001 f92b 	bl	80068f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800569e:	2301      	movs	r3, #1
 80056a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056a2:	f001 fe19 	bl	80072d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056a6:	f000 fea5 	bl	80063f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056aa:	f001 fddf 	bl	800726c <vPortEnterCritical>
 80056ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056b4:	b25b      	sxtb	r3, r3
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d103      	bne.n	80056c4 <xQueueReceive+0x134>
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056ca:	b25b      	sxtb	r3, r3
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d103      	bne.n	80056da <xQueueReceive+0x14a>
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056da:	f001 fdfd 	bl	80072d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056de:	1d3a      	adds	r2, r7, #4
 80056e0:	f107 0310 	add.w	r3, r7, #16
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 f91a 	bl	8006920 <xTaskCheckForTimeOut>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d123      	bne.n	800573a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056f4:	f000 fb36 	bl	8005d64 <prvIsQueueEmpty>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d017      	beq.n	800572e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005700:	3324      	adds	r3, #36	@ 0x24
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f866 	bl	80067d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800570c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800570e:	f000 fad7 	bl	8005cc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005712:	f000 fe7d 	bl	8006410 <xTaskResumeAll>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d189      	bne.n	8005630 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800571c:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <xQueueReceive+0x1cc>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	e780      	b.n	8005630 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800572e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005730:	f000 fac6 	bl	8005cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005734:	f000 fe6c 	bl	8006410 <xTaskResumeAll>
 8005738:	e77a      	b.n	8005630 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800573a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800573c:	f000 fac0 	bl	8005cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005740:	f000 fe66 	bl	8006410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005746:	f000 fb0d 	bl	8005d64 <prvIsQueueEmpty>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	f43f af6f 	beq.w	8005630 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005752:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005754:	4618      	mov	r0, r3
 8005756:	3730      	adds	r7, #48	@ 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08e      	sub	sp, #56	@ 0x38
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800576a:	2300      	movs	r3, #0
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005772:	2300      	movs	r3, #0
 8005774:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	b672      	cpsid	i
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	b662      	cpsie	i
 8005790:	623b      	str	r3, [r7, #32]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a4:	b672      	cpsid	i
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	b662      	cpsie	i
 80057b4:	61fb      	str	r3, [r7, #28]
}
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	e7fd      	b.n	80057b8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057bc:	f001 fa02 	bl	8006bc4 <xTaskGetSchedulerState>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d102      	bne.n	80057cc <xQueueSemaphoreTake+0x6c>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <xQueueSemaphoreTake+0x70>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <xQueueSemaphoreTake+0x72>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	b672      	cpsid	i
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	b662      	cpsie	i
 80057ea:	61bb      	str	r3, [r7, #24]
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057f2:	f001 fd3b 	bl	800726c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80057f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d024      	beq.n	800584c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005804:	1e5a      	subs	r2, r3, #1
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800580a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005812:	f001 fba1 	bl	8006f58 <pvTaskIncrementMutexHeldCount>
 8005816:	4602      	mov	r2, r0
 8005818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00f      	beq.n	8005844 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	3310      	adds	r3, #16
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fffd 	bl	8006828 <xTaskRemoveFromEventList>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005834:	4b55      	ldr	r3, [pc, #340]	@ (800598c <xQueueSemaphoreTake+0x22c>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005844:	f001 fd48 	bl	80072d8 <vPortExitCritical>
				return pdPASS;
 8005848:	2301      	movs	r3, #1
 800584a:	e09a      	b.n	8005982 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d114      	bne.n	800587c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	b672      	cpsid	i
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	b662      	cpsie	i
 800586c:	617b      	str	r3, [r7, #20]
}
 800586e:	bf00      	nop
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005874:	f001 fd30 	bl	80072d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005878:	2300      	movs	r3, #0
 800587a:	e082      	b.n	8005982 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005882:	f107 030c 	add.w	r3, r7, #12
 8005886:	4618      	mov	r0, r3
 8005888:	f001 f834 	bl	80068f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800588c:	2301      	movs	r3, #1
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005890:	f001 fd22 	bl	80072d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005894:	f000 fdae 	bl	80063f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005898:	f001 fce8 	bl	800726c <vPortEnterCritical>
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058a2:	b25b      	sxtb	r3, r3
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d103      	bne.n	80058b2 <xQueueSemaphoreTake+0x152>
 80058aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058b8:	b25b      	sxtb	r3, r3
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d103      	bne.n	80058c8 <xQueueSemaphoreTake+0x168>
 80058c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c8:	f001 fd06 	bl	80072d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058cc:	463a      	mov	r2, r7
 80058ce:	f107 030c 	add.w	r3, r7, #12
 80058d2:	4611      	mov	r1, r2
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 f823 	bl	8006920 <xTaskCheckForTimeOut>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d132      	bne.n	8005946 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058e2:	f000 fa3f 	bl	8005d64 <prvIsQueueEmpty>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d026      	beq.n	800593a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80058f4:	f001 fcba 	bl	800726c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f97f 	bl	8006c00 <xTaskPriorityInherit>
 8005902:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005904:	f001 fce8 	bl	80072d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590a:	3324      	adds	r3, #36	@ 0x24
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f000 ff61 	bl	80067d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005916:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005918:	f000 f9d2 	bl	8005cc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800591c:	f000 fd78 	bl	8006410 <xTaskResumeAll>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	f47f af65 	bne.w	80057f2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005928:	4b18      	ldr	r3, [pc, #96]	@ (800598c <xQueueSemaphoreTake+0x22c>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	e75b      	b.n	80057f2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800593a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800593c:	f000 f9c0 	bl	8005cc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005940:	f000 fd66 	bl	8006410 <xTaskResumeAll>
 8005944:	e755      	b.n	80057f2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005946:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005948:	f000 f9ba 	bl	8005cc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800594c:	f000 fd60 	bl	8006410 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005950:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005952:	f000 fa07 	bl	8005d64 <prvIsQueueEmpty>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	f43f af4a 	beq.w	80057f2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00d      	beq.n	8005980 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005964:	f001 fc82 	bl	800726c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005968:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800596a:	f000 f901 	bl	8005b70 <prvGetDisinheritPriorityAfterTimeout>
 800596e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fa4e 	bl	8006e18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800597c:	f001 fcac 	bl	80072d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005980:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005982:	4618      	mov	r0, r3
 8005984:	3738      	adds	r7, #56	@ 0x38
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08e      	sub	sp, #56	@ 0x38
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10d      	bne.n	80059c2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	b672      	cpsid	i
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	b662      	cpsie	i
 80059ba:	623b      	str	r3, [r7, #32]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <xQueueReceiveFromISR+0x40>
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <xQueueReceiveFromISR+0x44>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <xQueueReceiveFromISR+0x46>
 80059d4:	2300      	movs	r3, #0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10d      	bne.n	80059f6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059de:	b672      	cpsid	i
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	b662      	cpsie	i
 80059ee:	61fb      	str	r3, [r7, #28]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059f6:	f001 fd21 	bl	800743c <vPortValidateInterruptPriority>
	__asm volatile
 80059fa:	f3ef 8211 	mrs	r2, BASEPRI
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	b672      	cpsid	i
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	b662      	cpsie	i
 8005a12:	61ba      	str	r2, [r7, #24]
 8005a14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d02f      	beq.n	8005a86 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a34:	f000 f91e 	bl	8005c74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	1e5a      	subs	r2, r3, #1
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d112      	bne.n	8005a70 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d016      	beq.n	8005a80 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	3310      	adds	r3, #16
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fee6 	bl	8006828 <xTaskRemoveFromEventList>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00e      	beq.n	8005a80 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e007      	b.n	8005a80 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a74:	3301      	adds	r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	b25a      	sxtb	r2, r3
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005a80:	2301      	movs	r3, #1
 8005a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a84:	e001      	b.n	8005a8a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f383 8811 	msr	BASEPRI, r3
}
 8005a94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3738      	adds	r7, #56	@ 0x38
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	b672      	cpsid	i
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	b662      	cpsie	i
 8005ac2:	60bb      	str	r3, [r7, #8]
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	e7fd      	b.n	8005ac6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005aca:	f001 fbcf 	bl	800726c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005ad4:	f001 fc00 	bl	80072d8 <vPortExitCritical>

	return uxReturn;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b087      	sub	sp, #28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10d      	bne.n	8005b10 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	b672      	cpsid	i
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	b662      	cpsie	i
 8005b08:	60fb      	str	r3, [r7, #12]
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	e7fd      	b.n	8005b0c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005b16:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b18:	4618      	mov	r0, r3
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <vQueueDelete+0x2e>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3a:	b672      	cpsid	i
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	b662      	cpsie	i
 8005b4a:	60bb      	str	r3, [r7, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	e7fd      	b.n	8005b4e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f934 	bl	8005dc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f001 fd7e 	bl	8007664 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d006      	beq.n	8005b8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1c3 0307 	rsb	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e001      	b.n	8005b92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b92:	68fb      	ldr	r3, [r7, #12]
	}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d14d      	bne.n	8005c62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 f898 	bl	8006d00 <xTaskPriorityDisinherit>
 8005bd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	609a      	str	r2, [r3, #8]
 8005bd8:	e043      	b.n	8005c62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d119      	bne.n	8005c14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6858      	ldr	r0, [r3, #4]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be8:	461a      	mov	r2, r3
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	f00f fd7b 	bl	80156e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf8:	441a      	add	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d32b      	bcc.n	8005c62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	e026      	b.n	8005c62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68d8      	ldr	r0, [r3, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	f00f fd61 	bl	80156e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	441a      	add	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d207      	bcs.n	8005c50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	425b      	negs	r3, r3
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d105      	bne.n	8005c62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c6a:	697b      	ldr	r3, [r7, #20]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d018      	beq.n	8005cb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	441a      	add	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d303      	bcc.n	8005ca8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68d9      	ldr	r1, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6838      	ldr	r0, [r7, #0]
 8005cb4:	f00f fd17 	bl	80156e6 <memcpy>
	}
}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cc8:	f001 fad0 	bl	800726c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cd4:	e011      	b.n	8005cfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d012      	beq.n	8005d04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3324      	adds	r3, #36	@ 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fda0 	bl	8006828 <xTaskRemoveFromEventList>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cee:	f000 fe7f 	bl	80069f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dce9      	bgt.n	8005cd6 <prvUnlockQueue+0x16>
 8005d02:	e000      	b.n	8005d06 <prvUnlockQueue+0x46>
					break;
 8005d04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	22ff      	movs	r2, #255	@ 0xff
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d0e:	f001 fae3 	bl	80072d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d12:	f001 faab 	bl	800726c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d1e:	e011      	b.n	8005d44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d012      	beq.n	8005d4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3310      	adds	r3, #16
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fd7b 	bl	8006828 <xTaskRemoveFromEventList>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d38:	f000 fe5a 	bl	80069f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dce9      	bgt.n	8005d20 <prvUnlockQueue+0x60>
 8005d4c:	e000      	b.n	8005d50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	22ff      	movs	r2, #255	@ 0xff
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d58:	f001 fabe 	bl	80072d8 <vPortExitCritical>
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d6c:	f001 fa7e 	bl	800726c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e001      	b.n	8005d82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d82:	f001 faa9 	bl	80072d8 <vPortExitCritical>

	return xReturn;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d98:	f001 fa68 	bl	800726c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d102      	bne.n	8005dae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e001      	b.n	8005db2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db2:	f001 fa91 	bl	80072d8 <vPortExitCritical>

	return xReturn;
 8005db6:	68fb      	ldr	r3, [r7, #12]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e016      	b.n	8005dfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005dce:	4a10      	ldr	r2, [pc, #64]	@ (8005e10 <vQueueUnregisterQueue+0x50>)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d10b      	bne.n	8005df6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005dde:	4a0c      	ldr	r2, [pc, #48]	@ (8005e10 <vQueueUnregisterQueue+0x50>)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2100      	movs	r1, #0
 8005de4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005de8:	4a09      	ldr	r2, [pc, #36]	@ (8005e10 <vQueueUnregisterQueue+0x50>)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	4413      	add	r3, r2
 8005df0:	2200      	movs	r2, #0
 8005df2:	605a      	str	r2, [r3, #4]
				break;
 8005df4:	e006      	b.n	8005e04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d9e5      	bls.n	8005dce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	200050cc 	.word	0x200050cc

08005e14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08e      	sub	sp, #56	@ 0x38
 8005e18:	af04      	add	r7, sp, #16
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10d      	bne.n	8005e44 <xTaskCreateStatic+0x30>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	b672      	cpsid	i
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	b662      	cpsie	i
 8005e3c:	623b      	str	r3, [r7, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	e7fd      	b.n	8005e40 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10d      	bne.n	8005e66 <xTaskCreateStatic+0x52>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4e:	b672      	cpsid	i
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	b662      	cpsie	i
 8005e5e:	61fb      	str	r3, [r7, #28]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e66:	23a0      	movs	r3, #160	@ 0xa0
 8005e68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e6e:	d00d      	beq.n	8005e8c <xTaskCreateStatic+0x78>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	b672      	cpsid	i
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	b662      	cpsie	i
 8005e84:	61bb      	str	r3, [r7, #24]
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	e7fd      	b.n	8005e88 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01e      	beq.n	8005ed2 <xTaskCreateStatic+0xbe>
 8005e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01b      	beq.n	8005ed2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ea2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eac:	2300      	movs	r3, #0
 8005eae:	9303      	str	r3, [sp, #12]
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	9302      	str	r3, [sp, #8]
 8005eb4:	f107 0314 	add.w	r3, r7, #20
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f851 	bl	8005f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ecc:	f000 f8f0 	bl	80060b0 <prvAddNewTaskToReadyList>
 8005ed0:	e001      	b.n	8005ed6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ed6:	697b      	ldr	r3, [r7, #20]
	}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3728      	adds	r7, #40	@ 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08c      	sub	sp, #48	@ 0x30
 8005ee4:	af04      	add	r7, sp, #16
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fae7 	bl	80074c8 <pvPortMalloc>
 8005efa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f02:	20a0      	movs	r0, #160	@ 0xa0
 8005f04:	f001 fae0 	bl	80074c8 <pvPortMalloc>
 8005f08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f16:	e005      	b.n	8005f24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f18:	6978      	ldr	r0, [r7, #20]
 8005f1a:	f001 fba3 	bl	8007664 <vPortFree>
 8005f1e:	e001      	b.n	8005f24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d017      	beq.n	8005f5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	2300      	movs	r3, #0
 8005f36:	9303      	str	r3, [sp, #12]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	9302      	str	r3, [sp, #8]
 8005f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f80f 	bl	8005f6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f4e:	69f8      	ldr	r0, [r7, #28]
 8005f50:	f000 f8ae 	bl	80060b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f54:	2301      	movs	r3, #1
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	e002      	b.n	8005f60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f60:	69bb      	ldr	r3, [r7, #24]
	}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005f84:	440b      	add	r3, r1
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f023 0307 	bic.w	r3, r3, #7
 8005f92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00d      	beq.n	8005fba <prvInitialiseNewTask+0x4e>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	b672      	cpsid	i
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	b662      	cpsie	i
 8005fb2:	617b      	str	r3, [r7, #20]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01f      	beq.n	8006000 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	e012      	b.n	8005fec <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	7819      	ldrb	r1, [r3, #0]
 8005fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3334      	adds	r3, #52	@ 0x34
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d006      	beq.n	8005ff4 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	d9e9      	bls.n	8005fc6 <prvInitialiseNewTask+0x5a>
 8005ff2:	e000      	b.n	8005ff6 <prvInitialiseNewTask+0x8a>
			{
				break;
 8005ff4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ffe:	e003      	b.n	8006008 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	2b06      	cmp	r3, #6
 800600c:	d901      	bls.n	8006012 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800600e:	2306      	movs	r3, #6
 8006010:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006016:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	2200      	movs	r2, #0
 8006022:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	3304      	adds	r3, #4
 8006028:	4618      	mov	r0, r3
 800602a:	f7fe fe34 	bl	8004c96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	3318      	adds	r3, #24
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fe2f 	bl	8004c96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	f1c3 0207 	rsb	r2, r3, #7
 8006044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006046:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800604c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	2200      	movs	r2, #0
 8006052:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	2200      	movs	r2, #0
 800605a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	334c      	adds	r3, #76	@ 0x4c
 8006062:	224c      	movs	r2, #76	@ 0x4c
 8006064:	2100      	movs	r1, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f00f fa5f 	bl	801552a <memset>
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	4a0d      	ldr	r2, [pc, #52]	@ (80060a4 <prvInitialiseNewTask+0x138>)
 8006070:	651a      	str	r2, [r3, #80]	@ 0x50
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	4a0c      	ldr	r2, [pc, #48]	@ (80060a8 <prvInitialiseNewTask+0x13c>)
 8006076:	655a      	str	r2, [r3, #84]	@ 0x54
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	4a0c      	ldr	r2, [pc, #48]	@ (80060ac <prvInitialiseNewTask+0x140>)
 800607c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	68f9      	ldr	r1, [r7, #12]
 8006082:	69b8      	ldr	r0, [r7, #24]
 8006084:	f000 ffe2 	bl	800704c <pxPortInitialiseStack>
 8006088:	4602      	mov	r2, r0
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800609a:	bf00      	nop
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	2000c0c8 	.word	0x2000c0c8
 80060a8:	2000c130 	.word	0x2000c130
 80060ac:	2000c198 	.word	0x2000c198

080060b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060b8:	f001 f8d8 	bl	800726c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006168 <prvAddNewTaskToReadyList+0xb8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3301      	adds	r3, #1
 80060c2:	4a29      	ldr	r2, [pc, #164]	@ (8006168 <prvAddNewTaskToReadyList+0xb8>)
 80060c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060c6:	4b29      	ldr	r3, [pc, #164]	@ (800616c <prvAddNewTaskToReadyList+0xbc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060ce:	4a27      	ldr	r2, [pc, #156]	@ (800616c <prvAddNewTaskToReadyList+0xbc>)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060d4:	4b24      	ldr	r3, [pc, #144]	@ (8006168 <prvAddNewTaskToReadyList+0xb8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d110      	bne.n	80060fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060dc:	f000 fcac 	bl	8006a38 <prvInitialiseTaskLists>
 80060e0:	e00d      	b.n	80060fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060e2:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <prvAddNewTaskToReadyList+0xc0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ea:	4b20      	ldr	r3, [pc, #128]	@ (800616c <prvAddNewTaskToReadyList+0xbc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d802      	bhi.n	80060fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060f8:	4a1c      	ldr	r2, [pc, #112]	@ (800616c <prvAddNewTaskToReadyList+0xbc>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006174 <prvAddNewTaskToReadyList+0xc4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	4a1b      	ldr	r2, [pc, #108]	@ (8006174 <prvAddNewTaskToReadyList+0xc4>)
 8006106:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	409a      	lsls	r2, r3
 8006110:	4b19      	ldr	r3, [pc, #100]	@ (8006178 <prvAddNewTaskToReadyList+0xc8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4313      	orrs	r3, r2
 8006116:	4a18      	ldr	r2, [pc, #96]	@ (8006178 <prvAddNewTaskToReadyList+0xc8>)
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4a15      	ldr	r2, [pc, #84]	@ (800617c <prvAddNewTaskToReadyList+0xcc>)
 8006128:	441a      	add	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fe fdbd 	bl	8004cb0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006136:	f001 f8cf 	bl	80072d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800613a:	4b0d      	ldr	r3, [pc, #52]	@ (8006170 <prvAddNewTaskToReadyList+0xc0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00e      	beq.n	8006160 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006142:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <prvAddNewTaskToReadyList+0xbc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	429a      	cmp	r2, r3
 800614e:	d207      	bcs.n	8006160 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <prvAddNewTaskToReadyList+0xd0>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	2000520c 	.word	0x2000520c
 800616c:	2000510c 	.word	0x2000510c
 8006170:	20005218 	.word	0x20005218
 8006174:	20005228 	.word	0x20005228
 8006178:	20005214 	.word	0x20005214
 800617c:	20005110 	.word	0x20005110
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800618c:	f001 f86e 	bl	800726c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <vTaskDelete+0x18>
 8006196:	4b3a      	ldr	r3, [pc, #232]	@ (8006280 <vTaskDelete+0xfc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	e000      	b.n	800619e <vTaskDelete+0x1a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe fde0 	bl	8004d6a <uxListRemove>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d115      	bne.n	80061dc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b4:	4933      	ldr	r1, [pc, #204]	@ (8006284 <vTaskDelete+0x100>)
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <vTaskDelete+0x58>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	2201      	movs	r2, #1
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43da      	mvns	r2, r3
 80061d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006288 <vTaskDelete+0x104>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4013      	ands	r3, r2
 80061d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006288 <vTaskDelete+0x104>)
 80061da:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3318      	adds	r3, #24
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe fdbe 	bl	8004d6a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80061ee:	4b27      	ldr	r3, [pc, #156]	@ (800628c <vTaskDelete+0x108>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a25      	ldr	r2, [pc, #148]	@ (800628c <vTaskDelete+0x108>)
 80061f6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80061f8:	4b21      	ldr	r3, [pc, #132]	@ (8006280 <vTaskDelete+0xfc>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d10b      	bne.n	800621a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4821      	ldr	r0, [pc, #132]	@ (8006290 <vTaskDelete+0x10c>)
 800620a:	f7fe fd51 	bl	8004cb0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800620e:	4b21      	ldr	r3, [pc, #132]	@ (8006294 <vTaskDelete+0x110>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3301      	adds	r3, #1
 8006214:	4a1f      	ldr	r2, [pc, #124]	@ (8006294 <vTaskDelete+0x110>)
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	e009      	b.n	800622e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800621a:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <vTaskDelete+0x114>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3b01      	subs	r3, #1
 8006220:	4a1d      	ldr	r2, [pc, #116]	@ (8006298 <vTaskDelete+0x114>)
 8006222:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fc75 	bl	8006b14 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800622a:	f000 fcab 	bl	8006b84 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800622e:	f001 f853 	bl	80072d8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006232:	4b1a      	ldr	r3, [pc, #104]	@ (800629c <vTaskDelete+0x118>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01e      	beq.n	8006278 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800623a:	4b11      	ldr	r3, [pc, #68]	@ (8006280 <vTaskDelete+0xfc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	429a      	cmp	r2, r3
 8006242:	d119      	bne.n	8006278 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006244:	4b16      	ldr	r3, [pc, #88]	@ (80062a0 <vTaskDelete+0x11c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <vTaskDelete+0xe4>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	b672      	cpsid	i
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	b662      	cpsie	i
 8006260:	60bb      	str	r3, [r7, #8]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8006268:	4b0e      	ldr	r3, [pc, #56]	@ (80062a4 <vTaskDelete+0x120>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	2000510c 	.word	0x2000510c
 8006284:	20005110 	.word	0x20005110
 8006288:	20005214 	.word	0x20005214
 800628c:	20005228 	.word	0x20005228
 8006290:	200051e0 	.word	0x200051e0
 8006294:	200051f4 	.word	0x200051f4
 8006298:	2000520c 	.word	0x2000520c
 800629c:	20005218 	.word	0x20005218
 80062a0:	20005234 	.word	0x20005234
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01a      	beq.n	80062f0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062ba:	4b15      	ldr	r3, [pc, #84]	@ (8006310 <vTaskDelay+0x68>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00d      	beq.n	80062de <vTaskDelay+0x36>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	b672      	cpsid	i
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	b662      	cpsie	i
 80062d6:	60bb      	str	r3, [r7, #8]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <vTaskDelay+0x32>
			vTaskSuspendAll();
 80062de:	f000 f889 	bl	80063f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fe4b 	bl	8006f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062ea:	f000 f891 	bl	8006410 <xTaskResumeAll>
 80062ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d107      	bne.n	8006306 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80062f6:	4b07      	ldr	r3, [pc, #28]	@ (8006314 <vTaskDelay+0x6c>)
 80062f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20005234 	.word	0x20005234
 8006314:	e000ed04 	.word	0xe000ed04

08006318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08a      	sub	sp, #40	@ 0x28
 800631c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006326:	463a      	mov	r2, r7
 8006328:	1d39      	adds	r1, r7, #4
 800632a:	f107 0308 	add.w	r3, r7, #8
 800632e:	4618      	mov	r0, r3
 8006330:	f7fa f936 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	9202      	str	r2, [sp, #8]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	2300      	movs	r3, #0
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	2300      	movs	r3, #0
 8006344:	460a      	mov	r2, r1
 8006346:	4923      	ldr	r1, [pc, #140]	@ (80063d4 <vTaskStartScheduler+0xbc>)
 8006348:	4823      	ldr	r0, [pc, #140]	@ (80063d8 <vTaskStartScheduler+0xc0>)
 800634a:	f7ff fd63 	bl	8005e14 <xTaskCreateStatic>
 800634e:	4603      	mov	r3, r0
 8006350:	4a22      	ldr	r2, [pc, #136]	@ (80063dc <vTaskStartScheduler+0xc4>)
 8006352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006354:	4b21      	ldr	r3, [pc, #132]	@ (80063dc <vTaskStartScheduler+0xc4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e001      	b.n	8006366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d11d      	bne.n	80063a8 <vTaskStartScheduler+0x90>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006370:	b672      	cpsid	i
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	b662      	cpsie	i
 8006380:	613b      	str	r3, [r7, #16]
}
 8006382:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006384:	4b16      	ldr	r3, [pc, #88]	@ (80063e0 <vTaskStartScheduler+0xc8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	334c      	adds	r3, #76	@ 0x4c
 800638a:	4a16      	ldr	r2, [pc, #88]	@ (80063e4 <vTaskStartScheduler+0xcc>)
 800638c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800638e:	4b16      	ldr	r3, [pc, #88]	@ (80063e8 <vTaskStartScheduler+0xd0>)
 8006390:	f04f 32ff 	mov.w	r2, #4294967295
 8006394:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006396:	4b15      	ldr	r3, [pc, #84]	@ (80063ec <vTaskStartScheduler+0xd4>)
 8006398:	2201      	movs	r2, #1
 800639a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800639c:	4b14      	ldr	r3, [pc, #80]	@ (80063f0 <vTaskStartScheduler+0xd8>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063a2:	f000 fee5 	bl	8007170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063a6:	e011      	b.n	80063cc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d10d      	bne.n	80063cc <vTaskStartScheduler+0xb4>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b4:	b672      	cpsid	i
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	b662      	cpsie	i
 80063c4:	60fb      	str	r3, [r7, #12]
}
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
 80063ca:	e7fd      	b.n	80063c8 <vTaskStartScheduler+0xb0>
}
 80063cc:	bf00      	nop
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	08016794 	.word	0x08016794
 80063d8:	08006a09 	.word	0x08006a09
 80063dc:	20005230 	.word	0x20005230
 80063e0:	2000510c 	.word	0x2000510c
 80063e4:	2000003c 	.word	0x2000003c
 80063e8:	2000522c 	.word	0x2000522c
 80063ec:	20005218 	.word	0x20005218
 80063f0:	20005210 	.word	0x20005210

080063f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063f8:	4b04      	ldr	r3, [pc, #16]	@ (800640c <vTaskSuspendAll+0x18>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	4a03      	ldr	r2, [pc, #12]	@ (800640c <vTaskSuspendAll+0x18>)
 8006400:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20005234 	.word	0x20005234

08006410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800641e:	4b43      	ldr	r3, [pc, #268]	@ (800652c <xTaskResumeAll+0x11c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10d      	bne.n	8006442 <xTaskResumeAll+0x32>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	b672      	cpsid	i
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	b662      	cpsie	i
 800643a:	603b      	str	r3, [r7, #0]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006442:	f000 ff13 	bl	800726c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006446:	4b39      	ldr	r3, [pc, #228]	@ (800652c <xTaskResumeAll+0x11c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3b01      	subs	r3, #1
 800644c:	4a37      	ldr	r2, [pc, #220]	@ (800652c <xTaskResumeAll+0x11c>)
 800644e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006450:	4b36      	ldr	r3, [pc, #216]	@ (800652c <xTaskResumeAll+0x11c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d161      	bne.n	800651c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006458:	4b35      	ldr	r3, [pc, #212]	@ (8006530 <xTaskResumeAll+0x120>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05d      	beq.n	800651c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006460:	e02e      	b.n	80064c0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006462:	4b34      	ldr	r3, [pc, #208]	@ (8006534 <xTaskResumeAll+0x124>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3318      	adds	r3, #24
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fc7b 	bl	8004d6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3304      	adds	r3, #4
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fc76 	bl	8004d6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006482:	2201      	movs	r2, #1
 8006484:	409a      	lsls	r2, r3
 8006486:	4b2c      	ldr	r3, [pc, #176]	@ (8006538 <xTaskResumeAll+0x128>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	4a2a      	ldr	r2, [pc, #168]	@ (8006538 <xTaskResumeAll+0x128>)
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4a27      	ldr	r2, [pc, #156]	@ (800653c <xTaskResumeAll+0x12c>)
 800649e:	441a      	add	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4610      	mov	r0, r2
 80064a8:	f7fe fc02 	bl	8004cb0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b0:	4b23      	ldr	r3, [pc, #140]	@ (8006540 <xTaskResumeAll+0x130>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d302      	bcc.n	80064c0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80064ba:	4b22      	ldr	r3, [pc, #136]	@ (8006544 <xTaskResumeAll+0x134>)
 80064bc:	2201      	movs	r2, #1
 80064be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006534 <xTaskResumeAll+0x124>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1cc      	bne.n	8006462 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064ce:	f000 fb59 	bl	8006b84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006548 <xTaskResumeAll+0x138>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d010      	beq.n	8006500 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064de:	f000 f859 	bl	8006594 <xTaskIncrementTick>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80064e8:	4b16      	ldr	r3, [pc, #88]	@ (8006544 <xTaskResumeAll+0x134>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f1      	bne.n	80064de <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80064fa:	4b13      	ldr	r3, [pc, #76]	@ (8006548 <xTaskResumeAll+0x138>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006500:	4b10      	ldr	r3, [pc, #64]	@ (8006544 <xTaskResumeAll+0x134>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800650c:	4b0f      	ldr	r3, [pc, #60]	@ (800654c <xTaskResumeAll+0x13c>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800651c:	f000 fedc 	bl	80072d8 <vPortExitCritical>

	return xAlreadyYielded;
 8006520:	68bb      	ldr	r3, [r7, #8]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20005234 	.word	0x20005234
 8006530:	2000520c 	.word	0x2000520c
 8006534:	200051cc 	.word	0x200051cc
 8006538:	20005214 	.word	0x20005214
 800653c:	20005110 	.word	0x20005110
 8006540:	2000510c 	.word	0x2000510c
 8006544:	20005220 	.word	0x20005220
 8006548:	2000521c 	.word	0x2000521c
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006556:	4b05      	ldr	r3, [pc, #20]	@ (800656c <xTaskGetTickCount+0x1c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800655c:	687b      	ldr	r3, [r7, #4]
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20005210 	.word	0x20005210

08006570 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006576:	f000 ff61 	bl	800743c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800657a:	2300      	movs	r3, #0
 800657c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800657e:	4b04      	ldr	r3, [pc, #16]	@ (8006590 <xTaskGetTickCountFromISR+0x20>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006584:	683b      	ldr	r3, [r7, #0]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20005210 	.word	0x20005210

08006594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800659e:	4b50      	ldr	r3, [pc, #320]	@ (80066e0 <xTaskIncrementTick+0x14c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 808b 	bne.w	80066be <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065a8:	4b4e      	ldr	r3, [pc, #312]	@ (80066e4 <xTaskIncrementTick+0x150>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065b0:	4a4c      	ldr	r2, [pc, #304]	@ (80066e4 <xTaskIncrementTick+0x150>)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d123      	bne.n	8006604 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80065bc:	4b4a      	ldr	r3, [pc, #296]	@ (80066e8 <xTaskIncrementTick+0x154>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <xTaskIncrementTick+0x4e>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	b672      	cpsid	i
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	b662      	cpsie	i
 80065da:	603b      	str	r3, [r7, #0]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <xTaskIncrementTick+0x4a>
 80065e2:	4b41      	ldr	r3, [pc, #260]	@ (80066e8 <xTaskIncrementTick+0x154>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	4b40      	ldr	r3, [pc, #256]	@ (80066ec <xTaskIncrementTick+0x158>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a3e      	ldr	r2, [pc, #248]	@ (80066e8 <xTaskIncrementTick+0x154>)
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	4a3e      	ldr	r2, [pc, #248]	@ (80066ec <xTaskIncrementTick+0x158>)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b3e      	ldr	r3, [pc, #248]	@ (80066f0 <xTaskIncrementTick+0x15c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	4a3c      	ldr	r2, [pc, #240]	@ (80066f0 <xTaskIncrementTick+0x15c>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	f000 fac0 	bl	8006b84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006604:	4b3b      	ldr	r3, [pc, #236]	@ (80066f4 <xTaskIncrementTick+0x160>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d348      	bcc.n	80066a0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660e:	4b36      	ldr	r3, [pc, #216]	@ (80066e8 <xTaskIncrementTick+0x154>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006618:	4b36      	ldr	r3, [pc, #216]	@ (80066f4 <xTaskIncrementTick+0x160>)
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	601a      	str	r2, [r3, #0]
					break;
 8006620:	e03e      	b.n	80066a0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006622:	4b31      	ldr	r3, [pc, #196]	@ (80066e8 <xTaskIncrementTick+0x154>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d203      	bcs.n	8006642 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800663a:	4a2e      	ldr	r2, [pc, #184]	@ (80066f4 <xTaskIncrementTick+0x160>)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006640:	e02e      	b.n	80066a0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fb8f 	bl	8004d6a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	3318      	adds	r3, #24
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fb86 	bl	8004d6a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006662:	2201      	movs	r2, #1
 8006664:	409a      	lsls	r2, r3
 8006666:	4b24      	ldr	r3, [pc, #144]	@ (80066f8 <xTaskIncrementTick+0x164>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4313      	orrs	r3, r2
 800666c:	4a22      	ldr	r2, [pc, #136]	@ (80066f8 <xTaskIncrementTick+0x164>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4a1f      	ldr	r2, [pc, #124]	@ (80066fc <xTaskIncrementTick+0x168>)
 800667e:	441a      	add	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3304      	adds	r3, #4
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f7fe fb12 	bl	8004cb0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006690:	4b1b      	ldr	r3, [pc, #108]	@ (8006700 <xTaskIncrementTick+0x16c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006696:	429a      	cmp	r2, r3
 8006698:	d3b9      	bcc.n	800660e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800669a:	2301      	movs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800669e:	e7b6      	b.n	800660e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066a0:	4b17      	ldr	r3, [pc, #92]	@ (8006700 <xTaskIncrementTick+0x16c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	4915      	ldr	r1, [pc, #84]	@ (80066fc <xTaskIncrementTick+0x168>)
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d907      	bls.n	80066c8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80066b8:	2301      	movs	r3, #1
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e004      	b.n	80066c8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066be:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <xTaskIncrementTick+0x170>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3301      	adds	r3, #1
 80066c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006704 <xTaskIncrementTick+0x170>)
 80066c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006708 <xTaskIncrementTick+0x174>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80066d4:	697b      	ldr	r3, [r7, #20]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20005234 	.word	0x20005234
 80066e4:	20005210 	.word	0x20005210
 80066e8:	200051c4 	.word	0x200051c4
 80066ec:	200051c8 	.word	0x200051c8
 80066f0:	20005224 	.word	0x20005224
 80066f4:	2000522c 	.word	0x2000522c
 80066f8:	20005214 	.word	0x20005214
 80066fc:	20005110 	.word	0x20005110
 8006700:	2000510c 	.word	0x2000510c
 8006704:	2000521c 	.word	0x2000521c
 8006708:	20005220 	.word	0x20005220

0800670c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006712:	4b2b      	ldr	r3, [pc, #172]	@ (80067c0 <vTaskSwitchContext+0xb4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800671a:	4b2a      	ldr	r3, [pc, #168]	@ (80067c4 <vTaskSwitchContext+0xb8>)
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006720:	e047      	b.n	80067b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006722:	4b28      	ldr	r3, [pc, #160]	@ (80067c4 <vTaskSwitchContext+0xb8>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	4b27      	ldr	r3, [pc, #156]	@ (80067c8 <vTaskSwitchContext+0xbc>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	fab3 f383 	clz	r3, r3
 8006734:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	f1c3 031f 	rsb	r3, r3, #31
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	4923      	ldr	r1, [pc, #140]	@ (80067cc <vTaskSwitchContext+0xc0>)
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10d      	bne.n	800676e <vTaskSwitchContext+0x62>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	b672      	cpsid	i
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	b662      	cpsie	i
 8006766:	607b      	str	r3, [r7, #4]
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	e7fd      	b.n	800676a <vTaskSwitchContext+0x5e>
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4a14      	ldr	r2, [pc, #80]	@ (80067cc <vTaskSwitchContext+0xc0>)
 800677a:	4413      	add	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	3308      	adds	r3, #8
 8006790:	429a      	cmp	r2, r3
 8006792:	d104      	bne.n	800679e <vTaskSwitchContext+0x92>
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a0a      	ldr	r2, [pc, #40]	@ (80067d0 <vTaskSwitchContext+0xc4>)
 80067a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067a8:	4b09      	ldr	r3, [pc, #36]	@ (80067d0 <vTaskSwitchContext+0xc4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	334c      	adds	r3, #76	@ 0x4c
 80067ae:	4a09      	ldr	r2, [pc, #36]	@ (80067d4 <vTaskSwitchContext+0xc8>)
 80067b0:	6013      	str	r3, [r2, #0]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20005234 	.word	0x20005234
 80067c4:	20005220 	.word	0x20005220
 80067c8:	20005214 	.word	0x20005214
 80067cc:	20005110 	.word	0x20005110
 80067d0:	2000510c 	.word	0x2000510c
 80067d4:	2000003c 	.word	0x2000003c

080067d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10d      	bne.n	8006804 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ec:	b672      	cpsid	i
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	b662      	cpsie	i
 80067fc:	60fb      	str	r3, [r7, #12]
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	e7fd      	b.n	8006800 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006804:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <vTaskPlaceOnEventList+0x4c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3318      	adds	r3, #24
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fe fa73 	bl	8004cf8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006812:	2101      	movs	r1, #1
 8006814:	6838      	ldr	r0, [r7, #0]
 8006816:	f000 fbb3 	bl	8006f80 <prvAddCurrentTaskToDelayedList>
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	2000510c 	.word	0x2000510c

08006828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10d      	bne.n	800685a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	b672      	cpsid	i
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	b662      	cpsie	i
 8006852:	60fb      	str	r3, [r7, #12]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3318      	adds	r3, #24
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fa83 	bl	8004d6a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006864:	4b1d      	ldr	r3, [pc, #116]	@ (80068dc <xTaskRemoveFromEventList+0xb4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11c      	bne.n	80068a6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fa7a 	bl	8004d6a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	2201      	movs	r2, #1
 800687c:	409a      	lsls	r2, r3
 800687e:	4b18      	ldr	r3, [pc, #96]	@ (80068e0 <xTaskRemoveFromEventList+0xb8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4313      	orrs	r3, r2
 8006884:	4a16      	ldr	r2, [pc, #88]	@ (80068e0 <xTaskRemoveFromEventList+0xb8>)
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4a13      	ldr	r2, [pc, #76]	@ (80068e4 <xTaskRemoveFromEventList+0xbc>)
 8006896:	441a      	add	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7fe fa06 	bl	8004cb0 <vListInsertEnd>
 80068a4:	e005      	b.n	80068b2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3318      	adds	r3, #24
 80068aa:	4619      	mov	r1, r3
 80068ac:	480e      	ldr	r0, [pc, #56]	@ (80068e8 <xTaskRemoveFromEventList+0xc0>)
 80068ae:	f7fe f9ff 	bl	8004cb0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b6:	4b0d      	ldr	r3, [pc, #52]	@ (80068ec <xTaskRemoveFromEventList+0xc4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	429a      	cmp	r2, r3
 80068be:	d905      	bls.n	80068cc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068c0:	2301      	movs	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068c4:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <xTaskRemoveFromEventList+0xc8>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e001      	b.n	80068d0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068d0:	697b      	ldr	r3, [r7, #20]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20005234 	.word	0x20005234
 80068e0:	20005214 	.word	0x20005214
 80068e4:	20005110 	.word	0x20005110
 80068e8:	200051cc 	.word	0x200051cc
 80068ec:	2000510c 	.word	0x2000510c
 80068f0:	20005220 	.word	0x20005220

080068f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <vTaskInternalSetTimeOutState+0x24>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006904:	4b05      	ldr	r3, [pc, #20]	@ (800691c <vTaskInternalSetTimeOutState+0x28>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	605a      	str	r2, [r3, #4]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	20005224 	.word	0x20005224
 800691c:	20005210 	.word	0x20005210

08006920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10d      	bne.n	800694c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006934:	b672      	cpsid	i
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	b662      	cpsie	i
 8006944:	613b      	str	r3, [r7, #16]
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	e7fd      	b.n	8006948 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10d      	bne.n	800696e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	b672      	cpsid	i
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	b662      	cpsie	i
 8006966:	60fb      	str	r3, [r7, #12]
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	e7fd      	b.n	800696a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800696e:	f000 fc7d 	bl	800726c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006972:	4b1d      	ldr	r3, [pc, #116]	@ (80069e8 <xTaskCheckForTimeOut+0xc8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d102      	bne.n	8006992 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e023      	b.n	80069da <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b15      	ldr	r3, [pc, #84]	@ (80069ec <xTaskCheckForTimeOut+0xcc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d007      	beq.n	80069ae <xTaskCheckForTimeOut+0x8e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069a8:	2301      	movs	r3, #1
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	e015      	b.n	80069da <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d20b      	bcs.n	80069d0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff ff95 	bl	80068f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	e004      	b.n	80069da <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069da:	f000 fc7d 	bl	80072d8 <vPortExitCritical>

	return xReturn;
 80069de:	69fb      	ldr	r3, [r7, #28]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3720      	adds	r7, #32
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20005210 	.word	0x20005210
 80069ec:	20005224 	.word	0x20005224

080069f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069f4:	4b03      	ldr	r3, [pc, #12]	@ (8006a04 <vTaskMissedYield+0x14>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
}
 80069fa:	bf00      	nop
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20005220 	.word	0x20005220

08006a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a10:	f000 f852 	bl	8006ab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a14:	4b06      	ldr	r3, [pc, #24]	@ (8006a30 <prvIdleTask+0x28>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d9f9      	bls.n	8006a10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a1c:	4b05      	ldr	r3, [pc, #20]	@ (8006a34 <prvIdleTask+0x2c>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a2c:	e7f0      	b.n	8006a10 <prvIdleTask+0x8>
 8006a2e:	bf00      	nop
 8006a30:	20005110 	.word	0x20005110
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	e00c      	b.n	8006a5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4a12      	ldr	r2, [pc, #72]	@ (8006a98 <prvInitialiseTaskLists+0x60>)
 8006a50:	4413      	add	r3, r2
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe f8ff 	bl	8004c56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b06      	cmp	r3, #6
 8006a62:	d9ef      	bls.n	8006a44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a64:	480d      	ldr	r0, [pc, #52]	@ (8006a9c <prvInitialiseTaskLists+0x64>)
 8006a66:	f7fe f8f6 	bl	8004c56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a6a:	480d      	ldr	r0, [pc, #52]	@ (8006aa0 <prvInitialiseTaskLists+0x68>)
 8006a6c:	f7fe f8f3 	bl	8004c56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a70:	480c      	ldr	r0, [pc, #48]	@ (8006aa4 <prvInitialiseTaskLists+0x6c>)
 8006a72:	f7fe f8f0 	bl	8004c56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a76:	480c      	ldr	r0, [pc, #48]	@ (8006aa8 <prvInitialiseTaskLists+0x70>)
 8006a78:	f7fe f8ed 	bl	8004c56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a7c:	480b      	ldr	r0, [pc, #44]	@ (8006aac <prvInitialiseTaskLists+0x74>)
 8006a7e:	f7fe f8ea 	bl	8004c56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a82:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab0 <prvInitialiseTaskLists+0x78>)
 8006a84:	4a05      	ldr	r2, [pc, #20]	@ (8006a9c <prvInitialiseTaskLists+0x64>)
 8006a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a88:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab4 <prvInitialiseTaskLists+0x7c>)
 8006a8a:	4a05      	ldr	r2, [pc, #20]	@ (8006aa0 <prvInitialiseTaskLists+0x68>)
 8006a8c:	601a      	str	r2, [r3, #0]
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20005110 	.word	0x20005110
 8006a9c:	2000519c 	.word	0x2000519c
 8006aa0:	200051b0 	.word	0x200051b0
 8006aa4:	200051cc 	.word	0x200051cc
 8006aa8:	200051e0 	.word	0x200051e0
 8006aac:	200051f8 	.word	0x200051f8
 8006ab0:	200051c4 	.word	0x200051c4
 8006ab4:	200051c8 	.word	0x200051c8

08006ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006abe:	e019      	b.n	8006af4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ac0:	f000 fbd4 	bl	800726c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac4:	4b10      	ldr	r3, [pc, #64]	@ (8006b08 <prvCheckTasksWaitingTermination+0x50>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe f94a 	bl	8004d6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <prvCheckTasksWaitingTermination+0x54>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	4a0b      	ldr	r2, [pc, #44]	@ (8006b0c <prvCheckTasksWaitingTermination+0x54>)
 8006ade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006ae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aea:	f000 fbf5 	bl	80072d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f810 	bl	8006b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006af4:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e1      	bne.n	8006ac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200051e0 	.word	0x200051e0
 8006b0c:	2000520c 	.word	0x2000520c
 8006b10:	200051f4 	.word	0x200051f4

08006b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	334c      	adds	r3, #76	@ 0x4c
 8006b20:	4618      	mov	r0, r3
 8006b22:	f00e fd2d 	bl	8015580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d108      	bne.n	8006b42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fd95 	bl	8007664 <vPortFree>
				vPortFree( pxTCB );
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fd92 	bl	8007664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b40:	e01b      	b.n	8006b7a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d103      	bne.n	8006b54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fd89 	bl	8007664 <vPortFree>
	}
 8006b52:	e012      	b.n	8006b7a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d00d      	beq.n	8006b7a <prvDeleteTCB+0x66>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b62:	b672      	cpsid	i
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	b662      	cpsie	i
 8006b72:	60fb      	str	r3, [r7, #12]
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	e7fd      	b.n	8006b76 <prvDeleteTCB+0x62>
	}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <prvResetNextTaskUnblockTime+0x38>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b94:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8006b96:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b9c:	e008      	b.n	8006bb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9e:	4b07      	ldr	r3, [pc, #28]	@ (8006bbc <prvResetNextTaskUnblockTime+0x38>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	4a04      	ldr	r2, [pc, #16]	@ (8006bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8006bae:	6013      	str	r3, [r2, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	200051c4 	.word	0x200051c4
 8006bc0:	2000522c 	.word	0x2000522c

08006bc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bca:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf8 <xTaskGetSchedulerState+0x34>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d102      	bne.n	8006bd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	607b      	str	r3, [r7, #4]
 8006bd6:	e008      	b.n	8006bea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd8:	4b08      	ldr	r3, [pc, #32]	@ (8006bfc <xTaskGetSchedulerState+0x38>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006be0:	2302      	movs	r3, #2
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	e001      	b.n	8006bea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006be6:	2300      	movs	r3, #0
 8006be8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bea:	687b      	ldr	r3, [r7, #4]
	}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	20005218 	.word	0x20005218
 8006bfc:	20005234 	.word	0x20005234

08006c00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d069      	beq.n	8006cea <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1a:	4b36      	ldr	r3, [pc, #216]	@ (8006cf4 <xTaskPriorityInherit+0xf4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d259      	bcs.n	8006cd8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db06      	blt.n	8006c3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2c:	4b31      	ldr	r3, [pc, #196]	@ (8006cf4 <xTaskPriorityInherit+0xf4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c32:	f1c3 0207 	rsb	r2, r3, #7
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6959      	ldr	r1, [r3, #20]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf8 <xTaskPriorityInherit+0xf8>)
 8006c4c:	4413      	add	r3, r2
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	d13a      	bne.n	8006cc8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe f887 	bl	8004d6a <uxListRemove>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d115      	bne.n	8006c8e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c66:	4924      	ldr	r1, [pc, #144]	@ (8006cf8 <xTaskPriorityInherit+0xf8>)
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <xTaskPriorityInherit+0x8e>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	43da      	mvns	r2, r3
 8006c84:	4b1d      	ldr	r3, [pc, #116]	@ (8006cfc <xTaskPriorityInherit+0xfc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cfc <xTaskPriorityInherit+0xfc>)
 8006c8c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c8e:	4b19      	ldr	r3, [pc, #100]	@ (8006cf4 <xTaskPriorityInherit+0xf4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	4b16      	ldr	r3, [pc, #88]	@ (8006cfc <xTaskPriorityInherit+0xfc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	4a15      	ldr	r2, [pc, #84]	@ (8006cfc <xTaskPriorityInherit+0xfc>)
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a10      	ldr	r2, [pc, #64]	@ (8006cf8 <xTaskPriorityInherit+0xf8>)
 8006cb8:	441a      	add	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fd fff5 	bl	8004cb0 <vListInsertEnd>
 8006cc6:	e004      	b.n	8006cd2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf4 <xTaskPriorityInherit+0xf4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	e008      	b.n	8006cea <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cdc:	4b05      	ldr	r3, [pc, #20]	@ (8006cf4 <xTaskPriorityInherit+0xf4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d201      	bcs.n	8006cea <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cea:	68fb      	ldr	r3, [r7, #12]
	}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	2000510c 	.word	0x2000510c
 8006cf8:	20005110 	.word	0x20005110
 8006cfc:	20005214 	.word	0x20005214

08006d00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d074      	beq.n	8006e00 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d16:	4b3d      	ldr	r3, [pc, #244]	@ (8006e0c <xTaskPriorityDisinherit+0x10c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d00d      	beq.n	8006d3c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	b672      	cpsid	i
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	b662      	cpsie	i
 8006d34:	60fb      	str	r3, [r7, #12]
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	e7fd      	b.n	8006d38 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10d      	bne.n	8006d60 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	b672      	cpsid	i
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	b662      	cpsie	i
 8006d58:	60bb      	str	r3, [r7, #8]
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d64:	1e5a      	subs	r2, r3, #1
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d044      	beq.n	8006e00 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d140      	bne.n	8006e00 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fd fff1 	bl	8004d6a <uxListRemove>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d115      	bne.n	8006dba <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d92:	491f      	ldr	r1, [pc, #124]	@ (8006e10 <xTaskPriorityDisinherit+0x110>)
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xTaskPriorityDisinherit+0xba>
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	2201      	movs	r2, #1
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	43da      	mvns	r2, r3
 8006db0:	4b18      	ldr	r3, [pc, #96]	@ (8006e14 <xTaskPriorityDisinherit+0x114>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4013      	ands	r3, r2
 8006db6:	4a17      	ldr	r2, [pc, #92]	@ (8006e14 <xTaskPriorityDisinherit+0x114>)
 8006db8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc6:	f1c3 0207 	rsb	r2, r3, #7
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	409a      	lsls	r2, r3
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e14 <xTaskPriorityDisinherit+0x114>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8006e14 <xTaskPriorityDisinherit+0x114>)
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <xTaskPriorityDisinherit+0x110>)
 8006dee:	441a      	add	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f7fd ff5a 	bl	8004cb0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e00:	697b      	ldr	r3, [r7, #20]
	}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	2000510c 	.word	0x2000510c
 8006e10:	20005110 	.word	0x20005110
 8006e14:	20005214 	.word	0x20005214

08006e18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e26:	2301      	movs	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8089 	beq.w	8006f44 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10d      	bne.n	8006e56 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	b672      	cpsid	i
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	b662      	cpsie	i
 8006e4e:	60fb      	str	r3, [r7, #12]
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	e7fd      	b.n	8006e52 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d902      	bls.n	8006e66 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	e002      	b.n	8006e6c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d066      	beq.n	8006f44 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d161      	bne.n	8006f44 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e80:	4b32      	ldr	r3, [pc, #200]	@ (8006f4c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d10d      	bne.n	8006ea6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8e:	b672      	cpsid	i
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	b662      	cpsie	i
 8006e9e:	60bb      	str	r3, [r7, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	bf00      	nop
 8006ea4:	e7fd      	b.n	8006ea2 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	db04      	blt.n	8006ec4 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	f1c3 0207 	rsb	r2, r3, #7
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6959      	ldr	r1, [r3, #20]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ed4:	4413      	add	r3, r2
 8006ed6:	4299      	cmp	r1, r3
 8006ed8:	d134      	bne.n	8006f44 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fd ff43 	bl	8004d6a <uxListRemove>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d115      	bne.n	8006f16 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eee:	4918      	ldr	r1, [pc, #96]	@ (8006f50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	2201      	movs	r2, #1
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	43da      	mvns	r2, r3
 8006f0c:	4b11      	ldr	r3, [pc, #68]	@ (8006f54 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4013      	ands	r3, r2
 8006f12:	4a10      	ldr	r2, [pc, #64]	@ (8006f54 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f14:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	4a0b      	ldr	r2, [pc, #44]	@ (8006f54 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4a06      	ldr	r2, [pc, #24]	@ (8006f50 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006f36:	441a      	add	r2, r3
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f7fd feb6 	bl	8004cb0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f44:	bf00      	nop
 8006f46:	3720      	adds	r7, #32
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	2000510c 	.word	0x2000510c
 8006f50:	20005110 	.word	0x20005110
 8006f54:	20005214 	.word	0x20005214

08006f58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f5c:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f64:	4b05      	ldr	r3, [pc, #20]	@ (8006f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006f6e:	4b03      	ldr	r3, [pc, #12]	@ (8006f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f70:	681b      	ldr	r3, [r3, #0]
	}
 8006f72:	4618      	mov	r0, r3
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	2000510c 	.word	0x2000510c

08006f80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f8a:	4b29      	ldr	r3, [pc, #164]	@ (8007030 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f90:	4b28      	ldr	r3, [pc, #160]	@ (8007034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fd fee7 	bl	8004d6a <uxListRemove>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006fa2:	4b24      	ldr	r3, [pc, #144]	@ (8007034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	2201      	movs	r2, #1
 8006faa:	fa02 f303 	lsl.w	r3, r2, r3
 8006fae:	43da      	mvns	r2, r3
 8006fb0:	4b21      	ldr	r3, [pc, #132]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	4a20      	ldr	r2, [pc, #128]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d10a      	bne.n	8006fd8 <prvAddCurrentTaskToDelayedList+0x58>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4619      	mov	r1, r3
 8006fd0:	481a      	ldr	r0, [pc, #104]	@ (800703c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fd2:	f7fd fe6d 	bl	8004cb0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fd6:	e026      	b.n	8007026 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fe0:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d209      	bcs.n	8007004 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff0:	4b13      	ldr	r3, [pc, #76]	@ (8007040 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	f7fd fe7b 	bl	8004cf8 <vListInsert>
}
 8007002:	e010      	b.n	8007026 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007004:	4b0f      	ldr	r3, [pc, #60]	@ (8007044 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <prvAddCurrentTaskToDelayedList+0xb4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3304      	adds	r3, #4
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f7fd fe71 	bl	8004cf8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007016:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	429a      	cmp	r2, r3
 800701e:	d202      	bcs.n	8007026 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007020:	4a09      	ldr	r2, [pc, #36]	@ (8007048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6013      	str	r3, [r2, #0]
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20005210 	.word	0x20005210
 8007034:	2000510c 	.word	0x2000510c
 8007038:	20005214 	.word	0x20005214
 800703c:	200051f8 	.word	0x200051f8
 8007040:	200051c8 	.word	0x200051c8
 8007044:	200051c4 	.word	0x200051c4
 8007048:	2000522c 	.word	0x2000522c

0800704c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3b04      	subs	r3, #4
 800705c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3b04      	subs	r3, #4
 800706a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f023 0201 	bic.w	r2, r3, #1
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3b04      	subs	r3, #4
 800707a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800707c:	4a0c      	ldr	r2, [pc, #48]	@ (80070b0 <pxPortInitialiseStack+0x64>)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3b14      	subs	r3, #20
 8007086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3b04      	subs	r3, #4
 8007092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f06f 0202 	mvn.w	r2, #2
 800709a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3b20      	subs	r3, #32
 80070a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	080070b5 	.word	0x080070b5

080070b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070be:	4b15      	ldr	r3, [pc, #84]	@ (8007114 <prvTaskExitError+0x60>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d00d      	beq.n	80070e4 <prvTaskExitError+0x30>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	b672      	cpsid	i
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	b662      	cpsie	i
 80070dc:	60fb      	str	r3, [r7, #12]
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	e7fd      	b.n	80070e0 <prvTaskExitError+0x2c>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	b672      	cpsid	i
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	b662      	cpsie	i
 80070f8:	60bb      	str	r3, [r7, #8]
}
 80070fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070fc:	bf00      	nop
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0fc      	beq.n	80070fe <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	20000020 	.word	0x20000020
	...

08007120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007120:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <pxCurrentTCBConst2>)
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	6808      	ldr	r0, [r1, #0]
 8007126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	f380 8809 	msr	PSP, r0
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	4770      	bx	lr
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst2>:
 8007140:	2000510c 	.word	0x2000510c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007148:	4808      	ldr	r0, [pc, #32]	@ (800716c <prvPortStartFirstTask+0x24>)
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f380 8808 	msr	MSP, r0
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8814 	msr	CONTROL, r0
 800715a:	b662      	cpsie	i
 800715c:	b661      	cpsie	f
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	df00      	svc	0
 8007168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800716a:	bf00      	nop
 800716c:	e000ed08 	.word	0xe000ed08

08007170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007176:	4b37      	ldr	r3, [pc, #220]	@ (8007254 <xPortStartScheduler+0xe4>)
 8007178:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	22ff      	movs	r2, #255	@ 0xff
 8007186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007198:	b2da      	uxtb	r2, r3
 800719a:	4b2f      	ldr	r3, [pc, #188]	@ (8007258 <xPortStartScheduler+0xe8>)
 800719c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800719e:	4b2f      	ldr	r3, [pc, #188]	@ (800725c <xPortStartScheduler+0xec>)
 80071a0:	2207      	movs	r2, #7
 80071a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071a4:	e009      	b.n	80071ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80071a6:	4b2d      	ldr	r3, [pc, #180]	@ (800725c <xPortStartScheduler+0xec>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	4a2b      	ldr	r2, [pc, #172]	@ (800725c <xPortStartScheduler+0xec>)
 80071ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c2:	2b80      	cmp	r3, #128	@ 0x80
 80071c4:	d0ef      	beq.n	80071a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071c6:	4b25      	ldr	r3, [pc, #148]	@ (800725c <xPortStartScheduler+0xec>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1c3 0307 	rsb	r3, r3, #7
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d00d      	beq.n	80071ee <xPortStartScheduler+0x7e>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d6:	b672      	cpsid	i
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	b662      	cpsie	i
 80071e6:	60bb      	str	r3, [r7, #8]
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	e7fd      	b.n	80071ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071ee:	4b1b      	ldr	r3, [pc, #108]	@ (800725c <xPortStartScheduler+0xec>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	4a19      	ldr	r2, [pc, #100]	@ (800725c <xPortStartScheduler+0xec>)
 80071f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071f8:	4b18      	ldr	r3, [pc, #96]	@ (800725c <xPortStartScheduler+0xec>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007200:	4a16      	ldr	r2, [pc, #88]	@ (800725c <xPortStartScheduler+0xec>)
 8007202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800720c:	4b14      	ldr	r3, [pc, #80]	@ (8007260 <xPortStartScheduler+0xf0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a13      	ldr	r2, [pc, #76]	@ (8007260 <xPortStartScheduler+0xf0>)
 8007212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007218:	4b11      	ldr	r3, [pc, #68]	@ (8007260 <xPortStartScheduler+0xf0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a10      	ldr	r2, [pc, #64]	@ (8007260 <xPortStartScheduler+0xf0>)
 800721e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007224:	f000 f8dc 	bl	80073e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007228:	4b0e      	ldr	r3, [pc, #56]	@ (8007264 <xPortStartScheduler+0xf4>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800722e:	f000 f8fb 	bl	8007428 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007232:	4b0d      	ldr	r3, [pc, #52]	@ (8007268 <xPortStartScheduler+0xf8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a0c      	ldr	r2, [pc, #48]	@ (8007268 <xPortStartScheduler+0xf8>)
 8007238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800723c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800723e:	f7ff ff83 	bl	8007148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007242:	f7ff fa63 	bl	800670c <vTaskSwitchContext>
	prvTaskExitError();
 8007246:	f7ff ff35 	bl	80070b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	e000e400 	.word	0xe000e400
 8007258:	20005238 	.word	0x20005238
 800725c:	2000523c 	.word	0x2000523c
 8007260:	e000ed20 	.word	0xe000ed20
 8007264:	20000020 	.word	0x20000020
 8007268:	e000ef34 	.word	0xe000ef34

0800726c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007276:	b672      	cpsid	i
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	b662      	cpsie	i
 8007286:	607b      	str	r3, [r7, #4]
}
 8007288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800728a:	4b11      	ldr	r3, [pc, #68]	@ (80072d0 <vPortEnterCritical+0x64>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3301      	adds	r3, #1
 8007290:	4a0f      	ldr	r2, [pc, #60]	@ (80072d0 <vPortEnterCritical+0x64>)
 8007292:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007294:	4b0e      	ldr	r3, [pc, #56]	@ (80072d0 <vPortEnterCritical+0x64>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d112      	bne.n	80072c2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800729c:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <vPortEnterCritical+0x68>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00d      	beq.n	80072c2 <vPortEnterCritical+0x56>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	b672      	cpsid	i
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	b662      	cpsie	i
 80072ba:	603b      	str	r3, [r7, #0]
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <vPortEnterCritical+0x52>
	}
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20000020 	.word	0x20000020
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072de:	4b13      	ldr	r3, [pc, #76]	@ (800732c <vPortExitCritical+0x54>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10d      	bne.n	8007302 <vPortExitCritical+0x2a>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ea:	b672      	cpsid	i
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	b662      	cpsie	i
 80072fa:	607b      	str	r3, [r7, #4]
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	e7fd      	b.n	80072fe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007302:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <vPortExitCritical+0x54>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3b01      	subs	r3, #1
 8007308:	4a08      	ldr	r2, [pc, #32]	@ (800732c <vPortExitCritical+0x54>)
 800730a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800730c:	4b07      	ldr	r3, [pc, #28]	@ (800732c <vPortExitCritical+0x54>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d105      	bne.n	8007320 <vPortExitCritical+0x48>
 8007314:	2300      	movs	r3, #0
 8007316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	f383 8811 	msr	BASEPRI, r3
}
 800731e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20000020 	.word	0x20000020

08007330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007330:	f3ef 8009 	mrs	r0, PSP
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	4b15      	ldr	r3, [pc, #84]	@ (8007390 <pxCurrentTCBConst>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	f01e 0f10 	tst.w	lr, #16
 8007340:	bf08      	it	eq
 8007342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	6010      	str	r0, [r2, #0]
 800734c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007354:	b672      	cpsid	i
 8007356:	f380 8811 	msr	BASEPRI, r0
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	b662      	cpsie	i
 8007364:	f7ff f9d2 	bl	800670c <vTaskSwitchContext>
 8007368:	f04f 0000 	mov.w	r0, #0
 800736c:	f380 8811 	msr	BASEPRI, r0
 8007370:	bc09      	pop	{r0, r3}
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	6808      	ldr	r0, [r1, #0]
 8007376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737a:	f01e 0f10 	tst.w	lr, #16
 800737e:	bf08      	it	eq
 8007380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007384:	f380 8809 	msr	PSP, r0
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop

08007390 <pxCurrentTCBConst>:
 8007390:	2000510c 	.word	0x2000510c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a2:	b672      	cpsid	i
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	b662      	cpsie	i
 80073b2:	607b      	str	r3, [r7, #4]
}
 80073b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073b6:	f7ff f8ed 	bl	8006594 <xTaskIncrementTick>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073c0:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <SysTick_Handler+0x44>)
 80073c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f383 8811 	msr	BASEPRI, r3
}
 80073d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	e000ed04 	.word	0xe000ed04

080073e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <vPortSetupTimerInterrupt+0x34>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <vPortSetupTimerInterrupt+0x38>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073f0:	4b0a      	ldr	r3, [pc, #40]	@ (800741c <vPortSetupTimerInterrupt+0x3c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007420 <vPortSetupTimerInterrupt+0x40>)
 80073f6:	fba2 2303 	umull	r2, r3, r2, r3
 80073fa:	099b      	lsrs	r3, r3, #6
 80073fc:	4a09      	ldr	r2, [pc, #36]	@ (8007424 <vPortSetupTimerInterrupt+0x44>)
 80073fe:	3b01      	subs	r3, #1
 8007400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007402:	4b04      	ldr	r3, [pc, #16]	@ (8007414 <vPortSetupTimerInterrupt+0x34>)
 8007404:	2207      	movs	r2, #7
 8007406:	601a      	str	r2, [r3, #0]
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	e000e010 	.word	0xe000e010
 8007418:	e000e018 	.word	0xe000e018
 800741c:	20000000 	.word	0x20000000
 8007420:	10624dd3 	.word	0x10624dd3
 8007424:	e000e014 	.word	0xe000e014

08007428 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007428:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007438 <vPortEnableVFP+0x10>
 800742c:	6801      	ldr	r1, [r0, #0]
 800742e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007432:	6001      	str	r1, [r0, #0]
 8007434:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007436:	bf00      	nop
 8007438:	e000ed88 	.word	0xe000ed88

0800743c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007442:	f3ef 8305 	mrs	r3, IPSR
 8007446:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b0f      	cmp	r3, #15
 800744c:	d917      	bls.n	800747e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800744e:	4a1a      	ldr	r2, [pc, #104]	@ (80074b8 <vPortValidateInterruptPriority+0x7c>)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007458:	4b18      	ldr	r3, [pc, #96]	@ (80074bc <vPortValidateInterruptPriority+0x80>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	7afa      	ldrb	r2, [r7, #11]
 800745e:	429a      	cmp	r2, r3
 8007460:	d20d      	bcs.n	800747e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	b672      	cpsid	i
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	b662      	cpsie	i
 8007476:	607b      	str	r3, [r7, #4]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800747e:	4b10      	ldr	r3, [pc, #64]	@ (80074c0 <vPortValidateInterruptPriority+0x84>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007486:	4b0f      	ldr	r3, [pc, #60]	@ (80074c4 <vPortValidateInterruptPriority+0x88>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d90d      	bls.n	80074aa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007492:	b672      	cpsid	i
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	b662      	cpsie	i
 80074a2:	603b      	str	r3, [r7, #0]
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	e7fd      	b.n	80074a6 <vPortValidateInterruptPriority+0x6a>
	}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	e000e3f0 	.word	0xe000e3f0
 80074bc:	20005238 	.word	0x20005238
 80074c0:	e000ed0c 	.word	0xe000ed0c
 80074c4:	2000523c 	.word	0x2000523c

080074c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	@ 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074d4:	f7fe ff8e 	bl	80063f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074d8:	4b5d      	ldr	r3, [pc, #372]	@ (8007650 <pvPortMalloc+0x188>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074e0:	f000 f920 	bl	8007724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074e4:	4b5b      	ldr	r3, [pc, #364]	@ (8007654 <pvPortMalloc+0x18c>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 8094 	bne.w	800761a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80074f8:	2208      	movs	r2, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d017      	beq.n	800753a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00d      	beq.n	800753a <pvPortMalloc+0x72>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	b672      	cpsid	i
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	b662      	cpsie	i
 8007532:	617b      	str	r3, [r7, #20]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d06c      	beq.n	800761a <pvPortMalloc+0x152>
 8007540:	4b45      	ldr	r3, [pc, #276]	@ (8007658 <pvPortMalloc+0x190>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d867      	bhi.n	800761a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800754a:	4b44      	ldr	r3, [pc, #272]	@ (800765c <pvPortMalloc+0x194>)
 800754c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800754e:	4b43      	ldr	r3, [pc, #268]	@ (800765c <pvPortMalloc+0x194>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007554:	e004      	b.n	8007560 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	429a      	cmp	r2, r3
 8007568:	d903      	bls.n	8007572 <pvPortMalloc+0xaa>
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f1      	bne.n	8007556 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007572:	4b37      	ldr	r3, [pc, #220]	@ (8007650 <pvPortMalloc+0x188>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007578:	429a      	cmp	r2, r3
 800757a:	d04e      	beq.n	800761a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2208      	movs	r2, #8
 8007582:	4413      	add	r3, r2
 8007584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	1ad2      	subs	r2, r2, r3
 8007596:	2308      	movs	r3, #8
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	429a      	cmp	r2, r3
 800759c:	d922      	bls.n	80075e4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800759e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4413      	add	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00d      	beq.n	80075cc <pvPortMalloc+0x104>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b4:	b672      	cpsid	i
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	b662      	cpsie	i
 80075c4:	613b      	str	r3, [r7, #16]
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	1ad2      	subs	r2, r2, r3
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075de:	69b8      	ldr	r0, [r7, #24]
 80075e0:	f000 f902 	bl	80077e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007658 <pvPortMalloc+0x190>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007658 <pvPortMalloc+0x190>)
 80075f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075f2:	4b19      	ldr	r3, [pc, #100]	@ (8007658 <pvPortMalloc+0x190>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007660 <pvPortMalloc+0x198>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d203      	bcs.n	8007606 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075fe:	4b16      	ldr	r3, [pc, #88]	@ (8007658 <pvPortMalloc+0x190>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a17      	ldr	r2, [pc, #92]	@ (8007660 <pvPortMalloc+0x198>)
 8007604:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	4b12      	ldr	r3, [pc, #72]	@ (8007654 <pvPortMalloc+0x18c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	431a      	orrs	r2, r3
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800761a:	f7fe fef9 	bl	8006410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00d      	beq.n	8007644 <pvPortMalloc+0x17c>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	b672      	cpsid	i
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	b662      	cpsie	i
 800763c:	60fb      	str	r3, [r7, #12]
}
 800763e:	bf00      	nop
 8007640:	bf00      	nop
 8007642:	e7fd      	b.n	8007640 <pvPortMalloc+0x178>
	return pvReturn;
 8007644:	69fb      	ldr	r3, [r7, #28]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3728      	adds	r7, #40	@ 0x28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20008e48 	.word	0x20008e48
 8007654:	20008e54 	.word	0x20008e54
 8007658:	20008e4c 	.word	0x20008e4c
 800765c:	20008e40 	.word	0x20008e40
 8007660:	20008e50 	.word	0x20008e50

08007664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d04e      	beq.n	8007714 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007676:	2308      	movs	r3, #8
 8007678:	425b      	negs	r3, r3
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	4b24      	ldr	r3, [pc, #144]	@ (800771c <vPortFree+0xb8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4013      	ands	r3, r2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10d      	bne.n	80076ae <vPortFree+0x4a>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	b672      	cpsid	i
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	b662      	cpsie	i
 80076a6:	60fb      	str	r3, [r7, #12]
}
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	e7fd      	b.n	80076aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00d      	beq.n	80076d2 <vPortFree+0x6e>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	b672      	cpsid	i
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	b662      	cpsie	i
 80076ca:	60bb      	str	r3, [r7, #8]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	4b11      	ldr	r3, [pc, #68]	@ (800771c <vPortFree+0xb8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d019      	beq.n	8007714 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d115      	bne.n	8007714 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	4b0b      	ldr	r3, [pc, #44]	@ (800771c <vPortFree+0xb8>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	43db      	mvns	r3, r3
 80076f2:	401a      	ands	r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076f8:	f7fe fe7c 	bl	80063f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	4b07      	ldr	r3, [pc, #28]	@ (8007720 <vPortFree+0xbc>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4413      	add	r3, r2
 8007706:	4a06      	ldr	r2, [pc, #24]	@ (8007720 <vPortFree+0xbc>)
 8007708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800770a:	6938      	ldr	r0, [r7, #16]
 800770c:	f000 f86c 	bl	80077e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007710:	f7fe fe7e 	bl	8006410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007714:	bf00      	nop
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20008e54 	.word	0x20008e54
 8007720:	20008e4c 	.word	0x20008e4c

08007724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800772a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800772e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007730:	4b27      	ldr	r3, [pc, #156]	@ (80077d0 <prvHeapInit+0xac>)
 8007732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3307      	adds	r3, #7
 8007742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0307 	bic.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	4a1f      	ldr	r2, [pc, #124]	@ (80077d0 <prvHeapInit+0xac>)
 8007754:	4413      	add	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800775c:	4a1d      	ldr	r2, [pc, #116]	@ (80077d4 <prvHeapInit+0xb0>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007762:	4b1c      	ldr	r3, [pc, #112]	@ (80077d4 <prvHeapInit+0xb0>)
 8007764:	2200      	movs	r2, #0
 8007766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007770:	2208      	movs	r2, #8
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a15      	ldr	r2, [pc, #84]	@ (80077d8 <prvHeapInit+0xb4>)
 8007784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007786:	4b14      	ldr	r3, [pc, #80]	@ (80077d8 <prvHeapInit+0xb4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800778e:	4b12      	ldr	r3, [pc, #72]	@ (80077d8 <prvHeapInit+0xb4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077a4:	4b0c      	ldr	r3, [pc, #48]	@ (80077d8 <prvHeapInit+0xb4>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	4a0a      	ldr	r2, [pc, #40]	@ (80077dc <prvHeapInit+0xb8>)
 80077b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4a09      	ldr	r2, [pc, #36]	@ (80077e0 <prvHeapInit+0xbc>)
 80077ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077bc:	4b09      	ldr	r3, [pc, #36]	@ (80077e4 <prvHeapInit+0xc0>)
 80077be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	20005240 	.word	0x20005240
 80077d4:	20008e40 	.word	0x20008e40
 80077d8:	20008e48 	.word	0x20008e48
 80077dc:	20008e50 	.word	0x20008e50
 80077e0:	20008e4c 	.word	0x20008e4c
 80077e4:	20008e54 	.word	0x20008e54

080077e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077f0:	4b28      	ldr	r3, [pc, #160]	@ (8007894 <prvInsertBlockIntoFreeList+0xac>)
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e002      	b.n	80077fc <prvInsertBlockIntoFreeList+0x14>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	429a      	cmp	r2, r3
 8007804:	d8f7      	bhi.n	80077f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4413      	add	r3, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d108      	bne.n	800782a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	441a      	add	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	441a      	add	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d118      	bne.n	8007870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4b15      	ldr	r3, [pc, #84]	@ (8007898 <prvInsertBlockIntoFreeList+0xb0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d00d      	beq.n	8007866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e008      	b.n	8007878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007866:	4b0c      	ldr	r3, [pc, #48]	@ (8007898 <prvInsertBlockIntoFreeList+0xb0>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e003      	b.n	8007878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	429a      	cmp	r2, r3
 800787e:	d002      	beq.n	8007886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20008e40 	.word	0x20008e40
 8007898:	20008e48 	.word	0x20008e48

0800789c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	461a      	mov	r2, r3
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f002 f8b3 	bl	8009a1c <tcpip_send_msg_wait_sem>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80078ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d103      	bne.n	80078ca <netconn_apimsg+0x2e>
    return apimsg->err;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80078c8:	e001      	b.n	80078ce <netconn_apimsg+0x32>
  }
  return err;
 80078ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	@ 0x30
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	603a      	str	r2, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
 80078e4:	460b      	mov	r3, r1
 80078e6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 ff37 	bl	8008760 <netconn_alloc>
 80078f2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80078f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d054      	beq.n	80079a4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80078fa:	79bb      	ldrb	r3, [r7, #6]
 80078fc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80078fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007900:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	4619      	mov	r1, r3
 8007908:	4829      	ldr	r0, [pc, #164]	@ (80079b0 <netconn_new_with_proto_and_callback+0xd8>)
 800790a:	f7ff ffc7 	bl	800789c <netconn_apimsg>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8007914:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007918:	2b00      	cmp	r3, #0
 800791a:	d043      	beq.n	80079a4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <netconn_new_with_proto_and_callback+0x58>
 8007924:	4b23      	ldr	r3, [pc, #140]	@ (80079b4 <netconn_new_with_proto_and_callback+0xdc>)
 8007926:	22a3      	movs	r2, #163	@ 0xa3
 8007928:	4923      	ldr	r1, [pc, #140]	@ (80079b8 <netconn_new_with_proto_and_callback+0xe0>)
 800792a:	4824      	ldr	r0, [pc, #144]	@ (80079bc <netconn_new_with_proto_and_callback+0xe4>)
 800792c:	f00d fd4a 	bl	80153c4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	3310      	adds	r3, #16
 8007934:	4618      	mov	r0, r3
 8007936:	f00d fb0c 	bl	8014f52 <sys_mbox_valid>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <netconn_new_with_proto_and_callback+0x74>
 8007940:	4b1c      	ldr	r3, [pc, #112]	@ (80079b4 <netconn_new_with_proto_and_callback+0xdc>)
 8007942:	22a4      	movs	r2, #164	@ 0xa4
 8007944:	491e      	ldr	r1, [pc, #120]	@ (80079c0 <netconn_new_with_proto_and_callback+0xe8>)
 8007946:	481d      	ldr	r0, [pc, #116]	@ (80079bc <netconn_new_with_proto_and_callback+0xe4>)
 8007948:	f00d fd3c 	bl	80153c4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	3314      	adds	r3, #20
 8007950:	4618      	mov	r0, r3
 8007952:	f00d fafe 	bl	8014f52 <sys_mbox_valid>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <netconn_new_with_proto_and_callback+0x90>
 800795c:	4b15      	ldr	r3, [pc, #84]	@ (80079b4 <netconn_new_with_proto_and_callback+0xdc>)
 800795e:	22a6      	movs	r2, #166	@ 0xa6
 8007960:	4918      	ldr	r1, [pc, #96]	@ (80079c4 <netconn_new_with_proto_and_callback+0xec>)
 8007962:	4816      	ldr	r0, [pc, #88]	@ (80079bc <netconn_new_with_proto_and_callback+0xe4>)
 8007964:	f00d fd2e 	bl	80153c4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	330c      	adds	r3, #12
 800796c:	4618      	mov	r0, r3
 800796e:	f00d fb81 	bl	8015074 <sys_sem_valid>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <netconn_new_with_proto_and_callback+0xac>
 8007978:	4b0e      	ldr	r3, [pc, #56]	@ (80079b4 <netconn_new_with_proto_and_callback+0xdc>)
 800797a:	22a9      	movs	r2, #169	@ 0xa9
 800797c:	4912      	ldr	r1, [pc, #72]	@ (80079c8 <netconn_new_with_proto_and_callback+0xf0>)
 800797e:	480f      	ldr	r0, [pc, #60]	@ (80079bc <netconn_new_with_proto_and_callback+0xe4>)
 8007980:	f00d fd20 	bl	80153c4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007986:	330c      	adds	r3, #12
 8007988:	4618      	mov	r0, r3
 800798a:	f00d fb66 	bl	801505a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800798e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007990:	3310      	adds	r3, #16
 8007992:	4618      	mov	r0, r3
 8007994:	f00d fa56 	bl	8014e44 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800799a:	2007      	movs	r0, #7
 800799c:	f002 fde8 	bl	800a570 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	e000      	b.n	80079a6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80079a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3730      	adds	r7, #48	@ 0x30
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	08008735 	.word	0x08008735
 80079b4:	0801679c 	.word	0x0801679c
 80079b8:	080167d0 	.word	0x080167d0
 80079bc:	080167f4 	.word	0x080167f4
 80079c0:	0801681c 	.word	0x0801681c
 80079c4:	08016834 	.word	0x08016834
 80079c8:	08016858 	.word	0x08016858

080079cc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08c      	sub	sp, #48	@ 0x30
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <netconn_prepare_delete+0x12>
    return ERR_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	e014      	b.n	8007a08 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80079e2:	2329      	movs	r3, #41	@ 0x29
 80079e4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80079e6:	f107 030c 	add.w	r3, r7, #12
 80079ea:	4619      	mov	r1, r3
 80079ec:	4808      	ldr	r0, [pc, #32]	@ (8007a10 <netconn_prepare_delete+0x44>)
 80079ee:	f7ff ff55 	bl	800789c <netconn_apimsg>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80079f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <netconn_prepare_delete+0x3a>
    return err;
 8007a00:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007a04:	e000      	b.n	8007a08 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3730      	adds	r7, #48	@ 0x30
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	08008ca1 	.word	0x08008ca1

08007a14 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <netconn_delete+0x12>
    return ERR_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e00d      	b.n	8007a42 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff ffd0 	bl	80079cc <netconn_prepare_delete>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <netconn_delete+0x2a>
    netconn_free(conn);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 feff 	bl	800883c <netconn_free>
  }
  return err;
 8007a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08e      	sub	sp, #56	@ 0x38
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <netconn_bind+0x28>
 8007a60:	4b11      	ldr	r3, [pc, #68]	@ (8007aa8 <netconn_bind+0x5c>)
 8007a62:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8007a66:	4911      	ldr	r1, [pc, #68]	@ (8007aac <netconn_bind+0x60>)
 8007a68:	4811      	ldr	r0, [pc, #68]	@ (8007ab0 <netconn_bind+0x64>)
 8007a6a:	f00d fcab 	bl	80153c4 <iprintf>
 8007a6e:	f06f 030f 	mvn.w	r3, #15
 8007a72:	e015      	b.n	8007aa0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab4 <netconn_bind+0x68>)
 8007a7c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007a8a:	f107 0314 	add.w	r3, r7, #20
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4809      	ldr	r0, [pc, #36]	@ (8007ab8 <netconn_bind+0x6c>)
 8007a92:	f7ff ff03 	bl	800789c <netconn_apimsg>
 8007a96:	4603      	mov	r3, r0
 8007a98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007a9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3738      	adds	r7, #56	@ 0x38
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	0801679c 	.word	0x0801679c
 8007aac:	080168d4 	.word	0x080168d4
 8007ab0:	080167f4 	.word	0x080167f4
 8007ab4:	08019c0c 	.word	0x08019c0c
 8007ab8:	08008e69 	.word	0x08008e69

08007abc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08e      	sub	sp, #56	@ 0x38
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <netconn_connect+0x28>
 8007ad0:	4b11      	ldr	r3, [pc, #68]	@ (8007b18 <netconn_connect+0x5c>)
 8007ad2:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8007ad6:	4911      	ldr	r1, [pc, #68]	@ (8007b1c <netconn_connect+0x60>)
 8007ad8:	4811      	ldr	r0, [pc, #68]	@ (8007b20 <netconn_connect+0x64>)
 8007ada:	f00d fc73 	bl	80153c4 <iprintf>
 8007ade:	f06f 030f 	mvn.w	r3, #15
 8007ae2:	e015      	b.n	8007b10 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8007aea:	4b0e      	ldr	r3, [pc, #56]	@ (8007b24 <netconn_connect+0x68>)
 8007aec:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8007afa:	f107 0314 	add.w	r3, r7, #20
 8007afe:	4619      	mov	r1, r3
 8007b00:	4809      	ldr	r0, [pc, #36]	@ (8007b28 <netconn_connect+0x6c>)
 8007b02:	f7ff fecb 	bl	800789c <netconn_apimsg>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007b0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3738      	adds	r7, #56	@ 0x38
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	0801679c 	.word	0x0801679c
 8007b1c:	08016910 	.word	0x08016910
 8007b20:	080167f4 	.word	0x080167f4
 8007b24:	08019c0c 	.word	0x08019c0c
 8007b28:	08008ffd 	.word	0x08008ffd

08007b2c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d109      	bne.n	8007b58 <netconn_recv_data+0x2c>
 8007b44:	4b58      	ldr	r3, [pc, #352]	@ (8007ca8 <netconn_recv_data+0x17c>)
 8007b46:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8007b4a:	4958      	ldr	r1, [pc, #352]	@ (8007cac <netconn_recv_data+0x180>)
 8007b4c:	4858      	ldr	r0, [pc, #352]	@ (8007cb0 <netconn_recv_data+0x184>)
 8007b4e:	f00d fc39 	bl	80153c4 <iprintf>
 8007b52:	f06f 030f 	mvn.w	r3, #15
 8007b56:	e0a2      	b.n	8007c9e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <netconn_recv_data+0x4c>
 8007b64:	4b50      	ldr	r3, [pc, #320]	@ (8007ca8 <netconn_recv_data+0x17c>)
 8007b66:	f240 224a 	movw	r2, #586	@ 0x24a
 8007b6a:	4952      	ldr	r1, [pc, #328]	@ (8007cb4 <netconn_recv_data+0x188>)
 8007b6c:	4850      	ldr	r0, [pc, #320]	@ (8007cb0 <netconn_recv_data+0x184>)
 8007b6e:	f00d fc29 	bl	80153c4 <iprintf>
 8007b72:	f06f 030f 	mvn.w	r3, #15
 8007b76:	e092      	b.n	8007c9e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3310      	adds	r3, #16
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f00d f9e8 	bl	8014f52 <sys_mbox_valid>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10e      	bne.n	8007ba6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fa23 	bl	8007fd4 <netconn_err>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007b92:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007b9a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007b9e:	e07e      	b.n	8007c9e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007ba0:	f06f 030a 	mvn.w	r3, #10
 8007ba4:	e07b      	b.n	8007c9e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	7f1b      	ldrb	r3, [r3, #28]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10f      	bne.n	8007bd2 <netconn_recv_data+0xa6>
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	7f1b      	ldrb	r3, [r3, #28]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d023      	beq.n	8007c1a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3310      	adds	r3, #16
 8007bd6:	f107 0218 	add.w	r2, r7, #24
 8007bda:	4611      	mov	r1, r2
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f00d f99c 	bl	8014f1a <sys_arch_mbox_tryfetch>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be8:	d11f      	bne.n	8007c2a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f9f2 	bl	8007fd4 <netconn_err>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007bf4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007bfc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007c00:	e04d      	b.n	8007c9e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	7f1b      	ldrb	r3, [r3, #28]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007c0e:	f06f 030a 	mvn.w	r3, #10
 8007c12:	e044      	b.n	8007c9e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007c14:	f06f 0306 	mvn.w	r3, #6
 8007c18:	e041      	b.n	8007c9e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3310      	adds	r3, #16
 8007c1e:	f107 0118 	add.w	r1, r7, #24
 8007c22:	2200      	movs	r2, #0
 8007c24:	4618      	mov	r0, r3
 8007c26:	f00d f939 	bl	8014e9c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d117      	bne.n	8007c66 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f107 0217 	add.w	r2, r7, #23
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fa1a 	bl	8008078 <lwip_netconn_is_err_msg>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007c4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c4e:	f113 0f0f 	cmn.w	r3, #15
 8007c52:	d101      	bne.n	8007c58 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e022      	b.n	8007c9e <netconn_recv_data+0x172>
      }
      return err;
 8007c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c5c:	e01f      	b.n	8007c9e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	891b      	ldrh	r3, [r3, #8]
 8007c62:	83fb      	strh	r3, [r7, #30]
 8007c64:	e00d      	b.n	8007c82 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <netconn_recv_data+0x14e>
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca8 <netconn_recv_data+0x17c>)
 8007c6e:	f240 2291 	movw	r2, #657	@ 0x291
 8007c72:	4911      	ldr	r1, [pc, #68]	@ (8007cb8 <netconn_recv_data+0x18c>)
 8007c74:	480e      	ldr	r0, [pc, #56]	@ (8007cb0 <netconn_recv_data+0x184>)
 8007c76:	f00d fba5 	bl	80153c4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	891b      	ldrh	r3, [r3, #8]
 8007c80:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <netconn_recv_data+0x16a>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8e:	8bfa      	ldrh	r2, [r7, #30]
 8007c90:	2101      	movs	r1, #1
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3720      	adds	r7, #32
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	0801679c 	.word	0x0801679c
 8007cac:	080169b4 	.word	0x080169b4
 8007cb0:	080167f4 	.word	0x080167f4
 8007cb4:	080169d4 	.word	0x080169d4
 8007cb8:	080169f0 	.word	0x080169f0

08007cbc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <netconn_tcp_recvd_msg+0x1e>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cd6:	2b10      	cmp	r3, #16
 8007cd8:	d009      	beq.n	8007cee <netconn_tcp_recvd_msg+0x32>
 8007cda:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <netconn_tcp_recvd_msg+0x50>)
 8007cdc:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8007ce0:	490b      	ldr	r1, [pc, #44]	@ (8007d10 <netconn_tcp_recvd_msg+0x54>)
 8007ce2:	480c      	ldr	r0, [pc, #48]	@ (8007d14 <netconn_tcp_recvd_msg+0x58>)
 8007ce4:	f00d fb6e 	bl	80153c4 <iprintf>
 8007ce8:	f06f 030f 	mvn.w	r3, #15
 8007cec:	e00a      	b.n	8007d04 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4806      	ldr	r0, [pc, #24]	@ (8007d18 <netconn_tcp_recvd_msg+0x5c>)
 8007cfe:	f7ff fdcd 	bl	800789c <netconn_apimsg>
 8007d02:	4603      	mov	r3, r0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	0801679c 	.word	0x0801679c
 8007d10:	080169fc 	.word	0x080169fc
 8007d14:	080167f4 	.word	0x080167f4
 8007d18:	08009213 	.word	0x08009213

08007d1c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b090      	sub	sp, #64	@ 0x40
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3310      	adds	r3, #16
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f00d f90f 	bl	8014f52 <sys_mbox_valid>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d102      	bne.n	8007d40 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007d3a:	f06f 030a 	mvn.w	r3, #10
 8007d3e:	e06d      	b.n	8007e1c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	7f1b      	ldrb	r3, [r3, #28]
 8007d44:	b25b      	sxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	da07      	bge.n	8007d5a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	7f1b      	ldrb	r3, [r3, #28]
 8007d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007d58:	e039      	b.n	8007dce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fee3 	bl	8007b2c <netconn_recv_data>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8007d6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007d74:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007d78:	e050      	b.n	8007e1c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10e      	bne.n	8007da8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <netconn_recv_data_tcp+0x7a>
 8007d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d92:	891b      	ldrh	r3, [r3, #8]
 8007d94:	e000      	b.n	8007d98 <netconn_recv_data_tcp+0x7c>
 8007d96:	2301      	movs	r3, #1
 8007d98:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007d9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d9c:	f107 0214 	add.w	r2, r7, #20
 8007da0:	4619      	mov	r1, r3
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff ff8a 	bl	8007cbc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d134      	bne.n	8007e18 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d009      	beq.n	8007dcc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	7f1b      	ldrb	r3, [r3, #28]
 8007dbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007dc6:	f06f 0306 	mvn.w	r3, #6
 8007dca:	e027      	b.n	8007e1c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007dcc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <netconn_recv_data_tcp+0xc6>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2101      	movs	r1, #1
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10f      	bne.n	8007e0a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f8f2 	bl	8007fd4 <netconn_err>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8007df6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <netconn_recv_data_tcp+0xe8>
          return err;
 8007dfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e02:	e00b      	b.n	8007e1c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8007e04:	f06f 030d 	mvn.w	r3, #13
 8007e08:	e008      	b.n	8007e1c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f8b1 	bl	8007f74 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007e12:	f06f 030e 	mvn.w	r3, #14
 8007e16:	e001      	b.n	8007e1c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8007e18:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3740      	adds	r7, #64	@ 0x40
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <netconn_recv+0x28>
 8007e38:	4b32      	ldr	r3, [pc, #200]	@ (8007f04 <netconn_recv+0xe0>)
 8007e3a:	f240 3263 	movw	r2, #867	@ 0x363
 8007e3e:	4932      	ldr	r1, [pc, #200]	@ (8007f08 <netconn_recv+0xe4>)
 8007e40:	4832      	ldr	r0, [pc, #200]	@ (8007f0c <netconn_recv+0xe8>)
 8007e42:	f00d fabf 	bl	80153c4 <iprintf>
 8007e46:	f06f 030f 	mvn.w	r3, #15
 8007e4a:	e056      	b.n	8007efa <netconn_recv+0xd6>
  *new_buf = NULL;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <netconn_recv+0x48>
 8007e58:	4b2a      	ldr	r3, [pc, #168]	@ (8007f04 <netconn_recv+0xe0>)
 8007e5a:	f240 3265 	movw	r2, #869	@ 0x365
 8007e5e:	492c      	ldr	r1, [pc, #176]	@ (8007f10 <netconn_recv+0xec>)
 8007e60:	482a      	ldr	r0, [pc, #168]	@ (8007f0c <netconn_recv+0xe8>)
 8007e62:	f00d faaf 	bl	80153c4 <iprintf>
 8007e66:	f06f 030f 	mvn.w	r3, #15
 8007e6a:	e046      	b.n	8007efa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	d13a      	bne.n	8007eee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007e7c:	2006      	movs	r0, #6
 8007e7e:	f002 fb01 	bl	800a484 <memp_malloc>
 8007e82:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <netconn_recv+0x6c>
      return ERR_MEM;
 8007e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8e:	e034      	b.n	8007efa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8007e90:	f107 030c 	add.w	r3, r7, #12
 8007e94:	2200      	movs	r2, #0
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff ff3f 	bl	8007d1c <netconn_recv_data_tcp>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007ea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d006      	beq.n	8007eb8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8007eaa:	6979      	ldr	r1, [r7, #20]
 8007eac:	2006      	movs	r0, #6
 8007eae:	f002 fb5f 	bl	800a570 <memp_free>
      return err;
 8007eb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007eb6:	e020      	b.n	8007efa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <netconn_recv+0xa8>
 8007ebe:	4b11      	ldr	r3, [pc, #68]	@ (8007f04 <netconn_recv+0xe0>)
 8007ec0:	f240 3279 	movw	r2, #889	@ 0x379
 8007ec4:	4913      	ldr	r1, [pc, #76]	@ (8007f14 <netconn_recv+0xf0>)
 8007ec6:	4811      	ldr	r0, [pc, #68]	@ (8007f0c <netconn_recv+0xe8>)
 8007ec8:	f00d fa7c 	bl	80153c4 <iprintf>

    buf->p = p;
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2200      	movs	r2, #0
 8007edc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e005      	b.n	8007efa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff fe1a 	bl	8007b2c <netconn_recv_data>
 8007ef8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	0801679c 	.word	0x0801679c
 8007f08:	080169b4 	.word	0x080169b4
 8007f0c:	080167f4 	.word	0x080167f4
 8007f10:	080169d4 	.word	0x080169d4
 8007f14:	08016a4c 	.word	0x08016a4c

08007f18 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08c      	sub	sp, #48	@ 0x30
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d109      	bne.n	8007f3c <netconn_send+0x24>
 8007f28:	4b0e      	ldr	r3, [pc, #56]	@ (8007f64 <netconn_send+0x4c>)
 8007f2a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8007f2e:	490e      	ldr	r1, [pc, #56]	@ (8007f68 <netconn_send+0x50>)
 8007f30:	480e      	ldr	r0, [pc, #56]	@ (8007f6c <netconn_send+0x54>)
 8007f32:	f00d fa47 	bl	80153c4 <iprintf>
 8007f36:	f06f 030f 	mvn.w	r3, #15
 8007f3a:	e00e      	b.n	8007f5a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8007f44:	f107 030c 	add.w	r3, r7, #12
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4809      	ldr	r0, [pc, #36]	@ (8007f70 <netconn_send+0x58>)
 8007f4c:	f7ff fca6 	bl	800789c <netconn_apimsg>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007f56:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3730      	adds	r7, #48	@ 0x30
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	0801679c 	.word	0x0801679c
 8007f68:	08016a58 	.word	0x08016a58
 8007f6c:	080167f4 	.word	0x080167f4
 8007f70:	08009179 	.word	0x08009179

08007f74 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08c      	sub	sp, #48	@ 0x30
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d109      	bne.n	8007f9a <netconn_close_shutdown+0x26>
 8007f86:	4b0f      	ldr	r3, [pc, #60]	@ (8007fc4 <netconn_close_shutdown+0x50>)
 8007f88:	f240 4247 	movw	r2, #1095	@ 0x447
 8007f8c:	490e      	ldr	r1, [pc, #56]	@ (8007fc8 <netconn_close_shutdown+0x54>)
 8007f8e:	480f      	ldr	r0, [pc, #60]	@ (8007fcc <netconn_close_shutdown+0x58>)
 8007f90:	f00d fa18 	bl	80153c4 <iprintf>
 8007f94:	f06f 030f 	mvn.w	r3, #15
 8007f98:	e010      	b.n	8007fbc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007fa2:	2329      	movs	r3, #41	@ 0x29
 8007fa4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	4619      	mov	r1, r3
 8007fac:	4808      	ldr	r0, [pc, #32]	@ (8007fd0 <netconn_close_shutdown+0x5c>)
 8007fae:	f7ff fc75 	bl	800789c <netconn_apimsg>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007fb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3730      	adds	r7, #48	@ 0x30
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	0801679c 	.word	0x0801679c
 8007fc8:	08016ad8 	.word	0x08016ad8
 8007fcc:	080167f4 	.word	0x080167f4
 8007fd0:	08009615 	.word	0x08009615

08007fd4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <netconn_err+0x12>
    return ERR_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e00d      	b.n	8008002 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8007fe6:	f00d f8cf 	bl	8015188 <sys_arch_protect>
 8007fea:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	7a1b      	ldrb	r3, [r3, #8]
 8007ff0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f00d f8d3 	bl	80151a4 <sys_arch_unprotect>
  return err;
 8007ffe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801a:	f113 0f0d 	cmn.w	r3, #13
 800801e:	d009      	beq.n	8008034 <lwip_netconn_err_to_msg+0x28>
 8008020:	f113 0f0d 	cmn.w	r3, #13
 8008024:	dc0c      	bgt.n	8008040 <lwip_netconn_err_to_msg+0x34>
 8008026:	f113 0f0f 	cmn.w	r3, #15
 800802a:	d007      	beq.n	800803c <lwip_netconn_err_to_msg+0x30>
 800802c:	f113 0f0e 	cmn.w	r3, #14
 8008030:	d002      	beq.n	8008038 <lwip_netconn_err_to_msg+0x2c>
 8008032:	e005      	b.n	8008040 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008034:	4b0a      	ldr	r3, [pc, #40]	@ (8008060 <lwip_netconn_err_to_msg+0x54>)
 8008036:	e00e      	b.n	8008056 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008038:	4b0a      	ldr	r3, [pc, #40]	@ (8008064 <lwip_netconn_err_to_msg+0x58>)
 800803a:	e00c      	b.n	8008056 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800803c:	4b0a      	ldr	r3, [pc, #40]	@ (8008068 <lwip_netconn_err_to_msg+0x5c>)
 800803e:	e00a      	b.n	8008056 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <lwip_netconn_err_to_msg+0x48>
 8008048:	4b08      	ldr	r3, [pc, #32]	@ (800806c <lwip_netconn_err_to_msg+0x60>)
 800804a:	227d      	movs	r2, #125	@ 0x7d
 800804c:	4908      	ldr	r1, [pc, #32]	@ (8008070 <lwip_netconn_err_to_msg+0x64>)
 800804e:	4809      	ldr	r0, [pc, #36]	@ (8008074 <lwip_netconn_err_to_msg+0x68>)
 8008050:	f00d f9b8 	bl	80153c4 <iprintf>
      return NULL;
 8008054:	2300      	movs	r3, #0
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	08019af8 	.word	0x08019af8
 8008064:	08019af9 	.word	0x08019af9
 8008068:	08019afa 	.word	0x08019afa
 800806c:	08016af4 	.word	0x08016af4
 8008070:	08016b28 	.word	0x08016b28
 8008074:	08016b38 	.word	0x08016b38

08008078 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d105      	bne.n	8008094 <lwip_netconn_is_err_msg+0x1c>
 8008088:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <lwip_netconn_is_err_msg+0x5c>)
 800808a:	2285      	movs	r2, #133	@ 0x85
 800808c:	4912      	ldr	r1, [pc, #72]	@ (80080d8 <lwip_netconn_is_err_msg+0x60>)
 800808e:	4813      	ldr	r0, [pc, #76]	@ (80080dc <lwip_netconn_is_err_msg+0x64>)
 8008090:	f00d f998 	bl	80153c4 <iprintf>

  if (msg == &netconn_aborted) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a12      	ldr	r2, [pc, #72]	@ (80080e0 <lwip_netconn_is_err_msg+0x68>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d104      	bne.n	80080a6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	22f3      	movs	r2, #243	@ 0xf3
 80080a0:	701a      	strb	r2, [r3, #0]
    return 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e012      	b.n	80080cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a0e      	ldr	r2, [pc, #56]	@ (80080e4 <lwip_netconn_is_err_msg+0x6c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d104      	bne.n	80080b8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	22f2      	movs	r2, #242	@ 0xf2
 80080b2:	701a      	strb	r2, [r3, #0]
    return 1;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e009      	b.n	80080cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a0b      	ldr	r2, [pc, #44]	@ (80080e8 <lwip_netconn_is_err_msg+0x70>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d104      	bne.n	80080ca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	22f1      	movs	r2, #241	@ 0xf1
 80080c4:	701a      	strb	r2, [r3, #0]
    return 1;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	08016af4 	.word	0x08016af4
 80080d8:	08016b60 	.word	0x08016b60
 80080dc:	08016b38 	.word	0x08016b38
 80080e0:	08019af8 	.word	0x08019af8
 80080e4:	08019af9 	.word	0x08019af9
 80080e8:	08019afa 	.word	0x08019afa

080080ec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <recv_udp+0x20>
 8008100:	4b34      	ldr	r3, [pc, #208]	@ (80081d4 <recv_udp+0xe8>)
 8008102:	22e5      	movs	r2, #229	@ 0xe5
 8008104:	4934      	ldr	r1, [pc, #208]	@ (80081d8 <recv_udp+0xec>)
 8008106:	4835      	ldr	r0, [pc, #212]	@ (80081dc <recv_udp+0xf0>)
 8008108:	f00d f95c 	bl	80153c4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d105      	bne.n	800811e <recv_udp+0x32>
 8008112:	4b30      	ldr	r3, [pc, #192]	@ (80081d4 <recv_udp+0xe8>)
 8008114:	22e6      	movs	r2, #230	@ 0xe6
 8008116:	4932      	ldr	r1, [pc, #200]	@ (80081e0 <recv_udp+0xf4>)
 8008118:	4830      	ldr	r0, [pc, #192]	@ (80081dc <recv_udp+0xf0>)
 800811a:	f00d f953 	bl	80153c4 <iprintf>
  conn = (struct netconn *)arg;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <recv_udp+0x44>
    pbuf_free(p);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f003 f8c5 	bl	800b2b8 <pbuf_free>
    return;
 800812e:	e04d      	b.n	80081cc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	429a      	cmp	r2, r3
 8008138:	d005      	beq.n	8008146 <recv_udp+0x5a>
 800813a:	4b26      	ldr	r3, [pc, #152]	@ (80081d4 <recv_udp+0xe8>)
 800813c:	22ee      	movs	r2, #238	@ 0xee
 800813e:	4929      	ldr	r1, [pc, #164]	@ (80081e4 <recv_udp+0xf8>)
 8008140:	4826      	ldr	r0, [pc, #152]	@ (80081dc <recv_udp+0xf0>)
 8008142:	f00d f93f 	bl	80153c4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	3310      	adds	r3, #16
 800814a:	4618      	mov	r0, r3
 800814c:	f00c ff01 	bl	8014f52 <sys_mbox_valid>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f003 f8ae 	bl	800b2b8 <pbuf_free>
    return;
 800815c:	e036      	b.n	80081cc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800815e:	2006      	movs	r0, #6
 8008160:	f002 f990 	bl	800a484 <memp_malloc>
 8008164:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <recv_udp+0x88>
    pbuf_free(p);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f003 f8a3 	bl	800b2b8 <pbuf_free>
    return;
 8008172:	e02b      	b.n	80081cc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <recv_udp+0xa0>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	e000      	b.n	800818e <recv_udp+0xa2>
 800818c:	2300      	movs	r3, #0
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008196:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	891b      	ldrh	r3, [r3, #8]
 800819c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	3310      	adds	r3, #16
 80081a2:	69b9      	ldr	r1, [r7, #24]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f00c fe5f 	bl	8014e68 <sys_mbox_trypost>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80081b0:	69b8      	ldr	r0, [r7, #24]
 80081b2:	f001 fabb 	bl	800972c <netbuf_delete>
    return;
 80081b6:	e009      	b.n	80081cc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <recv_udp+0xe0>
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c4:	8afa      	ldrh	r2, [r7, #22]
 80081c6:	2100      	movs	r1, #0
 80081c8:	69f8      	ldr	r0, [r7, #28]
 80081ca:	4798      	blx	r3
  }
}
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	08016af4 	.word	0x08016af4
 80081d8:	08016b6c 	.word	0x08016b6c
 80081dc:	08016b38 	.word	0x08016b38
 80081e0:	08016b90 	.word	0x08016b90
 80081e4:	08016bb0 	.word	0x08016bb0

080081e8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d106      	bne.n	800820a <recv_tcp+0x22>
 80081fc:	4b36      	ldr	r3, [pc, #216]	@ (80082d8 <recv_tcp+0xf0>)
 80081fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008202:	4936      	ldr	r1, [pc, #216]	@ (80082dc <recv_tcp+0xf4>)
 8008204:	4836      	ldr	r0, [pc, #216]	@ (80082e0 <recv_tcp+0xf8>)
 8008206:	f00d f8dd 	bl	80153c4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <recv_tcp+0x36>
 8008210:	4b31      	ldr	r3, [pc, #196]	@ (80082d8 <recv_tcp+0xf0>)
 8008212:	f240 122d 	movw	r2, #301	@ 0x12d
 8008216:	4933      	ldr	r1, [pc, #204]	@ (80082e4 <recv_tcp+0xfc>)
 8008218:	4831      	ldr	r0, [pc, #196]	@ (80082e0 <recv_tcp+0xf8>)
 800821a:	f00d f8d3 	bl	80153c4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800821e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d006      	beq.n	8008234 <recv_tcp+0x4c>
 8008226:	4b2c      	ldr	r3, [pc, #176]	@ (80082d8 <recv_tcp+0xf0>)
 8008228:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800822c:	492e      	ldr	r1, [pc, #184]	@ (80082e8 <recv_tcp+0x100>)
 800822e:	482c      	ldr	r0, [pc, #176]	@ (80082e0 <recv_tcp+0xf8>)
 8008230:	f00d f8c8 	bl	80153c4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d102      	bne.n	8008244 <recv_tcp+0x5c>
    return ERR_VAL;
 800823e:	f06f 0305 	mvn.w	r3, #5
 8008242:	e045      	b.n	80082d0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	429a      	cmp	r2, r3
 800824c:	d006      	beq.n	800825c <recv_tcp+0x74>
 800824e:	4b22      	ldr	r3, [pc, #136]	@ (80082d8 <recv_tcp+0xf0>)
 8008250:	f240 1235 	movw	r2, #309	@ 0x135
 8008254:	4925      	ldr	r1, [pc, #148]	@ (80082ec <recv_tcp+0x104>)
 8008256:	4822      	ldr	r0, [pc, #136]	@ (80082e0 <recv_tcp+0xf8>)
 8008258:	f00d f8b4 	bl	80153c4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	3310      	adds	r3, #16
 8008260:	4618      	mov	r0, r3
 8008262:	f00c fe76 	bl	8014f52 <sys_mbox_valid>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10d      	bne.n	8008288 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	891b      	ldrh	r3, [r3, #8]
 8008276:	4619      	mov	r1, r3
 8008278:	68b8      	ldr	r0, [r7, #8]
 800827a:	f003 ffad 	bl	800c1d8 <tcp_recved>
      pbuf_free(p);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f003 f81a 	bl	800b2b8 <pbuf_free>
    }
    return ERR_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e023      	b.n	80082d0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <recv_tcp+0xb2>
    msg = p;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	891b      	ldrh	r3, [r3, #8]
 8008296:	83fb      	strh	r3, [r7, #30]
 8008298:	e003      	b.n	80082a2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800829a:	4b15      	ldr	r3, [pc, #84]	@ (80082f0 <recv_tcp+0x108>)
 800829c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	3310      	adds	r3, #16
 80082a6:	69b9      	ldr	r1, [r7, #24]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f00c fddd 	bl	8014e68 <sys_mbox_trypost>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	e00a      	b.n	80082d0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <recv_tcp+0xe6>
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c6:	8bfa      	ldrh	r2, [r7, #30]
 80082c8:	2100      	movs	r1, #0
 80082ca:	6978      	ldr	r0, [r7, #20]
 80082cc:	4798      	blx	r3
  }

  return ERR_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3720      	adds	r7, #32
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	08016af4 	.word	0x08016af4
 80082dc:	08016bd0 	.word	0x08016bd0
 80082e0:	08016b38 	.word	0x08016b38
 80082e4:	08016bf4 	.word	0x08016bf4
 80082e8:	08016c14 	.word	0x08016c14
 80082ec:	08016c2c 	.word	0x08016c2c
 80082f0:	08019afa 	.word	0x08019afa

080082f4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <poll_tcp+0x22>
 8008308:	4b29      	ldr	r3, [pc, #164]	@ (80083b0 <poll_tcp+0xbc>)
 800830a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800830e:	4929      	ldr	r1, [pc, #164]	@ (80083b4 <poll_tcp+0xc0>)
 8008310:	4829      	ldr	r0, [pc, #164]	@ (80083b8 <poll_tcp+0xc4>)
 8008312:	f00d f857 	bl	80153c4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d104      	bne.n	8008328 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800831e:	2101      	movs	r1, #1
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 ffab 	bl	800927c <lwip_netconn_do_writemore>
 8008326:	e016      	b.n	8008356 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b04      	cmp	r3, #4
 800832e:	d112      	bne.n	8008356 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <poll_tcp+0x5a>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	7a5b      	ldrb	r3, [r3, #9]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	7a5a      	ldrb	r2, [r3, #9]
 8008348:	3a01      	subs	r2, #1
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800834e:	2101      	movs	r1, #1
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fb3b 	bl	80089cc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	7f1b      	ldrb	r3, [r3, #28]
 800835a:	f003 0310 	and.w	r3, r3, #16
 800835e:	2b00      	cmp	r3, #0
 8008360:	d021      	beq.n	80083a6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d01d      	beq.n	80083a6 <poll_tcp+0xb2>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8008372:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8008376:	d316      	bcc.n	80083a6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008380:	2b04      	cmp	r3, #4
 8008382:	d810      	bhi.n	80083a6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	7f1b      	ldrb	r3, [r3, #28]
 8008388:	f023 0310 	bic.w	r3, r3, #16
 800838c:	b2da      	uxtb	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <poll_tcp+0xb2>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839e:	2200      	movs	r2, #0
 80083a0:	2102      	movs	r1, #2
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	08016af4 	.word	0x08016af4
 80083b4:	08016c4c 	.word	0x08016c4c
 80083b8:	08016b38 	.word	0x08016b38

080083bc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <sent_tcp+0x26>
 80083d4:	4b20      	ldr	r3, [pc, #128]	@ (8008458 <sent_tcp+0x9c>)
 80083d6:	f240 1293 	movw	r2, #403	@ 0x193
 80083da:	4920      	ldr	r1, [pc, #128]	@ (800845c <sent_tcp+0xa0>)
 80083dc:	4820      	ldr	r0, [pc, #128]	@ (8008460 <sent_tcp+0xa4>)
 80083de:	f00c fff1 	bl	80153c4 <iprintf>

  if (conn) {
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d032      	beq.n	800844e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	785b      	ldrb	r3, [r3, #1]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d104      	bne.n	80083fa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80083f0:	2101      	movs	r1, #1
 80083f2:	6978      	ldr	r0, [r7, #20]
 80083f4:	f000 ff42 	bl	800927c <lwip_netconn_do_writemore>
 80083f8:	e007      	b.n	800840a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d103      	bne.n	800840a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008402:	2101      	movs	r1, #1
 8008404:	6978      	ldr	r0, [r7, #20]
 8008406:	f000 fae1 	bl	80089cc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01d      	beq.n	800844e <sent_tcp+0x92>
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800841a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800841e:	d316      	bcc.n	800844e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008428:	2b04      	cmp	r3, #4
 800842a:	d810      	bhi.n	800844e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	7f1b      	ldrb	r3, [r3, #28]
 8008430:	f023 0310 	bic.w	r3, r3, #16
 8008434:	b2da      	uxtb	r2, r3
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843e:	2b00      	cmp	r3, #0
 8008440:	d005      	beq.n	800844e <sent_tcp+0x92>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008446:	88fa      	ldrh	r2, [r7, #6]
 8008448:	2102      	movs	r1, #2
 800844a:	6978      	ldr	r0, [r7, #20]
 800844c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	08016af4 	.word	0x08016af4
 800845c:	08016c4c 	.word	0x08016c4c
 8008460:	08016b38 	.word	0x08016b38

08008464 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <err_tcp+0x24>
 800847a:	4b5f      	ldr	r3, [pc, #380]	@ (80085f8 <err_tcp+0x194>)
 800847c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8008480:	495e      	ldr	r1, [pc, #376]	@ (80085fc <err_tcp+0x198>)
 8008482:	485f      	ldr	r0, [pc, #380]	@ (8008600 <err_tcp+0x19c>)
 8008484:	f00c ff9e 	bl	80153c4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008488:	f00c fe7e 	bl	8015188 <sys_arch_protect>
 800848c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2200      	movs	r2, #0
 8008492:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	78fa      	ldrb	r2, [r7, #3]
 8008498:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	7f1b      	ldrb	r3, [r3, #28]
 800849e:	f043 0301 	orr.w	r3, r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	2200      	movs	r2, #0
 80084b2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80084b4:	69b8      	ldr	r0, [r7, #24]
 80084b6:	f00c fe75 	bl	80151a4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <err_tcp+0x6a>
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c6:	2200      	movs	r2, #0
 80084c8:	2104      	movs	r1, #4
 80084ca:	69f8      	ldr	r0, [r7, #28]
 80084cc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d005      	beq.n	80084e2 <err_tcp+0x7e>
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084da:	2200      	movs	r2, #0
 80084dc:	2100      	movs	r1, #0
 80084de:	69f8      	ldr	r0, [r7, #28]
 80084e0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <err_tcp+0x92>
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ee:	2200      	movs	r2, #0
 80084f0:	2102      	movs	r1, #2
 80084f2:	69f8      	ldr	r0, [r7, #28]
 80084f4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80084f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff fd86 	bl	800800c <lwip_netconn_err_to_msg>
 8008500:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	3310      	adds	r3, #16
 8008506:	4618      	mov	r0, r3
 8008508:	f00c fd23 	bl	8014f52 <sys_mbox_valid>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	3310      	adds	r3, #16
 8008516:	6939      	ldr	r1, [r7, #16]
 8008518:	4618      	mov	r0, r3
 800851a:	f00c fca5 	bl	8014e68 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	3314      	adds	r3, #20
 8008522:	4618      	mov	r0, r3
 8008524:	f00c fd15 	bl	8014f52 <sys_mbox_valid>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	3314      	adds	r3, #20
 8008532:	6939      	ldr	r1, [r7, #16]
 8008534:	4618      	mov	r0, r3
 8008536:	f00c fc97 	bl	8014e68 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d005      	beq.n	800854c <err_tcp+0xe8>
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	2b04      	cmp	r3, #4
 8008544:	d002      	beq.n	800854c <err_tcp+0xe8>
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	2b03      	cmp	r3, #3
 800854a:	d143      	bne.n	80085d4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	7f1b      	ldrb	r3, [r3, #28]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	bf14      	ite	ne
 8008558:	2301      	movne	r3, #1
 800855a:	2300      	moveq	r3, #0
 800855c:	b2db      	uxtb	r3, r3
 800855e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	7f1b      	ldrb	r3, [r3, #28]
 8008564:	f023 0304 	bic.w	r3, r3, #4
 8008568:	b2da      	uxtb	r2, r3
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d13b      	bne.n	80085ec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d106      	bne.n	800858a <err_tcp+0x126>
 800857c:	4b1e      	ldr	r3, [pc, #120]	@ (80085f8 <err_tcp+0x194>)
 800857e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008582:	4920      	ldr	r1, [pc, #128]	@ (8008604 <err_tcp+0x1a0>)
 8008584:	481e      	ldr	r0, [pc, #120]	@ (8008600 <err_tcp+0x19c>)
 8008586:	f00c ff1d 	bl	80153c4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	2b04      	cmp	r3, #4
 800858e:	d104      	bne.n	800859a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	2200      	movs	r2, #0
 8008596:	711a      	strb	r2, [r3, #4]
 8008598:	e003      	b.n	80085a2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	330c      	adds	r3, #12
 80085aa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80085ac:	68b8      	ldr	r0, [r7, #8]
 80085ae:	f00c fd61 	bl	8015074 <sys_sem_valid>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <err_tcp+0x162>
 80085b8:	4b0f      	ldr	r3, [pc, #60]	@ (80085f8 <err_tcp+0x194>)
 80085ba:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80085be:	4912      	ldr	r1, [pc, #72]	@ (8008608 <err_tcp+0x1a4>)
 80085c0:	480f      	ldr	r0, [pc, #60]	@ (8008600 <err_tcp+0x19c>)
 80085c2:	f00c feff 	bl	80153c4 <iprintf>
      conn->current_msg = NULL;
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	2200      	movs	r2, #0
 80085ca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80085cc:	68b8      	ldr	r0, [r7, #8]
 80085ce:	f00c fd37 	bl	8015040 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80085d2:	e00b      	b.n	80085ec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <err_tcp+0x18a>
 80085dc:	4b06      	ldr	r3, [pc, #24]	@ (80085f8 <err_tcp+0x194>)
 80085de:	f240 12f7 	movw	r2, #503	@ 0x1f7
 80085e2:	490a      	ldr	r1, [pc, #40]	@ (800860c <err_tcp+0x1a8>)
 80085e4:	4806      	ldr	r0, [pc, #24]	@ (8008600 <err_tcp+0x19c>)
 80085e6:	f00c feed 	bl	80153c4 <iprintf>
  }
}
 80085ea:	e000      	b.n	80085ee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80085ec:	bf00      	nop
}
 80085ee:	bf00      	nop
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	08016af4 	.word	0x08016af4
 80085fc:	08016c4c 	.word	0x08016c4c
 8008600:	08016b38 	.word	0x08016b38
 8008604:	08016c5c 	.word	0x08016c5c
 8008608:	08016c78 	.word	0x08016c78
 800860c:	08016c94 	.word	0x08016c94

08008610 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f004 fdb9 	bl	800d198 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008626:	490a      	ldr	r1, [pc, #40]	@ (8008650 <setup_tcp+0x40>)
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f004 fdc7 	bl	800d1bc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800862e:	4909      	ldr	r1, [pc, #36]	@ (8008654 <setup_tcp+0x44>)
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f004 fde5 	bl	800d200 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008636:	2202      	movs	r2, #2
 8008638:	4907      	ldr	r1, [pc, #28]	@ (8008658 <setup_tcp+0x48>)
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f004 fe3c 	bl	800d2b8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008640:	4906      	ldr	r1, [pc, #24]	@ (800865c <setup_tcp+0x4c>)
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f004 fdfe 	bl	800d244 <tcp_err>
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	080081e9 	.word	0x080081e9
 8008654:	080083bd 	.word	0x080083bd
 8008658:	080082f5 	.word	0x080082f5
 800865c:	08008465 	.word	0x08008465

08008660 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008660:	b590      	push	{r4, r7, lr}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d006      	beq.n	8008684 <pcb_new+0x24>
 8008676:	4b2b      	ldr	r3, [pc, #172]	@ (8008724 <pcb_new+0xc4>)
 8008678:	f240 2265 	movw	r2, #613	@ 0x265
 800867c:	492a      	ldr	r1, [pc, #168]	@ (8008728 <pcb_new+0xc8>)
 800867e:	482b      	ldr	r0, [pc, #172]	@ (800872c <pcb_new+0xcc>)
 8008680:	f00c fea0 	bl	80153c4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800868e:	2b10      	cmp	r3, #16
 8008690:	d022      	beq.n	80086d8 <pcb_new+0x78>
 8008692:	2b20      	cmp	r3, #32
 8008694:	d133      	bne.n	80086fe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681c      	ldr	r4, [r3, #0]
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	4618      	mov	r0, r3
 800869e:	f00a f8ac 	bl	80127fa <udp_new_ip_type>
 80086a2:	4603      	mov	r3, r0
 80086a4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d02a      	beq.n	8008706 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b22      	cmp	r3, #34	@ 0x22
 80086b8:	d104      	bne.n	80086c4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6858      	ldr	r0, [r3, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	4917      	ldr	r1, [pc, #92]	@ (8008730 <pcb_new+0xd0>)
 80086d2:	f00a f819 	bl	8012708 <udp_recv>
      }
      break;
 80086d6:	e016      	b.n	8008706 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681c      	ldr	r4, [r3, #0]
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	4618      	mov	r0, r3
 80086e0:	f004 fd4c 	bl	800d17c <tcp_new_ip_type>
 80086e4:	4603      	mov	r3, r0
 80086e6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00b      	beq.n	800870a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff ff8a 	bl	8008610 <setup_tcp>
      }
      break;
 80086fc:	e005      	b.n	800870a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	22fa      	movs	r2, #250	@ 0xfa
 8008702:	711a      	strb	r2, [r3, #4]
      return;
 8008704:	e00a      	b.n	800871c <pcb_new+0xbc>
      break;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <pcb_new+0xac>
      break;
 800870a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	22ff      	movs	r2, #255	@ 0xff
 800871a:	711a      	strb	r2, [r3, #4]
  }
}
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	bd90      	pop	{r4, r7, pc}
 8008722:	bf00      	nop
 8008724:	08016af4 	.word	0x08016af4
 8008728:	08016cd8 	.word	0x08016cd8
 800872c:	08016b38 	.word	0x08016b38
 8008730:	080080ed 	.word	0x080080ed

08008734 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff ff85 	bl	8008660 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	6039      	str	r1, [r7, #0]
 800876a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008770:	2007      	movs	r0, #7
 8008772:	f001 fe87 	bl	800a484 <memp_malloc>
 8008776:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <netconn_alloc+0x22>
    return NULL;
 800877e:	2300      	movs	r3, #0
 8008780:	e052      	b.n	8008828 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	79fa      	ldrb	r2, [r7, #7]
 800878c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800879a:	2b10      	cmp	r3, #16
 800879c:	d004      	beq.n	80087a8 <netconn_alloc+0x48>
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d105      	bne.n	80087ae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80087a2:	2306      	movs	r3, #6
 80087a4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80087a6:	e00a      	b.n	80087be <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80087a8:	2306      	movs	r3, #6
 80087aa:	617b      	str	r3, [r7, #20]
      break;
 80087ac:	e007      	b.n	80087be <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80087ae:	4b20      	ldr	r3, [pc, #128]	@ (8008830 <netconn_alloc+0xd0>)
 80087b0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80087b4:	491f      	ldr	r1, [pc, #124]	@ (8008834 <netconn_alloc+0xd4>)
 80087b6:	4820      	ldr	r0, [pc, #128]	@ (8008838 <netconn_alloc+0xd8>)
 80087b8:	f00c fe04 	bl	80153c4 <iprintf>
      goto free_and_return;
 80087bc:	e02f      	b.n	800881e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3310      	adds	r3, #16
 80087c2:	6979      	ldr	r1, [r7, #20]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f00c fb1b 	bl	8014e00 <sys_mbox_new>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d125      	bne.n	800881c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	330c      	adds	r3, #12
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f00c fbd9 	bl	8014f8e <sys_sem_new>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3310      	adds	r3, #16
 80087e6:	4618      	mov	r0, r3
 80087e8:	f00c fb2c 	bl	8014e44 <sys_mbox_free>
    goto free_and_return;
 80087ec:	e017      	b.n	800881e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3314      	adds	r3, #20
 80087f2:	4618      	mov	r0, r3
 80087f4:	f00c fbbe 	bl	8014f74 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f04f 32ff 	mov.w	r2, #4294967295
 8008804:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	7cfa      	ldrb	r2, [r7, #19]
 8008816:	771a      	strb	r2, [r3, #28]
  return conn;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	e005      	b.n	8008828 <netconn_alloc+0xc8>
    goto free_and_return;
 800881c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	2007      	movs	r0, #7
 8008822:	f001 fea5 	bl	800a570 <memp_free>
  return NULL;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	08016af4 	.word	0x08016af4
 8008834:	08016cf8 	.word	0x08016cf8
 8008838:	08016b38 	.word	0x08016b38

0800883c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d006      	beq.n	800885a <netconn_free+0x1e>
 800884c:	4b1b      	ldr	r3, [pc, #108]	@ (80088bc <netconn_free+0x80>)
 800884e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008852:	491b      	ldr	r1, [pc, #108]	@ (80088c0 <netconn_free+0x84>)
 8008854:	481b      	ldr	r0, [pc, #108]	@ (80088c4 <netconn_free+0x88>)
 8008856:	f00c fdb5 	bl	80153c4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3310      	adds	r3, #16
 800885e:	4618      	mov	r0, r3
 8008860:	f00c fb77 	bl	8014f52 <sys_mbox_valid>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d006      	beq.n	8008878 <netconn_free+0x3c>
 800886a:	4b14      	ldr	r3, [pc, #80]	@ (80088bc <netconn_free+0x80>)
 800886c:	f240 3223 	movw	r2, #803	@ 0x323
 8008870:	4915      	ldr	r1, [pc, #84]	@ (80088c8 <netconn_free+0x8c>)
 8008872:	4814      	ldr	r0, [pc, #80]	@ (80088c4 <netconn_free+0x88>)
 8008874:	f00c fda6 	bl	80153c4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3314      	adds	r3, #20
 800887c:	4618      	mov	r0, r3
 800887e:	f00c fb68 	bl	8014f52 <sys_mbox_valid>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d006      	beq.n	8008896 <netconn_free+0x5a>
 8008888:	4b0c      	ldr	r3, [pc, #48]	@ (80088bc <netconn_free+0x80>)
 800888a:	f240 3226 	movw	r2, #806	@ 0x326
 800888e:	490f      	ldr	r1, [pc, #60]	@ (80088cc <netconn_free+0x90>)
 8008890:	480c      	ldr	r0, [pc, #48]	@ (80088c4 <netconn_free+0x88>)
 8008892:	f00c fd97 	bl	80153c4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	330c      	adds	r3, #12
 800889a:	4618      	mov	r0, r3
 800889c:	f00c fbdd 	bl	801505a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	330c      	adds	r3, #12
 80088a4:	4618      	mov	r0, r3
 80088a6:	f00c fbf6 	bl	8015096 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	2007      	movs	r0, #7
 80088ae:	f001 fe5f 	bl	800a570 <memp_free>
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	08016af4 	.word	0x08016af4
 80088c0:	08016d20 	.word	0x08016d20
 80088c4:	08016b38 	.word	0x08016b38
 80088c8:	08016d50 	.word	0x08016d50
 80088cc:	08016d8c 	.word	0x08016d8c

080088d0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3310      	adds	r3, #16
 80088dc:	4618      	mov	r0, r3
 80088de:	f00c fb38 	bl	8014f52 <sys_mbox_valid>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d02f      	beq.n	8008948 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80088e8:	e018      	b.n	800891c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80088f2:	2b10      	cmp	r3, #16
 80088f4:	d10e      	bne.n	8008914 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f107 020f 	add.w	r2, r7, #15
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff fbba 	bl	8008078 <lwip_netconn_is_err_msg>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d108      	bne.n	800891c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	4618      	mov	r0, r3
 800890e:	f002 fcd3 	bl	800b2b8 <pbuf_free>
 8008912:	e003      	b.n	800891c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 ff08 	bl	800972c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3310      	adds	r3, #16
 8008920:	f107 0210 	add.w	r2, r7, #16
 8008924:	4611      	mov	r1, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f00c faf7 	bl	8014f1a <sys_arch_mbox_tryfetch>
 800892c:	4603      	mov	r3, r0
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d1da      	bne.n	80088ea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3310      	adds	r3, #16
 8008938:	4618      	mov	r0, r3
 800893a:	f00c fa83 	bl	8014e44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3310      	adds	r3, #16
 8008942:	4618      	mov	r0, r3
 8008944:	f00c fb16 	bl	8014f74 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3314      	adds	r3, #20
 800894c:	4618      	mov	r0, r3
 800894e:	f00c fb00 	bl	8014f52 <sys_mbox_valid>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d034      	beq.n	80089c2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008958:	e01d      	b.n	8008996 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f107 020e 	add.w	r2, r7, #14
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff fb88 	bl	8008078 <lwip_netconn_is_err_msg>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d113      	bne.n	8008996 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008972:	6978      	ldr	r0, [r7, #20]
 8008974:	f7ff ffac 	bl	80088d0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d007      	beq.n	8008990 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4618      	mov	r0, r3
 8008986:	f003 fb29 	bl	800bfdc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2200      	movs	r2, #0
 800898e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008990:	6978      	ldr	r0, [r7, #20]
 8008992:	f7ff ff53 	bl	800883c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3314      	adds	r3, #20
 800899a:	f107 0210 	add.w	r2, r7, #16
 800899e:	4611      	mov	r1, r2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f00c faba 	bl	8014f1a <sys_arch_mbox_tryfetch>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ac:	d1d5      	bne.n	800895a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3314      	adds	r3, #20
 80089b2:	4618      	mov	r0, r3
 80089b4:	f00c fa46 	bl	8014e44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3314      	adds	r3, #20
 80089bc:	4618      	mov	r0, r3
 80089be:	f00c fad9 	bl	8014f74 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80089c2:	bf00      	nop
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d106      	bne.n	80089f0 <lwip_netconn_do_close_internal+0x24>
 80089e2:	4b87      	ldr	r3, [pc, #540]	@ (8008c00 <lwip_netconn_do_close_internal+0x234>)
 80089e4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80089e8:	4986      	ldr	r1, [pc, #536]	@ (8008c04 <lwip_netconn_do_close_internal+0x238>)
 80089ea:	4887      	ldr	r0, [pc, #540]	@ (8008c08 <lwip_netconn_do_close_internal+0x23c>)
 80089ec:	f00c fcea 	bl	80153c4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d006      	beq.n	8008a0a <lwip_netconn_do_close_internal+0x3e>
 80089fc:	4b80      	ldr	r3, [pc, #512]	@ (8008c00 <lwip_netconn_do_close_internal+0x234>)
 80089fe:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8008a02:	4982      	ldr	r1, [pc, #520]	@ (8008c0c <lwip_netconn_do_close_internal+0x240>)
 8008a04:	4880      	ldr	r0, [pc, #512]	@ (8008c08 <lwip_netconn_do_close_internal+0x23c>)
 8008a06:	f00c fcdd 	bl	80153c4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	785b      	ldrb	r3, [r3, #1]
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d006      	beq.n	8008a20 <lwip_netconn_do_close_internal+0x54>
 8008a12:	4b7b      	ldr	r3, [pc, #492]	@ (8008c00 <lwip_netconn_do_close_internal+0x234>)
 8008a14:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8008a18:	497d      	ldr	r1, [pc, #500]	@ (8008c10 <lwip_netconn_do_close_internal+0x244>)
 8008a1a:	487b      	ldr	r0, [pc, #492]	@ (8008c08 <lwip_netconn_do_close_internal+0x23c>)
 8008a1c:	f00c fcd2 	bl	80153c4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d106      	bne.n	8008a36 <lwip_netconn_do_close_internal+0x6a>
 8008a28:	4b75      	ldr	r3, [pc, #468]	@ (8008c00 <lwip_netconn_do_close_internal+0x234>)
 8008a2a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8008a2e:	4979      	ldr	r1, [pc, #484]	@ (8008c14 <lwip_netconn_do_close_internal+0x248>)
 8008a30:	4875      	ldr	r0, [pc, #468]	@ (8008c08 <lwip_netconn_do_close_internal+0x23c>)
 8008a32:	f00c fcc7 	bl	80153c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <lwip_netconn_do_close_internal+0x80>
 8008a3e:	4b70      	ldr	r3, [pc, #448]	@ (8008c00 <lwip_netconn_do_close_internal+0x234>)
 8008a40:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008a44:	4974      	ldr	r1, [pc, #464]	@ (8008c18 <lwip_netconn_do_close_internal+0x24c>)
 8008a46:	4870      	ldr	r0, [pc, #448]	@ (8008c08 <lwip_netconn_do_close_internal+0x23c>)
 8008a48:	f00c fcbc 	bl	80153c4 <iprintf>

  tpcb = conn->pcb.tcp;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	7a1b      	ldrb	r3, [r3, #8]
 8008a58:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d102      	bne.n	8008a76 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	75bb      	strb	r3, [r7, #22]
 8008a74:	e01f      	b.n	8008ab6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00e      	beq.n	8008a9a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008a80:	2b05      	cmp	r3, #5
 8008a82:	d007      	beq.n	8008a94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008a88:	2b06      	cmp	r3, #6
 8008a8a:	d003      	beq.n	8008a94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d102      	bne.n	8008a9a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008a94:	2301      	movs	r3, #1
 8008a96:	75bb      	strb	r3, [r7, #22]
 8008a98:	e00d      	b.n	8008ab6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008a9a:	7b7b      	ldrb	r3, [r7, #13]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d008      	beq.n	8008ab2 <lwip_netconn_do_close_internal+0xe6>
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	8b5b      	ldrh	r3, [r3, #26]
 8008aa4:	f003 0310 	and.w	r3, r3, #16
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008aac:	2301      	movs	r3, #1
 8008aae:	75bb      	strb	r3, [r7, #22]
 8008ab0:	e001      	b.n	8008ab6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008ab6:	7dbb      	ldrb	r3, [r7, #22]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008abc:	2100      	movs	r1, #0
 8008abe:	6938      	ldr	r0, [r7, #16]
 8008ac0:	f004 fb6a 	bl	800d198 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	7d1b      	ldrb	r3, [r3, #20]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d104      	bne.n	8008ad6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008acc:	2100      	movs	r1, #0
 8008ace:	6938      	ldr	r0, [r7, #16]
 8008ad0:	f004 fbda 	bl	800d288 <tcp_accept>
 8008ad4:	e01d      	b.n	8008b12 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008adc:	2100      	movs	r1, #0
 8008ade:	6938      	ldr	r0, [r7, #16]
 8008ae0:	f004 fb6c 	bl	800d1bc <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6938      	ldr	r0, [r7, #16]
 8008ae8:	f004 fbce 	bl	800d288 <tcp_accept>
    }
    if (shut_tx) {
 8008aec:	7b7b      	ldrb	r3, [r7, #13]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008af2:	2100      	movs	r1, #0
 8008af4:	6938      	ldr	r0, [r7, #16]
 8008af6:	f004 fb83 	bl	800d200 <tcp_sent>
    }
    if (shut_close) {
 8008afa:	7dbb      	ldrb	r3, [r7, #22]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d008      	beq.n	8008b12 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008b00:	2200      	movs	r2, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	6938      	ldr	r0, [r7, #16]
 8008b06:	f004 fbd7 	bl	800d2b8 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6938      	ldr	r0, [r7, #16]
 8008b0e:	f004 fb99 	bl	800d244 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008b12:	7dbb      	ldrb	r3, [r7, #22]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008b18:	6938      	ldr	r0, [r7, #16]
 8008b1a:	f003 f919 	bl	800bd50 <tcp_close>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	75fb      	strb	r3, [r7, #23]
 8008b22:	e007      	b.n	8008b34 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	7b7a      	ldrb	r2, [r7, #13]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6938      	ldr	r0, [r7, #16]
 8008b2c:	f003 f93c 	bl	800bda8 <tcp_shutdown>
 8008b30:	4603      	mov	r3, r0
 8008b32:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	757b      	strb	r3, [r7, #21]
 8008b40:	e016      	b.n	8008b70 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4a:	d10f      	bne.n	8008b6c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	7a5b      	ldrb	r3, [r3, #9]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10c      	bne.n	8008b70 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008b56:	2301      	movs	r3, #1
 8008b58:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8008b5a:	7dbb      	ldrb	r3, [r7, #22]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008b60:	6938      	ldr	r0, [r7, #16]
 8008b62:	f003 fa3b 	bl	800bfdc <tcp_abort>
          err = ERR_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75fb      	strb	r3, [r7, #23]
 8008b6a:	e001      	b.n	8008b70 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008b70:	7d7b      	ldrb	r3, [r7, #21]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d052      	beq.n	8008c1c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	7dfa      	ldrb	r2, [r7, #23]
 8008b86:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d129      	bne.n	8008bf0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008b9c:	7dbb      	ldrb	r3, [r7, #22]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00c      	beq.n	8008bbc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <lwip_netconn_do_close_internal+0x1f0>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4798      	blx	r3
      }
      if (shut_rx) {
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <lwip_netconn_do_close_internal+0x20a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
      }
      if (shut_tx) {
 8008bd6:	7b7b      	ldrb	r3, [r7, #13]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d009      	beq.n	8008bf0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d005      	beq.n	8008bf0 <lwip_netconn_do_close_internal+0x224>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be8:	2200      	movs	r2, #0
 8008bea:	2102      	movs	r1, #2
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d002      	beq.n	8008bfc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008bf6:	68b8      	ldr	r0, [r7, #8]
 8008bf8:	f00c fa22 	bl	8015040 <sys_sem_signal>
    }
    return ERR_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e03c      	b.n	8008c7a <lwip_netconn_do_close_internal+0x2ae>
 8008c00:	08016af4 	.word	0x08016af4
 8008c04:	08016dc8 	.word	0x08016dc8
 8008c08:	08016b38 	.word	0x08016b38
 8008c0c:	08016dd8 	.word	0x08016dd8
 8008c10:	08016df8 	.word	0x08016df8
 8008c14:	08016e1c 	.word	0x08016e1c
 8008c18:	08016c5c 	.word	0x08016c5c
  }
  if (!close_finished) {
 8008c1c:	7d7b      	ldrb	r3, [r7, #21]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d11e      	bne.n	8008c60 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	7d1b      	ldrb	r3, [r3, #20]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d106      	bne.n	8008c38 <lwip_netconn_do_close_internal+0x26c>
 8008c2a:	4b16      	ldr	r3, [pc, #88]	@ (8008c84 <lwip_netconn_do_close_internal+0x2b8>)
 8008c2c:	f240 4241 	movw	r2, #1089	@ 0x441
 8008c30:	4915      	ldr	r1, [pc, #84]	@ (8008c88 <lwip_netconn_do_close_internal+0x2bc>)
 8008c32:	4816      	ldr	r0, [pc, #88]	@ (8008c8c <lwip_netconn_do_close_internal+0x2c0>)
 8008c34:	f00c fbc6 	bl	80153c4 <iprintf>
    if (shut_tx) {
 8008c38:	7b7b      	ldrb	r3, [r7, #13]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8008c3e:	4914      	ldr	r1, [pc, #80]	@ (8008c90 <lwip_netconn_do_close_internal+0x2c4>)
 8008c40:	6938      	ldr	r0, [r7, #16]
 8008c42:	f004 fadd 	bl	800d200 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008c46:	2201      	movs	r2, #1
 8008c48:	4912      	ldr	r1, [pc, #72]	@ (8008c94 <lwip_netconn_do_close_internal+0x2c8>)
 8008c4a:	6938      	ldr	r0, [r7, #16]
 8008c4c:	f004 fb34 	bl	800d2b8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008c50:	4911      	ldr	r1, [pc, #68]	@ (8008c98 <lwip_netconn_do_close_internal+0x2cc>)
 8008c52:	6938      	ldr	r0, [r7, #16]
 8008c54:	f004 faf6 	bl	800d244 <tcp_err>
    tcp_arg(tpcb, conn);
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	6938      	ldr	r0, [r7, #16]
 8008c5c:	f004 fa9c 	bl	800d198 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <lwip_netconn_do_close_internal+0x2aa>
 8008c68:	4b06      	ldr	r3, [pc, #24]	@ (8008c84 <lwip_netconn_do_close_internal+0x2b8>)
 8008c6a:	f240 424d 	movw	r2, #1101	@ 0x44d
 8008c6e:	490b      	ldr	r1, [pc, #44]	@ (8008c9c <lwip_netconn_do_close_internal+0x2d0>)
 8008c70:	4806      	ldr	r0, [pc, #24]	@ (8008c8c <lwip_netconn_do_close_internal+0x2c0>)
 8008c72:	f00c fba7 	bl	80153c4 <iprintf>
  return err;
 8008c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	08016af4 	.word	0x08016af4
 8008c88:	08016e30 	.word	0x08016e30
 8008c8c:	08016b38 	.word	0x08016b38
 8008c90:	080083bd 	.word	0x080083bd
 8008c94:	080082f5 	.word	0x080082f5
 8008c98:	08008465 	.word	0x08008465
 8008c9c:	08016e54 	.word	0x08016e54

08008ca0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	785b      	ldrb	r3, [r3, #1]
 8008cb2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008cb4:	7afb      	ldrb	r3, [r7, #11]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00d      	beq.n	8008cd6 <lwip_netconn_do_delconn+0x36>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008cc4:	2b10      	cmp	r3, #16
 8008cc6:	d006      	beq.n	8008cd6 <lwip_netconn_do_delconn+0x36>
 8008cc8:	4b60      	ldr	r3, [pc, #384]	@ (8008e4c <lwip_netconn_do_delconn+0x1ac>)
 8008cca:	f240 425e 	movw	r2, #1118	@ 0x45e
 8008cce:	4960      	ldr	r1, [pc, #384]	@ (8008e50 <lwip_netconn_do_delconn+0x1b0>)
 8008cd0:	4860      	ldr	r0, [pc, #384]	@ (8008e54 <lwip_netconn_do_delconn+0x1b4>)
 8008cd2:	f00c fb77 	bl	80153c4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d005      	beq.n	8008ce8 <lwip_netconn_do_delconn+0x48>
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d002      	beq.n	8008ce8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8008ce2:	7afb      	ldrb	r3, [r7, #11]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d109      	bne.n	8008cfc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008ce8:	7afb      	ldrb	r3, [r7, #11]
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d10a      	bne.n	8008d04 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	7f1b      	ldrb	r3, [r3, #28]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d103      	bne.n	8008d04 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	22fb      	movs	r2, #251	@ 0xfb
 8008d00:	711a      	strb	r2, [r3, #4]
 8008d02:	e097      	b.n	8008e34 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d10d      	bne.n	8008d26 <lwip_netconn_do_delconn+0x86>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	7f1b      	ldrb	r3, [r3, #28]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d106      	bne.n	8008d26 <lwip_netconn_do_delconn+0x86>
 8008d18:	4b4c      	ldr	r3, [pc, #304]	@ (8008e4c <lwip_netconn_do_delconn+0x1ac>)
 8008d1a:	f240 427a 	movw	r2, #1146	@ 0x47a
 8008d1e:	494e      	ldr	r1, [pc, #312]	@ (8008e58 <lwip_netconn_do_delconn+0x1b8>)
 8008d20:	484c      	ldr	r0, [pc, #304]	@ (8008e54 <lwip_netconn_do_delconn+0x1b4>)
 8008d22:	f00c fb4f 	bl	80153c4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fdcd 	bl	80088d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d05f      	beq.n	8008e00 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d4a:	2b10      	cmp	r3, #16
 8008d4c:	d00d      	beq.n	8008d6a <lwip_netconn_do_delconn+0xca>
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d151      	bne.n	8008df6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f009 fcf0 	bl	8012748 <udp_remove>
          break;
 8008d68:	e046      	b.n	8008df8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d006      	beq.n	8008d82 <lwip_netconn_do_delconn+0xe2>
 8008d74:	4b35      	ldr	r3, [pc, #212]	@ (8008e4c <lwip_netconn_do_delconn+0x1ac>)
 8008d76:	f240 4294 	movw	r2, #1172	@ 0x494
 8008d7a:	4938      	ldr	r1, [pc, #224]	@ (8008e5c <lwip_netconn_do_delconn+0x1bc>)
 8008d7c:	4835      	ldr	r0, [pc, #212]	@ (8008e54 <lwip_netconn_do_delconn+0x1b4>)
 8008d7e:	f00c fb21 	bl	80153c4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2204      	movs	r2, #4
 8008d88:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fe14 	bl	80089cc <lwip_netconn_do_close_internal>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d04b      	beq.n	8008e42 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d006      	beq.n	8008dc2 <lwip_netconn_do_delconn+0x122>
 8008db4:	4b25      	ldr	r3, [pc, #148]	@ (8008e4c <lwip_netconn_do_delconn+0x1ac>)
 8008db6:	f240 429a 	movw	r2, #1178	@ 0x49a
 8008dba:	4929      	ldr	r1, [pc, #164]	@ (8008e60 <lwip_netconn_do_delconn+0x1c0>)
 8008dbc:	4825      	ldr	r0, [pc, #148]	@ (8008e54 <lwip_netconn_do_delconn+0x1b4>)
 8008dbe:	f00c fb01 	bl	80153c4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8008dc2:	4828      	ldr	r0, [pc, #160]	@ (8008e64 <lwip_netconn_do_delconn+0x1c4>)
 8008dc4:	f00c f9ad 	bl	8015122 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	330c      	adds	r3, #12
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f00c f904 	bl	8014fde <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008dd6:	4823      	ldr	r0, [pc, #140]	@ (8008e64 <lwip_netconn_do_delconn+0x1c4>)
 8008dd8:	f00c f994 	bl	8015104 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d02d      	beq.n	8008e42 <lwip_netconn_do_delconn+0x1a2>
 8008de6:	4b19      	ldr	r3, [pc, #100]	@ (8008e4c <lwip_netconn_do_delconn+0x1ac>)
 8008de8:	f240 429e 	movw	r2, #1182	@ 0x49e
 8008dec:	491c      	ldr	r1, [pc, #112]	@ (8008e60 <lwip_netconn_do_delconn+0x1c0>)
 8008dee:	4819      	ldr	r0, [pc, #100]	@ (8008e54 <lwip_netconn_do_delconn+0x1b4>)
 8008df0:	f00c fae8 	bl	80153c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8008df4:	e025      	b.n	8008e42 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8008df6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d007      	beq.n	8008e1a <lwip_netconn_do_delconn+0x17a>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	6810      	ldr	r0, [r2, #0]
 8008e14:	2200      	movs	r2, #0
 8008e16:	2100      	movs	r1, #0
 8008e18:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d007      	beq.n	8008e34 <lwip_netconn_do_delconn+0x194>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	6810      	ldr	r0, [r2, #0]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2102      	movs	r1, #2
 8008e32:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f00c f91a 	bl	8015074 <sys_sem_valid>
 8008e40:	e000      	b.n	8008e44 <lwip_netconn_do_delconn+0x1a4>
          return;
 8008e42:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	08016af4 	.word	0x08016af4
 8008e50:	08016e64 	.word	0x08016e64
 8008e54:	08016b38 	.word	0x08016b38
 8008e58:	08016e78 	.word	0x08016e78
 8008e5c:	08016e98 	.word	0x08016e98
 8008e60:	08016eb4 	.word	0x08016eb4
 8008e64:	20008e64 	.word	0x20008e64

08008e68 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d025      	beq.n	8008eca <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e88:	2b10      	cmp	r3, #16
 8008e8a:	d00e      	beq.n	8008eaa <lwip_netconn_do_bind+0x42>
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d119      	bne.n	8008ec4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6858      	ldr	r0, [r3, #4]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6899      	ldr	r1, [r3, #8]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	899b      	ldrh	r3, [r3, #12]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f009 fb3c 	bl	801251c <udp_bind>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]
        break;
 8008ea8:	e011      	b.n	8008ece <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6858      	ldr	r0, [r3, #4]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	6899      	ldr	r1, [r3, #8]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	899b      	ldrh	r3, [r3, #12]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f003 f89b 	bl	800bff4 <tcp_bind>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8008ec2:	e004      	b.n	8008ece <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8008ec4:	23fa      	movs	r3, #250	@ 0xfa
 8008ec6:	73fb      	strb	r3, [r7, #15]
        break;
 8008ec8:	e001      	b.n	8008ece <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8008eca:	23fa      	movs	r3, #250	@ 0xfa
 8008ecc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	7bfa      	ldrb	r2, [r7, #15]
 8008ed2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008ed4:	bf00      	nop
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8008ef8:	f06f 0305 	mvn.w	r3, #5
 8008efc:	e070      	b.n	8008fe0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d006      	beq.n	8008f14 <lwip_netconn_do_connected+0x38>
 8008f06:	4b38      	ldr	r3, [pc, #224]	@ (8008fe8 <lwip_netconn_do_connected+0x10c>)
 8008f08:	f240 5223 	movw	r2, #1315	@ 0x523
 8008f0c:	4937      	ldr	r1, [pc, #220]	@ (8008fec <lwip_netconn_do_connected+0x110>)
 8008f0e:	4838      	ldr	r0, [pc, #224]	@ (8008ff0 <lwip_netconn_do_connected+0x114>)
 8008f10:	f00c fa58 	bl	80153c4 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10c      	bne.n	8008f36 <lwip_netconn_do_connected+0x5a>
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	7f1b      	ldrb	r3, [r3, #28]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <lwip_netconn_do_connected+0x5a>
 8008f28:	4b2f      	ldr	r3, [pc, #188]	@ (8008fe8 <lwip_netconn_do_connected+0x10c>)
 8008f2a:	f240 5224 	movw	r2, #1316	@ 0x524
 8008f2e:	4931      	ldr	r1, [pc, #196]	@ (8008ff4 <lwip_netconn_do_connected+0x118>)
 8008f30:	482f      	ldr	r0, [pc, #188]	@ (8008ff0 <lwip_netconn_do_connected+0x114>)
 8008f32:	f00c fa47 	bl	80153c4 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	79fa      	ldrb	r2, [r7, #7]
 8008f44:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d106      	bne.n	8008f6a <lwip_netconn_do_connected+0x8e>
 8008f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8008f64:	69b8      	ldr	r0, [r7, #24]
 8008f66:	f7ff fb53 	bl	8008610 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	7f1b      	ldrb	r3, [r3, #28]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bf0c      	ite	eq
 8008f76:	2301      	moveq	r3, #1
 8008f78:	2300      	movne	r3, #0
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	7f1b      	ldrb	r3, [r3, #28]
 8008f82:	f023 0304 	bic.w	r3, r3, #4
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <lwip_netconn_do_connected+0xbc>
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10c      	bne.n	8008fb2 <lwip_netconn_do_connected+0xd6>
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <lwip_netconn_do_connected+0xc8>
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d006      	beq.n	8008fb2 <lwip_netconn_do_connected+0xd6>
 8008fa4:	4b10      	ldr	r3, [pc, #64]	@ (8008fe8 <lwip_netconn_do_connected+0x10c>)
 8008fa6:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8008faa:	4913      	ldr	r1, [pc, #76]	@ (8008ff8 <lwip_netconn_do_connected+0x11c>)
 8008fac:	4810      	ldr	r0, [pc, #64]	@ (8008ff0 <lwip_netconn_do_connected+0x114>)
 8008fae:	f00c fa09 	bl	80153c4 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <lwip_netconn_do_connected+0xf6>
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2102      	movs	r1, #2
 8008fce:	69b8      	ldr	r0, [r7, #24]
 8008fd0:	4798      	blx	r3

  if (was_blocking) {
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8008fd8:	69f8      	ldr	r0, [r7, #28]
 8008fda:	f00c f831 	bl	8015040 <sys_sem_signal>
  }
  return ERR_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	08016af4 	.word	0x08016af4
 8008fec:	08016ebc 	.word	0x08016ebc
 8008ff0:	08016b38 	.word	0x08016b38
 8008ff4:	08016edc 	.word	0x08016edc
 8008ff8:	08016f1c 	.word	0x08016f1c

08008ffc <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d102      	bne.n	8009018 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009012:	23f1      	movs	r3, #241	@ 0xf1
 8009014:	75fb      	strb	r3, [r7, #23]
 8009016:	e09b      	b.n	8009150 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009022:	2b10      	cmp	r3, #16
 8009024:	d00f      	beq.n	8009046 <lwip_netconn_do_connect+0x4a>
 8009026:	2b20      	cmp	r3, #32
 8009028:	f040 8087 	bne.w	800913a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6858      	ldr	r0, [r3, #4]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6899      	ldr	r1, [r3, #8]
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	899b      	ldrh	r3, [r3, #12]
 800903a:	461a      	mov	r2, r3
 800903c:	f009 faf6 	bl	801262c <udp_connect>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]
        break;
 8009044:	e084      	b.n	8009150 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b03      	cmp	r3, #3
 800904e:	d102      	bne.n	8009056 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009050:	23f7      	movs	r3, #247	@ 0xf7
 8009052:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009054:	e07b      	b.n	800914e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	785b      	ldrb	r3, [r3, #1]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009060:	23f6      	movs	r3, #246	@ 0xf6
 8009062:	75fb      	strb	r3, [r7, #23]
        break;
 8009064:	e073      	b.n	800914e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff fad0 	bl	8008610 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6858      	ldr	r0, [r3, #4]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6899      	ldr	r1, [r3, #8]
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	899a      	ldrh	r2, [r3, #12]
 800907e:	4b38      	ldr	r3, [pc, #224]	@ (8009160 <lwip_netconn_do_connect+0x164>)
 8009080:	f003 f940 	bl	800c304 <tcp_connect>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d15e      	bne.n	800914e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	7f1b      	ldrb	r3, [r3, #28]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b00      	cmp	r3, #0
 800909c:	bf14      	ite	ne
 800909e:	2301      	movne	r3, #1
 80090a0:	2300      	moveq	r3, #0
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2203      	movs	r2, #3
 80090ac:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d009      	beq.n	80090c8 <lwip_netconn_do_connect+0xcc>
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	7f1a      	ldrb	r2, [r3, #28]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0204 	orr.w	r2, r2, #4
 80090c2:	b2d2      	uxtb	r2, r2
 80090c4:	771a      	strb	r2, [r3, #28]
 80090c6:	e008      	b.n	80090da <lwip_netconn_do_connect+0xde>
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	7f1a      	ldrb	r2, [r3, #28]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0204 	bic.w	r2, r2, #4
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80090e0:	23fb      	movs	r3, #251	@ 0xfb
 80090e2:	75fb      	strb	r3, [r7, #23]
        break;
 80090e4:	e033      	b.n	800914e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d006      	beq.n	8009106 <lwip_netconn_do_connect+0x10a>
 80090f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009164 <lwip_netconn_do_connect+0x168>)
 80090fa:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 80090fe:	491a      	ldr	r1, [pc, #104]	@ (8009168 <lwip_netconn_do_connect+0x16c>)
 8009100:	481a      	ldr	r0, [pc, #104]	@ (800916c <lwip_netconn_do_connect+0x170>)
 8009102:	f00c f95f 	bl	80153c4 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009106:	481a      	ldr	r0, [pc, #104]	@ (8009170 <lwip_netconn_do_connect+0x174>)
 8009108:	f00c f80b 	bl	8015122 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	330c      	adds	r3, #12
 8009112:	2100      	movs	r1, #0
 8009114:	4618      	mov	r0, r3
 8009116:	f00b ff62 	bl	8014fde <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800911a:	4815      	ldr	r0, [pc, #84]	@ (8009170 <lwip_netconn_do_connect+0x174>)
 800911c:	f00b fff2 	bl	8015104 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	2b03      	cmp	r3, #3
 8009128:	d116      	bne.n	8009158 <lwip_netconn_do_connect+0x15c>
 800912a:	4b0e      	ldr	r3, [pc, #56]	@ (8009164 <lwip_netconn_do_connect+0x168>)
 800912c:	f240 5274 	movw	r2, #1396	@ 0x574
 8009130:	490d      	ldr	r1, [pc, #52]	@ (8009168 <lwip_netconn_do_connect+0x16c>)
 8009132:	480e      	ldr	r0, [pc, #56]	@ (800916c <lwip_netconn_do_connect+0x170>)
 8009134:	f00c f946 	bl	80153c4 <iprintf>
              return;
 8009138:	e00e      	b.n	8009158 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800913a:	4b0a      	ldr	r3, [pc, #40]	@ (8009164 <lwip_netconn_do_connect+0x168>)
 800913c:	f240 527d 	movw	r2, #1405	@ 0x57d
 8009140:	490c      	ldr	r1, [pc, #48]	@ (8009174 <lwip_netconn_do_connect+0x178>)
 8009142:	480a      	ldr	r0, [pc, #40]	@ (800916c <lwip_netconn_do_connect+0x170>)
 8009144:	f00c f93e 	bl	80153c4 <iprintf>
 8009148:	23fa      	movs	r3, #250	@ 0xfa
 800914a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800914c:	e000      	b.n	8009150 <lwip_netconn_do_connect+0x154>
        break;
 800914e:	bf00      	nop
    }
  }
  msg->err = err;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	7dfa      	ldrb	r2, [r7, #23]
 8009154:	711a      	strb	r2, [r3, #4]
 8009156:	e000      	b.n	800915a <lwip_netconn_do_connect+0x15e>
              return;
 8009158:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	08008edd 	.word	0x08008edd
 8009164:	08016af4 	.word	0x08016af4
 8009168:	08016eb4 	.word	0x08016eb4
 800916c:	08016b38 	.word	0x08016b38
 8009170:	20008e64 	.word	0x20008e64
 8009174:	08016f3c 	.word	0x08016f3c

08009178 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe ff23 	bl	8007fd4 <netconn_err>
 800918e:	4603      	mov	r3, r0
 8009190:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d134      	bne.n	8009204 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d02d      	beq.n	8009200 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d123      	bne.n	80091fa <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10c      	bne.n	80091d6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f008 ffbc 	bl	8012148 <udp_send>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80091d4:	e016      	b.n	8009204 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6858      	ldr	r0, [r3, #4]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f103 0208 	add.w	r2, r3, #8
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	899b      	ldrh	r3, [r3, #12]
 80091f0:	f008 ffde 	bl	80121b0 <udp_sendto>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
          break;
 80091f8:	e004      	b.n	8009204 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80091fa:	23f5      	movs	r3, #245	@ 0xf5
 80091fc:	73fb      	strb	r3, [r7, #15]
          break;
 80091fe:	e001      	b.n	8009204 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8009200:	23f5      	movs	r3, #245	@ 0xf5
 8009202:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b086      	sub	sp, #24
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2200      	movs	r2, #0
 8009222:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d022      	beq.n	8009274 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009238:	2b10      	cmp	r3, #16
 800923a:	d11b      	bne.n	8009274 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009248:	d202      	bcs.n	8009250 <lwip_netconn_do_recv+0x3e>
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	b29b      	uxth	r3, r3
 800924e:	e001      	b.n	8009254 <lwip_netconn_do_recv+0x42>
 8009250:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009254:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	89fa      	ldrh	r2, [r7, #14]
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f002 ffb9 	bl	800c1d8 <tcp_recved>
        remaining -= recved;
 8009266:	89fb      	ldrh	r3, [r7, #14]
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e6      	bne.n	8009242 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009274:	bf00      	nop
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <lwip_netconn_do_writemore+0x24>
 8009292:	4b96      	ldr	r3, [pc, #600]	@ (80094ec <lwip_netconn_do_writemore+0x270>)
 8009294:	f240 6273 	movw	r2, #1651	@ 0x673
 8009298:	4995      	ldr	r1, [pc, #596]	@ (80094f0 <lwip_netconn_do_writemore+0x274>)
 800929a:	4896      	ldr	r0, [pc, #600]	@ (80094f4 <lwip_netconn_do_writemore+0x278>)
 800929c:	f00c f892 	bl	80153c4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d006      	beq.n	80092b6 <lwip_netconn_do_writemore+0x3a>
 80092a8:	4b90      	ldr	r3, [pc, #576]	@ (80094ec <lwip_netconn_do_writemore+0x270>)
 80092aa:	f240 6274 	movw	r2, #1652	@ 0x674
 80092ae:	4992      	ldr	r1, [pc, #584]	@ (80094f8 <lwip_netconn_do_writemore+0x27c>)
 80092b0:	4890      	ldr	r0, [pc, #576]	@ (80094f4 <lwip_netconn_do_writemore+0x278>)
 80092b2:	f00c f887 	bl	80153c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d106      	bne.n	80092cc <lwip_netconn_do_writemore+0x50>
 80092be:	4b8b      	ldr	r3, [pc, #556]	@ (80094ec <lwip_netconn_do_writemore+0x270>)
 80092c0:	f240 6275 	movw	r2, #1653	@ 0x675
 80092c4:	498d      	ldr	r1, [pc, #564]	@ (80094fc <lwip_netconn_do_writemore+0x280>)
 80092c6:	488b      	ldr	r0, [pc, #556]	@ (80094f4 <lwip_netconn_do_writemore+0x278>)
 80092c8:	f00c f87c 	bl	80153c4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d106      	bne.n	80092e2 <lwip_netconn_do_writemore+0x66>
 80092d4:	4b85      	ldr	r3, [pc, #532]	@ (80094ec <lwip_netconn_do_writemore+0x270>)
 80092d6:	f240 6276 	movw	r2, #1654	@ 0x676
 80092da:	4989      	ldr	r1, [pc, #548]	@ (8009500 <lwip_netconn_do_writemore+0x284>)
 80092dc:	4885      	ldr	r0, [pc, #532]	@ (80094f4 <lwip_netconn_do_writemore+0x278>)
 80092de:	f00c f871 	bl	80153c4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	699a      	ldr	r2, [r3, #24]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d306      	bcc.n	8009300 <lwip_netconn_do_writemore+0x84>
 80092f2:	4b7e      	ldr	r3, [pc, #504]	@ (80094ec <lwip_netconn_do_writemore+0x270>)
 80092f4:	f240 6277 	movw	r2, #1655	@ 0x677
 80092f8:	4982      	ldr	r1, [pc, #520]	@ (8009504 <lwip_netconn_do_writemore+0x288>)
 80092fa:	487e      	ldr	r0, [pc, #504]	@ (80094f4 <lwip_netconn_do_writemore+0x278>)
 80092fc:	f00c f862 	bl	80153c4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a1b      	ldr	r3, [r3, #32]
 8009304:	899b      	ldrh	r3, [r3, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <lwip_netconn_do_writemore+0x9c>
 800930a:	4b78      	ldr	r3, [pc, #480]	@ (80094ec <lwip_netconn_do_writemore+0x270>)
 800930c:	f240 6279 	movw	r2, #1657	@ 0x679
 8009310:	497d      	ldr	r1, [pc, #500]	@ (8009508 <lwip_netconn_do_writemore+0x28c>)
 8009312:	4878      	ldr	r0, [pc, #480]	@ (80094f4 <lwip_netconn_do_writemore+0x278>)
 8009314:	f00c f856 	bl	80153c4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	7f1b      	ldrb	r3, [r3, #28]
 800931e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7f1b      	ldrb	r3, [r3, #28]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <lwip_netconn_do_writemore+0xba>
 800932c:	7ebb      	ldrb	r3, [r7, #26]
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <lwip_netconn_do_writemore+0xbe>
 8009336:	2301      	movs	r3, #1
 8009338:	e000      	b.n	800933c <lwip_netconn_do_writemore+0xc0>
 800933a:	2300      	movs	r3, #0
 800933c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	4413      	add	r3, r2
 800934e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009368:	d307      	bcc.n	800937a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800936a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800936e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009370:	7ebb      	ldrb	r3, [r7, #26]
 8009372:	f043 0302 	orr.w	r3, r3, #2
 8009376:	76bb      	strb	r3, [r7, #26]
 8009378:	e001      	b.n	800937e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009386:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009388:	89fa      	ldrh	r2, [r7, #14]
 800938a:	8bbb      	ldrh	r3, [r7, #28]
 800938c:	429a      	cmp	r2, r3
 800938e:	d216      	bcs.n	80093be <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009390:	89fb      	ldrh	r3, [r7, #14]
 8009392:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009394:	7e3b      	ldrb	r3, [r7, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00d      	beq.n	80093b6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800939a:	8bbb      	ldrh	r3, [r7, #28]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10e      	bne.n	80093be <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <lwip_netconn_do_writemore+0x134>
 80093aa:	f06f 0306 	mvn.w	r3, #6
 80093ae:	e000      	b.n	80093b2 <lwip_netconn_do_writemore+0x136>
 80093b0:	2300      	movs	r3, #0
 80093b2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80093b4:	e07d      	b.n	80094b2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80093b6:	7ebb      	ldrb	r3, [r7, #26]
 80093b8:	f043 0302 	orr.w	r3, r3, #2
 80093bc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	691a      	ldr	r2, [r3, #16]
 80093c4:	8bbb      	ldrh	r3, [r7, #28]
 80093c6:	441a      	add	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a1b      	ldr	r3, [r3, #32]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d906      	bls.n	80093e2 <lwip_netconn_do_writemore+0x166>
 80093d4:	4b45      	ldr	r3, [pc, #276]	@ (80094ec <lwip_netconn_do_writemore+0x270>)
 80093d6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80093da:	494c      	ldr	r1, [pc, #304]	@ (800950c <lwip_netconn_do_writemore+0x290>)
 80093dc:	4845      	ldr	r0, [pc, #276]	@ (80094f4 <lwip_netconn_do_writemore+0x278>)
 80093de:	f00b fff1 	bl	80153c4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80093e2:	8bbb      	ldrh	r3, [r7, #28]
 80093e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d103      	bne.n	80093f4 <lwip_netconn_do_writemore+0x178>
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093f2:	d209      	bcs.n	8009408 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80093f8:	8bba      	ldrh	r2, [r7, #28]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d10b      	bne.n	8009416 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	899b      	ldrh	r3, [r3, #12]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d906      	bls.n	8009416 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009408:	2301      	movs	r3, #1
 800940a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800940c:	7ebb      	ldrb	r3, [r7, #26]
 800940e:	f043 0302 	orr.w	r3, r3, #2
 8009412:	76bb      	strb	r3, [r7, #26]
 8009414:	e001      	b.n	800941a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6858      	ldr	r0, [r3, #4]
 800941e:	7ebb      	ldrb	r3, [r7, #26]
 8009420:	8bba      	ldrh	r2, [r7, #28]
 8009422:	6979      	ldr	r1, [r7, #20]
 8009424:	f006 fdf4 	bl	8010010 <tcp_write>
 8009428:	4603      	mov	r3, r0
 800942a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800942c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d12c      	bne.n	800948e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	6999      	ldr	r1, [r3, #24]
 800943a:	8bba      	ldrh	r2, [r7, #28]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	440a      	add	r2, r1
 8009442:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	6919      	ldr	r1, [r3, #16]
 800944a:	8bba      	ldrh	r2, [r7, #28]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	440a      	add	r2, r1
 8009452:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	691a      	ldr	r2, [r3, #16]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	d113      	bne.n	800948e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	899a      	ldrh	r2, [r3, #12]
 800946c:	3a01      	subs	r2, #1
 800946e:	b292      	uxth	r2, r2
 8009470:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	899b      	ldrh	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d008      	beq.n	800948e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	3208      	adds	r2, #8
 8009484:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	2200      	movs	r2, #0
 800948c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800948e:	7e7b      	ldrb	r3, [r7, #25]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <lwip_netconn_do_writemore+0x222>
 8009494:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f43f af50 	beq.w	800933e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800949e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <lwip_netconn_do_writemore+0x234>
 80094a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d146      	bne.n	800953e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80094b0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80094b2:	7e3b      	ldrb	r3, [r7, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d02b      	beq.n	8009510 <lwip_netconn_do_writemore+0x294>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	699a      	ldr	r2, [r3, #24]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d223      	bcs.n	8009510 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <lwip_netconn_do_writemore+0x260>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d4:	2200      	movs	r2, #0
 80094d6:	2103      	movs	r1, #3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	7f1b      	ldrb	r3, [r3, #28]
 80094e0:	f043 0310 	orr.w	r3, r3, #16
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	771a      	strb	r2, [r3, #28]
 80094ea:	e028      	b.n	800953e <lwip_netconn_do_writemore+0x2c2>
 80094ec:	08016af4 	.word	0x08016af4
 80094f0:	08016c4c 	.word	0x08016c4c
 80094f4:	08016b38 	.word	0x08016b38
 80094f8:	08016f54 	.word	0x08016f54
 80094fc:	08016c5c 	.word	0x08016c5c
 8009500:	08016f74 	.word	0x08016f74
 8009504:	08016f8c 	.word	0x08016f8c
 8009508:	08016fcc 	.word	0x08016fcc
 800950c:	08016ff4 	.word	0x08016ff4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009518:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800951c:	d305      	bcc.n	800952a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009526:	2b04      	cmp	r3, #4
 8009528:	d909      	bls.n	800953e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <lwip_netconn_do_writemore+0x2c2>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009536:	2200      	movs	r2, #0
 8009538:	2103      	movs	r1, #3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800953e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d11d      	bne.n	8009582 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	699a      	ldr	r2, [r3, #24]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	429a      	cmp	r2, r3
 8009554:	d002      	beq.n	800955c <lwip_netconn_do_writemore+0x2e0>
 8009556:	7e3b      	ldrb	r3, [r7, #24]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800955c:	2301      	movs	r3, #1
 800955e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4618      	mov	r0, r3
 8009566:	f007 fb3d 	bl	8010be4 <tcp_output>
 800956a:	4603      	mov	r3, r0
 800956c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800956e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009572:	f113 0f04 	cmn.w	r3, #4
 8009576:	d12c      	bne.n	80095d2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009578:	7b3b      	ldrb	r3, [r7, #12]
 800957a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800957c:	2301      	movs	r3, #1
 800957e:	76fb      	strb	r3, [r7, #27]
 8009580:	e027      	b.n	80095d2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009582:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958a:	d120      	bne.n	80095ce <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4618      	mov	r0, r3
 8009592:	f007 fb27 	bl	8010be4 <tcp_output>
 8009596:	4603      	mov	r3, r0
 8009598:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800959a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800959e:	f113 0f04 	cmn.w	r3, #4
 80095a2:	d104      	bne.n	80095ae <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80095a4:	7b7b      	ldrb	r3, [r7, #13]
 80095a6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80095a8:	2301      	movs	r3, #1
 80095aa:	76fb      	strb	r3, [r7, #27]
 80095ac:	e011      	b.n	80095d2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80095ae:	7e3b      	ldrb	r3, [r7, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00e      	beq.n	80095d2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d102      	bne.n	80095c4 <lwip_netconn_do_writemore+0x348>
 80095be:	f06f 0306 	mvn.w	r3, #6
 80095c2:	e000      	b.n	80095c6 <lwip_netconn_do_writemore+0x34a>
 80095c4:	2300      	movs	r3, #0
 80095c6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80095c8:	2301      	movs	r3, #1
 80095ca:	76fb      	strb	r3, [r7, #27]
 80095cc:	e001      	b.n	80095d2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80095ce:	2301      	movs	r3, #1
 80095d0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80095d2:	7efb      	ldrb	r3, [r7, #27]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d015      	beq.n	8009604 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	330c      	adds	r3, #12
 80095e0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	7ffa      	ldrb	r2, [r7, #31]
 80095e8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80095f6:	78fb      	ldrb	r3, [r7, #3]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d006      	beq.n	800960a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80095fc:	68b8      	ldr	r0, [r7, #8]
 80095fe:	f00b fd1f 	bl	8015040 <sys_sem_signal>
 8009602:	e002      	b.n	800960a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009604:	f04f 33ff 	mov.w	r3, #4294967295
 8009608:	e000      	b.n	800960c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3720      	adds	r7, #32
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	785b      	ldrb	r3, [r3, #1]
 8009626:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d069      	beq.n	8009706 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800963c:	2b10      	cmp	r3, #16
 800963e:	d162      	bne.n	8009706 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009644:	2b03      	cmp	r3, #3
 8009646:	d002      	beq.n	800964e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009648:	7afb      	ldrb	r3, [r7, #11]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d05b      	beq.n	8009706 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800964e:	7afb      	ldrb	r3, [r7, #11]
 8009650:	2b03      	cmp	r3, #3
 8009652:	d103      	bne.n	800965c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	22f5      	movs	r2, #245	@ 0xf5
 8009658:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800965a:	e059      	b.n	8009710 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d103      	bne.n	800966a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22fb      	movs	r2, #251	@ 0xfb
 8009666:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009668:	e052      	b.n	8009710 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	7a1b      	ldrb	r3, [r3, #8]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d004      	beq.n	8009680 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff f928 	bl	80088d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d006      	beq.n	8009698 <lwip_netconn_do_close+0x84>
 800968a:	4b23      	ldr	r3, [pc, #140]	@ (8009718 <lwip_netconn_do_close+0x104>)
 800968c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8009690:	4922      	ldr	r1, [pc, #136]	@ (800971c <lwip_netconn_do_close+0x108>)
 8009692:	4823      	ldr	r0, [pc, #140]	@ (8009720 <lwip_netconn_do_close+0x10c>)
 8009694:	f00b fe96 	bl	80153c4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2204      	movs	r2, #4
 800969e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2100      	movs	r1, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff f98c 	bl	80089cc <lwip_netconn_do_close_internal>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d029      	beq.n	800970e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d006      	beq.n	80096d2 <lwip_netconn_do_close+0xbe>
 80096c4:	4b14      	ldr	r3, [pc, #80]	@ (8009718 <lwip_netconn_do_close+0x104>)
 80096c6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80096ca:	4916      	ldr	r1, [pc, #88]	@ (8009724 <lwip_netconn_do_close+0x110>)
 80096cc:	4814      	ldr	r0, [pc, #80]	@ (8009720 <lwip_netconn_do_close+0x10c>)
 80096ce:	f00b fe79 	bl	80153c4 <iprintf>
        UNLOCK_TCPIP_CORE();
 80096d2:	4815      	ldr	r0, [pc, #84]	@ (8009728 <lwip_netconn_do_close+0x114>)
 80096d4:	f00b fd25 	bl	8015122 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	330c      	adds	r3, #12
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f00b fc7c 	bl	8014fde <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80096e6:	4810      	ldr	r0, [pc, #64]	@ (8009728 <lwip_netconn_do_close+0x114>)
 80096e8:	f00b fd0c 	bl	8015104 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <lwip_netconn_do_close+0xfa>
 80096f6:	4b08      	ldr	r3, [pc, #32]	@ (8009718 <lwip_netconn_do_close+0x104>)
 80096f8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80096fc:	4909      	ldr	r1, [pc, #36]	@ (8009724 <lwip_netconn_do_close+0x110>)
 80096fe:	4808      	ldr	r0, [pc, #32]	@ (8009720 <lwip_netconn_do_close+0x10c>)
 8009700:	f00b fe60 	bl	80153c4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009704:	e003      	b.n	800970e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	22f5      	movs	r2, #245	@ 0xf5
 800970a:	711a      	strb	r2, [r3, #4]
 800970c:	e000      	b.n	8009710 <lwip_netconn_do_close+0xfc>
      return;
 800970e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	08016af4 	.word	0x08016af4
 800971c:	08016e98 	.word	0x08016e98
 8009720:	08016b38 	.word	0x08016b38
 8009724:	08016eb4 	.word	0x08016eb4
 8009728:	20008e64 	.word	0x20008e64

0800972c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d013      	beq.n	8009762 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00b      	beq.n	800975a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4618      	mov	r0, r3
 8009748:	f001 fdb6 	bl	800b2b8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	605a      	str	r2, [r3, #4]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	2006      	movs	r0, #6
 800975e:	f000 ff07 	bl	800a570 <memp_free>
  }
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009776:	f008 faed 	bl	8011d54 <sys_timeouts_sleeptime>
 800977a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009782:	d10b      	bne.n	800979c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009784:	4813      	ldr	r0, [pc, #76]	@ (80097d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009786:	f00b fccc 	bl	8015122 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800978a:	2200      	movs	r2, #0
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f00b fb84 	bl	8014e9c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009794:	480f      	ldr	r0, [pc, #60]	@ (80097d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009796:	f00b fcb5 	bl	8015104 <sys_mutex_lock>
    return;
 800979a:	e018      	b.n	80097ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80097a2:	f008 fa9d 	bl	8011ce0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80097a6:	e7e6      	b.n	8009776 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80097a8:	480a      	ldr	r0, [pc, #40]	@ (80097d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80097aa:	f00b fcba 	bl	8015122 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f00b fb72 	bl	8014e9c <sys_arch_mbox_fetch>
 80097b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80097ba:	4806      	ldr	r0, [pc, #24]	@ (80097d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80097bc:	f00b fca2 	bl	8015104 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c6:	d102      	bne.n	80097ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80097c8:	f008 fa8a 	bl	8011ce0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80097cc:	e7d3      	b.n	8009776 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20008e64 	.word	0x20008e64

080097d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80097e0:	4810      	ldr	r0, [pc, #64]	@ (8009824 <tcpip_thread+0x4c>)
 80097e2:	f00b fc8f 	bl	8015104 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80097e6:	4b10      	ldr	r3, [pc, #64]	@ (8009828 <tcpip_thread+0x50>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80097ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009828 <tcpip_thread+0x50>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a0e      	ldr	r2, [pc, #56]	@ (800982c <tcpip_thread+0x54>)
 80097f4:	6812      	ldr	r2, [r2, #0]
 80097f6:	4610      	mov	r0, r2
 80097f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80097fa:	f107 030c 	add.w	r3, r7, #12
 80097fe:	4619      	mov	r1, r3
 8009800:	480b      	ldr	r0, [pc, #44]	@ (8009830 <tcpip_thread+0x58>)
 8009802:	f7ff ffb3 	bl	800976c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d106      	bne.n	800981a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800980c:	4b09      	ldr	r3, [pc, #36]	@ (8009834 <tcpip_thread+0x5c>)
 800980e:	2291      	movs	r2, #145	@ 0x91
 8009810:	4909      	ldr	r1, [pc, #36]	@ (8009838 <tcpip_thread+0x60>)
 8009812:	480a      	ldr	r0, [pc, #40]	@ (800983c <tcpip_thread+0x64>)
 8009814:	f00b fdd6 	bl	80153c4 <iprintf>
      continue;
 8009818:	e003      	b.n	8009822 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f80f 	bl	8009840 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009822:	e7ea      	b.n	80097fa <tcpip_thread+0x22>
 8009824:	20008e64 	.word	0x20008e64
 8009828:	20008e58 	.word	0x20008e58
 800982c:	20008e5c 	.word	0x20008e5c
 8009830:	20008e60 	.word	0x20008e60
 8009834:	0801704c 	.word	0x0801704c
 8009838:	0801707c 	.word	0x0801707c
 800983c:	0801709c 	.word	0x0801709c

08009840 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d026      	beq.n	800989e <tcpip_thread_handle_msg+0x5e>
 8009850:	2b02      	cmp	r3, #2
 8009852:	dc2b      	bgt.n	80098ac <tcpip_thread_handle_msg+0x6c>
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <tcpip_thread_handle_msg+0x1e>
 8009858:	2b01      	cmp	r3, #1
 800985a:	d015      	beq.n	8009888 <tcpip_thread_handle_msg+0x48>
 800985c:	e026      	b.n	80098ac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6850      	ldr	r0, [r2, #4]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	6892      	ldr	r2, [r2, #8]
 800986a:	4611      	mov	r1, r2
 800986c:	4798      	blx	r3
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d004      	beq.n	800987e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	f001 fd1d 	bl	800b2b8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	2009      	movs	r0, #9
 8009882:	f000 fe75 	bl	800a570 <memp_free>
      break;
 8009886:	e018      	b.n	80098ba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	6892      	ldr	r2, [r2, #8]
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	2008      	movs	r0, #8
 8009898:	f000 fe6a 	bl	800a570 <memp_free>
      break;
 800989c:	e00d      	b.n	80098ba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	6892      	ldr	r2, [r2, #8]
 80098a6:	4610      	mov	r0, r2
 80098a8:	4798      	blx	r3
      break;
 80098aa:	e006      	b.n	80098ba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80098ac:	4b05      	ldr	r3, [pc, #20]	@ (80098c4 <tcpip_thread_handle_msg+0x84>)
 80098ae:	22cf      	movs	r2, #207	@ 0xcf
 80098b0:	4905      	ldr	r1, [pc, #20]	@ (80098c8 <tcpip_thread_handle_msg+0x88>)
 80098b2:	4806      	ldr	r0, [pc, #24]	@ (80098cc <tcpip_thread_handle_msg+0x8c>)
 80098b4:	f00b fd86 	bl	80153c4 <iprintf>
      break;
 80098b8:	bf00      	nop
  }
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	0801704c 	.word	0x0801704c
 80098c8:	0801707c 	.word	0x0801707c
 80098cc:	0801709c 	.word	0x0801709c

080098d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80098dc:	481a      	ldr	r0, [pc, #104]	@ (8009948 <tcpip_inpkt+0x78>)
 80098de:	f00b fb38 	bl	8014f52 <sys_mbox_valid>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d105      	bne.n	80098f4 <tcpip_inpkt+0x24>
 80098e8:	4b18      	ldr	r3, [pc, #96]	@ (800994c <tcpip_inpkt+0x7c>)
 80098ea:	22fc      	movs	r2, #252	@ 0xfc
 80098ec:	4918      	ldr	r1, [pc, #96]	@ (8009950 <tcpip_inpkt+0x80>)
 80098ee:	4819      	ldr	r0, [pc, #100]	@ (8009954 <tcpip_inpkt+0x84>)
 80098f0:	f00b fd68 	bl	80153c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80098f4:	2009      	movs	r0, #9
 80098f6:	f000 fdc5 	bl	800a484 <memp_malloc>
 80098fa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d102      	bne.n	8009908 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009902:	f04f 33ff 	mov.w	r3, #4294967295
 8009906:	e01a      	b.n	800993e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2200      	movs	r2, #0
 800990c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009920:	6979      	ldr	r1, [r7, #20]
 8009922:	4809      	ldr	r0, [pc, #36]	@ (8009948 <tcpip_inpkt+0x78>)
 8009924:	f00b faa0 	bl	8014e68 <sys_mbox_trypost>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d006      	beq.n	800993c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800992e:	6979      	ldr	r1, [r7, #20]
 8009930:	2009      	movs	r0, #9
 8009932:	f000 fe1d 	bl	800a570 <memp_free>
    return ERR_MEM;
 8009936:	f04f 33ff 	mov.w	r3, #4294967295
 800993a:	e000      	b.n	800993e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800993c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20008e60 	.word	0x20008e60
 800994c:	0801704c 	.word	0x0801704c
 8009950:	080170c4 	.word	0x080170c4
 8009954:	0801709c 	.word	0x0801709c

08009958 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009968:	f003 0318 	and.w	r3, r3, #24
 800996c:	2b00      	cmp	r3, #0
 800996e:	d006      	beq.n	800997e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009970:	4a08      	ldr	r2, [pc, #32]	@ (8009994 <tcpip_input+0x3c>)
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7ff ffab 	bl	80098d0 <tcpip_inpkt>
 800997a:	4603      	mov	r3, r0
 800997c:	e005      	b.n	800998a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800997e:	4a06      	ldr	r2, [pc, #24]	@ (8009998 <tcpip_input+0x40>)
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff ffa4 	bl	80098d0 <tcpip_inpkt>
 8009988:	4603      	mov	r3, r0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	08014c55 	.word	0x08014c55
 8009998:	08013b5d 	.word	0x08013b5d

0800999c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80099a6:	4819      	ldr	r0, [pc, #100]	@ (8009a0c <tcpip_try_callback+0x70>)
 80099a8:	f00b fad3 	bl	8014f52 <sys_mbox_valid>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d106      	bne.n	80099c0 <tcpip_try_callback+0x24>
 80099b2:	4b17      	ldr	r3, [pc, #92]	@ (8009a10 <tcpip_try_callback+0x74>)
 80099b4:	f240 125d 	movw	r2, #349	@ 0x15d
 80099b8:	4916      	ldr	r1, [pc, #88]	@ (8009a14 <tcpip_try_callback+0x78>)
 80099ba:	4817      	ldr	r0, [pc, #92]	@ (8009a18 <tcpip_try_callback+0x7c>)
 80099bc:	f00b fd02 	bl	80153c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80099c0:	2008      	movs	r0, #8
 80099c2:	f000 fd5f 	bl	800a484 <memp_malloc>
 80099c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80099ce:	f04f 33ff 	mov.w	r3, #4294967295
 80099d2:	e017      	b.n	8009a04 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80099e6:	68f9      	ldr	r1, [r7, #12]
 80099e8:	4808      	ldr	r0, [pc, #32]	@ (8009a0c <tcpip_try_callback+0x70>)
 80099ea:	f00b fa3d 	bl	8014e68 <sys_mbox_trypost>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d006      	beq.n	8009a02 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80099f4:	68f9      	ldr	r1, [r7, #12]
 80099f6:	2008      	movs	r0, #8
 80099f8:	f000 fdba 	bl	800a570 <memp_free>
    return ERR_MEM;
 80099fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009a00:	e000      	b.n	8009a04 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20008e60 	.word	0x20008e60
 8009a10:	0801704c 	.word	0x0801704c
 8009a14:	080170c4 	.word	0x080170c4
 8009a18:	0801709c 	.word	0x0801709c

08009a1c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009a28:	4806      	ldr	r0, [pc, #24]	@ (8009a44 <tcpip_send_msg_wait_sem+0x28>)
 8009a2a:	f00b fb6b 	bl	8015104 <sys_mutex_lock>
  fn(apimsg);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	68b8      	ldr	r0, [r7, #8]
 8009a32:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009a34:	4803      	ldr	r0, [pc, #12]	@ (8009a44 <tcpip_send_msg_wait_sem+0x28>)
 8009a36:	f00b fb74 	bl	8015122 <sys_mutex_unlock>
  return ERR_OK;
 8009a3a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20008e64 	.word	0x20008e64

08009a48 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009a52:	f000 f871 	bl	8009b38 <lwip_init>

  tcpip_init_done = initfunc;
 8009a56:	4a17      	ldr	r2, [pc, #92]	@ (8009ab4 <tcpip_init+0x6c>)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009a5c:	4a16      	ldr	r2, [pc, #88]	@ (8009ab8 <tcpip_init+0x70>)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009a62:	2106      	movs	r1, #6
 8009a64:	4815      	ldr	r0, [pc, #84]	@ (8009abc <tcpip_init+0x74>)
 8009a66:	f00b f9cb 	bl	8014e00 <sys_mbox_new>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009a70:	4b13      	ldr	r3, [pc, #76]	@ (8009ac0 <tcpip_init+0x78>)
 8009a72:	f240 2261 	movw	r2, #609	@ 0x261
 8009a76:	4913      	ldr	r1, [pc, #76]	@ (8009ac4 <tcpip_init+0x7c>)
 8009a78:	4813      	ldr	r0, [pc, #76]	@ (8009ac8 <tcpip_init+0x80>)
 8009a7a:	f00b fca3 	bl	80153c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009a7e:	4813      	ldr	r0, [pc, #76]	@ (8009acc <tcpip_init+0x84>)
 8009a80:	f00b fb24 	bl	80150cc <sys_mutex_new>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d006      	beq.n	8009a98 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <tcpip_init+0x78>)
 8009a8c:	f240 2265 	movw	r2, #613	@ 0x265
 8009a90:	490f      	ldr	r1, [pc, #60]	@ (8009ad0 <tcpip_init+0x88>)
 8009a92:	480d      	ldr	r0, [pc, #52]	@ (8009ac8 <tcpip_init+0x80>)
 8009a94:	f00b fc96 	bl	80153c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	490c      	ldr	r1, [pc, #48]	@ (8009ad4 <tcpip_init+0x8c>)
 8009aa4:	480c      	ldr	r0, [pc, #48]	@ (8009ad8 <tcpip_init+0x90>)
 8009aa6:	f00b fb49 	bl	801513c <sys_thread_new>
}
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20008e58 	.word	0x20008e58
 8009ab8:	20008e5c 	.word	0x20008e5c
 8009abc:	20008e60 	.word	0x20008e60
 8009ac0:	0801704c 	.word	0x0801704c
 8009ac4:	080170d4 	.word	0x080170d4
 8009ac8:	0801709c 	.word	0x0801709c
 8009acc:	20008e64 	.word	0x20008e64
 8009ad0:	080170f8 	.word	0x080170f8
 8009ad4:	080097d9 	.word	0x080097d9
 8009ad8:	0801711c 	.word	0x0801711c

08009adc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	021b      	lsls	r3, r3, #8
 8009aea:	b21a      	sxth	r2, r3
 8009aec:	88fb      	ldrh	r3, [r7, #6]
 8009aee:	0a1b      	lsrs	r3, r3, #8
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	b21b      	sxth	r3, r3
 8009af4:	4313      	orrs	r3, r2
 8009af6:	b21b      	sxth	r3, r3
 8009af8:	b29b      	uxth	r3, r3
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	061a      	lsls	r2, r3, #24
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	0a1b      	lsrs	r3, r3, #8
 8009b20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009b24:	431a      	orrs	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	0e1b      	lsrs	r3, r3, #24
 8009b2a:	4313      	orrs	r3, r2
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009b42:	f00b fab5 	bl	80150b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009b46:	f000 f8d5 	bl	8009cf4 <mem_init>
  memp_init();
 8009b4a:	f000 fc2d 	bl	800a3a8 <memp_init>
  pbuf_init();
  netif_init();
 8009b4e:	f000 fd39 	bl	800a5c4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009b52:	f008 f937 	bl	8011dc4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009b56:	f001 feeb 	bl	800b930 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009b5a:	f008 f879 	bl	8011c50 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009b5e:	bf00      	nop
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009b72:	4b05      	ldr	r3, [pc, #20]	@ (8009b88 <ptr_to_mem+0x20>)
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	88fb      	ldrh	r3, [r7, #6]
 8009b78:	4413      	add	r3, r2
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20008e80 	.word	0x20008e80

08009b8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009b94:	4b05      	ldr	r3, [pc, #20]	@ (8009bac <mem_to_ptr+0x20>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	b29b      	uxth	r3, r3
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20008e80 	.word	0x20008e80

08009bb0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009bb0:	b590      	push	{r4, r7, lr}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009bb8:	4b45      	ldr	r3, [pc, #276]	@ (8009cd0 <plug_holes+0x120>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d206      	bcs.n	8009bd0 <plug_holes+0x20>
 8009bc2:	4b44      	ldr	r3, [pc, #272]	@ (8009cd4 <plug_holes+0x124>)
 8009bc4:	f240 12df 	movw	r2, #479	@ 0x1df
 8009bc8:	4943      	ldr	r1, [pc, #268]	@ (8009cd8 <plug_holes+0x128>)
 8009bca:	4844      	ldr	r0, [pc, #272]	@ (8009cdc <plug_holes+0x12c>)
 8009bcc:	f00b fbfa 	bl	80153c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009bd0:	4b43      	ldr	r3, [pc, #268]	@ (8009ce0 <plug_holes+0x130>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d306      	bcc.n	8009be8 <plug_holes+0x38>
 8009bda:	4b3e      	ldr	r3, [pc, #248]	@ (8009cd4 <plug_holes+0x124>)
 8009bdc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009be0:	4940      	ldr	r1, [pc, #256]	@ (8009ce4 <plug_holes+0x134>)
 8009be2:	483e      	ldr	r0, [pc, #248]	@ (8009cdc <plug_holes+0x12c>)
 8009be4:	f00b fbee 	bl	80153c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	791b      	ldrb	r3, [r3, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d006      	beq.n	8009bfe <plug_holes+0x4e>
 8009bf0:	4b38      	ldr	r3, [pc, #224]	@ (8009cd4 <plug_holes+0x124>)
 8009bf2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009bf6:	493c      	ldr	r1, [pc, #240]	@ (8009ce8 <plug_holes+0x138>)
 8009bf8:	4838      	ldr	r0, [pc, #224]	@ (8009cdc <plug_holes+0x12c>)
 8009bfa:	f00b fbe3 	bl	80153c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009c06:	d906      	bls.n	8009c16 <plug_holes+0x66>
 8009c08:	4b32      	ldr	r3, [pc, #200]	@ (8009cd4 <plug_holes+0x124>)
 8009c0a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8009c0e:	4937      	ldr	r1, [pc, #220]	@ (8009cec <plug_holes+0x13c>)
 8009c10:	4832      	ldr	r0, [pc, #200]	@ (8009cdc <plug_holes+0x12c>)
 8009c12:	f00b fbd7 	bl	80153c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff ffa4 	bl	8009b68 <ptr_to_mem>
 8009c20:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d024      	beq.n	8009c74 <plug_holes+0xc4>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	791b      	ldrb	r3, [r3, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d120      	bne.n	8009c74 <plug_holes+0xc4>
 8009c32:	4b2b      	ldr	r3, [pc, #172]	@ (8009ce0 <plug_holes+0x130>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d01b      	beq.n	8009c74 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8009cf0 <plug_holes+0x140>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d102      	bne.n	8009c4c <plug_holes+0x9c>
      lfree = mem;
 8009c46:	4a2a      	ldr	r2, [pc, #168]	@ (8009cf0 <plug_holes+0x140>)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	881a      	ldrh	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009c5c:	d00a      	beq.n	8009c74 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff ff80 	bl	8009b68 <ptr_to_mem>
 8009c68:	4604      	mov	r4, r0
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff ff8e 	bl	8009b8c <mem_to_ptr>
 8009c70:	4603      	mov	r3, r0
 8009c72:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	885b      	ldrh	r3, [r3, #2]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff ff75 	bl	8009b68 <ptr_to_mem>
 8009c7e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d01f      	beq.n	8009cc8 <plug_holes+0x118>
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	791b      	ldrb	r3, [r3, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d11b      	bne.n	8009cc8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009c90:	4b17      	ldr	r3, [pc, #92]	@ (8009cf0 <plug_holes+0x140>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d102      	bne.n	8009ca0 <plug_holes+0xf0>
      lfree = pmem;
 8009c9a:	4a15      	ldr	r2, [pc, #84]	@ (8009cf0 <plug_holes+0x140>)
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	881a      	ldrh	r2, [r3, #0]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009cb0:	d00a      	beq.n	8009cc8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff ff56 	bl	8009b68 <ptr_to_mem>
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	68b8      	ldr	r0, [r7, #8]
 8009cc0:	f7ff ff64 	bl	8009b8c <mem_to_ptr>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009cc8:	bf00      	nop
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd90      	pop	{r4, r7, pc}
 8009cd0:	20008e80 	.word	0x20008e80
 8009cd4:	0801712c 	.word	0x0801712c
 8009cd8:	0801715c 	.word	0x0801715c
 8009cdc:	08017174 	.word	0x08017174
 8009ce0:	20008e84 	.word	0x20008e84
 8009ce4:	0801719c 	.word	0x0801719c
 8009ce8:	080171b8 	.word	0x080171b8
 8009cec:	080171d4 	.word	0x080171d4
 8009cf0:	20008e8c 	.word	0x20008e8c

08009cf4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8009d70 <mem_init+0x7c>)
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d74 <mem_init+0x80>)
 8009cfe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009d00:	4b1b      	ldr	r3, [pc, #108]	@ (8009d70 <mem_init+0x7c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8009d0c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009d1a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8009d1e:	f7ff ff23 	bl	8009b68 <ptr_to_mem>
 8009d22:	4603      	mov	r3, r0
 8009d24:	4a14      	ldr	r2, [pc, #80]	@ (8009d78 <mem_init+0x84>)
 8009d26:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009d28:	4b13      	ldr	r3, [pc, #76]	@ (8009d78 <mem_init+0x84>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009d30:	4b11      	ldr	r3, [pc, #68]	@ (8009d78 <mem_init+0x84>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8009d38:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d78 <mem_init+0x84>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8009d42:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009d44:	4b0a      	ldr	r3, [pc, #40]	@ (8009d70 <mem_init+0x7c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a0c      	ldr	r2, [pc, #48]	@ (8009d7c <mem_init+0x88>)
 8009d4a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009d4c:	480c      	ldr	r0, [pc, #48]	@ (8009d80 <mem_init+0x8c>)
 8009d4e:	f00b f9bd 	bl	80150cc <sys_mutex_new>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d006      	beq.n	8009d66 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009d58:	4b0a      	ldr	r3, [pc, #40]	@ (8009d84 <mem_init+0x90>)
 8009d5a:	f240 221f 	movw	r2, #543	@ 0x21f
 8009d5e:	490a      	ldr	r1, [pc, #40]	@ (8009d88 <mem_init+0x94>)
 8009d60:	480a      	ldr	r0, [pc, #40]	@ (8009d8c <mem_init+0x98>)
 8009d62:	f00b fb2f 	bl	80153c4 <iprintf>
  }
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20008e80 	.word	0x20008e80
 8009d74:	20010000 	.word	0x20010000
 8009d78:	20008e84 	.word	0x20008e84
 8009d7c:	20008e8c 	.word	0x20008e8c
 8009d80:	20008e88 	.word	0x20008e88
 8009d84:	0801712c 	.word	0x0801712c
 8009d88:	08017200 	.word	0x08017200
 8009d8c:	08017174 	.word	0x08017174

08009d90 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fef7 	bl	8009b8c <mem_to_ptr>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fede 	bl	8009b68 <ptr_to_mem>
 8009dac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	885b      	ldrh	r3, [r3, #2]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff fed8 	bl	8009b68 <ptr_to_mem>
 8009db8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009dc2:	d818      	bhi.n	8009df6 <mem_link_valid+0x66>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	885b      	ldrh	r3, [r3, #2]
 8009dc8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009dcc:	d813      	bhi.n	8009df6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009dd2:	8afa      	ldrh	r2, [r7, #22]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d004      	beq.n	8009de2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	8afa      	ldrh	r2, [r7, #22]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d109      	bne.n	8009df6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009de2:	4b08      	ldr	r3, [pc, #32]	@ (8009e04 <mem_link_valid+0x74>)
 8009de4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d006      	beq.n	8009dfa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	885b      	ldrh	r3, [r3, #2]
 8009df0:	8afa      	ldrh	r2, [r7, #22]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d001      	beq.n	8009dfa <mem_link_valid+0x6a>
    return 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	e000      	b.n	8009dfc <mem_link_valid+0x6c>
  }
  return 1;
 8009dfa:	2301      	movs	r3, #1
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	20008e84 	.word	0x20008e84

08009e08 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d070      	beq.n	8009ef8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f003 0303 	and.w	r3, r3, #3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00d      	beq.n	8009e3c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009e20:	4b37      	ldr	r3, [pc, #220]	@ (8009f00 <mem_free+0xf8>)
 8009e22:	f240 2273 	movw	r2, #627	@ 0x273
 8009e26:	4937      	ldr	r1, [pc, #220]	@ (8009f04 <mem_free+0xfc>)
 8009e28:	4837      	ldr	r0, [pc, #220]	@ (8009f08 <mem_free+0x100>)
 8009e2a:	f00b facb 	bl	80153c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009e2e:	f00b f9ab 	bl	8015188 <sys_arch_protect>
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f00b f9b5 	bl	80151a4 <sys_arch_unprotect>
    return;
 8009e3a:	e05e      	b.n	8009efa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3b08      	subs	r3, #8
 8009e40:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009e42:	4b32      	ldr	r3, [pc, #200]	@ (8009f0c <mem_free+0x104>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d306      	bcc.n	8009e5a <mem_free+0x52>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f103 020c 	add.w	r2, r3, #12
 8009e52:	4b2f      	ldr	r3, [pc, #188]	@ (8009f10 <mem_free+0x108>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d90d      	bls.n	8009e76 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009e5a:	4b29      	ldr	r3, [pc, #164]	@ (8009f00 <mem_free+0xf8>)
 8009e5c:	f240 227f 	movw	r2, #639	@ 0x27f
 8009e60:	492c      	ldr	r1, [pc, #176]	@ (8009f14 <mem_free+0x10c>)
 8009e62:	4829      	ldr	r0, [pc, #164]	@ (8009f08 <mem_free+0x100>)
 8009e64:	f00b faae 	bl	80153c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009e68:	f00b f98e 	bl	8015188 <sys_arch_protect>
 8009e6c:	6138      	str	r0, [r7, #16]
 8009e6e:	6938      	ldr	r0, [r7, #16]
 8009e70:	f00b f998 	bl	80151a4 <sys_arch_unprotect>
    return;
 8009e74:	e041      	b.n	8009efa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009e76:	4828      	ldr	r0, [pc, #160]	@ (8009f18 <mem_free+0x110>)
 8009e78:	f00b f944 	bl	8015104 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	791b      	ldrb	r3, [r3, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d110      	bne.n	8009ea6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009e84:	4b1e      	ldr	r3, [pc, #120]	@ (8009f00 <mem_free+0xf8>)
 8009e86:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8009e8a:	4924      	ldr	r1, [pc, #144]	@ (8009f1c <mem_free+0x114>)
 8009e8c:	481e      	ldr	r0, [pc, #120]	@ (8009f08 <mem_free+0x100>)
 8009e8e:	f00b fa99 	bl	80153c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009e92:	4821      	ldr	r0, [pc, #132]	@ (8009f18 <mem_free+0x110>)
 8009e94:	f00b f945 	bl	8015122 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009e98:	f00b f976 	bl	8015188 <sys_arch_protect>
 8009e9c:	6178      	str	r0, [r7, #20]
 8009e9e:	6978      	ldr	r0, [r7, #20]
 8009ea0:	f00b f980 	bl	80151a4 <sys_arch_unprotect>
    return;
 8009ea4:	e029      	b.n	8009efa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009ea6:	69f8      	ldr	r0, [r7, #28]
 8009ea8:	f7ff ff72 	bl	8009d90 <mem_link_valid>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d110      	bne.n	8009ed4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009eb2:	4b13      	ldr	r3, [pc, #76]	@ (8009f00 <mem_free+0xf8>)
 8009eb4:	f240 2295 	movw	r2, #661	@ 0x295
 8009eb8:	4919      	ldr	r1, [pc, #100]	@ (8009f20 <mem_free+0x118>)
 8009eba:	4813      	ldr	r0, [pc, #76]	@ (8009f08 <mem_free+0x100>)
 8009ebc:	f00b fa82 	bl	80153c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009ec0:	4815      	ldr	r0, [pc, #84]	@ (8009f18 <mem_free+0x110>)
 8009ec2:	f00b f92e 	bl	8015122 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009ec6:	f00b f95f 	bl	8015188 <sys_arch_protect>
 8009eca:	61b8      	str	r0, [r7, #24]
 8009ecc:	69b8      	ldr	r0, [r7, #24]
 8009ece:	f00b f969 	bl	80151a4 <sys_arch_unprotect>
    return;
 8009ed2:	e012      	b.n	8009efa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009eda:	4b12      	ldr	r3, [pc, #72]	@ (8009f24 <mem_free+0x11c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d202      	bcs.n	8009eea <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8009f24 <mem_free+0x11c>)
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009eea:	69f8      	ldr	r0, [r7, #28]
 8009eec:	f7ff fe60 	bl	8009bb0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009ef0:	4809      	ldr	r0, [pc, #36]	@ (8009f18 <mem_free+0x110>)
 8009ef2:	f00b f916 	bl	8015122 <sys_mutex_unlock>
 8009ef6:	e000      	b.n	8009efa <mem_free+0xf2>
    return;
 8009ef8:	bf00      	nop
}
 8009efa:	3720      	adds	r7, #32
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	0801712c 	.word	0x0801712c
 8009f04:	0801721c 	.word	0x0801721c
 8009f08:	08017174 	.word	0x08017174
 8009f0c:	20008e80 	.word	0x20008e80
 8009f10:	20008e84 	.word	0x20008e84
 8009f14:	08017240 	.word	0x08017240
 8009f18:	20008e88 	.word	0x20008e88
 8009f1c:	0801725c 	.word	0x0801725c
 8009f20:	08017284 	.word	0x08017284
 8009f24:	20008e8c 	.word	0x20008e8c

08009f28 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009f34:	887b      	ldrh	r3, [r7, #2]
 8009f36:	3303      	adds	r3, #3
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	f023 0303 	bic.w	r3, r3, #3
 8009f3e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009f40:	8bfb      	ldrh	r3, [r7, #30]
 8009f42:	2b0b      	cmp	r3, #11
 8009f44:	d801      	bhi.n	8009f4a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009f46:	230c      	movs	r3, #12
 8009f48:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009f4a:	8bfb      	ldrh	r3, [r7, #30]
 8009f4c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009f50:	d803      	bhi.n	8009f5a <mem_trim+0x32>
 8009f52:	8bfa      	ldrh	r2, [r7, #30]
 8009f54:	887b      	ldrh	r3, [r7, #2]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d201      	bcs.n	8009f5e <mem_trim+0x36>
    return NULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	e0d8      	b.n	800a110 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009f5e:	4b6e      	ldr	r3, [pc, #440]	@ (800a118 <mem_trim+0x1f0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d304      	bcc.n	8009f72 <mem_trim+0x4a>
 8009f68:	4b6c      	ldr	r3, [pc, #432]	@ (800a11c <mem_trim+0x1f4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d306      	bcc.n	8009f80 <mem_trim+0x58>
 8009f72:	4b6b      	ldr	r3, [pc, #428]	@ (800a120 <mem_trim+0x1f8>)
 8009f74:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8009f78:	496a      	ldr	r1, [pc, #424]	@ (800a124 <mem_trim+0x1fc>)
 8009f7a:	486b      	ldr	r0, [pc, #428]	@ (800a128 <mem_trim+0x200>)
 8009f7c:	f00b fa22 	bl	80153c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009f80:	4b65      	ldr	r3, [pc, #404]	@ (800a118 <mem_trim+0x1f0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d304      	bcc.n	8009f94 <mem_trim+0x6c>
 8009f8a:	4b64      	ldr	r3, [pc, #400]	@ (800a11c <mem_trim+0x1f4>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d307      	bcc.n	8009fa4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009f94:	f00b f8f8 	bl	8015188 <sys_arch_protect>
 8009f98:	60b8      	str	r0, [r7, #8]
 8009f9a:	68b8      	ldr	r0, [r7, #8]
 8009f9c:	f00b f902 	bl	80151a4 <sys_arch_unprotect>
    return rmem;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	e0b5      	b.n	800a110 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3b08      	subs	r3, #8
 8009fa8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009faa:	69b8      	ldr	r0, [r7, #24]
 8009fac:	f7ff fdee 	bl	8009b8c <mem_to_ptr>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	881a      	ldrh	r2, [r3, #0]
 8009fb8:	8afb      	ldrh	r3, [r7, #22]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	3b08      	subs	r3, #8
 8009fc0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009fc2:	8bfa      	ldrh	r2, [r7, #30]
 8009fc4:	8abb      	ldrh	r3, [r7, #20]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d906      	bls.n	8009fd8 <mem_trim+0xb0>
 8009fca:	4b55      	ldr	r3, [pc, #340]	@ (800a120 <mem_trim+0x1f8>)
 8009fcc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009fd0:	4956      	ldr	r1, [pc, #344]	@ (800a12c <mem_trim+0x204>)
 8009fd2:	4855      	ldr	r0, [pc, #340]	@ (800a128 <mem_trim+0x200>)
 8009fd4:	f00b f9f6 	bl	80153c4 <iprintf>
  if (newsize > size) {
 8009fd8:	8bfa      	ldrh	r2, [r7, #30]
 8009fda:	8abb      	ldrh	r3, [r7, #20]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d901      	bls.n	8009fe4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e095      	b.n	800a110 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009fe4:	8bfa      	ldrh	r2, [r7, #30]
 8009fe6:	8abb      	ldrh	r3, [r7, #20]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d101      	bne.n	8009ff0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	e08f      	b.n	800a110 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009ff0:	484f      	ldr	r0, [pc, #316]	@ (800a130 <mem_trim+0x208>)
 8009ff2:	f00b f887 	bl	8015104 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff fdb4 	bl	8009b68 <ptr_to_mem>
 800a000:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	791b      	ldrb	r3, [r3, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d13f      	bne.n	800a08a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a012:	d106      	bne.n	800a022 <mem_trim+0xfa>
 800a014:	4b42      	ldr	r3, [pc, #264]	@ (800a120 <mem_trim+0x1f8>)
 800a016:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a01a:	4946      	ldr	r1, [pc, #280]	@ (800a134 <mem_trim+0x20c>)
 800a01c:	4842      	ldr	r0, [pc, #264]	@ (800a128 <mem_trim+0x200>)
 800a01e:	f00b f9d1 	bl	80153c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a028:	8afa      	ldrh	r2, [r7, #22]
 800a02a:	8bfb      	ldrh	r3, [r7, #30]
 800a02c:	4413      	add	r3, r2
 800a02e:	b29b      	uxth	r3, r3
 800a030:	3308      	adds	r3, #8
 800a032:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a034:	4b40      	ldr	r3, [pc, #256]	@ (800a138 <mem_trim+0x210>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d106      	bne.n	800a04c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a03e:	89fb      	ldrh	r3, [r7, #14]
 800a040:	4618      	mov	r0, r3
 800a042:	f7ff fd91 	bl	8009b68 <ptr_to_mem>
 800a046:	4603      	mov	r3, r0
 800a048:	4a3b      	ldr	r2, [pc, #236]	@ (800a138 <mem_trim+0x210>)
 800a04a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff fd8a 	bl	8009b68 <ptr_to_mem>
 800a054:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	2200      	movs	r2, #0
 800a05a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	89ba      	ldrh	r2, [r7, #12]
 800a060:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	8afa      	ldrh	r2, [r7, #22]
 800a066:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	89fa      	ldrh	r2, [r7, #14]
 800a06c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a076:	d047      	beq.n	800a108 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fd73 	bl	8009b68 <ptr_to_mem>
 800a082:	4602      	mov	r2, r0
 800a084:	89fb      	ldrh	r3, [r7, #14]
 800a086:	8053      	strh	r3, [r2, #2]
 800a088:	e03e      	b.n	800a108 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a08a:	8bfb      	ldrh	r3, [r7, #30]
 800a08c:	f103 0214 	add.w	r2, r3, #20
 800a090:	8abb      	ldrh	r3, [r7, #20]
 800a092:	429a      	cmp	r2, r3
 800a094:	d838      	bhi.n	800a108 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a096:	8afa      	ldrh	r2, [r7, #22]
 800a098:	8bfb      	ldrh	r3, [r7, #30]
 800a09a:	4413      	add	r3, r2
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	3308      	adds	r3, #8
 800a0a0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a0aa:	d106      	bne.n	800a0ba <mem_trim+0x192>
 800a0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a120 <mem_trim+0x1f8>)
 800a0ae:	f240 3216 	movw	r2, #790	@ 0x316
 800a0b2:	4920      	ldr	r1, [pc, #128]	@ (800a134 <mem_trim+0x20c>)
 800a0b4:	481c      	ldr	r0, [pc, #112]	@ (800a128 <mem_trim+0x200>)
 800a0b6:	f00b f985 	bl	80153c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a0ba:	89fb      	ldrh	r3, [r7, #14]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fd53 	bl	8009b68 <ptr_to_mem>
 800a0c2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a138 <mem_trim+0x210>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d202      	bcs.n	800a0d4 <mem_trim+0x1ac>
      lfree = mem2;
 800a0ce:	4a1a      	ldr	r2, [pc, #104]	@ (800a138 <mem_trim+0x210>)
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	881a      	ldrh	r2, [r3, #0]
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	8afa      	ldrh	r2, [r7, #22]
 800a0e6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	89fa      	ldrh	r2, [r7, #14]
 800a0ec:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a0f6:	d007      	beq.n	800a108 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff fd33 	bl	8009b68 <ptr_to_mem>
 800a102:	4602      	mov	r2, r0
 800a104:	89fb      	ldrh	r3, [r7, #14]
 800a106:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a108:	4809      	ldr	r0, [pc, #36]	@ (800a130 <mem_trim+0x208>)
 800a10a:	f00b f80a 	bl	8015122 <sys_mutex_unlock>
  return rmem;
 800a10e:	687b      	ldr	r3, [r7, #4]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3720      	adds	r7, #32
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20008e80 	.word	0x20008e80
 800a11c:	20008e84 	.word	0x20008e84
 800a120:	0801712c 	.word	0x0801712c
 800a124:	080172b8 	.word	0x080172b8
 800a128:	08017174 	.word	0x08017174
 800a12c:	080172d0 	.word	0x080172d0
 800a130:	20008e88 	.word	0x20008e88
 800a134:	080172f0 	.word	0x080172f0
 800a138:	20008e8c 	.word	0x20008e8c

0800a13c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <mem_malloc+0x14>
    return NULL;
 800a14c:	2300      	movs	r3, #0
 800a14e:	e0e2      	b.n	800a316 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	3303      	adds	r3, #3
 800a154:	b29b      	uxth	r3, r3
 800a156:	f023 0303 	bic.w	r3, r3, #3
 800a15a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a15c:	8bbb      	ldrh	r3, [r7, #28]
 800a15e:	2b0b      	cmp	r3, #11
 800a160:	d801      	bhi.n	800a166 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a162:	230c      	movs	r3, #12
 800a164:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a166:	8bbb      	ldrh	r3, [r7, #28]
 800a168:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a16c:	d803      	bhi.n	800a176 <mem_malloc+0x3a>
 800a16e:	8bba      	ldrh	r2, [r7, #28]
 800a170:	88fb      	ldrh	r3, [r7, #6]
 800a172:	429a      	cmp	r2, r3
 800a174:	d201      	bcs.n	800a17a <mem_malloc+0x3e>
    return NULL;
 800a176:	2300      	movs	r3, #0
 800a178:	e0cd      	b.n	800a316 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a17a:	4869      	ldr	r0, [pc, #420]	@ (800a320 <mem_malloc+0x1e4>)
 800a17c:	f00a ffc2 	bl	8015104 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a180:	4b68      	ldr	r3, [pc, #416]	@ (800a324 <mem_malloc+0x1e8>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fd01 	bl	8009b8c <mem_to_ptr>
 800a18a:	4603      	mov	r3, r0
 800a18c:	83fb      	strh	r3, [r7, #30]
 800a18e:	e0b7      	b.n	800a300 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a190:	8bfb      	ldrh	r3, [r7, #30]
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff fce8 	bl	8009b68 <ptr_to_mem>
 800a198:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	791b      	ldrb	r3, [r3, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f040 80a7 	bne.w	800a2f2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	8bfb      	ldrh	r3, [r7, #30]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	f1a3 0208 	sub.w	r2, r3, #8
 800a1b2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	f0c0 809c 	bcc.w	800a2f2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	8bfb      	ldrh	r3, [r7, #30]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	f1a3 0208 	sub.w	r2, r3, #8
 800a1c8:	8bbb      	ldrh	r3, [r7, #28]
 800a1ca:	3314      	adds	r3, #20
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d333      	bcc.n	800a238 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a1d0:	8bfa      	ldrh	r2, [r7, #30]
 800a1d2:	8bbb      	ldrh	r3, [r7, #28]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	3308      	adds	r3, #8
 800a1da:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a1dc:	8a7b      	ldrh	r3, [r7, #18]
 800a1de:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a1e2:	d106      	bne.n	800a1f2 <mem_malloc+0xb6>
 800a1e4:	4b50      	ldr	r3, [pc, #320]	@ (800a328 <mem_malloc+0x1ec>)
 800a1e6:	f240 3287 	movw	r2, #903	@ 0x387
 800a1ea:	4950      	ldr	r1, [pc, #320]	@ (800a32c <mem_malloc+0x1f0>)
 800a1ec:	4850      	ldr	r0, [pc, #320]	@ (800a330 <mem_malloc+0x1f4>)
 800a1ee:	f00b f8e9 	bl	80153c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a1f2:	8a7b      	ldrh	r3, [r7, #18]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff fcb7 	bl	8009b68 <ptr_to_mem>
 800a1fa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	881a      	ldrh	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	8bfa      	ldrh	r2, [r7, #30]
 800a20e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	8a7a      	ldrh	r2, [r7, #18]
 800a214:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2201      	movs	r2, #1
 800a21a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a224:	d00b      	beq.n	800a23e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff fc9c 	bl	8009b68 <ptr_to_mem>
 800a230:	4602      	mov	r2, r0
 800a232:	8a7b      	ldrh	r3, [r7, #18]
 800a234:	8053      	strh	r3, [r2, #2]
 800a236:	e002      	b.n	800a23e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2201      	movs	r2, #1
 800a23c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a23e:	4b39      	ldr	r3, [pc, #228]	@ (800a324 <mem_malloc+0x1e8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	429a      	cmp	r2, r3
 800a246:	d127      	bne.n	800a298 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a248:	4b36      	ldr	r3, [pc, #216]	@ (800a324 <mem_malloc+0x1e8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a24e:	e005      	b.n	800a25c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f7ff fc87 	bl	8009b68 <ptr_to_mem>
 800a25a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	791b      	ldrb	r3, [r3, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d004      	beq.n	800a26e <mem_malloc+0x132>
 800a264:	4b33      	ldr	r3, [pc, #204]	@ (800a334 <mem_malloc+0x1f8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d1f0      	bne.n	800a250 <mem_malloc+0x114>
          }
          lfree = cur;
 800a26e:	4a2d      	ldr	r2, [pc, #180]	@ (800a324 <mem_malloc+0x1e8>)
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a274:	4b2b      	ldr	r3, [pc, #172]	@ (800a324 <mem_malloc+0x1e8>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	4b2e      	ldr	r3, [pc, #184]	@ (800a334 <mem_malloc+0x1f8>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d00b      	beq.n	800a298 <mem_malloc+0x15c>
 800a280:	4b28      	ldr	r3, [pc, #160]	@ (800a324 <mem_malloc+0x1e8>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	791b      	ldrb	r3, [r3, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d006      	beq.n	800a298 <mem_malloc+0x15c>
 800a28a:	4b27      	ldr	r3, [pc, #156]	@ (800a328 <mem_malloc+0x1ec>)
 800a28c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a290:	4929      	ldr	r1, [pc, #164]	@ (800a338 <mem_malloc+0x1fc>)
 800a292:	4827      	ldr	r0, [pc, #156]	@ (800a330 <mem_malloc+0x1f4>)
 800a294:	f00b f896 	bl	80153c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a298:	4821      	ldr	r0, [pc, #132]	@ (800a320 <mem_malloc+0x1e4>)
 800a29a:	f00a ff42 	bl	8015122 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a29e:	8bba      	ldrh	r2, [r7, #28]
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	4a23      	ldr	r2, [pc, #140]	@ (800a334 <mem_malloc+0x1f8>)
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d906      	bls.n	800a2bc <mem_malloc+0x180>
 800a2ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a328 <mem_malloc+0x1ec>)
 800a2b0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a2b4:	4921      	ldr	r1, [pc, #132]	@ (800a33c <mem_malloc+0x200>)
 800a2b6:	481e      	ldr	r0, [pc, #120]	@ (800a330 <mem_malloc+0x1f4>)
 800a2b8:	f00b f884 	bl	80153c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f003 0303 	and.w	r3, r3, #3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d006      	beq.n	800a2d4 <mem_malloc+0x198>
 800a2c6:	4b18      	ldr	r3, [pc, #96]	@ (800a328 <mem_malloc+0x1ec>)
 800a2c8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a2cc:	491c      	ldr	r1, [pc, #112]	@ (800a340 <mem_malloc+0x204>)
 800a2ce:	4818      	ldr	r0, [pc, #96]	@ (800a330 <mem_malloc+0x1f4>)
 800a2d0:	f00b f878 	bl	80153c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d006      	beq.n	800a2ec <mem_malloc+0x1b0>
 800a2de:	4b12      	ldr	r3, [pc, #72]	@ (800a328 <mem_malloc+0x1ec>)
 800a2e0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a2e4:	4917      	ldr	r1, [pc, #92]	@ (800a344 <mem_malloc+0x208>)
 800a2e6:	4812      	ldr	r0, [pc, #72]	@ (800a330 <mem_malloc+0x1f4>)
 800a2e8:	f00b f86c 	bl	80153c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	e011      	b.n	800a316 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a2f2:	8bfb      	ldrh	r3, [r7, #30]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff fc37 	bl	8009b68 <ptr_to_mem>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a300:	8bfa      	ldrh	r2, [r7, #30]
 800a302:	8bbb      	ldrh	r3, [r7, #28]
 800a304:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800a308:	429a      	cmp	r2, r3
 800a30a:	f4ff af41 	bcc.w	800a190 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a30e:	4804      	ldr	r0, [pc, #16]	@ (800a320 <mem_malloc+0x1e4>)
 800a310:	f00a ff07 	bl	8015122 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3720      	adds	r7, #32
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20008e88 	.word	0x20008e88
 800a324:	20008e8c 	.word	0x20008e8c
 800a328:	0801712c 	.word	0x0801712c
 800a32c:	080172f0 	.word	0x080172f0
 800a330:	08017174 	.word	0x08017174
 800a334:	20008e84 	.word	0x20008e84
 800a338:	08017304 	.word	0x08017304
 800a33c:	08017320 	.word	0x08017320
 800a340:	08017350 	.word	0x08017350
 800a344:	08017380 	.word	0x08017380

0800a348 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	2200      	movs	r2, #0
 800a356:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	3303      	adds	r3, #3
 800a35e:	f023 0303 	bic.w	r3, r3, #3
 800a362:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a364:	2300      	movs	r3, #0
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	e011      	b.n	800a38e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	4413      	add	r3, r2
 800a386:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	885b      	ldrh	r3, [r3, #2]
 800a392:	461a      	mov	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4293      	cmp	r3, r2
 800a398:	dbe7      	blt.n	800a36a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a39a:	bf00      	nop
 800a39c:	bf00      	nop
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	80fb      	strh	r3, [r7, #6]
 800a3b2:	e009      	b.n	800a3c8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a3b4:	88fb      	ldrh	r3, [r7, #6]
 800a3b6:	4a08      	ldr	r2, [pc, #32]	@ (800a3d8 <memp_init+0x30>)
 800a3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7ff ffc3 	bl	800a348 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a3c2:	88fb      	ldrh	r3, [r7, #6]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	80fb      	strh	r3, [r7, #6]
 800a3c8:	88fb      	ldrh	r3, [r7, #6]
 800a3ca:	2b0c      	cmp	r3, #12
 800a3cc:	d9f2      	bls.n	800a3b4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	08019b98 	.word	0x08019b98

0800a3dc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a3e4:	f00a fed0 	bl	8015188 <sys_arch_protect>
 800a3e8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d015      	beq.n	800a424 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	f003 0303 	and.w	r3, r3, #3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d006      	beq.n	800a41a <do_memp_malloc_pool+0x3e>
 800a40c:	4b09      	ldr	r3, [pc, #36]	@ (800a434 <do_memp_malloc_pool+0x58>)
 800a40e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a412:	4909      	ldr	r1, [pc, #36]	@ (800a438 <do_memp_malloc_pool+0x5c>)
 800a414:	4809      	ldr	r0, [pc, #36]	@ (800a43c <do_memp_malloc_pool+0x60>)
 800a416:	f00a ffd5 	bl	80153c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f00a fec2 	bl	80151a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	e003      	b.n	800a42c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f00a febd 	bl	80151a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	080173a4 	.word	0x080173a4
 800a438:	080173d4 	.word	0x080173d4
 800a43c:	080173f8 	.word	0x080173f8

0800a440 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <memp_malloc_pool+0x1c>
 800a44e:	4b0a      	ldr	r3, [pc, #40]	@ (800a478 <memp_malloc_pool+0x38>)
 800a450:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a454:	4909      	ldr	r1, [pc, #36]	@ (800a47c <memp_malloc_pool+0x3c>)
 800a456:	480a      	ldr	r0, [pc, #40]	@ (800a480 <memp_malloc_pool+0x40>)
 800a458:	f00a ffb4 	bl	80153c4 <iprintf>
  if (desc == NULL) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <memp_malloc_pool+0x26>
    return NULL;
 800a462:	2300      	movs	r3, #0
 800a464:	e003      	b.n	800a46e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff ffb8 	bl	800a3dc <do_memp_malloc_pool>
 800a46c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	080173a4 	.word	0x080173a4
 800a47c:	08017420 	.word	0x08017420
 800a480:	080173f8 	.word	0x080173f8

0800a484 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4603      	mov	r3, r0
 800a48c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a48e:	79fb      	ldrb	r3, [r7, #7]
 800a490:	2b0c      	cmp	r3, #12
 800a492:	d908      	bls.n	800a4a6 <memp_malloc+0x22>
 800a494:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c0 <memp_malloc+0x3c>)
 800a496:	f240 1257 	movw	r2, #343	@ 0x157
 800a49a:	490a      	ldr	r1, [pc, #40]	@ (800a4c4 <memp_malloc+0x40>)
 800a49c:	480a      	ldr	r0, [pc, #40]	@ (800a4c8 <memp_malloc+0x44>)
 800a49e:	f00a ff91 	bl	80153c4 <iprintf>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e008      	b.n	800a4b8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	4a08      	ldr	r2, [pc, #32]	@ (800a4cc <memp_malloc+0x48>)
 800a4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7ff ff94 	bl	800a3dc <do_memp_malloc_pool>
 800a4b4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	080173a4 	.word	0x080173a4
 800a4c4:	08017434 	.word	0x08017434
 800a4c8:	080173f8 	.word	0x080173f8
 800a4cc:	08019b98 	.word	0x08019b98

0800a4d0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	f003 0303 	and.w	r3, r3, #3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d006      	beq.n	800a4f2 <do_memp_free_pool+0x22>
 800a4e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a51c <do_memp_free_pool+0x4c>)
 800a4e6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a4ea:	490d      	ldr	r1, [pc, #52]	@ (800a520 <do_memp_free_pool+0x50>)
 800a4ec:	480d      	ldr	r0, [pc, #52]	@ (800a524 <do_memp_free_pool+0x54>)
 800a4ee:	f00a ff69 	bl	80153c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a4f6:	f00a fe47 	bl	8015188 <sys_arch_protect>
 800a4fa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a50e:	68b8      	ldr	r0, [r7, #8]
 800a510:	f00a fe48 	bl	80151a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a514:	bf00      	nop
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	080173a4 	.word	0x080173a4
 800a520:	08017454 	.word	0x08017454
 800a524:	080173f8 	.word	0x080173f8

0800a528 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <memp_free_pool+0x1e>
 800a538:	4b0a      	ldr	r3, [pc, #40]	@ (800a564 <memp_free_pool+0x3c>)
 800a53a:	f240 1295 	movw	r2, #405	@ 0x195
 800a53e:	490a      	ldr	r1, [pc, #40]	@ (800a568 <memp_free_pool+0x40>)
 800a540:	480a      	ldr	r0, [pc, #40]	@ (800a56c <memp_free_pool+0x44>)
 800a542:	f00a ff3f 	bl	80153c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d007      	beq.n	800a55c <memp_free_pool+0x34>
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d004      	beq.n	800a55c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff ffbb 	bl	800a4d0 <do_memp_free_pool>
 800a55a:	e000      	b.n	800a55e <memp_free_pool+0x36>
    return;
 800a55c:	bf00      	nop
}
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	080173a4 	.word	0x080173a4
 800a568:	08017420 	.word	0x08017420
 800a56c:	080173f8 	.word	0x080173f8

0800a570 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	6039      	str	r1, [r7, #0]
 800a57a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	2b0c      	cmp	r3, #12
 800a580:	d907      	bls.n	800a592 <memp_free+0x22>
 800a582:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <memp_free+0x44>)
 800a584:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a588:	490b      	ldr	r1, [pc, #44]	@ (800a5b8 <memp_free+0x48>)
 800a58a:	480c      	ldr	r0, [pc, #48]	@ (800a5bc <memp_free+0x4c>)
 800a58c:	f00a ff1a 	bl	80153c4 <iprintf>
 800a590:	e00c      	b.n	800a5ac <memp_free+0x3c>

  if (mem == NULL) {
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d008      	beq.n	800a5aa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	4a09      	ldr	r2, [pc, #36]	@ (800a5c0 <memp_free+0x50>)
 800a59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7ff ff94 	bl	800a4d0 <do_memp_free_pool>
 800a5a8:	e000      	b.n	800a5ac <memp_free+0x3c>
    return;
 800a5aa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	080173a4 	.word	0x080173a4
 800a5b8:	08017474 	.word	0x08017474
 800a5bc:	080173f8 	.word	0x080173f8
 800a5c0:	08019b98 	.word	0x08019b98

0800a5c4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a5c8:	bf00      	nop
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d108      	bne.n	800a5fa <netif_add+0x26>
 800a5e8:	4b57      	ldr	r3, [pc, #348]	@ (800a748 <netif_add+0x174>)
 800a5ea:	f240 1227 	movw	r2, #295	@ 0x127
 800a5ee:	4957      	ldr	r1, [pc, #348]	@ (800a74c <netif_add+0x178>)
 800a5f0:	4857      	ldr	r0, [pc, #348]	@ (800a750 <netif_add+0x17c>)
 800a5f2:	f00a fee7 	bl	80153c4 <iprintf>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e0a2      	b.n	800a740 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d108      	bne.n	800a612 <netif_add+0x3e>
 800a600:	4b51      	ldr	r3, [pc, #324]	@ (800a748 <netif_add+0x174>)
 800a602:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a606:	4953      	ldr	r1, [pc, #332]	@ (800a754 <netif_add+0x180>)
 800a608:	4851      	ldr	r0, [pc, #324]	@ (800a750 <netif_add+0x17c>)
 800a60a:	f00a fedb 	bl	80153c4 <iprintf>
 800a60e:	2300      	movs	r3, #0
 800a610:	e096      	b.n	800a740 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a618:	4b4f      	ldr	r3, [pc, #316]	@ (800a758 <netif_add+0x184>)
 800a61a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a622:	4b4d      	ldr	r3, [pc, #308]	@ (800a758 <netif_add+0x184>)
 800a624:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a62c:	4b4a      	ldr	r3, [pc, #296]	@ (800a758 <netif_add+0x184>)
 800a62e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	4a45      	ldr	r2, [pc, #276]	@ (800a75c <netif_add+0x188>)
 800a646:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6a3a      	ldr	r2, [r7, #32]
 800a660:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a662:	4b3f      	ldr	r3, [pc, #252]	@ (800a760 <netif_add+0x18c>)
 800a664:	781a      	ldrb	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a670:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	68b9      	ldr	r1, [r7, #8]
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 f913 	bl	800a8a4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	4798      	blx	r3
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <netif_add+0xba>
    return NULL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	e058      	b.n	800a740 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a694:	2bff      	cmp	r3, #255	@ 0xff
 800a696:	d103      	bne.n	800a6a0 <netif_add+0xcc>
        netif->num = 0;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a6a4:	4b2f      	ldr	r3, [pc, #188]	@ (800a764 <netif_add+0x190>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e02b      	b.n	800a704 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d106      	bne.n	800a6c2 <netif_add+0xee>
 800a6b4:	4b24      	ldr	r3, [pc, #144]	@ (800a748 <netif_add+0x174>)
 800a6b6:	f240 128b 	movw	r2, #395	@ 0x18b
 800a6ba:	492b      	ldr	r1, [pc, #172]	@ (800a768 <netif_add+0x194>)
 800a6bc:	4824      	ldr	r0, [pc, #144]	@ (800a750 <netif_add+0x17c>)
 800a6be:	f00a fe81 	bl	80153c4 <iprintf>
        num_netifs++;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2bff      	cmp	r3, #255	@ 0xff
 800a6cc:	dd06      	ble.n	800a6dc <netif_add+0x108>
 800a6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a748 <netif_add+0x174>)
 800a6d0:	f240 128d 	movw	r2, #397	@ 0x18d
 800a6d4:	4925      	ldr	r1, [pc, #148]	@ (800a76c <netif_add+0x198>)
 800a6d6:	481e      	ldr	r0, [pc, #120]	@ (800a750 <netif_add+0x17c>)
 800a6d8:	f00a fe74 	bl	80153c4 <iprintf>
        if (netif2->num == netif->num) {
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d108      	bne.n	800a6fe <netif_add+0x12a>
          netif->num++;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800a6fc:	e005      	b.n	800a70a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	617b      	str	r3, [r7, #20]
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1d0      	bne.n	800a6ac <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1be      	bne.n	800a68e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a716:	2bfe      	cmp	r3, #254	@ 0xfe
 800a718:	d103      	bne.n	800a722 <netif_add+0x14e>
    netif_num = 0;
 800a71a:	4b11      	ldr	r3, [pc, #68]	@ (800a760 <netif_add+0x18c>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	e006      	b.n	800a730 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a728:	3301      	adds	r3, #1
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	4b0c      	ldr	r3, [pc, #48]	@ (800a760 <netif_add+0x18c>)
 800a72e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a730:	4b0c      	ldr	r3, [pc, #48]	@ (800a764 <netif_add+0x190>)
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a738:	4a0a      	ldr	r2, [pc, #40]	@ (800a764 <netif_add+0x190>)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a73e:	68fb      	ldr	r3, [r7, #12]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	08017490 	.word	0x08017490
 800a74c:	08017524 	.word	0x08017524
 800a750:	080174e0 	.word	0x080174e0
 800a754:	08017540 	.word	0x08017540
 800a758:	08019c0c 	.word	0x08019c0c
 800a75c:	0800ab7f 	.word	0x0800ab7f
 800a760:	2000bf64 	.word	0x2000bf64
 800a764:	2000bf5c 	.word	0x2000bf5c
 800a768:	08017564 	.word	0x08017564
 800a76c:	08017578 	.word	0x08017578

0800a770 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f002 ff41 	bl	800d604 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f008 f845 	bl	8012814 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <netif_do_set_ipaddr+0x20>
 800a7a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a81c <netif_do_set_ipaddr+0x88>)
 800a7a8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800a7ac:	491c      	ldr	r1, [pc, #112]	@ (800a820 <netif_do_set_ipaddr+0x8c>)
 800a7ae:	481d      	ldr	r0, [pc, #116]	@ (800a824 <netif_do_set_ipaddr+0x90>)
 800a7b0:	f00a fe08 	bl	80153c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <netif_do_set_ipaddr+0x34>
 800a7ba:	4b18      	ldr	r3, [pc, #96]	@ (800a81c <netif_do_set_ipaddr+0x88>)
 800a7bc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800a7c0:	4917      	ldr	r1, [pc, #92]	@ (800a820 <netif_do_set_ipaddr+0x8c>)
 800a7c2:	4818      	ldr	r0, [pc, #96]	@ (800a824 <netif_do_set_ipaddr+0x90>)
 800a7c4:	f00a fdfe 	bl	80153c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d01c      	beq.n	800a810 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a7e6:	f107 0314 	add.w	r3, r7, #20
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff ffbf 	bl	800a770 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <netif_do_set_ipaddr+0x6a>
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	e000      	b.n	800a800 <netif_do_set_ipaddr+0x6c>
 800a7fe:	2300      	movs	r3, #0
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a804:	2101      	movs	r1, #1
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 f8d2 	bl	800a9b0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a80c:	2301      	movs	r3, #1
 800a80e:	e000      	b.n	800a812 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3718      	adds	r7, #24
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	08017490 	.word	0x08017490
 800a820:	080175a8 	.word	0x080175a8
 800a824:	080174e0 	.word	0x080174e0

0800a828 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3308      	adds	r3, #8
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d00a      	beq.n	800a858 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <netif_do_set_netmask+0x26>
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	e000      	b.n	800a850 <netif_do_set_netmask+0x28>
 800a84e:	2300      	movs	r3, #0
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a854:	2301      	movs	r3, #1
 800a856:	e000      	b.n	800a85a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a866:	b480      	push	{r7}
 800a868:	b085      	sub	sp, #20
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	60f8      	str	r0, [r7, #12]
 800a86e:	60b9      	str	r1, [r7, #8]
 800a870:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	330c      	adds	r3, #12
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d00a      	beq.n	800a896 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d002      	beq.n	800a88c <netif_do_set_gw+0x26>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	e000      	b.n	800a88e <netif_do_set_gw+0x28>
 800a88c:	2300      	movs	r3, #0
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a892:	2301      	movs	r3, #1
 800a894:	e000      	b.n	800a898 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a8c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a934 <netif_set_addr+0x90>)
 800a8c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a8ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a934 <netif_set_addr+0x90>)
 800a8cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a8d4:	4b17      	ldr	r3, [pc, #92]	@ (800a934 <netif_set_addr+0x90>)
 800a8d6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <netif_set_addr+0x42>
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <netif_set_addr+0x46>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e000      	b.n	800a8ec <netif_set_addr+0x48>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a8f4:	f107 0310 	add.w	r3, r7, #16
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	68b9      	ldr	r1, [r7, #8]
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f7ff ff49 	bl	800a794 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a902:	69fa      	ldr	r2, [r7, #28]
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f7ff ff8e 	bl	800a828 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f7ff ffa8 	bl	800a866 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d106      	bne.n	800a92a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a91c:	f107 0310 	add.w	r3, r7, #16
 800a920:	461a      	mov	r2, r3
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f7ff ff35 	bl	800a794 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a92a:	bf00      	nop
 800a92c:	3720      	adds	r7, #32
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	08019c0c 	.word	0x08019c0c

0800a938 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a940:	4a04      	ldr	r2, [pc, #16]	@ (800a954 <netif_set_default+0x1c>)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	2000bf60 	.word	0x2000bf60

0800a958 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d107      	bne.n	800a976 <netif_set_up+0x1e>
 800a966:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a4 <netif_set_up+0x4c>)
 800a968:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800a96c:	490e      	ldr	r1, [pc, #56]	@ (800a9a8 <netif_set_up+0x50>)
 800a96e:	480f      	ldr	r0, [pc, #60]	@ (800a9ac <netif_set_up+0x54>)
 800a970:	f00a fd28 	bl	80153c4 <iprintf>
 800a974:	e013      	b.n	800a99e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10c      	bne.n	800a99e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a996:	2103      	movs	r1, #3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f809 	bl	800a9b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	08017490 	.word	0x08017490
 800a9a8:	08017618 	.word	0x08017618
 800a9ac:	080174e0 	.word	0x080174e0

0800a9b0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d106      	bne.n	800a9d0 <netif_issue_reports+0x20>
 800a9c2:	4b18      	ldr	r3, [pc, #96]	@ (800aa24 <netif_issue_reports+0x74>)
 800a9c4:	f240 326d 	movw	r2, #877	@ 0x36d
 800a9c8:	4917      	ldr	r1, [pc, #92]	@ (800aa28 <netif_issue_reports+0x78>)
 800a9ca:	4818      	ldr	r0, [pc, #96]	@ (800aa2c <netif_issue_reports+0x7c>)
 800a9cc:	f00a fcfa 	bl	80153c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a9d6:	f003 0304 	and.w	r3, r3, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d01e      	beq.n	800aa1c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a9e4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d017      	beq.n	800aa1c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d013      	beq.n	800aa1e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00e      	beq.n	800aa1e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aa06:	f003 0308 	and.w	r3, r3, #8
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d007      	beq.n	800aa1e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3304      	adds	r3, #4
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f008 fe67 	bl	80136e8 <etharp_request>
 800aa1a:	e000      	b.n	800aa1e <netif_issue_reports+0x6e>
    return;
 800aa1c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	08017490 	.word	0x08017490
 800aa28:	08017634 	.word	0x08017634
 800aa2c:	080174e0 	.word	0x080174e0

0800aa30 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d107      	bne.n	800aa4e <netif_set_down+0x1e>
 800aa3e:	4b12      	ldr	r3, [pc, #72]	@ (800aa88 <netif_set_down+0x58>)
 800aa40:	f240 329b 	movw	r2, #923	@ 0x39b
 800aa44:	4911      	ldr	r1, [pc, #68]	@ (800aa8c <netif_set_down+0x5c>)
 800aa46:	4812      	ldr	r0, [pc, #72]	@ (800aa90 <netif_set_down+0x60>)
 800aa48:	f00a fcbc 	bl	80153c4 <iprintf>
 800aa4c:	e019      	b.n	800aa82 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d012      	beq.n	800aa82 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aa62:	f023 0301 	bic.w	r3, r3, #1
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f008 f9f1 	bl	8012e64 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	08017490 	.word	0x08017490
 800aa8c:	08017658 	.word	0x08017658
 800aa90:	080174e0 	.word	0x080174e0

0800aa94 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d107      	bne.n	800aab2 <netif_set_link_up+0x1e>
 800aaa2:	4b13      	ldr	r3, [pc, #76]	@ (800aaf0 <netif_set_link_up+0x5c>)
 800aaa4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800aaa8:	4912      	ldr	r1, [pc, #72]	@ (800aaf4 <netif_set_link_up+0x60>)
 800aaaa:	4813      	ldr	r0, [pc, #76]	@ (800aaf8 <netif_set_link_up+0x64>)
 800aaac:	f00a fc8a 	bl	80153c4 <iprintf>
 800aab0:	e01b      	b.n	800aaea <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d114      	bne.n	800aaea <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aac6:	f043 0304 	orr.w	r3, r3, #4
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aad2:	2103      	movs	r1, #3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7ff ff6b 	bl	800a9b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <netif_set_link_up+0x56>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	08017490 	.word	0x08017490
 800aaf4:	08017678 	.word	0x08017678
 800aaf8:	080174e0 	.word	0x080174e0

0800aafc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d107      	bne.n	800ab1a <netif_set_link_down+0x1e>
 800ab0a:	4b11      	ldr	r3, [pc, #68]	@ (800ab50 <netif_set_link_down+0x54>)
 800ab0c:	f240 4206 	movw	r2, #1030	@ 0x406
 800ab10:	4910      	ldr	r1, [pc, #64]	@ (800ab54 <netif_set_link_down+0x58>)
 800ab12:	4811      	ldr	r0, [pc, #68]	@ (800ab58 <netif_set_link_down+0x5c>)
 800ab14:	f00a fc56 	bl	80153c4 <iprintf>
 800ab18:	e017      	b.n	800ab4a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d010      	beq.n	800ab4a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab2e:	f023 0304 	bic.w	r3, r3, #4
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <netif_set_link_down+0x4e>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	08017490 	.word	0x08017490
 800ab54:	0801769c 	.word	0x0801769c
 800ab58:	080174e0 	.word	0x080174e0

0800ab5c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	61da      	str	r2, [r3, #28]
  }
}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ab8a:	f06f 030b 	mvn.w	r3, #11
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
	...

0800ab9c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800aba6:	79fb      	ldrb	r3, [r7, #7]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d013      	beq.n	800abd4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800abac:	4b0d      	ldr	r3, [pc, #52]	@ (800abe4 <netif_get_by_index+0x48>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	e00c      	b.n	800abce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800abba:	3301      	adds	r3, #1
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	79fa      	ldrb	r2, [r7, #7]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d101      	bne.n	800abc8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	e006      	b.n	800abd6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1ef      	bne.n	800abb4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	2000bf5c 	.word	0x2000bf5c

0800abe8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800abee:	f00a facb 	bl	8015188 <sys_arch_protect>
 800abf2:	6038      	str	r0, [r7, #0]
 800abf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ac2c <pbuf_free_ooseq+0x44>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	6838      	ldr	r0, [r7, #0]
 800abfc:	f00a fad2 	bl	80151a4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ac00:	4b0b      	ldr	r3, [pc, #44]	@ (800ac30 <pbuf_free_ooseq+0x48>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	607b      	str	r3, [r7, #4]
 800ac06:	e00a      	b.n	800ac1e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f002 fd35 	bl	800d680 <tcp_free_ooseq>
      return;
 800ac16:	e005      	b.n	800ac24 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	607b      	str	r3, [r7, #4]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1f1      	bne.n	800ac08 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	2000bf65 	.word	0x2000bf65
 800ac30:	2000bf74 	.word	0x2000bf74

0800ac34 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ac3c:	f7ff ffd4 	bl	800abe8 <pbuf_free_ooseq>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ac4e:	f00a fa9b 	bl	8015188 <sys_arch_protect>
 800ac52:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ac54:	4b0f      	ldr	r3, [pc, #60]	@ (800ac94 <pbuf_pool_is_empty+0x4c>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ac5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac94 <pbuf_pool_is_empty+0x4c>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f00a fa9f 	bl	80151a4 <sys_arch_unprotect>

  if (!queued) {
 800ac66:	78fb      	ldrb	r3, [r7, #3]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10f      	bne.n	800ac8c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	480a      	ldr	r0, [pc, #40]	@ (800ac98 <pbuf_pool_is_empty+0x50>)
 800ac70:	f7fe fe94 	bl	800999c <tcpip_try_callback>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d008      	beq.n	800ac8c <pbuf_pool_is_empty+0x44>
 800ac7a:	f00a fa85 	bl	8015188 <sys_arch_protect>
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	4b04      	ldr	r3, [pc, #16]	@ (800ac94 <pbuf_pool_is_empty+0x4c>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f00a fa8c 	bl	80151a4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ac8c:	bf00      	nop
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	2000bf65 	.word	0x2000bf65
 800ac98:	0800ac35 	.word	0x0800ac35

0800ac9c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	4611      	mov	r1, r2
 800aca8:	461a      	mov	r2, r3
 800acaa:	460b      	mov	r3, r1
 800acac:	80fb      	strh	r3, [r7, #6]
 800acae:	4613      	mov	r3, r2
 800acb0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	88fa      	ldrh	r2, [r7, #6]
 800acc2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	88ba      	ldrh	r2, [r7, #4]
 800acc8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800acca:	8b3b      	ldrh	r3, [r7, #24]
 800accc:	b2da      	uxtb	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	7f3a      	ldrb	r2, [r7, #28]
 800acd6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2201      	movs	r2, #1
 800acdc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	73da      	strb	r2, [r3, #15]
}
 800ace4:	bf00      	nop
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08c      	sub	sp, #48	@ 0x30
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	4603      	mov	r3, r0
 800acf8:	71fb      	strb	r3, [r7, #7]
 800acfa:	460b      	mov	r3, r1
 800acfc:	80bb      	strh	r3, [r7, #4]
 800acfe:	4613      	mov	r3, r2
 800ad00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ad06:	887b      	ldrh	r3, [r7, #2]
 800ad08:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ad0c:	d07f      	beq.n	800ae0e <pbuf_alloc+0x11e>
 800ad0e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ad12:	f300 80c8 	bgt.w	800aea6 <pbuf_alloc+0x1b6>
 800ad16:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ad1a:	d010      	beq.n	800ad3e <pbuf_alloc+0x4e>
 800ad1c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ad20:	f300 80c1 	bgt.w	800aea6 <pbuf_alloc+0x1b6>
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d002      	beq.n	800ad2e <pbuf_alloc+0x3e>
 800ad28:	2b41      	cmp	r3, #65	@ 0x41
 800ad2a:	f040 80bc 	bne.w	800aea6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ad2e:	887a      	ldrh	r2, [r7, #2]
 800ad30:	88bb      	ldrh	r3, [r7, #4]
 800ad32:	4619      	mov	r1, r3
 800ad34:	2000      	movs	r0, #0
 800ad36:	f000 f8d1 	bl	800aedc <pbuf_alloc_reference>
 800ad3a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ad3c:	e0bd      	b.n	800aeba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ad46:	88bb      	ldrh	r3, [r7, #4]
 800ad48:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ad4a:	200c      	movs	r0, #12
 800ad4c:	f7ff fb9a 	bl	800a484 <memp_malloc>
 800ad50:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d109      	bne.n	800ad6c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ad58:	f7ff ff76 	bl	800ac48 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ad62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad64:	f000 faa8 	bl	800b2b8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e0a7      	b.n	800aebc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ad6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad6e:	3303      	adds	r3, #3
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	f023 0303 	bic.w	r3, r3, #3
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	8b7a      	ldrh	r2, [r7, #26]
 800ad80:	4293      	cmp	r3, r2
 800ad82:	bf28      	it	cs
 800ad84:	4613      	movcs	r3, r2
 800ad86:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ad88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad8a:	3310      	adds	r3, #16
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4413      	add	r3, r2
 800ad90:	3303      	adds	r3, #3
 800ad92:	f023 0303 	bic.w	r3, r3, #3
 800ad96:	4618      	mov	r0, r3
 800ad98:	89f9      	ldrh	r1, [r7, #14]
 800ad9a:	8b7a      	ldrh	r2, [r7, #26]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9301      	str	r3, [sp, #4]
 800ada0:	887b      	ldrh	r3, [r7, #2]
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	460b      	mov	r3, r1
 800ada6:	4601      	mov	r1, r0
 800ada8:	6938      	ldr	r0, [r7, #16]
 800adaa:	f7ff ff77 	bl	800ac9c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d006      	beq.n	800adc8 <pbuf_alloc+0xd8>
 800adba:	4b42      	ldr	r3, [pc, #264]	@ (800aec4 <pbuf_alloc+0x1d4>)
 800adbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800adc0:	4941      	ldr	r1, [pc, #260]	@ (800aec8 <pbuf_alloc+0x1d8>)
 800adc2:	4842      	ldr	r0, [pc, #264]	@ (800aecc <pbuf_alloc+0x1dc>)
 800adc4:	f00a fafe 	bl	80153c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800adc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800adca:	3303      	adds	r3, #3
 800adcc:	f023 0303 	bic.w	r3, r3, #3
 800add0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800add4:	d106      	bne.n	800ade4 <pbuf_alloc+0xf4>
 800add6:	4b3b      	ldr	r3, [pc, #236]	@ (800aec4 <pbuf_alloc+0x1d4>)
 800add8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800addc:	493c      	ldr	r1, [pc, #240]	@ (800aed0 <pbuf_alloc+0x1e0>)
 800adde:	483b      	ldr	r0, [pc, #236]	@ (800aecc <pbuf_alloc+0x1dc>)
 800ade0:	f00a faf0 	bl	80153c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ade4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d102      	bne.n	800adf0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	627b      	str	r3, [r7, #36]	@ 0x24
 800adee:	e002      	b.n	800adf6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800adfa:	8b7a      	ldrh	r2, [r7, #26]
 800adfc:	89fb      	ldrh	r3, [r7, #14]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ae06:	8b7b      	ldrh	r3, [r7, #26]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d19e      	bne.n	800ad4a <pbuf_alloc+0x5a>
      break;
 800ae0c:	e055      	b.n	800aeba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ae0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae10:	3303      	adds	r3, #3
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	f023 0303 	bic.w	r3, r3, #3
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	88bb      	ldrh	r3, [r7, #4]
 800ae1c:	3303      	adds	r3, #3
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f023 0303 	bic.w	r3, r3, #3
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	4413      	add	r3, r2
 800ae28:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ae2a:	8b3b      	ldrh	r3, [r7, #24]
 800ae2c:	3310      	adds	r3, #16
 800ae2e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ae30:	8b3a      	ldrh	r2, [r7, #24]
 800ae32:	88bb      	ldrh	r3, [r7, #4]
 800ae34:	3303      	adds	r3, #3
 800ae36:	f023 0303 	bic.w	r3, r3, #3
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d306      	bcc.n	800ae4c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ae3e:	8afa      	ldrh	r2, [r7, #22]
 800ae40:	88bb      	ldrh	r3, [r7, #4]
 800ae42:	3303      	adds	r3, #3
 800ae44:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d201      	bcs.n	800ae50 <pbuf_alloc+0x160>
        return NULL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e035      	b.n	800aebc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ae50:	8afb      	ldrh	r3, [r7, #22]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff f972 	bl	800a13c <mem_malloc>
 800ae58:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <pbuf_alloc+0x174>
        return NULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	e02b      	b.n	800aebc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ae64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ae66:	3310      	adds	r3, #16
 800ae68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3303      	adds	r3, #3
 800ae6e:	f023 0303 	bic.w	r3, r3, #3
 800ae72:	4618      	mov	r0, r3
 800ae74:	88b9      	ldrh	r1, [r7, #4]
 800ae76:	88ba      	ldrh	r2, [r7, #4]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	9301      	str	r3, [sp, #4]
 800ae7c:	887b      	ldrh	r3, [r7, #2]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	460b      	mov	r3, r1
 800ae82:	4601      	mov	r1, r0
 800ae84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae86:	f7ff ff09 	bl	800ac9c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f003 0303 	and.w	r3, r3, #3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d010      	beq.n	800aeb8 <pbuf_alloc+0x1c8>
 800ae96:	4b0b      	ldr	r3, [pc, #44]	@ (800aec4 <pbuf_alloc+0x1d4>)
 800ae98:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ae9c:	490d      	ldr	r1, [pc, #52]	@ (800aed4 <pbuf_alloc+0x1e4>)
 800ae9e:	480b      	ldr	r0, [pc, #44]	@ (800aecc <pbuf_alloc+0x1dc>)
 800aea0:	f00a fa90 	bl	80153c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800aea4:	e008      	b.n	800aeb8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800aea6:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <pbuf_alloc+0x1d4>)
 800aea8:	f240 1227 	movw	r2, #295	@ 0x127
 800aeac:	490a      	ldr	r1, [pc, #40]	@ (800aed8 <pbuf_alloc+0x1e8>)
 800aeae:	4807      	ldr	r0, [pc, #28]	@ (800aecc <pbuf_alloc+0x1dc>)
 800aeb0:	f00a fa88 	bl	80153c4 <iprintf>
      return NULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e001      	b.n	800aebc <pbuf_alloc+0x1cc>
      break;
 800aeb8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3728      	adds	r7, #40	@ 0x28
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	080176c0 	.word	0x080176c0
 800aec8:	080176f0 	.word	0x080176f0
 800aecc:	08017720 	.word	0x08017720
 800aed0:	08017748 	.word	0x08017748
 800aed4:	0801777c 	.word	0x0801777c
 800aed8:	080177a8 	.word	0x080177a8

0800aedc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	807b      	strh	r3, [r7, #2]
 800aee8:	4613      	mov	r3, r2
 800aeea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800aeec:	883b      	ldrh	r3, [r7, #0]
 800aeee:	2b41      	cmp	r3, #65	@ 0x41
 800aef0:	d009      	beq.n	800af06 <pbuf_alloc_reference+0x2a>
 800aef2:	883b      	ldrh	r3, [r7, #0]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d006      	beq.n	800af06 <pbuf_alloc_reference+0x2a>
 800aef8:	4b0f      	ldr	r3, [pc, #60]	@ (800af38 <pbuf_alloc_reference+0x5c>)
 800aefa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800aefe:	490f      	ldr	r1, [pc, #60]	@ (800af3c <pbuf_alloc_reference+0x60>)
 800af00:	480f      	ldr	r0, [pc, #60]	@ (800af40 <pbuf_alloc_reference+0x64>)
 800af02:	f00a fa5f 	bl	80153c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800af06:	200b      	movs	r0, #11
 800af08:	f7ff fabc 	bl	800a484 <memp_malloc>
 800af0c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	e00b      	b.n	800af30 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800af18:	8879      	ldrh	r1, [r7, #2]
 800af1a:	887a      	ldrh	r2, [r7, #2]
 800af1c:	2300      	movs	r3, #0
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	883b      	ldrh	r3, [r7, #0]
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	460b      	mov	r3, r1
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7ff feb7 	bl	800ac9c <pbuf_init_alloced_pbuf>
  return p;
 800af2e:	68fb      	ldr	r3, [r7, #12]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	080176c0 	.word	0x080176c0
 800af3c:	080177c4 	.word	0x080177c4
 800af40:	08017720 	.word	0x08017720

0800af44 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af02      	add	r7, sp, #8
 800af4a:	607b      	str	r3, [r7, #4]
 800af4c:	4603      	mov	r3, r0
 800af4e:	73fb      	strb	r3, [r7, #15]
 800af50:	460b      	mov	r3, r1
 800af52:	81bb      	strh	r3, [r7, #12]
 800af54:	4613      	mov	r3, r2
 800af56:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800af5c:	8a7b      	ldrh	r3, [r7, #18]
 800af5e:	3303      	adds	r3, #3
 800af60:	f023 0203 	bic.w	r2, r3, #3
 800af64:	89bb      	ldrh	r3, [r7, #12]
 800af66:	441a      	add	r2, r3
 800af68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d901      	bls.n	800af72 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800af6e:	2300      	movs	r3, #0
 800af70:	e018      	b.n	800afa4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d007      	beq.n	800af88 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800af78:	8a7b      	ldrh	r3, [r7, #18]
 800af7a:	3303      	adds	r3, #3
 800af7c:	f023 0303 	bic.w	r3, r3, #3
 800af80:	6a3a      	ldr	r2, [r7, #32]
 800af82:	4413      	add	r3, r2
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	e001      	b.n	800af8c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800af88:	2300      	movs	r3, #0
 800af8a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	89b9      	ldrh	r1, [r7, #12]
 800af90:	89ba      	ldrh	r2, [r7, #12]
 800af92:	2302      	movs	r3, #2
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	897b      	ldrh	r3, [r7, #10]
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	460b      	mov	r3, r1
 800af9c:	6979      	ldr	r1, [r7, #20]
 800af9e:	f7ff fe7d 	bl	800ac9c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800afa2:	687b      	ldr	r3, [r7, #4]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3718      	adds	r7, #24
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <pbuf_realloc+0x20>
 800afbe:	4b3a      	ldr	r3, [pc, #232]	@ (800b0a8 <pbuf_realloc+0xfc>)
 800afc0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800afc4:	4939      	ldr	r1, [pc, #228]	@ (800b0ac <pbuf_realloc+0x100>)
 800afc6:	483a      	ldr	r0, [pc, #232]	@ (800b0b0 <pbuf_realloc+0x104>)
 800afc8:	f00a f9fc 	bl	80153c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	891b      	ldrh	r3, [r3, #8]
 800afd0:	887a      	ldrh	r2, [r7, #2]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d263      	bcs.n	800b09e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	891a      	ldrh	r2, [r3, #8]
 800afda:	887b      	ldrh	r3, [r7, #2]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800afe0:	887b      	ldrh	r3, [r7, #2]
 800afe2:	817b      	strh	r3, [r7, #10]
  q = p;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800afe8:	e018      	b.n	800b01c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	895b      	ldrh	r3, [r3, #10]
 800afee:	897a      	ldrh	r2, [r7, #10]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	891a      	ldrh	r2, [r3, #8]
 800aff8:	893b      	ldrh	r3, [r7, #8]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	b29a      	uxth	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <pbuf_realloc+0x70>
 800b00e:	4b26      	ldr	r3, [pc, #152]	@ (800b0a8 <pbuf_realloc+0xfc>)
 800b010:	f240 12af 	movw	r2, #431	@ 0x1af
 800b014:	4927      	ldr	r1, [pc, #156]	@ (800b0b4 <pbuf_realloc+0x108>)
 800b016:	4826      	ldr	r0, [pc, #152]	@ (800b0b0 <pbuf_realloc+0x104>)
 800b018:	f00a f9d4 	bl	80153c4 <iprintf>
  while (rem_len > q->len) {
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	895b      	ldrh	r3, [r3, #10]
 800b020:	897a      	ldrh	r2, [r7, #10]
 800b022:	429a      	cmp	r2, r3
 800b024:	d8e1      	bhi.n	800afea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	7b1b      	ldrb	r3, [r3, #12]
 800b02a:	f003 030f 	and.w	r3, r3, #15
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d121      	bne.n	800b076 <pbuf_realloc+0xca>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	895b      	ldrh	r3, [r3, #10]
 800b036:	897a      	ldrh	r2, [r7, #10]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d01c      	beq.n	800b076 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	7b5b      	ldrb	r3, [r3, #13]
 800b040:	f003 0302 	and.w	r3, r3, #2
 800b044:	2b00      	cmp	r3, #0
 800b046:	d116      	bne.n	800b076 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	b29a      	uxth	r2, r3
 800b052:	897b      	ldrh	r3, [r7, #10]
 800b054:	4413      	add	r3, r2
 800b056:	b29b      	uxth	r3, r3
 800b058:	4619      	mov	r1, r3
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f7fe ff64 	bl	8009f28 <mem_trim>
 800b060:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d106      	bne.n	800b076 <pbuf_realloc+0xca>
 800b068:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a8 <pbuf_realloc+0xfc>)
 800b06a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b06e:	4912      	ldr	r1, [pc, #72]	@ (800b0b8 <pbuf_realloc+0x10c>)
 800b070:	480f      	ldr	r0, [pc, #60]	@ (800b0b0 <pbuf_realloc+0x104>)
 800b072:	f00a f9a7 	bl	80153c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	897a      	ldrh	r2, [r7, #10]
 800b07a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	895a      	ldrh	r2, [r3, #10]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d004      	beq.n	800b096 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f000 f911 	bl	800b2b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e000      	b.n	800b0a0 <pbuf_realloc+0xf4>
    return;
 800b09e:	bf00      	nop

}
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	080176c0 	.word	0x080176c0
 800b0ac:	080177d8 	.word	0x080177d8
 800b0b0:	08017720 	.word	0x08017720
 800b0b4:	080177f0 	.word	0x080177f0
 800b0b8:	08017808 	.word	0x08017808

0800b0bc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d106      	bne.n	800b0de <pbuf_add_header_impl+0x22>
 800b0d0:	4b2b      	ldr	r3, [pc, #172]	@ (800b180 <pbuf_add_header_impl+0xc4>)
 800b0d2:	f240 12df 	movw	r2, #479	@ 0x1df
 800b0d6:	492b      	ldr	r1, [pc, #172]	@ (800b184 <pbuf_add_header_impl+0xc8>)
 800b0d8:	482b      	ldr	r0, [pc, #172]	@ (800b188 <pbuf_add_header_impl+0xcc>)
 800b0da:	f00a f973 	bl	80153c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d003      	beq.n	800b0ec <pbuf_add_header_impl+0x30>
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0ea:	d301      	bcc.n	800b0f0 <pbuf_add_header_impl+0x34>
    return 1;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e043      	b.n	800b178 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <pbuf_add_header_impl+0x3e>
    return 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e03e      	b.n	800b178 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	891a      	ldrh	r2, [r3, #8]
 800b102:	8a7b      	ldrh	r3, [r7, #18]
 800b104:	4413      	add	r3, r2
 800b106:	b29b      	uxth	r3, r3
 800b108:	8a7a      	ldrh	r2, [r7, #18]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d901      	bls.n	800b112 <pbuf_add_header_impl+0x56>
    return 1;
 800b10e:	2301      	movs	r3, #1
 800b110:	e032      	b.n	800b178 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	7b1b      	ldrb	r3, [r3, #12]
 800b116:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b118:	8a3b      	ldrh	r3, [r7, #16]
 800b11a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00c      	beq.n	800b13c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	425b      	negs	r3, r3
 800b12a:	4413      	add	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3310      	adds	r3, #16
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	429a      	cmp	r2, r3
 800b136:	d20d      	bcs.n	800b154 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b138:	2301      	movs	r3, #1
 800b13a:	e01d      	b.n	800b178 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d006      	beq.n	800b150 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	425b      	negs	r3, r3
 800b14a:	4413      	add	r3, r2
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	e001      	b.n	800b154 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b150:	2301      	movs	r3, #1
 800b152:	e011      	b.n	800b178 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	895a      	ldrh	r2, [r3, #10]
 800b15e:	8a7b      	ldrh	r3, [r7, #18]
 800b160:	4413      	add	r3, r2
 800b162:	b29a      	uxth	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	891a      	ldrh	r2, [r3, #8]
 800b16c:	8a7b      	ldrh	r3, [r7, #18]
 800b16e:	4413      	add	r3, r2
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	811a      	strh	r2, [r3, #8]


  return 0;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	080176c0 	.word	0x080176c0
 800b184:	08017824 	.word	0x08017824
 800b188:	08017720 	.word	0x08017720

0800b18c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b196:	2200      	movs	r2, #0
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7ff ff8e 	bl	800b0bc <pbuf_add_header_impl>
 800b1a0:	4603      	mov	r3, r0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d106      	bne.n	800b1ca <pbuf_remove_header+0x1e>
 800b1bc:	4b20      	ldr	r3, [pc, #128]	@ (800b240 <pbuf_remove_header+0x94>)
 800b1be:	f240 224b 	movw	r2, #587	@ 0x24b
 800b1c2:	4920      	ldr	r1, [pc, #128]	@ (800b244 <pbuf_remove_header+0x98>)
 800b1c4:	4820      	ldr	r0, [pc, #128]	@ (800b248 <pbuf_remove_header+0x9c>)
 800b1c6:	f00a f8fd 	bl	80153c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <pbuf_remove_header+0x2c>
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1d6:	d301      	bcc.n	800b1dc <pbuf_remove_header+0x30>
    return 1;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e02c      	b.n	800b236 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <pbuf_remove_header+0x3a>
    return 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e027      	b.n	800b236 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	895b      	ldrh	r3, [r3, #10]
 800b1ee:	89fa      	ldrh	r2, [r7, #14]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d908      	bls.n	800b206 <pbuf_remove_header+0x5a>
 800b1f4:	4b12      	ldr	r3, [pc, #72]	@ (800b240 <pbuf_remove_header+0x94>)
 800b1f6:	f240 2255 	movw	r2, #597	@ 0x255
 800b1fa:	4914      	ldr	r1, [pc, #80]	@ (800b24c <pbuf_remove_header+0xa0>)
 800b1fc:	4812      	ldr	r0, [pc, #72]	@ (800b248 <pbuf_remove_header+0x9c>)
 800b1fe:	f00a f8e1 	bl	80153c4 <iprintf>
 800b202:	2301      	movs	r3, #1
 800b204:	e017      	b.n	800b236 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	441a      	add	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	895a      	ldrh	r2, [r3, #10]
 800b21c:	89fb      	ldrh	r3, [r7, #14]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	b29a      	uxth	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	891a      	ldrh	r2, [r3, #8]
 800b22a:	89fb      	ldrh	r3, [r7, #14]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	b29a      	uxth	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	080176c0 	.word	0x080176c0
 800b244:	08017824 	.word	0x08017824
 800b248:	08017720 	.word	0x08017720
 800b24c:	08017830 	.word	0x08017830

0800b250 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	807b      	strh	r3, [r7, #2]
 800b25c:	4613      	mov	r3, r2
 800b25e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b260:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b264:	2b00      	cmp	r3, #0
 800b266:	da08      	bge.n	800b27a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b26c:	425b      	negs	r3, r3
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff ff9b 	bl	800b1ac <pbuf_remove_header>
 800b276:	4603      	mov	r3, r0
 800b278:	e007      	b.n	800b28a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b27a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b27e:	787a      	ldrb	r2, [r7, #1]
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7ff ff1a 	bl	800b0bc <pbuf_add_header_impl>
 800b288:	4603      	mov	r3, r0
  }
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b082      	sub	sp, #8
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	460b      	mov	r3, r1
 800b29c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b29e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7ff ffd2 	bl	800b250 <pbuf_header_impl>
 800b2ac:	4603      	mov	r3, r0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10b      	bne.n	800b2de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <pbuf_free+0x22>
 800b2cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b3bc <pbuf_free+0x104>)
 800b2ce:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b2d2:	493b      	ldr	r1, [pc, #236]	@ (800b3c0 <pbuf_free+0x108>)
 800b2d4:	483b      	ldr	r0, [pc, #236]	@ (800b3c4 <pbuf_free+0x10c>)
 800b2d6:	f00a f875 	bl	80153c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e069      	b.n	800b3b2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b2e2:	e062      	b.n	800b3aa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b2e4:	f009 ff50 	bl	8015188 <sys_arch_protect>
 800b2e8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	7b9b      	ldrb	r3, [r3, #14]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d106      	bne.n	800b300 <pbuf_free+0x48>
 800b2f2:	4b32      	ldr	r3, [pc, #200]	@ (800b3bc <pbuf_free+0x104>)
 800b2f4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b2f8:	4933      	ldr	r1, [pc, #204]	@ (800b3c8 <pbuf_free+0x110>)
 800b2fa:	4832      	ldr	r0, [pc, #200]	@ (800b3c4 <pbuf_free+0x10c>)
 800b2fc:	f00a f862 	bl	80153c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	7b9b      	ldrb	r3, [r3, #14]
 800b304:	3b01      	subs	r3, #1
 800b306:	b2da      	uxtb	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	739a      	strb	r2, [r3, #14]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	7b9b      	ldrb	r3, [r3, #14]
 800b310:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b312:	69b8      	ldr	r0, [r7, #24]
 800b314:	f009 ff46 	bl	80151a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d143      	bne.n	800b3a6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	7b1b      	ldrb	r3, [r3, #12]
 800b328:	f003 030f 	and.w	r3, r3, #15
 800b32c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	7b5b      	ldrb	r3, [r3, #13]
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d011      	beq.n	800b35e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <pbuf_free+0x9c>
 800b346:	4b1d      	ldr	r3, [pc, #116]	@ (800b3bc <pbuf_free+0x104>)
 800b348:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b34c:	491f      	ldr	r1, [pc, #124]	@ (800b3cc <pbuf_free+0x114>)
 800b34e:	481d      	ldr	r0, [pc, #116]	@ (800b3c4 <pbuf_free+0x10c>)
 800b350:	f00a f838 	bl	80153c4 <iprintf>
        pc->custom_free_function(p);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	4798      	blx	r3
 800b35c:	e01d      	b.n	800b39a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	2b02      	cmp	r3, #2
 800b362:	d104      	bne.n	800b36e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	200c      	movs	r0, #12
 800b368:	f7ff f902 	bl	800a570 <memp_free>
 800b36c:	e015      	b.n	800b39a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d104      	bne.n	800b37e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b374:	6879      	ldr	r1, [r7, #4]
 800b376:	200b      	movs	r0, #11
 800b378:	f7ff f8fa 	bl	800a570 <memp_free>
 800b37c:	e00d      	b.n	800b39a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <pbuf_free+0xd4>
          mem_free(p);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7fe fd3f 	bl	8009e08 <mem_free>
 800b38a:	e006      	b.n	800b39a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b38c:	4b0b      	ldr	r3, [pc, #44]	@ (800b3bc <pbuf_free+0x104>)
 800b38e:	f240 320f 	movw	r2, #783	@ 0x30f
 800b392:	490f      	ldr	r1, [pc, #60]	@ (800b3d0 <pbuf_free+0x118>)
 800b394:	480b      	ldr	r0, [pc, #44]	@ (800b3c4 <pbuf_free+0x10c>)
 800b396:	f00a f815 	bl	80153c4 <iprintf>
        }
      }
      count++;
 800b39a:	7ffb      	ldrb	r3, [r7, #31]
 800b39c:	3301      	adds	r3, #1
 800b39e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	607b      	str	r3, [r7, #4]
 800b3a4:	e001      	b.n	800b3aa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d199      	bne.n	800b2e4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b3b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3720      	adds	r7, #32
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	080176c0 	.word	0x080176c0
 800b3c0:	08017824 	.word	0x08017824
 800b3c4:	08017720 	.word	0x08017720
 800b3c8:	08017850 	.word	0x08017850
 800b3cc:	08017868 	.word	0x08017868
 800b3d0:	0801788c 	.word	0x0801788c

0800b3d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b3e0:	e005      	b.n	800b3ee <pbuf_clen+0x1a>
    ++len;
 800b3e2:	89fb      	ldrh	r3, [r7, #14]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1f6      	bne.n	800b3e2 <pbuf_clen+0xe>
  }
  return len;
 800b3f4:	89fb      	ldrh	r3, [r7, #14]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
	...

0800b404 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d016      	beq.n	800b440 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b412:	f009 feb9 	bl	8015188 <sys_arch_protect>
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7b9b      	ldrb	r3, [r3, #14]
 800b41c:	3301      	adds	r3, #1
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	739a      	strb	r2, [r3, #14]
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f009 febd 	bl	80151a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	7b9b      	ldrb	r3, [r3, #14]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <pbuf_ref+0x3c>
 800b432:	4b05      	ldr	r3, [pc, #20]	@ (800b448 <pbuf_ref+0x44>)
 800b434:	f240 3242 	movw	r2, #834	@ 0x342
 800b438:	4904      	ldr	r1, [pc, #16]	@ (800b44c <pbuf_ref+0x48>)
 800b43a:	4805      	ldr	r0, [pc, #20]	@ (800b450 <pbuf_ref+0x4c>)
 800b43c:	f009 ffc2 	bl	80153c4 <iprintf>
  }
}
 800b440:	bf00      	nop
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	080176c0 	.word	0x080176c0
 800b44c:	080178a0 	.word	0x080178a0
 800b450:	08017720 	.word	0x08017720

0800b454 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <pbuf_cat+0x16>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d107      	bne.n	800b47a <pbuf_cat+0x26>
 800b46a:	4b20      	ldr	r3, [pc, #128]	@ (800b4ec <pbuf_cat+0x98>)
 800b46c:	f240 3259 	movw	r2, #857	@ 0x359
 800b470:	491f      	ldr	r1, [pc, #124]	@ (800b4f0 <pbuf_cat+0x9c>)
 800b472:	4820      	ldr	r0, [pc, #128]	@ (800b4f4 <pbuf_cat+0xa0>)
 800b474:	f009 ffa6 	bl	80153c4 <iprintf>
 800b478:	e034      	b.n	800b4e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	60fb      	str	r3, [r7, #12]
 800b47e:	e00a      	b.n	800b496 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	891a      	ldrh	r2, [r3, #8]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	891b      	ldrh	r3, [r3, #8]
 800b488:	4413      	add	r3, r2
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1f0      	bne.n	800b480 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	891a      	ldrh	r2, [r3, #8]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	895b      	ldrh	r3, [r3, #10]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d006      	beq.n	800b4b8 <pbuf_cat+0x64>
 800b4aa:	4b10      	ldr	r3, [pc, #64]	@ (800b4ec <pbuf_cat+0x98>)
 800b4ac:	f240 3262 	movw	r2, #866	@ 0x362
 800b4b0:	4911      	ldr	r1, [pc, #68]	@ (800b4f8 <pbuf_cat+0xa4>)
 800b4b2:	4810      	ldr	r0, [pc, #64]	@ (800b4f4 <pbuf_cat+0xa0>)
 800b4b4:	f009 ff86 	bl	80153c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d006      	beq.n	800b4ce <pbuf_cat+0x7a>
 800b4c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b4ec <pbuf_cat+0x98>)
 800b4c2:	f240 3263 	movw	r2, #867	@ 0x363
 800b4c6:	490d      	ldr	r1, [pc, #52]	@ (800b4fc <pbuf_cat+0xa8>)
 800b4c8:	480a      	ldr	r0, [pc, #40]	@ (800b4f4 <pbuf_cat+0xa0>)
 800b4ca:	f009 ff7b 	bl	80153c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	891a      	ldrh	r2, [r3, #8]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	891b      	ldrh	r3, [r3, #8]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	080176c0 	.word	0x080176c0
 800b4f0:	080178b4 	.word	0x080178b4
 800b4f4:	08017720 	.word	0x08017720
 800b4f8:	080178ec 	.word	0x080178ec
 800b4fc:	0801791c 	.word	0x0801791c

0800b500 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff ffa1 	bl	800b454 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b512:	6838      	ldr	r0, [r7, #0]
 800b514:	f7ff ff76 	bl	800b404 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	2300      	movs	r3, #0
 800b530:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d008      	beq.n	800b54a <pbuf_copy+0x2a>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <pbuf_copy+0x2a>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	891a      	ldrh	r2, [r3, #8]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	891b      	ldrh	r3, [r3, #8]
 800b546:	429a      	cmp	r2, r3
 800b548:	d209      	bcs.n	800b55e <pbuf_copy+0x3e>
 800b54a:	4b57      	ldr	r3, [pc, #348]	@ (800b6a8 <pbuf_copy+0x188>)
 800b54c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800b550:	4956      	ldr	r1, [pc, #344]	@ (800b6ac <pbuf_copy+0x18c>)
 800b552:	4857      	ldr	r0, [pc, #348]	@ (800b6b0 <pbuf_copy+0x190>)
 800b554:	f009 ff36 	bl	80153c4 <iprintf>
 800b558:	f06f 030f 	mvn.w	r3, #15
 800b55c:	e09f      	b.n	800b69e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	895b      	ldrh	r3, [r3, #10]
 800b562:	461a      	mov	r2, r3
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	1ad2      	subs	r2, r2, r3
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	895b      	ldrh	r3, [r3, #10]
 800b56c:	4619      	mov	r1, r3
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	1acb      	subs	r3, r1, r3
 800b572:	429a      	cmp	r2, r3
 800b574:	d306      	bcc.n	800b584 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	895b      	ldrh	r3, [r3, #10]
 800b57a:	461a      	mov	r2, r3
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	e005      	b.n	800b590 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	895b      	ldrh	r3, [r3, #10]
 800b588:	461a      	mov	r2, r3
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	18d0      	adds	r0, r2, r3
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	4413      	add	r3, r2
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	f00a f89f 	bl	80156e6 <memcpy>
    offset_to += len;
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	895b      	ldrh	r3, [r3, #10]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d906      	bls.n	800b5d2 <pbuf_copy+0xb2>
 800b5c4:	4b38      	ldr	r3, [pc, #224]	@ (800b6a8 <pbuf_copy+0x188>)
 800b5c6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b5ca:	493a      	ldr	r1, [pc, #232]	@ (800b6b4 <pbuf_copy+0x194>)
 800b5cc:	4838      	ldr	r0, [pc, #224]	@ (800b6b0 <pbuf_copy+0x190>)
 800b5ce:	f009 fef9 	bl	80153c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	895b      	ldrh	r3, [r3, #10]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d906      	bls.n	800b5ec <pbuf_copy+0xcc>
 800b5de:	4b32      	ldr	r3, [pc, #200]	@ (800b6a8 <pbuf_copy+0x188>)
 800b5e0:	f240 32da 	movw	r2, #986	@ 0x3da
 800b5e4:	4934      	ldr	r1, [pc, #208]	@ (800b6b8 <pbuf_copy+0x198>)
 800b5e6:	4832      	ldr	r0, [pc, #200]	@ (800b6b0 <pbuf_copy+0x190>)
 800b5e8:	f009 feec 	bl	80153c4 <iprintf>
    if (offset_from >= p_from->len) {
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	895b      	ldrh	r3, [r3, #10]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d304      	bcc.n	800b602 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	895b      	ldrh	r3, [r3, #10]
 800b606:	461a      	mov	r2, r3
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d114      	bne.n	800b638 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10c      	bne.n	800b638 <pbuf_copy+0x118>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d009      	beq.n	800b638 <pbuf_copy+0x118>
 800b624:	4b20      	ldr	r3, [pc, #128]	@ (800b6a8 <pbuf_copy+0x188>)
 800b626:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b62a:	4924      	ldr	r1, [pc, #144]	@ (800b6bc <pbuf_copy+0x19c>)
 800b62c:	4820      	ldr	r0, [pc, #128]	@ (800b6b0 <pbuf_copy+0x190>)
 800b62e:	f009 fec9 	bl	80153c4 <iprintf>
 800b632:	f06f 030f 	mvn.w	r3, #15
 800b636:	e032      	b.n	800b69e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d013      	beq.n	800b666 <pbuf_copy+0x146>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	895a      	ldrh	r2, [r3, #10]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	891b      	ldrh	r3, [r3, #8]
 800b646:	429a      	cmp	r2, r3
 800b648:	d10d      	bne.n	800b666 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d009      	beq.n	800b666 <pbuf_copy+0x146>
 800b652:	4b15      	ldr	r3, [pc, #84]	@ (800b6a8 <pbuf_copy+0x188>)
 800b654:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800b658:	4919      	ldr	r1, [pc, #100]	@ (800b6c0 <pbuf_copy+0x1a0>)
 800b65a:	4815      	ldr	r0, [pc, #84]	@ (800b6b0 <pbuf_copy+0x190>)
 800b65c:	f009 feb2 	bl	80153c4 <iprintf>
 800b660:	f06f 0305 	mvn.w	r3, #5
 800b664:	e01b      	b.n	800b69e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d013      	beq.n	800b694 <pbuf_copy+0x174>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	895a      	ldrh	r2, [r3, #10]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	891b      	ldrh	r3, [r3, #8]
 800b674:	429a      	cmp	r2, r3
 800b676:	d10d      	bne.n	800b694 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d009      	beq.n	800b694 <pbuf_copy+0x174>
 800b680:	4b09      	ldr	r3, [pc, #36]	@ (800b6a8 <pbuf_copy+0x188>)
 800b682:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b686:	490e      	ldr	r1, [pc, #56]	@ (800b6c0 <pbuf_copy+0x1a0>)
 800b688:	4809      	ldr	r0, [pc, #36]	@ (800b6b0 <pbuf_copy+0x190>)
 800b68a:	f009 fe9b 	bl	80153c4 <iprintf>
 800b68e:	f06f 0305 	mvn.w	r3, #5
 800b692:	e004      	b.n	800b69e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f47f af61 	bne.w	800b55e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	080176c0 	.word	0x080176c0
 800b6ac:	08017968 	.word	0x08017968
 800b6b0:	08017720 	.word	0x08017720
 800b6b4:	08017998 	.word	0x08017998
 800b6b8:	080179b0 	.word	0x080179b0
 800b6bc:	080179cc 	.word	0x080179cc
 800b6c0:	080179dc 	.word	0x080179dc

0800b6c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	80fb      	strh	r3, [r7, #6]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d108      	bne.n	800b6fa <pbuf_copy_partial+0x36>
 800b6e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b798 <pbuf_copy_partial+0xd4>)
 800b6ea:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b6ee:	492b      	ldr	r1, [pc, #172]	@ (800b79c <pbuf_copy_partial+0xd8>)
 800b6f0:	482b      	ldr	r0, [pc, #172]	@ (800b7a0 <pbuf_copy_partial+0xdc>)
 800b6f2:	f009 fe67 	bl	80153c4 <iprintf>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e04a      	b.n	800b790 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d108      	bne.n	800b712 <pbuf_copy_partial+0x4e>
 800b700:	4b25      	ldr	r3, [pc, #148]	@ (800b798 <pbuf_copy_partial+0xd4>)
 800b702:	f240 420b 	movw	r2, #1035	@ 0x40b
 800b706:	4927      	ldr	r1, [pc, #156]	@ (800b7a4 <pbuf_copy_partial+0xe0>)
 800b708:	4825      	ldr	r0, [pc, #148]	@ (800b7a0 <pbuf_copy_partial+0xdc>)
 800b70a:	f009 fe5b 	bl	80153c4 <iprintf>
 800b70e:	2300      	movs	r3, #0
 800b710:	e03e      	b.n	800b790 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	61fb      	str	r3, [r7, #28]
 800b716:	e034      	b.n	800b782 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b718:	88bb      	ldrh	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00a      	beq.n	800b734 <pbuf_copy_partial+0x70>
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	895b      	ldrh	r3, [r3, #10]
 800b722:	88ba      	ldrh	r2, [r7, #4]
 800b724:	429a      	cmp	r2, r3
 800b726:	d305      	bcc.n	800b734 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	895b      	ldrh	r3, [r3, #10]
 800b72c:	88ba      	ldrh	r2, [r7, #4]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	80bb      	strh	r3, [r7, #4]
 800b732:	e023      	b.n	800b77c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	895a      	ldrh	r2, [r3, #10]
 800b738:	88bb      	ldrh	r3, [r7, #4]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b73e:	8b3a      	ldrh	r2, [r7, #24]
 800b740:	88fb      	ldrh	r3, [r7, #6]
 800b742:	429a      	cmp	r2, r3
 800b744:	d901      	bls.n	800b74a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b746:	88fb      	ldrh	r3, [r7, #6]
 800b748:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b74a:	8b7b      	ldrh	r3, [r7, #26]
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	18d0      	adds	r0, r2, r3
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	88bb      	ldrh	r3, [r7, #4]
 800b756:	4413      	add	r3, r2
 800b758:	8b3a      	ldrh	r2, [r7, #24]
 800b75a:	4619      	mov	r1, r3
 800b75c:	f009 ffc3 	bl	80156e6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b760:	8afa      	ldrh	r2, [r7, #22]
 800b762:	8b3b      	ldrh	r3, [r7, #24]
 800b764:	4413      	add	r3, r2
 800b766:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b768:	8b7a      	ldrh	r2, [r7, #26]
 800b76a:	8b3b      	ldrh	r3, [r7, #24]
 800b76c:	4413      	add	r3, r2
 800b76e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b770:	88fa      	ldrh	r2, [r7, #6]
 800b772:	8b3b      	ldrh	r3, [r7, #24]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b778:	2300      	movs	r3, #0
 800b77a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	61fb      	str	r3, [r7, #28]
 800b782:	88fb      	ldrh	r3, [r7, #6]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <pbuf_copy_partial+0xca>
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1c4      	bne.n	800b718 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b78e:	8afb      	ldrh	r3, [r7, #22]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3720      	adds	r7, #32
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	080176c0 	.word	0x080176c0
 800b79c:	08017a08 	.word	0x08017a08
 800b7a0:	08017720 	.word	0x08017720
 800b7a4:	08017a28 	.word	0x08017a28

0800b7a8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800b7b6:	88fb      	ldrh	r3, [r7, #6]
 800b7b8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d109      	bne.n	800b7d8 <pbuf_take+0x30>
 800b7c4:	4b3a      	ldr	r3, [pc, #232]	@ (800b8b0 <pbuf_take+0x108>)
 800b7c6:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800b7ca:	493a      	ldr	r1, [pc, #232]	@ (800b8b4 <pbuf_take+0x10c>)
 800b7cc:	483a      	ldr	r0, [pc, #232]	@ (800b8b8 <pbuf_take+0x110>)
 800b7ce:	f009 fdf9 	bl	80153c4 <iprintf>
 800b7d2:	f06f 030f 	mvn.w	r3, #15
 800b7d6:	e067      	b.n	800b8a8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d109      	bne.n	800b7f2 <pbuf_take+0x4a>
 800b7de:	4b34      	ldr	r3, [pc, #208]	@ (800b8b0 <pbuf_take+0x108>)
 800b7e0:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800b7e4:	4935      	ldr	r1, [pc, #212]	@ (800b8bc <pbuf_take+0x114>)
 800b7e6:	4834      	ldr	r0, [pc, #208]	@ (800b8b8 <pbuf_take+0x110>)
 800b7e8:	f009 fdec 	bl	80153c4 <iprintf>
 800b7ec:	f06f 030f 	mvn.w	r3, #15
 800b7f0:	e05a      	b.n	800b8a8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	891b      	ldrh	r3, [r3, #8]
 800b7f6:	88fa      	ldrh	r2, [r7, #6]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d909      	bls.n	800b810 <pbuf_take+0x68>
 800b7fc:	4b2c      	ldr	r3, [pc, #176]	@ (800b8b0 <pbuf_take+0x108>)
 800b7fe:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800b802:	492f      	ldr	r1, [pc, #188]	@ (800b8c0 <pbuf_take+0x118>)
 800b804:	482c      	ldr	r0, [pc, #176]	@ (800b8b8 <pbuf_take+0x110>)
 800b806:	f009 fddd 	bl	80153c4 <iprintf>
 800b80a:	f04f 33ff 	mov.w	r3, #4294967295
 800b80e:	e04b      	b.n	800b8a8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d007      	beq.n	800b826 <pbuf_take+0x7e>
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d004      	beq.n	800b826 <pbuf_take+0x7e>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	891b      	ldrh	r3, [r3, #8]
 800b820:	88fa      	ldrh	r2, [r7, #6]
 800b822:	429a      	cmp	r2, r3
 800b824:	d902      	bls.n	800b82c <pbuf_take+0x84>
    return ERR_ARG;
 800b826:	f06f 030f 	mvn.w	r3, #15
 800b82a:	e03d      	b.n	800b8a8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	61fb      	str	r3, [r7, #28]
 800b830:	e028      	b.n	800b884 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d106      	bne.n	800b846 <pbuf_take+0x9e>
 800b838:	4b1d      	ldr	r3, [pc, #116]	@ (800b8b0 <pbuf_take+0x108>)
 800b83a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800b83e:	4921      	ldr	r1, [pc, #132]	@ (800b8c4 <pbuf_take+0x11c>)
 800b840:	481d      	ldr	r0, [pc, #116]	@ (800b8b8 <pbuf_take+0x110>)
 800b842:	f009 fdbf 	bl	80153c4 <iprintf>
    buf_copy_len = total_copy_len;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	895b      	ldrh	r3, [r3, #10]
 800b84e:	461a      	mov	r2, r3
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	4293      	cmp	r3, r2
 800b854:	d902      	bls.n	800b85c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	895b      	ldrh	r3, [r3, #10]
 800b85a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	6858      	ldr	r0, [r3, #4]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	4413      	add	r3, r2
 800b866:	69ba      	ldr	r2, [r7, #24]
 800b868:	4619      	mov	r1, r3
 800b86a:	f009 ff3c 	bl	80156e6 <memcpy>
    total_copy_len -= buf_copy_len;
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	4413      	add	r3, r2
 800b87c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	61fb      	str	r3, [r7, #28]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1d3      	bne.n	800b832 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d103      	bne.n	800b898 <pbuf_take+0xf0>
 800b890:	88fb      	ldrh	r3, [r7, #6]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	429a      	cmp	r2, r3
 800b896:	d006      	beq.n	800b8a6 <pbuf_take+0xfe>
 800b898:	4b05      	ldr	r3, [pc, #20]	@ (800b8b0 <pbuf_take+0x108>)
 800b89a:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800b89e:	490a      	ldr	r1, [pc, #40]	@ (800b8c8 <pbuf_take+0x120>)
 800b8a0:	4805      	ldr	r0, [pc, #20]	@ (800b8b8 <pbuf_take+0x110>)
 800b8a2:	f009 fd8f 	bl	80153c4 <iprintf>
  return ERR_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3720      	adds	r7, #32
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	080176c0 	.word	0x080176c0
 800b8b4:	08017a98 	.word	0x08017a98
 800b8b8:	08017720 	.word	0x08017720
 800b8bc:	08017ab0 	.word	0x08017ab0
 800b8c0:	08017acc 	.word	0x08017acc
 800b8c4:	08017aec 	.word	0x08017aec
 800b8c8:	08017b04 	.word	0x08017b04

0800b8cc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	603a      	str	r2, [r7, #0]
 800b8d6:	71fb      	strb	r3, [r7, #7]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	8919      	ldrh	r1, [r3, #8]
 800b8e0:	88ba      	ldrh	r2, [r7, #4]
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fa03 	bl	800acf0 <pbuf_alloc>
 800b8ea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <pbuf_clone+0x2a>
    return NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	e011      	b.n	800b91a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f7ff fe11 	bl	800b520 <pbuf_copy>
 800b8fe:	4603      	mov	r3, r0
 800b900:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b902:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d006      	beq.n	800b918 <pbuf_clone+0x4c>
 800b90a:	4b06      	ldr	r3, [pc, #24]	@ (800b924 <pbuf_clone+0x58>)
 800b90c:	f240 5224 	movw	r2, #1316	@ 0x524
 800b910:	4905      	ldr	r1, [pc, #20]	@ (800b928 <pbuf_clone+0x5c>)
 800b912:	4806      	ldr	r0, [pc, #24]	@ (800b92c <pbuf_clone+0x60>)
 800b914:	f009 fd56 	bl	80153c4 <iprintf>
  return q;
 800b918:	68fb      	ldr	r3, [r7, #12]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	080176c0 	.word	0x080176c0
 800b928:	08017b34 	.word	0x08017b34
 800b92c:	08017720 	.word	0x08017720

0800b930 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b934:	f009 fc46 	bl	80151c4 <rand>
 800b938:	4603      	mov	r3, r0
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b940:	b29b      	uxth	r3, r3
 800b942:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b946:	b29a      	uxth	r2, r3
 800b948:	4b01      	ldr	r3, [pc, #4]	@ (800b950 <tcp_init+0x20>)
 800b94a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b94c:	bf00      	nop
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20000024 	.word	0x20000024

0800b954 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	7d1b      	ldrb	r3, [r3, #20]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d105      	bne.n	800b970 <tcp_free+0x1c>
 800b964:	4b06      	ldr	r3, [pc, #24]	@ (800b980 <tcp_free+0x2c>)
 800b966:	22d4      	movs	r2, #212	@ 0xd4
 800b968:	4906      	ldr	r1, [pc, #24]	@ (800b984 <tcp_free+0x30>)
 800b96a:	4807      	ldr	r0, [pc, #28]	@ (800b988 <tcp_free+0x34>)
 800b96c:	f009 fd2a 	bl	80153c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b970:	6879      	ldr	r1, [r7, #4]
 800b972:	2001      	movs	r0, #1
 800b974:	f7fe fdfc 	bl	800a570 <memp_free>
}
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	08017bc0 	.word	0x08017bc0
 800b984:	08017bf0 	.word	0x08017bf0
 800b988:	08017c04 	.word	0x08017c04

0800b98c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	7d1b      	ldrb	r3, [r3, #20]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d105      	bne.n	800b9a8 <tcp_free_listen+0x1c>
 800b99c:	4b06      	ldr	r3, [pc, #24]	@ (800b9b8 <tcp_free_listen+0x2c>)
 800b99e:	22df      	movs	r2, #223	@ 0xdf
 800b9a0:	4906      	ldr	r1, [pc, #24]	@ (800b9bc <tcp_free_listen+0x30>)
 800b9a2:	4807      	ldr	r0, [pc, #28]	@ (800b9c0 <tcp_free_listen+0x34>)
 800b9a4:	f009 fd0e 	bl	80153c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b9a8:	6879      	ldr	r1, [r7, #4]
 800b9aa:	2002      	movs	r0, #2
 800b9ac:	f7fe fde0 	bl	800a570 <memp_free>
}
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	08017bc0 	.word	0x08017bc0
 800b9bc:	08017c2c 	.word	0x08017c2c
 800b9c0:	08017c04 	.word	0x08017c04

0800b9c4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b9c8:	f001 f8f6 	bl	800cbb8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b9cc:	4b07      	ldr	r3, [pc, #28]	@ (800b9ec <tcp_tmr+0x28>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	4b05      	ldr	r3, [pc, #20]	@ (800b9ec <tcp_tmr+0x28>)
 800b9d6:	701a      	strb	r2, [r3, #0]
 800b9d8:	4b04      	ldr	r3, [pc, #16]	@ (800b9ec <tcp_tmr+0x28>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b9e4:	f000 fda6 	bl	800c534 <tcp_slowtmr>
  }
}
 800b9e8:	bf00      	nop
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2000bf7d 	.word	0x2000bf7d

0800b9f0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <tcp_remove_listener+0x1c>
 800ba00:	4b0d      	ldr	r3, [pc, #52]	@ (800ba38 <tcp_remove_listener+0x48>)
 800ba02:	22ff      	movs	r2, #255	@ 0xff
 800ba04:	490d      	ldr	r1, [pc, #52]	@ (800ba3c <tcp_remove_listener+0x4c>)
 800ba06:	480e      	ldr	r0, [pc, #56]	@ (800ba40 <tcp_remove_listener+0x50>)
 800ba08:	f009 fcdc 	bl	80153c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	e00a      	b.n	800ba28 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d102      	bne.n	800ba22 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1f1      	bne.n	800ba12 <tcp_remove_listener+0x22>
    }
  }
}
 800ba2e:	bf00      	nop
 800ba30:	bf00      	nop
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	08017bc0 	.word	0x08017bc0
 800ba3c:	08017c48 	.word	0x08017c48
 800ba40:	08017c04 	.word	0x08017c04

0800ba44 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d106      	bne.n	800ba60 <tcp_listen_closed+0x1c>
 800ba52:	4b14      	ldr	r3, [pc, #80]	@ (800baa4 <tcp_listen_closed+0x60>)
 800ba54:	f240 1211 	movw	r2, #273	@ 0x111
 800ba58:	4913      	ldr	r1, [pc, #76]	@ (800baa8 <tcp_listen_closed+0x64>)
 800ba5a:	4814      	ldr	r0, [pc, #80]	@ (800baac <tcp_listen_closed+0x68>)
 800ba5c:	f009 fcb2 	bl	80153c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	7d1b      	ldrb	r3, [r3, #20]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d006      	beq.n	800ba76 <tcp_listen_closed+0x32>
 800ba68:	4b0e      	ldr	r3, [pc, #56]	@ (800baa4 <tcp_listen_closed+0x60>)
 800ba6a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ba6e:	4910      	ldr	r1, [pc, #64]	@ (800bab0 <tcp_listen_closed+0x6c>)
 800ba70:	480e      	ldr	r0, [pc, #56]	@ (800baac <tcp_listen_closed+0x68>)
 800ba72:	f009 fca7 	bl	80153c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ba76:	2301      	movs	r3, #1
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	e00b      	b.n	800ba94 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ba7c:	4a0d      	ldr	r2, [pc, #52]	@ (800bab4 <tcp_listen_closed+0x70>)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	6879      	ldr	r1, [r7, #4]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff ffb1 	bl	800b9f0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3301      	adds	r3, #1
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b03      	cmp	r3, #3
 800ba98:	d9f0      	bls.n	800ba7c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ba9a:	bf00      	nop
 800ba9c:	bf00      	nop
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	08017bc0 	.word	0x08017bc0
 800baa8:	08017c70 	.word	0x08017c70
 800baac:	08017c04 	.word	0x08017c04
 800bab0:	08017c7c 	.word	0x08017c7c
 800bab4:	08019be4 	.word	0x08019be4

0800bab8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bab8:	b5b0      	push	{r4, r5, r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af04      	add	r7, sp, #16
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d106      	bne.n	800bad8 <tcp_close_shutdown+0x20>
 800baca:	4b63      	ldr	r3, [pc, #396]	@ (800bc58 <tcp_close_shutdown+0x1a0>)
 800bacc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800bad0:	4962      	ldr	r1, [pc, #392]	@ (800bc5c <tcp_close_shutdown+0x1a4>)
 800bad2:	4863      	ldr	r0, [pc, #396]	@ (800bc60 <tcp_close_shutdown+0x1a8>)
 800bad4:	f009 fc76 	bl	80153c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bad8:	78fb      	ldrb	r3, [r7, #3]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d066      	beq.n	800bbac <tcp_close_shutdown+0xf4>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	7d1b      	ldrb	r3, [r3, #20]
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	d003      	beq.n	800baee <tcp_close_shutdown+0x36>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	7d1b      	ldrb	r3, [r3, #20]
 800baea:	2b07      	cmp	r3, #7
 800baec:	d15e      	bne.n	800bbac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d104      	bne.n	800bb00 <tcp_close_shutdown+0x48>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bafa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bafe:	d055      	beq.n	800bbac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8b5b      	ldrh	r3, [r3, #26]
 800bb04:	f003 0310 	and.w	r3, r3, #16
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d106      	bne.n	800bb1a <tcp_close_shutdown+0x62>
 800bb0c:	4b52      	ldr	r3, [pc, #328]	@ (800bc58 <tcp_close_shutdown+0x1a0>)
 800bb0e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800bb12:	4954      	ldr	r1, [pc, #336]	@ (800bc64 <tcp_close_shutdown+0x1ac>)
 800bb14:	4852      	ldr	r0, [pc, #328]	@ (800bc60 <tcp_close_shutdown+0x1a8>)
 800bb16:	f009 fc55 	bl	80153c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bb22:	687d      	ldr	r5, [r7, #4]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3304      	adds	r3, #4
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	8ad2      	ldrh	r2, [r2, #22]
 800bb2c:	6879      	ldr	r1, [r7, #4]
 800bb2e:	8b09      	ldrh	r1, [r1, #24]
 800bb30:	9102      	str	r1, [sp, #8]
 800bb32:	9201      	str	r2, [sp, #4]
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	462b      	mov	r3, r5
 800bb38:	4622      	mov	r2, r4
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f005 fe05 	bl	801174c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 fbe8 	bl	800d318 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bb48:	4b47      	ldr	r3, [pc, #284]	@ (800bc68 <tcp_close_shutdown+0x1b0>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d105      	bne.n	800bb5e <tcp_close_shutdown+0xa6>
 800bb52:	4b45      	ldr	r3, [pc, #276]	@ (800bc68 <tcp_close_shutdown+0x1b0>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	4a43      	ldr	r2, [pc, #268]	@ (800bc68 <tcp_close_shutdown+0x1b0>)
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	e013      	b.n	800bb86 <tcp_close_shutdown+0xce>
 800bb5e:	4b42      	ldr	r3, [pc, #264]	@ (800bc68 <tcp_close_shutdown+0x1b0>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	e00c      	b.n	800bb80 <tcp_close_shutdown+0xc8>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d104      	bne.n	800bb7a <tcp_close_shutdown+0xc2>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	60da      	str	r2, [r3, #12]
 800bb78:	e005      	b.n	800bb86 <tcp_close_shutdown+0xce>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	60fb      	str	r3, [r7, #12]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1ef      	bne.n	800bb66 <tcp_close_shutdown+0xae>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	60da      	str	r2, [r3, #12]
 800bb8c:	4b37      	ldr	r3, [pc, #220]	@ (800bc6c <tcp_close_shutdown+0x1b4>)
 800bb8e:	2201      	movs	r2, #1
 800bb90:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bb92:	4b37      	ldr	r3, [pc, #220]	@ (800bc70 <tcp_close_shutdown+0x1b8>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d102      	bne.n	800bba2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bb9c:	f004 f87c 	bl	800fc98 <tcp_trigger_input_pcb_close>
 800bba0:	e002      	b.n	800bba8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff fed6 	bl	800b954 <tcp_free>
      }
      return ERR_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	e050      	b.n	800bc4e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	7d1b      	ldrb	r3, [r3, #20]
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d03b      	beq.n	800bc2c <tcp_close_shutdown+0x174>
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	dc44      	bgt.n	800bc42 <tcp_close_shutdown+0x18a>
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <tcp_close_shutdown+0x10a>
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d02a      	beq.n	800bc16 <tcp_close_shutdown+0x15e>
 800bbc0:	e03f      	b.n	800bc42 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	8adb      	ldrh	r3, [r3, #22]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d021      	beq.n	800bc0e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bbca:	4b2a      	ldr	r3, [pc, #168]	@ (800bc74 <tcp_close_shutdown+0x1bc>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d105      	bne.n	800bbe0 <tcp_close_shutdown+0x128>
 800bbd4:	4b27      	ldr	r3, [pc, #156]	@ (800bc74 <tcp_close_shutdown+0x1bc>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	4a26      	ldr	r2, [pc, #152]	@ (800bc74 <tcp_close_shutdown+0x1bc>)
 800bbdc:	6013      	str	r3, [r2, #0]
 800bbde:	e013      	b.n	800bc08 <tcp_close_shutdown+0x150>
 800bbe0:	4b24      	ldr	r3, [pc, #144]	@ (800bc74 <tcp_close_shutdown+0x1bc>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	60bb      	str	r3, [r7, #8]
 800bbe6:	e00c      	b.n	800bc02 <tcp_close_shutdown+0x14a>
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d104      	bne.n	800bbfc <tcp_close_shutdown+0x144>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	60da      	str	r2, [r3, #12]
 800bbfa:	e005      	b.n	800bc08 <tcp_close_shutdown+0x150>
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	60bb      	str	r3, [r7, #8]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1ef      	bne.n	800bbe8 <tcp_close_shutdown+0x130>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fea0 	bl	800b954 <tcp_free>
      break;
 800bc14:	e01a      	b.n	800bc4c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7ff ff14 	bl	800ba44 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bc1c:	6879      	ldr	r1, [r7, #4]
 800bc1e:	4816      	ldr	r0, [pc, #88]	@ (800bc78 <tcp_close_shutdown+0x1c0>)
 800bc20:	f001 fbca 	bl	800d3b8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff feb1 	bl	800b98c <tcp_free_listen>
      break;
 800bc2a:	e00f      	b.n	800bc4c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	480e      	ldr	r0, [pc, #56]	@ (800bc68 <tcp_close_shutdown+0x1b0>)
 800bc30:	f001 fbc2 	bl	800d3b8 <tcp_pcb_remove>
 800bc34:	4b0d      	ldr	r3, [pc, #52]	@ (800bc6c <tcp_close_shutdown+0x1b4>)
 800bc36:	2201      	movs	r2, #1
 800bc38:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7ff fe8a 	bl	800b954 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bc40:	e004      	b.n	800bc4c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f81a 	bl	800bc7c <tcp_close_shutdown_fin>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	e000      	b.n	800bc4e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bdb0      	pop	{r4, r5, r7, pc}
 800bc56:	bf00      	nop
 800bc58:	08017bc0 	.word	0x08017bc0
 800bc5c:	08017c94 	.word	0x08017c94
 800bc60:	08017c04 	.word	0x08017c04
 800bc64:	08017cb4 	.word	0x08017cb4
 800bc68:	2000bf74 	.word	0x2000bf74
 800bc6c:	2000bf7c 	.word	0x2000bf7c
 800bc70:	2000bfb4 	.word	0x2000bfb4
 800bc74:	2000bf6c 	.word	0x2000bf6c
 800bc78:	2000bf70 	.word	0x2000bf70

0800bc7c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d106      	bne.n	800bc98 <tcp_close_shutdown_fin+0x1c>
 800bc8a:	4b2e      	ldr	r3, [pc, #184]	@ (800bd44 <tcp_close_shutdown_fin+0xc8>)
 800bc8c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800bc90:	492d      	ldr	r1, [pc, #180]	@ (800bd48 <tcp_close_shutdown_fin+0xcc>)
 800bc92:	482e      	ldr	r0, [pc, #184]	@ (800bd4c <tcp_close_shutdown_fin+0xd0>)
 800bc94:	f009 fb96 	bl	80153c4 <iprintf>

  switch (pcb->state) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7d1b      	ldrb	r3, [r3, #20]
 800bc9c:	2b07      	cmp	r3, #7
 800bc9e:	d020      	beq.n	800bce2 <tcp_close_shutdown_fin+0x66>
 800bca0:	2b07      	cmp	r3, #7
 800bca2:	dc2b      	bgt.n	800bcfc <tcp_close_shutdown_fin+0x80>
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d002      	beq.n	800bcae <tcp_close_shutdown_fin+0x32>
 800bca8:	2b04      	cmp	r3, #4
 800bcaa:	d00d      	beq.n	800bcc8 <tcp_close_shutdown_fin+0x4c>
 800bcac:	e026      	b.n	800bcfc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f004 fe5a 	bl	8010968 <tcp_send_fin>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bcb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d11f      	bne.n	800bd00 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2205      	movs	r2, #5
 800bcc4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bcc6:	e01b      	b.n	800bd00 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f004 fe4d 	bl	8010968 <tcp_send_fin>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bcd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d114      	bne.n	800bd04 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2205      	movs	r2, #5
 800bcde:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bce0:	e010      	b.n	800bd04 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f004 fe40 	bl	8010968 <tcp_send_fin>
 800bce8:	4603      	mov	r3, r0
 800bcea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bcec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d109      	bne.n	800bd08 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2209      	movs	r2, #9
 800bcf8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bcfa:	e005      	b.n	800bd08 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e01c      	b.n	800bd3a <tcp_close_shutdown_fin+0xbe>
      break;
 800bd00:	bf00      	nop
 800bd02:	e002      	b.n	800bd0a <tcp_close_shutdown_fin+0x8e>
      break;
 800bd04:	bf00      	nop
 800bd06:	e000      	b.n	800bd0a <tcp_close_shutdown_fin+0x8e>
      break;
 800bd08:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bd0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d103      	bne.n	800bd1a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f004 ff66 	bl	8010be4 <tcp_output>
 800bd18:	e00d      	b.n	800bd36 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd22:	d108      	bne.n	800bd36 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	8b5b      	ldrh	r3, [r3, #26]
 800bd28:	f043 0308 	orr.w	r3, r3, #8
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	e001      	b.n	800bd3a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bd36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	08017bc0 	.word	0x08017bc0
 800bd48:	08017c70 	.word	0x08017c70
 800bd4c:	08017c04 	.word	0x08017c04

0800bd50 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d109      	bne.n	800bd72 <tcp_close+0x22>
 800bd5e:	4b0f      	ldr	r3, [pc, #60]	@ (800bd9c <tcp_close+0x4c>)
 800bd60:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800bd64:	490e      	ldr	r1, [pc, #56]	@ (800bda0 <tcp_close+0x50>)
 800bd66:	480f      	ldr	r0, [pc, #60]	@ (800bda4 <tcp_close+0x54>)
 800bd68:	f009 fb2c 	bl	80153c4 <iprintf>
 800bd6c:	f06f 030f 	mvn.w	r3, #15
 800bd70:	e00f      	b.n	800bd92 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	7d1b      	ldrb	r3, [r3, #20]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d006      	beq.n	800bd88 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	8b5b      	ldrh	r3, [r3, #26]
 800bd7e:	f043 0310 	orr.w	r3, r3, #16
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bd88:	2101      	movs	r1, #1
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff fe94 	bl	800bab8 <tcp_close_shutdown>
 800bd90:	4603      	mov	r3, r0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	08017bc0 	.word	0x08017bc0
 800bda0:	08017cd0 	.word	0x08017cd0
 800bda4:	08017c04 	.word	0x08017c04

0800bda8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d109      	bne.n	800bdce <tcp_shutdown+0x26>
 800bdba:	4b26      	ldr	r3, [pc, #152]	@ (800be54 <tcp_shutdown+0xac>)
 800bdbc:	f240 2207 	movw	r2, #519	@ 0x207
 800bdc0:	4925      	ldr	r1, [pc, #148]	@ (800be58 <tcp_shutdown+0xb0>)
 800bdc2:	4826      	ldr	r0, [pc, #152]	@ (800be5c <tcp_shutdown+0xb4>)
 800bdc4:	f009 fafe 	bl	80153c4 <iprintf>
 800bdc8:	f06f 030f 	mvn.w	r3, #15
 800bdcc:	e03d      	b.n	800be4a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	7d1b      	ldrb	r3, [r3, #20]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d102      	bne.n	800bddc <tcp_shutdown+0x34>
    return ERR_CONN;
 800bdd6:	f06f 030a 	mvn.w	r3, #10
 800bdda:	e036      	b.n	800be4a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d01b      	beq.n	800be1a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	8b5b      	ldrh	r3, [r3, #26]
 800bde6:	f043 0310 	orr.w	r3, r3, #16
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d005      	beq.n	800be02 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7ff fe5d 	bl	800bab8 <tcp_close_shutdown>
 800bdfe:	4603      	mov	r3, r0
 800be00:	e023      	b.n	800be4a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be06:	2b00      	cmp	r3, #0
 800be08:	d007      	beq.n	800be1a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff fa52 	bl	800b2b8 <pbuf_free>
      pcb->refused_data = NULL;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d013      	beq.n	800be48 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	7d1b      	ldrb	r3, [r3, #20]
 800be24:	2b04      	cmp	r3, #4
 800be26:	dc02      	bgt.n	800be2e <tcp_shutdown+0x86>
 800be28:	2b03      	cmp	r3, #3
 800be2a:	da02      	bge.n	800be32 <tcp_shutdown+0x8a>
 800be2c:	e009      	b.n	800be42 <tcp_shutdown+0x9a>
 800be2e:	2b07      	cmp	r3, #7
 800be30:	d107      	bne.n	800be42 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	4619      	mov	r1, r3
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f7ff fe3d 	bl	800bab8 <tcp_close_shutdown>
 800be3e:	4603      	mov	r3, r0
 800be40:	e003      	b.n	800be4a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800be42:	f06f 030a 	mvn.w	r3, #10
 800be46:	e000      	b.n	800be4a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	08017bc0 	.word	0x08017bc0
 800be58:	08017ce8 	.word	0x08017ce8
 800be5c:	08017c04 	.word	0x08017c04

0800be60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08e      	sub	sp, #56	@ 0x38
 800be64:	af04      	add	r7, sp, #16
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d107      	bne.n	800be80 <tcp_abandon+0x20>
 800be70:	4b52      	ldr	r3, [pc, #328]	@ (800bfbc <tcp_abandon+0x15c>)
 800be72:	f240 223d 	movw	r2, #573	@ 0x23d
 800be76:	4952      	ldr	r1, [pc, #328]	@ (800bfc0 <tcp_abandon+0x160>)
 800be78:	4852      	ldr	r0, [pc, #328]	@ (800bfc4 <tcp_abandon+0x164>)
 800be7a:	f009 faa3 	bl	80153c4 <iprintf>
 800be7e:	e099      	b.n	800bfb4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	7d1b      	ldrb	r3, [r3, #20]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d106      	bne.n	800be96 <tcp_abandon+0x36>
 800be88:	4b4c      	ldr	r3, [pc, #304]	@ (800bfbc <tcp_abandon+0x15c>)
 800be8a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800be8e:	494e      	ldr	r1, [pc, #312]	@ (800bfc8 <tcp_abandon+0x168>)
 800be90:	484c      	ldr	r0, [pc, #304]	@ (800bfc4 <tcp_abandon+0x164>)
 800be92:	f009 fa97 	bl	80153c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	7d1b      	ldrb	r3, [r3, #20]
 800be9a:	2b0a      	cmp	r3, #10
 800be9c:	d107      	bne.n	800beae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	484a      	ldr	r0, [pc, #296]	@ (800bfcc <tcp_abandon+0x16c>)
 800bea2:	f001 fa89 	bl	800d3b8 <tcp_pcb_remove>
    tcp_free(pcb);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f7ff fd54 	bl	800b954 <tcp_free>
 800beac:	e082      	b.n	800bfb4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bec8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	7d1b      	ldrb	r3, [r3, #20]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d126      	bne.n	800bf26 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	8adb      	ldrh	r3, [r3, #22]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d02e      	beq.n	800bf3e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bee0:	4b3b      	ldr	r3, [pc, #236]	@ (800bfd0 <tcp_abandon+0x170>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d105      	bne.n	800bef6 <tcp_abandon+0x96>
 800beea:	4b39      	ldr	r3, [pc, #228]	@ (800bfd0 <tcp_abandon+0x170>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	4a37      	ldr	r2, [pc, #220]	@ (800bfd0 <tcp_abandon+0x170>)
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	e013      	b.n	800bf1e <tcp_abandon+0xbe>
 800bef6:	4b36      	ldr	r3, [pc, #216]	@ (800bfd0 <tcp_abandon+0x170>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	61fb      	str	r3, [r7, #28]
 800befc:	e00c      	b.n	800bf18 <tcp_abandon+0xb8>
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d104      	bne.n	800bf12 <tcp_abandon+0xb2>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68da      	ldr	r2, [r3, #12]
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	60da      	str	r2, [r3, #12]
 800bf10:	e005      	b.n	800bf1e <tcp_abandon+0xbe>
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	61fb      	str	r3, [r7, #28]
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1ef      	bne.n	800befe <tcp_abandon+0x9e>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	60da      	str	r2, [r3, #12]
 800bf24:	e00b      	b.n	800bf3e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8adb      	ldrh	r3, [r3, #22]
 800bf2e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bf30:	6879      	ldr	r1, [r7, #4]
 800bf32:	4828      	ldr	r0, [pc, #160]	@ (800bfd4 <tcp_abandon+0x174>)
 800bf34:	f001 fa40 	bl	800d3b8 <tcp_pcb_remove>
 800bf38:	4b27      	ldr	r3, [pc, #156]	@ (800bfd8 <tcp_abandon+0x178>)
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d004      	beq.n	800bf50 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 ff14 	bl	800cd78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 ff0b 	bl	800cd78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d004      	beq.n	800bf74 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 ff02 	bl	800cd78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00e      	beq.n	800bf98 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bf7a:	6879      	ldr	r1, [r7, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3304      	adds	r3, #4
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	8b12      	ldrh	r2, [r2, #24]
 800bf84:	9202      	str	r2, [sp, #8]
 800bf86:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bf88:	9201      	str	r2, [sp, #4]
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	69b9      	ldr	r1, [r7, #24]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f005 fbda 	bl	801174c <tcp_rst>
    }
    last_state = pcb->state;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	7d1b      	ldrb	r3, [r3, #20]
 800bf9c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fcd8 	bl	800b954 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d004      	beq.n	800bfb4 <tcp_abandon+0x154>
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	f06f 010c 	mvn.w	r1, #12
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	4798      	blx	r3
  }
}
 800bfb4:	3728      	adds	r7, #40	@ 0x28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	08017bc0 	.word	0x08017bc0
 800bfc0:	08017d04 	.word	0x08017d04
 800bfc4:	08017c04 	.word	0x08017c04
 800bfc8:	08017d20 	.word	0x08017d20
 800bfcc:	2000bf78 	.word	0x2000bf78
 800bfd0:	2000bf6c 	.word	0x2000bf6c
 800bfd4:	2000bf74 	.word	0x2000bf74
 800bfd8:	2000bf7c 	.word	0x2000bf7c

0800bfdc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff ff3a 	bl	800be60 <tcp_abandon>
}
 800bfec:	bf00      	nop
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b088      	sub	sp, #32
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	4613      	mov	r3, r2
 800c000:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c002:	2304      	movs	r3, #4
 800c004:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d101      	bne.n	800c010 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c00c:	4b3e      	ldr	r3, [pc, #248]	@ (800c108 <tcp_bind+0x114>)
 800c00e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d109      	bne.n	800c02a <tcp_bind+0x36>
 800c016:	4b3d      	ldr	r3, [pc, #244]	@ (800c10c <tcp_bind+0x118>)
 800c018:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800c01c:	493c      	ldr	r1, [pc, #240]	@ (800c110 <tcp_bind+0x11c>)
 800c01e:	483d      	ldr	r0, [pc, #244]	@ (800c114 <tcp_bind+0x120>)
 800c020:	f009 f9d0 	bl	80153c4 <iprintf>
 800c024:	f06f 030f 	mvn.w	r3, #15
 800c028:	e06a      	b.n	800c100 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	7d1b      	ldrb	r3, [r3, #20]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d009      	beq.n	800c046 <tcp_bind+0x52>
 800c032:	4b36      	ldr	r3, [pc, #216]	@ (800c10c <tcp_bind+0x118>)
 800c034:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c038:	4937      	ldr	r1, [pc, #220]	@ (800c118 <tcp_bind+0x124>)
 800c03a:	4836      	ldr	r0, [pc, #216]	@ (800c114 <tcp_bind+0x120>)
 800c03c:	f009 f9c2 	bl	80153c4 <iprintf>
 800c040:	f06f 0305 	mvn.w	r3, #5
 800c044:	e05c      	b.n	800c100 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c046:	88fb      	ldrh	r3, [r7, #6]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d109      	bne.n	800c060 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c04c:	f000 f914 	bl	800c278 <tcp_new_port>
 800c050:	4603      	mov	r3, r0
 800c052:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c054:	88fb      	ldrh	r3, [r7, #6]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d135      	bne.n	800c0c6 <tcp_bind+0xd2>
      return ERR_BUF;
 800c05a:	f06f 0301 	mvn.w	r3, #1
 800c05e:	e04f      	b.n	800c100 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c060:	2300      	movs	r3, #0
 800c062:	61fb      	str	r3, [r7, #28]
 800c064:	e02b      	b.n	800c0be <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c066:	4a2d      	ldr	r2, [pc, #180]	@ (800c11c <tcp_bind+0x128>)
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	61bb      	str	r3, [r7, #24]
 800c072:	e01e      	b.n	800c0b2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	8adb      	ldrh	r3, [r3, #22]
 800c078:	88fa      	ldrh	r2, [r7, #6]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d116      	bne.n	800c0ac <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c07e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c080:	2b00      	cmp	r3, #0
 800c082:	d010      	beq.n	800c0a6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00c      	beq.n	800c0a6 <tcp_bind+0xb2>
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d009      	beq.n	800c0a6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d005      	beq.n	800c0a6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d102      	bne.n	800c0ac <tcp_bind+0xb8>
              return ERR_USE;
 800c0a6:	f06f 0307 	mvn.w	r3, #7
 800c0aa:	e029      	b.n	800c100 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	61bb      	str	r3, [r7, #24]
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1dd      	bne.n	800c074 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	61fb      	str	r3, [r7, #28]
 800c0be:	69fa      	ldr	r2, [r7, #28]
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	dbcf      	blt.n	800c066 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00c      	beq.n	800c0e6 <tcp_bind+0xf2>
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d008      	beq.n	800c0e6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d002      	beq.n	800c0e0 <tcp_bind+0xec>
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	e000      	b.n	800c0e2 <tcp_bind+0xee>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	88fa      	ldrh	r2, [r7, #6]
 800c0ea:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c120 <tcp_bind+0x12c>)
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	60da      	str	r2, [r3, #12]
 800c0f4:	4a0a      	ldr	r2, [pc, #40]	@ (800c120 <tcp_bind+0x12c>)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6013      	str	r3, [r2, #0]
 800c0fa:	f005 fce9 	bl	8011ad0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3720      	adds	r7, #32
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	08019c0c 	.word	0x08019c0c
 800c10c:	08017bc0 	.word	0x08017bc0
 800c110:	08017d54 	.word	0x08017d54
 800c114:	08017c04 	.word	0x08017c04
 800c118:	08017d6c 	.word	0x08017d6c
 800c11c:	08019be4 	.word	0x08019be4
 800c120:	2000bf6c 	.word	0x2000bf6c

0800c124 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d106      	bne.n	800c140 <tcp_update_rcv_ann_wnd+0x1c>
 800c132:	4b25      	ldr	r3, [pc, #148]	@ (800c1c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c134:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c138:	4924      	ldr	r1, [pc, #144]	@ (800c1cc <tcp_update_rcv_ann_wnd+0xa8>)
 800c13a:	4825      	ldr	r0, [pc, #148]	@ (800c1d0 <tcp_update_rcv_ann_wnd+0xac>)
 800c13c:	f009 f942 	bl	80153c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c148:	4413      	add	r3, r2
 800c14a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c154:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c158:	bf28      	it	cs
 800c15a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c15e:	b292      	uxth	r2, r2
 800c160:	4413      	add	r3, r2
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	db08      	blt.n	800c17c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	e020      	b.n	800c1be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	dd03      	ble.n	800c192 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c190:	e014      	b.n	800c1bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1a4:	d306      	bcc.n	800c1b4 <tcp_update_rcv_ann_wnd+0x90>
 800c1a6:	4b08      	ldr	r3, [pc, #32]	@ (800c1c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c1a8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c1ac:	4909      	ldr	r1, [pc, #36]	@ (800c1d4 <tcp_update_rcv_ann_wnd+0xb0>)
 800c1ae:	4808      	ldr	r0, [pc, #32]	@ (800c1d0 <tcp_update_rcv_ann_wnd+0xac>)
 800c1b0:	f009 f908 	bl	80153c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c1bc:	2300      	movs	r3, #0
  }
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	08017bc0 	.word	0x08017bc0
 800c1cc:	08017e1c 	.word	0x08017e1c
 800c1d0:	08017c04 	.word	0x08017c04
 800c1d4:	08017e40 	.word	0x08017e40

0800c1d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d107      	bne.n	800c1fa <tcp_recved+0x22>
 800c1ea:	4b1f      	ldr	r3, [pc, #124]	@ (800c268 <tcp_recved+0x90>)
 800c1ec:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c1f0:	491e      	ldr	r1, [pc, #120]	@ (800c26c <tcp_recved+0x94>)
 800c1f2:	481f      	ldr	r0, [pc, #124]	@ (800c270 <tcp_recved+0x98>)
 800c1f4:	f009 f8e6 	bl	80153c4 <iprintf>
 800c1f8:	e032      	b.n	800c260 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	7d1b      	ldrb	r3, [r3, #20]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d106      	bne.n	800c210 <tcp_recved+0x38>
 800c202:	4b19      	ldr	r3, [pc, #100]	@ (800c268 <tcp_recved+0x90>)
 800c204:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c208:	491a      	ldr	r1, [pc, #104]	@ (800c274 <tcp_recved+0x9c>)
 800c20a:	4819      	ldr	r0, [pc, #100]	@ (800c270 <tcp_recved+0x98>)
 800c20c:	f009 f8da 	bl	80153c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c214:	887b      	ldrh	r3, [r7, #2]
 800c216:	4413      	add	r3, r2
 800c218:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c21a:	89fb      	ldrh	r3, [r7, #14]
 800c21c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c220:	d804      	bhi.n	800c22c <tcp_recved+0x54>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c226:	89fa      	ldrh	r2, [r7, #14]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d204      	bcs.n	800c236 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c232:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c234:	e002      	b.n	800c23c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	89fa      	ldrh	r2, [r7, #14]
 800c23a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff ff71 	bl	800c124 <tcp_update_rcv_ann_wnd>
 800c242:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c24a:	d309      	bcc.n	800c260 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	8b5b      	ldrh	r3, [r3, #26]
 800c250:	f043 0302 	orr.w	r3, r3, #2
 800c254:	b29a      	uxth	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f004 fcc2 	bl	8010be4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	08017bc0 	.word	0x08017bc0
 800c26c:	08017e5c 	.word	0x08017e5c
 800c270:	08017c04 	.word	0x08017c04
 800c274:	08017e74 	.word	0x08017e74

0800c278 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c282:	4b1e      	ldr	r3, [pc, #120]	@ (800c2fc <tcp_new_port+0x84>)
 800c284:	881b      	ldrh	r3, [r3, #0]
 800c286:	3301      	adds	r3, #1
 800c288:	b29a      	uxth	r2, r3
 800c28a:	4b1c      	ldr	r3, [pc, #112]	@ (800c2fc <tcp_new_port+0x84>)
 800c28c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c28e:	4b1b      	ldr	r3, [pc, #108]	@ (800c2fc <tcp_new_port+0x84>)
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c296:	4293      	cmp	r3, r2
 800c298:	d103      	bne.n	800c2a2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c29a:	4b18      	ldr	r3, [pc, #96]	@ (800c2fc <tcp_new_port+0x84>)
 800c29c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c2a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	71fb      	strb	r3, [r7, #7]
 800c2a6:	e01e      	b.n	800c2e6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c2a8:	79fb      	ldrb	r3, [r7, #7]
 800c2aa:	4a15      	ldr	r2, [pc, #84]	@ (800c300 <tcp_new_port+0x88>)
 800c2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	e011      	b.n	800c2da <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	8ada      	ldrh	r2, [r3, #22]
 800c2ba:	4b10      	ldr	r3, [pc, #64]	@ (800c2fc <tcp_new_port+0x84>)
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d108      	bne.n	800c2d4 <tcp_new_port+0x5c>
        n++;
 800c2c2:	88bb      	ldrh	r3, [r7, #4]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c2c8:	88bb      	ldrh	r3, [r7, #4]
 800c2ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2ce:	d3d8      	bcc.n	800c282 <tcp_new_port+0xa>
          return 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e00d      	b.n	800c2f0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	603b      	str	r3, [r7, #0]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1ea      	bne.n	800c2b6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	71fb      	strb	r3, [r7, #7]
 800c2e6:	79fb      	ldrb	r3, [r7, #7]
 800c2e8:	2b03      	cmp	r3, #3
 800c2ea:	d9dd      	bls.n	800c2a8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c2ec:	4b03      	ldr	r3, [pc, #12]	@ (800c2fc <tcp_new_port+0x84>)
 800c2ee:	881b      	ldrh	r3, [r3, #0]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	20000024 	.word	0x20000024
 800c300:	08019be4 	.word	0x08019be4

0800c304 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08a      	sub	sp, #40	@ 0x28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	4613      	mov	r3, r2
 800c312:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800c314:	2300      	movs	r3, #0
 800c316:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <tcp_connect+0x2e>
 800c31e:	4b7d      	ldr	r3, [pc, #500]	@ (800c514 <tcp_connect+0x210>)
 800c320:	f240 4235 	movw	r2, #1077	@ 0x435
 800c324:	497c      	ldr	r1, [pc, #496]	@ (800c518 <tcp_connect+0x214>)
 800c326:	487d      	ldr	r0, [pc, #500]	@ (800c51c <tcp_connect+0x218>)
 800c328:	f009 f84c 	bl	80153c4 <iprintf>
 800c32c:	f06f 030f 	mvn.w	r3, #15
 800c330:	e0ec      	b.n	800c50c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d109      	bne.n	800c34c <tcp_connect+0x48>
 800c338:	4b76      	ldr	r3, [pc, #472]	@ (800c514 <tcp_connect+0x210>)
 800c33a:	f240 4236 	movw	r2, #1078	@ 0x436
 800c33e:	4978      	ldr	r1, [pc, #480]	@ (800c520 <tcp_connect+0x21c>)
 800c340:	4876      	ldr	r0, [pc, #472]	@ (800c51c <tcp_connect+0x218>)
 800c342:	f009 f83f 	bl	80153c4 <iprintf>
 800c346:	f06f 030f 	mvn.w	r3, #15
 800c34a:	e0df      	b.n	800c50c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	7d1b      	ldrb	r3, [r3, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d009      	beq.n	800c368 <tcp_connect+0x64>
 800c354:	4b6f      	ldr	r3, [pc, #444]	@ (800c514 <tcp_connect+0x210>)
 800c356:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800c35a:	4972      	ldr	r1, [pc, #456]	@ (800c524 <tcp_connect+0x220>)
 800c35c:	486f      	ldr	r0, [pc, #444]	@ (800c51c <tcp_connect+0x218>)
 800c35e:	f009 f831 	bl	80153c4 <iprintf>
 800c362:	f06f 0309 	mvn.w	r3, #9
 800c366:	e0d1      	b.n	800c50c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <tcp_connect+0x70>
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	e000      	b.n	800c376 <tcp_connect+0x72>
 800c374:	2300      	movs	r3, #0
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	88fa      	ldrh	r2, [r7, #6]
 800c37e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	7a1b      	ldrb	r3, [r3, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d006      	beq.n	800c396 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	7a1b      	ldrb	r3, [r3, #8]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7fe fc05 	bl	800ab9c <netif_get_by_index>
 800c392:	6278      	str	r0, [r7, #36]	@ 0x24
 800c394:	e005      	b.n	800c3a2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3304      	adds	r3, #4
 800c39a:	4618      	mov	r0, r3
 800c39c:	f007 fb44 	bl	8013a28 <ip4_route>
 800c3a0:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d102      	bne.n	800c3ae <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800c3a8:	f06f 0303 	mvn.w	r3, #3
 800c3ac:	e0ae      	b.n	800c50c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <tcp_connect+0xb8>
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d111      	bne.n	800c3e0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <tcp_connect+0xc4>
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	e000      	b.n	800c3ca <tcp_connect+0xc6>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d102      	bne.n	800c3d8 <tcp_connect+0xd4>
      return ERR_RTE;
 800c3d2:	f06f 0303 	mvn.w	r3, #3
 800c3d6:	e099      	b.n	800c50c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	8adb      	ldrh	r3, [r3, #22]
 800c3e4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	8adb      	ldrh	r3, [r3, #22]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10c      	bne.n	800c408 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800c3ee:	f7ff ff43 	bl	800c278 <tcp_new_port>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	8adb      	ldrh	r3, [r3, #22]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <tcp_connect+0x104>
      return ERR_BUF;
 800c402:	f06f 0301 	mvn.w	r3, #1
 800c406:	e081      	b.n	800c50c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f001 f869 	bl	800d4e0 <tcp_next_iss>
 800c40e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	697a      	ldr	r2, [r7, #20]
 800c41a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	1e5a      	subs	r2, r3, #1
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	1e5a      	subs	r2, r3, #1
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	1e5a      	subs	r2, r3, #1
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c43a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c452:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c45c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3304      	adds	r3, #4
 800c466:	461a      	mov	r2, r3
 800c468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c46a:	f001 f85f 	bl	800d52c <tcp_eff_send_mss_netif>
 800c46e:	4603      	mov	r3, r0
 800c470:	461a      	mov	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2201      	movs	r2, #1
 800c47a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800c486:	2102      	movs	r1, #2
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f004 fabd 	bl	8010a08 <tcp_enqueue_flags>
 800c48e:	4603      	mov	r3, r0
 800c490:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800c492:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d136      	bne.n	800c508 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2202      	movs	r2, #2
 800c49e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800c4a0:	8b7b      	ldrh	r3, [r7, #26]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d021      	beq.n	800c4ea <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c4a6:	4b20      	ldr	r3, [pc, #128]	@ (800c528 <tcp_connect+0x224>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d105      	bne.n	800c4bc <tcp_connect+0x1b8>
 800c4b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c528 <tcp_connect+0x224>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	4a1c      	ldr	r2, [pc, #112]	@ (800c528 <tcp_connect+0x224>)
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	e013      	b.n	800c4e4 <tcp_connect+0x1e0>
 800c4bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c528 <tcp_connect+0x224>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	623b      	str	r3, [r7, #32]
 800c4c2:	e00c      	b.n	800c4de <tcp_connect+0x1da>
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d104      	bne.n	800c4d8 <tcp_connect+0x1d4>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	68da      	ldr	r2, [r3, #12]
 800c4d2:	6a3b      	ldr	r3, [r7, #32]
 800c4d4:	60da      	str	r2, [r3, #12]
 800c4d6:	e005      	b.n	800c4e4 <tcp_connect+0x1e0>
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	623b      	str	r3, [r7, #32]
 800c4de:	6a3b      	ldr	r3, [r7, #32]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1ef      	bne.n	800c4c4 <tcp_connect+0x1c0>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800c4ea:	4b10      	ldr	r3, [pc, #64]	@ (800c52c <tcp_connect+0x228>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	60da      	str	r2, [r3, #12]
 800c4f2:	4a0e      	ldr	r2, [pc, #56]	@ (800c52c <tcp_connect+0x228>)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	f005 faea 	bl	8011ad0 <tcp_timer_needed>
 800c4fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c530 <tcp_connect+0x22c>)
 800c4fe:	2201      	movs	r2, #1
 800c500:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f004 fb6e 	bl	8010be4 <tcp_output>
  }
  return ret;
 800c508:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3728      	adds	r7, #40	@ 0x28
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	08017bc0 	.word	0x08017bc0
 800c518:	08017e9c 	.word	0x08017e9c
 800c51c:	08017c04 	.word	0x08017c04
 800c520:	08017eb8 	.word	0x08017eb8
 800c524:	08017ed4 	.word	0x08017ed4
 800c528:	2000bf6c 	.word	0x2000bf6c
 800c52c:	2000bf74 	.word	0x2000bf74
 800c530:	2000bf7c 	.word	0x2000bf7c

0800c534 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c534:	b5b0      	push	{r4, r5, r7, lr}
 800c536:	b090      	sub	sp, #64	@ 0x40
 800c538:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c540:	4b95      	ldr	r3, [pc, #596]	@ (800c798 <tcp_slowtmr+0x264>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3301      	adds	r3, #1
 800c546:	4a94      	ldr	r2, [pc, #592]	@ (800c798 <tcp_slowtmr+0x264>)
 800c548:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c54a:	4b94      	ldr	r3, [pc, #592]	@ (800c79c <tcp_slowtmr+0x268>)
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	3301      	adds	r3, #1
 800c550:	b2da      	uxtb	r2, r3
 800c552:	4b92      	ldr	r3, [pc, #584]	@ (800c79c <tcp_slowtmr+0x268>)
 800c554:	701a      	strb	r2, [r3, #0]
 800c556:	e000      	b.n	800c55a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c558:	bf00      	nop
  prev = NULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c55e:	4b90      	ldr	r3, [pc, #576]	@ (800c7a0 <tcp_slowtmr+0x26c>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c564:	e29d      	b.n	800caa2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c568:	7d1b      	ldrb	r3, [r3, #20]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d106      	bne.n	800c57c <tcp_slowtmr+0x48>
 800c56e:	4b8d      	ldr	r3, [pc, #564]	@ (800c7a4 <tcp_slowtmr+0x270>)
 800c570:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c574:	498c      	ldr	r1, [pc, #560]	@ (800c7a8 <tcp_slowtmr+0x274>)
 800c576:	488d      	ldr	r0, [pc, #564]	@ (800c7ac <tcp_slowtmr+0x278>)
 800c578:	f008 ff24 	bl	80153c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57e:	7d1b      	ldrb	r3, [r3, #20]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d106      	bne.n	800c592 <tcp_slowtmr+0x5e>
 800c584:	4b87      	ldr	r3, [pc, #540]	@ (800c7a4 <tcp_slowtmr+0x270>)
 800c586:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c58a:	4989      	ldr	r1, [pc, #548]	@ (800c7b0 <tcp_slowtmr+0x27c>)
 800c58c:	4887      	ldr	r0, [pc, #540]	@ (800c7ac <tcp_slowtmr+0x278>)
 800c58e:	f008 ff19 	bl	80153c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c594:	7d1b      	ldrb	r3, [r3, #20]
 800c596:	2b0a      	cmp	r3, #10
 800c598:	d106      	bne.n	800c5a8 <tcp_slowtmr+0x74>
 800c59a:	4b82      	ldr	r3, [pc, #520]	@ (800c7a4 <tcp_slowtmr+0x270>)
 800c59c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c5a0:	4984      	ldr	r1, [pc, #528]	@ (800c7b4 <tcp_slowtmr+0x280>)
 800c5a2:	4882      	ldr	r0, [pc, #520]	@ (800c7ac <tcp_slowtmr+0x278>)
 800c5a4:	f008 ff0e 	bl	80153c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5aa:	7f9a      	ldrb	r2, [r3, #30]
 800c5ac:	4b7b      	ldr	r3, [pc, #492]	@ (800c79c <tcp_slowtmr+0x268>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d105      	bne.n	800c5c0 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c5be:	e270      	b.n	800caa2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800c5c0:	4b76      	ldr	r3, [pc, #472]	@ (800c79c <tcp_slowtmr+0x268>)
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d6:	7d1b      	ldrb	r3, [r3, #20]
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d10a      	bne.n	800c5f2 <tcp_slowtmr+0xbe>
 800c5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c5e2:	2b05      	cmp	r3, #5
 800c5e4:	d905      	bls.n	800c5f2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c5f0:	e11e      	b.n	800c830 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c5f8:	2b0b      	cmp	r3, #11
 800c5fa:	d905      	bls.n	800c608 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c600:	3301      	adds	r3, #1
 800c602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c606:	e113      	b.n	800c830 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d075      	beq.n	800c6fe <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c616:	2b00      	cmp	r3, #0
 800c618:	d006      	beq.n	800c628 <tcp_slowtmr+0xf4>
 800c61a:	4b62      	ldr	r3, [pc, #392]	@ (800c7a4 <tcp_slowtmr+0x270>)
 800c61c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c620:	4965      	ldr	r1, [pc, #404]	@ (800c7b8 <tcp_slowtmr+0x284>)
 800c622:	4862      	ldr	r0, [pc, #392]	@ (800c7ac <tcp_slowtmr+0x278>)
 800c624:	f008 fece 	bl	80153c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d106      	bne.n	800c63e <tcp_slowtmr+0x10a>
 800c630:	4b5c      	ldr	r3, [pc, #368]	@ (800c7a4 <tcp_slowtmr+0x270>)
 800c632:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c636:	4961      	ldr	r1, [pc, #388]	@ (800c7bc <tcp_slowtmr+0x288>)
 800c638:	485c      	ldr	r0, [pc, #368]	@ (800c7ac <tcp_slowtmr+0x278>)
 800c63a:	f008 fec3 	bl	80153c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c640:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c644:	2b0b      	cmp	r3, #11
 800c646:	d905      	bls.n	800c654 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c64c:	3301      	adds	r3, #1
 800c64e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c652:	e0ed      	b.n	800c830 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c656:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c65a:	3b01      	subs	r3, #1
 800c65c:	4a58      	ldr	r2, [pc, #352]	@ (800c7c0 <tcp_slowtmr+0x28c>)
 800c65e:	5cd3      	ldrb	r3, [r2, r3]
 800c660:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c664:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c668:	7c7a      	ldrb	r2, [r7, #17]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d907      	bls.n	800c67e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c670:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c674:	3301      	adds	r3, #1
 800c676:	b2da      	uxtb	r2, r3
 800c678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c680:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c684:	7c7a      	ldrb	r2, [r7, #17]
 800c686:	429a      	cmp	r2, r3
 800c688:	f200 80d2 	bhi.w	800c830 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c68c:	2301      	movs	r3, #1
 800c68e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c696:	2b00      	cmp	r3, #0
 800c698:	d108      	bne.n	800c6ac <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c69a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c69c:	f005 f94a 	bl	8011934 <tcp_zero_window_probe>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d014      	beq.n	800c6d0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	623b      	str	r3, [r7, #32]
 800c6aa:	e011      	b.n	800c6d0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6b6:	f004 f80f 	bl	80106d8 <tcp_split_unsent_seg>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d107      	bne.n	800c6d0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c6c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6c2:	f004 fa8f 	bl	8010be4 <tcp_output>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c6d0:	6a3b      	ldr	r3, [r7, #32]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 80ac 	beq.w	800c830 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c6e6:	2b06      	cmp	r3, #6
 800c6e8:	f200 80a2 	bhi.w	800c830 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c6fc:	e098      	b.n	800c830 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c700:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c704:	2b00      	cmp	r3, #0
 800c706:	db0f      	blt.n	800c728 <tcp_slowtmr+0x1f4>
 800c708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c70e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c712:	4293      	cmp	r3, r2
 800c714:	d008      	beq.n	800c728 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c718:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	3301      	adds	r3, #1
 800c720:	b29b      	uxth	r3, r3
 800c722:	b21a      	sxth	r2, r3
 800c724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c726:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c730:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c734:	429a      	cmp	r2, r3
 800c736:	db7b      	blt.n	800c830 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c738:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c73a:	f004 fd47 	bl	80111cc <tcp_rexmit_rto_prepare>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d007      	beq.n	800c754 <tcp_slowtmr+0x220>
 800c744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d171      	bne.n	800c830 <tcp_slowtmr+0x2fc>
 800c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d06d      	beq.n	800c830 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800c754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c756:	7d1b      	ldrb	r3, [r3, #20]
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d03a      	beq.n	800c7d2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c762:	2b0c      	cmp	r3, #12
 800c764:	bf28      	it	cs
 800c766:	230c      	movcs	r3, #12
 800c768:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c76c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c770:	10db      	asrs	r3, r3, #3
 800c772:	b21b      	sxth	r3, r3
 800c774:	461a      	mov	r2, r3
 800c776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c778:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c77c:	4413      	add	r3, r2
 800c77e:	7efa      	ldrb	r2, [r7, #27]
 800c780:	4910      	ldr	r1, [pc, #64]	@ (800c7c4 <tcp_slowtmr+0x290>)
 800c782:	5c8a      	ldrb	r2, [r1, r2]
 800c784:	4093      	lsls	r3, r2
 800c786:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800c78e:	4293      	cmp	r3, r2
 800c790:	dc1a      	bgt.n	800c7c8 <tcp_slowtmr+0x294>
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	b21a      	sxth	r2, r3
 800c796:	e019      	b.n	800c7cc <tcp_slowtmr+0x298>
 800c798:	2000bf68 	.word	0x2000bf68
 800c79c:	2000bf7e 	.word	0x2000bf7e
 800c7a0:	2000bf74 	.word	0x2000bf74
 800c7a4:	08017bc0 	.word	0x08017bc0
 800c7a8:	08017f04 	.word	0x08017f04
 800c7ac:	08017c04 	.word	0x08017c04
 800c7b0:	08017f30 	.word	0x08017f30
 800c7b4:	08017f5c 	.word	0x08017f5c
 800c7b8:	08017f8c 	.word	0x08017f8c
 800c7bc:	08017fc0 	.word	0x08017fc0
 800c7c0:	08019bdc 	.word	0x08019bdc
 800c7c4:	08019bcc 	.word	0x08019bcc
 800c7c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800c7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	bf28      	it	cs
 800c7e8:	4613      	movcs	r3, r2
 800c7ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c7ec:	8a7b      	ldrh	r3, [r7, #18]
 800c7ee:	085b      	lsrs	r3, r3, #1
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c800:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	b29b      	uxth	r3, r3
 800c806:	429a      	cmp	r2, r3
 800c808:	d206      	bcs.n	800c818 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c80c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c80e:	005b      	lsls	r3, r3, #1
 800c810:	b29a      	uxth	r2, r3
 800c812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c814:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800c818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800c81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800c822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c824:	2200      	movs	r2, #0
 800c826:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800c82a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c82c:	f004 fd3e 	bl	80112ac <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800c830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c832:	7d1b      	ldrb	r3, [r3, #20]
 800c834:	2b06      	cmp	r3, #6
 800c836:	d111      	bne.n	800c85c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800c838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c83a:	8b5b      	ldrh	r3, [r3, #26]
 800c83c:	f003 0310 	and.w	r3, r3, #16
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00b      	beq.n	800c85c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c844:	4b9c      	ldr	r3, [pc, #624]	@ (800cab8 <tcp_slowtmr+0x584>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84a:	6a1b      	ldr	r3, [r3, #32]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	2b28      	cmp	r3, #40	@ 0x28
 800c850:	d904      	bls.n	800c85c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800c852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c856:	3301      	adds	r3, #1
 800c858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85e:	7a5b      	ldrb	r3, [r3, #9]
 800c860:	f003 0308 	and.w	r3, r3, #8
 800c864:	2b00      	cmp	r3, #0
 800c866:	d04a      	beq.n	800c8fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d003      	beq.n	800c878 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800c870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c872:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c874:	2b07      	cmp	r3, #7
 800c876:	d142      	bne.n	800c8fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c878:	4b8f      	ldr	r3, [pc, #572]	@ (800cab8 <tcp_slowtmr+0x584>)
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87e:	6a1b      	ldr	r3, [r3, #32]
 800c880:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c884:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800c888:	4b8c      	ldr	r3, [pc, #560]	@ (800cabc <tcp_slowtmr+0x588>)
 800c88a:	440b      	add	r3, r1
 800c88c:	498c      	ldr	r1, [pc, #560]	@ (800cac0 <tcp_slowtmr+0x58c>)
 800c88e:	fba1 1303 	umull	r1, r3, r1, r3
 800c892:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c894:	429a      	cmp	r2, r3
 800c896:	d90a      	bls.n	800c8ae <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800c898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c89c:	3301      	adds	r3, #1
 800c89e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800c8a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c8ac:	e027      	b.n	800c8fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8ae:	4b82      	ldr	r3, [pc, #520]	@ (800cab8 <tcp_slowtmr+0x584>)
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b4:	6a1b      	ldr	r3, [r3, #32]
 800c8b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800c8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	4b7f      	ldr	r3, [pc, #508]	@ (800cac4 <tcp_slowtmr+0x590>)
 800c8c8:	fb00 f303 	mul.w	r3, r0, r3
 800c8cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c8ce:	497c      	ldr	r1, [pc, #496]	@ (800cac0 <tcp_slowtmr+0x58c>)
 800c8d0:	fba1 1303 	umull	r1, r3, r1, r3
 800c8d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d911      	bls.n	800c8fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c8da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8dc:	f004 ffea 	bl	80118b4 <tcp_keepalive>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800c8e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d107      	bne.n	800c8fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800c8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c902:	2b00      	cmp	r3, #0
 800c904:	d011      	beq.n	800c92a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c906:	4b6c      	ldr	r3, [pc, #432]	@ (800cab8 <tcp_slowtmr+0x584>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	1ad2      	subs	r2, r2, r3
 800c910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c912:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c916:	4619      	mov	r1, r3
 800c918:	460b      	mov	r3, r1
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	440b      	add	r3, r1
 800c91e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c920:	429a      	cmp	r2, r3
 800c922:	d302      	bcc.n	800c92a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800c924:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c926:	f000 feab 	bl	800d680 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800c92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92c:	7d1b      	ldrb	r3, [r3, #20]
 800c92e:	2b03      	cmp	r3, #3
 800c930:	d10b      	bne.n	800c94a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c932:	4b61      	ldr	r3, [pc, #388]	@ (800cab8 <tcp_slowtmr+0x584>)
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	2b28      	cmp	r3, #40	@ 0x28
 800c93e:	d904      	bls.n	800c94a <tcp_slowtmr+0x416>
        ++pcb_remove;
 800c940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c944:	3301      	adds	r3, #1
 800c946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800c94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94c:	7d1b      	ldrb	r3, [r3, #20]
 800c94e:	2b09      	cmp	r3, #9
 800c950:	d10b      	bne.n	800c96a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c952:	4b59      	ldr	r3, [pc, #356]	@ (800cab8 <tcp_slowtmr+0x584>)
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	1ad3      	subs	r3, r2, r3
 800c95c:	2bf0      	cmp	r3, #240	@ 0xf0
 800c95e:	d904      	bls.n	800c96a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c964:	3301      	adds	r3, #1
 800c966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800c96a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d060      	beq.n	800ca34 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800c972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c978:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800c97a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c97c:	f000 fccc 	bl	800d318 <tcp_pcb_purge>
      if (prev != NULL) {
 800c980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c982:	2b00      	cmp	r3, #0
 800c984:	d010      	beq.n	800c9a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c986:	4b50      	ldr	r3, [pc, #320]	@ (800cac8 <tcp_slowtmr+0x594>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d106      	bne.n	800c99e <tcp_slowtmr+0x46a>
 800c990:	4b4e      	ldr	r3, [pc, #312]	@ (800cacc <tcp_slowtmr+0x598>)
 800c992:	f240 526d 	movw	r2, #1389	@ 0x56d
 800c996:	494e      	ldr	r1, [pc, #312]	@ (800cad0 <tcp_slowtmr+0x59c>)
 800c998:	484e      	ldr	r0, [pc, #312]	@ (800cad4 <tcp_slowtmr+0x5a0>)
 800c99a:	f008 fd13 	bl	80153c4 <iprintf>
        prev->next = pcb->next;
 800c99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a0:	68da      	ldr	r2, [r3, #12]
 800c9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a4:	60da      	str	r2, [r3, #12]
 800c9a6:	e00f      	b.n	800c9c8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c9a8:	4b47      	ldr	r3, [pc, #284]	@ (800cac8 <tcp_slowtmr+0x594>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d006      	beq.n	800c9c0 <tcp_slowtmr+0x48c>
 800c9b2:	4b46      	ldr	r3, [pc, #280]	@ (800cacc <tcp_slowtmr+0x598>)
 800c9b4:	f240 5271 	movw	r2, #1393	@ 0x571
 800c9b8:	4947      	ldr	r1, [pc, #284]	@ (800cad8 <tcp_slowtmr+0x5a4>)
 800c9ba:	4846      	ldr	r0, [pc, #280]	@ (800cad4 <tcp_slowtmr+0x5a0>)
 800c9bc:	f008 fd02 	bl	80153c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	4a40      	ldr	r2, [pc, #256]	@ (800cac8 <tcp_slowtmr+0x594>)
 800c9c6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800c9c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d013      	beq.n	800c9f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c9d8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800c9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9dc:	3304      	adds	r3, #4
 800c9de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9e0:	8ad2      	ldrh	r2, [r2, #22]
 800c9e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9e4:	8b09      	ldrh	r1, [r1, #24]
 800c9e6:	9102      	str	r1, [sp, #8]
 800c9e8:	9201      	str	r2, [sp, #4]
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	4601      	mov	r1, r0
 800c9f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9f4:	f004 feaa 	bl	801174c <tcp_rst>
      err_arg = pcb->callback_arg;
 800c9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca00:	7d1b      	ldrb	r3, [r3, #20]
 800ca02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ca04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ca08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ca0e:	6838      	ldr	r0, [r7, #0]
 800ca10:	f7fe ffa0 	bl	800b954 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ca14:	4b31      	ldr	r3, [pc, #196]	@ (800cadc <tcp_slowtmr+0x5a8>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d004      	beq.n	800ca2a <tcp_slowtmr+0x4f6>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f06f 010c 	mvn.w	r1, #12
 800ca26:	68b8      	ldr	r0, [r7, #8]
 800ca28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ca2a:	4b2c      	ldr	r3, [pc, #176]	@ (800cadc <tcp_slowtmr+0x5a8>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d037      	beq.n	800caa2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ca32:	e592      	b.n	800c55a <tcp_slowtmr+0x26>
      prev = pcb;
 800ca34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca36:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ca38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ca3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca40:	7f1b      	ldrb	r3, [r3, #28]
 800ca42:	3301      	adds	r3, #1
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ca4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca4c:	7f1a      	ldrb	r2, [r3, #28]
 800ca4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca50:	7f5b      	ldrb	r3, [r3, #29]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d325      	bcc.n	800caa2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ca56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca58:	2200      	movs	r2, #0
 800ca5a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ca5c:	4b1f      	ldr	r3, [pc, #124]	@ (800cadc <tcp_slowtmr+0x5a8>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ca62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00b      	beq.n	800ca84 <tcp_slowtmr+0x550>
 800ca6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca74:	6912      	ldr	r2, [r2, #16]
 800ca76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca78:	4610      	mov	r0, r2
 800ca7a:	4798      	blx	r3
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ca82:	e002      	b.n	800ca8a <tcp_slowtmr+0x556>
 800ca84:	2300      	movs	r3, #0
 800ca86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800ca8a:	4b14      	ldr	r3, [pc, #80]	@ (800cadc <tcp_slowtmr+0x5a8>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f47f ad62 	bne.w	800c558 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ca94:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d102      	bne.n	800caa2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ca9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca9e:	f004 f8a1 	bl	8010be4 <tcp_output>
  while (pcb != NULL) {
 800caa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f47f ad5e 	bne.w	800c566 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800caae:	4b0c      	ldr	r3, [pc, #48]	@ (800cae0 <tcp_slowtmr+0x5ac>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cab4:	e069      	b.n	800cb8a <tcp_slowtmr+0x656>
 800cab6:	bf00      	nop
 800cab8:	2000bf68 	.word	0x2000bf68
 800cabc:	000a4cb8 	.word	0x000a4cb8
 800cac0:	10624dd3 	.word	0x10624dd3
 800cac4:	000124f8 	.word	0x000124f8
 800cac8:	2000bf74 	.word	0x2000bf74
 800cacc:	08017bc0 	.word	0x08017bc0
 800cad0:	08017ff8 	.word	0x08017ff8
 800cad4:	08017c04 	.word	0x08017c04
 800cad8:	08018024 	.word	0x08018024
 800cadc:	2000bf7c 	.word	0x2000bf7c
 800cae0:	2000bf78 	.word	0x2000bf78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae6:	7d1b      	ldrb	r3, [r3, #20]
 800cae8:	2b0a      	cmp	r3, #10
 800caea:	d006      	beq.n	800cafa <tcp_slowtmr+0x5c6>
 800caec:	4b2b      	ldr	r3, [pc, #172]	@ (800cb9c <tcp_slowtmr+0x668>)
 800caee:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800caf2:	492b      	ldr	r1, [pc, #172]	@ (800cba0 <tcp_slowtmr+0x66c>)
 800caf4:	482b      	ldr	r0, [pc, #172]	@ (800cba4 <tcp_slowtmr+0x670>)
 800caf6:	f008 fc65 	bl	80153c4 <iprintf>
    pcb_remove = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cb00:	4b29      	ldr	r3, [pc, #164]	@ (800cba8 <tcp_slowtmr+0x674>)
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb06:	6a1b      	ldr	r3, [r3, #32]
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	2bf0      	cmp	r3, #240	@ 0xf0
 800cb0c:	d904      	bls.n	800cb18 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800cb0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb12:	3301      	adds	r3, #1
 800cb14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cb18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d02f      	beq.n	800cb80 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cb20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb22:	f000 fbf9 	bl	800d318 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d010      	beq.n	800cb4e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cb2c:	4b1f      	ldr	r3, [pc, #124]	@ (800cbac <tcp_slowtmr+0x678>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d106      	bne.n	800cb44 <tcp_slowtmr+0x610>
 800cb36:	4b19      	ldr	r3, [pc, #100]	@ (800cb9c <tcp_slowtmr+0x668>)
 800cb38:	f240 52af 	movw	r2, #1455	@ 0x5af
 800cb3c:	491c      	ldr	r1, [pc, #112]	@ (800cbb0 <tcp_slowtmr+0x67c>)
 800cb3e:	4819      	ldr	r0, [pc, #100]	@ (800cba4 <tcp_slowtmr+0x670>)
 800cb40:	f008 fc40 	bl	80153c4 <iprintf>
        prev->next = pcb->next;
 800cb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb46:	68da      	ldr	r2, [r3, #12]
 800cb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4a:	60da      	str	r2, [r3, #12]
 800cb4c:	e00f      	b.n	800cb6e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cb4e:	4b17      	ldr	r3, [pc, #92]	@ (800cbac <tcp_slowtmr+0x678>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d006      	beq.n	800cb66 <tcp_slowtmr+0x632>
 800cb58:	4b10      	ldr	r3, [pc, #64]	@ (800cb9c <tcp_slowtmr+0x668>)
 800cb5a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800cb5e:	4915      	ldr	r1, [pc, #84]	@ (800cbb4 <tcp_slowtmr+0x680>)
 800cb60:	4810      	ldr	r0, [pc, #64]	@ (800cba4 <tcp_slowtmr+0x670>)
 800cb62:	f008 fc2f 	bl	80153c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	4a10      	ldr	r2, [pc, #64]	@ (800cbac <tcp_slowtmr+0x678>)
 800cb6c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb70:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cb78:	69f8      	ldr	r0, [r7, #28]
 800cb7a:	f7fe feeb 	bl	800b954 <tcp_free>
 800cb7e:	e004      	b.n	800cb8a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800cb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb82:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1a9      	bne.n	800cae4 <tcp_slowtmr+0x5b0>
    }
  }
}
 800cb90:	bf00      	nop
 800cb92:	bf00      	nop
 800cb94:	3730      	adds	r7, #48	@ 0x30
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bdb0      	pop	{r4, r5, r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	08017bc0 	.word	0x08017bc0
 800cba0:	08018050 	.word	0x08018050
 800cba4:	08017c04 	.word	0x08017c04
 800cba8:	2000bf68 	.word	0x2000bf68
 800cbac:	2000bf78 	.word	0x2000bf78
 800cbb0:	08018080 	.word	0x08018080
 800cbb4:	080180a8 	.word	0x080180a8

0800cbb8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cbbe:	4b2d      	ldr	r3, [pc, #180]	@ (800cc74 <tcp_fasttmr+0xbc>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	4b2b      	ldr	r3, [pc, #172]	@ (800cc74 <tcp_fasttmr+0xbc>)
 800cbc8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cbca:	4b2b      	ldr	r3, [pc, #172]	@ (800cc78 <tcp_fasttmr+0xc0>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cbd0:	e048      	b.n	800cc64 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	7f9a      	ldrb	r2, [r3, #30]
 800cbd6:	4b27      	ldr	r3, [pc, #156]	@ (800cc74 <tcp_fasttmr+0xbc>)
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d03f      	beq.n	800cc5e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cbde:	4b25      	ldr	r3, [pc, #148]	@ (800cc74 <tcp_fasttmr+0xbc>)
 800cbe0:	781a      	ldrb	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	8b5b      	ldrh	r3, [r3, #26]
 800cbea:	f003 0301 	and.w	r3, r3, #1
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d010      	beq.n	800cc14 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	8b5b      	ldrh	r3, [r3, #26]
 800cbf6:	f043 0302 	orr.w	r3, r3, #2
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f003 ffef 	bl	8010be4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	8b5b      	ldrh	r3, [r3, #26]
 800cc0a:	f023 0303 	bic.w	r3, r3, #3
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	8b5b      	ldrh	r3, [r3, #26]
 800cc18:	f003 0308 	and.w	r3, r3, #8
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d009      	beq.n	800cc34 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	8b5b      	ldrh	r3, [r3, #26]
 800cc24:	f023 0308 	bic.w	r3, r3, #8
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff f824 	bl	800bc7c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00a      	beq.n	800cc58 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cc42:	4b0e      	ldr	r3, [pc, #56]	@ (800cc7c <tcp_fasttmr+0xc4>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f819 	bl	800cc80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cc4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cc7c <tcp_fasttmr+0xc4>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d000      	beq.n	800cc58 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cc56:	e7b8      	b.n	800cbca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	607b      	str	r3, [r7, #4]
 800cc5c:	e002      	b.n	800cc64 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1b3      	bne.n	800cbd2 <tcp_fasttmr+0x1a>
    }
  }
}
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	2000bf7e 	.word	0x2000bf7e
 800cc78:	2000bf74 	.word	0x2000bf74
 800cc7c:	2000bf7c 	.word	0x2000bf7c

0800cc80 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cc80:	b590      	push	{r4, r7, lr}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d109      	bne.n	800cca2 <tcp_process_refused_data+0x22>
 800cc8e:	4b37      	ldr	r3, [pc, #220]	@ (800cd6c <tcp_process_refused_data+0xec>)
 800cc90:	f240 6209 	movw	r2, #1545	@ 0x609
 800cc94:	4936      	ldr	r1, [pc, #216]	@ (800cd70 <tcp_process_refused_data+0xf0>)
 800cc96:	4837      	ldr	r0, [pc, #220]	@ (800cd74 <tcp_process_refused_data+0xf4>)
 800cc98:	f008 fb94 	bl	80153c4 <iprintf>
 800cc9c:	f06f 030f 	mvn.w	r3, #15
 800cca0:	e060      	b.n	800cd64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cca6:	7b5b      	ldrb	r3, [r3, #13]
 800cca8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ccae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <tcp_process_refused_data+0x58>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6918      	ldr	r0, [r3, #16]
 800ccca:	2300      	movs	r3, #0
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	47a0      	blx	r4
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	73fb      	strb	r3, [r7, #15]
 800ccd6:	e007      	b.n	800cce8 <tcp_process_refused_data+0x68>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	2000      	movs	r0, #0
 800cce0:	f000 f8a4 	bl	800ce2c <tcp_recv_null>
 800cce4:	4603      	mov	r3, r0
 800cce6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d12a      	bne.n	800cd46 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ccf0:	7bbb      	ldrb	r3, [r7, #14]
 800ccf2:	f003 0320 	and.w	r3, r3, #32
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d033      	beq.n	800cd62 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ccfe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cd02:	d005      	beq.n	800cd10 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd08:	3301      	adds	r3, #1
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00b      	beq.n	800cd32 <tcp_process_refused_data+0xb2>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6918      	ldr	r0, [r3, #16]
 800cd24:	2300      	movs	r3, #0
 800cd26:	2200      	movs	r2, #0
 800cd28:	6879      	ldr	r1, [r7, #4]
 800cd2a:	47a0      	blx	r4
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	73fb      	strb	r3, [r7, #15]
 800cd30:	e001      	b.n	800cd36 <tcp_process_refused_data+0xb6>
 800cd32:	2300      	movs	r3, #0
 800cd34:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cd36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd3a:	f113 0f0d 	cmn.w	r3, #13
 800cd3e:	d110      	bne.n	800cd62 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cd40:	f06f 030c 	mvn.w	r3, #12
 800cd44:	e00e      	b.n	800cd64 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cd46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd4a:	f113 0f0d 	cmn.w	r3, #13
 800cd4e:	d102      	bne.n	800cd56 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cd50:	f06f 030c 	mvn.w	r3, #12
 800cd54:	e006      	b.n	800cd64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800cd5c:	f06f 0304 	mvn.w	r3, #4
 800cd60:	e000      	b.n	800cd64 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd90      	pop	{r4, r7, pc}
 800cd6c:	08017bc0 	.word	0x08017bc0
 800cd70:	080180d0 	.word	0x080180d0
 800cd74:	08017c04 	.word	0x08017c04

0800cd78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cd80:	e007      	b.n	800cd92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f80a 	bl	800cda2 <tcp_seg_free>
    seg = next;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1f4      	bne.n	800cd82 <tcp_segs_free+0xa>
  }
}
 800cd98:	bf00      	nop
 800cd9a:	bf00      	nop
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b082      	sub	sp, #8
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00c      	beq.n	800cdca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d004      	beq.n	800cdc2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fe fa7b 	bl	800b2b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cdc2:	6879      	ldr	r1, [r7, #4]
 800cdc4:	2003      	movs	r0, #3
 800cdc6:	f7fd fbd3 	bl	800a570 <memp_free>
  }
}
 800cdca:	bf00      	nop
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d106      	bne.n	800cdf0 <tcp_seg_copy+0x1c>
 800cde2:	4b0f      	ldr	r3, [pc, #60]	@ (800ce20 <tcp_seg_copy+0x4c>)
 800cde4:	f240 6282 	movw	r2, #1666	@ 0x682
 800cde8:	490e      	ldr	r1, [pc, #56]	@ (800ce24 <tcp_seg_copy+0x50>)
 800cdea:	480f      	ldr	r0, [pc, #60]	@ (800ce28 <tcp_seg_copy+0x54>)
 800cdec:	f008 faea 	bl	80153c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cdf0:	2003      	movs	r0, #3
 800cdf2:	f7fd fb47 	bl	800a484 <memp_malloc>
 800cdf6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d101      	bne.n	800ce02 <tcp_seg_copy+0x2e>
    return NULL;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	e00a      	b.n	800ce18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ce02:	2210      	movs	r2, #16
 800ce04:	6879      	ldr	r1, [r7, #4]
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f008 fc6d 	bl	80156e6 <memcpy>
  pbuf_ref(cseg->p);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fe faf7 	bl	800b404 <pbuf_ref>
  return cseg;
 800ce16:	68fb      	ldr	r3, [r7, #12]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3710      	adds	r7, #16
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	08017bc0 	.word	0x08017bc0
 800ce24:	08018114 	.word	0x08018114
 800ce28:	08017c04 	.word	0x08017c04

0800ce2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d109      	bne.n	800ce54 <tcp_recv_null+0x28>
 800ce40:	4b12      	ldr	r3, [pc, #72]	@ (800ce8c <tcp_recv_null+0x60>)
 800ce42:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ce46:	4912      	ldr	r1, [pc, #72]	@ (800ce90 <tcp_recv_null+0x64>)
 800ce48:	4812      	ldr	r0, [pc, #72]	@ (800ce94 <tcp_recv_null+0x68>)
 800ce4a:	f008 fabb 	bl	80153c4 <iprintf>
 800ce4e:	f06f 030f 	mvn.w	r3, #15
 800ce52:	e016      	b.n	800ce82 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d009      	beq.n	800ce6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	891b      	ldrh	r3, [r3, #8]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	68b8      	ldr	r0, [r7, #8]
 800ce62:	f7ff f9b9 	bl	800c1d8 <tcp_recved>
    pbuf_free(p);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7fe fa26 	bl	800b2b8 <pbuf_free>
 800ce6c:	e008      	b.n	800ce80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ce6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d104      	bne.n	800ce80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ce76:	68b8      	ldr	r0, [r7, #8]
 800ce78:	f7fe ff6a 	bl	800bd50 <tcp_close>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	e000      	b.n	800ce82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	08017bc0 	.word	0x08017bc0
 800ce90:	08018130 	.word	0x08018130
 800ce94:	08017c04 	.word	0x08017c04

0800ce98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	4603      	mov	r3, r0
 800cea0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	db01      	blt.n	800ceae <tcp_kill_prio+0x16>
 800ceaa:	79fb      	ldrb	r3, [r7, #7]
 800ceac:	e000      	b.n	800ceb0 <tcp_kill_prio+0x18>
 800ceae:	237f      	movs	r3, #127	@ 0x7f
 800ceb0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ceb2:	7afb      	ldrb	r3, [r7, #11]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d034      	beq.n	800cf22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ceb8:	7afb      	ldrb	r3, [r7, #11]
 800ceba:	3b01      	subs	r3, #1
 800cebc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cec6:	4b19      	ldr	r3, [pc, #100]	@ (800cf2c <tcp_kill_prio+0x94>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	e01f      	b.n	800cf0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	7d5b      	ldrb	r3, [r3, #21]
 800ced2:	7afa      	ldrb	r2, [r7, #11]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d80c      	bhi.n	800cef2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cedc:	7afa      	ldrb	r2, [r7, #11]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d112      	bne.n	800cf08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cee2:	4b13      	ldr	r3, [pc, #76]	@ (800cf30 <tcp_kill_prio+0x98>)
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d80a      	bhi.n	800cf08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cef2:	4b0f      	ldr	r3, [pc, #60]	@ (800cf30 <tcp_kill_prio+0x98>)
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	7d5b      	ldrb	r3, [r3, #21]
 800cf06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	617b      	str	r3, [r7, #20]
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1dc      	bne.n	800cece <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d004      	beq.n	800cf24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cf1a:	6938      	ldr	r0, [r7, #16]
 800cf1c:	f7ff f85e 	bl	800bfdc <tcp_abort>
 800cf20:	e000      	b.n	800cf24 <tcp_kill_prio+0x8c>
    return;
 800cf22:	bf00      	nop
  }
}
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	2000bf74 	.word	0x2000bf74
 800cf30:	2000bf68 	.word	0x2000bf68

0800cf34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	2b08      	cmp	r3, #8
 800cf42:	d009      	beq.n	800cf58 <tcp_kill_state+0x24>
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	2b09      	cmp	r3, #9
 800cf48:	d006      	beq.n	800cf58 <tcp_kill_state+0x24>
 800cf4a:	4b1a      	ldr	r3, [pc, #104]	@ (800cfb4 <tcp_kill_state+0x80>)
 800cf4c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800cf50:	4919      	ldr	r1, [pc, #100]	@ (800cfb8 <tcp_kill_state+0x84>)
 800cf52:	481a      	ldr	r0, [pc, #104]	@ (800cfbc <tcp_kill_state+0x88>)
 800cf54:	f008 fa36 	bl	80153c4 <iprintf>

  inactivity = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf60:	4b17      	ldr	r3, [pc, #92]	@ (800cfc0 <tcp_kill_state+0x8c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	617b      	str	r3, [r7, #20]
 800cf66:	e017      	b.n	800cf98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	7d1b      	ldrb	r3, [r3, #20]
 800cf6c:	79fa      	ldrb	r2, [r7, #7]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d10f      	bne.n	800cf92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cf72:	4b14      	ldr	r3, [pc, #80]	@ (800cfc4 <tcp_kill_state+0x90>)
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d807      	bhi.n	800cf92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cf82:	4b10      	ldr	r3, [pc, #64]	@ (800cfc4 <tcp_kill_state+0x90>)
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	617b      	str	r3, [r7, #20]
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1e4      	bne.n	800cf68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d003      	beq.n	800cfac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	6938      	ldr	r0, [r7, #16]
 800cfa8:	f7fe ff5a 	bl	800be60 <tcp_abandon>
  }
}
 800cfac:	bf00      	nop
 800cfae:	3718      	adds	r7, #24
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	08017bc0 	.word	0x08017bc0
 800cfb8:	0801814c 	.word	0x0801814c
 800cfbc:	08017c04 	.word	0x08017c04
 800cfc0:	2000bf74 	.word	0x2000bf74
 800cfc4:	2000bf68 	.word	0x2000bf68

0800cfc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfd6:	4b12      	ldr	r3, [pc, #72]	@ (800d020 <tcp_kill_timewait+0x58>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	e012      	b.n	800d004 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cfde:	4b11      	ldr	r3, [pc, #68]	@ (800d024 <tcp_kill_timewait+0x5c>)
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6a1b      	ldr	r3, [r3, #32]
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d807      	bhi.n	800cffe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cfee:	4b0d      	ldr	r3, [pc, #52]	@ (800d024 <tcp_kill_timewait+0x5c>)
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6a1b      	ldr	r3, [r3, #32]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	60fb      	str	r3, [r7, #12]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1e9      	bne.n	800cfde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d010:	68b8      	ldr	r0, [r7, #8]
 800d012:	f7fe ffe3 	bl	800bfdc <tcp_abort>
  }
}
 800d016:	bf00      	nop
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	2000bf78 	.word	0x2000bf78
 800d024:	2000bf68 	.word	0x2000bf68

0800d028 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d02e:	4b10      	ldr	r3, [pc, #64]	@ (800d070 <tcp_handle_closepend+0x48>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d034:	e014      	b.n	800d060 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	8b5b      	ldrh	r3, [r3, #26]
 800d040:	f003 0308 	and.w	r3, r3, #8
 800d044:	2b00      	cmp	r3, #0
 800d046:	d009      	beq.n	800d05c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	8b5b      	ldrh	r3, [r3, #26]
 800d04c:	f023 0308 	bic.w	r3, r3, #8
 800d050:	b29a      	uxth	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7fe fe10 	bl	800bc7c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e7      	bne.n	800d036 <tcp_handle_closepend+0xe>
  }
}
 800d066:	bf00      	nop
 800d068:	bf00      	nop
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	2000bf74 	.word	0x2000bf74

0800d074 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4603      	mov	r3, r0
 800d07c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d07e:	2001      	movs	r0, #1
 800d080:	f7fd fa00 	bl	800a484 <memp_malloc>
 800d084:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d126      	bne.n	800d0da <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d08c:	f7ff ffcc 	bl	800d028 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d090:	f7ff ff9a 	bl	800cfc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d094:	2001      	movs	r0, #1
 800d096:	f7fd f9f5 	bl	800a484 <memp_malloc>
 800d09a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d11b      	bne.n	800d0da <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d0a2:	2009      	movs	r0, #9
 800d0a4:	f7ff ff46 	bl	800cf34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0a8:	2001      	movs	r0, #1
 800d0aa:	f7fd f9eb 	bl	800a484 <memp_malloc>
 800d0ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d111      	bne.n	800d0da <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d0b6:	2008      	movs	r0, #8
 800d0b8:	f7ff ff3c 	bl	800cf34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0bc:	2001      	movs	r0, #1
 800d0be:	f7fd f9e1 	bl	800a484 <memp_malloc>
 800d0c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d107      	bne.n	800d0da <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d0ca:	79fb      	ldrb	r3, [r7, #7]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7ff fee3 	bl	800ce98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	f7fd f9d6 	bl	800a484 <memp_malloc>
 800d0d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d03f      	beq.n	800d160 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d0e0:	229c      	movs	r2, #156	@ 0x9c
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f008 fa20 	bl	801552a <memset>
    pcb->prio = prio;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	79fa      	ldrb	r2, [r7, #7]
 800d0ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d0f6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d100:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	22ff      	movs	r2, #255	@ 0xff
 800d10e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d116:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2206      	movs	r2, #6
 800d11c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2206      	movs	r2, #6
 800d124:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d12c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2201      	movs	r2, #1
 800d132:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d136:	4b0d      	ldr	r3, [pc, #52]	@ (800d16c <tcp_alloc+0xf8>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d13e:	4b0c      	ldr	r3, [pc, #48]	@ (800d170 <tcp_alloc+0xfc>)
 800d140:	781a      	ldrb	r2, [r3, #0]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d14c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4a08      	ldr	r2, [pc, #32]	@ (800d174 <tcp_alloc+0x100>)
 800d154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	4a07      	ldr	r2, [pc, #28]	@ (800d178 <tcp_alloc+0x104>)
 800d15c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d160:	68fb      	ldr	r3, [r7, #12]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	2000bf68 	.word	0x2000bf68
 800d170:	2000bf7e 	.word	0x2000bf7e
 800d174:	0800ce2d 	.word	0x0800ce2d
 800d178:	006ddd00 	.word	0x006ddd00

0800d17c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	4603      	mov	r3, r0
 800d184:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d186:	2040      	movs	r0, #64	@ 0x40
 800d188:	f7ff ff74 	bl	800d074 <tcp_alloc>
 800d18c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d18e:	68fb      	ldr	r3, [r7, #12]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	611a      	str	r2, [r3, #16]
  }
}
 800d1ae:	bf00      	nop
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr
	...

0800d1bc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00e      	beq.n	800d1ea <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	7d1b      	ldrb	r3, [r3, #20]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d106      	bne.n	800d1e2 <tcp_recv+0x26>
 800d1d4:	4b07      	ldr	r3, [pc, #28]	@ (800d1f4 <tcp_recv+0x38>)
 800d1d6:	f240 72df 	movw	r2, #2015	@ 0x7df
 800d1da:	4907      	ldr	r1, [pc, #28]	@ (800d1f8 <tcp_recv+0x3c>)
 800d1dc:	4807      	ldr	r0, [pc, #28]	@ (800d1fc <tcp_recv+0x40>)
 800d1de:	f008 f8f1 	bl	80153c4 <iprintf>
    pcb->recv = recv;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800d1ea:	bf00      	nop
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	08017bc0 	.word	0x08017bc0
 800d1f8:	0801815c 	.word	0x0801815c
 800d1fc:	08017c04 	.word	0x08017c04

0800d200 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00e      	beq.n	800d22e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	7d1b      	ldrb	r3, [r3, #20]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d106      	bne.n	800d226 <tcp_sent+0x26>
 800d218:	4b07      	ldr	r3, [pc, #28]	@ (800d238 <tcp_sent+0x38>)
 800d21a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800d21e:	4907      	ldr	r1, [pc, #28]	@ (800d23c <tcp_sent+0x3c>)
 800d220:	4807      	ldr	r0, [pc, #28]	@ (800d240 <tcp_sent+0x40>)
 800d222:	f008 f8cf 	bl	80153c4 <iprintf>
    pcb->sent = sent;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800d22e:	bf00      	nop
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	08017bc0 	.word	0x08017bc0
 800d23c:	08018184 	.word	0x08018184
 800d240:	08017c04 	.word	0x08017c04

0800d244 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00e      	beq.n	800d272 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7d1b      	ldrb	r3, [r3, #20]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d106      	bne.n	800d26a <tcp_err+0x26>
 800d25c:	4b07      	ldr	r3, [pc, #28]	@ (800d27c <tcp_err+0x38>)
 800d25e:	f640 020d 	movw	r2, #2061	@ 0x80d
 800d262:	4907      	ldr	r1, [pc, #28]	@ (800d280 <tcp_err+0x3c>)
 800d264:	4807      	ldr	r0, [pc, #28]	@ (800d284 <tcp_err+0x40>)
 800d266:	f008 f8ad 	bl	80153c4 <iprintf>
    pcb->errf = err;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800d272:	bf00      	nop
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	08017bc0 	.word	0x08017bc0
 800d280:	080181ac 	.word	0x080181ac
 800d284:	08017c04 	.word	0x08017c04

0800d288 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d008      	beq.n	800d2aa <tcp_accept+0x22>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7d1b      	ldrb	r3, [r3, #20]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d104      	bne.n	800d2aa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	619a      	str	r2, [r3, #24]
  }
}
 800d2aa:	bf00      	nop
 800d2ac:	3714      	adds	r7, #20
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
	...

0800d2b8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d107      	bne.n	800d2dc <tcp_poll+0x24>
 800d2cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d308 <tcp_poll+0x50>)
 800d2ce:	f640 023d 	movw	r2, #2109	@ 0x83d
 800d2d2:	490e      	ldr	r1, [pc, #56]	@ (800d30c <tcp_poll+0x54>)
 800d2d4:	480e      	ldr	r0, [pc, #56]	@ (800d310 <tcp_poll+0x58>)
 800d2d6:	f008 f875 	bl	80153c4 <iprintf>
 800d2da:	e011      	b.n	800d300 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	7d1b      	ldrb	r3, [r3, #20]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d106      	bne.n	800d2f2 <tcp_poll+0x3a>
 800d2e4:	4b08      	ldr	r3, [pc, #32]	@ (800d308 <tcp_poll+0x50>)
 800d2e6:	f640 023e 	movw	r2, #2110	@ 0x83e
 800d2ea:	490a      	ldr	r1, [pc, #40]	@ (800d314 <tcp_poll+0x5c>)
 800d2ec:	4808      	ldr	r0, [pc, #32]	@ (800d310 <tcp_poll+0x58>)
 800d2ee:	f008 f869 	bl	80153c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	79fa      	ldrb	r2, [r7, #7]
 800d2fe:	775a      	strb	r2, [r3, #29]
}
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	08017bc0 	.word	0x08017bc0
 800d30c:	080181d4 	.word	0x080181d4
 800d310:	08017c04 	.word	0x08017c04
 800d314:	080181ec 	.word	0x080181ec

0800d318 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d107      	bne.n	800d336 <tcp_pcb_purge+0x1e>
 800d326:	4b21      	ldr	r3, [pc, #132]	@ (800d3ac <tcp_pcb_purge+0x94>)
 800d328:	f640 0251 	movw	r2, #2129	@ 0x851
 800d32c:	4920      	ldr	r1, [pc, #128]	@ (800d3b0 <tcp_pcb_purge+0x98>)
 800d32e:	4821      	ldr	r0, [pc, #132]	@ (800d3b4 <tcp_pcb_purge+0x9c>)
 800d330:	f008 f848 	bl	80153c4 <iprintf>
 800d334:	e037      	b.n	800d3a6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	7d1b      	ldrb	r3, [r3, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d033      	beq.n	800d3a6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d342:	2b0a      	cmp	r3, #10
 800d344:	d02f      	beq.n	800d3a6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d02b      	beq.n	800d3a6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d352:	2b00      	cmp	r3, #0
 800d354:	d007      	beq.n	800d366 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fd ffac 	bl	800b2b8 <pbuf_free>
      pcb->refused_data = NULL;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d002      	beq.n	800d374 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f986 	bl	800d680 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d37a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d380:	4618      	mov	r0, r3
 800d382:	f7ff fcf9 	bl	800cd78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff fcf4 	bl	800cd78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	08017bc0 	.word	0x08017bc0
 800d3b0:	0801820c 	.word	0x0801820c
 800d3b4:	08017c04 	.word	0x08017c04

0800d3b8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d106      	bne.n	800d3d6 <tcp_pcb_remove+0x1e>
 800d3c8:	4b3e      	ldr	r3, [pc, #248]	@ (800d4c4 <tcp_pcb_remove+0x10c>)
 800d3ca:	f640 0283 	movw	r2, #2179	@ 0x883
 800d3ce:	493e      	ldr	r1, [pc, #248]	@ (800d4c8 <tcp_pcb_remove+0x110>)
 800d3d0:	483e      	ldr	r0, [pc, #248]	@ (800d4cc <tcp_pcb_remove+0x114>)
 800d3d2:	f007 fff7 	bl	80153c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d106      	bne.n	800d3ea <tcp_pcb_remove+0x32>
 800d3dc:	4b39      	ldr	r3, [pc, #228]	@ (800d4c4 <tcp_pcb_remove+0x10c>)
 800d3de:	f640 0284 	movw	r2, #2180	@ 0x884
 800d3e2:	493b      	ldr	r1, [pc, #236]	@ (800d4d0 <tcp_pcb_remove+0x118>)
 800d3e4:	4839      	ldr	r0, [pc, #228]	@ (800d4cc <tcp_pcb_remove+0x114>)
 800d3e6:	f007 ffed 	bl	80153c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d105      	bne.n	800d400 <tcp_pcb_remove+0x48>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	68da      	ldr	r2, [r3, #12]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	e013      	b.n	800d428 <tcp_pcb_remove+0x70>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	60fb      	str	r3, [r7, #12]
 800d406:	e00c      	b.n	800d422 <tcp_pcb_remove+0x6a>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	683a      	ldr	r2, [r7, #0]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d104      	bne.n	800d41c <tcp_pcb_remove+0x64>
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	68da      	ldr	r2, [r3, #12]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	60da      	str	r2, [r3, #12]
 800d41a:	e005      	b.n	800d428 <tcp_pcb_remove+0x70>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	60fb      	str	r3, [r7, #12]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d1ef      	bne.n	800d408 <tcp_pcb_remove+0x50>
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	2200      	movs	r2, #0
 800d42c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d42e:	6838      	ldr	r0, [r7, #0]
 800d430:	f7ff ff72 	bl	800d318 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	7d1b      	ldrb	r3, [r3, #20]
 800d438:	2b0a      	cmp	r3, #10
 800d43a:	d013      	beq.n	800d464 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d440:	2b01      	cmp	r3, #1
 800d442:	d00f      	beq.n	800d464 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	8b5b      	ldrh	r3, [r3, #26]
 800d448:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d009      	beq.n	800d464 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	8b5b      	ldrh	r3, [r3, #26]
 800d454:	f043 0302 	orr.w	r3, r3, #2
 800d458:	b29a      	uxth	r2, r3
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d45e:	6838      	ldr	r0, [r7, #0]
 800d460:	f003 fbc0 	bl	8010be4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	7d1b      	ldrb	r3, [r3, #20]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d020      	beq.n	800d4ae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d470:	2b00      	cmp	r3, #0
 800d472:	d006      	beq.n	800d482 <tcp_pcb_remove+0xca>
 800d474:	4b13      	ldr	r3, [pc, #76]	@ (800d4c4 <tcp_pcb_remove+0x10c>)
 800d476:	f640 0293 	movw	r2, #2195	@ 0x893
 800d47a:	4916      	ldr	r1, [pc, #88]	@ (800d4d4 <tcp_pcb_remove+0x11c>)
 800d47c:	4813      	ldr	r0, [pc, #76]	@ (800d4cc <tcp_pcb_remove+0x114>)
 800d47e:	f007 ffa1 	bl	80153c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <tcp_pcb_remove+0xe0>
 800d48a:	4b0e      	ldr	r3, [pc, #56]	@ (800d4c4 <tcp_pcb_remove+0x10c>)
 800d48c:	f640 0294 	movw	r2, #2196	@ 0x894
 800d490:	4911      	ldr	r1, [pc, #68]	@ (800d4d8 <tcp_pcb_remove+0x120>)
 800d492:	480e      	ldr	r0, [pc, #56]	@ (800d4cc <tcp_pcb_remove+0x114>)
 800d494:	f007 ff96 	bl	80153c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d006      	beq.n	800d4ae <tcp_pcb_remove+0xf6>
 800d4a0:	4b08      	ldr	r3, [pc, #32]	@ (800d4c4 <tcp_pcb_remove+0x10c>)
 800d4a2:	f640 0296 	movw	r2, #2198	@ 0x896
 800d4a6:	490d      	ldr	r1, [pc, #52]	@ (800d4dc <tcp_pcb_remove+0x124>)
 800d4a8:	4808      	ldr	r0, [pc, #32]	@ (800d4cc <tcp_pcb_remove+0x114>)
 800d4aa:	f007 ff8b 	bl	80153c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d4ba:	bf00      	nop
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	08017bc0 	.word	0x08017bc0
 800d4c8:	08018228 	.word	0x08018228
 800d4cc:	08017c04 	.word	0x08017c04
 800d4d0:	08018244 	.word	0x08018244
 800d4d4:	08018264 	.word	0x08018264
 800d4d8:	0801827c 	.word	0x0801827c
 800d4dc:	08018298 	.word	0x08018298

0800d4e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d106      	bne.n	800d4fc <tcp_next_iss+0x1c>
 800d4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d518 <tcp_next_iss+0x38>)
 800d4f0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d4f4:	4909      	ldr	r1, [pc, #36]	@ (800d51c <tcp_next_iss+0x3c>)
 800d4f6:	480a      	ldr	r0, [pc, #40]	@ (800d520 <tcp_next_iss+0x40>)
 800d4f8:	f007 ff64 	bl	80153c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d4fc:	4b09      	ldr	r3, [pc, #36]	@ (800d524 <tcp_next_iss+0x44>)
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	4b09      	ldr	r3, [pc, #36]	@ (800d528 <tcp_next_iss+0x48>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4413      	add	r3, r2
 800d506:	4a07      	ldr	r2, [pc, #28]	@ (800d524 <tcp_next_iss+0x44>)
 800d508:	6013      	str	r3, [r2, #0]
  return iss;
 800d50a:	4b06      	ldr	r3, [pc, #24]	@ (800d524 <tcp_next_iss+0x44>)
 800d50c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	08017bc0 	.word	0x08017bc0
 800d51c:	080182b0 	.word	0x080182b0
 800d520:	08017c04 	.word	0x08017c04
 800d524:	20000028 	.word	0x20000028
 800d528:	2000bf68 	.word	0x2000bf68

0800d52c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	4603      	mov	r3, r0
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d106      	bne.n	800d54e <tcp_eff_send_mss_netif+0x22>
 800d540:	4b14      	ldr	r3, [pc, #80]	@ (800d594 <tcp_eff_send_mss_netif+0x68>)
 800d542:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d546:	4914      	ldr	r1, [pc, #80]	@ (800d598 <tcp_eff_send_mss_netif+0x6c>)
 800d548:	4814      	ldr	r0, [pc, #80]	@ (800d59c <tcp_eff_send_mss_netif+0x70>)
 800d54a:	f007 ff3b 	bl	80153c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d554:	89fb      	ldrh	r3, [r7, #14]
 800d556:	e019      	b.n	800d58c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d55c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d55e:	8afb      	ldrh	r3, [r7, #22]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d012      	beq.n	800d58a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d564:	2328      	movs	r3, #40	@ 0x28
 800d566:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d568:	8afa      	ldrh	r2, [r7, #22]
 800d56a:	8abb      	ldrh	r3, [r7, #20]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d904      	bls.n	800d57a <tcp_eff_send_mss_netif+0x4e>
 800d570:	8afa      	ldrh	r2, [r7, #22]
 800d572:	8abb      	ldrh	r3, [r7, #20]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	b29b      	uxth	r3, r3
 800d578:	e000      	b.n	800d57c <tcp_eff_send_mss_netif+0x50>
 800d57a:	2300      	movs	r3, #0
 800d57c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d57e:	8a7a      	ldrh	r2, [r7, #18]
 800d580:	89fb      	ldrh	r3, [r7, #14]
 800d582:	4293      	cmp	r3, r2
 800d584:	bf28      	it	cs
 800d586:	4613      	movcs	r3, r2
 800d588:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d58a:	89fb      	ldrh	r3, [r7, #14]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	08017bc0 	.word	0x08017bc0
 800d598:	080182cc 	.word	0x080182cc
 800d59c:	08017c04 	.word	0x08017c04

0800d5a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d119      	bne.n	800d5e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d5b4:	4b10      	ldr	r3, [pc, #64]	@ (800d5f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d5b6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d5ba:	4910      	ldr	r1, [pc, #64]	@ (800d5fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d5bc:	4810      	ldr	r0, [pc, #64]	@ (800d600 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d5be:	f007 ff01 	bl	80153c4 <iprintf>

  while (pcb != NULL) {
 800d5c2:	e011      	b.n	800d5e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d108      	bne.n	800d5e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f7fe fd00 	bl	800bfdc <tcp_abort>
      pcb = next;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	60fb      	str	r3, [r7, #12]
 800d5e0:	e002      	b.n	800d5e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1ea      	bne.n	800d5c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d5ee:	bf00      	nop
 800d5f0:	bf00      	nop
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	08017bc0 	.word	0x08017bc0
 800d5fc:	080182f4 	.word	0x080182f4
 800d600:	08017c04 	.word	0x08017c04

0800d604 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d02a      	beq.n	800d66a <tcp_netif_ip_addr_changed+0x66>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d026      	beq.n	800d66a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d61c:	4b15      	ldr	r3, [pc, #84]	@ (800d674 <tcp_netif_ip_addr_changed+0x70>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4619      	mov	r1, r3
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7ff ffbc 	bl	800d5a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d628:	4b13      	ldr	r3, [pc, #76]	@ (800d678 <tcp_netif_ip_addr_changed+0x74>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7ff ffb6 	bl	800d5a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d017      	beq.n	800d66a <tcp_netif_ip_addr_changed+0x66>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d013      	beq.n	800d66a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d642:	4b0e      	ldr	r3, [pc, #56]	@ (800d67c <tcp_netif_ip_addr_changed+0x78>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e00c      	b.n	800d664 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	429a      	cmp	r2, r3
 800d654:	d103      	bne.n	800d65e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	60fb      	str	r3, [r7, #12]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1ef      	bne.n	800d64a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d66a:	bf00      	nop
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	2000bf74 	.word	0x2000bf74
 800d678:	2000bf6c 	.word	0x2000bf6c
 800d67c:	2000bf70 	.word	0x2000bf70

0800d680 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d007      	beq.n	800d6a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fb6f 	bl	800cd78 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b08d      	sub	sp, #52	@ 0x34
 800d6ac:	af04      	add	r7, sp, #16
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d105      	bne.n	800d6c4 <tcp_input+0x1c>
 800d6b8:	4b9b      	ldr	r3, [pc, #620]	@ (800d928 <tcp_input+0x280>)
 800d6ba:	2283      	movs	r2, #131	@ 0x83
 800d6bc:	499b      	ldr	r1, [pc, #620]	@ (800d92c <tcp_input+0x284>)
 800d6be:	489c      	ldr	r0, [pc, #624]	@ (800d930 <tcp_input+0x288>)
 800d6c0:	f007 fe80 	bl	80153c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	4a9a      	ldr	r2, [pc, #616]	@ (800d934 <tcp_input+0x28c>)
 800d6ca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	895b      	ldrh	r3, [r3, #10]
 800d6d0:	2b13      	cmp	r3, #19
 800d6d2:	f240 83d1 	bls.w	800de78 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6d6:	4b98      	ldr	r3, [pc, #608]	@ (800d938 <tcp_input+0x290>)
 800d6d8:	695b      	ldr	r3, [r3, #20]
 800d6da:	4a97      	ldr	r2, [pc, #604]	@ (800d938 <tcp_input+0x290>)
 800d6dc:	6812      	ldr	r2, [r2, #0]
 800d6de:	4611      	mov	r1, r2
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f006 fc37 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f040 83c7 	bne.w	800de7c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d6ee:	4b92      	ldr	r3, [pc, #584]	@ (800d938 <tcp_input+0x290>)
 800d6f0:	695b      	ldr	r3, [r3, #20]
 800d6f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6f6:	2be0      	cmp	r3, #224	@ 0xe0
 800d6f8:	f000 83c0 	beq.w	800de7c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d6fc:	4b8d      	ldr	r3, [pc, #564]	@ (800d934 <tcp_input+0x28c>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	899b      	ldrh	r3, [r3, #12]
 800d702:	b29b      	uxth	r3, r3
 800d704:	4618      	mov	r0, r3
 800d706:	f7fc f9e9 	bl	8009adc <lwip_htons>
 800d70a:	4603      	mov	r3, r0
 800d70c:	0b1b      	lsrs	r3, r3, #12
 800d70e:	b29b      	uxth	r3, r3
 800d710:	b2db      	uxtb	r3, r3
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d716:	7cbb      	ldrb	r3, [r7, #18]
 800d718:	2b13      	cmp	r3, #19
 800d71a:	f240 83b1 	bls.w	800de80 <tcp_input+0x7d8>
 800d71e:	7cbb      	ldrb	r3, [r7, #18]
 800d720:	b29a      	uxth	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	891b      	ldrh	r3, [r3, #8]
 800d726:	429a      	cmp	r2, r3
 800d728:	f200 83aa 	bhi.w	800de80 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d72c:	7cbb      	ldrb	r3, [r7, #18]
 800d72e:	b29b      	uxth	r3, r3
 800d730:	3b14      	subs	r3, #20
 800d732:	b29a      	uxth	r2, r3
 800d734:	4b81      	ldr	r3, [pc, #516]	@ (800d93c <tcp_input+0x294>)
 800d736:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d738:	4b81      	ldr	r3, [pc, #516]	@ (800d940 <tcp_input+0x298>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	895a      	ldrh	r2, [r3, #10]
 800d742:	7cbb      	ldrb	r3, [r7, #18]
 800d744:	b29b      	uxth	r3, r3
 800d746:	429a      	cmp	r2, r3
 800d748:	d309      	bcc.n	800d75e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d74a:	4b7c      	ldr	r3, [pc, #496]	@ (800d93c <tcp_input+0x294>)
 800d74c:	881a      	ldrh	r2, [r3, #0]
 800d74e:	4b7d      	ldr	r3, [pc, #500]	@ (800d944 <tcp_input+0x29c>)
 800d750:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d752:	7cbb      	ldrb	r3, [r7, #18]
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7fd fd28 	bl	800b1ac <pbuf_remove_header>
 800d75c:	e04e      	b.n	800d7fc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d105      	bne.n	800d772 <tcp_input+0xca>
 800d766:	4b70      	ldr	r3, [pc, #448]	@ (800d928 <tcp_input+0x280>)
 800d768:	22c2      	movs	r2, #194	@ 0xc2
 800d76a:	4977      	ldr	r1, [pc, #476]	@ (800d948 <tcp_input+0x2a0>)
 800d76c:	4870      	ldr	r0, [pc, #448]	@ (800d930 <tcp_input+0x288>)
 800d76e:	f007 fe29 	bl	80153c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d772:	2114      	movs	r1, #20
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7fd fd19 	bl	800b1ac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	895a      	ldrh	r2, [r3, #10]
 800d77e:	4b71      	ldr	r3, [pc, #452]	@ (800d944 <tcp_input+0x29c>)
 800d780:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d782:	4b6e      	ldr	r3, [pc, #440]	@ (800d93c <tcp_input+0x294>)
 800d784:	881a      	ldrh	r2, [r3, #0]
 800d786:	4b6f      	ldr	r3, [pc, #444]	@ (800d944 <tcp_input+0x29c>)
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	1ad3      	subs	r3, r2, r3
 800d78c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d78e:	4b6d      	ldr	r3, [pc, #436]	@ (800d944 <tcp_input+0x29c>)
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7fd fd09 	bl	800b1ac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	895b      	ldrh	r3, [r3, #10]
 800d7a0:	8a3a      	ldrh	r2, [r7, #16]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	f200 836e 	bhi.w	800de84 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	4a64      	ldr	r2, [pc, #400]	@ (800d940 <tcp_input+0x298>)
 800d7b0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	8a3a      	ldrh	r2, [r7, #16]
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fd fcf6 	bl	800b1ac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	891a      	ldrh	r2, [r3, #8]
 800d7c4:	8a3b      	ldrh	r3, [r7, #16]
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	895b      	ldrh	r3, [r3, #10]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d005      	beq.n	800d7e2 <tcp_input+0x13a>
 800d7d6:	4b54      	ldr	r3, [pc, #336]	@ (800d928 <tcp_input+0x280>)
 800d7d8:	22df      	movs	r2, #223	@ 0xdf
 800d7da:	495c      	ldr	r1, [pc, #368]	@ (800d94c <tcp_input+0x2a4>)
 800d7dc:	4854      	ldr	r0, [pc, #336]	@ (800d930 <tcp_input+0x288>)
 800d7de:	f007 fdf1 	bl	80153c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	891a      	ldrh	r2, [r3, #8]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	891b      	ldrh	r3, [r3, #8]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d005      	beq.n	800d7fc <tcp_input+0x154>
 800d7f0:	4b4d      	ldr	r3, [pc, #308]	@ (800d928 <tcp_input+0x280>)
 800d7f2:	22e0      	movs	r2, #224	@ 0xe0
 800d7f4:	4956      	ldr	r1, [pc, #344]	@ (800d950 <tcp_input+0x2a8>)
 800d7f6:	484e      	ldr	r0, [pc, #312]	@ (800d930 <tcp_input+0x288>)
 800d7f8:	f007 fde4 	bl	80153c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d7fc:	4b4d      	ldr	r3, [pc, #308]	@ (800d934 <tcp_input+0x28c>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	881b      	ldrh	r3, [r3, #0]
 800d802:	b29b      	uxth	r3, r3
 800d804:	4a4b      	ldr	r2, [pc, #300]	@ (800d934 <tcp_input+0x28c>)
 800d806:	6814      	ldr	r4, [r2, #0]
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fc f967 	bl	8009adc <lwip_htons>
 800d80e:	4603      	mov	r3, r0
 800d810:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d812:	4b48      	ldr	r3, [pc, #288]	@ (800d934 <tcp_input+0x28c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	885b      	ldrh	r3, [r3, #2]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	4a46      	ldr	r2, [pc, #280]	@ (800d934 <tcp_input+0x28c>)
 800d81c:	6814      	ldr	r4, [r2, #0]
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fc f95c 	bl	8009adc <lwip_htons>
 800d824:	4603      	mov	r3, r0
 800d826:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d828:	4b42      	ldr	r3, [pc, #264]	@ (800d934 <tcp_input+0x28c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	4a41      	ldr	r2, [pc, #260]	@ (800d934 <tcp_input+0x28c>)
 800d830:	6814      	ldr	r4, [r2, #0]
 800d832:	4618      	mov	r0, r3
 800d834:	f7fc f967 	bl	8009b06 <lwip_htonl>
 800d838:	4603      	mov	r3, r0
 800d83a:	6063      	str	r3, [r4, #4]
 800d83c:	6863      	ldr	r3, [r4, #4]
 800d83e:	4a45      	ldr	r2, [pc, #276]	@ (800d954 <tcp_input+0x2ac>)
 800d840:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d842:	4b3c      	ldr	r3, [pc, #240]	@ (800d934 <tcp_input+0x28c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	4a3a      	ldr	r2, [pc, #232]	@ (800d934 <tcp_input+0x28c>)
 800d84a:	6814      	ldr	r4, [r2, #0]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fc f95a 	bl	8009b06 <lwip_htonl>
 800d852:	4603      	mov	r3, r0
 800d854:	60a3      	str	r3, [r4, #8]
 800d856:	68a3      	ldr	r3, [r4, #8]
 800d858:	4a3f      	ldr	r2, [pc, #252]	@ (800d958 <tcp_input+0x2b0>)
 800d85a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d85c:	4b35      	ldr	r3, [pc, #212]	@ (800d934 <tcp_input+0x28c>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	89db      	ldrh	r3, [r3, #14]
 800d862:	b29b      	uxth	r3, r3
 800d864:	4a33      	ldr	r2, [pc, #204]	@ (800d934 <tcp_input+0x28c>)
 800d866:	6814      	ldr	r4, [r2, #0]
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fc f937 	bl	8009adc <lwip_htons>
 800d86e:	4603      	mov	r3, r0
 800d870:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d872:	4b30      	ldr	r3, [pc, #192]	@ (800d934 <tcp_input+0x28c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	899b      	ldrh	r3, [r3, #12]
 800d878:	b29b      	uxth	r3, r3
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fc f92e 	bl	8009adc <lwip_htons>
 800d880:	4603      	mov	r3, r0
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	4b34      	ldr	r3, [pc, #208]	@ (800d95c <tcp_input+0x2b4>)
 800d88c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	891a      	ldrh	r2, [r3, #8]
 800d892:	4b33      	ldr	r3, [pc, #204]	@ (800d960 <tcp_input+0x2b8>)
 800d894:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d896:	4b31      	ldr	r3, [pc, #196]	@ (800d95c <tcp_input+0x2b4>)
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	f003 0303 	and.w	r3, r3, #3
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00c      	beq.n	800d8bc <tcp_input+0x214>
    tcplen++;
 800d8a2:	4b2f      	ldr	r3, [pc, #188]	@ (800d960 <tcp_input+0x2b8>)
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	4b2d      	ldr	r3, [pc, #180]	@ (800d960 <tcp_input+0x2b8>)
 800d8ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	891a      	ldrh	r2, [r3, #8]
 800d8b2:	4b2b      	ldr	r3, [pc, #172]	@ (800d960 <tcp_input+0x2b8>)
 800d8b4:	881b      	ldrh	r3, [r3, #0]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	f200 82e6 	bhi.w	800de88 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8c0:	4b28      	ldr	r3, [pc, #160]	@ (800d964 <tcp_input+0x2bc>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	61fb      	str	r3, [r7, #28]
 800d8c6:	e09d      	b.n	800da04 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	7d1b      	ldrb	r3, [r3, #20]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d105      	bne.n	800d8dc <tcp_input+0x234>
 800d8d0:	4b15      	ldr	r3, [pc, #84]	@ (800d928 <tcp_input+0x280>)
 800d8d2:	22fb      	movs	r2, #251	@ 0xfb
 800d8d4:	4924      	ldr	r1, [pc, #144]	@ (800d968 <tcp_input+0x2c0>)
 800d8d6:	4816      	ldr	r0, [pc, #88]	@ (800d930 <tcp_input+0x288>)
 800d8d8:	f007 fd74 	bl	80153c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	7d1b      	ldrb	r3, [r3, #20]
 800d8e0:	2b0a      	cmp	r3, #10
 800d8e2:	d105      	bne.n	800d8f0 <tcp_input+0x248>
 800d8e4:	4b10      	ldr	r3, [pc, #64]	@ (800d928 <tcp_input+0x280>)
 800d8e6:	22fc      	movs	r2, #252	@ 0xfc
 800d8e8:	4920      	ldr	r1, [pc, #128]	@ (800d96c <tcp_input+0x2c4>)
 800d8ea:	4811      	ldr	r0, [pc, #68]	@ (800d930 <tcp_input+0x288>)
 800d8ec:	f007 fd6a 	bl	80153c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	7d1b      	ldrb	r3, [r3, #20]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d105      	bne.n	800d904 <tcp_input+0x25c>
 800d8f8:	4b0b      	ldr	r3, [pc, #44]	@ (800d928 <tcp_input+0x280>)
 800d8fa:	22fd      	movs	r2, #253	@ 0xfd
 800d8fc:	491c      	ldr	r1, [pc, #112]	@ (800d970 <tcp_input+0x2c8>)
 800d8fe:	480c      	ldr	r0, [pc, #48]	@ (800d930 <tcp_input+0x288>)
 800d900:	f007 fd60 	bl	80153c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	7a1b      	ldrb	r3, [r3, #8]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d033      	beq.n	800d974 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	7a1a      	ldrb	r2, [r3, #8]
 800d910:	4b09      	ldr	r3, [pc, #36]	@ (800d938 <tcp_input+0x290>)
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d918:	3301      	adds	r3, #1
 800d91a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d029      	beq.n	800d974 <tcp_input+0x2cc>
      prev = pcb;
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	61bb      	str	r3, [r7, #24]
      continue;
 800d924:	e06b      	b.n	800d9fe <tcp_input+0x356>
 800d926:	bf00      	nop
 800d928:	08018328 	.word	0x08018328
 800d92c:	0801835c 	.word	0x0801835c
 800d930:	08018374 	.word	0x08018374
 800d934:	2000bf90 	.word	0x2000bf90
 800d938:	20008e68 	.word	0x20008e68
 800d93c:	2000bf94 	.word	0x2000bf94
 800d940:	2000bf98 	.word	0x2000bf98
 800d944:	2000bf96 	.word	0x2000bf96
 800d948:	0801839c 	.word	0x0801839c
 800d94c:	080183ac 	.word	0x080183ac
 800d950:	080183b8 	.word	0x080183b8
 800d954:	2000bfa0 	.word	0x2000bfa0
 800d958:	2000bfa4 	.word	0x2000bfa4
 800d95c:	2000bfac 	.word	0x2000bfac
 800d960:	2000bfaa 	.word	0x2000bfaa
 800d964:	2000bf74 	.word	0x2000bf74
 800d968:	080183d8 	.word	0x080183d8
 800d96c:	08018400 	.word	0x08018400
 800d970:	0801842c 	.word	0x0801842c
    }

    if (pcb->remote_port == tcphdr->src &&
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	8b1a      	ldrh	r2, [r3, #24]
 800d978:	4b72      	ldr	r3, [pc, #456]	@ (800db44 <tcp_input+0x49c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	429a      	cmp	r2, r3
 800d982:	d13a      	bne.n	800d9fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	8ada      	ldrh	r2, [r3, #22]
 800d988:	4b6e      	ldr	r3, [pc, #440]	@ (800db44 <tcp_input+0x49c>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	885b      	ldrh	r3, [r3, #2]
 800d98e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d990:	429a      	cmp	r2, r3
 800d992:	d132      	bne.n	800d9fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	685a      	ldr	r2, [r3, #4]
 800d998:	4b6b      	ldr	r3, [pc, #428]	@ (800db48 <tcp_input+0x4a0>)
 800d99a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d12c      	bne.n	800d9fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	4b68      	ldr	r3, [pc, #416]	@ (800db48 <tcp_input+0x4a0>)
 800d9a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d126      	bne.n	800d9fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	69fa      	ldr	r2, [r7, #28]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d106      	bne.n	800d9c4 <tcp_input+0x31c>
 800d9b6:	4b65      	ldr	r3, [pc, #404]	@ (800db4c <tcp_input+0x4a4>)
 800d9b8:	f240 120d 	movw	r2, #269	@ 0x10d
 800d9bc:	4964      	ldr	r1, [pc, #400]	@ (800db50 <tcp_input+0x4a8>)
 800d9be:	4865      	ldr	r0, [pc, #404]	@ (800db54 <tcp_input+0x4ac>)
 800d9c0:	f007 fd00 	bl	80153c4 <iprintf>
      if (prev != NULL) {
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00a      	beq.n	800d9e0 <tcp_input+0x338>
        prev->next = pcb->next;
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	68da      	ldr	r2, [r3, #12]
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d9d2:	4b61      	ldr	r3, [pc, #388]	@ (800db58 <tcp_input+0x4b0>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d9da:	4a5f      	ldr	r2, [pc, #380]	@ (800db58 <tcp_input+0x4b0>)
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	69fa      	ldr	r2, [r7, #28]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d111      	bne.n	800da0e <tcp_input+0x366>
 800d9ea:	4b58      	ldr	r3, [pc, #352]	@ (800db4c <tcp_input+0x4a4>)
 800d9ec:	f240 1215 	movw	r2, #277	@ 0x115
 800d9f0:	495a      	ldr	r1, [pc, #360]	@ (800db5c <tcp_input+0x4b4>)
 800d9f2:	4858      	ldr	r0, [pc, #352]	@ (800db54 <tcp_input+0x4ac>)
 800d9f4:	f007 fce6 	bl	80153c4 <iprintf>
      break;
 800d9f8:	e009      	b.n	800da0e <tcp_input+0x366>
    }
    prev = pcb;
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	61fb      	str	r3, [r7, #28]
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f47f af5e 	bne.w	800d8c8 <tcp_input+0x220>
 800da0c:	e000      	b.n	800da10 <tcp_input+0x368>
      break;
 800da0e:	bf00      	nop
  }

  if (pcb == NULL) {
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	2b00      	cmp	r3, #0
 800da14:	f040 80aa 	bne.w	800db6c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da18:	4b51      	ldr	r3, [pc, #324]	@ (800db60 <tcp_input+0x4b8>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	61fb      	str	r3, [r7, #28]
 800da1e:	e03f      	b.n	800daa0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	7d1b      	ldrb	r3, [r3, #20]
 800da24:	2b0a      	cmp	r3, #10
 800da26:	d006      	beq.n	800da36 <tcp_input+0x38e>
 800da28:	4b48      	ldr	r3, [pc, #288]	@ (800db4c <tcp_input+0x4a4>)
 800da2a:	f240 121f 	movw	r2, #287	@ 0x11f
 800da2e:	494d      	ldr	r1, [pc, #308]	@ (800db64 <tcp_input+0x4bc>)
 800da30:	4848      	ldr	r0, [pc, #288]	@ (800db54 <tcp_input+0x4ac>)
 800da32:	f007 fcc7 	bl	80153c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	7a1b      	ldrb	r3, [r3, #8]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d009      	beq.n	800da52 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	7a1a      	ldrb	r2, [r3, #8]
 800da42:	4b41      	ldr	r3, [pc, #260]	@ (800db48 <tcp_input+0x4a0>)
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da4a:	3301      	adds	r3, #1
 800da4c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da4e:	429a      	cmp	r2, r3
 800da50:	d122      	bne.n	800da98 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	8b1a      	ldrh	r2, [r3, #24]
 800da56:	4b3b      	ldr	r3, [pc, #236]	@ (800db44 <tcp_input+0x49c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	429a      	cmp	r2, r3
 800da60:	d11b      	bne.n	800da9a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	8ada      	ldrh	r2, [r3, #22]
 800da66:	4b37      	ldr	r3, [pc, #220]	@ (800db44 <tcp_input+0x49c>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	885b      	ldrh	r3, [r3, #2]
 800da6c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800da6e:	429a      	cmp	r2, r3
 800da70:	d113      	bne.n	800da9a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	685a      	ldr	r2, [r3, #4]
 800da76:	4b34      	ldr	r3, [pc, #208]	@ (800db48 <tcp_input+0x4a0>)
 800da78:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d10d      	bne.n	800da9a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	4b31      	ldr	r3, [pc, #196]	@ (800db48 <tcp_input+0x4a0>)
 800da84:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da86:	429a      	cmp	r2, r3
 800da88:	d107      	bne.n	800da9a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800da8a:	69f8      	ldr	r0, [r7, #28]
 800da8c:	f000 fb56 	bl	800e13c <tcp_timewait_input>
        }
        pbuf_free(p);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7fd fc11 	bl	800b2b8 <pbuf_free>
        return;
 800da96:	e1fd      	b.n	800de94 <tcp_input+0x7ec>
        continue;
 800da98:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	61fb      	str	r3, [r7, #28]
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1bc      	bne.n	800da20 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800daa6:	2300      	movs	r3, #0
 800daa8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800daaa:	4b2f      	ldr	r3, [pc, #188]	@ (800db68 <tcp_input+0x4c0>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	617b      	str	r3, [r7, #20]
 800dab0:	e02a      	b.n	800db08 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	7a1b      	ldrb	r3, [r3, #8]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00c      	beq.n	800dad4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	7a1a      	ldrb	r2, [r3, #8]
 800dabe:	4b22      	ldr	r3, [pc, #136]	@ (800db48 <tcp_input+0x4a0>)
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dac6:	3301      	adds	r3, #1
 800dac8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800daca:	429a      	cmp	r2, r3
 800dacc:	d002      	beq.n	800dad4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	61bb      	str	r3, [r7, #24]
        continue;
 800dad2:	e016      	b.n	800db02 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	8ada      	ldrh	r2, [r3, #22]
 800dad8:	4b1a      	ldr	r3, [pc, #104]	@ (800db44 <tcp_input+0x49c>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	885b      	ldrh	r3, [r3, #2]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d10c      	bne.n	800dafe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	4b17      	ldr	r3, [pc, #92]	@ (800db48 <tcp_input+0x4a0>)
 800daea:	695b      	ldr	r3, [r3, #20]
 800daec:	429a      	cmp	r2, r3
 800daee:	d00f      	beq.n	800db10 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00d      	beq.n	800db12 <tcp_input+0x46a>
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d009      	beq.n	800db12 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	617b      	str	r3, [r7, #20]
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1d1      	bne.n	800dab2 <tcp_input+0x40a>
 800db0e:	e000      	b.n	800db12 <tcp_input+0x46a>
            break;
 800db10:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d029      	beq.n	800db6c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00a      	beq.n	800db34 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	68da      	ldr	r2, [r3, #12]
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800db26:	4b10      	ldr	r3, [pc, #64]	@ (800db68 <tcp_input+0x4c0>)
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800db2e:	4a0e      	ldr	r2, [pc, #56]	@ (800db68 <tcp_input+0x4c0>)
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800db34:	6978      	ldr	r0, [r7, #20]
 800db36:	f000 fa03 	bl	800df40 <tcp_listen_input>
      }
      pbuf_free(p);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7fd fbbc 	bl	800b2b8 <pbuf_free>
      return;
 800db40:	e1a8      	b.n	800de94 <tcp_input+0x7ec>
 800db42:	bf00      	nop
 800db44:	2000bf90 	.word	0x2000bf90
 800db48:	20008e68 	.word	0x20008e68
 800db4c:	08018328 	.word	0x08018328
 800db50:	08018454 	.word	0x08018454
 800db54:	08018374 	.word	0x08018374
 800db58:	2000bf74 	.word	0x2000bf74
 800db5c:	08018480 	.word	0x08018480
 800db60:	2000bf78 	.word	0x2000bf78
 800db64:	080184ac 	.word	0x080184ac
 800db68:	2000bf70 	.word	0x2000bf70
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f000 8158 	beq.w	800de24 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800db74:	4b95      	ldr	r3, [pc, #596]	@ (800ddcc <tcp_input+0x724>)
 800db76:	2200      	movs	r2, #0
 800db78:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	891a      	ldrh	r2, [r3, #8]
 800db7e:	4b93      	ldr	r3, [pc, #588]	@ (800ddcc <tcp_input+0x724>)
 800db80:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800db82:	4a92      	ldr	r2, [pc, #584]	@ (800ddcc <tcp_input+0x724>)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800db88:	4b91      	ldr	r3, [pc, #580]	@ (800ddd0 <tcp_input+0x728>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a8f      	ldr	r2, [pc, #572]	@ (800ddcc <tcp_input+0x724>)
 800db8e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800db90:	4b90      	ldr	r3, [pc, #576]	@ (800ddd4 <tcp_input+0x72c>)
 800db92:	2200      	movs	r2, #0
 800db94:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800db96:	4b90      	ldr	r3, [pc, #576]	@ (800ddd8 <tcp_input+0x730>)
 800db98:	2200      	movs	r2, #0
 800db9a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800db9c:	4b8f      	ldr	r3, [pc, #572]	@ (800dddc <tcp_input+0x734>)
 800db9e:	2200      	movs	r2, #0
 800dba0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dba2:	4b8f      	ldr	r3, [pc, #572]	@ (800dde0 <tcp_input+0x738>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	f003 0308 	and.w	r3, r3, #8
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d006      	beq.n	800dbbc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	7b5b      	ldrb	r3, [r3, #13]
 800dbb2:	f043 0301 	orr.w	r3, r3, #1
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d017      	beq.n	800dbf4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dbc4:	69f8      	ldr	r0, [r7, #28]
 800dbc6:	f7ff f85b 	bl	800cc80 <tcp_process_refused_data>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	f113 0f0d 	cmn.w	r3, #13
 800dbd0:	d007      	beq.n	800dbe2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00c      	beq.n	800dbf4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dbda:	4b82      	ldr	r3, [pc, #520]	@ (800dde4 <tcp_input+0x73c>)
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d008      	beq.n	800dbf4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f040 80e3 	bne.w	800ddb2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dbec:	69f8      	ldr	r0, [r7, #28]
 800dbee:	f003 fdff 	bl	80117f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dbf2:	e0de      	b.n	800ddb2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dbf4:	4a7c      	ldr	r2, [pc, #496]	@ (800dde8 <tcp_input+0x740>)
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dbfa:	69f8      	ldr	r0, [r7, #28]
 800dbfc:	f000 fb18 	bl	800e230 <tcp_process>
 800dc00:	4603      	mov	r3, r0
 800dc02:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dc04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc08:	f113 0f0d 	cmn.w	r3, #13
 800dc0c:	f000 80d3 	beq.w	800ddb6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800dc10:	4b71      	ldr	r3, [pc, #452]	@ (800ddd8 <tcp_input+0x730>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	f003 0308 	and.w	r3, r3, #8
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d015      	beq.n	800dc48 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d008      	beq.n	800dc38 <tcp_input+0x590>
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc2c:	69fa      	ldr	r2, [r7, #28]
 800dc2e:	6912      	ldr	r2, [r2, #16]
 800dc30:	f06f 010d 	mvn.w	r1, #13
 800dc34:	4610      	mov	r0, r2
 800dc36:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dc38:	69f9      	ldr	r1, [r7, #28]
 800dc3a:	486c      	ldr	r0, [pc, #432]	@ (800ddec <tcp_input+0x744>)
 800dc3c:	f7ff fbbc 	bl	800d3b8 <tcp_pcb_remove>
        tcp_free(pcb);
 800dc40:	69f8      	ldr	r0, [r7, #28]
 800dc42:	f7fd fe87 	bl	800b954 <tcp_free>
 800dc46:	e0da      	b.n	800ddfe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dc4c:	4b63      	ldr	r3, [pc, #396]	@ (800dddc <tcp_input+0x734>)
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d01d      	beq.n	800dc90 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dc54:	4b61      	ldr	r3, [pc, #388]	@ (800dddc <tcp_input+0x734>)
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00a      	beq.n	800dc7a <tcp_input+0x5d2>
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc6a:	69fa      	ldr	r2, [r7, #28]
 800dc6c:	6910      	ldr	r0, [r2, #16]
 800dc6e:	89fa      	ldrh	r2, [r7, #14]
 800dc70:	69f9      	ldr	r1, [r7, #28]
 800dc72:	4798      	blx	r3
 800dc74:	4603      	mov	r3, r0
 800dc76:	74fb      	strb	r3, [r7, #19]
 800dc78:	e001      	b.n	800dc7e <tcp_input+0x5d6>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dc7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc82:	f113 0f0d 	cmn.w	r3, #13
 800dc86:	f000 8098 	beq.w	800ddba <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dc8a:	4b54      	ldr	r3, [pc, #336]	@ (800dddc <tcp_input+0x734>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dc90:	69f8      	ldr	r0, [r7, #28]
 800dc92:	f000 f915 	bl	800dec0 <tcp_input_delayed_close>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f040 8090 	bne.w	800ddbe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dc9e:	4b4d      	ldr	r3, [pc, #308]	@ (800ddd4 <tcp_input+0x72c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d041      	beq.n	800dd2a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d006      	beq.n	800dcbc <tcp_input+0x614>
 800dcae:	4b50      	ldr	r3, [pc, #320]	@ (800ddf0 <tcp_input+0x748>)
 800dcb0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800dcb4:	494f      	ldr	r1, [pc, #316]	@ (800ddf4 <tcp_input+0x74c>)
 800dcb6:	4850      	ldr	r0, [pc, #320]	@ (800ddf8 <tcp_input+0x750>)
 800dcb8:	f007 fb84 	bl	80153c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	8b5b      	ldrh	r3, [r3, #26]
 800dcc0:	f003 0310 	and.w	r3, r3, #16
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d008      	beq.n	800dcda <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dcc8:	4b42      	ldr	r3, [pc, #264]	@ (800ddd4 <tcp_input+0x72c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fd faf3 	bl	800b2b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dcd2:	69f8      	ldr	r0, [r7, #28]
 800dcd4:	f7fe f982 	bl	800bfdc <tcp_abort>
            goto aborted;
 800dcd8:	e091      	b.n	800ddfe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00c      	beq.n	800dcfe <tcp_input+0x656>
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	6918      	ldr	r0, [r3, #16]
 800dcee:	4b39      	ldr	r3, [pc, #228]	@ (800ddd4 <tcp_input+0x72c>)
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	69f9      	ldr	r1, [r7, #28]
 800dcf6:	47a0      	blx	r4
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	74fb      	strb	r3, [r7, #19]
 800dcfc:	e008      	b.n	800dd10 <tcp_input+0x668>
 800dcfe:	4b35      	ldr	r3, [pc, #212]	@ (800ddd4 <tcp_input+0x72c>)
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	2300      	movs	r3, #0
 800dd04:	69f9      	ldr	r1, [r7, #28]
 800dd06:	2000      	movs	r0, #0
 800dd08:	f7ff f890 	bl	800ce2c <tcp_recv_null>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dd10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd14:	f113 0f0d 	cmn.w	r3, #13
 800dd18:	d053      	beq.n	800ddc2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dd1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d003      	beq.n	800dd2a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dd22:	4b2c      	ldr	r3, [pc, #176]	@ (800ddd4 <tcp_input+0x72c>)
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dd2a:	4b2b      	ldr	r3, [pc, #172]	@ (800ddd8 <tcp_input+0x730>)
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	f003 0320 	and.w	r3, r3, #32
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d030      	beq.n	800dd98 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d009      	beq.n	800dd52 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd42:	7b5a      	ldrb	r2, [r3, #13]
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd48:	f042 0220 	orr.w	r2, r2, #32
 800dd4c:	b2d2      	uxtb	r2, r2
 800dd4e:	735a      	strb	r2, [r3, #13]
 800dd50:	e022      	b.n	800dd98 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd56:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dd5a:	d005      	beq.n	800dd68 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd60:	3301      	adds	r3, #1
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00b      	beq.n	800dd8a <tcp_input+0x6e2>
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	6918      	ldr	r0, [r3, #16]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	2200      	movs	r2, #0
 800dd80:	69f9      	ldr	r1, [r7, #28]
 800dd82:	47a0      	blx	r4
 800dd84:	4603      	mov	r3, r0
 800dd86:	74fb      	strb	r3, [r7, #19]
 800dd88:	e001      	b.n	800dd8e <tcp_input+0x6e6>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd92:	f113 0f0d 	cmn.w	r3, #13
 800dd96:	d016      	beq.n	800ddc6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dd98:	4b13      	ldr	r3, [pc, #76]	@ (800dde8 <tcp_input+0x740>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dd9e:	69f8      	ldr	r0, [r7, #28]
 800dda0:	f000 f88e 	bl	800dec0 <tcp_input_delayed_close>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d128      	bne.n	800ddfc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ddaa:	69f8      	ldr	r0, [r7, #28]
 800ddac:	f002 ff1a 	bl	8010be4 <tcp_output>
 800ddb0:	e025      	b.n	800ddfe <tcp_input+0x756>
        goto aborted;
 800ddb2:	bf00      	nop
 800ddb4:	e023      	b.n	800ddfe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ddb6:	bf00      	nop
 800ddb8:	e021      	b.n	800ddfe <tcp_input+0x756>
              goto aborted;
 800ddba:	bf00      	nop
 800ddbc:	e01f      	b.n	800ddfe <tcp_input+0x756>
          goto aborted;
 800ddbe:	bf00      	nop
 800ddc0:	e01d      	b.n	800ddfe <tcp_input+0x756>
            goto aborted;
 800ddc2:	bf00      	nop
 800ddc4:	e01b      	b.n	800ddfe <tcp_input+0x756>
              goto aborted;
 800ddc6:	bf00      	nop
 800ddc8:	e019      	b.n	800ddfe <tcp_input+0x756>
 800ddca:	bf00      	nop
 800ddcc:	2000bf80 	.word	0x2000bf80
 800ddd0:	2000bf90 	.word	0x2000bf90
 800ddd4:	2000bfb0 	.word	0x2000bfb0
 800ddd8:	2000bfad 	.word	0x2000bfad
 800dddc:	2000bfa8 	.word	0x2000bfa8
 800dde0:	2000bfac 	.word	0x2000bfac
 800dde4:	2000bfaa 	.word	0x2000bfaa
 800dde8:	2000bfb4 	.word	0x2000bfb4
 800ddec:	2000bf74 	.word	0x2000bf74
 800ddf0:	08018328 	.word	0x08018328
 800ddf4:	080184dc 	.word	0x080184dc
 800ddf8:	08018374 	.word	0x08018374
          goto aborted;
 800ddfc:	bf00      	nop
    tcp_input_pcb = NULL;
 800ddfe:	4b27      	ldr	r3, [pc, #156]	@ (800de9c <tcp_input+0x7f4>)
 800de00:	2200      	movs	r2, #0
 800de02:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800de04:	4b26      	ldr	r3, [pc, #152]	@ (800dea0 <tcp_input+0x7f8>)
 800de06:	2200      	movs	r2, #0
 800de08:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800de0a:	4b26      	ldr	r3, [pc, #152]	@ (800dea4 <tcp_input+0x7fc>)
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d03f      	beq.n	800de92 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800de12:	4b24      	ldr	r3, [pc, #144]	@ (800dea4 <tcp_input+0x7fc>)
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	4618      	mov	r0, r3
 800de18:	f7fd fa4e 	bl	800b2b8 <pbuf_free>
      inseg.p = NULL;
 800de1c:	4b21      	ldr	r3, [pc, #132]	@ (800dea4 <tcp_input+0x7fc>)
 800de1e:	2200      	movs	r2, #0
 800de20:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800de22:	e036      	b.n	800de92 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800de24:	4b20      	ldr	r3, [pc, #128]	@ (800dea8 <tcp_input+0x800>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	899b      	ldrh	r3, [r3, #12]
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fb fe55 	bl	8009adc <lwip_htons>
 800de32:	4603      	mov	r3, r0
 800de34:	b2db      	uxtb	r3, r3
 800de36:	f003 0304 	and.w	r3, r3, #4
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d118      	bne.n	800de70 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de3e:	4b1b      	ldr	r3, [pc, #108]	@ (800deac <tcp_input+0x804>)
 800de40:	6819      	ldr	r1, [r3, #0]
 800de42:	4b1b      	ldr	r3, [pc, #108]	@ (800deb0 <tcp_input+0x808>)
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	461a      	mov	r2, r3
 800de48:	4b1a      	ldr	r3, [pc, #104]	@ (800deb4 <tcp_input+0x80c>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de4e:	4b16      	ldr	r3, [pc, #88]	@ (800dea8 <tcp_input+0x800>)
 800de50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de52:	885b      	ldrh	r3, [r3, #2]
 800de54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de56:	4a14      	ldr	r2, [pc, #80]	@ (800dea8 <tcp_input+0x800>)
 800de58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de5a:	8812      	ldrh	r2, [r2, #0]
 800de5c:	b292      	uxth	r2, r2
 800de5e:	9202      	str	r2, [sp, #8]
 800de60:	9301      	str	r3, [sp, #4]
 800de62:	4b15      	ldr	r3, [pc, #84]	@ (800deb8 <tcp_input+0x810>)
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	4b15      	ldr	r3, [pc, #84]	@ (800debc <tcp_input+0x814>)
 800de68:	4602      	mov	r2, r0
 800de6a:	2000      	movs	r0, #0
 800de6c:	f003 fc6e 	bl	801174c <tcp_rst>
    pbuf_free(p);
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7fd fa21 	bl	800b2b8 <pbuf_free>
  return;
 800de76:	e00c      	b.n	800de92 <tcp_input+0x7ea>
    goto dropped;
 800de78:	bf00      	nop
 800de7a:	e006      	b.n	800de8a <tcp_input+0x7e2>
    goto dropped;
 800de7c:	bf00      	nop
 800de7e:	e004      	b.n	800de8a <tcp_input+0x7e2>
    goto dropped;
 800de80:	bf00      	nop
 800de82:	e002      	b.n	800de8a <tcp_input+0x7e2>
      goto dropped;
 800de84:	bf00      	nop
 800de86:	e000      	b.n	800de8a <tcp_input+0x7e2>
      goto dropped;
 800de88:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f7fd fa14 	bl	800b2b8 <pbuf_free>
 800de90:	e000      	b.n	800de94 <tcp_input+0x7ec>
  return;
 800de92:	bf00      	nop
}
 800de94:	3724      	adds	r7, #36	@ 0x24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd90      	pop	{r4, r7, pc}
 800de9a:	bf00      	nop
 800de9c:	2000bfb4 	.word	0x2000bfb4
 800dea0:	2000bfb0 	.word	0x2000bfb0
 800dea4:	2000bf80 	.word	0x2000bf80
 800dea8:	2000bf90 	.word	0x2000bf90
 800deac:	2000bfa4 	.word	0x2000bfa4
 800deb0:	2000bfaa 	.word	0x2000bfaa
 800deb4:	2000bfa0 	.word	0x2000bfa0
 800deb8:	20008e78 	.word	0x20008e78
 800debc:	20008e7c 	.word	0x20008e7c

0800dec0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d106      	bne.n	800dedc <tcp_input_delayed_close+0x1c>
 800dece:	4b17      	ldr	r3, [pc, #92]	@ (800df2c <tcp_input_delayed_close+0x6c>)
 800ded0:	f240 225a 	movw	r2, #602	@ 0x25a
 800ded4:	4916      	ldr	r1, [pc, #88]	@ (800df30 <tcp_input_delayed_close+0x70>)
 800ded6:	4817      	ldr	r0, [pc, #92]	@ (800df34 <tcp_input_delayed_close+0x74>)
 800ded8:	f007 fa74 	bl	80153c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dedc:	4b16      	ldr	r3, [pc, #88]	@ (800df38 <tcp_input_delayed_close+0x78>)
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	f003 0310 	and.w	r3, r3, #16
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d01c      	beq.n	800df22 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	8b5b      	ldrh	r3, [r3, #26]
 800deec:	f003 0310 	and.w	r3, r3, #16
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10d      	bne.n	800df10 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800defa:	2b00      	cmp	r3, #0
 800defc:	d008      	beq.n	800df10 <tcp_input_delayed_close+0x50>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	6912      	ldr	r2, [r2, #16]
 800df08:	f06f 010e 	mvn.w	r1, #14
 800df0c:	4610      	mov	r0, r2
 800df0e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800df10:	6879      	ldr	r1, [r7, #4]
 800df12:	480a      	ldr	r0, [pc, #40]	@ (800df3c <tcp_input_delayed_close+0x7c>)
 800df14:	f7ff fa50 	bl	800d3b8 <tcp_pcb_remove>
    tcp_free(pcb);
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7fd fd1b 	bl	800b954 <tcp_free>
    return 1;
 800df1e:	2301      	movs	r3, #1
 800df20:	e000      	b.n	800df24 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800df22:	2300      	movs	r3, #0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	08018328 	.word	0x08018328
 800df30:	080184f8 	.word	0x080184f8
 800df34:	08018374 	.word	0x08018374
 800df38:	2000bfad 	.word	0x2000bfad
 800df3c:	2000bf74 	.word	0x2000bf74

0800df40 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800df40:	b590      	push	{r4, r7, lr}
 800df42:	b08b      	sub	sp, #44	@ 0x2c
 800df44:	af04      	add	r7, sp, #16
 800df46:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800df48:	4b6f      	ldr	r3, [pc, #444]	@ (800e108 <tcp_listen_input+0x1c8>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	f040 80d2 	bne.w	800e0fa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d106      	bne.n	800df6a <tcp_listen_input+0x2a>
 800df5c:	4b6b      	ldr	r3, [pc, #428]	@ (800e10c <tcp_listen_input+0x1cc>)
 800df5e:	f240 2281 	movw	r2, #641	@ 0x281
 800df62:	496b      	ldr	r1, [pc, #428]	@ (800e110 <tcp_listen_input+0x1d0>)
 800df64:	486b      	ldr	r0, [pc, #428]	@ (800e114 <tcp_listen_input+0x1d4>)
 800df66:	f007 fa2d 	bl	80153c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800df6a:	4b67      	ldr	r3, [pc, #412]	@ (800e108 <tcp_listen_input+0x1c8>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	f003 0310 	and.w	r3, r3, #16
 800df72:	2b00      	cmp	r3, #0
 800df74:	d019      	beq.n	800dfaa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df76:	4b68      	ldr	r3, [pc, #416]	@ (800e118 <tcp_listen_input+0x1d8>)
 800df78:	6819      	ldr	r1, [r3, #0]
 800df7a:	4b68      	ldr	r3, [pc, #416]	@ (800e11c <tcp_listen_input+0x1dc>)
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	461a      	mov	r2, r3
 800df80:	4b67      	ldr	r3, [pc, #412]	@ (800e120 <tcp_listen_input+0x1e0>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df86:	4b67      	ldr	r3, [pc, #412]	@ (800e124 <tcp_listen_input+0x1e4>)
 800df88:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df8a:	885b      	ldrh	r3, [r3, #2]
 800df8c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df8e:	4a65      	ldr	r2, [pc, #404]	@ (800e124 <tcp_listen_input+0x1e4>)
 800df90:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df92:	8812      	ldrh	r2, [r2, #0]
 800df94:	b292      	uxth	r2, r2
 800df96:	9202      	str	r2, [sp, #8]
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	4b63      	ldr	r3, [pc, #396]	@ (800e128 <tcp_listen_input+0x1e8>)
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	4b63      	ldr	r3, [pc, #396]	@ (800e12c <tcp_listen_input+0x1ec>)
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f003 fbd2 	bl	801174c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800dfa8:	e0a9      	b.n	800e0fe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800dfaa:	4b57      	ldr	r3, [pc, #348]	@ (800e108 <tcp_listen_input+0x1c8>)
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	f003 0302 	and.w	r3, r3, #2
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 80a3 	beq.w	800e0fe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7d5b      	ldrb	r3, [r3, #21]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7ff f859 	bl	800d074 <tcp_alloc>
 800dfc2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d111      	bne.n	800dfee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	699b      	ldr	r3, [r3, #24]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00a      	beq.n	800dfe8 <tcp_listen_input+0xa8>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	699b      	ldr	r3, [r3, #24]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	6910      	ldr	r0, [r2, #16]
 800dfda:	f04f 32ff 	mov.w	r2, #4294967295
 800dfde:	2100      	movs	r1, #0
 800dfe0:	4798      	blx	r3
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	73bb      	strb	r3, [r7, #14]
      return;
 800dfe6:	e08b      	b.n	800e100 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dfe8:	23f0      	movs	r3, #240	@ 0xf0
 800dfea:	73bb      	strb	r3, [r7, #14]
      return;
 800dfec:	e088      	b.n	800e100 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dfee:	4b50      	ldr	r3, [pc, #320]	@ (800e130 <tcp_listen_input+0x1f0>)
 800dff0:	695a      	ldr	r2, [r3, #20]
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dff6:	4b4e      	ldr	r3, [pc, #312]	@ (800e130 <tcp_listen_input+0x1f0>)
 800dff8:	691a      	ldr	r2, [r3, #16]
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	8ada      	ldrh	r2, [r3, #22]
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e006:	4b47      	ldr	r3, [pc, #284]	@ (800e124 <tcp_listen_input+0x1e4>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	881b      	ldrh	r3, [r3, #0]
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	2203      	movs	r2, #3
 800e016:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e018:	4b41      	ldr	r3, [pc, #260]	@ (800e120 <tcp_listen_input+0x1e0>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	1c5a      	adds	r2, r3, #1
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e02a:	6978      	ldr	r0, [r7, #20]
 800e02c:	f7ff fa58 	bl	800d4e0 <tcp_next_iss>
 800e030:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	693a      	ldr	r2, [r7, #16]
 800e036:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	693a      	ldr	r2, [r7, #16]
 800e042:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e04a:	4b35      	ldr	r3, [pc, #212]	@ (800e120 <tcp_listen_input+0x1e0>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	1e5a      	subs	r2, r3, #1
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	691a      	ldr	r2, [r3, #16]
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	7a5b      	ldrb	r3, [r3, #9]
 800e066:	f003 030c 	and.w	r3, r3, #12
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	7a1a      	ldrb	r2, [r3, #8]
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e078:	4b2e      	ldr	r3, [pc, #184]	@ (800e134 <tcp_listen_input+0x1f4>)
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	60da      	str	r2, [r3, #12]
 800e080:	4a2c      	ldr	r2, [pc, #176]	@ (800e134 <tcp_listen_input+0x1f4>)
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	6013      	str	r3, [r2, #0]
 800e086:	f003 fd23 	bl	8011ad0 <tcp_timer_needed>
 800e08a:	4b2b      	ldr	r3, [pc, #172]	@ (800e138 <tcp_listen_input+0x1f8>)
 800e08c:	2201      	movs	r2, #1
 800e08e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e090:	6978      	ldr	r0, [r7, #20]
 800e092:	f001 fd8b 	bl	800fbac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e096:	4b23      	ldr	r3, [pc, #140]	@ (800e124 <tcp_listen_input+0x1e4>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	89db      	ldrh	r3, [r3, #14]
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f005 fcb5 	bl	8013a28 <ip4_route>
 800e0be:	4601      	mov	r1, r0
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f7ff fa30 	bl	800d52c <tcp_eff_send_mss_netif>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e0d4:	2112      	movs	r1, #18
 800e0d6:	6978      	ldr	r0, [r7, #20]
 800e0d8:	f002 fc96 	bl	8010a08 <tcp_enqueue_flags>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d004      	beq.n	800e0f2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	6978      	ldr	r0, [r7, #20]
 800e0ec:	f7fd feb8 	bl	800be60 <tcp_abandon>
      return;
 800e0f0:	e006      	b.n	800e100 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e0f2:	6978      	ldr	r0, [r7, #20]
 800e0f4:	f002 fd76 	bl	8010be4 <tcp_output>
  return;
 800e0f8:	e001      	b.n	800e0fe <tcp_listen_input+0x1be>
    return;
 800e0fa:	bf00      	nop
 800e0fc:	e000      	b.n	800e100 <tcp_listen_input+0x1c0>
  return;
 800e0fe:	bf00      	nop
}
 800e100:	371c      	adds	r7, #28
 800e102:	46bd      	mov	sp, r7
 800e104:	bd90      	pop	{r4, r7, pc}
 800e106:	bf00      	nop
 800e108:	2000bfac 	.word	0x2000bfac
 800e10c:	08018328 	.word	0x08018328
 800e110:	08018520 	.word	0x08018520
 800e114:	08018374 	.word	0x08018374
 800e118:	2000bfa4 	.word	0x2000bfa4
 800e11c:	2000bfaa 	.word	0x2000bfaa
 800e120:	2000bfa0 	.word	0x2000bfa0
 800e124:	2000bf90 	.word	0x2000bf90
 800e128:	20008e78 	.word	0x20008e78
 800e12c:	20008e7c 	.word	0x20008e7c
 800e130:	20008e68 	.word	0x20008e68
 800e134:	2000bf74 	.word	0x2000bf74
 800e138:	2000bf7c 	.word	0x2000bf7c

0800e13c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b086      	sub	sp, #24
 800e140:	af04      	add	r7, sp, #16
 800e142:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e144:	4b2f      	ldr	r3, [pc, #188]	@ (800e204 <tcp_timewait_input+0xc8>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	f003 0304 	and.w	r3, r3, #4
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d153      	bne.n	800e1f8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <tcp_timewait_input+0x28>
 800e156:	4b2c      	ldr	r3, [pc, #176]	@ (800e208 <tcp_timewait_input+0xcc>)
 800e158:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e15c:	492b      	ldr	r1, [pc, #172]	@ (800e20c <tcp_timewait_input+0xd0>)
 800e15e:	482c      	ldr	r0, [pc, #176]	@ (800e210 <tcp_timewait_input+0xd4>)
 800e160:	f007 f930 	bl	80153c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e164:	4b27      	ldr	r3, [pc, #156]	@ (800e204 <tcp_timewait_input+0xc8>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	f003 0302 	and.w	r3, r3, #2
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d02a      	beq.n	800e1c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e170:	4b28      	ldr	r3, [pc, #160]	@ (800e214 <tcp_timewait_input+0xd8>)
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	db2d      	blt.n	800e1da <tcp_timewait_input+0x9e>
 800e17e:	4b25      	ldr	r3, [pc, #148]	@ (800e214 <tcp_timewait_input+0xd8>)
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e186:	6879      	ldr	r1, [r7, #4]
 800e188:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e18a:	440b      	add	r3, r1
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	dc23      	bgt.n	800e1da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e192:	4b21      	ldr	r3, [pc, #132]	@ (800e218 <tcp_timewait_input+0xdc>)
 800e194:	6819      	ldr	r1, [r3, #0]
 800e196:	4b21      	ldr	r3, [pc, #132]	@ (800e21c <tcp_timewait_input+0xe0>)
 800e198:	881b      	ldrh	r3, [r3, #0]
 800e19a:	461a      	mov	r2, r3
 800e19c:	4b1d      	ldr	r3, [pc, #116]	@ (800e214 <tcp_timewait_input+0xd8>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1a2:	4b1f      	ldr	r3, [pc, #124]	@ (800e220 <tcp_timewait_input+0xe4>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1a6:	885b      	ldrh	r3, [r3, #2]
 800e1a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1aa:	4a1d      	ldr	r2, [pc, #116]	@ (800e220 <tcp_timewait_input+0xe4>)
 800e1ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1ae:	8812      	ldrh	r2, [r2, #0]
 800e1b0:	b292      	uxth	r2, r2
 800e1b2:	9202      	str	r2, [sp, #8]
 800e1b4:	9301      	str	r3, [sp, #4]
 800e1b6:	4b1b      	ldr	r3, [pc, #108]	@ (800e224 <tcp_timewait_input+0xe8>)
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	4b1b      	ldr	r3, [pc, #108]	@ (800e228 <tcp_timewait_input+0xec>)
 800e1bc:	4602      	mov	r2, r0
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f003 fac4 	bl	801174c <tcp_rst>
      return;
 800e1c4:	e01b      	b.n	800e1fe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e204 <tcp_timewait_input+0xc8>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	f003 0301 	and.w	r3, r3, #1
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d003      	beq.n	800e1da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e1d2:	4b16      	ldr	r3, [pc, #88]	@ (800e22c <tcp_timewait_input+0xf0>)
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e1da:	4b10      	ldr	r3, [pc, #64]	@ (800e21c <tcp_timewait_input+0xe0>)
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00c      	beq.n	800e1fc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	8b5b      	ldrh	r3, [r3, #26]
 800e1e6:	f043 0302 	orr.w	r3, r3, #2
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f002 fcf7 	bl	8010be4 <tcp_output>
  }
  return;
 800e1f6:	e001      	b.n	800e1fc <tcp_timewait_input+0xc0>
    return;
 800e1f8:	bf00      	nop
 800e1fa:	e000      	b.n	800e1fe <tcp_timewait_input+0xc2>
  return;
 800e1fc:	bf00      	nop
}
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	2000bfac 	.word	0x2000bfac
 800e208:	08018328 	.word	0x08018328
 800e20c:	08018540 	.word	0x08018540
 800e210:	08018374 	.word	0x08018374
 800e214:	2000bfa0 	.word	0x2000bfa0
 800e218:	2000bfa4 	.word	0x2000bfa4
 800e21c:	2000bfaa 	.word	0x2000bfaa
 800e220:	2000bf90 	.word	0x2000bf90
 800e224:	20008e78 	.word	0x20008e78
 800e228:	20008e7c 	.word	0x20008e7c
 800e22c:	2000bf68 	.word	0x2000bf68

0800e230 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e230:	b590      	push	{r4, r7, lr}
 800e232:	b08d      	sub	sp, #52	@ 0x34
 800e234:	af04      	add	r7, sp, #16
 800e236:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e238:	2300      	movs	r3, #0
 800e23a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d106      	bne.n	800e254 <tcp_process+0x24>
 800e246:	4b9d      	ldr	r3, [pc, #628]	@ (800e4bc <tcp_process+0x28c>)
 800e248:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e24c:	499c      	ldr	r1, [pc, #624]	@ (800e4c0 <tcp_process+0x290>)
 800e24e:	489d      	ldr	r0, [pc, #628]	@ (800e4c4 <tcp_process+0x294>)
 800e250:	f007 f8b8 	bl	80153c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e254:	4b9c      	ldr	r3, [pc, #624]	@ (800e4c8 <tcp_process+0x298>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	f003 0304 	and.w	r3, r3, #4
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d04e      	beq.n	800e2fe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	7d1b      	ldrb	r3, [r3, #20]
 800e264:	2b02      	cmp	r3, #2
 800e266:	d108      	bne.n	800e27a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e26c:	4b97      	ldr	r3, [pc, #604]	@ (800e4cc <tcp_process+0x29c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	429a      	cmp	r2, r3
 800e272:	d123      	bne.n	800e2bc <tcp_process+0x8c>
        acceptable = 1;
 800e274:	2301      	movs	r3, #1
 800e276:	76fb      	strb	r3, [r7, #27]
 800e278:	e020      	b.n	800e2bc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e27e:	4b94      	ldr	r3, [pc, #592]	@ (800e4d0 <tcp_process+0x2a0>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	429a      	cmp	r2, r3
 800e284:	d102      	bne.n	800e28c <tcp_process+0x5c>
        acceptable = 1;
 800e286:	2301      	movs	r3, #1
 800e288:	76fb      	strb	r3, [r7, #27]
 800e28a:	e017      	b.n	800e2bc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e28c:	4b90      	ldr	r3, [pc, #576]	@ (800e4d0 <tcp_process+0x2a0>)
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	db10      	blt.n	800e2bc <tcp_process+0x8c>
 800e29a:	4b8d      	ldr	r3, [pc, #564]	@ (800e4d0 <tcp_process+0x2a0>)
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a2:	6879      	ldr	r1, [r7, #4]
 800e2a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e2a6:	440b      	add	r3, r1
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	dc06      	bgt.n	800e2bc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	8b5b      	ldrh	r3, [r3, #26]
 800e2b2:	f043 0302 	orr.w	r3, r3, #2
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e2bc:	7efb      	ldrb	r3, [r7, #27]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d01b      	beq.n	800e2fa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7d1b      	ldrb	r3, [r3, #20]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d106      	bne.n	800e2d8 <tcp_process+0xa8>
 800e2ca:	4b7c      	ldr	r3, [pc, #496]	@ (800e4bc <tcp_process+0x28c>)
 800e2cc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e2d0:	4980      	ldr	r1, [pc, #512]	@ (800e4d4 <tcp_process+0x2a4>)
 800e2d2:	487c      	ldr	r0, [pc, #496]	@ (800e4c4 <tcp_process+0x294>)
 800e2d4:	f007 f876 	bl	80153c4 <iprintf>
      recv_flags |= TF_RESET;
 800e2d8:	4b7f      	ldr	r3, [pc, #508]	@ (800e4d8 <tcp_process+0x2a8>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	f043 0308 	orr.w	r3, r3, #8
 800e2e0:	b2da      	uxtb	r2, r3
 800e2e2:	4b7d      	ldr	r3, [pc, #500]	@ (800e4d8 <tcp_process+0x2a8>)
 800e2e4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	8b5b      	ldrh	r3, [r3, #26]
 800e2ea:	f023 0301 	bic.w	r3, r3, #1
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e2f4:	f06f 030d 	mvn.w	r3, #13
 800e2f8:	e37a      	b.n	800e9f0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	e378      	b.n	800e9f0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e2fe:	4b72      	ldr	r3, [pc, #456]	@ (800e4c8 <tcp_process+0x298>)
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	f003 0302 	and.w	r3, r3, #2
 800e306:	2b00      	cmp	r3, #0
 800e308:	d010      	beq.n	800e32c <tcp_process+0xfc>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	7d1b      	ldrb	r3, [r3, #20]
 800e30e:	2b02      	cmp	r3, #2
 800e310:	d00c      	beq.n	800e32c <tcp_process+0xfc>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	7d1b      	ldrb	r3, [r3, #20]
 800e316:	2b03      	cmp	r3, #3
 800e318:	d008      	beq.n	800e32c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	8b5b      	ldrh	r3, [r3, #26]
 800e31e:	f043 0302 	orr.w	r3, r3, #2
 800e322:	b29a      	uxth	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	e361      	b.n	800e9f0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	8b5b      	ldrh	r3, [r3, #26]
 800e330:	f003 0310 	and.w	r3, r3, #16
 800e334:	2b00      	cmp	r3, #0
 800e336:	d103      	bne.n	800e340 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e338:	4b68      	ldr	r3, [pc, #416]	@ (800e4dc <tcp_process+0x2ac>)
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f001 fc2b 	bl	800fbac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	7d1b      	ldrb	r3, [r3, #20]
 800e35a:	3b02      	subs	r3, #2
 800e35c:	2b07      	cmp	r3, #7
 800e35e:	f200 8337 	bhi.w	800e9d0 <tcp_process+0x7a0>
 800e362:	a201      	add	r2, pc, #4	@ (adr r2, 800e368 <tcp_process+0x138>)
 800e364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e368:	0800e389 	.word	0x0800e389
 800e36c:	0800e5b9 	.word	0x0800e5b9
 800e370:	0800e731 	.word	0x0800e731
 800e374:	0800e75b 	.word	0x0800e75b
 800e378:	0800e87f 	.word	0x0800e87f
 800e37c:	0800e731 	.word	0x0800e731
 800e380:	0800e90b 	.word	0x0800e90b
 800e384:	0800e99b 	.word	0x0800e99b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e388:	4b4f      	ldr	r3, [pc, #316]	@ (800e4c8 <tcp_process+0x298>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	f003 0310 	and.w	r3, r3, #16
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 80e4 	beq.w	800e55e <tcp_process+0x32e>
 800e396:	4b4c      	ldr	r3, [pc, #304]	@ (800e4c8 <tcp_process+0x298>)
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	f003 0302 	and.w	r3, r3, #2
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f000 80dd 	beq.w	800e55e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3a8:	1c5a      	adds	r2, r3, #1
 800e3aa:	4b48      	ldr	r3, [pc, #288]	@ (800e4cc <tcp_process+0x29c>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	f040 80d5 	bne.w	800e55e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e3b4:	4b46      	ldr	r3, [pc, #280]	@ (800e4d0 <tcp_process+0x2a0>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	1c5a      	adds	r2, r3, #1
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e3c6:	4b41      	ldr	r3, [pc, #260]	@ (800e4cc <tcp_process+0x29c>)
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e3ce:	4b44      	ldr	r3, [pc, #272]	@ (800e4e0 <tcp_process+0x2b0>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	89db      	ldrh	r3, [r3, #14]
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e3e8:	4b39      	ldr	r3, [pc, #228]	@ (800e4d0 <tcp_process+0x2a0>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	1e5a      	subs	r2, r3, #1
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2204      	movs	r2, #4
 800e3f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3304      	adds	r3, #4
 800e400:	4618      	mov	r0, r3
 800e402:	f005 fb11 	bl	8013a28 <ip4_route>
 800e406:	4601      	mov	r1, r0
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	3304      	adds	r3, #4
 800e40c:	461a      	mov	r2, r3
 800e40e:	4620      	mov	r0, r4
 800e410:	f7ff f88c 	bl	800d52c <tcp_eff_send_mss_netif>
 800e414:	4603      	mov	r3, r0
 800e416:	461a      	mov	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e420:	009a      	lsls	r2, r3, #2
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e42c:	428b      	cmp	r3, r1
 800e42e:	bf38      	it	cc
 800e430:	460b      	movcc	r3, r1
 800e432:	429a      	cmp	r2, r3
 800e434:	d204      	bcs.n	800e440 <tcp_process+0x210>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	e00d      	b.n	800e45c <tcp_process+0x22c>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e444:	005b      	lsls	r3, r3, #1
 800e446:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d904      	bls.n	800e458 <tcp_process+0x228>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e452:	005b      	lsls	r3, r3, #1
 800e454:	b29b      	uxth	r3, r3
 800e456:	e001      	b.n	800e45c <tcp_process+0x22c>
 800e458:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d106      	bne.n	800e47a <tcp_process+0x24a>
 800e46c:	4b13      	ldr	r3, [pc, #76]	@ (800e4bc <tcp_process+0x28c>)
 800e46e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e472:	491c      	ldr	r1, [pc, #112]	@ (800e4e4 <tcp_process+0x2b4>)
 800e474:	4813      	ldr	r0, [pc, #76]	@ (800e4c4 <tcp_process+0x294>)
 800e476:	f006 ffa5 	bl	80153c4 <iprintf>
        --pcb->snd_queuelen;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e480:	3b01      	subs	r3, #1
 800e482:	b29a      	uxth	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e48e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d12a      	bne.n	800e4ec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e49a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <tcp_process+0x280>
 800e4a2:	4b06      	ldr	r3, [pc, #24]	@ (800e4bc <tcp_process+0x28c>)
 800e4a4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e4a8:	490f      	ldr	r1, [pc, #60]	@ (800e4e8 <tcp_process+0x2b8>)
 800e4aa:	4806      	ldr	r0, [pc, #24]	@ (800e4c4 <tcp_process+0x294>)
 800e4ac:	f006 ff8a 	bl	80153c4 <iprintf>
          pcb->unsent = rseg->next;
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e4b8:	e01c      	b.n	800e4f4 <tcp_process+0x2c4>
 800e4ba:	bf00      	nop
 800e4bc:	08018328 	.word	0x08018328
 800e4c0:	08018560 	.word	0x08018560
 800e4c4:	08018374 	.word	0x08018374
 800e4c8:	2000bfac 	.word	0x2000bfac
 800e4cc:	2000bfa4 	.word	0x2000bfa4
 800e4d0:	2000bfa0 	.word	0x2000bfa0
 800e4d4:	0801857c 	.word	0x0801857c
 800e4d8:	2000bfad 	.word	0x2000bfad
 800e4dc:	2000bf68 	.word	0x2000bf68
 800e4e0:	2000bf90 	.word	0x2000bf90
 800e4e4:	0801859c 	.word	0x0801859c
 800e4e8:	080185b4 	.word	0x080185b4
        } else {
          pcb->unacked = rseg->next;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e4f4:	69f8      	ldr	r0, [r7, #28]
 800e4f6:	f7fe fc54 	bl	800cda2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d104      	bne.n	800e50c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e508:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e50a:	e006      	b.n	800e51a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00a      	beq.n	800e53a <tcp_process+0x30a>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	6910      	ldr	r0, [r2, #16]
 800e52e:	2200      	movs	r2, #0
 800e530:	6879      	ldr	r1, [r7, #4]
 800e532:	4798      	blx	r3
 800e534:	4603      	mov	r3, r0
 800e536:	76bb      	strb	r3, [r7, #26]
 800e538:	e001      	b.n	800e53e <tcp_process+0x30e>
 800e53a:	2300      	movs	r3, #0
 800e53c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e53e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e542:	f113 0f0d 	cmn.w	r3, #13
 800e546:	d102      	bne.n	800e54e <tcp_process+0x31e>
          return ERR_ABRT;
 800e548:	f06f 030c 	mvn.w	r3, #12
 800e54c:	e250      	b.n	800e9f0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	8b5b      	ldrh	r3, [r3, #26]
 800e552:	f043 0302 	orr.w	r3, r3, #2
 800e556:	b29a      	uxth	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e55c:	e23a      	b.n	800e9d4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e55e:	4b98      	ldr	r3, [pc, #608]	@ (800e7c0 <tcp_process+0x590>)
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	f003 0310 	and.w	r3, r3, #16
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8234 	beq.w	800e9d4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e56c:	4b95      	ldr	r3, [pc, #596]	@ (800e7c4 <tcp_process+0x594>)
 800e56e:	6819      	ldr	r1, [r3, #0]
 800e570:	4b95      	ldr	r3, [pc, #596]	@ (800e7c8 <tcp_process+0x598>)
 800e572:	881b      	ldrh	r3, [r3, #0]
 800e574:	461a      	mov	r2, r3
 800e576:	4b95      	ldr	r3, [pc, #596]	@ (800e7cc <tcp_process+0x59c>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e57c:	4b94      	ldr	r3, [pc, #592]	@ (800e7d0 <tcp_process+0x5a0>)
 800e57e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e580:	885b      	ldrh	r3, [r3, #2]
 800e582:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e584:	4a92      	ldr	r2, [pc, #584]	@ (800e7d0 <tcp_process+0x5a0>)
 800e586:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e588:	8812      	ldrh	r2, [r2, #0]
 800e58a:	b292      	uxth	r2, r2
 800e58c:	9202      	str	r2, [sp, #8]
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	4b90      	ldr	r3, [pc, #576]	@ (800e7d4 <tcp_process+0x5a4>)
 800e592:	9300      	str	r3, [sp, #0]
 800e594:	4b90      	ldr	r3, [pc, #576]	@ (800e7d8 <tcp_process+0x5a8>)
 800e596:	4602      	mov	r2, r0
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f003 f8d7 	bl	801174c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e5a4:	2b05      	cmp	r3, #5
 800e5a6:	f200 8215 	bhi.w	800e9d4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f002 fea3 	bl	80112fc <tcp_rexmit_rto>
      break;
 800e5b6:	e20d      	b.n	800e9d4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e5b8:	4b81      	ldr	r3, [pc, #516]	@ (800e7c0 <tcp_process+0x590>)
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	f003 0310 	and.w	r3, r3, #16
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f000 80a1 	beq.w	800e708 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e5c6:	4b7f      	ldr	r3, [pc, #508]	@ (800e7c4 <tcp_process+0x594>)
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	db7e      	blt.n	800e6d4 <tcp_process+0x4a4>
 800e5d6:	4b7b      	ldr	r3, [pc, #492]	@ (800e7c4 <tcp_process+0x594>)
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	dc77      	bgt.n	800e6d4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2204      	movs	r2, #4
 800e5e8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d102      	bne.n	800e5f8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e5f2:	23fa      	movs	r3, #250	@ 0xfa
 800e5f4:	76bb      	strb	r3, [r7, #26]
 800e5f6:	e01d      	b.n	800e634 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e5fc:	699b      	ldr	r3, [r3, #24]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d106      	bne.n	800e610 <tcp_process+0x3e0>
 800e602:	4b76      	ldr	r3, [pc, #472]	@ (800e7dc <tcp_process+0x5ac>)
 800e604:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e608:	4975      	ldr	r1, [pc, #468]	@ (800e7e0 <tcp_process+0x5b0>)
 800e60a:	4876      	ldr	r0, [pc, #472]	@ (800e7e4 <tcp_process+0x5b4>)
 800e60c:	f006 feda 	bl	80153c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e614:	699b      	ldr	r3, [r3, #24]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00a      	beq.n	800e630 <tcp_process+0x400>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e61e:	699b      	ldr	r3, [r3, #24]
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	6910      	ldr	r0, [r2, #16]
 800e624:	2200      	movs	r2, #0
 800e626:	6879      	ldr	r1, [r7, #4]
 800e628:	4798      	blx	r3
 800e62a:	4603      	mov	r3, r0
 800e62c:	76bb      	strb	r3, [r7, #26]
 800e62e:	e001      	b.n	800e634 <tcp_process+0x404>
 800e630:	23f0      	movs	r3, #240	@ 0xf0
 800e632:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e634:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00a      	beq.n	800e652 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e63c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e640:	f113 0f0d 	cmn.w	r3, #13
 800e644:	d002      	beq.n	800e64c <tcp_process+0x41c>
              tcp_abort(pcb);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7fd fcc8 	bl	800bfdc <tcp_abort>
            }
            return ERR_ABRT;
 800e64c:	f06f 030c 	mvn.w	r3, #12
 800e650:	e1ce      	b.n	800e9f0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fae0 	bl	800ec18 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e658:	4b63      	ldr	r3, [pc, #396]	@ (800e7e8 <tcp_process+0x5b8>)
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d005      	beq.n	800e66c <tcp_process+0x43c>
            recv_acked--;
 800e660:	4b61      	ldr	r3, [pc, #388]	@ (800e7e8 <tcp_process+0x5b8>)
 800e662:	881b      	ldrh	r3, [r3, #0]
 800e664:	3b01      	subs	r3, #1
 800e666:	b29a      	uxth	r2, r3
 800e668:	4b5f      	ldr	r3, [pc, #380]	@ (800e7e8 <tcp_process+0x5b8>)
 800e66a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e670:	009a      	lsls	r2, r3, #2
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e676:	005b      	lsls	r3, r3, #1
 800e678:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e67c:	428b      	cmp	r3, r1
 800e67e:	bf38      	it	cc
 800e680:	460b      	movcc	r3, r1
 800e682:	429a      	cmp	r2, r3
 800e684:	d204      	bcs.n	800e690 <tcp_process+0x460>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	e00d      	b.n	800e6ac <tcp_process+0x47c>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e694:	005b      	lsls	r3, r3, #1
 800e696:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d904      	bls.n	800e6a8 <tcp_process+0x478>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	e001      	b.n	800e6ac <tcp_process+0x47c>
 800e6a8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e6b2:	4b4e      	ldr	r3, [pc, #312]	@ (800e7ec <tcp_process+0x5bc>)
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	f003 0320 	and.w	r3, r3, #32
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d037      	beq.n	800e72e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	8b5b      	ldrh	r3, [r3, #26]
 800e6c2:	f043 0302 	orr.w	r3, r3, #2
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2207      	movs	r2, #7
 800e6d0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e6d2:	e02c      	b.n	800e72e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6d4:	4b3b      	ldr	r3, [pc, #236]	@ (800e7c4 <tcp_process+0x594>)
 800e6d6:	6819      	ldr	r1, [r3, #0]
 800e6d8:	4b3b      	ldr	r3, [pc, #236]	@ (800e7c8 <tcp_process+0x598>)
 800e6da:	881b      	ldrh	r3, [r3, #0]
 800e6dc:	461a      	mov	r2, r3
 800e6de:	4b3b      	ldr	r3, [pc, #236]	@ (800e7cc <tcp_process+0x59c>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6e4:	4b3a      	ldr	r3, [pc, #232]	@ (800e7d0 <tcp_process+0x5a0>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6e8:	885b      	ldrh	r3, [r3, #2]
 800e6ea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6ec:	4a38      	ldr	r2, [pc, #224]	@ (800e7d0 <tcp_process+0x5a0>)
 800e6ee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6f0:	8812      	ldrh	r2, [r2, #0]
 800e6f2:	b292      	uxth	r2, r2
 800e6f4:	9202      	str	r2, [sp, #8]
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	4b36      	ldr	r3, [pc, #216]	@ (800e7d4 <tcp_process+0x5a4>)
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	4b36      	ldr	r3, [pc, #216]	@ (800e7d8 <tcp_process+0x5a8>)
 800e6fe:	4602      	mov	r2, r0
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f003 f823 	bl	801174c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e706:	e167      	b.n	800e9d8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e708:	4b2d      	ldr	r3, [pc, #180]	@ (800e7c0 <tcp_process+0x590>)
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	f003 0302 	and.w	r3, r3, #2
 800e710:	2b00      	cmp	r3, #0
 800e712:	f000 8161 	beq.w	800e9d8 <tcp_process+0x7a8>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e71a:	1e5a      	subs	r2, r3, #1
 800e71c:	4b2b      	ldr	r3, [pc, #172]	@ (800e7cc <tcp_process+0x59c>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	429a      	cmp	r2, r3
 800e722:	f040 8159 	bne.w	800e9d8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f002 fe0a 	bl	8011340 <tcp_rexmit>
      break;
 800e72c:	e154      	b.n	800e9d8 <tcp_process+0x7a8>
 800e72e:	e153      	b.n	800e9d8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 fa71 	bl	800ec18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e736:	4b2d      	ldr	r3, [pc, #180]	@ (800e7ec <tcp_process+0x5bc>)
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	f003 0320 	and.w	r3, r3, #32
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f000 814c 	beq.w	800e9dc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	8b5b      	ldrh	r3, [r3, #26]
 800e748:	f043 0302 	orr.w	r3, r3, #2
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2207      	movs	r2, #7
 800e756:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e758:	e140      	b.n	800e9dc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 fa5c 	bl	800ec18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e760:	4b22      	ldr	r3, [pc, #136]	@ (800e7ec <tcp_process+0x5bc>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	f003 0320 	and.w	r3, r3, #32
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d071      	beq.n	800e850 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e76c:	4b14      	ldr	r3, [pc, #80]	@ (800e7c0 <tcp_process+0x590>)
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	f003 0310 	and.w	r3, r3, #16
 800e774:	2b00      	cmp	r3, #0
 800e776:	d060      	beq.n	800e83a <tcp_process+0x60a>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e77c:	4b11      	ldr	r3, [pc, #68]	@ (800e7c4 <tcp_process+0x594>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	429a      	cmp	r2, r3
 800e782:	d15a      	bne.n	800e83a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d156      	bne.n	800e83a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	8b5b      	ldrh	r3, [r3, #26]
 800e790:	f043 0302 	orr.w	r3, r3, #2
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7fe fdbc 	bl	800d318 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e7a0:	4b13      	ldr	r3, [pc, #76]	@ (800e7f0 <tcp_process+0x5c0>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d105      	bne.n	800e7b6 <tcp_process+0x586>
 800e7aa:	4b11      	ldr	r3, [pc, #68]	@ (800e7f0 <tcp_process+0x5c0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	4a0f      	ldr	r2, [pc, #60]	@ (800e7f0 <tcp_process+0x5c0>)
 800e7b2:	6013      	str	r3, [r2, #0]
 800e7b4:	e02e      	b.n	800e814 <tcp_process+0x5e4>
 800e7b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e7f0 <tcp_process+0x5c0>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	617b      	str	r3, [r7, #20]
 800e7bc:	e027      	b.n	800e80e <tcp_process+0x5de>
 800e7be:	bf00      	nop
 800e7c0:	2000bfac 	.word	0x2000bfac
 800e7c4:	2000bfa4 	.word	0x2000bfa4
 800e7c8:	2000bfaa 	.word	0x2000bfaa
 800e7cc:	2000bfa0 	.word	0x2000bfa0
 800e7d0:	2000bf90 	.word	0x2000bf90
 800e7d4:	20008e78 	.word	0x20008e78
 800e7d8:	20008e7c 	.word	0x20008e7c
 800e7dc:	08018328 	.word	0x08018328
 800e7e0:	080185c8 	.word	0x080185c8
 800e7e4:	08018374 	.word	0x08018374
 800e7e8:	2000bfa8 	.word	0x2000bfa8
 800e7ec:	2000bfad 	.word	0x2000bfad
 800e7f0:	2000bf74 	.word	0x2000bf74
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d104      	bne.n	800e808 <tcp_process+0x5d8>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	68da      	ldr	r2, [r3, #12]
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	60da      	str	r2, [r3, #12]
 800e806:	e005      	b.n	800e814 <tcp_process+0x5e4>
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	617b      	str	r3, [r7, #20]
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1ef      	bne.n	800e7f4 <tcp_process+0x5c4>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	60da      	str	r2, [r3, #12]
 800e81a:	4b77      	ldr	r3, [pc, #476]	@ (800e9f8 <tcp_process+0x7c8>)
 800e81c:	2201      	movs	r2, #1
 800e81e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	220a      	movs	r2, #10
 800e824:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e826:	4b75      	ldr	r3, [pc, #468]	@ (800e9fc <tcp_process+0x7cc>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	60da      	str	r2, [r3, #12]
 800e82e:	4a73      	ldr	r2, [pc, #460]	@ (800e9fc <tcp_process+0x7cc>)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6013      	str	r3, [r2, #0]
 800e834:	f003 f94c 	bl	8011ad0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e838:	e0d2      	b.n	800e9e0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	8b5b      	ldrh	r3, [r3, #26]
 800e83e:	f043 0302 	orr.w	r3, r3, #2
 800e842:	b29a      	uxth	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2208      	movs	r2, #8
 800e84c:	751a      	strb	r2, [r3, #20]
      break;
 800e84e:	e0c7      	b.n	800e9e0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e850:	4b6b      	ldr	r3, [pc, #428]	@ (800ea00 <tcp_process+0x7d0>)
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f003 0310 	and.w	r3, r3, #16
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f000 80c1 	beq.w	800e9e0 <tcp_process+0x7b0>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e862:	4b68      	ldr	r3, [pc, #416]	@ (800ea04 <tcp_process+0x7d4>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	429a      	cmp	r2, r3
 800e868:	f040 80ba 	bne.w	800e9e0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e870:	2b00      	cmp	r3, #0
 800e872:	f040 80b5 	bne.w	800e9e0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2206      	movs	r2, #6
 800e87a:	751a      	strb	r2, [r3, #20]
      break;
 800e87c:	e0b0      	b.n	800e9e0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f9ca 	bl	800ec18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e884:	4b60      	ldr	r3, [pc, #384]	@ (800ea08 <tcp_process+0x7d8>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	f003 0320 	and.w	r3, r3, #32
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f000 80a9 	beq.w	800e9e4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	8b5b      	ldrh	r3, [r3, #26]
 800e896:	f043 0302 	orr.w	r3, r3, #2
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7fe fd39 	bl	800d318 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e8a6:	4b59      	ldr	r3, [pc, #356]	@ (800ea0c <tcp_process+0x7dc>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d105      	bne.n	800e8bc <tcp_process+0x68c>
 800e8b0:	4b56      	ldr	r3, [pc, #344]	@ (800ea0c <tcp_process+0x7dc>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	4a55      	ldr	r2, [pc, #340]	@ (800ea0c <tcp_process+0x7dc>)
 800e8b8:	6013      	str	r3, [r2, #0]
 800e8ba:	e013      	b.n	800e8e4 <tcp_process+0x6b4>
 800e8bc:	4b53      	ldr	r3, [pc, #332]	@ (800ea0c <tcp_process+0x7dc>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	613b      	str	r3, [r7, #16]
 800e8c2:	e00c      	b.n	800e8de <tcp_process+0x6ae>
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d104      	bne.n	800e8d8 <tcp_process+0x6a8>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	68da      	ldr	r2, [r3, #12]
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	60da      	str	r2, [r3, #12]
 800e8d6:	e005      	b.n	800e8e4 <tcp_process+0x6b4>
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	613b      	str	r3, [r7, #16]
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1ef      	bne.n	800e8c4 <tcp_process+0x694>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	60da      	str	r2, [r3, #12]
 800e8ea:	4b43      	ldr	r3, [pc, #268]	@ (800e9f8 <tcp_process+0x7c8>)
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	220a      	movs	r2, #10
 800e8f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e8f6:	4b41      	ldr	r3, [pc, #260]	@ (800e9fc <tcp_process+0x7cc>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	60da      	str	r2, [r3, #12]
 800e8fe:	4a3f      	ldr	r2, [pc, #252]	@ (800e9fc <tcp_process+0x7cc>)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	f003 f8e4 	bl	8011ad0 <tcp_timer_needed>
      }
      break;
 800e908:	e06c      	b.n	800e9e4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f984 	bl	800ec18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e910:	4b3b      	ldr	r3, [pc, #236]	@ (800ea00 <tcp_process+0x7d0>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f003 0310 	and.w	r3, r3, #16
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d065      	beq.n	800e9e8 <tcp_process+0x7b8>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e920:	4b38      	ldr	r3, [pc, #224]	@ (800ea04 <tcp_process+0x7d4>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	429a      	cmp	r2, r3
 800e926:	d15f      	bne.n	800e9e8 <tcp_process+0x7b8>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d15b      	bne.n	800e9e8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7fe fcf1 	bl	800d318 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e936:	4b35      	ldr	r3, [pc, #212]	@ (800ea0c <tcp_process+0x7dc>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d105      	bne.n	800e94c <tcp_process+0x71c>
 800e940:	4b32      	ldr	r3, [pc, #200]	@ (800ea0c <tcp_process+0x7dc>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	4a31      	ldr	r2, [pc, #196]	@ (800ea0c <tcp_process+0x7dc>)
 800e948:	6013      	str	r3, [r2, #0]
 800e94a:	e013      	b.n	800e974 <tcp_process+0x744>
 800e94c:	4b2f      	ldr	r3, [pc, #188]	@ (800ea0c <tcp_process+0x7dc>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	e00c      	b.n	800e96e <tcp_process+0x73e>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d104      	bne.n	800e968 <tcp_process+0x738>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	68da      	ldr	r2, [r3, #12]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	60da      	str	r2, [r3, #12]
 800e966:	e005      	b.n	800e974 <tcp_process+0x744>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	60fb      	str	r3, [r7, #12]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1ef      	bne.n	800e954 <tcp_process+0x724>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	60da      	str	r2, [r3, #12]
 800e97a:	4b1f      	ldr	r3, [pc, #124]	@ (800e9f8 <tcp_process+0x7c8>)
 800e97c:	2201      	movs	r2, #1
 800e97e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	220a      	movs	r2, #10
 800e984:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e986:	4b1d      	ldr	r3, [pc, #116]	@ (800e9fc <tcp_process+0x7cc>)
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	60da      	str	r2, [r3, #12]
 800e98e:	4a1b      	ldr	r2, [pc, #108]	@ (800e9fc <tcp_process+0x7cc>)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6013      	str	r3, [r2, #0]
 800e994:	f003 f89c 	bl	8011ad0 <tcp_timer_needed>
      }
      break;
 800e998:	e026      	b.n	800e9e8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 f93c 	bl	800ec18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e9a0:	4b17      	ldr	r3, [pc, #92]	@ (800ea00 <tcp_process+0x7d0>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	f003 0310 	and.w	r3, r3, #16
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d01f      	beq.n	800e9ec <tcp_process+0x7bc>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9b0:	4b14      	ldr	r3, [pc, #80]	@ (800ea04 <tcp_process+0x7d4>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d119      	bne.n	800e9ec <tcp_process+0x7bc>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d115      	bne.n	800e9ec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e9c0:	4b11      	ldr	r3, [pc, #68]	@ (800ea08 <tcp_process+0x7d8>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	f043 0310 	orr.w	r3, r3, #16
 800e9c8:	b2da      	uxtb	r2, r3
 800e9ca:	4b0f      	ldr	r3, [pc, #60]	@ (800ea08 <tcp_process+0x7d8>)
 800e9cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e9ce:	e00d      	b.n	800e9ec <tcp_process+0x7bc>
    default:
      break;
 800e9d0:	bf00      	nop
 800e9d2:	e00c      	b.n	800e9ee <tcp_process+0x7be>
      break;
 800e9d4:	bf00      	nop
 800e9d6:	e00a      	b.n	800e9ee <tcp_process+0x7be>
      break;
 800e9d8:	bf00      	nop
 800e9da:	e008      	b.n	800e9ee <tcp_process+0x7be>
      break;
 800e9dc:	bf00      	nop
 800e9de:	e006      	b.n	800e9ee <tcp_process+0x7be>
      break;
 800e9e0:	bf00      	nop
 800e9e2:	e004      	b.n	800e9ee <tcp_process+0x7be>
      break;
 800e9e4:	bf00      	nop
 800e9e6:	e002      	b.n	800e9ee <tcp_process+0x7be>
      break;
 800e9e8:	bf00      	nop
 800e9ea:	e000      	b.n	800e9ee <tcp_process+0x7be>
      break;
 800e9ec:	bf00      	nop
  }
  return ERR_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3724      	adds	r7, #36	@ 0x24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd90      	pop	{r4, r7, pc}
 800e9f8:	2000bf7c 	.word	0x2000bf7c
 800e9fc:	2000bf78 	.word	0x2000bf78
 800ea00:	2000bfac 	.word	0x2000bfac
 800ea04:	2000bfa4 	.word	0x2000bfa4
 800ea08:	2000bfad 	.word	0x2000bfad
 800ea0c:	2000bf74 	.word	0x2000bf74

0800ea10 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ea10:	b590      	push	{r4, r7, lr}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d106      	bne.n	800ea2e <tcp_oos_insert_segment+0x1e>
 800ea20:	4b3b      	ldr	r3, [pc, #236]	@ (800eb10 <tcp_oos_insert_segment+0x100>)
 800ea22:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ea26:	493b      	ldr	r1, [pc, #236]	@ (800eb14 <tcp_oos_insert_segment+0x104>)
 800ea28:	483b      	ldr	r0, [pc, #236]	@ (800eb18 <tcp_oos_insert_segment+0x108>)
 800ea2a:	f006 fccb 	bl	80153c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	899b      	ldrh	r3, [r3, #12]
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fb f850 	bl	8009adc <lwip_htons>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	f003 0301 	and.w	r3, r3, #1
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d028      	beq.n	800ea9a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ea48:	6838      	ldr	r0, [r7, #0]
 800ea4a:	f7fe f995 	bl	800cd78 <tcp_segs_free>
    next = NULL;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	603b      	str	r3, [r7, #0]
 800ea52:	e056      	b.n	800eb02 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	899b      	ldrh	r3, [r3, #12]
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fb f83d 	bl	8009adc <lwip_htons>
 800ea62:	4603      	mov	r3, r0
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	f003 0301 	and.w	r3, r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00d      	beq.n	800ea8a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	899b      	ldrh	r3, [r3, #12]
 800ea74:	b29c      	uxth	r4, r3
 800ea76:	2001      	movs	r0, #1
 800ea78:	f7fb f830 	bl	8009adc <lwip_htons>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	461a      	mov	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	4322      	orrs	r2, r4
 800ea86:	b292      	uxth	r2, r2
 800ea88:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f7fe f984 	bl	800cda2 <tcp_seg_free>
    while (next &&
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00e      	beq.n	800eabe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	891b      	ldrh	r3, [r3, #8]
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	4b1d      	ldr	r3, [pc, #116]	@ (800eb1c <tcp_oos_insert_segment+0x10c>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	441a      	add	r2, r3
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	8909      	ldrh	r1, [r1, #8]
 800eab6:	440b      	add	r3, r1
 800eab8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	daca      	bge.n	800ea54 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d01e      	beq.n	800eb02 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	891b      	ldrh	r3, [r3, #8]
 800eac8:	461a      	mov	r2, r3
 800eaca:	4b14      	ldr	r3, [pc, #80]	@ (800eb1c <tcp_oos_insert_segment+0x10c>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	441a      	add	r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ead8:	2b00      	cmp	r3, #0
 800eada:	dd12      	ble.n	800eb02 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	b29a      	uxth	r2, r3
 800eae4:	4b0d      	ldr	r3, [pc, #52]	@ (800eb1c <tcp_oos_insert_segment+0x10c>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	891b      	ldrh	r3, [r3, #8]
 800eafa:	4619      	mov	r1, r3
 800eafc:	4610      	mov	r0, r2
 800eafe:	f7fc fa55 	bl	800afac <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	683a      	ldr	r2, [r7, #0]
 800eb06:	601a      	str	r2, [r3, #0]
}
 800eb08:	bf00      	nop
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd90      	pop	{r4, r7, pc}
 800eb10:	08018328 	.word	0x08018328
 800eb14:	080185e8 	.word	0x080185e8
 800eb18:	08018374 	.word	0x08018374
 800eb1c:	2000bfa0 	.word	0x2000bfa0

0800eb20 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eb20:	b5b0      	push	{r4, r5, r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
 800eb2c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eb2e:	e03e      	b.n	800ebae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fc fc48 	bl	800b3d4 <pbuf_clen>
 800eb44:	4603      	mov	r3, r0
 800eb46:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eb4e:	8a7a      	ldrh	r2, [r7, #18]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d906      	bls.n	800eb62 <tcp_free_acked_segments+0x42>
 800eb54:	4b2a      	ldr	r3, [pc, #168]	@ (800ec00 <tcp_free_acked_segments+0xe0>)
 800eb56:	f240 4257 	movw	r2, #1111	@ 0x457
 800eb5a:	492a      	ldr	r1, [pc, #168]	@ (800ec04 <tcp_free_acked_segments+0xe4>)
 800eb5c:	482a      	ldr	r0, [pc, #168]	@ (800ec08 <tcp_free_acked_segments+0xe8>)
 800eb5e:	f006 fc31 	bl	80153c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800eb68:	8a7b      	ldrh	r3, [r7, #18]
 800eb6a:	1ad3      	subs	r3, r2, r3
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	891a      	ldrh	r2, [r3, #8]
 800eb78:	4b24      	ldr	r3, [pc, #144]	@ (800ec0c <tcp_free_acked_segments+0xec>)
 800eb7a:	881b      	ldrh	r3, [r3, #0]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	b29a      	uxth	r2, r3
 800eb80:	4b22      	ldr	r3, [pc, #136]	@ (800ec0c <tcp_free_acked_segments+0xec>)
 800eb82:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eb84:	6978      	ldr	r0, [r7, #20]
 800eb86:	f7fe f90c 	bl	800cda2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00c      	beq.n	800ebae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d109      	bne.n	800ebae <tcp_free_acked_segments+0x8e>
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d106      	bne.n	800ebae <tcp_free_acked_segments+0x8e>
 800eba0:	4b17      	ldr	r3, [pc, #92]	@ (800ec00 <tcp_free_acked_segments+0xe0>)
 800eba2:	f240 4261 	movw	r2, #1121	@ 0x461
 800eba6:	491a      	ldr	r1, [pc, #104]	@ (800ec10 <tcp_free_acked_segments+0xf0>)
 800eba8:	4817      	ldr	r0, [pc, #92]	@ (800ec08 <tcp_free_acked_segments+0xe8>)
 800ebaa:	f006 fc0b 	bl	80153c4 <iprintf>
  while (seg_list != NULL &&
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d020      	beq.n	800ebf6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fa ffa3 	bl	8009b06 <lwip_htonl>
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	891b      	ldrh	r3, [r3, #8]
 800ebc6:	461d      	mov	r5, r3
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	899b      	ldrh	r3, [r3, #12]
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fa ff83 	bl	8009adc <lwip_htons>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	f003 0303 	and.w	r3, r3, #3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <tcp_free_acked_segments+0xc6>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e000      	b.n	800ebe8 <tcp_free_acked_segments+0xc8>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	442b      	add	r3, r5
 800ebea:	18e2      	adds	r2, r4, r3
 800ebec:	4b09      	ldr	r3, [pc, #36]	@ (800ec14 <tcp_free_acked_segments+0xf4>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	dd9c      	ble.n	800eb30 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ebf6:	68bb      	ldr	r3, [r7, #8]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bdb0      	pop	{r4, r5, r7, pc}
 800ec00:	08018328 	.word	0x08018328
 800ec04:	08018610 	.word	0x08018610
 800ec08:	08018374 	.word	0x08018374
 800ec0c:	2000bfa8 	.word	0x2000bfa8
 800ec10:	08018638 	.word	0x08018638
 800ec14:	2000bfa4 	.word	0x2000bfa4

0800ec18 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ec18:	b5b0      	push	{r4, r5, r7, lr}
 800ec1a:	b094      	sub	sp, #80	@ 0x50
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <tcp_receive+0x20>
 800ec2a:	4b91      	ldr	r3, [pc, #580]	@ (800ee70 <tcp_receive+0x258>)
 800ec2c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ec30:	4990      	ldr	r1, [pc, #576]	@ (800ee74 <tcp_receive+0x25c>)
 800ec32:	4891      	ldr	r0, [pc, #580]	@ (800ee78 <tcp_receive+0x260>)
 800ec34:	f006 fbc6 	bl	80153c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	7d1b      	ldrb	r3, [r3, #20]
 800ec3c:	2b03      	cmp	r3, #3
 800ec3e:	d806      	bhi.n	800ec4e <tcp_receive+0x36>
 800ec40:	4b8b      	ldr	r3, [pc, #556]	@ (800ee70 <tcp_receive+0x258>)
 800ec42:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ec46:	498d      	ldr	r1, [pc, #564]	@ (800ee7c <tcp_receive+0x264>)
 800ec48:	488b      	ldr	r0, [pc, #556]	@ (800ee78 <tcp_receive+0x260>)
 800ec4a:	f006 fbbb 	bl	80153c4 <iprintf>

  if (flags & TCP_ACK) {
 800ec4e:	4b8c      	ldr	r3, [pc, #560]	@ (800ee80 <tcp_receive+0x268>)
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	f003 0310 	and.w	r3, r3, #16
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 8264 	beq.w	800f124 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec62:	461a      	mov	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec68:	4413      	add	r3, r2
 800ec6a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec70:	4b84      	ldr	r3, [pc, #528]	@ (800ee84 <tcp_receive+0x26c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	db1b      	blt.n	800ecb2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec7e:	4b81      	ldr	r3, [pc, #516]	@ (800ee84 <tcp_receive+0x26c>)
 800ec80:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d106      	bne.n	800ec94 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ec8a:	4b7f      	ldr	r3, [pc, #508]	@ (800ee88 <tcp_receive+0x270>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	db0e      	blt.n	800ecb2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ec98:	4b7b      	ldr	r3, [pc, #492]	@ (800ee88 <tcp_receive+0x270>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d125      	bne.n	800ecec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eca0:	4b7a      	ldr	r3, [pc, #488]	@ (800ee8c <tcp_receive+0x274>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	89db      	ldrh	r3, [r3, #14]
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d91c      	bls.n	800ecec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ecb2:	4b76      	ldr	r3, [pc, #472]	@ (800ee8c <tcp_receive+0x274>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	89db      	ldrh	r3, [r3, #14]
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d205      	bcs.n	800ecdc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ecdc:	4b69      	ldr	r3, [pc, #420]	@ (800ee84 <tcp_receive+0x26c>)
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ece4:	4b68      	ldr	r3, [pc, #416]	@ (800ee88 <tcp_receive+0x270>)
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ecec:	4b66      	ldr	r3, [pc, #408]	@ (800ee88 <tcp_receive+0x270>)
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecf4:	1ad3      	subs	r3, r2, r3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	dc58      	bgt.n	800edac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ecfa:	4b65      	ldr	r3, [pc, #404]	@ (800ee90 <tcp_receive+0x278>)
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d14b      	bne.n	800ed9a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ed0c:	4413      	add	r3, r2
 800ed0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d142      	bne.n	800ed9a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	db3d      	blt.n	800ed9a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed22:	4b59      	ldr	r3, [pc, #356]	@ (800ee88 <tcp_receive+0x270>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d137      	bne.n	800ed9a <tcp_receive+0x182>
              found_dupack = 1;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ed34:	2bff      	cmp	r3, #255	@ 0xff
 800ed36:	d007      	beq.n	800ed48 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ed3e:	3301      	adds	r3, #1
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ed4e:	2b03      	cmp	r3, #3
 800ed50:	d91b      	bls.n	800ed8a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed5c:	4413      	add	r3, r2
 800ed5e:	b29a      	uxth	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d30a      	bcc.n	800ed80 <tcp_receive+0x168>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed74:	4413      	add	r3, r2
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ed7e:	e004      	b.n	800ed8a <tcp_receive+0x172>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d902      	bls.n	800ed9a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f002 fb3f 	bl	8011418 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ed9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f040 8161 	bne.w	800f064 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800edaa:	e15b      	b.n	800f064 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800edac:	4b36      	ldr	r3, [pc, #216]	@ (800ee88 <tcp_receive+0x270>)
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	3b01      	subs	r3, #1
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f2c0 814e 	blt.w	800f05a <tcp_receive+0x442>
 800edbe:	4b32      	ldr	r3, [pc, #200]	@ (800ee88 <tcp_receive+0x270>)
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	f300 8146 	bgt.w	800f05a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	8b5b      	ldrh	r3, [r3, #26]
 800edd2:	f003 0304 	and.w	r3, r3, #4
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d010      	beq.n	800edfc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	8b5b      	ldrh	r3, [r3, #26]
 800edde:	f023 0304 	bic.w	r3, r3, #4
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ee0a:	10db      	asrs	r3, r3, #3
 800ee0c:	b21b      	sxth	r3, r3
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	4413      	add	r3, r2
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	b21a      	sxth	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ee24:	4b18      	ldr	r3, [pc, #96]	@ (800ee88 <tcp_receive+0x270>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800ee3c:	4b12      	ldr	r3, [pc, #72]	@ (800ee88 <tcp_receive+0x270>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	7d1b      	ldrb	r3, [r3, #20]
 800ee48:	2b03      	cmp	r3, #3
 800ee4a:	f240 8097 	bls.w	800ef7c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d245      	bcs.n	800eeea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	8b5b      	ldrh	r3, [r3, #26]
 800ee62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d014      	beq.n	800ee94 <tcp_receive+0x27c>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	e013      	b.n	800ee96 <tcp_receive+0x27e>
 800ee6e:	bf00      	nop
 800ee70:	08018328 	.word	0x08018328
 800ee74:	08018658 	.word	0x08018658
 800ee78:	08018374 	.word	0x08018374
 800ee7c:	08018674 	.word	0x08018674
 800ee80:	2000bfac 	.word	0x2000bfac
 800ee84:	2000bfa0 	.word	0x2000bfa0
 800ee88:	2000bfa4 	.word	0x2000bfa4
 800ee8c:	2000bf90 	.word	0x2000bf90
 800ee90:	2000bfaa 	.word	0x2000bfaa
 800ee94:	2302      	movs	r3, #2
 800ee96:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ee9a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eea4:	fb12 f303 	smulbb	r3, r2, r3
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800eeac:	4293      	cmp	r3, r2
 800eeae:	bf28      	it	cs
 800eeb0:	4613      	movcs	r3, r2
 800eeb2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eeba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eebc:	4413      	add	r3, r2
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d309      	bcc.n	800eede <tcp_receive+0x2c6>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eed0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eed2:	4413      	add	r3, r2
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800eedc:	e04e      	b.n	800ef7c <tcp_receive+0x364>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eee4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800eee8:	e048      	b.n	800ef7c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800eef0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800eef2:	4413      	add	r3, r2
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d309      	bcc.n	800ef14 <tcp_receive+0x2fc>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ef06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef08:	4413      	add	r3, r2
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ef12:	e004      	b.n	800ef1e <tcp_receive+0x306>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d326      	bcc.n	800ef7c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef4e:	4413      	add	r3, r2
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d30a      	bcc.n	800ef72 <tcp_receive+0x35a>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef66:	4413      	add	r3, r2
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ef70:	e004      	b.n	800ef7c <tcp_receive+0x364>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef84:	4a98      	ldr	r2, [pc, #608]	@ (800f1e8 <tcp_receive+0x5d0>)
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f7ff fdca 	bl	800eb20 <tcp_free_acked_segments>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef9a:	4a94      	ldr	r2, [pc, #592]	@ (800f1ec <tcp_receive+0x5d4>)
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff fdbf 	bl	800eb20 <tcp_free_acked_segments>
 800efa2:	4602      	mov	r2, r0
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efac:	2b00      	cmp	r3, #0
 800efae:	d104      	bne.n	800efba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efb6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800efb8:	e002      	b.n	800efc0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d103      	bne.n	800efd6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800efdc:	4b84      	ldr	r3, [pc, #528]	@ (800f1f0 <tcp_receive+0x5d8>)
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	4413      	add	r3, r2
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	8b5b      	ldrh	r3, [r3, #26]
 800efee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d035      	beq.n	800f062 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800effa:	2b00      	cmp	r3, #0
 800effc:	d118      	bne.n	800f030 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00c      	beq.n	800f020 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	4618      	mov	r0, r3
 800f014:	f7fa fd77 	bl	8009b06 <lwip_htonl>
 800f018:	4603      	mov	r3, r0
 800f01a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	dc20      	bgt.n	800f062 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	8b5b      	ldrh	r3, [r3, #26]
 800f024:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f028:	b29a      	uxth	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f02e:	e018      	b.n	800f062 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fa fd62 	bl	8009b06 <lwip_htonl>
 800f042:	4603      	mov	r3, r0
 800f044:	1ae3      	subs	r3, r4, r3
 800f046:	2b00      	cmp	r3, #0
 800f048:	dc0b      	bgt.n	800f062 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	8b5b      	ldrh	r3, [r3, #26]
 800f04e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f052:	b29a      	uxth	r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f058:	e003      	b.n	800f062 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f002 fbc8 	bl	80117f0 <tcp_send_empty_ack>
 800f060:	e000      	b.n	800f064 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f062:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d05b      	beq.n	800f124 <tcp_receive+0x50c>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f070:	4b60      	ldr	r3, [pc, #384]	@ (800f1f4 <tcp_receive+0x5dc>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	2b00      	cmp	r3, #0
 800f078:	da54      	bge.n	800f124 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f07a:	4b5f      	ldr	r3, [pc, #380]	@ (800f1f8 <tcp_receive+0x5e0>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	b29a      	uxth	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f084:	b29b      	uxth	r3, r3
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	b29b      	uxth	r3, r3
 800f08a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f08e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f098:	10db      	asrs	r3, r3, #3
 800f09a:	b21b      	sxth	r3, r3
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	1ad3      	subs	r3, r2, r3
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f0b2:	4413      	add	r3, r2
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	b21a      	sxth	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f0bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	da05      	bge.n	800f0d0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f0c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f0c8:	425b      	negs	r3, r3
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f0d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f0da:	109b      	asrs	r3, r3, #2
 800f0dc:	b21b      	sxth	r3, r3
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	1ad3      	subs	r3, r2, r3
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f0f4:	4413      	add	r3, r2
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	b21a      	sxth	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f104:	10db      	asrs	r3, r3, #3
 800f106:	b21b      	sxth	r3, r3
 800f108:	b29a      	uxth	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f110:	b29b      	uxth	r3, r3
 800f112:	4413      	add	r3, r2
 800f114:	b29b      	uxth	r3, r3
 800f116:	b21a      	sxth	r2, r3
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f124:	4b35      	ldr	r3, [pc, #212]	@ (800f1fc <tcp_receive+0x5e4>)
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f000 84df 	beq.w	800faec <tcp_receive+0xed4>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7d1b      	ldrb	r3, [r3, #20]
 800f132:	2b06      	cmp	r3, #6
 800f134:	f200 84da 	bhi.w	800faec <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f13c:	4b30      	ldr	r3, [pc, #192]	@ (800f200 <tcp_receive+0x5e8>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	3b01      	subs	r3, #1
 800f144:	2b00      	cmp	r3, #0
 800f146:	f2c0 808f 	blt.w	800f268 <tcp_receive+0x650>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f14e:	4b2b      	ldr	r3, [pc, #172]	@ (800f1fc <tcp_receive+0x5e4>)
 800f150:	881b      	ldrh	r3, [r3, #0]
 800f152:	4619      	mov	r1, r3
 800f154:	4b2a      	ldr	r3, [pc, #168]	@ (800f200 <tcp_receive+0x5e8>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	440b      	add	r3, r1
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	3301      	adds	r3, #1
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f300 8082 	bgt.w	800f268 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f164:	4b27      	ldr	r3, [pc, #156]	@ (800f204 <tcp_receive+0x5ec>)
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f16e:	4b24      	ldr	r3, [pc, #144]	@ (800f200 <tcp_receive+0x5e8>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f176:	4b23      	ldr	r3, [pc, #140]	@ (800f204 <tcp_receive+0x5ec>)
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d106      	bne.n	800f18c <tcp_receive+0x574>
 800f17e:	4b22      	ldr	r3, [pc, #136]	@ (800f208 <tcp_receive+0x5f0>)
 800f180:	f240 5294 	movw	r2, #1428	@ 0x594
 800f184:	4921      	ldr	r1, [pc, #132]	@ (800f20c <tcp_receive+0x5f4>)
 800f186:	4822      	ldr	r0, [pc, #136]	@ (800f210 <tcp_receive+0x5f8>)
 800f188:	f006 f91c 	bl	80153c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f192:	4293      	cmp	r3, r2
 800f194:	d906      	bls.n	800f1a4 <tcp_receive+0x58c>
 800f196:	4b1c      	ldr	r3, [pc, #112]	@ (800f208 <tcp_receive+0x5f0>)
 800f198:	f240 5295 	movw	r2, #1429	@ 0x595
 800f19c:	491d      	ldr	r1, [pc, #116]	@ (800f214 <tcp_receive+0x5fc>)
 800f19e:	481c      	ldr	r0, [pc, #112]	@ (800f210 <tcp_receive+0x5f8>)
 800f1a0:	f006 f910 	bl	80153c4 <iprintf>
      off = (u16_t)off32;
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f1aa:	4b16      	ldr	r3, [pc, #88]	@ (800f204 <tcp_receive+0x5ec>)
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	891b      	ldrh	r3, [r3, #8]
 800f1b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d906      	bls.n	800f1c6 <tcp_receive+0x5ae>
 800f1b8:	4b13      	ldr	r3, [pc, #76]	@ (800f208 <tcp_receive+0x5f0>)
 800f1ba:	f240 5297 	movw	r2, #1431	@ 0x597
 800f1be:	4916      	ldr	r1, [pc, #88]	@ (800f218 <tcp_receive+0x600>)
 800f1c0:	4813      	ldr	r0, [pc, #76]	@ (800f210 <tcp_receive+0x5f8>)
 800f1c2:	f006 f8ff 	bl	80153c4 <iprintf>
      inseg.len -= off;
 800f1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f204 <tcp_receive+0x5ec>)
 800f1c8:	891a      	ldrh	r2, [r3, #8]
 800f1ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f204 <tcp_receive+0x5ec>)
 800f1d4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f1d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f204 <tcp_receive+0x5ec>)
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	891a      	ldrh	r2, [r3, #8]
 800f1dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f1e4:	e02a      	b.n	800f23c <tcp_receive+0x624>
 800f1e6:	bf00      	nop
 800f1e8:	08018690 	.word	0x08018690
 800f1ec:	08018698 	.word	0x08018698
 800f1f0:	2000bfa8 	.word	0x2000bfa8
 800f1f4:	2000bfa4 	.word	0x2000bfa4
 800f1f8:	2000bf68 	.word	0x2000bf68
 800f1fc:	2000bfaa 	.word	0x2000bfaa
 800f200:	2000bfa0 	.word	0x2000bfa0
 800f204:	2000bf80 	.word	0x2000bf80
 800f208:	08018328 	.word	0x08018328
 800f20c:	080186a0 	.word	0x080186a0
 800f210:	08018374 	.word	0x08018374
 800f214:	080186b0 	.word	0x080186b0
 800f218:	080186c0 	.word	0x080186c0
        off -= p->len;
 800f21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f21e:	895b      	ldrh	r3, [r3, #10]
 800f220:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f224:	1ad3      	subs	r3, r2, r3
 800f226:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f22a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f22c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f22e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f232:	2200      	movs	r2, #0
 800f234:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f23e:	895b      	ldrh	r3, [r3, #10]
 800f240:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f244:	429a      	cmp	r2, r3
 800f246:	d8e9      	bhi.n	800f21c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f24c:	4619      	mov	r1, r3
 800f24e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f250:	f7fb ffac 	bl	800b1ac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f258:	4a90      	ldr	r2, [pc, #576]	@ (800f49c <tcp_receive+0x884>)
 800f25a:	6013      	str	r3, [r2, #0]
 800f25c:	4b90      	ldr	r3, [pc, #576]	@ (800f4a0 <tcp_receive+0x888>)
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	4a8e      	ldr	r2, [pc, #568]	@ (800f49c <tcp_receive+0x884>)
 800f262:	6812      	ldr	r2, [r2, #0]
 800f264:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f266:	e00d      	b.n	800f284 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f268:	4b8c      	ldr	r3, [pc, #560]	@ (800f49c <tcp_receive+0x884>)
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f270:	1ad3      	subs	r3, r2, r3
 800f272:	2b00      	cmp	r3, #0
 800f274:	da06      	bge.n	800f284 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	8b5b      	ldrh	r3, [r3, #26]
 800f27a:	f043 0302 	orr.w	r3, r3, #2
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f284:	4b85      	ldr	r3, [pc, #532]	@ (800f49c <tcp_receive+0x884>)
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f2c0 8427 	blt.w	800fae2 <tcp_receive+0xeca>
 800f294:	4b81      	ldr	r3, [pc, #516]	@ (800f49c <tcp_receive+0x884>)
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f29c:	6879      	ldr	r1, [r7, #4]
 800f29e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f2a0:	440b      	add	r3, r1
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f300 841b 	bgt.w	800fae2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2b0:	4b7a      	ldr	r3, [pc, #488]	@ (800f49c <tcp_receive+0x884>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	f040 8298 	bne.w	800f7ea <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f2ba:	4b79      	ldr	r3, [pc, #484]	@ (800f4a0 <tcp_receive+0x888>)
 800f2bc:	891c      	ldrh	r4, [r3, #8]
 800f2be:	4b78      	ldr	r3, [pc, #480]	@ (800f4a0 <tcp_receive+0x888>)
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	899b      	ldrh	r3, [r3, #12]
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fa fc08 	bl	8009adc <lwip_htons>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	f003 0303 	and.w	r3, r3, #3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <tcp_receive+0x6c4>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	e000      	b.n	800f2de <tcp_receive+0x6c6>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	4423      	add	r3, r4
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	4b70      	ldr	r3, [pc, #448]	@ (800f4a4 <tcp_receive+0x88c>)
 800f2e4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f2ea:	4b6e      	ldr	r3, [pc, #440]	@ (800f4a4 <tcp_receive+0x88c>)
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d274      	bcs.n	800f3dc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f2f2:	4b6b      	ldr	r3, [pc, #428]	@ (800f4a0 <tcp_receive+0x888>)
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	899b      	ldrh	r3, [r3, #12]
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fa fbee 	bl	8009adc <lwip_htons>
 800f300:	4603      	mov	r3, r0
 800f302:	b2db      	uxtb	r3, r3
 800f304:	f003 0301 	and.w	r3, r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d01e      	beq.n	800f34a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f30c:	4b64      	ldr	r3, [pc, #400]	@ (800f4a0 <tcp_receive+0x888>)
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	899b      	ldrh	r3, [r3, #12]
 800f312:	b29b      	uxth	r3, r3
 800f314:	b21b      	sxth	r3, r3
 800f316:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f31a:	b21c      	sxth	r4, r3
 800f31c:	4b60      	ldr	r3, [pc, #384]	@ (800f4a0 <tcp_receive+0x888>)
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	899b      	ldrh	r3, [r3, #12]
 800f322:	b29b      	uxth	r3, r3
 800f324:	4618      	mov	r0, r3
 800f326:	f7fa fbd9 	bl	8009adc <lwip_htons>
 800f32a:	4603      	mov	r3, r0
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f332:	b29b      	uxth	r3, r3
 800f334:	4618      	mov	r0, r3
 800f336:	f7fa fbd1 	bl	8009adc <lwip_htons>
 800f33a:	4603      	mov	r3, r0
 800f33c:	b21b      	sxth	r3, r3
 800f33e:	4323      	orrs	r3, r4
 800f340:	b21a      	sxth	r2, r3
 800f342:	4b57      	ldr	r3, [pc, #348]	@ (800f4a0 <tcp_receive+0x888>)
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	b292      	uxth	r2, r2
 800f348:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f34e:	4b54      	ldr	r3, [pc, #336]	@ (800f4a0 <tcp_receive+0x888>)
 800f350:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f352:	4b53      	ldr	r3, [pc, #332]	@ (800f4a0 <tcp_receive+0x888>)
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	899b      	ldrh	r3, [r3, #12]
 800f358:	b29b      	uxth	r3, r3
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fa fbbe 	bl	8009adc <lwip_htons>
 800f360:	4603      	mov	r3, r0
 800f362:	b2db      	uxtb	r3, r3
 800f364:	f003 0302 	and.w	r3, r3, #2
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d005      	beq.n	800f378 <tcp_receive+0x760>
            inseg.len -= 1;
 800f36c:	4b4c      	ldr	r3, [pc, #304]	@ (800f4a0 <tcp_receive+0x888>)
 800f36e:	891b      	ldrh	r3, [r3, #8]
 800f370:	3b01      	subs	r3, #1
 800f372:	b29a      	uxth	r2, r3
 800f374:	4b4a      	ldr	r3, [pc, #296]	@ (800f4a0 <tcp_receive+0x888>)
 800f376:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f378:	4b49      	ldr	r3, [pc, #292]	@ (800f4a0 <tcp_receive+0x888>)
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	4a48      	ldr	r2, [pc, #288]	@ (800f4a0 <tcp_receive+0x888>)
 800f37e:	8912      	ldrh	r2, [r2, #8]
 800f380:	4611      	mov	r1, r2
 800f382:	4618      	mov	r0, r3
 800f384:	f7fb fe12 	bl	800afac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f388:	4b45      	ldr	r3, [pc, #276]	@ (800f4a0 <tcp_receive+0x888>)
 800f38a:	891c      	ldrh	r4, [r3, #8]
 800f38c:	4b44      	ldr	r3, [pc, #272]	@ (800f4a0 <tcp_receive+0x888>)
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	899b      	ldrh	r3, [r3, #12]
 800f392:	b29b      	uxth	r3, r3
 800f394:	4618      	mov	r0, r3
 800f396:	f7fa fba1 	bl	8009adc <lwip_htons>
 800f39a:	4603      	mov	r3, r0
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	f003 0303 	and.w	r3, r3, #3
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d001      	beq.n	800f3aa <tcp_receive+0x792>
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e000      	b.n	800f3ac <tcp_receive+0x794>
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	4423      	add	r3, r4
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	4b3c      	ldr	r3, [pc, #240]	@ (800f4a4 <tcp_receive+0x88c>)
 800f3b2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f3b4:	4b3b      	ldr	r3, [pc, #236]	@ (800f4a4 <tcp_receive+0x88c>)
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	4b38      	ldr	r3, [pc, #224]	@ (800f49c <tcp_receive+0x884>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	441a      	add	r2, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c4:	6879      	ldr	r1, [r7, #4]
 800f3c6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f3c8:	440b      	add	r3, r1
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d006      	beq.n	800f3dc <tcp_receive+0x7c4>
 800f3ce:	4b36      	ldr	r3, [pc, #216]	@ (800f4a8 <tcp_receive+0x890>)
 800f3d0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f3d4:	4935      	ldr	r1, [pc, #212]	@ (800f4ac <tcp_receive+0x894>)
 800f3d6:	4836      	ldr	r0, [pc, #216]	@ (800f4b0 <tcp_receive+0x898>)
 800f3d8:	f005 fff4 	bl	80153c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f000 80e6 	beq.w	800f5b2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f3e6:	4b2e      	ldr	r3, [pc, #184]	@ (800f4a0 <tcp_receive+0x888>)
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	899b      	ldrh	r3, [r3, #12]
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fa fb74 	bl	8009adc <lwip_htons>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	f003 0301 	and.w	r3, r3, #1
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d010      	beq.n	800f422 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f400:	e00a      	b.n	800f418 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f406:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f412:	68f8      	ldr	r0, [r7, #12]
 800f414:	f7fd fcc5 	bl	800cda2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d1f0      	bne.n	800f402 <tcp_receive+0x7ea>
 800f420:	e0c7      	b.n	800f5b2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f426:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f428:	e051      	b.n	800f4ce <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f42a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	899b      	ldrh	r3, [r3, #12]
 800f430:	b29b      	uxth	r3, r3
 800f432:	4618      	mov	r0, r3
 800f434:	f7fa fb52 	bl	8009adc <lwip_htons>
 800f438:	4603      	mov	r3, r0
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	f003 0301 	and.w	r3, r3, #1
 800f440:	2b00      	cmp	r3, #0
 800f442:	d03c      	beq.n	800f4be <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f444:	4b16      	ldr	r3, [pc, #88]	@ (800f4a0 <tcp_receive+0x888>)
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	899b      	ldrh	r3, [r3, #12]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fa fb45 	bl	8009adc <lwip_htons>
 800f452:	4603      	mov	r3, r0
 800f454:	b2db      	uxtb	r3, r3
 800f456:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d12f      	bne.n	800f4be <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f45e:	4b10      	ldr	r3, [pc, #64]	@ (800f4a0 <tcp_receive+0x888>)
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	899b      	ldrh	r3, [r3, #12]
 800f464:	b29c      	uxth	r4, r3
 800f466:	2001      	movs	r0, #1
 800f468:	f7fa fb38 	bl	8009adc <lwip_htons>
 800f46c:	4603      	mov	r3, r0
 800f46e:	461a      	mov	r2, r3
 800f470:	4b0b      	ldr	r3, [pc, #44]	@ (800f4a0 <tcp_receive+0x888>)
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	4322      	orrs	r2, r4
 800f476:	b292      	uxth	r2, r2
 800f478:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f47a:	4b09      	ldr	r3, [pc, #36]	@ (800f4a0 <tcp_receive+0x888>)
 800f47c:	891c      	ldrh	r4, [r3, #8]
 800f47e:	4b08      	ldr	r3, [pc, #32]	@ (800f4a0 <tcp_receive+0x888>)
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	899b      	ldrh	r3, [r3, #12]
 800f484:	b29b      	uxth	r3, r3
 800f486:	4618      	mov	r0, r3
 800f488:	f7fa fb28 	bl	8009adc <lwip_htons>
 800f48c:	4603      	mov	r3, r0
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	f003 0303 	and.w	r3, r3, #3
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00d      	beq.n	800f4b4 <tcp_receive+0x89c>
 800f498:	2301      	movs	r3, #1
 800f49a:	e00c      	b.n	800f4b6 <tcp_receive+0x89e>
 800f49c:	2000bfa0 	.word	0x2000bfa0
 800f4a0:	2000bf80 	.word	0x2000bf80
 800f4a4:	2000bfaa 	.word	0x2000bfaa
 800f4a8:	08018328 	.word	0x08018328
 800f4ac:	080186d0 	.word	0x080186d0
 800f4b0:	08018374 	.word	0x08018374
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	4423      	add	r3, r4
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	4b98      	ldr	r3, [pc, #608]	@ (800f71c <tcp_receive+0xb04>)
 800f4bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f4c8:	6938      	ldr	r0, [r7, #16]
 800f4ca:	f7fd fc6a 	bl	800cda2 <tcp_seg_free>
            while (next &&
 800f4ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00e      	beq.n	800f4f2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f4d4:	4b91      	ldr	r3, [pc, #580]	@ (800f71c <tcp_receive+0xb04>)
 800f4d6:	881b      	ldrh	r3, [r3, #0]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	4b91      	ldr	r3, [pc, #580]	@ (800f720 <tcp_receive+0xb08>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	441a      	add	r2, r3
 800f4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f4e8:	8909      	ldrh	r1, [r1, #8]
 800f4ea:	440b      	add	r3, r1
 800f4ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	da9b      	bge.n	800f42a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f4f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d059      	beq.n	800f5ac <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f4f8:	4b88      	ldr	r3, [pc, #544]	@ (800f71c <tcp_receive+0xb04>)
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	4b88      	ldr	r3, [pc, #544]	@ (800f720 <tcp_receive+0xb08>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	441a      	add	r2, r3
 800f504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	dd4d      	ble.n	800f5ac <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	b29a      	uxth	r2, r3
 800f518:	4b81      	ldr	r3, [pc, #516]	@ (800f720 <tcp_receive+0xb08>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	b29a      	uxth	r2, r3
 800f522:	4b80      	ldr	r3, [pc, #512]	@ (800f724 <tcp_receive+0xb0c>)
 800f524:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f526:	4b7f      	ldr	r3, [pc, #508]	@ (800f724 <tcp_receive+0xb0c>)
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	899b      	ldrh	r3, [r3, #12]
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fa fad4 	bl	8009adc <lwip_htons>
 800f534:	4603      	mov	r3, r0
 800f536:	b2db      	uxtb	r3, r3
 800f538:	f003 0302 	and.w	r3, r3, #2
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d005      	beq.n	800f54c <tcp_receive+0x934>
                inseg.len -= 1;
 800f540:	4b78      	ldr	r3, [pc, #480]	@ (800f724 <tcp_receive+0xb0c>)
 800f542:	891b      	ldrh	r3, [r3, #8]
 800f544:	3b01      	subs	r3, #1
 800f546:	b29a      	uxth	r2, r3
 800f548:	4b76      	ldr	r3, [pc, #472]	@ (800f724 <tcp_receive+0xb0c>)
 800f54a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f54c:	4b75      	ldr	r3, [pc, #468]	@ (800f724 <tcp_receive+0xb0c>)
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	4a74      	ldr	r2, [pc, #464]	@ (800f724 <tcp_receive+0xb0c>)
 800f552:	8912      	ldrh	r2, [r2, #8]
 800f554:	4611      	mov	r1, r2
 800f556:	4618      	mov	r0, r3
 800f558:	f7fb fd28 	bl	800afac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f55c:	4b71      	ldr	r3, [pc, #452]	@ (800f724 <tcp_receive+0xb0c>)
 800f55e:	891c      	ldrh	r4, [r3, #8]
 800f560:	4b70      	ldr	r3, [pc, #448]	@ (800f724 <tcp_receive+0xb0c>)
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	899b      	ldrh	r3, [r3, #12]
 800f566:	b29b      	uxth	r3, r3
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fa fab7 	bl	8009adc <lwip_htons>
 800f56e:	4603      	mov	r3, r0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	f003 0303 	and.w	r3, r3, #3
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <tcp_receive+0x966>
 800f57a:	2301      	movs	r3, #1
 800f57c:	e000      	b.n	800f580 <tcp_receive+0x968>
 800f57e:	2300      	movs	r3, #0
 800f580:	4423      	add	r3, r4
 800f582:	b29a      	uxth	r2, r3
 800f584:	4b65      	ldr	r3, [pc, #404]	@ (800f71c <tcp_receive+0xb04>)
 800f586:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f588:	4b64      	ldr	r3, [pc, #400]	@ (800f71c <tcp_receive+0xb04>)
 800f58a:	881b      	ldrh	r3, [r3, #0]
 800f58c:	461a      	mov	r2, r3
 800f58e:	4b64      	ldr	r3, [pc, #400]	@ (800f720 <tcp_receive+0xb08>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	441a      	add	r2, r3
 800f594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d006      	beq.n	800f5ac <tcp_receive+0x994>
 800f59e:	4b62      	ldr	r3, [pc, #392]	@ (800f728 <tcp_receive+0xb10>)
 800f5a0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f5a4:	4961      	ldr	r1, [pc, #388]	@ (800f72c <tcp_receive+0xb14>)
 800f5a6:	4862      	ldr	r0, [pc, #392]	@ (800f730 <tcp_receive+0xb18>)
 800f5a8:	f005 ff0c 	bl	80153c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f5b0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f5b2:	4b5a      	ldr	r3, [pc, #360]	@ (800f71c <tcp_receive+0xb04>)
 800f5b4:	881b      	ldrh	r3, [r3, #0]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	4b59      	ldr	r3, [pc, #356]	@ (800f720 <tcp_receive+0xb08>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	441a      	add	r2, r3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f5c6:	4b55      	ldr	r3, [pc, #340]	@ (800f71c <tcp_receive+0xb04>)
 800f5c8:	881b      	ldrh	r3, [r3, #0]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d206      	bcs.n	800f5dc <tcp_receive+0x9c4>
 800f5ce:	4b56      	ldr	r3, [pc, #344]	@ (800f728 <tcp_receive+0xb10>)
 800f5d0:	f240 6207 	movw	r2, #1543	@ 0x607
 800f5d4:	4957      	ldr	r1, [pc, #348]	@ (800f734 <tcp_receive+0xb1c>)
 800f5d6:	4856      	ldr	r0, [pc, #344]	@ (800f730 <tcp_receive+0xb18>)
 800f5d8:	f005 fef4 	bl	80153c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f5e0:	4b4e      	ldr	r3, [pc, #312]	@ (800f71c <tcp_receive+0xb04>)
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7fc fd99 	bl	800c124 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f5f2:	4b4c      	ldr	r3, [pc, #304]	@ (800f724 <tcp_receive+0xb0c>)
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	891b      	ldrh	r3, [r3, #8]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d006      	beq.n	800f60a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f5fc:	4b49      	ldr	r3, [pc, #292]	@ (800f724 <tcp_receive+0xb0c>)
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	4a4d      	ldr	r2, [pc, #308]	@ (800f738 <tcp_receive+0xb20>)
 800f602:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f604:	4b47      	ldr	r3, [pc, #284]	@ (800f724 <tcp_receive+0xb0c>)
 800f606:	2200      	movs	r2, #0
 800f608:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f60a:	4b46      	ldr	r3, [pc, #280]	@ (800f724 <tcp_receive+0xb0c>)
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	899b      	ldrh	r3, [r3, #12]
 800f610:	b29b      	uxth	r3, r3
 800f612:	4618      	mov	r0, r3
 800f614:	f7fa fa62 	bl	8009adc <lwip_htons>
 800f618:	4603      	mov	r3, r0
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	f003 0301 	and.w	r3, r3, #1
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 80b8 	beq.w	800f796 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f626:	4b45      	ldr	r3, [pc, #276]	@ (800f73c <tcp_receive+0xb24>)
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	f043 0320 	orr.w	r3, r3, #32
 800f62e:	b2da      	uxtb	r2, r3
 800f630:	4b42      	ldr	r3, [pc, #264]	@ (800f73c <tcp_receive+0xb24>)
 800f632:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f634:	e0af      	b.n	800f796 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f63a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	4a36      	ldr	r2, [pc, #216]	@ (800f720 <tcp_receive+0xb08>)
 800f646:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	891b      	ldrh	r3, [r3, #8]
 800f64c:	461c      	mov	r4, r3
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	899b      	ldrh	r3, [r3, #12]
 800f654:	b29b      	uxth	r3, r3
 800f656:	4618      	mov	r0, r3
 800f658:	f7fa fa40 	bl	8009adc <lwip_htons>
 800f65c:	4603      	mov	r3, r0
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	f003 0303 	and.w	r3, r3, #3
 800f664:	2b00      	cmp	r3, #0
 800f666:	d001      	beq.n	800f66c <tcp_receive+0xa54>
 800f668:	2301      	movs	r3, #1
 800f66a:	e000      	b.n	800f66e <tcp_receive+0xa56>
 800f66c:	2300      	movs	r3, #0
 800f66e:	191a      	adds	r2, r3, r4
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f674:	441a      	add	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f67e:	461c      	mov	r4, r3
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	891b      	ldrh	r3, [r3, #8]
 800f684:	461d      	mov	r5, r3
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	899b      	ldrh	r3, [r3, #12]
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fa fa24 	bl	8009adc <lwip_htons>
 800f694:	4603      	mov	r3, r0
 800f696:	b2db      	uxtb	r3, r3
 800f698:	f003 0303 	and.w	r3, r3, #3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <tcp_receive+0xa8c>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e000      	b.n	800f6a6 <tcp_receive+0xa8e>
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	442b      	add	r3, r5
 800f6a8:	429c      	cmp	r4, r3
 800f6aa:	d206      	bcs.n	800f6ba <tcp_receive+0xaa2>
 800f6ac:	4b1e      	ldr	r3, [pc, #120]	@ (800f728 <tcp_receive+0xb10>)
 800f6ae:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f6b2:	4923      	ldr	r1, [pc, #140]	@ (800f740 <tcp_receive+0xb28>)
 800f6b4:	481e      	ldr	r0, [pc, #120]	@ (800f730 <tcp_receive+0xb18>)
 800f6b6:	f005 fe85 	bl	80153c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	891b      	ldrh	r3, [r3, #8]
 800f6be:	461c      	mov	r4, r3
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	899b      	ldrh	r3, [r3, #12]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fa fa07 	bl	8009adc <lwip_htons>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	f003 0303 	and.w	r3, r3, #3
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d001      	beq.n	800f6de <tcp_receive+0xac6>
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e000      	b.n	800f6e0 <tcp_receive+0xac8>
 800f6de:	2300      	movs	r3, #0
 800f6e0:	1919      	adds	r1, r3, r4
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f6e6:	b28b      	uxth	r3, r1
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f7fc fd17 	bl	800c124 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	891b      	ldrh	r3, [r3, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d028      	beq.n	800f752 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f700:	4b0d      	ldr	r3, [pc, #52]	@ (800f738 <tcp_receive+0xb20>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d01d      	beq.n	800f744 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f708:	4b0b      	ldr	r3, [pc, #44]	@ (800f738 <tcp_receive+0xb20>)
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	4619      	mov	r1, r3
 800f712:	4610      	mov	r0, r2
 800f714:	f7fb fe9e 	bl	800b454 <pbuf_cat>
 800f718:	e018      	b.n	800f74c <tcp_receive+0xb34>
 800f71a:	bf00      	nop
 800f71c:	2000bfaa 	.word	0x2000bfaa
 800f720:	2000bfa0 	.word	0x2000bfa0
 800f724:	2000bf80 	.word	0x2000bf80
 800f728:	08018328 	.word	0x08018328
 800f72c:	08018708 	.word	0x08018708
 800f730:	08018374 	.word	0x08018374
 800f734:	08018744 	.word	0x08018744
 800f738:	2000bfb0 	.word	0x2000bfb0
 800f73c:	2000bfad 	.word	0x2000bfad
 800f740:	08018764 	.word	0x08018764
            } else {
              recv_data = cseg->p;
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	4a70      	ldr	r2, [pc, #448]	@ (800f90c <tcp_receive+0xcf4>)
 800f74a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	2200      	movs	r2, #0
 800f750:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	899b      	ldrh	r3, [r3, #12]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fa f9be 	bl	8009adc <lwip_htons>
 800f760:	4603      	mov	r3, r0
 800f762:	b2db      	uxtb	r3, r3
 800f764:	f003 0301 	and.w	r3, r3, #1
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00d      	beq.n	800f788 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f76c:	4b68      	ldr	r3, [pc, #416]	@ (800f910 <tcp_receive+0xcf8>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	f043 0320 	orr.w	r3, r3, #32
 800f774:	b2da      	uxtb	r2, r3
 800f776:	4b66      	ldr	r3, [pc, #408]	@ (800f910 <tcp_receive+0xcf8>)
 800f778:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	7d1b      	ldrb	r3, [r3, #20]
 800f77e:	2b04      	cmp	r3, #4
 800f780:	d102      	bne.n	800f788 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2207      	movs	r2, #7
 800f786:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f790:	68b8      	ldr	r0, [r7, #8]
 800f792:	f7fd fb06 	bl	800cda2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d008      	beq.n	800f7b0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	f43f af43 	beq.w	800f636 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	8b5b      	ldrh	r3, [r3, #26]
 800f7b4:	f003 0301 	and.w	r3, r3, #1
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00e      	beq.n	800f7da <tcp_receive+0xbc2>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	8b5b      	ldrh	r3, [r3, #26]
 800f7c0:	f023 0301 	bic.w	r3, r3, #1
 800f7c4:	b29a      	uxth	r2, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	835a      	strh	r2, [r3, #26]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	8b5b      	ldrh	r3, [r3, #26]
 800f7ce:	f043 0302 	orr.w	r3, r3, #2
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7d8:	e187      	b.n	800faea <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	8b5b      	ldrh	r3, [r3, #26]
 800f7de:	f043 0301 	orr.w	r3, r3, #1
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7e8:	e17f      	b.n	800faea <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f7f2:	4848      	ldr	r0, [pc, #288]	@ (800f914 <tcp_receive+0xcfc>)
 800f7f4:	f7fd faee 	bl	800cdd4 <tcp_seg_copy>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	675a      	str	r2, [r3, #116]	@ 0x74
 800f7fe:	e16c      	b.n	800fada <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f800:	2300      	movs	r3, #0
 800f802:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f808:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f80a:	e156      	b.n	800faba <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	685a      	ldr	r2, [r3, #4]
 800f812:	4b41      	ldr	r3, [pc, #260]	@ (800f918 <tcp_receive+0xd00>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	429a      	cmp	r2, r3
 800f818:	d11d      	bne.n	800f856 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f81a:	4b3e      	ldr	r3, [pc, #248]	@ (800f914 <tcp_receive+0xcfc>)
 800f81c:	891a      	ldrh	r2, [r3, #8]
 800f81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f820:	891b      	ldrh	r3, [r3, #8]
 800f822:	429a      	cmp	r2, r3
 800f824:	f240 814e 	bls.w	800fac4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f828:	483a      	ldr	r0, [pc, #232]	@ (800f914 <tcp_receive+0xcfc>)
 800f82a:	f7fd fad3 	bl	800cdd4 <tcp_seg_copy>
 800f82e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	2b00      	cmp	r3, #0
 800f834:	f000 8148 	beq.w	800fac8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d003      	beq.n	800f846 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f83e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	601a      	str	r2, [r3, #0]
 800f844:	e002      	b.n	800f84c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	697a      	ldr	r2, [r7, #20]
 800f84a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f84c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f84e:	6978      	ldr	r0, [r7, #20]
 800f850:	f7ff f8de 	bl	800ea10 <tcp_oos_insert_segment>
                }
                break;
 800f854:	e138      	b.n	800fac8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d117      	bne.n	800f88c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f85c:	4b2e      	ldr	r3, [pc, #184]	@ (800f918 <tcp_receive+0xd00>)
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	da57      	bge.n	800f91c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f86c:	4829      	ldr	r0, [pc, #164]	@ (800f914 <tcp_receive+0xcfc>)
 800f86e:	f7fd fab1 	bl	800cdd4 <tcp_seg_copy>
 800f872:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f874:	69bb      	ldr	r3, [r7, #24]
 800f876:	2b00      	cmp	r3, #0
 800f878:	f000 8128 	beq.w	800facc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	69ba      	ldr	r2, [r7, #24]
 800f880:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f882:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f884:	69b8      	ldr	r0, [r7, #24]
 800f886:	f7ff f8c3 	bl	800ea10 <tcp_oos_insert_segment>
                  }
                  break;
 800f88a:	e11f      	b.n	800facc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f88c:	4b22      	ldr	r3, [pc, #136]	@ (800f918 <tcp_receive+0xd00>)
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	3b01      	subs	r3, #1
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	db3e      	blt.n	800f91c <tcp_receive+0xd04>
 800f89e:	4b1e      	ldr	r3, [pc, #120]	@ (800f918 <tcp_receive+0xd00>)
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	1ad3      	subs	r3, r2, r3
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	dc35      	bgt.n	800f91c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8b0:	4818      	ldr	r0, [pc, #96]	@ (800f914 <tcp_receive+0xcfc>)
 800f8b2:	f7fd fa8f 	bl	800cdd4 <tcp_seg_copy>
 800f8b6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f000 8108 	beq.w	800fad0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8c8:	8912      	ldrh	r2, [r2, #8]
 800f8ca:	441a      	add	r2, r3
 800f8cc:	4b12      	ldr	r3, [pc, #72]	@ (800f918 <tcp_receive+0xd00>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	dd12      	ble.n	800f8fc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f8d6:	4b10      	ldr	r3, [pc, #64]	@ (800f918 <tcp_receive+0xd00>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	1ad3      	subs	r3, r2, r3
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8ea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8ee:	685a      	ldr	r2, [r3, #4]
 800f8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8f2:	891b      	ldrh	r3, [r3, #8]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4610      	mov	r0, r2
 800f8f8:	f7fb fb58 	bl	800afac <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8fe:	69fa      	ldr	r2, [r7, #28]
 800f900:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f902:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f904:	69f8      	ldr	r0, [r7, #28]
 800f906:	f7ff f883 	bl	800ea10 <tcp_oos_insert_segment>
                  }
                  break;
 800f90a:	e0e1      	b.n	800fad0 <tcp_receive+0xeb8>
 800f90c:	2000bfb0 	.word	0x2000bfb0
 800f910:	2000bfad 	.word	0x2000bfad
 800f914:	2000bf80 	.word	0x2000bf80
 800f918:	2000bfa0 	.word	0x2000bfa0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f91e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	f040 80c5 	bne.w	800fab4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f92a:	4b7f      	ldr	r3, [pc, #508]	@ (800fb28 <tcp_receive+0xf10>)
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f936:	2b00      	cmp	r3, #0
 800f938:	f340 80bc 	ble.w	800fab4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	899b      	ldrh	r3, [r3, #12]
 800f942:	b29b      	uxth	r3, r3
 800f944:	4618      	mov	r0, r3
 800f946:	f7fa f8c9 	bl	8009adc <lwip_htons>
 800f94a:	4603      	mov	r3, r0
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	2b00      	cmp	r3, #0
 800f954:	f040 80be 	bne.w	800fad4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f958:	4874      	ldr	r0, [pc, #464]	@ (800fb2c <tcp_receive+0xf14>)
 800f95a:	f7fd fa3b 	bl	800cdd4 <tcp_seg_copy>
 800f95e:	4602      	mov	r2, r0
 800f960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f962:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 80b5 	beq.w	800fad8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f976:	8912      	ldrh	r2, [r2, #8]
 800f978:	441a      	add	r2, r3
 800f97a:	4b6b      	ldr	r3, [pc, #428]	@ (800fb28 <tcp_receive+0xf10>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	dd12      	ble.n	800f9aa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f984:	4b68      	ldr	r3, [pc, #416]	@ (800fb28 <tcp_receive+0xf10>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	b29a      	uxth	r2, r3
 800f98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	b29b      	uxth	r3, r3
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	b29a      	uxth	r2, r3
 800f996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f998:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99c:	685a      	ldr	r2, [r3, #4]
 800f99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a0:	891b      	ldrh	r3, [r3, #8]
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	4610      	mov	r0, r2
 800f9a6:	f7fb fb01 	bl	800afac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f9aa:	4b61      	ldr	r3, [pc, #388]	@ (800fb30 <tcp_receive+0xf18>)
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	4b5d      	ldr	r3, [pc, #372]	@ (800fb28 <tcp_receive+0xf10>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	441a      	add	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9ba:	6879      	ldr	r1, [r7, #4]
 800f9bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f9be:	440b      	add	r3, r1
 800f9c0:	1ad3      	subs	r3, r2, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f340 8088 	ble.w	800fad8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	899b      	ldrh	r3, [r3, #12]
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fa f882 	bl	8009adc <lwip_htons>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	f003 0301 	and.w	r3, r3, #1
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d021      	beq.n	800fa28 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	899b      	ldrh	r3, [r3, #12]
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	b21b      	sxth	r3, r3
 800f9f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f9f4:	b21c      	sxth	r4, r3
 800f9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	899b      	ldrh	r3, [r3, #12]
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7fa f86b 	bl	8009adc <lwip_htons>
 800fa06:	4603      	mov	r3, r0
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fa f863 	bl	8009adc <lwip_htons>
 800fa16:	4603      	mov	r3, r0
 800fa18:	b21b      	sxth	r3, r3
 800fa1a:	4323      	orrs	r3, r4
 800fa1c:	b21a      	sxth	r2, r3
 800fa1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	b292      	uxth	r2, r2
 800fa26:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa2c:	b29a      	uxth	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa32:	4413      	add	r3, r2
 800fa34:	b299      	uxth	r1, r3
 800fa36:	4b3c      	ldr	r3, [pc, #240]	@ (800fb28 <tcp_receive+0xf10>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	1a8a      	subs	r2, r1, r2
 800fa42:	b292      	uxth	r2, r2
 800fa44:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	891b      	ldrh	r3, [r3, #8]
 800fa52:	4619      	mov	r1, r3
 800fa54:	4610      	mov	r0, r2
 800fa56:	f7fb faa9 	bl	800afac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	891c      	ldrh	r4, [r3, #8]
 800fa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	68db      	ldr	r3, [r3, #12]
 800fa66:	899b      	ldrh	r3, [r3, #12]
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fa f836 	bl	8009adc <lwip_htons>
 800fa70:	4603      	mov	r3, r0
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	f003 0303 	and.w	r3, r3, #3
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d001      	beq.n	800fa80 <tcp_receive+0xe68>
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	e000      	b.n	800fa82 <tcp_receive+0xe6a>
 800fa80:	2300      	movs	r3, #0
 800fa82:	4423      	add	r3, r4
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	4b2a      	ldr	r3, [pc, #168]	@ (800fb30 <tcp_receive+0xf18>)
 800fa88:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa8a:	4b29      	ldr	r3, [pc, #164]	@ (800fb30 <tcp_receive+0xf18>)
 800fa8c:	881b      	ldrh	r3, [r3, #0]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	4b25      	ldr	r3, [pc, #148]	@ (800fb28 <tcp_receive+0xf10>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	441a      	add	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa9a:	6879      	ldr	r1, [r7, #4]
 800fa9c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fa9e:	440b      	add	r3, r1
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d019      	beq.n	800fad8 <tcp_receive+0xec0>
 800faa4:	4b23      	ldr	r3, [pc, #140]	@ (800fb34 <tcp_receive+0xf1c>)
 800faa6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800faaa:	4923      	ldr	r1, [pc, #140]	@ (800fb38 <tcp_receive+0xf20>)
 800faac:	4823      	ldr	r0, [pc, #140]	@ (800fb3c <tcp_receive+0xf24>)
 800faae:	f005 fc89 	bl	80153c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fab2:	e011      	b.n	800fad8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800faba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f47f aea5 	bne.w	800f80c <tcp_receive+0xbf4>
 800fac2:	e00a      	b.n	800fada <tcp_receive+0xec2>
                break;
 800fac4:	bf00      	nop
 800fac6:	e008      	b.n	800fada <tcp_receive+0xec2>
                break;
 800fac8:	bf00      	nop
 800faca:	e006      	b.n	800fada <tcp_receive+0xec2>
                  break;
 800facc:	bf00      	nop
 800face:	e004      	b.n	800fada <tcp_receive+0xec2>
                  break;
 800fad0:	bf00      	nop
 800fad2:	e002      	b.n	800fada <tcp_receive+0xec2>
                  break;
 800fad4:	bf00      	nop
 800fad6:	e000      	b.n	800fada <tcp_receive+0xec2>
                break;
 800fad8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f001 fe88 	bl	80117f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fae0:	e003      	b.n	800faea <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f001 fe84 	bl	80117f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fae8:	e01a      	b.n	800fb20 <tcp_receive+0xf08>
 800faea:	e019      	b.n	800fb20 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800faec:	4b0e      	ldr	r3, [pc, #56]	@ (800fb28 <tcp_receive+0xf10>)
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faf4:	1ad3      	subs	r3, r2, r3
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	db0a      	blt.n	800fb10 <tcp_receive+0xef8>
 800fafa:	4b0b      	ldr	r3, [pc, #44]	@ (800fb28 <tcp_receive+0xf10>)
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb02:	6879      	ldr	r1, [r7, #4]
 800fb04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fb06:	440b      	add	r3, r1
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	dd07      	ble.n	800fb20 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	8b5b      	ldrh	r3, [r3, #26]
 800fb14:	f043 0302 	orr.w	r3, r3, #2
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fb1e:	e7ff      	b.n	800fb20 <tcp_receive+0xf08>
 800fb20:	bf00      	nop
 800fb22:	3750      	adds	r7, #80	@ 0x50
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bdb0      	pop	{r4, r5, r7, pc}
 800fb28:	2000bfa0 	.word	0x2000bfa0
 800fb2c:	2000bf80 	.word	0x2000bf80
 800fb30:	2000bfaa 	.word	0x2000bfaa
 800fb34:	08018328 	.word	0x08018328
 800fb38:	080186d0 	.word	0x080186d0
 800fb3c:	08018374 	.word	0x08018374

0800fb40 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fb46:	4b15      	ldr	r3, [pc, #84]	@ (800fb9c <tcp_get_next_optbyte+0x5c>)
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	1c5a      	adds	r2, r3, #1
 800fb4c:	b291      	uxth	r1, r2
 800fb4e:	4a13      	ldr	r2, [pc, #76]	@ (800fb9c <tcp_get_next_optbyte+0x5c>)
 800fb50:	8011      	strh	r1, [r2, #0]
 800fb52:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb54:	4b12      	ldr	r3, [pc, #72]	@ (800fba0 <tcp_get_next_optbyte+0x60>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d004      	beq.n	800fb66 <tcp_get_next_optbyte+0x26>
 800fb5c:	4b11      	ldr	r3, [pc, #68]	@ (800fba4 <tcp_get_next_optbyte+0x64>)
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	88fa      	ldrh	r2, [r7, #6]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d208      	bcs.n	800fb78 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fb66:	4b10      	ldr	r3, [pc, #64]	@ (800fba8 <tcp_get_next_optbyte+0x68>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	3314      	adds	r3, #20
 800fb6c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fb6e:	88fb      	ldrh	r3, [r7, #6]
 800fb70:	683a      	ldr	r2, [r7, #0]
 800fb72:	4413      	add	r3, r2
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	e00b      	b.n	800fb90 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb78:	88fb      	ldrh	r3, [r7, #6]
 800fb7a:	b2da      	uxtb	r2, r3
 800fb7c:	4b09      	ldr	r3, [pc, #36]	@ (800fba4 <tcp_get_next_optbyte+0x64>)
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fb86:	4b06      	ldr	r3, [pc, #24]	@ (800fba0 <tcp_get_next_optbyte+0x60>)
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	797b      	ldrb	r3, [r7, #5]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	2000bf9c 	.word	0x2000bf9c
 800fba0:	2000bf98 	.word	0x2000bf98
 800fba4:	2000bf96 	.word	0x2000bf96
 800fba8:	2000bf90 	.word	0x2000bf90

0800fbac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b084      	sub	sp, #16
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d106      	bne.n	800fbc8 <tcp_parseopt+0x1c>
 800fbba:	4b32      	ldr	r3, [pc, #200]	@ (800fc84 <tcp_parseopt+0xd8>)
 800fbbc:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fbc0:	4931      	ldr	r1, [pc, #196]	@ (800fc88 <tcp_parseopt+0xdc>)
 800fbc2:	4832      	ldr	r0, [pc, #200]	@ (800fc8c <tcp_parseopt+0xe0>)
 800fbc4:	f005 fbfe 	bl	80153c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fbc8:	4b31      	ldr	r3, [pc, #196]	@ (800fc90 <tcp_parseopt+0xe4>)
 800fbca:	881b      	ldrh	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d056      	beq.n	800fc7e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fbd0:	4b30      	ldr	r3, [pc, #192]	@ (800fc94 <tcp_parseopt+0xe8>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	801a      	strh	r2, [r3, #0]
 800fbd6:	e046      	b.n	800fc66 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fbd8:	f7ff ffb2 	bl	800fb40 <tcp_get_next_optbyte>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fbe0:	7bfb      	ldrb	r3, [r7, #15]
 800fbe2:	2b02      	cmp	r3, #2
 800fbe4:	d006      	beq.n	800fbf4 <tcp_parseopt+0x48>
 800fbe6:	2b02      	cmp	r3, #2
 800fbe8:	dc2a      	bgt.n	800fc40 <tcp_parseopt+0x94>
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d042      	beq.n	800fc74 <tcp_parseopt+0xc8>
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d038      	beq.n	800fc64 <tcp_parseopt+0xb8>
 800fbf2:	e025      	b.n	800fc40 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fbf4:	f7ff ffa4 	bl	800fb40 <tcp_get_next_optbyte>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b04      	cmp	r3, #4
 800fbfc:	d13c      	bne.n	800fc78 <tcp_parseopt+0xcc>
 800fbfe:	4b25      	ldr	r3, [pc, #148]	@ (800fc94 <tcp_parseopt+0xe8>)
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	3301      	adds	r3, #1
 800fc04:	4a22      	ldr	r2, [pc, #136]	@ (800fc90 <tcp_parseopt+0xe4>)
 800fc06:	8812      	ldrh	r2, [r2, #0]
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	da35      	bge.n	800fc78 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fc0c:	f7ff ff98 	bl	800fb40 <tcp_get_next_optbyte>
 800fc10:	4603      	mov	r3, r0
 800fc12:	021b      	lsls	r3, r3, #8
 800fc14:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fc16:	f7ff ff93 	bl	800fb40 <tcp_get_next_optbyte>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	89bb      	ldrh	r3, [r7, #12]
 800fc20:	4313      	orrs	r3, r2
 800fc22:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fc24:	89bb      	ldrh	r3, [r7, #12]
 800fc26:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fc2a:	d804      	bhi.n	800fc36 <tcp_parseopt+0x8a>
 800fc2c:	89bb      	ldrh	r3, [r7, #12]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <tcp_parseopt+0x8a>
 800fc32:	89ba      	ldrh	r2, [r7, #12]
 800fc34:	e001      	b.n	800fc3a <tcp_parseopt+0x8e>
 800fc36:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fc3e:	e012      	b.n	800fc66 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fc40:	f7ff ff7e 	bl	800fb40 <tcp_get_next_optbyte>
 800fc44:	4603      	mov	r3, r0
 800fc46:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fc48:	7afb      	ldrb	r3, [r7, #11]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d916      	bls.n	800fc7c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fc4e:	7afb      	ldrb	r3, [r7, #11]
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	4b10      	ldr	r3, [pc, #64]	@ (800fc94 <tcp_parseopt+0xe8>)
 800fc54:	881b      	ldrh	r3, [r3, #0]
 800fc56:	4413      	add	r3, r2
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	3b02      	subs	r3, #2
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc94 <tcp_parseopt+0xe8>)
 800fc60:	801a      	strh	r2, [r3, #0]
 800fc62:	e000      	b.n	800fc66 <tcp_parseopt+0xba>
          break;
 800fc64:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc66:	4b0b      	ldr	r3, [pc, #44]	@ (800fc94 <tcp_parseopt+0xe8>)
 800fc68:	881a      	ldrh	r2, [r3, #0]
 800fc6a:	4b09      	ldr	r3, [pc, #36]	@ (800fc90 <tcp_parseopt+0xe4>)
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d3b2      	bcc.n	800fbd8 <tcp_parseopt+0x2c>
 800fc72:	e004      	b.n	800fc7e <tcp_parseopt+0xd2>
          return;
 800fc74:	bf00      	nop
 800fc76:	e002      	b.n	800fc7e <tcp_parseopt+0xd2>
            return;
 800fc78:	bf00      	nop
 800fc7a:	e000      	b.n	800fc7e <tcp_parseopt+0xd2>
            return;
 800fc7c:	bf00      	nop
      }
    }
  }
}
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	08018328 	.word	0x08018328
 800fc88:	0801878c 	.word	0x0801878c
 800fc8c:	08018374 	.word	0x08018374
 800fc90:	2000bf94 	.word	0x2000bf94
 800fc94:	2000bf9c 	.word	0x2000bf9c

0800fc98 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fc9c:	4b05      	ldr	r3, [pc, #20]	@ (800fcb4 <tcp_trigger_input_pcb_close+0x1c>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f043 0310 	orr.w	r3, r3, #16
 800fca4:	b2da      	uxtb	r2, r3
 800fca6:	4b03      	ldr	r3, [pc, #12]	@ (800fcb4 <tcp_trigger_input_pcb_close+0x1c>)
 800fca8:	701a      	strb	r2, [r3, #0]
}
 800fcaa:	bf00      	nop
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr
 800fcb4:	2000bfad 	.word	0x2000bfad

0800fcb8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00a      	beq.n	800fce0 <tcp_route+0x28>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	7a1b      	ldrb	r3, [r3, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d006      	beq.n	800fce0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	7a1b      	ldrb	r3, [r3, #8]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fa ff60 	bl	800ab9c <netif_get_by_index>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	e003      	b.n	800fce8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f003 fea1 	bl	8013a28 <ip4_route>
 800fce6:	4603      	mov	r3, r0
  }
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3710      	adds	r7, #16
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fcf0:	b590      	push	{r4, r7, lr}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	603b      	str	r3, [r7, #0]
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d105      	bne.n	800fd12 <tcp_create_segment+0x22>
 800fd06:	4b43      	ldr	r3, [pc, #268]	@ (800fe14 <tcp_create_segment+0x124>)
 800fd08:	22a3      	movs	r2, #163	@ 0xa3
 800fd0a:	4943      	ldr	r1, [pc, #268]	@ (800fe18 <tcp_create_segment+0x128>)
 800fd0c:	4843      	ldr	r0, [pc, #268]	@ (800fe1c <tcp_create_segment+0x12c>)
 800fd0e:	f005 fb59 	bl	80153c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d105      	bne.n	800fd24 <tcp_create_segment+0x34>
 800fd18:	4b3e      	ldr	r3, [pc, #248]	@ (800fe14 <tcp_create_segment+0x124>)
 800fd1a:	22a4      	movs	r2, #164	@ 0xa4
 800fd1c:	4940      	ldr	r1, [pc, #256]	@ (800fe20 <tcp_create_segment+0x130>)
 800fd1e:	483f      	ldr	r0, [pc, #252]	@ (800fe1c <tcp_create_segment+0x12c>)
 800fd20:	f005 fb50 	bl	80153c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	f003 0304 	and.w	r3, r3, #4
 800fd30:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fd32:	2003      	movs	r0, #3
 800fd34:	f7fa fba6 	bl	800a484 <memp_malloc>
 800fd38:	6138      	str	r0, [r7, #16]
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d104      	bne.n	800fd4a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fd40:	68b8      	ldr	r0, [r7, #8]
 800fd42:	f7fb fab9 	bl	800b2b8 <pbuf_free>
    return NULL;
 800fd46:	2300      	movs	r3, #0
 800fd48:	e060      	b.n	800fe0c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fd50:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	2200      	movs	r2, #0
 800fd56:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	891a      	ldrh	r2, [r3, #8]
 800fd62:	7dfb      	ldrb	r3, [r7, #23]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d205      	bcs.n	800fd76 <tcp_create_segment+0x86>
 800fd6a:	4b2a      	ldr	r3, [pc, #168]	@ (800fe14 <tcp_create_segment+0x124>)
 800fd6c:	22b0      	movs	r2, #176	@ 0xb0
 800fd6e:	492d      	ldr	r1, [pc, #180]	@ (800fe24 <tcp_create_segment+0x134>)
 800fd70:	482a      	ldr	r0, [pc, #168]	@ (800fe1c <tcp_create_segment+0x12c>)
 800fd72:	f005 fb27 	bl	80153c4 <iprintf>
  seg->len = p->tot_len - optlen;
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	891a      	ldrh	r2, [r3, #8]
 800fd7a:	7dfb      	ldrb	r3, [r7, #23]
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	b29a      	uxth	r2, r3
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fd86:	2114      	movs	r1, #20
 800fd88:	68b8      	ldr	r0, [r7, #8]
 800fd8a:	f7fb f9ff 	bl	800b18c <pbuf_add_header>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d004      	beq.n	800fd9e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fd94:	6938      	ldr	r0, [r7, #16]
 800fd96:	f7fd f804 	bl	800cda2 <tcp_seg_free>
    return NULL;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	e036      	b.n	800fe0c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	685a      	ldr	r2, [r3, #4]
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	8ada      	ldrh	r2, [r3, #22]
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	68dc      	ldr	r4, [r3, #12]
 800fdb0:	4610      	mov	r0, r2
 800fdb2:	f7f9 fe93 	bl	8009adc <lwip_htons>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	8b1a      	ldrh	r2, [r3, #24]
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	68dc      	ldr	r4, [r3, #12]
 800fdc2:	4610      	mov	r0, r2
 800fdc4:	f7f9 fe8a 	bl	8009adc <lwip_htons>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	68dc      	ldr	r4, [r3, #12]
 800fdd0:	6838      	ldr	r0, [r7, #0]
 800fdd2:	f7f9 fe98 	bl	8009b06 <lwip_htonl>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fdda:	7dfb      	ldrb	r3, [r7, #23]
 800fddc:	089b      	lsrs	r3, r3, #2
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	3305      	adds	r3, #5
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	031b      	lsls	r3, r3, #12
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	4313      	orrs	r3, r2
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	68dc      	ldr	r4, [r3, #12]
 800fdf4:	4610      	mov	r0, r2
 800fdf6:	f7f9 fe71 	bl	8009adc <lwip_htons>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	2200      	movs	r2, #0
 800fe04:	749a      	strb	r2, [r3, #18]
 800fe06:	2200      	movs	r2, #0
 800fe08:	74da      	strb	r2, [r3, #19]
  return seg;
 800fe0a:	693b      	ldr	r3, [r7, #16]
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	371c      	adds	r7, #28
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd90      	pop	{r4, r7, pc}
 800fe14:	080187a8 	.word	0x080187a8
 800fe18:	080187dc 	.word	0x080187dc
 800fe1c:	080187fc 	.word	0x080187fc
 800fe20:	08018824 	.word	0x08018824
 800fe24:	08018848 	.word	0x08018848

0800fe28 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b086      	sub	sp, #24
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	607b      	str	r3, [r7, #4]
 800fe30:	4603      	mov	r3, r0
 800fe32:	73fb      	strb	r3, [r7, #15]
 800fe34:	460b      	mov	r3, r1
 800fe36:	81bb      	strh	r3, [r7, #12]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800fe3c:	89bb      	ldrh	r3, [r7, #12]
 800fe3e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d105      	bne.n	800fe52 <tcp_pbuf_prealloc+0x2a>
 800fe46:	4b30      	ldr	r3, [pc, #192]	@ (800ff08 <tcp_pbuf_prealloc+0xe0>)
 800fe48:	22e8      	movs	r2, #232	@ 0xe8
 800fe4a:	4930      	ldr	r1, [pc, #192]	@ (800ff0c <tcp_pbuf_prealloc+0xe4>)
 800fe4c:	4830      	ldr	r0, [pc, #192]	@ (800ff10 <tcp_pbuf_prealloc+0xe8>)
 800fe4e:	f005 fab9 	bl	80153c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800fe52:	6a3b      	ldr	r3, [r7, #32]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d105      	bne.n	800fe64 <tcp_pbuf_prealloc+0x3c>
 800fe58:	4b2b      	ldr	r3, [pc, #172]	@ (800ff08 <tcp_pbuf_prealloc+0xe0>)
 800fe5a:	22e9      	movs	r2, #233	@ 0xe9
 800fe5c:	492d      	ldr	r1, [pc, #180]	@ (800ff14 <tcp_pbuf_prealloc+0xec>)
 800fe5e:	482c      	ldr	r0, [pc, #176]	@ (800ff10 <tcp_pbuf_prealloc+0xe8>)
 800fe60:	f005 fab0 	bl	80153c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800fe64:	89ba      	ldrh	r2, [r7, #12]
 800fe66:	897b      	ldrh	r3, [r7, #10]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d221      	bcs.n	800feb0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fe6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fe70:	f003 0302 	and.w	r3, r3, #2
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d111      	bne.n	800fe9c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800fe78:	6a3b      	ldr	r3, [r7, #32]
 800fe7a:	8b5b      	ldrh	r3, [r3, #26]
 800fe7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d115      	bne.n	800feb0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800fe84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d007      	beq.n	800fe9c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800fe8c:	6a3b      	ldr	r3, [r7, #32]
 800fe8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d103      	bne.n	800fe9c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800fe94:	6a3b      	ldr	r3, [r7, #32]
 800fe96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d009      	beq.n	800feb0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800fe9c:	89bb      	ldrh	r3, [r7, #12]
 800fe9e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800fea2:	f023 0203 	bic.w	r2, r3, #3
 800fea6:	897b      	ldrh	r3, [r7, #10]
 800fea8:	4293      	cmp	r3, r2
 800feaa:	bf28      	it	cs
 800feac:	4613      	movcs	r3, r2
 800feae:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800feb0:	8af9      	ldrh	r1, [r7, #22]
 800feb2:	7bfb      	ldrb	r3, [r7, #15]
 800feb4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fa ff19 	bl	800acf0 <pbuf_alloc>
 800febe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d101      	bne.n	800feca <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800fec6:	2300      	movs	r3, #0
 800fec8:	e019      	b.n	800fefe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d006      	beq.n	800fee0 <tcp_pbuf_prealloc+0xb8>
 800fed2:	4b0d      	ldr	r3, [pc, #52]	@ (800ff08 <tcp_pbuf_prealloc+0xe0>)
 800fed4:	f240 120b 	movw	r2, #267	@ 0x10b
 800fed8:	490f      	ldr	r1, [pc, #60]	@ (800ff18 <tcp_pbuf_prealloc+0xf0>)
 800feda:	480d      	ldr	r0, [pc, #52]	@ (800ff10 <tcp_pbuf_prealloc+0xe8>)
 800fedc:	f005 fa72 	bl	80153c4 <iprintf>
  *oversize = p->len - length;
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	895a      	ldrh	r2, [r3, #10]
 800fee4:	89bb      	ldrh	r3, [r7, #12]
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	b29a      	uxth	r2, r3
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	89ba      	ldrh	r2, [r7, #12]
 800fef2:	811a      	strh	r2, [r3, #8]
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	891a      	ldrh	r2, [r3, #8]
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	815a      	strh	r2, [r3, #10]
  return p;
 800fefc:	693b      	ldr	r3, [r7, #16]
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3718      	adds	r7, #24
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	080187a8 	.word	0x080187a8
 800ff0c:	08018860 	.word	0x08018860
 800ff10:	080187fc 	.word	0x080187fc
 800ff14:	08018884 	.word	0x08018884
 800ff18:	080188a4 	.word	0x080188a4

0800ff1c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	460b      	mov	r3, r1
 800ff26:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d106      	bne.n	800ff3c <tcp_write_checks+0x20>
 800ff2e:	4b33      	ldr	r3, [pc, #204]	@ (800fffc <tcp_write_checks+0xe0>)
 800ff30:	f240 1233 	movw	r2, #307	@ 0x133
 800ff34:	4932      	ldr	r1, [pc, #200]	@ (8010000 <tcp_write_checks+0xe4>)
 800ff36:	4833      	ldr	r0, [pc, #204]	@ (8010004 <tcp_write_checks+0xe8>)
 800ff38:	f005 fa44 	bl	80153c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	7d1b      	ldrb	r3, [r3, #20]
 800ff40:	2b04      	cmp	r3, #4
 800ff42:	d00e      	beq.n	800ff62 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ff48:	2b07      	cmp	r3, #7
 800ff4a:	d00a      	beq.n	800ff62 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	d006      	beq.n	800ff62 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ff58:	2b03      	cmp	r3, #3
 800ff5a:	d002      	beq.n	800ff62 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ff5c:	f06f 030a 	mvn.w	r3, #10
 800ff60:	e048      	b.n	800fff4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ff62:	887b      	ldrh	r3, [r7, #2]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d101      	bne.n	800ff6c <tcp_write_checks+0x50>
    return ERR_OK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	e043      	b.n	800fff4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ff72:	887a      	ldrh	r2, [r7, #2]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d909      	bls.n	800ff8c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	8b5b      	ldrh	r3, [r3, #26]
 800ff7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ff86:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8a:	e033      	b.n	800fff4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ff92:	2b08      	cmp	r3, #8
 800ff94:	d909      	bls.n	800ffaa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	8b5b      	ldrh	r3, [r3, #26]
 800ff9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ffa4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa8:	e024      	b.n	800fff4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00f      	beq.n	800ffd4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d11a      	bne.n	800fff2 <tcp_write_checks+0xd6>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d116      	bne.n	800fff2 <tcp_write_checks+0xd6>
 800ffc4:	4b0d      	ldr	r3, [pc, #52]	@ (800fffc <tcp_write_checks+0xe0>)
 800ffc6:	f240 1255 	movw	r2, #341	@ 0x155
 800ffca:	490f      	ldr	r1, [pc, #60]	@ (8010008 <tcp_write_checks+0xec>)
 800ffcc:	480d      	ldr	r0, [pc, #52]	@ (8010004 <tcp_write_checks+0xe8>)
 800ffce:	f005 f9f9 	bl	80153c4 <iprintf>
 800ffd2:	e00e      	b.n	800fff2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d103      	bne.n	800ffe4 <tcp_write_checks+0xc8>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d006      	beq.n	800fff2 <tcp_write_checks+0xd6>
 800ffe4:	4b05      	ldr	r3, [pc, #20]	@ (800fffc <tcp_write_checks+0xe0>)
 800ffe6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800ffea:	4908      	ldr	r1, [pc, #32]	@ (801000c <tcp_write_checks+0xf0>)
 800ffec:	4805      	ldr	r0, [pc, #20]	@ (8010004 <tcp_write_checks+0xe8>)
 800ffee:	f005 f9e9 	bl	80153c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800fff2:	2300      	movs	r3, #0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	080187a8 	.word	0x080187a8
 8010000:	080188b8 	.word	0x080188b8
 8010004:	080187fc 	.word	0x080187fc
 8010008:	080188d8 	.word	0x080188d8
 801000c:	08018914 	.word	0x08018914

08010010 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010010:	b590      	push	{r4, r7, lr}
 8010012:	b09b      	sub	sp, #108	@ 0x6c
 8010014:	af04      	add	r7, sp, #16
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	4611      	mov	r1, r2
 801001c:	461a      	mov	r2, r3
 801001e:	460b      	mov	r3, r1
 8010020:	80fb      	strh	r3, [r7, #6]
 8010022:	4613      	mov	r3, r2
 8010024:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010026:	2300      	movs	r3, #0
 8010028:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801002a:	2300      	movs	r3, #0
 801002c:	653b      	str	r3, [r7, #80]	@ 0x50
 801002e:	2300      	movs	r3, #0
 8010030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010032:	2300      	movs	r3, #0
 8010034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010036:	2300      	movs	r3, #0
 8010038:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801003a:	2300      	movs	r3, #0
 801003c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010040:	2300      	movs	r3, #0
 8010042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010046:	2300      	movs	r3, #0
 8010048:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801004a:	2300      	movs	r3, #0
 801004c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801004e:	2300      	movs	r3, #0
 8010050:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d109      	bne.n	801006c <tcp_write+0x5c>
 8010058:	4ba4      	ldr	r3, [pc, #656]	@ (80102ec <tcp_write+0x2dc>)
 801005a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801005e:	49a4      	ldr	r1, [pc, #656]	@ (80102f0 <tcp_write+0x2e0>)
 8010060:	48a4      	ldr	r0, [pc, #656]	@ (80102f4 <tcp_write+0x2e4>)
 8010062:	f005 f9af 	bl	80153c4 <iprintf>
 8010066:	f06f 030f 	mvn.w	r3, #15
 801006a:	e32a      	b.n	80106c2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010072:	085b      	lsrs	r3, r3, #1
 8010074:	b29a      	uxth	r2, r3
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801007a:	4293      	cmp	r3, r2
 801007c:	bf28      	it	cs
 801007e:	4613      	movcs	r3, r2
 8010080:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010084:	2b00      	cmp	r3, #0
 8010086:	d102      	bne.n	801008e <tcp_write+0x7e>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801008c:	e000      	b.n	8010090 <tcp_write+0x80>
 801008e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010090:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d109      	bne.n	80100ac <tcp_write+0x9c>
 8010098:	4b94      	ldr	r3, [pc, #592]	@ (80102ec <tcp_write+0x2dc>)
 801009a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801009e:	4996      	ldr	r1, [pc, #600]	@ (80102f8 <tcp_write+0x2e8>)
 80100a0:	4894      	ldr	r0, [pc, #592]	@ (80102f4 <tcp_write+0x2e4>)
 80100a2:	f005 f98f 	bl	80153c4 <iprintf>
 80100a6:	f06f 030f 	mvn.w	r3, #15
 80100aa:	e30a      	b.n	80106c2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80100ac:	88fb      	ldrh	r3, [r7, #6]
 80100ae:	4619      	mov	r1, r3
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	f7ff ff33 	bl	800ff1c <tcp_write_checks>
 80100b6:	4603      	mov	r3, r0
 80100b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80100bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d002      	beq.n	80100ca <tcp_write+0xba>
    return err;
 80100c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80100c8:	e2fb      	b.n	80106c2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80100d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80100d4:	2300      	movs	r3, #0
 80100d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100de:	2b00      	cmp	r3, #0
 80100e0:	f000 80f6 	beq.w	80102d0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80100ea:	e002      	b.n	80100f2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80100ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1f8      	bne.n	80100ec <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80100fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100fc:	7a9b      	ldrb	r3, [r3, #10]
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	b29b      	uxth	r3, r3
 8010102:	f003 0304 	and.w	r3, r3, #4
 8010106:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010108:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801010a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801010c:	891b      	ldrh	r3, [r3, #8]
 801010e:	4619      	mov	r1, r3
 8010110:	8c3b      	ldrh	r3, [r7, #32]
 8010112:	440b      	add	r3, r1
 8010114:	429a      	cmp	r2, r3
 8010116:	da06      	bge.n	8010126 <tcp_write+0x116>
 8010118:	4b74      	ldr	r3, [pc, #464]	@ (80102ec <tcp_write+0x2dc>)
 801011a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801011e:	4977      	ldr	r1, [pc, #476]	@ (80102fc <tcp_write+0x2ec>)
 8010120:	4874      	ldr	r0, [pc, #464]	@ (80102f4 <tcp_write+0x2e4>)
 8010122:	f005 f94f 	bl	80153c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010128:	891a      	ldrh	r2, [r3, #8]
 801012a:	8c3b      	ldrh	r3, [r7, #32]
 801012c:	4413      	add	r3, r2
 801012e:	b29b      	uxth	r3, r3
 8010130:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801013c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801013e:	8a7b      	ldrh	r3, [r7, #18]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d026      	beq.n	8010192 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010144:	8a7b      	ldrh	r3, [r7, #18]
 8010146:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010148:	429a      	cmp	r2, r3
 801014a:	d206      	bcs.n	801015a <tcp_write+0x14a>
 801014c:	4b67      	ldr	r3, [pc, #412]	@ (80102ec <tcp_write+0x2dc>)
 801014e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8010152:	496b      	ldr	r1, [pc, #428]	@ (8010300 <tcp_write+0x2f0>)
 8010154:	4867      	ldr	r0, [pc, #412]	@ (80102f4 <tcp_write+0x2e4>)
 8010156:	f005 f935 	bl	80153c4 <iprintf>
      seg = last_unsent;
 801015a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801015c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801015e:	8a7b      	ldrh	r3, [r7, #18]
 8010160:	88fa      	ldrh	r2, [r7, #6]
 8010162:	4293      	cmp	r3, r2
 8010164:	bf28      	it	cs
 8010166:	4613      	movcs	r3, r2
 8010168:	b29b      	uxth	r3, r3
 801016a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801016c:	4293      	cmp	r3, r2
 801016e:	bf28      	it	cs
 8010170:	4613      	movcs	r3, r2
 8010172:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8010174:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010178:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801017a:	4413      	add	r3, r2
 801017c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8010180:	8a7a      	ldrh	r2, [r7, #18]
 8010182:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	b29b      	uxth	r3, r3
 8010188:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801018a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801018c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010192:	8a7b      	ldrh	r3, [r7, #18]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00b      	beq.n	80101b0 <tcp_write+0x1a0>
 8010198:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801019c:	88fb      	ldrh	r3, [r7, #6]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d006      	beq.n	80101b0 <tcp_write+0x1a0>
 80101a2:	4b52      	ldr	r3, [pc, #328]	@ (80102ec <tcp_write+0x2dc>)
 80101a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101a8:	4956      	ldr	r1, [pc, #344]	@ (8010304 <tcp_write+0x2f4>)
 80101aa:	4852      	ldr	r0, [pc, #328]	@ (80102f4 <tcp_write+0x2e4>)
 80101ac:	f005 f90a 	bl	80153c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80101b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80101b4:	88fb      	ldrh	r3, [r7, #6]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	f080 8167 	bcs.w	801048a <tcp_write+0x47a>
 80101bc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80101be:	2b00      	cmp	r3, #0
 80101c0:	f000 8163 	beq.w	801048a <tcp_write+0x47a>
 80101c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101c6:	891b      	ldrh	r3, [r3, #8]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 815e 	beq.w	801048a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80101ce:	88fa      	ldrh	r2, [r7, #6]
 80101d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80101d4:	1ad2      	subs	r2, r2, r3
 80101d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80101d8:	4293      	cmp	r3, r2
 80101da:	bfa8      	it	ge
 80101dc:	4613      	movge	r3, r2
 80101de:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80101e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80101e4:	797b      	ldrb	r3, [r7, #5]
 80101e6:	f003 0301 	and.w	r3, r3, #1
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d027      	beq.n	801023e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80101ee:	f107 0012 	add.w	r0, r7, #18
 80101f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80101f4:	8bf9      	ldrh	r1, [r7, #30]
 80101f6:	2301      	movs	r3, #1
 80101f8:	9302      	str	r3, [sp, #8]
 80101fa:	797b      	ldrb	r3, [r7, #5]
 80101fc:	9301      	str	r3, [sp, #4]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	9300      	str	r3, [sp, #0]
 8010202:	4603      	mov	r3, r0
 8010204:	2000      	movs	r0, #0
 8010206:	f7ff fe0f 	bl	800fe28 <tcp_pbuf_prealloc>
 801020a:	6578      	str	r0, [r7, #84]	@ 0x54
 801020c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801020e:	2b00      	cmp	r3, #0
 8010210:	f000 8225 	beq.w	801065e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010216:	6858      	ldr	r0, [r3, #4]
 8010218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801021c:	68ba      	ldr	r2, [r7, #8]
 801021e:	4413      	add	r3, r2
 8010220:	8bfa      	ldrh	r2, [r7, #30]
 8010222:	4619      	mov	r1, r3
 8010224:	f005 fa5f 	bl	80156e6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010228:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801022a:	f7fb f8d3 	bl	800b3d4 <pbuf_clen>
 801022e:	4603      	mov	r3, r0
 8010230:	461a      	mov	r2, r3
 8010232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010236:	4413      	add	r3, r2
 8010238:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801023c:	e041      	b.n	80102c2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801023e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	637b      	str	r3, [r7, #52]	@ 0x34
 8010244:	e002      	b.n	801024c <tcp_write+0x23c>
 8010246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	637b      	str	r3, [r7, #52]	@ 0x34
 801024c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1f8      	bne.n	8010246 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010256:	7b1b      	ldrb	r3, [r3, #12]
 8010258:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d115      	bne.n	801028c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010266:	8952      	ldrh	r2, [r2, #10]
 8010268:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801026a:	68ba      	ldr	r2, [r7, #8]
 801026c:	429a      	cmp	r2, r3
 801026e:	d10d      	bne.n	801028c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010274:	2b00      	cmp	r3, #0
 8010276:	d006      	beq.n	8010286 <tcp_write+0x276>
 8010278:	4b1c      	ldr	r3, [pc, #112]	@ (80102ec <tcp_write+0x2dc>)
 801027a:	f240 2231 	movw	r2, #561	@ 0x231
 801027e:	4922      	ldr	r1, [pc, #136]	@ (8010308 <tcp_write+0x2f8>)
 8010280:	481c      	ldr	r0, [pc, #112]	@ (80102f4 <tcp_write+0x2e4>)
 8010282:	f005 f89f 	bl	80153c4 <iprintf>
          extendlen = seglen;
 8010286:	8bfb      	ldrh	r3, [r7, #30]
 8010288:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801028a:	e01a      	b.n	80102c2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801028c:	8bfb      	ldrh	r3, [r7, #30]
 801028e:	2201      	movs	r2, #1
 8010290:	4619      	mov	r1, r3
 8010292:	2000      	movs	r0, #0
 8010294:	f7fa fd2c 	bl	800acf0 <pbuf_alloc>
 8010298:	6578      	str	r0, [r7, #84]	@ 0x54
 801029a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801029c:	2b00      	cmp	r3, #0
 801029e:	f000 81e0 	beq.w	8010662 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80102a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80102a6:	68ba      	ldr	r2, [r7, #8]
 80102a8:	441a      	add	r2, r3
 80102aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102ac:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80102ae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80102b0:	f7fb f890 	bl	800b3d4 <pbuf_clen>
 80102b4:	4603      	mov	r3, r0
 80102b6:	461a      	mov	r2, r3
 80102b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80102bc:	4413      	add	r3, r2
 80102be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80102c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80102c6:	8bfb      	ldrh	r3, [r7, #30]
 80102c8:	4413      	add	r3, r2
 80102ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80102ce:	e0dc      	b.n	801048a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	f000 80d7 	beq.w	801048a <tcp_write+0x47a>
 80102dc:	4b03      	ldr	r3, [pc, #12]	@ (80102ec <tcp_write+0x2dc>)
 80102de:	f240 224a 	movw	r2, #586	@ 0x24a
 80102e2:	490a      	ldr	r1, [pc, #40]	@ (801030c <tcp_write+0x2fc>)
 80102e4:	4803      	ldr	r0, [pc, #12]	@ (80102f4 <tcp_write+0x2e4>)
 80102e6:	f005 f86d 	bl	80153c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80102ea:	e0ce      	b.n	801048a <tcp_write+0x47a>
 80102ec:	080187a8 	.word	0x080187a8
 80102f0:	08018948 	.word	0x08018948
 80102f4:	080187fc 	.word	0x080187fc
 80102f8:	08018960 	.word	0x08018960
 80102fc:	08018994 	.word	0x08018994
 8010300:	080189ac 	.word	0x080189ac
 8010304:	080189cc 	.word	0x080189cc
 8010308:	080189ec 	.word	0x080189ec
 801030c:	08018a18 	.word	0x08018a18
    struct pbuf *p;
    u16_t left = len - pos;
 8010310:	88fa      	ldrh	r2, [r7, #6]
 8010312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010316:	1ad3      	subs	r3, r2, r3
 8010318:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801031a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801031e:	b29b      	uxth	r3, r3
 8010320:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010322:	1ad3      	subs	r3, r2, r3
 8010324:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010326:	8b7a      	ldrh	r2, [r7, #26]
 8010328:	8bbb      	ldrh	r3, [r7, #28]
 801032a:	4293      	cmp	r3, r2
 801032c:	bf28      	it	cs
 801032e:	4613      	movcs	r3, r2
 8010330:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010332:	797b      	ldrb	r3, [r7, #5]
 8010334:	f003 0301 	and.w	r3, r3, #1
 8010338:	2b00      	cmp	r3, #0
 801033a:	d036      	beq.n	80103aa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801033c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010340:	b29a      	uxth	r2, r3
 8010342:	8b3b      	ldrh	r3, [r7, #24]
 8010344:	4413      	add	r3, r2
 8010346:	b299      	uxth	r1, r3
 8010348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801034a:	2b00      	cmp	r3, #0
 801034c:	bf0c      	ite	eq
 801034e:	2301      	moveq	r3, #1
 8010350:	2300      	movne	r3, #0
 8010352:	b2db      	uxtb	r3, r3
 8010354:	f107 0012 	add.w	r0, r7, #18
 8010358:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801035a:	9302      	str	r3, [sp, #8]
 801035c:	797b      	ldrb	r3, [r7, #5]
 801035e:	9301      	str	r3, [sp, #4]
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	4603      	mov	r3, r0
 8010366:	2036      	movs	r0, #54	@ 0x36
 8010368:	f7ff fd5e 	bl	800fe28 <tcp_pbuf_prealloc>
 801036c:	6338      	str	r0, [r7, #48]	@ 0x30
 801036e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010370:	2b00      	cmp	r3, #0
 8010372:	f000 8178 	beq.w	8010666 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010378:	895b      	ldrh	r3, [r3, #10]
 801037a:	8b3a      	ldrh	r2, [r7, #24]
 801037c:	429a      	cmp	r2, r3
 801037e:	d906      	bls.n	801038e <tcp_write+0x37e>
 8010380:	4b8c      	ldr	r3, [pc, #560]	@ (80105b4 <tcp_write+0x5a4>)
 8010382:	f240 2266 	movw	r2, #614	@ 0x266
 8010386:	498c      	ldr	r1, [pc, #560]	@ (80105b8 <tcp_write+0x5a8>)
 8010388:	488c      	ldr	r0, [pc, #560]	@ (80105bc <tcp_write+0x5ac>)
 801038a:	f005 f81b 	bl	80153c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801038e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010396:	18d0      	adds	r0, r2, r3
 8010398:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801039c:	68ba      	ldr	r2, [r7, #8]
 801039e:	4413      	add	r3, r2
 80103a0:	8b3a      	ldrh	r2, [r7, #24]
 80103a2:	4619      	mov	r1, r3
 80103a4:	f005 f99f 	bl	80156e6 <memcpy>
 80103a8:	e02f      	b.n	801040a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80103aa:	8a7b      	ldrh	r3, [r7, #18]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d006      	beq.n	80103be <tcp_write+0x3ae>
 80103b0:	4b80      	ldr	r3, [pc, #512]	@ (80105b4 <tcp_write+0x5a4>)
 80103b2:	f240 2271 	movw	r2, #625	@ 0x271
 80103b6:	4982      	ldr	r1, [pc, #520]	@ (80105c0 <tcp_write+0x5b0>)
 80103b8:	4880      	ldr	r0, [pc, #512]	@ (80105bc <tcp_write+0x5ac>)
 80103ba:	f005 f803 	bl	80153c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80103be:	8b3b      	ldrh	r3, [r7, #24]
 80103c0:	2201      	movs	r2, #1
 80103c2:	4619      	mov	r1, r3
 80103c4:	2036      	movs	r0, #54	@ 0x36
 80103c6:	f7fa fc93 	bl	800acf0 <pbuf_alloc>
 80103ca:	6178      	str	r0, [r7, #20]
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f000 814b 	beq.w	801066a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80103d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80103d8:	68ba      	ldr	r2, [r7, #8]
 80103da:	441a      	add	r2, r3
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80103e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80103ea:	4619      	mov	r1, r3
 80103ec:	2036      	movs	r0, #54	@ 0x36
 80103ee:	f7fa fc7f 	bl	800acf0 <pbuf_alloc>
 80103f2:	6338      	str	r0, [r7, #48]	@ 0x30
 80103f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d103      	bne.n	8010402 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80103fa:	6978      	ldr	r0, [r7, #20]
 80103fc:	f7fa ff5c 	bl	800b2b8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010400:	e136      	b.n	8010670 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010402:	6979      	ldr	r1, [r7, #20]
 8010404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010406:	f7fb f825 	bl	800b454 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801040a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801040c:	f7fa ffe2 	bl	800b3d4 <pbuf_clen>
 8010410:	4603      	mov	r3, r0
 8010412:	461a      	mov	r2, r3
 8010414:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010418:	4413      	add	r3, r2
 801041a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801041e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010422:	2b09      	cmp	r3, #9
 8010424:	d903      	bls.n	801042e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010426:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010428:	f7fa ff46 	bl	800b2b8 <pbuf_free>
      goto memerr;
 801042c:	e120      	b.n	8010670 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010436:	441a      	add	r2, r3
 8010438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	4613      	mov	r3, r2
 8010440:	2200      	movs	r2, #0
 8010442:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010444:	68f8      	ldr	r0, [r7, #12]
 8010446:	f7ff fc53 	bl	800fcf0 <tcp_create_segment>
 801044a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801044c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801044e:	2b00      	cmp	r3, #0
 8010450:	f000 810d 	beq.w	801066e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010456:	2b00      	cmp	r3, #0
 8010458:	d102      	bne.n	8010460 <tcp_write+0x450>
      queue = seg;
 801045a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801045c:	647b      	str	r3, [r7, #68]	@ 0x44
 801045e:	e00c      	b.n	801047a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010462:	2b00      	cmp	r3, #0
 8010464:	d106      	bne.n	8010474 <tcp_write+0x464>
 8010466:	4b53      	ldr	r3, [pc, #332]	@ (80105b4 <tcp_write+0x5a4>)
 8010468:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801046c:	4955      	ldr	r1, [pc, #340]	@ (80105c4 <tcp_write+0x5b4>)
 801046e:	4853      	ldr	r0, [pc, #332]	@ (80105bc <tcp_write+0x5ac>)
 8010470:	f004 ffa8 	bl	80153c4 <iprintf>
      prev_seg->next = seg;
 8010474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010476:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010478:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801047a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801047c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801047e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010482:	8b3b      	ldrh	r3, [r7, #24]
 8010484:	4413      	add	r3, r2
 8010486:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801048a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801048e:	88fb      	ldrh	r3, [r7, #6]
 8010490:	429a      	cmp	r2, r3
 8010492:	f4ff af3d 	bcc.w	8010310 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010496:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010498:	2b00      	cmp	r3, #0
 801049a:	d02c      	beq.n	80104f6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801049c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80104a2:	e01e      	b.n	80104e2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80104a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104a6:	891a      	ldrh	r2, [r3, #8]
 80104a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104aa:	4413      	add	r3, r2
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80104b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d110      	bne.n	80104dc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80104ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104c0:	8952      	ldrh	r2, [r2, #10]
 80104c2:	4413      	add	r3, r2
 80104c4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80104c6:	68b9      	ldr	r1, [r7, #8]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f005 f90c 	bl	80156e6 <memcpy>
        p->len += oversize_used;
 80104ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d0:	895a      	ldrh	r2, [r3, #10]
 80104d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104d4:	4413      	add	r3, r2
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104da:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80104dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80104e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d1dd      	bne.n	80104a4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80104e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104ea:	891a      	ldrh	r2, [r3, #8]
 80104ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80104ee:	4413      	add	r3, r2
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104f4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80104f6:	8a7a      	ldrh	r2, [r7, #18]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80104fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010500:	2b00      	cmp	r3, #0
 8010502:	d018      	beq.n	8010536 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010506:	2b00      	cmp	r3, #0
 8010508:	d106      	bne.n	8010518 <tcp_write+0x508>
 801050a:	4b2a      	ldr	r3, [pc, #168]	@ (80105b4 <tcp_write+0x5a4>)
 801050c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8010510:	492d      	ldr	r1, [pc, #180]	@ (80105c8 <tcp_write+0x5b8>)
 8010512:	482a      	ldr	r0, [pc, #168]	@ (80105bc <tcp_write+0x5ac>)
 8010514:	f004 ff56 	bl	80153c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801051e:	4618      	mov	r0, r3
 8010520:	f7fa ff98 	bl	800b454 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010526:	891a      	ldrh	r2, [r3, #8]
 8010528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801052a:	891b      	ldrh	r3, [r3, #8]
 801052c:	4413      	add	r3, r2
 801052e:	b29a      	uxth	r2, r3
 8010530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010532:	811a      	strh	r2, [r3, #8]
 8010534:	e037      	b.n	80105a6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010536:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010538:	2b00      	cmp	r3, #0
 801053a:	d034      	beq.n	80105a6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801053c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801053e:	2b00      	cmp	r3, #0
 8010540:	d003      	beq.n	801054a <tcp_write+0x53a>
 8010542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d106      	bne.n	8010558 <tcp_write+0x548>
 801054a:	4b1a      	ldr	r3, [pc, #104]	@ (80105b4 <tcp_write+0x5a4>)
 801054c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8010550:	491e      	ldr	r1, [pc, #120]	@ (80105cc <tcp_write+0x5bc>)
 8010552:	481a      	ldr	r0, [pc, #104]	@ (80105bc <tcp_write+0x5ac>)
 8010554:	f004 ff36 	bl	80153c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801055e:	e009      	b.n	8010574 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010562:	891a      	ldrh	r2, [r3, #8]
 8010564:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010566:	4413      	add	r3, r2
 8010568:	b29a      	uxth	r2, r3
 801056a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801056c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801056e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1f1      	bne.n	8010560 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801057c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057e:	891a      	ldrh	r2, [r3, #8]
 8010580:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010582:	4413      	add	r3, r2
 8010584:	b29a      	uxth	r2, r3
 8010586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010588:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801058a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801058c:	895a      	ldrh	r2, [r3, #10]
 801058e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010590:	4413      	add	r3, r2
 8010592:	b29a      	uxth	r2, r3
 8010594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010596:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801059a:	891a      	ldrh	r2, [r3, #8]
 801059c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801059e:	4413      	add	r3, r2
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105a4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80105a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d111      	bne.n	80105d0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105b0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80105b2:	e010      	b.n	80105d6 <tcp_write+0x5c6>
 80105b4:	080187a8 	.word	0x080187a8
 80105b8:	08018a48 	.word	0x08018a48
 80105bc:	080187fc 	.word	0x080187fc
 80105c0:	08018a88 	.word	0x08018a88
 80105c4:	08018a98 	.word	0x08018a98
 80105c8:	08018aac 	.word	0x08018aac
 80105cc:	08018ae4 	.word	0x08018ae4
  } else {
    last_unsent->next = queue;
 80105d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105d4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80105da:	88fb      	ldrh	r3, [r7, #6]
 80105dc:	441a      	add	r2, r3
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80105e8:	88fb      	ldrh	r3, [r7, #6]
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80105fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010604:	2b00      	cmp	r3, #0
 8010606:	d00e      	beq.n	8010626 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801060c:	2b00      	cmp	r3, #0
 801060e:	d10a      	bne.n	8010626 <tcp_write+0x616>
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010614:	2b00      	cmp	r3, #0
 8010616:	d106      	bne.n	8010626 <tcp_write+0x616>
 8010618:	4b2c      	ldr	r3, [pc, #176]	@ (80106cc <tcp_write+0x6bc>)
 801061a:	f240 3212 	movw	r2, #786	@ 0x312
 801061e:	492c      	ldr	r1, [pc, #176]	@ (80106d0 <tcp_write+0x6c0>)
 8010620:	482c      	ldr	r0, [pc, #176]	@ (80106d4 <tcp_write+0x6c4>)
 8010622:	f004 fecf 	bl	80153c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d016      	beq.n	801065a <tcp_write+0x64a>
 801062c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801062e:	68db      	ldr	r3, [r3, #12]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d012      	beq.n	801065a <tcp_write+0x64a>
 8010634:	797b      	ldrb	r3, [r7, #5]
 8010636:	f003 0302 	and.w	r3, r3, #2
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10d      	bne.n	801065a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801063e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	899b      	ldrh	r3, [r3, #12]
 8010644:	b29c      	uxth	r4, r3
 8010646:	2008      	movs	r0, #8
 8010648:	f7f9 fa48 	bl	8009adc <lwip_htons>
 801064c:	4603      	mov	r3, r0
 801064e:	461a      	mov	r2, r3
 8010650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	4322      	orrs	r2, r4
 8010656:	b292      	uxth	r2, r2
 8010658:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801065a:	2300      	movs	r3, #0
 801065c:	e031      	b.n	80106c2 <tcp_write+0x6b2>
          goto memerr;
 801065e:	bf00      	nop
 8010660:	e006      	b.n	8010670 <tcp_write+0x660>
            goto memerr;
 8010662:	bf00      	nop
 8010664:	e004      	b.n	8010670 <tcp_write+0x660>
        goto memerr;
 8010666:	bf00      	nop
 8010668:	e002      	b.n	8010670 <tcp_write+0x660>
        goto memerr;
 801066a:	bf00      	nop
 801066c:	e000      	b.n	8010670 <tcp_write+0x660>
      goto memerr;
 801066e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	8b5b      	ldrh	r3, [r3, #26]
 8010674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010678:	b29a      	uxth	r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801067e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010680:	2b00      	cmp	r3, #0
 8010682:	d002      	beq.n	801068a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010684:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010686:	f7fa fe17 	bl	800b2b8 <pbuf_free>
  }
  if (queue != NULL) {
 801068a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801068c:	2b00      	cmp	r3, #0
 801068e:	d002      	beq.n	8010696 <tcp_write+0x686>
    tcp_segs_free(queue);
 8010690:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010692:	f7fc fb71 	bl	800cd78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00e      	beq.n	80106be <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d10a      	bne.n	80106be <tcp_write+0x6ae>
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d106      	bne.n	80106be <tcp_write+0x6ae>
 80106b0:	4b06      	ldr	r3, [pc, #24]	@ (80106cc <tcp_write+0x6bc>)
 80106b2:	f240 3227 	movw	r2, #807	@ 0x327
 80106b6:	4906      	ldr	r1, [pc, #24]	@ (80106d0 <tcp_write+0x6c0>)
 80106b8:	4806      	ldr	r0, [pc, #24]	@ (80106d4 <tcp_write+0x6c4>)
 80106ba:	f004 fe83 	bl	80153c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80106be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	375c      	adds	r7, #92	@ 0x5c
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd90      	pop	{r4, r7, pc}
 80106ca:	bf00      	nop
 80106cc:	080187a8 	.word	0x080187a8
 80106d0:	08018b1c 	.word	0x08018b1c
 80106d4:	080187fc 	.word	0x080187fc

080106d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80106d8:	b590      	push	{r4, r7, lr}
 80106da:	b08b      	sub	sp, #44	@ 0x2c
 80106dc:	af02      	add	r7, sp, #8
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	460b      	mov	r3, r1
 80106e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80106e4:	2300      	movs	r3, #0
 80106e6:	61fb      	str	r3, [r7, #28]
 80106e8:	2300      	movs	r3, #0
 80106ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80106ec:	2300      	movs	r3, #0
 80106ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d106      	bne.n	8010704 <tcp_split_unsent_seg+0x2c>
 80106f6:	4b95      	ldr	r3, [pc, #596]	@ (801094c <tcp_split_unsent_seg+0x274>)
 80106f8:	f240 324b 	movw	r2, #843	@ 0x34b
 80106fc:	4994      	ldr	r1, [pc, #592]	@ (8010950 <tcp_split_unsent_seg+0x278>)
 80106fe:	4895      	ldr	r0, [pc, #596]	@ (8010954 <tcp_split_unsent_seg+0x27c>)
 8010700:	f004 fe60 	bl	80153c4 <iprintf>

  useg = pcb->unsent;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010708:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d102      	bne.n	8010716 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010710:	f04f 33ff 	mov.w	r3, #4294967295
 8010714:	e116      	b.n	8010944 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010716:	887b      	ldrh	r3, [r7, #2]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d109      	bne.n	8010730 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801071c:	4b8b      	ldr	r3, [pc, #556]	@ (801094c <tcp_split_unsent_seg+0x274>)
 801071e:	f240 3253 	movw	r2, #851	@ 0x353
 8010722:	498d      	ldr	r1, [pc, #564]	@ (8010958 <tcp_split_unsent_seg+0x280>)
 8010724:	488b      	ldr	r0, [pc, #556]	@ (8010954 <tcp_split_unsent_seg+0x27c>)
 8010726:	f004 fe4d 	bl	80153c4 <iprintf>
    return ERR_VAL;
 801072a:	f06f 0305 	mvn.w	r3, #5
 801072e:	e109      	b.n	8010944 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	891b      	ldrh	r3, [r3, #8]
 8010734:	887a      	ldrh	r2, [r7, #2]
 8010736:	429a      	cmp	r2, r3
 8010738:	d301      	bcc.n	801073e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801073a:	2300      	movs	r3, #0
 801073c:	e102      	b.n	8010944 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010742:	887a      	ldrh	r2, [r7, #2]
 8010744:	429a      	cmp	r2, r3
 8010746:	d906      	bls.n	8010756 <tcp_split_unsent_seg+0x7e>
 8010748:	4b80      	ldr	r3, [pc, #512]	@ (801094c <tcp_split_unsent_seg+0x274>)
 801074a:	f240 325b 	movw	r2, #859	@ 0x35b
 801074e:	4983      	ldr	r1, [pc, #524]	@ (801095c <tcp_split_unsent_seg+0x284>)
 8010750:	4880      	ldr	r0, [pc, #512]	@ (8010954 <tcp_split_unsent_seg+0x27c>)
 8010752:	f004 fe37 	bl	80153c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	891b      	ldrh	r3, [r3, #8]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d106      	bne.n	801076c <tcp_split_unsent_seg+0x94>
 801075e:	4b7b      	ldr	r3, [pc, #492]	@ (801094c <tcp_split_unsent_seg+0x274>)
 8010760:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010764:	497e      	ldr	r1, [pc, #504]	@ (8010960 <tcp_split_unsent_seg+0x288>)
 8010766:	487b      	ldr	r0, [pc, #492]	@ (8010954 <tcp_split_unsent_seg+0x27c>)
 8010768:	f004 fe2c 	bl	80153c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	7a9b      	ldrb	r3, [r3, #10]
 8010770:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010772:	7bfb      	ldrb	r3, [r7, #15]
 8010774:	009b      	lsls	r3, r3, #2
 8010776:	b2db      	uxtb	r3, r3
 8010778:	f003 0304 	and.w	r3, r3, #4
 801077c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	891a      	ldrh	r2, [r3, #8]
 8010782:	887b      	ldrh	r3, [r7, #2]
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010788:	7bbb      	ldrb	r3, [r7, #14]
 801078a:	b29a      	uxth	r2, r3
 801078c:	89bb      	ldrh	r3, [r7, #12]
 801078e:	4413      	add	r3, r2
 8010790:	b29b      	uxth	r3, r3
 8010792:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010796:	4619      	mov	r1, r3
 8010798:	2036      	movs	r0, #54	@ 0x36
 801079a:	f7fa faa9 	bl	800acf0 <pbuf_alloc>
 801079e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f000 80b7 	beq.w	8010916 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	891a      	ldrh	r2, [r3, #8]
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	891b      	ldrh	r3, [r3, #8]
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	887b      	ldrh	r3, [r7, #2]
 80107b8:	4413      	add	r3, r2
 80107ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	6858      	ldr	r0, [r3, #4]
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	685a      	ldr	r2, [r3, #4]
 80107c4:	7bbb      	ldrb	r3, [r7, #14]
 80107c6:	18d1      	adds	r1, r2, r3
 80107c8:	897b      	ldrh	r3, [r7, #10]
 80107ca:	89ba      	ldrh	r2, [r7, #12]
 80107cc:	f7fa ff7a 	bl	800b6c4 <pbuf_copy_partial>
 80107d0:	4603      	mov	r3, r0
 80107d2:	461a      	mov	r2, r3
 80107d4:	89bb      	ldrh	r3, [r7, #12]
 80107d6:	4293      	cmp	r3, r2
 80107d8:	f040 809f 	bne.w	801091a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	899b      	ldrh	r3, [r3, #12]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7f9 f979 	bl	8009adc <lwip_htons>
 80107ea:	4603      	mov	r3, r0
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80107f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80107f4:	2300      	movs	r3, #0
 80107f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80107f8:	7efb      	ldrb	r3, [r7, #27]
 80107fa:	f003 0308 	and.w	r3, r3, #8
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d007      	beq.n	8010812 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010802:	7efb      	ldrb	r3, [r7, #27]
 8010804:	f023 0308 	bic.w	r3, r3, #8
 8010808:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801080a:	7ebb      	ldrb	r3, [r7, #26]
 801080c:	f043 0308 	orr.w	r3, r3, #8
 8010810:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010812:	7efb      	ldrb	r3, [r7, #27]
 8010814:	f003 0301 	and.w	r3, r3, #1
 8010818:	2b00      	cmp	r3, #0
 801081a:	d007      	beq.n	801082c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801081c:	7efb      	ldrb	r3, [r7, #27]
 801081e:	f023 0301 	bic.w	r3, r3, #1
 8010822:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010824:	7ebb      	ldrb	r3, [r7, #26]
 8010826:	f043 0301 	orr.w	r3, r3, #1
 801082a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	4618      	mov	r0, r3
 8010834:	f7f9 f967 	bl	8009b06 <lwip_htonl>
 8010838:	4602      	mov	r2, r0
 801083a:	887b      	ldrh	r3, [r7, #2]
 801083c:	18d1      	adds	r1, r2, r3
 801083e:	7eba      	ldrb	r2, [r7, #26]
 8010840:	7bfb      	ldrb	r3, [r7, #15]
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	460b      	mov	r3, r1
 8010846:	6939      	ldr	r1, [r7, #16]
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7ff fa51 	bl	800fcf0 <tcp_create_segment>
 801084e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d063      	beq.n	801091e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	4618      	mov	r0, r3
 801085c:	f7fa fdba 	bl	800b3d4 <pbuf_clen>
 8010860:	4603      	mov	r3, r0
 8010862:	461a      	mov	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801086a:	1a9b      	subs	r3, r3, r2
 801086c:	b29a      	uxth	r2, r3
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	6858      	ldr	r0, [r3, #4]
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	891a      	ldrh	r2, [r3, #8]
 801087e:	89bb      	ldrh	r3, [r7, #12]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	b29b      	uxth	r3, r3
 8010884:	4619      	mov	r1, r3
 8010886:	f7fa fb91 	bl	800afac <pbuf_realloc>
  useg->len -= remainder;
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	891a      	ldrh	r2, [r3, #8]
 801088e:	89bb      	ldrh	r3, [r7, #12]
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	b29a      	uxth	r2, r3
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	899b      	ldrh	r3, [r3, #12]
 801089e:	b29c      	uxth	r4, r3
 80108a0:	7efb      	ldrb	r3, [r7, #27]
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7f9 f919 	bl	8009adc <lwip_htons>
 80108aa:	4603      	mov	r3, r0
 80108ac:	461a      	mov	r2, r3
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	4322      	orrs	r2, r4
 80108b4:	b292      	uxth	r2, r2
 80108b6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fa fd89 	bl	800b3d4 <pbuf_clen>
 80108c2:	4603      	mov	r3, r0
 80108c4:	461a      	mov	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80108cc:	4413      	add	r3, r2
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fa fd7a 	bl	800b3d4 <pbuf_clen>
 80108e0:	4603      	mov	r3, r0
 80108e2:	461a      	mov	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80108ea:	4413      	add	r3, r2
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	69fa      	ldr	r2, [r7, #28]
 8010900:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d103      	bne.n	8010912 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2200      	movs	r2, #0
 801090e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010912:	2300      	movs	r3, #0
 8010914:	e016      	b.n	8010944 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010916:	bf00      	nop
 8010918:	e002      	b.n	8010920 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801091a:	bf00      	nop
 801091c:	e000      	b.n	8010920 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801091e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d006      	beq.n	8010934 <tcp_split_unsent_seg+0x25c>
 8010926:	4b09      	ldr	r3, [pc, #36]	@ (801094c <tcp_split_unsent_seg+0x274>)
 8010928:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801092c:	490d      	ldr	r1, [pc, #52]	@ (8010964 <tcp_split_unsent_seg+0x28c>)
 801092e:	4809      	ldr	r0, [pc, #36]	@ (8010954 <tcp_split_unsent_seg+0x27c>)
 8010930:	f004 fd48 	bl	80153c4 <iprintf>
  if (p != NULL) {
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d002      	beq.n	8010940 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801093a:	6938      	ldr	r0, [r7, #16]
 801093c:	f7fa fcbc 	bl	800b2b8 <pbuf_free>
  }

  return ERR_MEM;
 8010940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010944:	4618      	mov	r0, r3
 8010946:	3724      	adds	r7, #36	@ 0x24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd90      	pop	{r4, r7, pc}
 801094c:	080187a8 	.word	0x080187a8
 8010950:	08018b3c 	.word	0x08018b3c
 8010954:	080187fc 	.word	0x080187fc
 8010958:	08018b60 	.word	0x08018b60
 801095c:	08018b84 	.word	0x08018b84
 8010960:	08018b94 	.word	0x08018b94
 8010964:	08018ba4 	.word	0x08018ba4

08010968 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010968:	b590      	push	{r4, r7, lr}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d106      	bne.n	8010984 <tcp_send_fin+0x1c>
 8010976:	4b21      	ldr	r3, [pc, #132]	@ (80109fc <tcp_send_fin+0x94>)
 8010978:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801097c:	4920      	ldr	r1, [pc, #128]	@ (8010a00 <tcp_send_fin+0x98>)
 801097e:	4821      	ldr	r0, [pc, #132]	@ (8010a04 <tcp_send_fin+0x9c>)
 8010980:	f004 fd20 	bl	80153c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010988:	2b00      	cmp	r3, #0
 801098a:	d02e      	beq.n	80109ea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010990:	60fb      	str	r3, [r7, #12]
 8010992:	e002      	b.n	801099a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d1f8      	bne.n	8010994 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	68db      	ldr	r3, [r3, #12]
 80109a6:	899b      	ldrh	r3, [r3, #12]
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7f9 f896 	bl	8009adc <lwip_htons>
 80109b0:	4603      	mov	r3, r0
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	f003 0307 	and.w	r3, r3, #7
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d116      	bne.n	80109ea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	899b      	ldrh	r3, [r3, #12]
 80109c2:	b29c      	uxth	r4, r3
 80109c4:	2001      	movs	r0, #1
 80109c6:	f7f9 f889 	bl	8009adc <lwip_htons>
 80109ca:	4603      	mov	r3, r0
 80109cc:	461a      	mov	r2, r3
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	4322      	orrs	r2, r4
 80109d4:	b292      	uxth	r2, r2
 80109d6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	8b5b      	ldrh	r3, [r3, #26]
 80109dc:	f043 0320 	orr.w	r3, r3, #32
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80109e6:	2300      	movs	r3, #0
 80109e8:	e004      	b.n	80109f4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80109ea:	2101      	movs	r1, #1
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 f80b 	bl	8010a08 <tcp_enqueue_flags>
 80109f2:	4603      	mov	r3, r0
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3714      	adds	r7, #20
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd90      	pop	{r4, r7, pc}
 80109fc:	080187a8 	.word	0x080187a8
 8010a00:	08018bb0 	.word	0x08018bb0
 8010a04:	080187fc 	.word	0x080187fc

08010a08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b08a      	sub	sp, #40	@ 0x28
 8010a0c:	af02      	add	r7, sp, #8
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	460b      	mov	r3, r1
 8010a12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010a1c:	78fb      	ldrb	r3, [r7, #3]
 8010a1e:	f003 0303 	and.w	r3, r3, #3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d106      	bne.n	8010a34 <tcp_enqueue_flags+0x2c>
 8010a26:	4b67      	ldr	r3, [pc, #412]	@ (8010bc4 <tcp_enqueue_flags+0x1bc>)
 8010a28:	f240 4211 	movw	r2, #1041	@ 0x411
 8010a2c:	4966      	ldr	r1, [pc, #408]	@ (8010bc8 <tcp_enqueue_flags+0x1c0>)
 8010a2e:	4867      	ldr	r0, [pc, #412]	@ (8010bcc <tcp_enqueue_flags+0x1c4>)
 8010a30:	f004 fcc8 	bl	80153c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d106      	bne.n	8010a48 <tcp_enqueue_flags+0x40>
 8010a3a:	4b62      	ldr	r3, [pc, #392]	@ (8010bc4 <tcp_enqueue_flags+0x1bc>)
 8010a3c:	f240 4213 	movw	r2, #1043	@ 0x413
 8010a40:	4963      	ldr	r1, [pc, #396]	@ (8010bd0 <tcp_enqueue_flags+0x1c8>)
 8010a42:	4862      	ldr	r0, [pc, #392]	@ (8010bcc <tcp_enqueue_flags+0x1c4>)
 8010a44:	f004 fcbe 	bl	80153c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010a48:	78fb      	ldrb	r3, [r7, #3]
 8010a4a:	f003 0302 	and.w	r3, r3, #2
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d001      	beq.n	8010a56 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010a52:	2301      	movs	r3, #1
 8010a54:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a56:	7ffb      	ldrb	r3, [r7, #31]
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	f003 0304 	and.w	r3, r3, #4
 8010a60:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a62:	7dfb      	ldrb	r3, [r7, #23]
 8010a64:	b29b      	uxth	r3, r3
 8010a66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	2036      	movs	r0, #54	@ 0x36
 8010a6e:	f7fa f93f 	bl	800acf0 <pbuf_alloc>
 8010a72:	6138      	str	r0, [r7, #16]
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d109      	bne.n	8010a8e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	8b5b      	ldrh	r3, [r3, #26]
 8010a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a88:	f04f 33ff 	mov.w	r3, #4294967295
 8010a8c:	e095      	b.n	8010bba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	895a      	ldrh	r2, [r3, #10]
 8010a92:	7dfb      	ldrb	r3, [r7, #23]
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d206      	bcs.n	8010aa8 <tcp_enqueue_flags+0xa0>
 8010a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8010bc4 <tcp_enqueue_flags+0x1bc>)
 8010a9c:	f240 4239 	movw	r2, #1081	@ 0x439
 8010aa0:	494c      	ldr	r1, [pc, #304]	@ (8010bd4 <tcp_enqueue_flags+0x1cc>)
 8010aa2:	484a      	ldr	r0, [pc, #296]	@ (8010bcc <tcp_enqueue_flags+0x1c4>)
 8010aa4:	f004 fc8e 	bl	80153c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010aac:	78fa      	ldrb	r2, [r7, #3]
 8010aae:	7ffb      	ldrb	r3, [r7, #31]
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	6939      	ldr	r1, [r7, #16]
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7ff f91a 	bl	800fcf0 <tcp_create_segment>
 8010abc:	60f8      	str	r0, [r7, #12]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d109      	bne.n	8010ad8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	8b5b      	ldrh	r3, [r3, #26]
 8010ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ad6:	e070      	b.n	8010bba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	f003 0303 	and.w	r3, r3, #3
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d006      	beq.n	8010af2 <tcp_enqueue_flags+0xea>
 8010ae4:	4b37      	ldr	r3, [pc, #220]	@ (8010bc4 <tcp_enqueue_flags+0x1bc>)
 8010ae6:	f240 4242 	movw	r2, #1090	@ 0x442
 8010aea:	493b      	ldr	r1, [pc, #236]	@ (8010bd8 <tcp_enqueue_flags+0x1d0>)
 8010aec:	4837      	ldr	r0, [pc, #220]	@ (8010bcc <tcp_enqueue_flags+0x1c4>)
 8010aee:	f004 fc69 	bl	80153c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	891b      	ldrh	r3, [r3, #8]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d006      	beq.n	8010b08 <tcp_enqueue_flags+0x100>
 8010afa:	4b32      	ldr	r3, [pc, #200]	@ (8010bc4 <tcp_enqueue_flags+0x1bc>)
 8010afc:	f240 4243 	movw	r2, #1091	@ 0x443
 8010b00:	4936      	ldr	r1, [pc, #216]	@ (8010bdc <tcp_enqueue_flags+0x1d4>)
 8010b02:	4832      	ldr	r0, [pc, #200]	@ (8010bcc <tcp_enqueue_flags+0x1c4>)
 8010b04:	f004 fc5e 	bl	80153c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d103      	bne.n	8010b18 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010b16:	e00d      	b.n	8010b34 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b1c:	61bb      	str	r3, [r7, #24]
 8010b1e:	e002      	b.n	8010b26 <tcp_enqueue_flags+0x11e>
 8010b20:	69bb      	ldr	r3, [r7, #24]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	61bb      	str	r3, [r7, #24]
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1f8      	bne.n	8010b20 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010b3c:	78fb      	ldrb	r3, [r7, #3]
 8010b3e:	f003 0302 	and.w	r3, r3, #2
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d104      	bne.n	8010b50 <tcp_enqueue_flags+0x148>
 8010b46:	78fb      	ldrb	r3, [r7, #3]
 8010b48:	f003 0301 	and.w	r3, r3, #1
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d004      	beq.n	8010b5a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010b5a:	78fb      	ldrb	r3, [r7, #3]
 8010b5c:	f003 0301 	and.w	r3, r3, #1
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d006      	beq.n	8010b72 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	8b5b      	ldrh	r3, [r3, #26]
 8010b68:	f043 0320 	orr.w	r3, r3, #32
 8010b6c:	b29a      	uxth	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7fa fc2c 	bl	800b3d4 <pbuf_clen>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	461a      	mov	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b86:	4413      	add	r3, r2
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d00e      	beq.n	8010bb8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d10a      	bne.n	8010bb8 <tcp_enqueue_flags+0x1b0>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d106      	bne.n	8010bb8 <tcp_enqueue_flags+0x1b0>
 8010baa:	4b06      	ldr	r3, [pc, #24]	@ (8010bc4 <tcp_enqueue_flags+0x1bc>)
 8010bac:	f240 4265 	movw	r2, #1125	@ 0x465
 8010bb0:	490b      	ldr	r1, [pc, #44]	@ (8010be0 <tcp_enqueue_flags+0x1d8>)
 8010bb2:	4806      	ldr	r0, [pc, #24]	@ (8010bcc <tcp_enqueue_flags+0x1c4>)
 8010bb4:	f004 fc06 	bl	80153c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3720      	adds	r7, #32
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	080187a8 	.word	0x080187a8
 8010bc8:	08018bcc 	.word	0x08018bcc
 8010bcc:	080187fc 	.word	0x080187fc
 8010bd0:	08018c24 	.word	0x08018c24
 8010bd4:	08018c44 	.word	0x08018c44
 8010bd8:	08018c80 	.word	0x08018c80
 8010bdc:	08018c98 	.word	0x08018c98
 8010be0:	08018cc4 	.word	0x08018cc4

08010be4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010be4:	b5b0      	push	{r4, r5, r7, lr}
 8010be6:	b08a      	sub	sp, #40	@ 0x28
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d106      	bne.n	8010c00 <tcp_output+0x1c>
 8010bf2:	4b8a      	ldr	r3, [pc, #552]	@ (8010e1c <tcp_output+0x238>)
 8010bf4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010bf8:	4989      	ldr	r1, [pc, #548]	@ (8010e20 <tcp_output+0x23c>)
 8010bfa:	488a      	ldr	r0, [pc, #552]	@ (8010e24 <tcp_output+0x240>)
 8010bfc:	f004 fbe2 	bl	80153c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	7d1b      	ldrb	r3, [r3, #20]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d106      	bne.n	8010c16 <tcp_output+0x32>
 8010c08:	4b84      	ldr	r3, [pc, #528]	@ (8010e1c <tcp_output+0x238>)
 8010c0a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010c0e:	4986      	ldr	r1, [pc, #536]	@ (8010e28 <tcp_output+0x244>)
 8010c10:	4884      	ldr	r0, [pc, #528]	@ (8010e24 <tcp_output+0x240>)
 8010c12:	f004 fbd7 	bl	80153c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010c16:	4b85      	ldr	r3, [pc, #532]	@ (8010e2c <tcp_output+0x248>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d101      	bne.n	8010c24 <tcp_output+0x40>
    return ERR_OK;
 8010c20:	2300      	movs	r3, #0
 8010c22:	e1ce      	b.n	8010fc2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010c30:	4293      	cmp	r3, r2
 8010c32:	bf28      	it	cs
 8010c34:	4613      	movcs	r3, r2
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d10b      	bne.n	8010c5e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	8b5b      	ldrh	r3, [r3, #26]
 8010c4a:	f003 0302 	and.w	r3, r3, #2
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 81aa 	beq.w	8010fa8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f000 fdcb 	bl	80117f0 <tcp_send_empty_ack>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	e1b1      	b.n	8010fc2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010c5e:	6879      	ldr	r1, [r7, #4]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	3304      	adds	r3, #4
 8010c64:	461a      	mov	r2, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7ff f826 	bl	800fcb8 <tcp_route>
 8010c6c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d102      	bne.n	8010c7a <tcp_output+0x96>
    return ERR_RTE;
 8010c74:	f06f 0303 	mvn.w	r3, #3
 8010c78:	e1a3      	b.n	8010fc2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d003      	beq.n	8010c88 <tcp_output+0xa4>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d111      	bne.n	8010cac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d002      	beq.n	8010c94 <tcp_output+0xb0>
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	3304      	adds	r3, #4
 8010c92:	e000      	b.n	8010c96 <tcp_output+0xb2>
 8010c94:	2300      	movs	r3, #0
 8010c96:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d102      	bne.n	8010ca4 <tcp_output+0xc0>
      return ERR_RTE;
 8010c9e:	f06f 0303 	mvn.w	r3, #3
 8010ca2:	e18e      	b.n	8010fc2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7f8 ff27 	bl	8009b06 <lwip_htonl>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cbe:	1ad3      	subs	r3, r2, r3
 8010cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cc2:	8912      	ldrh	r2, [r2, #8]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	69ba      	ldr	r2, [r7, #24]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d227      	bcs.n	8010d1c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	69bb      	ldr	r3, [r7, #24]
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d114      	bne.n	8010d04 <tcp_output+0x120>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d110      	bne.n	8010d04 <tcp_output+0x120>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d10b      	bne.n	8010d04 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	8b5b      	ldrh	r3, [r3, #26]
 8010d08:	f003 0302 	and.w	r3, r3, #2
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f000 814d 	beq.w	8010fac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 fd6c 	bl	80117f0 <tcp_send_empty_ack>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	e152      	b.n	8010fc2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d28:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010d2a:	6a3b      	ldr	r3, [r7, #32]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 811c 	beq.w	8010f6a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010d32:	e002      	b.n	8010d3a <tcp_output+0x156>
 8010d34:	6a3b      	ldr	r3, [r7, #32]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	623b      	str	r3, [r7, #32]
 8010d3a:	6a3b      	ldr	r3, [r7, #32]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1f8      	bne.n	8010d34 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010d42:	e112      	b.n	8010f6a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	899b      	ldrh	r3, [r3, #12]
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7f8 fec5 	bl	8009adc <lwip_htons>
 8010d52:	4603      	mov	r3, r0
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	f003 0304 	and.w	r3, r3, #4
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d006      	beq.n	8010d6c <tcp_output+0x188>
 8010d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8010e1c <tcp_output+0x238>)
 8010d60:	f240 5236 	movw	r2, #1334	@ 0x536
 8010d64:	4932      	ldr	r1, [pc, #200]	@ (8010e30 <tcp_output+0x24c>)
 8010d66:	482f      	ldr	r0, [pc, #188]	@ (8010e24 <tcp_output+0x240>)
 8010d68:	f004 fb2c 	bl	80153c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d01f      	beq.n	8010db4 <tcp_output+0x1d0>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	8b5b      	ldrh	r3, [r3, #26]
 8010d78:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d119      	bne.n	8010db4 <tcp_output+0x1d0>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d00b      	beq.n	8010da0 <tcp_output+0x1bc>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d110      	bne.n	8010db4 <tcp_output+0x1d0>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d96:	891a      	ldrh	r2, [r3, #8]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d209      	bcs.n	8010db4 <tcp_output+0x1d0>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d004      	beq.n	8010db4 <tcp_output+0x1d0>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010db0:	2b08      	cmp	r3, #8
 8010db2:	d901      	bls.n	8010db8 <tcp_output+0x1d4>
 8010db4:	2301      	movs	r3, #1
 8010db6:	e000      	b.n	8010dba <tcp_output+0x1d6>
 8010db8:	2300      	movs	r3, #0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d106      	bne.n	8010dcc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8b5b      	ldrh	r3, [r3, #26]
 8010dc2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f000 80e4 	beq.w	8010f94 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	7d1b      	ldrb	r3, [r3, #20]
 8010dd0:	2b02      	cmp	r3, #2
 8010dd2:	d00d      	beq.n	8010df0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	899b      	ldrh	r3, [r3, #12]
 8010dda:	b29c      	uxth	r4, r3
 8010ddc:	2010      	movs	r0, #16
 8010dde:	f7f8 fe7d 	bl	8009adc <lwip_htons>
 8010de2:	4603      	mov	r3, r0
 8010de4:	461a      	mov	r2, r3
 8010de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	4322      	orrs	r2, r4
 8010dec:	b292      	uxth	r2, r2
 8010dee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010df0:	697a      	ldr	r2, [r7, #20]
 8010df2:	6879      	ldr	r1, [r7, #4]
 8010df4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010df6:	f000 f909 	bl	801100c <tcp_output_segment>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d016      	beq.n	8010e34 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	8b5b      	ldrh	r3, [r3, #26]
 8010e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e0e:	b29a      	uxth	r2, r3
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	835a      	strh	r2, [r3, #26]
      return err;
 8010e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e18:	e0d3      	b.n	8010fc2 <tcp_output+0x3de>
 8010e1a:	bf00      	nop
 8010e1c:	080187a8 	.word	0x080187a8
 8010e20:	08018cec 	.word	0x08018cec
 8010e24:	080187fc 	.word	0x080187fc
 8010e28:	08018d04 	.word	0x08018d04
 8010e2c:	2000bfb4 	.word	0x2000bfb4
 8010e30:	08018d2c 	.word	0x08018d2c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	7d1b      	ldrb	r3, [r3, #20]
 8010e40:	2b02      	cmp	r3, #2
 8010e42:	d006      	beq.n	8010e52 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	8b5b      	ldrh	r3, [r3, #26]
 8010e48:	f023 0303 	bic.w	r3, r3, #3
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7f8 fe54 	bl	8009b06 <lwip_htonl>
 8010e5e:	4604      	mov	r4, r0
 8010e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e62:	891b      	ldrh	r3, [r3, #8]
 8010e64:	461d      	mov	r5, r3
 8010e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	899b      	ldrh	r3, [r3, #12]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7f8 fe34 	bl	8009adc <lwip_htons>
 8010e74:	4603      	mov	r3, r0
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	f003 0303 	and.w	r3, r3, #3
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d001      	beq.n	8010e84 <tcp_output+0x2a0>
 8010e80:	2301      	movs	r3, #1
 8010e82:	e000      	b.n	8010e86 <tcp_output+0x2a2>
 8010e84:	2300      	movs	r3, #0
 8010e86:	442b      	add	r3, r5
 8010e88:	4423      	add	r3, r4
 8010e8a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	1ad3      	subs	r3, r2, r3
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	da02      	bge.n	8010e9e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	68ba      	ldr	r2, [r7, #8]
 8010e9c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea0:	891b      	ldrh	r3, [r3, #8]
 8010ea2:	461c      	mov	r4, r3
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	899b      	ldrh	r3, [r3, #12]
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7f8 fe15 	bl	8009adc <lwip_htons>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	f003 0303 	and.w	r3, r3, #3
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d001      	beq.n	8010ec2 <tcp_output+0x2de>
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e000      	b.n	8010ec4 <tcp_output+0x2e0>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	4423      	add	r3, r4
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d049      	beq.n	8010f5e <tcp_output+0x37a>
      seg->next = NULL;
 8010eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ecc:	2200      	movs	r2, #0
 8010ece:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d105      	bne.n	8010ee4 <tcp_output+0x300>
        pcb->unacked = seg;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010edc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee0:	623b      	str	r3, [r7, #32]
 8010ee2:	e03f      	b.n	8010f64 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee6:	68db      	ldr	r3, [r3, #12]
 8010ee8:	685b      	ldr	r3, [r3, #4]
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7f8 fe0b 	bl	8009b06 <lwip_htonl>
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	6a3b      	ldr	r3, [r7, #32]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7f8 fe04 	bl	8009b06 <lwip_htonl>
 8010efe:	4603      	mov	r3, r0
 8010f00:	1ae3      	subs	r3, r4, r3
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	da24      	bge.n	8010f50 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	3370      	adds	r3, #112	@ 0x70
 8010f0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010f0c:	e002      	b.n	8010f14 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d011      	beq.n	8010f40 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7f8 fdee 	bl	8009b06 <lwip_htonl>
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7f8 fde7 	bl	8009b06 <lwip_htonl>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	dbe6      	blt.n	8010f0e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	681a      	ldr	r2, [r3, #0]
 8010f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f46:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f4c:	601a      	str	r2, [r3, #0]
 8010f4e:	e009      	b.n	8010f64 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010f50:	6a3b      	ldr	r3, [r7, #32]
 8010f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f54:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010f56:	6a3b      	ldr	r3, [r7, #32]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	623b      	str	r3, [r7, #32]
 8010f5c:	e002      	b.n	8010f64 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f60:	f7fb ff1f 	bl	800cda2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f68:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d012      	beq.n	8010f96 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7f8 fdc5 	bl	8009b06 <lwip_htonl>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f86:	8912      	ldrh	r2, [r2, #8]
 8010f88:	4413      	add	r3, r2
  while (seg != NULL &&
 8010f8a:	69ba      	ldr	r2, [r7, #24]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	f4bf aed9 	bcs.w	8010d44 <tcp_output+0x160>
 8010f92:	e000      	b.n	8010f96 <tcp_output+0x3b2>
      break;
 8010f94:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d108      	bne.n	8010fb0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8010fa6:	e004      	b.n	8010fb2 <tcp_output+0x3ce>
    goto output_done;
 8010fa8:	bf00      	nop
 8010faa:	e002      	b.n	8010fb2 <tcp_output+0x3ce>
    goto output_done;
 8010fac:	bf00      	nop
 8010fae:	e000      	b.n	8010fb2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010fb0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	8b5b      	ldrh	r3, [r3, #26]
 8010fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3728      	adds	r7, #40	@ 0x28
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8010fca:	bf00      	nop

08010fcc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d106      	bne.n	8010fe8 <tcp_output_segment_busy+0x1c>
 8010fda:	4b09      	ldr	r3, [pc, #36]	@ (8011000 <tcp_output_segment_busy+0x34>)
 8010fdc:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010fe0:	4908      	ldr	r1, [pc, #32]	@ (8011004 <tcp_output_segment_busy+0x38>)
 8010fe2:	4809      	ldr	r0, [pc, #36]	@ (8011008 <tcp_output_segment_busy+0x3c>)
 8010fe4:	f004 f9ee 	bl	80153c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	7b9b      	ldrb	r3, [r3, #14]
 8010fee:	2b01      	cmp	r3, #1
 8010ff0:	d001      	beq.n	8010ff6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e000      	b.n	8010ff8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3708      	adds	r7, #8
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	080187a8 	.word	0x080187a8
 8011004:	08018d44 	.word	0x08018d44
 8011008:	080187fc 	.word	0x080187fc

0801100c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801100c:	b5b0      	push	{r4, r5, r7, lr}
 801100e:	b08c      	sub	sp, #48	@ 0x30
 8011010:	af04      	add	r7, sp, #16
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d106      	bne.n	801102c <tcp_output_segment+0x20>
 801101e:	4b64      	ldr	r3, [pc, #400]	@ (80111b0 <tcp_output_segment+0x1a4>)
 8011020:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011024:	4963      	ldr	r1, [pc, #396]	@ (80111b4 <tcp_output_segment+0x1a8>)
 8011026:	4864      	ldr	r0, [pc, #400]	@ (80111b8 <tcp_output_segment+0x1ac>)
 8011028:	f004 f9cc 	bl	80153c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <tcp_output_segment+0x34>
 8011032:	4b5f      	ldr	r3, [pc, #380]	@ (80111b0 <tcp_output_segment+0x1a4>)
 8011034:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011038:	4960      	ldr	r1, [pc, #384]	@ (80111bc <tcp_output_segment+0x1b0>)
 801103a:	485f      	ldr	r0, [pc, #380]	@ (80111b8 <tcp_output_segment+0x1ac>)
 801103c:	f004 f9c2 	bl	80153c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d106      	bne.n	8011054 <tcp_output_segment+0x48>
 8011046:	4b5a      	ldr	r3, [pc, #360]	@ (80111b0 <tcp_output_segment+0x1a4>)
 8011048:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801104c:	495c      	ldr	r1, [pc, #368]	@ (80111c0 <tcp_output_segment+0x1b4>)
 801104e:	485a      	ldr	r0, [pc, #360]	@ (80111b8 <tcp_output_segment+0x1ac>)
 8011050:	f004 f9b8 	bl	80153c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f7ff ffb9 	bl	8010fcc <tcp_output_segment_busy>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d001      	beq.n	8011064 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011060:	2300      	movs	r3, #0
 8011062:	e0a1      	b.n	80111a8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	68dc      	ldr	r4, [r3, #12]
 801106c:	4610      	mov	r0, r2
 801106e:	f7f8 fd4a 	bl	8009b06 <lwip_htonl>
 8011072:	4603      	mov	r3, r0
 8011074:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	68dc      	ldr	r4, [r3, #12]
 801107e:	4610      	mov	r0, r2
 8011080:	f7f8 fd2c 	bl	8009adc <lwip_htons>
 8011084:	4603      	mov	r3, r0
 8011086:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011090:	441a      	add	r2, r3
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	68db      	ldr	r3, [r3, #12]
 801109a:	3314      	adds	r3, #20
 801109c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	7a9b      	ldrb	r3, [r3, #10]
 80110a2:	f003 0301 	and.w	r3, r3, #1
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d015      	beq.n	80110d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	3304      	adds	r3, #4
 80110ae:	461a      	mov	r2, r3
 80110b0:	6879      	ldr	r1, [r7, #4]
 80110b2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80110b6:	f7fc fa39 	bl	800d52c <tcp_eff_send_mss_netif>
 80110ba:	4603      	mov	r3, r0
 80110bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80110be:	8b7b      	ldrh	r3, [r7, #26]
 80110c0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7f8 fd1e 	bl	8009b06 <lwip_htonl>
 80110ca:	4602      	mov	r2, r0
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	3304      	adds	r3, #4
 80110d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80110dc:	2b00      	cmp	r3, #0
 80110de:	da02      	bge.n	80110e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	2200      	movs	r2, #0
 80110e4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d10c      	bne.n	8011108 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80110ee:	4b35      	ldr	r3, [pc, #212]	@ (80111c4 <tcp_output_segment+0x1b8>)
 80110f0:	681a      	ldr	r2, [r3, #0]
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	68db      	ldr	r3, [r3, #12]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7f8 fd02 	bl	8009b06 <lwip_htonl>
 8011102:	4602      	mov	r2, r0
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	68da      	ldr	r2, [r3, #12]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	8959      	ldrh	r1, [r3, #10]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	8b3a      	ldrh	r2, [r7, #24]
 8011122:	1a8a      	subs	r2, r1, r2
 8011124:	b292      	uxth	r2, r2
 8011126:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	8919      	ldrh	r1, [r3, #8]
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	8b3a      	ldrh	r2, [r7, #24]
 8011134:	1a8a      	subs	r2, r1, r2
 8011136:	b292      	uxth	r2, r2
 8011138:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	68d2      	ldr	r2, [r2, #12]
 8011142:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	68db      	ldr	r3, [r3, #12]
 8011148:	2200      	movs	r2, #0
 801114a:	741a      	strb	r2, [r3, #16]
 801114c:	2200      	movs	r2, #0
 801114e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	68da      	ldr	r2, [r3, #12]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	7a9b      	ldrb	r3, [r3, #10]
 8011158:	f003 0301 	and.w	r3, r3, #1
 801115c:	2b00      	cmp	r3, #0
 801115e:	d001      	beq.n	8011164 <tcp_output_segment+0x158>
 8011160:	2318      	movs	r3, #24
 8011162:	e000      	b.n	8011166 <tcp_output_segment+0x15a>
 8011164:	2314      	movs	r3, #20
 8011166:	4413      	add	r3, r2
 8011168:	69fa      	ldr	r2, [r7, #28]
 801116a:	429a      	cmp	r2, r3
 801116c:	d006      	beq.n	801117c <tcp_output_segment+0x170>
 801116e:	4b10      	ldr	r3, [pc, #64]	@ (80111b0 <tcp_output_segment+0x1a4>)
 8011170:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011174:	4914      	ldr	r1, [pc, #80]	@ (80111c8 <tcp_output_segment+0x1bc>)
 8011176:	4810      	ldr	r0, [pc, #64]	@ (80111b8 <tcp_output_segment+0x1ac>)
 8011178:	f004 f924 	bl	80153c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6858      	ldr	r0, [r3, #4]
 8011180:	68b9      	ldr	r1, [r7, #8]
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	1d1c      	adds	r4, r3, #4
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	7add      	ldrb	r5, [r3, #11]
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	7a9b      	ldrb	r3, [r3, #10]
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	9202      	str	r2, [sp, #8]
 8011192:	2206      	movs	r2, #6
 8011194:	9201      	str	r2, [sp, #4]
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	462b      	mov	r3, r5
 801119a:	4622      	mov	r2, r4
 801119c:	f002 fe02 	bl	8013da4 <ip4_output_if>
 80111a0:	4603      	mov	r3, r0
 80111a2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80111a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3720      	adds	r7, #32
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bdb0      	pop	{r4, r5, r7, pc}
 80111b0:	080187a8 	.word	0x080187a8
 80111b4:	08018d6c 	.word	0x08018d6c
 80111b8:	080187fc 	.word	0x080187fc
 80111bc:	08018d8c 	.word	0x08018d8c
 80111c0:	08018dac 	.word	0x08018dac
 80111c4:	2000bf68 	.word	0x2000bf68
 80111c8:	08018dd0 	.word	0x08018dd0

080111cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80111cc:	b5b0      	push	{r4, r5, r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d106      	bne.n	80111e8 <tcp_rexmit_rto_prepare+0x1c>
 80111da:	4b31      	ldr	r3, [pc, #196]	@ (80112a0 <tcp_rexmit_rto_prepare+0xd4>)
 80111dc:	f240 6263 	movw	r2, #1635	@ 0x663
 80111e0:	4930      	ldr	r1, [pc, #192]	@ (80112a4 <tcp_rexmit_rto_prepare+0xd8>)
 80111e2:	4831      	ldr	r0, [pc, #196]	@ (80112a8 <tcp_rexmit_rto_prepare+0xdc>)
 80111e4:	f004 f8ee 	bl	80153c4 <iprintf>

  if (pcb->unacked == NULL) {
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d102      	bne.n	80111f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80111f0:	f06f 0305 	mvn.w	r3, #5
 80111f4:	e050      	b.n	8011298 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111fa:	60fb      	str	r3, [r7, #12]
 80111fc:	e00b      	b.n	8011216 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	f7ff fee4 	bl	8010fcc <tcp_output_segment_busy>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d002      	beq.n	8011210 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801120a:	f06f 0305 	mvn.w	r3, #5
 801120e:	e043      	b.n	8011298 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	60fb      	str	r3, [r7, #12]
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d1ef      	bne.n	80111fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f7ff fed4 	bl	8010fcc <tcp_output_segment_busy>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d002      	beq.n	8011230 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801122a:	f06f 0305 	mvn.w	r3, #5
 801122e:	e033      	b.n	8011298 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2200      	movs	r2, #0
 8011244:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	8b5b      	ldrh	r3, [r3, #26]
 801124a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801124e:	b29a      	uxth	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	4618      	mov	r0, r3
 801125c:	f7f8 fc53 	bl	8009b06 <lwip_htonl>
 8011260:	4604      	mov	r4, r0
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	891b      	ldrh	r3, [r3, #8]
 8011266:	461d      	mov	r5, r3
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	899b      	ldrh	r3, [r3, #12]
 801126e:	b29b      	uxth	r3, r3
 8011270:	4618      	mov	r0, r3
 8011272:	f7f8 fc33 	bl	8009adc <lwip_htons>
 8011276:	4603      	mov	r3, r0
 8011278:	b2db      	uxtb	r3, r3
 801127a:	f003 0303 	and.w	r3, r3, #3
 801127e:	2b00      	cmp	r3, #0
 8011280:	d001      	beq.n	8011286 <tcp_rexmit_rto_prepare+0xba>
 8011282:	2301      	movs	r3, #1
 8011284:	e000      	b.n	8011288 <tcp_rexmit_rto_prepare+0xbc>
 8011286:	2300      	movs	r3, #0
 8011288:	442b      	add	r3, r5
 801128a:	18e2      	adds	r2, r4, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2200      	movs	r2, #0
 8011294:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3710      	adds	r7, #16
 801129c:	46bd      	mov	sp, r7
 801129e:	bdb0      	pop	{r4, r5, r7, pc}
 80112a0:	080187a8 	.word	0x080187a8
 80112a4:	08018de4 	.word	0x08018de4
 80112a8:	080187fc 	.word	0x080187fc

080112ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d106      	bne.n	80112c8 <tcp_rexmit_rto_commit+0x1c>
 80112ba:	4b0d      	ldr	r3, [pc, #52]	@ (80112f0 <tcp_rexmit_rto_commit+0x44>)
 80112bc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80112c0:	490c      	ldr	r1, [pc, #48]	@ (80112f4 <tcp_rexmit_rto_commit+0x48>)
 80112c2:	480d      	ldr	r0, [pc, #52]	@ (80112f8 <tcp_rexmit_rto_commit+0x4c>)
 80112c4:	f004 f87e 	bl	80153c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80112ce:	2bff      	cmp	r3, #255	@ 0xff
 80112d0:	d007      	beq.n	80112e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80112d8:	3301      	adds	r3, #1
 80112da:	b2da      	uxtb	r2, r3
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f7ff fc7e 	bl	8010be4 <tcp_output>
}
 80112e8:	bf00      	nop
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	080187a8 	.word	0x080187a8
 80112f4:	08018e08 	.word	0x08018e08
 80112f8:	080187fc 	.word	0x080187fc

080112fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d106      	bne.n	8011318 <tcp_rexmit_rto+0x1c>
 801130a:	4b0a      	ldr	r3, [pc, #40]	@ (8011334 <tcp_rexmit_rto+0x38>)
 801130c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011310:	4909      	ldr	r1, [pc, #36]	@ (8011338 <tcp_rexmit_rto+0x3c>)
 8011312:	480a      	ldr	r0, [pc, #40]	@ (801133c <tcp_rexmit_rto+0x40>)
 8011314:	f004 f856 	bl	80153c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f7ff ff57 	bl	80111cc <tcp_rexmit_rto_prepare>
 801131e:	4603      	mov	r3, r0
 8011320:	2b00      	cmp	r3, #0
 8011322:	d102      	bne.n	801132a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f7ff ffc1 	bl	80112ac <tcp_rexmit_rto_commit>
  }
}
 801132a:	bf00      	nop
 801132c:	3708      	adds	r7, #8
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	080187a8 	.word	0x080187a8
 8011338:	08018e2c 	.word	0x08018e2c
 801133c:	080187fc 	.word	0x080187fc

08011340 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011340:	b590      	push	{r4, r7, lr}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d106      	bne.n	801135c <tcp_rexmit+0x1c>
 801134e:	4b2f      	ldr	r3, [pc, #188]	@ (801140c <tcp_rexmit+0xcc>)
 8011350:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8011354:	492e      	ldr	r1, [pc, #184]	@ (8011410 <tcp_rexmit+0xd0>)
 8011356:	482f      	ldr	r0, [pc, #188]	@ (8011414 <tcp_rexmit+0xd4>)
 8011358:	f004 f834 	bl	80153c4 <iprintf>

  if (pcb->unacked == NULL) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011360:	2b00      	cmp	r3, #0
 8011362:	d102      	bne.n	801136a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011364:	f06f 0305 	mvn.w	r3, #5
 8011368:	e04c      	b.n	8011404 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801136e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011370:	68b8      	ldr	r0, [r7, #8]
 8011372:	f7ff fe2b 	bl	8010fcc <tcp_output_segment_busy>
 8011376:	4603      	mov	r3, r0
 8011378:	2b00      	cmp	r3, #0
 801137a:	d002      	beq.n	8011382 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801137c:	f06f 0305 	mvn.w	r3, #5
 8011380:	e040      	b.n	8011404 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	681a      	ldr	r2, [r3, #0]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	336c      	adds	r3, #108	@ 0x6c
 801138e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011390:	e002      	b.n	8011398 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d011      	beq.n	80113c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7f8 fbac 	bl	8009b06 <lwip_htonl>
 80113ae:	4604      	mov	r4, r0
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7f8 fba5 	bl	8009b06 <lwip_htonl>
 80113bc:	4603      	mov	r3, r0
 80113be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	dbe6      	blt.n	8011392 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	68ba      	ldr	r2, [r7, #8]
 80113d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d103      	bne.n	80113e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2200      	movs	r2, #0
 80113de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80113e8:	2bff      	cmp	r3, #255	@ 0xff
 80113ea:	d007      	beq.n	80113fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80113f2:	3301      	adds	r3, #1
 80113f4:	b2da      	uxtb	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3714      	adds	r7, #20
 8011408:	46bd      	mov	sp, r7
 801140a:	bd90      	pop	{r4, r7, pc}
 801140c:	080187a8 	.word	0x080187a8
 8011410:	08018e48 	.word	0x08018e48
 8011414:	080187fc 	.word	0x080187fc

08011418 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d106      	bne.n	8011434 <tcp_rexmit_fast+0x1c>
 8011426:	4b2a      	ldr	r3, [pc, #168]	@ (80114d0 <tcp_rexmit_fast+0xb8>)
 8011428:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801142c:	4929      	ldr	r1, [pc, #164]	@ (80114d4 <tcp_rexmit_fast+0xbc>)
 801142e:	482a      	ldr	r0, [pc, #168]	@ (80114d8 <tcp_rexmit_fast+0xc0>)
 8011430:	f003 ffc8 	bl	80153c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011438:	2b00      	cmp	r3, #0
 801143a:	d045      	beq.n	80114c8 <tcp_rexmit_fast+0xb0>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	8b5b      	ldrh	r3, [r3, #26]
 8011440:	f003 0304 	and.w	r3, r3, #4
 8011444:	2b00      	cmp	r3, #0
 8011446:	d13f      	bne.n	80114c8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7ff ff79 	bl	8011340 <tcp_rexmit>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d139      	bne.n	80114c8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011460:	4293      	cmp	r3, r2
 8011462:	bf28      	it	cs
 8011464:	4613      	movcs	r3, r2
 8011466:	b29b      	uxth	r3, r3
 8011468:	2b00      	cmp	r3, #0
 801146a:	da00      	bge.n	801146e <tcp_rexmit_fast+0x56>
 801146c:	3301      	adds	r3, #1
 801146e:	105b      	asrs	r3, r3, #1
 8011470:	b29a      	uxth	r2, r3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801147e:	461a      	mov	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011484:	005b      	lsls	r3, r3, #1
 8011486:	429a      	cmp	r2, r3
 8011488:	d206      	bcs.n	8011498 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801148e:	005b      	lsls	r3, r3, #1
 8011490:	b29a      	uxth	r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80114a2:	4619      	mov	r1, r3
 80114a4:	0049      	lsls	r1, r1, #1
 80114a6:	440b      	add	r3, r1
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	4413      	add	r3, r2
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	8b5b      	ldrh	r3, [r3, #26]
 80114b8:	f043 0304 	orr.w	r3, r3, #4
 80114bc:	b29a      	uxth	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80114c8:	bf00      	nop
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	080187a8 	.word	0x080187a8
 80114d4:	08018e60 	.word	0x08018e60
 80114d8:	080187fc 	.word	0x080187fc

080114dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b086      	sub	sp, #24
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	607b      	str	r3, [r7, #4]
 80114e6:	460b      	mov	r3, r1
 80114e8:	817b      	strh	r3, [r7, #10]
 80114ea:	4613      	mov	r3, r2
 80114ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80114ee:	897a      	ldrh	r2, [r7, #10]
 80114f0:	893b      	ldrh	r3, [r7, #8]
 80114f2:	4413      	add	r3, r2
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	3314      	adds	r3, #20
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114fe:	4619      	mov	r1, r3
 8011500:	2022      	movs	r0, #34	@ 0x22
 8011502:	f7f9 fbf5 	bl	800acf0 <pbuf_alloc>
 8011506:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d04d      	beq.n	80115aa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801150e:	897b      	ldrh	r3, [r7, #10]
 8011510:	3313      	adds	r3, #19
 8011512:	697a      	ldr	r2, [r7, #20]
 8011514:	8952      	ldrh	r2, [r2, #10]
 8011516:	4293      	cmp	r3, r2
 8011518:	db06      	blt.n	8011528 <tcp_output_alloc_header_common+0x4c>
 801151a:	4b26      	ldr	r3, [pc, #152]	@ (80115b4 <tcp_output_alloc_header_common+0xd8>)
 801151c:	f240 7223 	movw	r2, #1827	@ 0x723
 8011520:	4925      	ldr	r1, [pc, #148]	@ (80115b8 <tcp_output_alloc_header_common+0xdc>)
 8011522:	4826      	ldr	r0, [pc, #152]	@ (80115bc <tcp_output_alloc_header_common+0xe0>)
 8011524:	f003 ff4e 	bl	80153c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801152e:	8c3b      	ldrh	r3, [r7, #32]
 8011530:	4618      	mov	r0, r3
 8011532:	f7f8 fad3 	bl	8009adc <lwip_htons>
 8011536:	4603      	mov	r3, r0
 8011538:	461a      	mov	r2, r3
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801153e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011540:	4618      	mov	r0, r3
 8011542:	f7f8 facb 	bl	8009adc <lwip_htons>
 8011546:	4603      	mov	r3, r0
 8011548:	461a      	mov	r2, r3
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011554:	68f8      	ldr	r0, [r7, #12]
 8011556:	f7f8 fad6 	bl	8009b06 <lwip_htonl>
 801155a:	4602      	mov	r2, r0
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011560:	897b      	ldrh	r3, [r7, #10]
 8011562:	089b      	lsrs	r3, r3, #2
 8011564:	b29b      	uxth	r3, r3
 8011566:	3305      	adds	r3, #5
 8011568:	b29b      	uxth	r3, r3
 801156a:	031b      	lsls	r3, r3, #12
 801156c:	b29a      	uxth	r2, r3
 801156e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011572:	b29b      	uxth	r3, r3
 8011574:	4313      	orrs	r3, r2
 8011576:	b29b      	uxth	r3, r3
 8011578:	4618      	mov	r0, r3
 801157a:	f7f8 faaf 	bl	8009adc <lwip_htons>
 801157e:	4603      	mov	r3, r0
 8011580:	461a      	mov	r2, r3
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011586:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011588:	4618      	mov	r0, r3
 801158a:	f7f8 faa7 	bl	8009adc <lwip_htons>
 801158e:	4603      	mov	r3, r0
 8011590:	461a      	mov	r2, r3
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	2200      	movs	r2, #0
 801159a:	741a      	strb	r2, [r3, #16]
 801159c:	2200      	movs	r2, #0
 801159e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	2200      	movs	r2, #0
 80115a4:	749a      	strb	r2, [r3, #18]
 80115a6:	2200      	movs	r2, #0
 80115a8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80115aa:	697b      	ldr	r3, [r7, #20]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3718      	adds	r7, #24
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	080187a8 	.word	0x080187a8
 80115b8:	08018e80 	.word	0x08018e80
 80115bc:	080187fc 	.word	0x080187fc

080115c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80115c0:	b5b0      	push	{r4, r5, r7, lr}
 80115c2:	b08a      	sub	sp, #40	@ 0x28
 80115c4:	af04      	add	r7, sp, #16
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	607b      	str	r3, [r7, #4]
 80115ca:	460b      	mov	r3, r1
 80115cc:	817b      	strh	r3, [r7, #10]
 80115ce:	4613      	mov	r3, r2
 80115d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d106      	bne.n	80115e6 <tcp_output_alloc_header+0x26>
 80115d8:	4b15      	ldr	r3, [pc, #84]	@ (8011630 <tcp_output_alloc_header+0x70>)
 80115da:	f240 7242 	movw	r2, #1858	@ 0x742
 80115de:	4915      	ldr	r1, [pc, #84]	@ (8011634 <tcp_output_alloc_header+0x74>)
 80115e0:	4815      	ldr	r0, [pc, #84]	@ (8011638 <tcp_output_alloc_header+0x78>)
 80115e2:	f003 feef 	bl	80153c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	8adb      	ldrh	r3, [r3, #22]
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	8b12      	ldrh	r2, [r2, #24]
 80115f2:	68f9      	ldr	r1, [r7, #12]
 80115f4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80115f6:	893d      	ldrh	r5, [r7, #8]
 80115f8:	897c      	ldrh	r4, [r7, #10]
 80115fa:	9103      	str	r1, [sp, #12]
 80115fc:	2110      	movs	r1, #16
 80115fe:	9102      	str	r1, [sp, #8]
 8011600:	9201      	str	r2, [sp, #4]
 8011602:	9300      	str	r3, [sp, #0]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	462a      	mov	r2, r5
 8011608:	4621      	mov	r1, r4
 801160a:	f7ff ff67 	bl	80114dc <tcp_output_alloc_header_common>
 801160e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d006      	beq.n	8011624 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801161a:	68fa      	ldr	r2, [r7, #12]
 801161c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801161e:	441a      	add	r2, r3
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011624:	697b      	ldr	r3, [r7, #20]
}
 8011626:	4618      	mov	r0, r3
 8011628:	3718      	adds	r7, #24
 801162a:	46bd      	mov	sp, r7
 801162c:	bdb0      	pop	{r4, r5, r7, pc}
 801162e:	bf00      	nop
 8011630:	080187a8 	.word	0x080187a8
 8011634:	08018eb0 	.word	0x08018eb0
 8011638:	080187fc 	.word	0x080187fc

0801163c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b088      	sub	sp, #32
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	4611      	mov	r1, r2
 8011648:	461a      	mov	r2, r3
 801164a:	460b      	mov	r3, r1
 801164c:	71fb      	strb	r3, [r7, #7]
 801164e:	4613      	mov	r3, r2
 8011650:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d106      	bne.n	801166a <tcp_output_fill_options+0x2e>
 801165c:	4b12      	ldr	r3, [pc, #72]	@ (80116a8 <tcp_output_fill_options+0x6c>)
 801165e:	f240 7256 	movw	r2, #1878	@ 0x756
 8011662:	4912      	ldr	r1, [pc, #72]	@ (80116ac <tcp_output_fill_options+0x70>)
 8011664:	4812      	ldr	r0, [pc, #72]	@ (80116b0 <tcp_output_fill_options+0x74>)
 8011666:	f003 fead 	bl	80153c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	3314      	adds	r3, #20
 8011674:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011676:	8bfb      	ldrh	r3, [r7, #30]
 8011678:	009b      	lsls	r3, r3, #2
 801167a:	461a      	mov	r2, r3
 801167c:	79fb      	ldrb	r3, [r7, #7]
 801167e:	009b      	lsls	r3, r3, #2
 8011680:	f003 0304 	and.w	r3, r3, #4
 8011684:	4413      	add	r3, r2
 8011686:	3314      	adds	r3, #20
 8011688:	69ba      	ldr	r2, [r7, #24]
 801168a:	4413      	add	r3, r2
 801168c:	697a      	ldr	r2, [r7, #20]
 801168e:	429a      	cmp	r2, r3
 8011690:	d006      	beq.n	80116a0 <tcp_output_fill_options+0x64>
 8011692:	4b05      	ldr	r3, [pc, #20]	@ (80116a8 <tcp_output_fill_options+0x6c>)
 8011694:	f240 7275 	movw	r2, #1909	@ 0x775
 8011698:	4906      	ldr	r1, [pc, #24]	@ (80116b4 <tcp_output_fill_options+0x78>)
 801169a:	4805      	ldr	r0, [pc, #20]	@ (80116b0 <tcp_output_fill_options+0x74>)
 801169c:	f003 fe92 	bl	80153c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80116a0:	bf00      	nop
 80116a2:	3720      	adds	r7, #32
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	080187a8 	.word	0x080187a8
 80116ac:	08018ed8 	.word	0x08018ed8
 80116b0:	080187fc 	.word	0x080187fc
 80116b4:	08018dd0 	.word	0x08018dd0

080116b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b08a      	sub	sp, #40	@ 0x28
 80116bc:	af04      	add	r7, sp, #16
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
 80116c4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d106      	bne.n	80116da <tcp_output_control_segment+0x22>
 80116cc:	4b1c      	ldr	r3, [pc, #112]	@ (8011740 <tcp_output_control_segment+0x88>)
 80116ce:	f240 7287 	movw	r2, #1927	@ 0x787
 80116d2:	491c      	ldr	r1, [pc, #112]	@ (8011744 <tcp_output_control_segment+0x8c>)
 80116d4:	481c      	ldr	r0, [pc, #112]	@ (8011748 <tcp_output_control_segment+0x90>)
 80116d6:	f003 fe75 	bl	80153c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80116da:	683a      	ldr	r2, [r7, #0]
 80116dc:	6879      	ldr	r1, [r7, #4]
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f7fe faea 	bl	800fcb8 <tcp_route>
 80116e4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d102      	bne.n	80116f2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80116ec:	23fc      	movs	r3, #252	@ 0xfc
 80116ee:	75fb      	strb	r3, [r7, #23]
 80116f0:	e01c      	b.n	801172c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d006      	beq.n	8011706 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	7adb      	ldrb	r3, [r3, #11]
 80116fc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	7a9b      	ldrb	r3, [r3, #10]
 8011702:	757b      	strb	r3, [r7, #21]
 8011704:	e003      	b.n	801170e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011706:	23ff      	movs	r3, #255	@ 0xff
 8011708:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801170a:	2300      	movs	r3, #0
 801170c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801170e:	7dba      	ldrb	r2, [r7, #22]
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	9302      	str	r3, [sp, #8]
 8011714:	2306      	movs	r3, #6
 8011716:	9301      	str	r3, [sp, #4]
 8011718:	7d7b      	ldrb	r3, [r7, #21]
 801171a:	9300      	str	r3, [sp, #0]
 801171c:	4613      	mov	r3, r2
 801171e:	683a      	ldr	r2, [r7, #0]
 8011720:	6879      	ldr	r1, [r7, #4]
 8011722:	68b8      	ldr	r0, [r7, #8]
 8011724:	f002 fb3e 	bl	8013da4 <ip4_output_if>
 8011728:	4603      	mov	r3, r0
 801172a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801172c:	68b8      	ldr	r0, [r7, #8]
 801172e:	f7f9 fdc3 	bl	800b2b8 <pbuf_free>
  return err;
 8011732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3718      	adds	r7, #24
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	080187a8 	.word	0x080187a8
 8011744:	08018f00 	.word	0x08018f00
 8011748:	080187fc 	.word	0x080187fc

0801174c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801174c:	b590      	push	{r4, r7, lr}
 801174e:	b08b      	sub	sp, #44	@ 0x2c
 8011750:	af04      	add	r7, sp, #16
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	60b9      	str	r1, [r7, #8]
 8011756:	607a      	str	r2, [r7, #4]
 8011758:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d106      	bne.n	801176e <tcp_rst+0x22>
 8011760:	4b1f      	ldr	r3, [pc, #124]	@ (80117e0 <tcp_rst+0x94>)
 8011762:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011766:	491f      	ldr	r1, [pc, #124]	@ (80117e4 <tcp_rst+0x98>)
 8011768:	481f      	ldr	r0, [pc, #124]	@ (80117e8 <tcp_rst+0x9c>)
 801176a:	f003 fe2b 	bl	80153c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011770:	2b00      	cmp	r3, #0
 8011772:	d106      	bne.n	8011782 <tcp_rst+0x36>
 8011774:	4b1a      	ldr	r3, [pc, #104]	@ (80117e0 <tcp_rst+0x94>)
 8011776:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801177a:	491c      	ldr	r1, [pc, #112]	@ (80117ec <tcp_rst+0xa0>)
 801177c:	481a      	ldr	r0, [pc, #104]	@ (80117e8 <tcp_rst+0x9c>)
 801177e:	f003 fe21 	bl	80153c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011782:	2300      	movs	r3, #0
 8011784:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011786:	f246 0308 	movw	r3, #24584	@ 0x6008
 801178a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801178c:	7dfb      	ldrb	r3, [r7, #23]
 801178e:	b29c      	uxth	r4, r3
 8011790:	68b8      	ldr	r0, [r7, #8]
 8011792:	f7f8 f9b8 	bl	8009b06 <lwip_htonl>
 8011796:	4602      	mov	r2, r0
 8011798:	8abb      	ldrh	r3, [r7, #20]
 801179a:	9303      	str	r3, [sp, #12]
 801179c:	2314      	movs	r3, #20
 801179e:	9302      	str	r3, [sp, #8]
 80117a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80117a2:	9301      	str	r3, [sp, #4]
 80117a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	4613      	mov	r3, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	4621      	mov	r1, r4
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7ff fe94 	bl	80114dc <tcp_output_alloc_header_common>
 80117b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00c      	beq.n	80117d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
 80117be:	2200      	movs	r2, #0
 80117c0:	6939      	ldr	r1, [r7, #16]
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	f7ff ff3a 	bl	801163c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80117c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ca:	683a      	ldr	r2, [r7, #0]
 80117cc:	6939      	ldr	r1, [r7, #16]
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f7ff ff72 	bl	80116b8 <tcp_output_control_segment>
 80117d4:	e000      	b.n	80117d8 <tcp_rst+0x8c>
    return;
 80117d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80117d8:	371c      	adds	r7, #28
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd90      	pop	{r4, r7, pc}
 80117de:	bf00      	nop
 80117e0:	080187a8 	.word	0x080187a8
 80117e4:	08018f2c 	.word	0x08018f2c
 80117e8:	080187fc 	.word	0x080187fc
 80117ec:	08018f48 	.word	0x08018f48

080117f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80117f0:	b590      	push	{r4, r7, lr}
 80117f2:	b087      	sub	sp, #28
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80117f8:	2300      	movs	r3, #0
 80117fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80117fc:	2300      	movs	r3, #0
 80117fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d106      	bne.n	8011814 <tcp_send_empty_ack+0x24>
 8011806:	4b28      	ldr	r3, [pc, #160]	@ (80118a8 <tcp_send_empty_ack+0xb8>)
 8011808:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801180c:	4927      	ldr	r1, [pc, #156]	@ (80118ac <tcp_send_empty_ack+0xbc>)
 801180e:	4828      	ldr	r0, [pc, #160]	@ (80118b0 <tcp_send_empty_ack+0xc0>)
 8011810:	f003 fdd8 	bl	80153c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011814:	7dfb      	ldrb	r3, [r7, #23]
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	b2db      	uxtb	r3, r3
 801181a:	f003 0304 	and.w	r3, r3, #4
 801181e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011820:	7d7b      	ldrb	r3, [r7, #21]
 8011822:	b29c      	uxth	r4, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011828:	4618      	mov	r0, r3
 801182a:	f7f8 f96c 	bl	8009b06 <lwip_htonl>
 801182e:	4603      	mov	r3, r0
 8011830:	2200      	movs	r2, #0
 8011832:	4621      	mov	r1, r4
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ff fec3 	bl	80115c0 <tcp_output_alloc_header>
 801183a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d109      	bne.n	8011856 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	8b5b      	ldrh	r3, [r3, #26]
 8011846:	f043 0303 	orr.w	r3, r3, #3
 801184a:	b29a      	uxth	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011850:	f06f 0301 	mvn.w	r3, #1
 8011854:	e023      	b.n	801189e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011856:	7dbb      	ldrb	r3, [r7, #22]
 8011858:	7dfa      	ldrb	r2, [r7, #23]
 801185a:	6939      	ldr	r1, [r7, #16]
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7ff feed 	bl	801163c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	3304      	adds	r3, #4
 8011868:	6939      	ldr	r1, [r7, #16]
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ff ff24 	bl	80116b8 <tcp_output_control_segment>
 8011870:	4603      	mov	r3, r0
 8011872:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d007      	beq.n	801188c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	8b5b      	ldrh	r3, [r3, #26]
 8011880:	f043 0303 	orr.w	r3, r3, #3
 8011884:	b29a      	uxth	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	835a      	strh	r2, [r3, #26]
 801188a:	e006      	b.n	801189a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	8b5b      	ldrh	r3, [r3, #26]
 8011890:	f023 0303 	bic.w	r3, r3, #3
 8011894:	b29a      	uxth	r2, r3
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	371c      	adds	r7, #28
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd90      	pop	{r4, r7, pc}
 80118a6:	bf00      	nop
 80118a8:	080187a8 	.word	0x080187a8
 80118ac:	08018f64 	.word	0x08018f64
 80118b0:	080187fc 	.word	0x080187fc

080118b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80118b4:	b590      	push	{r4, r7, lr}
 80118b6:	b087      	sub	sp, #28
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118bc:	2300      	movs	r3, #0
 80118be:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d106      	bne.n	80118d4 <tcp_keepalive+0x20>
 80118c6:	4b18      	ldr	r3, [pc, #96]	@ (8011928 <tcp_keepalive+0x74>)
 80118c8:	f640 0224 	movw	r2, #2084	@ 0x824
 80118cc:	4917      	ldr	r1, [pc, #92]	@ (801192c <tcp_keepalive+0x78>)
 80118ce:	4818      	ldr	r0, [pc, #96]	@ (8011930 <tcp_keepalive+0x7c>)
 80118d0:	f003 fd78 	bl	80153c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80118d4:	7dfb      	ldrb	r3, [r7, #23]
 80118d6:	b29c      	uxth	r4, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80118dc:	3b01      	subs	r3, #1
 80118de:	4618      	mov	r0, r3
 80118e0:	f7f8 f911 	bl	8009b06 <lwip_htonl>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2200      	movs	r2, #0
 80118e8:	4621      	mov	r1, r4
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7ff fe68 	bl	80115c0 <tcp_output_alloc_header>
 80118f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d102      	bne.n	80118fe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80118f8:	f04f 33ff 	mov.w	r3, #4294967295
 80118fc:	e010      	b.n	8011920 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80118fe:	7dfb      	ldrb	r3, [r7, #23]
 8011900:	2200      	movs	r2, #0
 8011902:	6939      	ldr	r1, [r7, #16]
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7ff fe99 	bl	801163c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	3304      	adds	r3, #4
 8011910:	6939      	ldr	r1, [r7, #16]
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7ff fed0 	bl	80116b8 <tcp_output_control_segment>
 8011918:	4603      	mov	r3, r0
 801191a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801191c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011920:	4618      	mov	r0, r3
 8011922:	371c      	adds	r7, #28
 8011924:	46bd      	mov	sp, r7
 8011926:	bd90      	pop	{r4, r7, pc}
 8011928:	080187a8 	.word	0x080187a8
 801192c:	08018f84 	.word	0x08018f84
 8011930:	080187fc 	.word	0x080187fc

08011934 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011934:	b590      	push	{r4, r7, lr}
 8011936:	b08b      	sub	sp, #44	@ 0x2c
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801193c:	2300      	movs	r3, #0
 801193e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d106      	bne.n	8011956 <tcp_zero_window_probe+0x22>
 8011948:	4b4c      	ldr	r3, [pc, #304]	@ (8011a7c <tcp_zero_window_probe+0x148>)
 801194a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801194e:	494c      	ldr	r1, [pc, #304]	@ (8011a80 <tcp_zero_window_probe+0x14c>)
 8011950:	484c      	ldr	r0, [pc, #304]	@ (8011a84 <tcp_zero_window_probe+0x150>)
 8011952:	f003 fd37 	bl	80153c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801195a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801195c:	6a3b      	ldr	r3, [r7, #32]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d101      	bne.n	8011966 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011962:	2300      	movs	r3, #0
 8011964:	e086      	b.n	8011a74 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801196c:	2bff      	cmp	r3, #255	@ 0xff
 801196e:	d007      	beq.n	8011980 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011976:	3301      	adds	r3, #1
 8011978:	b2da      	uxtb	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011980:	6a3b      	ldr	r3, [r7, #32]
 8011982:	68db      	ldr	r3, [r3, #12]
 8011984:	899b      	ldrh	r3, [r3, #12]
 8011986:	b29b      	uxth	r3, r3
 8011988:	4618      	mov	r0, r3
 801198a:	f7f8 f8a7 	bl	8009adc <lwip_htons>
 801198e:	4603      	mov	r3, r0
 8011990:	b2db      	uxtb	r3, r3
 8011992:	f003 0301 	and.w	r3, r3, #1
 8011996:	2b00      	cmp	r3, #0
 8011998:	d005      	beq.n	80119a6 <tcp_zero_window_probe+0x72>
 801199a:	6a3b      	ldr	r3, [r7, #32]
 801199c:	891b      	ldrh	r3, [r3, #8]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d101      	bne.n	80119a6 <tcp_zero_window_probe+0x72>
 80119a2:	2301      	movs	r3, #1
 80119a4:	e000      	b.n	80119a8 <tcp_zero_window_probe+0x74>
 80119a6:	2300      	movs	r3, #0
 80119a8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80119aa:	7ffb      	ldrb	r3, [r7, #31]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	bf0c      	ite	eq
 80119b0:	2301      	moveq	r3, #1
 80119b2:	2300      	movne	r3, #0
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80119b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119bc:	b299      	uxth	r1, r3
 80119be:	6a3b      	ldr	r3, [r7, #32]
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	8bba      	ldrh	r2, [r7, #28]
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f7ff fdfa 	bl	80115c0 <tcp_output_alloc_header>
 80119cc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80119ce:	69bb      	ldr	r3, [r7, #24]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d102      	bne.n	80119da <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80119d4:	f04f 33ff 	mov.w	r3, #4294967295
 80119d8:	e04c      	b.n	8011a74 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80119e0:	7ffb      	ldrb	r3, [r7, #31]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d011      	beq.n	8011a0a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	899b      	ldrh	r3, [r3, #12]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	b21b      	sxth	r3, r3
 80119ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80119f2:	b21c      	sxth	r4, r3
 80119f4:	2011      	movs	r0, #17
 80119f6:	f7f8 f871 	bl	8009adc <lwip_htons>
 80119fa:	4603      	mov	r3, r0
 80119fc:	b21b      	sxth	r3, r3
 80119fe:	4323      	orrs	r3, r4
 8011a00:	b21b      	sxth	r3, r3
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	819a      	strh	r2, [r3, #12]
 8011a08:	e010      	b.n	8011a2c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011a0a:	69bb      	ldr	r3, [r7, #24]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	3314      	adds	r3, #20
 8011a10:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011a12:	6a3b      	ldr	r3, [r7, #32]
 8011a14:	6858      	ldr	r0, [r3, #4]
 8011a16:	6a3b      	ldr	r3, [r7, #32]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	891a      	ldrh	r2, [r3, #8]
 8011a1c:	6a3b      	ldr	r3, [r7, #32]
 8011a1e:	891b      	ldrh	r3, [r3, #8]
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	b29b      	uxth	r3, r3
 8011a24:	2201      	movs	r2, #1
 8011a26:	6939      	ldr	r1, [r7, #16]
 8011a28:	f7f9 fe4c 	bl	800b6c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011a2c:	6a3b      	ldr	r3, [r7, #32]
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7f8 f867 	bl	8009b06 <lwip_htonl>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	da02      	bge.n	8011a50 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a54:	2200      	movs	r2, #0
 8011a56:	69b9      	ldr	r1, [r7, #24]
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f7ff fdef 	bl	801163c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011a5e:	687a      	ldr	r2, [r7, #4]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	3304      	adds	r3, #4
 8011a64:	69b9      	ldr	r1, [r7, #24]
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f7ff fe26 	bl	80116b8 <tcp_output_control_segment>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	372c      	adds	r7, #44	@ 0x2c
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd90      	pop	{r4, r7, pc}
 8011a7c:	080187a8 	.word	0x080187a8
 8011a80:	08018fa0 	.word	0x08018fa0
 8011a84:	080187fc 	.word	0x080187fc

08011a88 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011a90:	f7f9 ff98 	bl	800b9c4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011a94:	4b0a      	ldr	r3, [pc, #40]	@ (8011ac0 <tcpip_tcp_timer+0x38>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d103      	bne.n	8011aa4 <tcpip_tcp_timer+0x1c>
 8011a9c:	4b09      	ldr	r3, [pc, #36]	@ (8011ac4 <tcpip_tcp_timer+0x3c>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d005      	beq.n	8011ab0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	4908      	ldr	r1, [pc, #32]	@ (8011ac8 <tcpip_tcp_timer+0x40>)
 8011aa8:	20fa      	movs	r0, #250	@ 0xfa
 8011aaa:	f000 f8f3 	bl	8011c94 <sys_timeout>
 8011aae:	e003      	b.n	8011ab8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011ab0:	4b06      	ldr	r3, [pc, #24]	@ (8011acc <tcpip_tcp_timer+0x44>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	601a      	str	r2, [r3, #0]
  }
}
 8011ab6:	bf00      	nop
 8011ab8:	bf00      	nop
 8011aba:	3708      	adds	r7, #8
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	2000bf74 	.word	0x2000bf74
 8011ac4:	2000bf78 	.word	0x2000bf78
 8011ac8:	08011a89 	.word	0x08011a89
 8011acc:	2000bfc0 	.word	0x2000bfc0

08011ad0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8011b00 <tcp_timer_needed+0x30>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d10f      	bne.n	8011afc <tcp_timer_needed+0x2c>
 8011adc:	4b09      	ldr	r3, [pc, #36]	@ (8011b04 <tcp_timer_needed+0x34>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d103      	bne.n	8011aec <tcp_timer_needed+0x1c>
 8011ae4:	4b08      	ldr	r3, [pc, #32]	@ (8011b08 <tcp_timer_needed+0x38>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d007      	beq.n	8011afc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011aec:	4b04      	ldr	r3, [pc, #16]	@ (8011b00 <tcp_timer_needed+0x30>)
 8011aee:	2201      	movs	r2, #1
 8011af0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011af2:	2200      	movs	r2, #0
 8011af4:	4905      	ldr	r1, [pc, #20]	@ (8011b0c <tcp_timer_needed+0x3c>)
 8011af6:	20fa      	movs	r0, #250	@ 0xfa
 8011af8:	f000 f8cc 	bl	8011c94 <sys_timeout>
  }
}
 8011afc:	bf00      	nop
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	2000bfc0 	.word	0x2000bfc0
 8011b04:	2000bf74 	.word	0x2000bf74
 8011b08:	2000bf78 	.word	0x2000bf78
 8011b0c:	08011a89 	.word	0x08011a89

08011b10 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011b1c:	200a      	movs	r0, #10
 8011b1e:	f7f8 fcb1 	bl	800a484 <memp_malloc>
 8011b22:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d109      	bne.n	8011b3e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d151      	bne.n	8011bd4 <sys_timeout_abs+0xc4>
 8011b30:	4b2a      	ldr	r3, [pc, #168]	@ (8011bdc <sys_timeout_abs+0xcc>)
 8011b32:	22be      	movs	r2, #190	@ 0xbe
 8011b34:	492a      	ldr	r1, [pc, #168]	@ (8011be0 <sys_timeout_abs+0xd0>)
 8011b36:	482b      	ldr	r0, [pc, #172]	@ (8011be4 <sys_timeout_abs+0xd4>)
 8011b38:	f003 fc44 	bl	80153c4 <iprintf>
    return;
 8011b3c:	e04a      	b.n	8011bd4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	2200      	movs	r2, #0
 8011b42:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	68ba      	ldr	r2, [r7, #8]
 8011b48:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	68fa      	ldr	r2, [r7, #12]
 8011b54:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011b56:	4b24      	ldr	r3, [pc, #144]	@ (8011be8 <sys_timeout_abs+0xd8>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d103      	bne.n	8011b66 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011b5e:	4a22      	ldr	r2, [pc, #136]	@ (8011be8 <sys_timeout_abs+0xd8>)
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	6013      	str	r3, [r2, #0]
    return;
 8011b64:	e037      	b.n	8011bd6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	685a      	ldr	r2, [r3, #4]
 8011b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8011be8 <sys_timeout_abs+0xd8>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	1ad3      	subs	r3, r2, r3
 8011b72:	0fdb      	lsrs	r3, r3, #31
 8011b74:	f003 0301 	and.w	r3, r3, #1
 8011b78:	b2db      	uxtb	r3, r3
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d007      	beq.n	8011b8e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8011be8 <sys_timeout_abs+0xd8>)
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011b86:	4a18      	ldr	r2, [pc, #96]	@ (8011be8 <sys_timeout_abs+0xd8>)
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	6013      	str	r3, [r2, #0]
 8011b8c:	e023      	b.n	8011bd6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b8e:	4b16      	ldr	r3, [pc, #88]	@ (8011be8 <sys_timeout_abs+0xd8>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	617b      	str	r3, [r7, #20]
 8011b94:	e01a      	b.n	8011bcc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00b      	beq.n	8011bb6 <sys_timeout_abs+0xa6>
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	685a      	ldr	r2, [r3, #4]
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	0fdb      	lsrs	r3, r3, #31
 8011bac:	f003 0301 	and.w	r3, r3, #1
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d007      	beq.n	8011bc6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	693a      	ldr	r2, [r7, #16]
 8011bc2:	601a      	str	r2, [r3, #0]
        break;
 8011bc4:	e007      	b.n	8011bd6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	617b      	str	r3, [r7, #20]
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d1e1      	bne.n	8011b96 <sys_timeout_abs+0x86>
 8011bd2:	e000      	b.n	8011bd6 <sys_timeout_abs+0xc6>
    return;
 8011bd4:	bf00      	nop
      }
    }
  }
}
 8011bd6:	3718      	adds	r7, #24
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	08018fc4 	.word	0x08018fc4
 8011be0:	08018ff8 	.word	0x08018ff8
 8011be4:	08019038 	.word	0x08019038
 8011be8:	2000bfb8 	.word	0x2000bfb8

08011bec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b086      	sub	sp, #24
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	4798      	blx	r3

  now = sys_now();
 8011bfe:	f7f2 fad9 	bl	80041b4 <sys_now>
 8011c02:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	4b0f      	ldr	r3, [pc, #60]	@ (8011c48 <lwip_cyclic_timer+0x5c>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011c10:	68fa      	ldr	r2, [r7, #12]
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	0fdb      	lsrs	r3, r3, #31
 8011c18:	f003 0301 	and.w	r3, r3, #1
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d009      	beq.n	8011c36 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	4413      	add	r3, r2
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	4907      	ldr	r1, [pc, #28]	@ (8011c4c <lwip_cyclic_timer+0x60>)
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7ff ff6e 	bl	8011b10 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011c34:	e004      	b.n	8011c40 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011c36:	687a      	ldr	r2, [r7, #4]
 8011c38:	4904      	ldr	r1, [pc, #16]	@ (8011c4c <lwip_cyclic_timer+0x60>)
 8011c3a:	68f8      	ldr	r0, [r7, #12]
 8011c3c:	f7ff ff68 	bl	8011b10 <sys_timeout_abs>
}
 8011c40:	bf00      	nop
 8011c42:	3718      	adds	r7, #24
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	2000bfbc 	.word	0x2000bfbc
 8011c4c:	08011bed 	.word	0x08011bed

08011c50 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011c56:	2301      	movs	r3, #1
 8011c58:	607b      	str	r3, [r7, #4]
 8011c5a:	e00e      	b.n	8011c7a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8011c8c <sys_timeouts_init+0x3c>)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	00db      	lsls	r3, r3, #3
 8011c68:	4a08      	ldr	r2, [pc, #32]	@ (8011c8c <sys_timeouts_init+0x3c>)
 8011c6a:	4413      	add	r3, r2
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	4908      	ldr	r1, [pc, #32]	@ (8011c90 <sys_timeouts_init+0x40>)
 8011c70:	f000 f810 	bl	8011c94 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	3301      	adds	r3, #1
 8011c78:	607b      	str	r3, [r7, #4]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2b02      	cmp	r3, #2
 8011c7e:	d9ed      	bls.n	8011c5c <sys_timeouts_init+0xc>
  }
}
 8011c80:	bf00      	nop
 8011c82:	bf00      	nop
 8011c84:	3708      	adds	r7, #8
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	08019bf4 	.word	0x08019bf4
 8011c90:	08011bed 	.word	0x08011bed

08011c94 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b086      	sub	sp, #24
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011ca6:	d306      	bcc.n	8011cb6 <sys_timeout+0x22>
 8011ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8011cd4 <sys_timeout+0x40>)
 8011caa:	f240 1229 	movw	r2, #297	@ 0x129
 8011cae:	490a      	ldr	r1, [pc, #40]	@ (8011cd8 <sys_timeout+0x44>)
 8011cb0:	480a      	ldr	r0, [pc, #40]	@ (8011cdc <sys_timeout+0x48>)
 8011cb2:	f003 fb87 	bl	80153c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011cb6:	f7f2 fa7d 	bl	80041b4 <sys_now>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	68b9      	ldr	r1, [r7, #8]
 8011cc6:	6978      	ldr	r0, [r7, #20]
 8011cc8:	f7ff ff22 	bl	8011b10 <sys_timeout_abs>
#endif
}
 8011ccc:	bf00      	nop
 8011cce:	3718      	adds	r7, #24
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	08018fc4 	.word	0x08018fc4
 8011cd8:	08019060 	.word	0x08019060
 8011cdc:	08019038 	.word	0x08019038

08011ce0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011ce6:	f7f2 fa65 	bl	80041b4 <sys_now>
 8011cea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011cec:	4b17      	ldr	r3, [pc, #92]	@ (8011d4c <sys_check_timeouts+0x6c>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d022      	beq.n	8011d3e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	68fa      	ldr	r2, [r7, #12]
 8011cfe:	1ad3      	subs	r3, r2, r3
 8011d00:	0fdb      	lsrs	r3, r3, #31
 8011d02:	f003 0301 	and.w	r3, r3, #1
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d11a      	bne.n	8011d42 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	4a0e      	ldr	r2, [pc, #56]	@ (8011d4c <sys_check_timeouts+0x6c>)
 8011d12:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	689b      	ldr	r3, [r3, #8]
 8011d18:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	4a0a      	ldr	r2, [pc, #40]	@ (8011d50 <sys_check_timeouts+0x70>)
 8011d26:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011d28:	68b9      	ldr	r1, [r7, #8]
 8011d2a:	200a      	movs	r0, #10
 8011d2c:	f7f8 fc20 	bl	800a570 <memp_free>
    if (handler != NULL) {
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d0da      	beq.n	8011cec <sys_check_timeouts+0xc>
      handler(arg);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6838      	ldr	r0, [r7, #0]
 8011d3a:	4798      	blx	r3
  do {
 8011d3c:	e7d6      	b.n	8011cec <sys_check_timeouts+0xc>
      return;
 8011d3e:	bf00      	nop
 8011d40:	e000      	b.n	8011d44 <sys_check_timeouts+0x64>
      return;
 8011d42:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011d44:	3710      	adds	r7, #16
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	2000bfb8 	.word	0x2000bfb8
 8011d50:	2000bfbc 	.word	0x2000bfbc

08011d54 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b082      	sub	sp, #8
 8011d58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011d5a:	4b16      	ldr	r3, [pc, #88]	@ (8011db4 <sys_timeouts_sleeptime+0x60>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d102      	bne.n	8011d68 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011d62:	f04f 33ff 	mov.w	r3, #4294967295
 8011d66:	e020      	b.n	8011daa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011d68:	f7f2 fa24 	bl	80041b4 <sys_now>
 8011d6c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011d6e:	4b11      	ldr	r3, [pc, #68]	@ (8011db4 <sys_timeouts_sleeptime+0x60>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	685a      	ldr	r2, [r3, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	1ad3      	subs	r3, r2, r3
 8011d78:	0fdb      	lsrs	r3, r3, #31
 8011d7a:	f003 0301 	and.w	r3, r3, #1
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d001      	beq.n	8011d88 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	e010      	b.n	8011daa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011d88:	4b0a      	ldr	r3, [pc, #40]	@ (8011db4 <sys_timeouts_sleeptime+0x60>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	685a      	ldr	r2, [r3, #4]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	da06      	bge.n	8011da8 <sys_timeouts_sleeptime+0x54>
 8011d9a:	4b07      	ldr	r3, [pc, #28]	@ (8011db8 <sys_timeouts_sleeptime+0x64>)
 8011d9c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011da0:	4906      	ldr	r1, [pc, #24]	@ (8011dbc <sys_timeouts_sleeptime+0x68>)
 8011da2:	4807      	ldr	r0, [pc, #28]	@ (8011dc0 <sys_timeouts_sleeptime+0x6c>)
 8011da4:	f003 fb0e 	bl	80153c4 <iprintf>
    return ret;
 8011da8:	683b      	ldr	r3, [r7, #0]
  }
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	2000bfb8 	.word	0x2000bfb8
 8011db8:	08018fc4 	.word	0x08018fc4
 8011dbc:	08019098 	.word	0x08019098
 8011dc0:	08019038 	.word	0x08019038

08011dc4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011dc8:	f003 f9fc 	bl	80151c4 <rand>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011dda:	b29a      	uxth	r2, r3
 8011ddc:	4b01      	ldr	r3, [pc, #4]	@ (8011de4 <udp_init+0x20>)
 8011dde:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011de0:	bf00      	nop
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	2000002c 	.word	0x2000002c

08011de8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011dee:	2300      	movs	r3, #0
 8011df0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011df2:	4b17      	ldr	r3, [pc, #92]	@ (8011e50 <udp_new_port+0x68>)
 8011df4:	881b      	ldrh	r3, [r3, #0]
 8011df6:	1c5a      	adds	r2, r3, #1
 8011df8:	b291      	uxth	r1, r2
 8011dfa:	4a15      	ldr	r2, [pc, #84]	@ (8011e50 <udp_new_port+0x68>)
 8011dfc:	8011      	strh	r1, [r2, #0]
 8011dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e02:	4293      	cmp	r3, r2
 8011e04:	d103      	bne.n	8011e0e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011e06:	4b12      	ldr	r3, [pc, #72]	@ (8011e50 <udp_new_port+0x68>)
 8011e08:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011e0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e0e:	4b11      	ldr	r3, [pc, #68]	@ (8011e54 <udp_new_port+0x6c>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	603b      	str	r3, [r7, #0]
 8011e14:	e011      	b.n	8011e3a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	8a5a      	ldrh	r2, [r3, #18]
 8011e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011e50 <udp_new_port+0x68>)
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d108      	bne.n	8011e34 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011e22:	88fb      	ldrh	r3, [r7, #6]
 8011e24:	3301      	adds	r3, #1
 8011e26:	80fb      	strh	r3, [r7, #6]
 8011e28:	88fb      	ldrh	r3, [r7, #6]
 8011e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011e2e:	d3e0      	bcc.n	8011df2 <udp_new_port+0xa>
        return 0;
 8011e30:	2300      	movs	r3, #0
 8011e32:	e007      	b.n	8011e44 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	603b      	str	r3, [r7, #0]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d1ea      	bne.n	8011e16 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011e40:	4b03      	ldr	r3, [pc, #12]	@ (8011e50 <udp_new_port+0x68>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	370c      	adds	r7, #12
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr
 8011e50:	2000002c 	.word	0x2000002c
 8011e54:	2000bfc4 	.word	0x2000bfc4

08011e58 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	4613      	mov	r3, r2
 8011e64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d105      	bne.n	8011e78 <udp_input_local_match+0x20>
 8011e6c:	4b27      	ldr	r3, [pc, #156]	@ (8011f0c <udp_input_local_match+0xb4>)
 8011e6e:	2287      	movs	r2, #135	@ 0x87
 8011e70:	4927      	ldr	r1, [pc, #156]	@ (8011f10 <udp_input_local_match+0xb8>)
 8011e72:	4828      	ldr	r0, [pc, #160]	@ (8011f14 <udp_input_local_match+0xbc>)
 8011e74:	f003 faa6 	bl	80153c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d105      	bne.n	8011e8a <udp_input_local_match+0x32>
 8011e7e:	4b23      	ldr	r3, [pc, #140]	@ (8011f0c <udp_input_local_match+0xb4>)
 8011e80:	2288      	movs	r2, #136	@ 0x88
 8011e82:	4925      	ldr	r1, [pc, #148]	@ (8011f18 <udp_input_local_match+0xc0>)
 8011e84:	4823      	ldr	r0, [pc, #140]	@ (8011f14 <udp_input_local_match+0xbc>)
 8011e86:	f003 fa9d 	bl	80153c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	7a1b      	ldrb	r3, [r3, #8]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d00b      	beq.n	8011eaa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	7a1a      	ldrb	r2, [r3, #8]
 8011e96:	4b21      	ldr	r3, [pc, #132]	@ (8011f1c <udp_input_local_match+0xc4>)
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d001      	beq.n	8011eaa <udp_input_local_match+0x52>
    return 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	e02b      	b.n	8011f02 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011eaa:	79fb      	ldrb	r3, [r7, #7]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d018      	beq.n	8011ee2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d013      	beq.n	8011ede <udp_input_local_match+0x86>
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00f      	beq.n	8011ede <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011ebe:	4b17      	ldr	r3, [pc, #92]	@ (8011f1c <udp_input_local_match+0xc4>)
 8011ec0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ec6:	d00a      	beq.n	8011ede <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	4b13      	ldr	r3, [pc, #76]	@ (8011f1c <udp_input_local_match+0xc4>)
 8011ece:	695b      	ldr	r3, [r3, #20]
 8011ed0:	405a      	eors	r2, r3
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	3308      	adds	r3, #8
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d110      	bne.n	8011f00 <udp_input_local_match+0xa8>
          return 1;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e00f      	b.n	8011f02 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d009      	beq.n	8011efc <udp_input_local_match+0xa4>
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d005      	beq.n	8011efc <udp_input_local_match+0xa4>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	4b09      	ldr	r3, [pc, #36]	@ (8011f1c <udp_input_local_match+0xc4>)
 8011ef6:	695b      	ldr	r3, [r3, #20]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d101      	bne.n	8011f00 <udp_input_local_match+0xa8>
        return 1;
 8011efc:	2301      	movs	r3, #1
 8011efe:	e000      	b.n	8011f02 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3710      	adds	r7, #16
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	080190ac 	.word	0x080190ac
 8011f10:	080190dc 	.word	0x080190dc
 8011f14:	08019100 	.word	0x08019100
 8011f18:	08019128 	.word	0x08019128
 8011f1c:	20008e68 	.word	0x20008e68

08011f20 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011f20:	b590      	push	{r4, r7, lr}
 8011f22:	b08d      	sub	sp, #52	@ 0x34
 8011f24:	af02      	add	r7, sp, #8
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d105      	bne.n	8011f40 <udp_input+0x20>
 8011f34:	4b7c      	ldr	r3, [pc, #496]	@ (8012128 <udp_input+0x208>)
 8011f36:	22cf      	movs	r2, #207	@ 0xcf
 8011f38:	497c      	ldr	r1, [pc, #496]	@ (801212c <udp_input+0x20c>)
 8011f3a:	487d      	ldr	r0, [pc, #500]	@ (8012130 <udp_input+0x210>)
 8011f3c:	f003 fa42 	bl	80153c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d105      	bne.n	8011f52 <udp_input+0x32>
 8011f46:	4b78      	ldr	r3, [pc, #480]	@ (8012128 <udp_input+0x208>)
 8011f48:	22d0      	movs	r2, #208	@ 0xd0
 8011f4a:	497a      	ldr	r1, [pc, #488]	@ (8012134 <udp_input+0x214>)
 8011f4c:	4878      	ldr	r0, [pc, #480]	@ (8012130 <udp_input+0x210>)
 8011f4e:	f003 fa39 	bl	80153c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	895b      	ldrh	r3, [r3, #10]
 8011f56:	2b07      	cmp	r3, #7
 8011f58:	d803      	bhi.n	8011f62 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7f9 f9ac 	bl	800b2b8 <pbuf_free>
    goto end;
 8011f60:	e0de      	b.n	8012120 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011f68:	4b73      	ldr	r3, [pc, #460]	@ (8012138 <udp_input+0x218>)
 8011f6a:	695b      	ldr	r3, [r3, #20]
 8011f6c:	4a72      	ldr	r2, [pc, #456]	@ (8012138 <udp_input+0x218>)
 8011f6e:	6812      	ldr	r2, [r2, #0]
 8011f70:	4611      	mov	r1, r2
 8011f72:	4618      	mov	r0, r3
 8011f74:	f001 ffee 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	881b      	ldrh	r3, [r3, #0]
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f7 fdaa 	bl	8009adc <lwip_htons>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	885b      	ldrh	r3, [r3, #2]
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7f7 fda2 	bl	8009adc <lwip_htons>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fa8:	4b64      	ldr	r3, [pc, #400]	@ (801213c <udp_input+0x21c>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8011fae:	e054      	b.n	801205a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb2:	8a5b      	ldrh	r3, [r3, #18]
 8011fb4:	89fa      	ldrh	r2, [r7, #14]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d14a      	bne.n	8012050 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011fba:	7cfb      	ldrb	r3, [r7, #19]
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	6839      	ldr	r1, [r7, #0]
 8011fc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011fc2:	f7ff ff49 	bl	8011e58 <udp_input_local_match>
 8011fc6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d041      	beq.n	8012050 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fce:	7c1b      	ldrb	r3, [r3, #16]
 8011fd0:	f003 0304 	and.w	r3, r3, #4
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d11d      	bne.n	8012014 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d102      	bne.n	8011fe4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe0:	61fb      	str	r3, [r7, #28]
 8011fe2:	e017      	b.n	8012014 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011fe4:	7cfb      	ldrb	r3, [r7, #19]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d014      	beq.n	8012014 <udp_input+0xf4>
 8011fea:	4b53      	ldr	r3, [pc, #332]	@ (8012138 <udp_input+0x218>)
 8011fec:	695b      	ldr	r3, [r3, #20]
 8011fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ff2:	d10f      	bne.n	8012014 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011ff4:	69fb      	ldr	r3, [r7, #28]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	3304      	adds	r3, #4
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d008      	beq.n	8012014 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	3304      	adds	r3, #4
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	429a      	cmp	r2, r3
 801200e:	d101      	bne.n	8012014 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012012:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012016:	8a9b      	ldrh	r3, [r3, #20]
 8012018:	8a3a      	ldrh	r2, [r7, #16]
 801201a:	429a      	cmp	r2, r3
 801201c:	d118      	bne.n	8012050 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012020:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012022:	2b00      	cmp	r3, #0
 8012024:	d005      	beq.n	8012032 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012028:	685a      	ldr	r2, [r3, #4]
 801202a:	4b43      	ldr	r3, [pc, #268]	@ (8012138 <udp_input+0x218>)
 801202c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801202e:	429a      	cmp	r2, r3
 8012030:	d10e      	bne.n	8012050 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d014      	beq.n	8012062 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801203a:	68da      	ldr	r2, [r3, #12]
 801203c:	6a3b      	ldr	r3, [r7, #32]
 801203e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012040:	4b3e      	ldr	r3, [pc, #248]	@ (801213c <udp_input+0x21c>)
 8012042:	681a      	ldr	r2, [r3, #0]
 8012044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012046:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012048:	4a3c      	ldr	r2, [pc, #240]	@ (801213c <udp_input+0x21c>)
 801204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801204c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801204e:	e008      	b.n	8012062 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012052:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	627b      	str	r3, [r7, #36]	@ 0x24
 801205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1a7      	bne.n	8011fb0 <udp_input+0x90>
 8012060:	e000      	b.n	8012064 <udp_input+0x144>
        break;
 8012062:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012066:	2b00      	cmp	r3, #0
 8012068:	d101      	bne.n	801206e <udp_input+0x14e>
    pcb = uncon_pcb;
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012070:	2b00      	cmp	r3, #0
 8012072:	d002      	beq.n	801207a <udp_input+0x15a>
    for_us = 1;
 8012074:	2301      	movs	r3, #1
 8012076:	76fb      	strb	r3, [r7, #27]
 8012078:	e00a      	b.n	8012090 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	3304      	adds	r3, #4
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	4b2d      	ldr	r3, [pc, #180]	@ (8012138 <udp_input+0x218>)
 8012082:	695b      	ldr	r3, [r3, #20]
 8012084:	429a      	cmp	r2, r3
 8012086:	bf0c      	ite	eq
 8012088:	2301      	moveq	r3, #1
 801208a:	2300      	movne	r3, #0
 801208c:	b2db      	uxtb	r3, r3
 801208e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012090:	7efb      	ldrb	r3, [r7, #27]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d041      	beq.n	801211a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012096:	2108      	movs	r1, #8
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f7f9 f887 	bl	800b1ac <pbuf_remove_header>
 801209e:	4603      	mov	r3, r0
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00a      	beq.n	80120ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80120a4:	4b20      	ldr	r3, [pc, #128]	@ (8012128 <udp_input+0x208>)
 80120a6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80120aa:	4925      	ldr	r1, [pc, #148]	@ (8012140 <udp_input+0x220>)
 80120ac:	4820      	ldr	r0, [pc, #128]	@ (8012130 <udp_input+0x210>)
 80120ae:	f003 f989 	bl	80153c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7f9 f900 	bl	800b2b8 <pbuf_free>
      goto end;
 80120b8:	e032      	b.n	8012120 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80120ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d012      	beq.n	80120e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80120c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c2:	699b      	ldr	r3, [r3, #24]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00a      	beq.n	80120de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80120c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ca:	699c      	ldr	r4, [r3, #24]
 80120cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ce:	69d8      	ldr	r0, [r3, #28]
 80120d0:	8a3b      	ldrh	r3, [r7, #16]
 80120d2:	9300      	str	r3, [sp, #0]
 80120d4:	4b1b      	ldr	r3, [pc, #108]	@ (8012144 <udp_input+0x224>)
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80120da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80120dc:	e021      	b.n	8012122 <udp_input+0x202>
        pbuf_free(p);
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7f9 f8ea 	bl	800b2b8 <pbuf_free>
        goto end;
 80120e4:	e01c      	b.n	8012120 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80120e6:	7cfb      	ldrb	r3, [r7, #19]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d112      	bne.n	8012112 <udp_input+0x1f2>
 80120ec:	4b12      	ldr	r3, [pc, #72]	@ (8012138 <udp_input+0x218>)
 80120ee:	695b      	ldr	r3, [r3, #20]
 80120f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80120f4:	2be0      	cmp	r3, #224	@ 0xe0
 80120f6:	d00c      	beq.n	8012112 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80120f8:	4b0f      	ldr	r3, [pc, #60]	@ (8012138 <udp_input+0x218>)
 80120fa:	899b      	ldrh	r3, [r3, #12]
 80120fc:	3308      	adds	r3, #8
 80120fe:	b29b      	uxth	r3, r3
 8012100:	b21b      	sxth	r3, r3
 8012102:	4619      	mov	r1, r3
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f7f9 f8c4 	bl	800b292 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801210a:	2103      	movs	r1, #3
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f001 fc01 	bl	8013914 <icmp_dest_unreach>
      pbuf_free(p);
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f7f9 f8d0 	bl	800b2b8 <pbuf_free>
  return;
 8012118:	e003      	b.n	8012122 <udp_input+0x202>
    pbuf_free(p);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7f9 f8cc 	bl	800b2b8 <pbuf_free>
  return;
 8012120:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012122:	372c      	adds	r7, #44	@ 0x2c
 8012124:	46bd      	mov	sp, r7
 8012126:	bd90      	pop	{r4, r7, pc}
 8012128:	080190ac 	.word	0x080190ac
 801212c:	08019150 	.word	0x08019150
 8012130:	08019100 	.word	0x08019100
 8012134:	08019168 	.word	0x08019168
 8012138:	20008e68 	.word	0x20008e68
 801213c:	2000bfc4 	.word	0x2000bfc4
 8012140:	08019184 	.word	0x08019184
 8012144:	20008e78 	.word	0x20008e78

08012148 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d109      	bne.n	801216c <udp_send+0x24>
 8012158:	4b11      	ldr	r3, [pc, #68]	@ (80121a0 <udp_send+0x58>)
 801215a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801215e:	4911      	ldr	r1, [pc, #68]	@ (80121a4 <udp_send+0x5c>)
 8012160:	4811      	ldr	r0, [pc, #68]	@ (80121a8 <udp_send+0x60>)
 8012162:	f003 f92f 	bl	80153c4 <iprintf>
 8012166:	f06f 030f 	mvn.w	r3, #15
 801216a:	e015      	b.n	8012198 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d109      	bne.n	8012186 <udp_send+0x3e>
 8012172:	4b0b      	ldr	r3, [pc, #44]	@ (80121a0 <udp_send+0x58>)
 8012174:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8012178:	490c      	ldr	r1, [pc, #48]	@ (80121ac <udp_send+0x64>)
 801217a:	480b      	ldr	r0, [pc, #44]	@ (80121a8 <udp_send+0x60>)
 801217c:	f003 f922 	bl	80153c4 <iprintf>
 8012180:	f06f 030f 	mvn.w	r3, #15
 8012184:	e008      	b.n	8012198 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	1d1a      	adds	r2, r3, #4
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	8a9b      	ldrh	r3, [r3, #20]
 801218e:	6839      	ldr	r1, [r7, #0]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 f80d 	bl	80121b0 <udp_sendto>
 8012196:	4603      	mov	r3, r0
}
 8012198:	4618      	mov	r0, r3
 801219a:	3708      	adds	r7, #8
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	080190ac 	.word	0x080190ac
 80121a4:	080191a0 	.word	0x080191a0
 80121a8:	08019100 	.word	0x08019100
 80121ac:	080191b8 	.word	0x080191b8

080121b0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b088      	sub	sp, #32
 80121b4:	af02      	add	r7, sp, #8
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
 80121bc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d109      	bne.n	80121d8 <udp_sendto+0x28>
 80121c4:	4b23      	ldr	r3, [pc, #140]	@ (8012254 <udp_sendto+0xa4>)
 80121c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80121ca:	4923      	ldr	r1, [pc, #140]	@ (8012258 <udp_sendto+0xa8>)
 80121cc:	4823      	ldr	r0, [pc, #140]	@ (801225c <udp_sendto+0xac>)
 80121ce:	f003 f8f9 	bl	80153c4 <iprintf>
 80121d2:	f06f 030f 	mvn.w	r3, #15
 80121d6:	e038      	b.n	801224a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d109      	bne.n	80121f2 <udp_sendto+0x42>
 80121de:	4b1d      	ldr	r3, [pc, #116]	@ (8012254 <udp_sendto+0xa4>)
 80121e0:	f240 2219 	movw	r2, #537	@ 0x219
 80121e4:	491e      	ldr	r1, [pc, #120]	@ (8012260 <udp_sendto+0xb0>)
 80121e6:	481d      	ldr	r0, [pc, #116]	@ (801225c <udp_sendto+0xac>)
 80121e8:	f003 f8ec 	bl	80153c4 <iprintf>
 80121ec:	f06f 030f 	mvn.w	r3, #15
 80121f0:	e02b      	b.n	801224a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d109      	bne.n	801220c <udp_sendto+0x5c>
 80121f8:	4b16      	ldr	r3, [pc, #88]	@ (8012254 <udp_sendto+0xa4>)
 80121fa:	f240 221a 	movw	r2, #538	@ 0x21a
 80121fe:	4919      	ldr	r1, [pc, #100]	@ (8012264 <udp_sendto+0xb4>)
 8012200:	4816      	ldr	r0, [pc, #88]	@ (801225c <udp_sendto+0xac>)
 8012202:	f003 f8df 	bl	80153c4 <iprintf>
 8012206:	f06f 030f 	mvn.w	r3, #15
 801220a:	e01e      	b.n	801224a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	7a1b      	ldrb	r3, [r3, #8]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d006      	beq.n	8012222 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	7a1b      	ldrb	r3, [r3, #8]
 8012218:	4618      	mov	r0, r3
 801221a:	f7f8 fcbf 	bl	800ab9c <netif_get_by_index>
 801221e:	6178      	str	r0, [r7, #20]
 8012220:	e003      	b.n	801222a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f001 fc00 	bl	8013a28 <ip4_route>
 8012228:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d102      	bne.n	8012236 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012230:	f06f 0303 	mvn.w	r3, #3
 8012234:	e009      	b.n	801224a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012236:	887a      	ldrh	r2, [r7, #2]
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	4613      	mov	r3, r2
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	68b9      	ldr	r1, [r7, #8]
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f000 f810 	bl	8012268 <udp_sendto_if>
 8012248:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801224a:	4618      	mov	r0, r3
 801224c:	3718      	adds	r7, #24
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	080190ac 	.word	0x080190ac
 8012258:	080191d0 	.word	0x080191d0
 801225c:	08019100 	.word	0x08019100
 8012260:	080191e8 	.word	0x080191e8
 8012264:	08019204 	.word	0x08019204

08012268 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b088      	sub	sp, #32
 801226c:	af02      	add	r7, sp, #8
 801226e:	60f8      	str	r0, [r7, #12]
 8012270:	60b9      	str	r1, [r7, #8]
 8012272:	607a      	str	r2, [r7, #4]
 8012274:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d109      	bne.n	8012290 <udp_sendto_if+0x28>
 801227c:	4b2e      	ldr	r3, [pc, #184]	@ (8012338 <udp_sendto_if+0xd0>)
 801227e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012282:	492e      	ldr	r1, [pc, #184]	@ (801233c <udp_sendto_if+0xd4>)
 8012284:	482e      	ldr	r0, [pc, #184]	@ (8012340 <udp_sendto_if+0xd8>)
 8012286:	f003 f89d 	bl	80153c4 <iprintf>
 801228a:	f06f 030f 	mvn.w	r3, #15
 801228e:	e04f      	b.n	8012330 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d109      	bne.n	80122aa <udp_sendto_if+0x42>
 8012296:	4b28      	ldr	r3, [pc, #160]	@ (8012338 <udp_sendto_if+0xd0>)
 8012298:	f240 2281 	movw	r2, #641	@ 0x281
 801229c:	4929      	ldr	r1, [pc, #164]	@ (8012344 <udp_sendto_if+0xdc>)
 801229e:	4828      	ldr	r0, [pc, #160]	@ (8012340 <udp_sendto_if+0xd8>)
 80122a0:	f003 f890 	bl	80153c4 <iprintf>
 80122a4:	f06f 030f 	mvn.w	r3, #15
 80122a8:	e042      	b.n	8012330 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d109      	bne.n	80122c4 <udp_sendto_if+0x5c>
 80122b0:	4b21      	ldr	r3, [pc, #132]	@ (8012338 <udp_sendto_if+0xd0>)
 80122b2:	f240 2282 	movw	r2, #642	@ 0x282
 80122b6:	4924      	ldr	r1, [pc, #144]	@ (8012348 <udp_sendto_if+0xe0>)
 80122b8:	4821      	ldr	r0, [pc, #132]	@ (8012340 <udp_sendto_if+0xd8>)
 80122ba:	f003 f883 	bl	80153c4 <iprintf>
 80122be:	f06f 030f 	mvn.w	r3, #15
 80122c2:	e035      	b.n	8012330 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80122c4:	6a3b      	ldr	r3, [r7, #32]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d109      	bne.n	80122de <udp_sendto_if+0x76>
 80122ca:	4b1b      	ldr	r3, [pc, #108]	@ (8012338 <udp_sendto_if+0xd0>)
 80122cc:	f240 2283 	movw	r2, #643	@ 0x283
 80122d0:	491e      	ldr	r1, [pc, #120]	@ (801234c <udp_sendto_if+0xe4>)
 80122d2:	481b      	ldr	r0, [pc, #108]	@ (8012340 <udp_sendto_if+0xd8>)
 80122d4:	f003 f876 	bl	80153c4 <iprintf>
 80122d8:	f06f 030f 	mvn.w	r3, #15
 80122dc:	e028      	b.n	8012330 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d009      	beq.n	80122f8 <udp_sendto_if+0x90>
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d005      	beq.n	80122f8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122f4:	2be0      	cmp	r3, #224	@ 0xe0
 80122f6:	d103      	bne.n	8012300 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80122f8:	6a3b      	ldr	r3, [r7, #32]
 80122fa:	3304      	adds	r3, #4
 80122fc:	617b      	str	r3, [r7, #20]
 80122fe:	e00b      	b.n	8012318 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	3304      	adds	r3, #4
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	429a      	cmp	r2, r3
 801230c:	d002      	beq.n	8012314 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801230e:	f06f 0303 	mvn.w	r3, #3
 8012312:	e00d      	b.n	8012330 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012318:	887a      	ldrh	r2, [r7, #2]
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	9301      	str	r3, [sp, #4]
 801231e:	6a3b      	ldr	r3, [r7, #32]
 8012320:	9300      	str	r3, [sp, #0]
 8012322:	4613      	mov	r3, r2
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	68b9      	ldr	r1, [r7, #8]
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	f000 f811 	bl	8012350 <udp_sendto_if_src>
 801232e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012330:	4618      	mov	r0, r3
 8012332:	3718      	adds	r7, #24
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	080190ac 	.word	0x080190ac
 801233c:	08019220 	.word	0x08019220
 8012340:	08019100 	.word	0x08019100
 8012344:	0801923c 	.word	0x0801923c
 8012348:	08019258 	.word	0x08019258
 801234c:	08019278 	.word	0x08019278

08012350 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b08c      	sub	sp, #48	@ 0x30
 8012354:	af04      	add	r7, sp, #16
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	607a      	str	r2, [r7, #4]
 801235c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d109      	bne.n	8012378 <udp_sendto_if_src+0x28>
 8012364:	4b65      	ldr	r3, [pc, #404]	@ (80124fc <udp_sendto_if_src+0x1ac>)
 8012366:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801236a:	4965      	ldr	r1, [pc, #404]	@ (8012500 <udp_sendto_if_src+0x1b0>)
 801236c:	4865      	ldr	r0, [pc, #404]	@ (8012504 <udp_sendto_if_src+0x1b4>)
 801236e:	f003 f829 	bl	80153c4 <iprintf>
 8012372:	f06f 030f 	mvn.w	r3, #15
 8012376:	e0bc      	b.n	80124f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d109      	bne.n	8012392 <udp_sendto_if_src+0x42>
 801237e:	4b5f      	ldr	r3, [pc, #380]	@ (80124fc <udp_sendto_if_src+0x1ac>)
 8012380:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8012384:	4960      	ldr	r1, [pc, #384]	@ (8012508 <udp_sendto_if_src+0x1b8>)
 8012386:	485f      	ldr	r0, [pc, #380]	@ (8012504 <udp_sendto_if_src+0x1b4>)
 8012388:	f003 f81c 	bl	80153c4 <iprintf>
 801238c:	f06f 030f 	mvn.w	r3, #15
 8012390:	e0af      	b.n	80124f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d109      	bne.n	80123ac <udp_sendto_if_src+0x5c>
 8012398:	4b58      	ldr	r3, [pc, #352]	@ (80124fc <udp_sendto_if_src+0x1ac>)
 801239a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801239e:	495b      	ldr	r1, [pc, #364]	@ (801250c <udp_sendto_if_src+0x1bc>)
 80123a0:	4858      	ldr	r0, [pc, #352]	@ (8012504 <udp_sendto_if_src+0x1b4>)
 80123a2:	f003 f80f 	bl	80153c4 <iprintf>
 80123a6:	f06f 030f 	mvn.w	r3, #15
 80123aa:	e0a2      	b.n	80124f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80123ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d109      	bne.n	80123c6 <udp_sendto_if_src+0x76>
 80123b2:	4b52      	ldr	r3, [pc, #328]	@ (80124fc <udp_sendto_if_src+0x1ac>)
 80123b4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80123b8:	4955      	ldr	r1, [pc, #340]	@ (8012510 <udp_sendto_if_src+0x1c0>)
 80123ba:	4852      	ldr	r0, [pc, #328]	@ (8012504 <udp_sendto_if_src+0x1b4>)
 80123bc:	f003 f802 	bl	80153c4 <iprintf>
 80123c0:	f06f 030f 	mvn.w	r3, #15
 80123c4:	e095      	b.n	80124f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80123c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d109      	bne.n	80123e0 <udp_sendto_if_src+0x90>
 80123cc:	4b4b      	ldr	r3, [pc, #300]	@ (80124fc <udp_sendto_if_src+0x1ac>)
 80123ce:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80123d2:	4950      	ldr	r1, [pc, #320]	@ (8012514 <udp_sendto_if_src+0x1c4>)
 80123d4:	484b      	ldr	r0, [pc, #300]	@ (8012504 <udp_sendto_if_src+0x1b4>)
 80123d6:	f002 fff5 	bl	80153c4 <iprintf>
 80123da:	f06f 030f 	mvn.w	r3, #15
 80123de:	e088      	b.n	80124f2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	8a5b      	ldrh	r3, [r3, #18]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d10f      	bne.n	8012408 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80123e8:	68f9      	ldr	r1, [r7, #12]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	8a5b      	ldrh	r3, [r3, #18]
 80123ee:	461a      	mov	r2, r3
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f000 f893 	bl	801251c <udp_bind>
 80123f6:	4603      	mov	r3, r0
 80123f8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80123fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d002      	beq.n	8012408 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012402:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012406:	e074      	b.n	80124f2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	891b      	ldrh	r3, [r3, #8]
 801240c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012410:	4293      	cmp	r3, r2
 8012412:	d902      	bls.n	801241a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012414:	f04f 33ff 	mov.w	r3, #4294967295
 8012418:	e06b      	b.n	80124f2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801241a:	2108      	movs	r1, #8
 801241c:	68b8      	ldr	r0, [r7, #8]
 801241e:	f7f8 feb5 	bl	800b18c <pbuf_add_header>
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	d015      	beq.n	8012454 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012428:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801242c:	2108      	movs	r1, #8
 801242e:	2022      	movs	r0, #34	@ 0x22
 8012430:	f7f8 fc5e 	bl	800acf0 <pbuf_alloc>
 8012434:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d102      	bne.n	8012442 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801243c:	f04f 33ff 	mov.w	r3, #4294967295
 8012440:	e057      	b.n	80124f2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	891b      	ldrh	r3, [r3, #8]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d006      	beq.n	8012458 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801244a:	68b9      	ldr	r1, [r7, #8]
 801244c:	69f8      	ldr	r0, [r7, #28]
 801244e:	f7f9 f857 	bl	800b500 <pbuf_chain>
 8012452:	e001      	b.n	8012458 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	895b      	ldrh	r3, [r3, #10]
 801245c:	2b07      	cmp	r3, #7
 801245e:	d806      	bhi.n	801246e <udp_sendto_if_src+0x11e>
 8012460:	4b26      	ldr	r3, [pc, #152]	@ (80124fc <udp_sendto_if_src+0x1ac>)
 8012462:	f240 320d 	movw	r2, #781	@ 0x30d
 8012466:	492c      	ldr	r1, [pc, #176]	@ (8012518 <udp_sendto_if_src+0x1c8>)
 8012468:	4826      	ldr	r0, [pc, #152]	@ (8012504 <udp_sendto_if_src+0x1b4>)
 801246a:	f002 ffab 	bl	80153c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801246e:	69fb      	ldr	r3, [r7, #28]
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	8a5b      	ldrh	r3, [r3, #18]
 8012478:	4618      	mov	r0, r3
 801247a:	f7f7 fb2f 	bl	8009adc <lwip_htons>
 801247e:	4603      	mov	r3, r0
 8012480:	461a      	mov	r2, r3
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012486:	887b      	ldrh	r3, [r7, #2]
 8012488:	4618      	mov	r0, r3
 801248a:	f7f7 fb27 	bl	8009adc <lwip_htons>
 801248e:	4603      	mov	r3, r0
 8012490:	461a      	mov	r2, r3
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	2200      	movs	r2, #0
 801249a:	719a      	strb	r2, [r3, #6]
 801249c:	2200      	movs	r2, #0
 801249e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	891b      	ldrh	r3, [r3, #8]
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7f7 fb19 	bl	8009adc <lwip_htons>
 80124aa:	4603      	mov	r3, r0
 80124ac:	461a      	mov	r2, r3
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80124b2:	2311      	movs	r3, #17
 80124b4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	7adb      	ldrb	r3, [r3, #11]
 80124ba:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	7a9b      	ldrb	r3, [r3, #10]
 80124c0:	7cb9      	ldrb	r1, [r7, #18]
 80124c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80124c4:	9202      	str	r2, [sp, #8]
 80124c6:	7cfa      	ldrb	r2, [r7, #19]
 80124c8:	9201      	str	r2, [sp, #4]
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	460b      	mov	r3, r1
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80124d2:	69f8      	ldr	r0, [r7, #28]
 80124d4:	f001 fc90 	bl	8013df8 <ip4_output_if_src>
 80124d8:	4603      	mov	r3, r0
 80124da:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80124dc:	69fa      	ldr	r2, [r7, #28]
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d004      	beq.n	80124ee <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80124e4:	69f8      	ldr	r0, [r7, #28]
 80124e6:	f7f8 fee7 	bl	800b2b8 <pbuf_free>
    q = NULL;
 80124ea:	2300      	movs	r3, #0
 80124ec:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80124ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3720      	adds	r7, #32
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	080190ac 	.word	0x080190ac
 8012500:	08019298 	.word	0x08019298
 8012504:	08019100 	.word	0x08019100
 8012508:	080192b8 	.word	0x080192b8
 801250c:	080192d8 	.word	0x080192d8
 8012510:	080192fc 	.word	0x080192fc
 8012514:	08019320 	.word	0x08019320
 8012518:	08019344 	.word	0x08019344

0801251c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	4613      	mov	r3, r2
 8012528:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d101      	bne.n	8012534 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012530:	4b39      	ldr	r3, [pc, #228]	@ (8012618 <udp_bind+0xfc>)
 8012532:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d109      	bne.n	801254e <udp_bind+0x32>
 801253a:	4b38      	ldr	r3, [pc, #224]	@ (801261c <udp_bind+0x100>)
 801253c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8012540:	4937      	ldr	r1, [pc, #220]	@ (8012620 <udp_bind+0x104>)
 8012542:	4838      	ldr	r0, [pc, #224]	@ (8012624 <udp_bind+0x108>)
 8012544:	f002 ff3e 	bl	80153c4 <iprintf>
 8012548:	f06f 030f 	mvn.w	r3, #15
 801254c:	e060      	b.n	8012610 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801254e:	2300      	movs	r3, #0
 8012550:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012552:	4b35      	ldr	r3, [pc, #212]	@ (8012628 <udp_bind+0x10c>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	617b      	str	r3, [r7, #20]
 8012558:	e009      	b.n	801256e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	429a      	cmp	r2, r3
 8012560:	d102      	bne.n	8012568 <udp_bind+0x4c>
      rebind = 1;
 8012562:	2301      	movs	r3, #1
 8012564:	74fb      	strb	r3, [r7, #19]
      break;
 8012566:	e005      	b.n	8012574 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	68db      	ldr	r3, [r3, #12]
 801256c:	617b      	str	r3, [r7, #20]
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d1f2      	bne.n	801255a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012574:	88fb      	ldrh	r3, [r7, #6]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d109      	bne.n	801258e <udp_bind+0x72>
    port = udp_new_port();
 801257a:	f7ff fc35 	bl	8011de8 <udp_new_port>
 801257e:	4603      	mov	r3, r0
 8012580:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012582:	88fb      	ldrh	r3, [r7, #6]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d12c      	bne.n	80125e2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012588:	f06f 0307 	mvn.w	r3, #7
 801258c:	e040      	b.n	8012610 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801258e:	4b26      	ldr	r3, [pc, #152]	@ (8012628 <udp_bind+0x10c>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	617b      	str	r3, [r7, #20]
 8012594:	e022      	b.n	80125dc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	429a      	cmp	r2, r3
 801259c:	d01b      	beq.n	80125d6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	8a5b      	ldrh	r3, [r3, #18]
 80125a2:	88fa      	ldrh	r2, [r7, #6]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d116      	bne.n	80125d6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d00d      	beq.n	80125d0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d00a      	beq.n	80125d0 <udp_bind+0xb4>
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d006      	beq.n	80125d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80125c2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d003      	beq.n	80125d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d102      	bne.n	80125d6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80125d0:	f06f 0307 	mvn.w	r3, #7
 80125d4:	e01c      	b.n	8012610 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	68db      	ldr	r3, [r3, #12]
 80125da:	617b      	str	r3, [r7, #20]
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1d9      	bne.n	8012596 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <udp_bind+0xd2>
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	e000      	b.n	80125f0 <udp_bind+0xd4>
 80125ee:	2300      	movs	r3, #0
 80125f0:	68fa      	ldr	r2, [r7, #12]
 80125f2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	88fa      	ldrh	r2, [r7, #6]
 80125f8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80125fa:	7cfb      	ldrb	r3, [r7, #19]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d106      	bne.n	801260e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012600:	4b09      	ldr	r3, [pc, #36]	@ (8012628 <udp_bind+0x10c>)
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012608:	4a07      	ldr	r2, [pc, #28]	@ (8012628 <udp_bind+0x10c>)
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801260e:	2300      	movs	r3, #0
}
 8012610:	4618      	mov	r0, r3
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	08019c0c 	.word	0x08019c0c
 801261c:	080190ac 	.word	0x080190ac
 8012620:	08019374 	.word	0x08019374
 8012624:	08019100 	.word	0x08019100
 8012628:	2000bfc4 	.word	0x2000bfc4

0801262c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b086      	sub	sp, #24
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	4613      	mov	r3, r2
 8012638:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d109      	bne.n	8012654 <udp_connect+0x28>
 8012640:	4b2c      	ldr	r3, [pc, #176]	@ (80126f4 <udp_connect+0xc8>)
 8012642:	f240 4235 	movw	r2, #1077	@ 0x435
 8012646:	492c      	ldr	r1, [pc, #176]	@ (80126f8 <udp_connect+0xcc>)
 8012648:	482c      	ldr	r0, [pc, #176]	@ (80126fc <udp_connect+0xd0>)
 801264a:	f002 febb 	bl	80153c4 <iprintf>
 801264e:	f06f 030f 	mvn.w	r3, #15
 8012652:	e04b      	b.n	80126ec <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d109      	bne.n	801266e <udp_connect+0x42>
 801265a:	4b26      	ldr	r3, [pc, #152]	@ (80126f4 <udp_connect+0xc8>)
 801265c:	f240 4236 	movw	r2, #1078	@ 0x436
 8012660:	4927      	ldr	r1, [pc, #156]	@ (8012700 <udp_connect+0xd4>)
 8012662:	4826      	ldr	r0, [pc, #152]	@ (80126fc <udp_connect+0xd0>)
 8012664:	f002 feae 	bl	80153c4 <iprintf>
 8012668:	f06f 030f 	mvn.w	r3, #15
 801266c:	e03e      	b.n	80126ec <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	8a5b      	ldrh	r3, [r3, #18]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d10f      	bne.n	8012696 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012676:	68f9      	ldr	r1, [r7, #12]
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	8a5b      	ldrh	r3, [r3, #18]
 801267c:	461a      	mov	r2, r3
 801267e:	68f8      	ldr	r0, [r7, #12]
 8012680:	f7ff ff4c 	bl	801251c <udp_bind>
 8012684:	4603      	mov	r3, r0
 8012686:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012688:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d002      	beq.n	8012696 <udp_connect+0x6a>
      return err;
 8012690:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012694:	e02a      	b.n	80126ec <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <udp_connect+0x76>
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	e000      	b.n	80126a4 <udp_connect+0x78>
 80126a2:	2300      	movs	r3, #0
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	88fa      	ldrh	r2, [r7, #6]
 80126ac:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	7c1b      	ldrb	r3, [r3, #16]
 80126b2:	f043 0304 	orr.w	r3, r3, #4
 80126b6:	b2da      	uxtb	r2, r3
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80126bc:	4b11      	ldr	r3, [pc, #68]	@ (8012704 <udp_connect+0xd8>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	617b      	str	r3, [r7, #20]
 80126c2:	e008      	b.n	80126d6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80126c4:	68fa      	ldr	r2, [r7, #12]
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d101      	bne.n	80126d0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80126cc:	2300      	movs	r3, #0
 80126ce:	e00d      	b.n	80126ec <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	68db      	ldr	r3, [r3, #12]
 80126d4:	617b      	str	r3, [r7, #20]
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1f3      	bne.n	80126c4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80126dc:	4b09      	ldr	r3, [pc, #36]	@ (8012704 <udp_connect+0xd8>)
 80126de:	681a      	ldr	r2, [r3, #0]
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80126e4:	4a07      	ldr	r2, [pc, #28]	@ (8012704 <udp_connect+0xd8>)
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80126ea:	2300      	movs	r3, #0
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3718      	adds	r7, #24
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	080190ac 	.word	0x080190ac
 80126f8:	0801938c 	.word	0x0801938c
 80126fc:	08019100 	.word	0x08019100
 8012700:	080193a8 	.word	0x080193a8
 8012704:	2000bfc4 	.word	0x2000bfc4

08012708 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d107      	bne.n	801272a <udp_recv+0x22>
 801271a:	4b08      	ldr	r3, [pc, #32]	@ (801273c <udp_recv+0x34>)
 801271c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8012720:	4907      	ldr	r1, [pc, #28]	@ (8012740 <udp_recv+0x38>)
 8012722:	4808      	ldr	r0, [pc, #32]	@ (8012744 <udp_recv+0x3c>)
 8012724:	f002 fe4e 	bl	80153c4 <iprintf>
 8012728:	e005      	b.n	8012736 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	68ba      	ldr	r2, [r7, #8]
 801272e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	61da      	str	r2, [r3, #28]
}
 8012736:	3710      	adds	r7, #16
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	080190ac 	.word	0x080190ac
 8012740:	080193e0 	.word	0x080193e0
 8012744:	08019100 	.word	0x08019100

08012748 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b084      	sub	sp, #16
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d107      	bne.n	8012766 <udp_remove+0x1e>
 8012756:	4b19      	ldr	r3, [pc, #100]	@ (80127bc <udp_remove+0x74>)
 8012758:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801275c:	4918      	ldr	r1, [pc, #96]	@ (80127c0 <udp_remove+0x78>)
 801275e:	4819      	ldr	r0, [pc, #100]	@ (80127c4 <udp_remove+0x7c>)
 8012760:	f002 fe30 	bl	80153c4 <iprintf>
 8012764:	e026      	b.n	80127b4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012766:	4b18      	ldr	r3, [pc, #96]	@ (80127c8 <udp_remove+0x80>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	687a      	ldr	r2, [r7, #4]
 801276c:	429a      	cmp	r2, r3
 801276e:	d105      	bne.n	801277c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012770:	4b15      	ldr	r3, [pc, #84]	@ (80127c8 <udp_remove+0x80>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	4a14      	ldr	r2, [pc, #80]	@ (80127c8 <udp_remove+0x80>)
 8012778:	6013      	str	r3, [r2, #0]
 801277a:	e017      	b.n	80127ac <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801277c:	4b12      	ldr	r3, [pc, #72]	@ (80127c8 <udp_remove+0x80>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	60fb      	str	r3, [r7, #12]
 8012782:	e010      	b.n	80127a6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d009      	beq.n	80127a0 <udp_remove+0x58>
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	68db      	ldr	r3, [r3, #12]
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	429a      	cmp	r2, r3
 8012794:	d104      	bne.n	80127a0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	68da      	ldr	r2, [r3, #12]
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	60da      	str	r2, [r3, #12]
        break;
 801279e:	e005      	b.n	80127ac <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	60fb      	str	r3, [r7, #12]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d1eb      	bne.n	8012784 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80127ac:	6879      	ldr	r1, [r7, #4]
 80127ae:	2000      	movs	r0, #0
 80127b0:	f7f7 fede 	bl	800a570 <memp_free>
}
 80127b4:	3710      	adds	r7, #16
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}
 80127ba:	bf00      	nop
 80127bc:	080190ac 	.word	0x080190ac
 80127c0:	080193f8 	.word	0x080193f8
 80127c4:	08019100 	.word	0x08019100
 80127c8:	2000bfc4 	.word	0x2000bfc4

080127cc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80127d2:	2000      	movs	r0, #0
 80127d4:	f7f7 fe56 	bl	800a484 <memp_malloc>
 80127d8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d007      	beq.n	80127f0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80127e0:	2220      	movs	r2, #32
 80127e2:	2100      	movs	r1, #0
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f002 fea0 	bl	801552a <memset>
    pcb->ttl = UDP_TTL;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	22ff      	movs	r2, #255	@ 0xff
 80127ee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80127f0:	687b      	ldr	r3, [r7, #4]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3708      	adds	r7, #8
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b084      	sub	sp, #16
 80127fe:	af00      	add	r7, sp, #0
 8012800:	4603      	mov	r3, r0
 8012802:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012804:	f7ff ffe2 	bl	80127cc <udp_new>
 8012808:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801280a:	68fb      	ldr	r3, [r7, #12]
}
 801280c:	4618      	mov	r0, r3
 801280e:	3710      	adds	r7, #16
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012814:	b480      	push	{r7}
 8012816:	b085      	sub	sp, #20
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d01e      	beq.n	8012862 <udp_netif_ip_addr_changed+0x4e>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d01a      	beq.n	8012862 <udp_netif_ip_addr_changed+0x4e>
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d017      	beq.n	8012862 <udp_netif_ip_addr_changed+0x4e>
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d013      	beq.n	8012862 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801283a:	4b0d      	ldr	r3, [pc, #52]	@ (8012870 <udp_netif_ip_addr_changed+0x5c>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	60fb      	str	r3, [r7, #12]
 8012840:	e00c      	b.n	801285c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	429a      	cmp	r2, r3
 801284c:	d103      	bne.n	8012856 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	681a      	ldr	r2, [r3, #0]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	68db      	ldr	r3, [r3, #12]
 801285a:	60fb      	str	r3, [r7, #12]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d1ef      	bne.n	8012842 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012862:	bf00      	nop
 8012864:	3714      	adds	r7, #20
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr
 801286e:	bf00      	nop
 8012870:	2000bfc4 	.word	0x2000bfc4

08012874 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801287c:	4915      	ldr	r1, [pc, #84]	@ (80128d4 <etharp_free_entry+0x60>)
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	4613      	mov	r3, r2
 8012882:	005b      	lsls	r3, r3, #1
 8012884:	4413      	add	r3, r2
 8012886:	00db      	lsls	r3, r3, #3
 8012888:	440b      	add	r3, r1
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d013      	beq.n	80128b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012890:	4910      	ldr	r1, [pc, #64]	@ (80128d4 <etharp_free_entry+0x60>)
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	4613      	mov	r3, r2
 8012896:	005b      	lsls	r3, r3, #1
 8012898:	4413      	add	r3, r2
 801289a:	00db      	lsls	r3, r3, #3
 801289c:	440b      	add	r3, r1
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7f8 fd09 	bl	800b2b8 <pbuf_free>
    arp_table[i].q = NULL;
 80128a6:	490b      	ldr	r1, [pc, #44]	@ (80128d4 <etharp_free_entry+0x60>)
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	4613      	mov	r3, r2
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	4413      	add	r3, r2
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	440b      	add	r3, r1
 80128b4:	2200      	movs	r2, #0
 80128b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80128b8:	4906      	ldr	r1, [pc, #24]	@ (80128d4 <etharp_free_entry+0x60>)
 80128ba:	687a      	ldr	r2, [r7, #4]
 80128bc:	4613      	mov	r3, r2
 80128be:	005b      	lsls	r3, r3, #1
 80128c0:	4413      	add	r3, r2
 80128c2:	00db      	lsls	r3, r3, #3
 80128c4:	440b      	add	r3, r1
 80128c6:	3314      	adds	r3, #20
 80128c8:	2200      	movs	r2, #0
 80128ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80128cc:	bf00      	nop
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	2000bfc8 	.word	0x2000bfc8

080128d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128de:	2300      	movs	r3, #0
 80128e0:	607b      	str	r3, [r7, #4]
 80128e2:	e096      	b.n	8012a12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80128e4:	494f      	ldr	r1, [pc, #316]	@ (8012a24 <etharp_tmr+0x14c>)
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	4613      	mov	r3, r2
 80128ea:	005b      	lsls	r3, r3, #1
 80128ec:	4413      	add	r3, r2
 80128ee:	00db      	lsls	r3, r3, #3
 80128f0:	440b      	add	r3, r1
 80128f2:	3314      	adds	r3, #20
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80128f8:	78fb      	ldrb	r3, [r7, #3]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	f000 8086 	beq.w	8012a0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012900:	4948      	ldr	r1, [pc, #288]	@ (8012a24 <etharp_tmr+0x14c>)
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	4613      	mov	r3, r2
 8012906:	005b      	lsls	r3, r3, #1
 8012908:	4413      	add	r3, r2
 801290a:	00db      	lsls	r3, r3, #3
 801290c:	440b      	add	r3, r1
 801290e:	3312      	adds	r3, #18
 8012910:	881b      	ldrh	r3, [r3, #0]
 8012912:	3301      	adds	r3, #1
 8012914:	b298      	uxth	r0, r3
 8012916:	4943      	ldr	r1, [pc, #268]	@ (8012a24 <etharp_tmr+0x14c>)
 8012918:	687a      	ldr	r2, [r7, #4]
 801291a:	4613      	mov	r3, r2
 801291c:	005b      	lsls	r3, r3, #1
 801291e:	4413      	add	r3, r2
 8012920:	00db      	lsls	r3, r3, #3
 8012922:	440b      	add	r3, r1
 8012924:	3312      	adds	r3, #18
 8012926:	4602      	mov	r2, r0
 8012928:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801292a:	493e      	ldr	r1, [pc, #248]	@ (8012a24 <etharp_tmr+0x14c>)
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	4613      	mov	r3, r2
 8012930:	005b      	lsls	r3, r3, #1
 8012932:	4413      	add	r3, r2
 8012934:	00db      	lsls	r3, r3, #3
 8012936:	440b      	add	r3, r1
 8012938:	3312      	adds	r3, #18
 801293a:	881b      	ldrh	r3, [r3, #0]
 801293c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012940:	d215      	bcs.n	801296e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012942:	4938      	ldr	r1, [pc, #224]	@ (8012a24 <etharp_tmr+0x14c>)
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	4613      	mov	r3, r2
 8012948:	005b      	lsls	r3, r3, #1
 801294a:	4413      	add	r3, r2
 801294c:	00db      	lsls	r3, r3, #3
 801294e:	440b      	add	r3, r1
 8012950:	3314      	adds	r3, #20
 8012952:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012954:	2b01      	cmp	r3, #1
 8012956:	d10e      	bne.n	8012976 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012958:	4932      	ldr	r1, [pc, #200]	@ (8012a24 <etharp_tmr+0x14c>)
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	4613      	mov	r3, r2
 801295e:	005b      	lsls	r3, r3, #1
 8012960:	4413      	add	r3, r2
 8012962:	00db      	lsls	r3, r3, #3
 8012964:	440b      	add	r3, r1
 8012966:	3312      	adds	r3, #18
 8012968:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801296a:	2b04      	cmp	r3, #4
 801296c:	d903      	bls.n	8012976 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f7ff ff80 	bl	8012874 <etharp_free_entry>
 8012974:	e04a      	b.n	8012a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012976:	492b      	ldr	r1, [pc, #172]	@ (8012a24 <etharp_tmr+0x14c>)
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	4613      	mov	r3, r2
 801297c:	005b      	lsls	r3, r3, #1
 801297e:	4413      	add	r3, r2
 8012980:	00db      	lsls	r3, r3, #3
 8012982:	440b      	add	r3, r1
 8012984:	3314      	adds	r3, #20
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	2b03      	cmp	r3, #3
 801298a:	d10a      	bne.n	80129a2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801298c:	4925      	ldr	r1, [pc, #148]	@ (8012a24 <etharp_tmr+0x14c>)
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	4613      	mov	r3, r2
 8012992:	005b      	lsls	r3, r3, #1
 8012994:	4413      	add	r3, r2
 8012996:	00db      	lsls	r3, r3, #3
 8012998:	440b      	add	r3, r1
 801299a:	3314      	adds	r3, #20
 801299c:	2204      	movs	r2, #4
 801299e:	701a      	strb	r2, [r3, #0]
 80129a0:	e034      	b.n	8012a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80129a2:	4920      	ldr	r1, [pc, #128]	@ (8012a24 <etharp_tmr+0x14c>)
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	4613      	mov	r3, r2
 80129a8:	005b      	lsls	r3, r3, #1
 80129aa:	4413      	add	r3, r2
 80129ac:	00db      	lsls	r3, r3, #3
 80129ae:	440b      	add	r3, r1
 80129b0:	3314      	adds	r3, #20
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b04      	cmp	r3, #4
 80129b6:	d10a      	bne.n	80129ce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80129b8:	491a      	ldr	r1, [pc, #104]	@ (8012a24 <etharp_tmr+0x14c>)
 80129ba:	687a      	ldr	r2, [r7, #4]
 80129bc:	4613      	mov	r3, r2
 80129be:	005b      	lsls	r3, r3, #1
 80129c0:	4413      	add	r3, r2
 80129c2:	00db      	lsls	r3, r3, #3
 80129c4:	440b      	add	r3, r1
 80129c6:	3314      	adds	r3, #20
 80129c8:	2202      	movs	r2, #2
 80129ca:	701a      	strb	r2, [r3, #0]
 80129cc:	e01e      	b.n	8012a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80129ce:	4915      	ldr	r1, [pc, #84]	@ (8012a24 <etharp_tmr+0x14c>)
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	4613      	mov	r3, r2
 80129d4:	005b      	lsls	r3, r3, #1
 80129d6:	4413      	add	r3, r2
 80129d8:	00db      	lsls	r3, r3, #3
 80129da:	440b      	add	r3, r1
 80129dc:	3314      	adds	r3, #20
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d113      	bne.n	8012a0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80129e4:	490f      	ldr	r1, [pc, #60]	@ (8012a24 <etharp_tmr+0x14c>)
 80129e6:	687a      	ldr	r2, [r7, #4]
 80129e8:	4613      	mov	r3, r2
 80129ea:	005b      	lsls	r3, r3, #1
 80129ec:	4413      	add	r3, r2
 80129ee:	00db      	lsls	r3, r3, #3
 80129f0:	440b      	add	r3, r1
 80129f2:	3308      	adds	r3, #8
 80129f4:	6818      	ldr	r0, [r3, #0]
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	4613      	mov	r3, r2
 80129fa:	005b      	lsls	r3, r3, #1
 80129fc:	4413      	add	r3, r2
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	4a08      	ldr	r2, [pc, #32]	@ (8012a24 <etharp_tmr+0x14c>)
 8012a02:	4413      	add	r3, r2
 8012a04:	3304      	adds	r3, #4
 8012a06:	4619      	mov	r1, r3
 8012a08:	f000 fe6e 	bl	80136e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	607b      	str	r3, [r7, #4]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	2b09      	cmp	r3, #9
 8012a16:	f77f af65 	ble.w	80128e4 <etharp_tmr+0xc>
      }
    }
  }
}
 8012a1a:	bf00      	nop
 8012a1c:	bf00      	nop
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	2000bfc8 	.word	0x2000bfc8

08012a28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b08a      	sub	sp, #40	@ 0x28
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	60f8      	str	r0, [r7, #12]
 8012a30:	460b      	mov	r3, r1
 8012a32:	607a      	str	r2, [r7, #4]
 8012a34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012a36:	230a      	movs	r3, #10
 8012a38:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012a3a:	230a      	movs	r3, #10
 8012a3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012a3e:	230a      	movs	r3, #10
 8012a40:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012a46:	230a      	movs	r3, #10
 8012a48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	83bb      	strh	r3, [r7, #28]
 8012a4e:	2300      	movs	r3, #0
 8012a50:	837b      	strh	r3, [r7, #26]
 8012a52:	2300      	movs	r3, #0
 8012a54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a56:	2300      	movs	r3, #0
 8012a58:	843b      	strh	r3, [r7, #32]
 8012a5a:	e0ae      	b.n	8012bba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012a5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a60:	49a6      	ldr	r1, [pc, #664]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012a62:	4613      	mov	r3, r2
 8012a64:	005b      	lsls	r3, r3, #1
 8012a66:	4413      	add	r3, r2
 8012a68:	00db      	lsls	r3, r3, #3
 8012a6a:	440b      	add	r3, r1
 8012a6c:	3314      	adds	r3, #20
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012a72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012a76:	2b0a      	cmp	r3, #10
 8012a78:	d105      	bne.n	8012a86 <etharp_find_entry+0x5e>
 8012a7a:	7dfb      	ldrb	r3, [r7, #23]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d102      	bne.n	8012a86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012a80:	8c3b      	ldrh	r3, [r7, #32]
 8012a82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012a84:	e095      	b.n	8012bb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012a86:	7dfb      	ldrb	r3, [r7, #23]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f000 8092 	beq.w	8012bb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012a8e:	7dfb      	ldrb	r3, [r7, #23]
 8012a90:	2b01      	cmp	r3, #1
 8012a92:	d009      	beq.n	8012aa8 <etharp_find_entry+0x80>
 8012a94:	7dfb      	ldrb	r3, [r7, #23]
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d806      	bhi.n	8012aa8 <etharp_find_entry+0x80>
 8012a9a:	4b99      	ldr	r3, [pc, #612]	@ (8012d00 <etharp_find_entry+0x2d8>)
 8012a9c:	f240 1223 	movw	r2, #291	@ 0x123
 8012aa0:	4998      	ldr	r1, [pc, #608]	@ (8012d04 <etharp_find_entry+0x2dc>)
 8012aa2:	4899      	ldr	r0, [pc, #612]	@ (8012d08 <etharp_find_entry+0x2e0>)
 8012aa4:	f002 fc8e 	bl	80153c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d020      	beq.n	8012af0 <etharp_find_entry+0xc8>
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	6819      	ldr	r1, [r3, #0]
 8012ab2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ab6:	4891      	ldr	r0, [pc, #580]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012ab8:	4613      	mov	r3, r2
 8012aba:	005b      	lsls	r3, r3, #1
 8012abc:	4413      	add	r3, r2
 8012abe:	00db      	lsls	r3, r3, #3
 8012ac0:	4403      	add	r3, r0
 8012ac2:	3304      	adds	r3, #4
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	4299      	cmp	r1, r3
 8012ac8:	d112      	bne.n	8012af0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d00c      	beq.n	8012aea <etharp_find_entry+0xc2>
 8012ad0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ad4:	4989      	ldr	r1, [pc, #548]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	005b      	lsls	r3, r3, #1
 8012ada:	4413      	add	r3, r2
 8012adc:	00db      	lsls	r3, r3, #3
 8012ade:	440b      	add	r3, r1
 8012ae0:	3308      	adds	r3, #8
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	687a      	ldr	r2, [r7, #4]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d102      	bne.n	8012af0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012aee:	e100      	b.n	8012cf2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012af0:	7dfb      	ldrb	r3, [r7, #23]
 8012af2:	2b01      	cmp	r3, #1
 8012af4:	d140      	bne.n	8012b78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012af6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012afa:	4980      	ldr	r1, [pc, #512]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012afc:	4613      	mov	r3, r2
 8012afe:	005b      	lsls	r3, r3, #1
 8012b00:	4413      	add	r3, r2
 8012b02:	00db      	lsls	r3, r3, #3
 8012b04:	440b      	add	r3, r1
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d01a      	beq.n	8012b42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012b0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b10:	497a      	ldr	r1, [pc, #488]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012b12:	4613      	mov	r3, r2
 8012b14:	005b      	lsls	r3, r3, #1
 8012b16:	4413      	add	r3, r2
 8012b18:	00db      	lsls	r3, r3, #3
 8012b1a:	440b      	add	r3, r1
 8012b1c:	3312      	adds	r3, #18
 8012b1e:	881b      	ldrh	r3, [r3, #0]
 8012b20:	8bba      	ldrh	r2, [r7, #28]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d845      	bhi.n	8012bb2 <etharp_find_entry+0x18a>
            old_queue = i;
 8012b26:	8c3b      	ldrh	r3, [r7, #32]
 8012b28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b2e:	4973      	ldr	r1, [pc, #460]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012b30:	4613      	mov	r3, r2
 8012b32:	005b      	lsls	r3, r3, #1
 8012b34:	4413      	add	r3, r2
 8012b36:	00db      	lsls	r3, r3, #3
 8012b38:	440b      	add	r3, r1
 8012b3a:	3312      	adds	r3, #18
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	83bb      	strh	r3, [r7, #28]
 8012b40:	e037      	b.n	8012bb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012b42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b46:	496d      	ldr	r1, [pc, #436]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012b48:	4613      	mov	r3, r2
 8012b4a:	005b      	lsls	r3, r3, #1
 8012b4c:	4413      	add	r3, r2
 8012b4e:	00db      	lsls	r3, r3, #3
 8012b50:	440b      	add	r3, r1
 8012b52:	3312      	adds	r3, #18
 8012b54:	881b      	ldrh	r3, [r3, #0]
 8012b56:	8b7a      	ldrh	r2, [r7, #26]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d82a      	bhi.n	8012bb2 <etharp_find_entry+0x18a>
            old_pending = i;
 8012b5c:	8c3b      	ldrh	r3, [r7, #32]
 8012b5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012b60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b64:	4965      	ldr	r1, [pc, #404]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012b66:	4613      	mov	r3, r2
 8012b68:	005b      	lsls	r3, r3, #1
 8012b6a:	4413      	add	r3, r2
 8012b6c:	00db      	lsls	r3, r3, #3
 8012b6e:	440b      	add	r3, r1
 8012b70:	3312      	adds	r3, #18
 8012b72:	881b      	ldrh	r3, [r3, #0]
 8012b74:	837b      	strh	r3, [r7, #26]
 8012b76:	e01c      	b.n	8012bb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012b78:	7dfb      	ldrb	r3, [r7, #23]
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d919      	bls.n	8012bb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012b7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b82:	495e      	ldr	r1, [pc, #376]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012b84:	4613      	mov	r3, r2
 8012b86:	005b      	lsls	r3, r3, #1
 8012b88:	4413      	add	r3, r2
 8012b8a:	00db      	lsls	r3, r3, #3
 8012b8c:	440b      	add	r3, r1
 8012b8e:	3312      	adds	r3, #18
 8012b90:	881b      	ldrh	r3, [r3, #0]
 8012b92:	8b3a      	ldrh	r2, [r7, #24]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d80c      	bhi.n	8012bb2 <etharp_find_entry+0x18a>
            old_stable = i;
 8012b98:	8c3b      	ldrh	r3, [r7, #32]
 8012b9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012b9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ba0:	4956      	ldr	r1, [pc, #344]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	005b      	lsls	r3, r3, #1
 8012ba6:	4413      	add	r3, r2
 8012ba8:	00db      	lsls	r3, r3, #3
 8012baa:	440b      	add	r3, r1
 8012bac:	3312      	adds	r3, #18
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012bb2:	8c3b      	ldrh	r3, [r7, #32]
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	843b      	strh	r3, [r7, #32]
 8012bba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012bbe:	2b09      	cmp	r3, #9
 8012bc0:	f77f af4c 	ble.w	8012a5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012bc4:	7afb      	ldrb	r3, [r7, #11]
 8012bc6:	f003 0302 	and.w	r3, r3, #2
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d108      	bne.n	8012be0 <etharp_find_entry+0x1b8>
 8012bce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012bd2:	2b0a      	cmp	r3, #10
 8012bd4:	d107      	bne.n	8012be6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012bd6:	7afb      	ldrb	r3, [r7, #11]
 8012bd8:	f003 0301 	and.w	r3, r3, #1
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d102      	bne.n	8012be6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012be0:	f04f 33ff 	mov.w	r3, #4294967295
 8012be4:	e085      	b.n	8012cf2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012be6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012bea:	2b09      	cmp	r3, #9
 8012bec:	dc02      	bgt.n	8012bf4 <etharp_find_entry+0x1cc>
    i = empty;
 8012bee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012bf0:	843b      	strh	r3, [r7, #32]
 8012bf2:	e039      	b.n	8012c68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012bf4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012bf8:	2b09      	cmp	r3, #9
 8012bfa:	dc14      	bgt.n	8012c26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012bfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bfe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c04:	493d      	ldr	r1, [pc, #244]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012c06:	4613      	mov	r3, r2
 8012c08:	005b      	lsls	r3, r3, #1
 8012c0a:	4413      	add	r3, r2
 8012c0c:	00db      	lsls	r3, r3, #3
 8012c0e:	440b      	add	r3, r1
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d018      	beq.n	8012c48 <etharp_find_entry+0x220>
 8012c16:	4b3a      	ldr	r3, [pc, #232]	@ (8012d00 <etharp_find_entry+0x2d8>)
 8012c18:	f240 126d 	movw	r2, #365	@ 0x16d
 8012c1c:	493b      	ldr	r1, [pc, #236]	@ (8012d0c <etharp_find_entry+0x2e4>)
 8012c1e:	483a      	ldr	r0, [pc, #232]	@ (8012d08 <etharp_find_entry+0x2e0>)
 8012c20:	f002 fbd0 	bl	80153c4 <iprintf>
 8012c24:	e010      	b.n	8012c48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012c26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012c2a:	2b09      	cmp	r3, #9
 8012c2c:	dc02      	bgt.n	8012c34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012c2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012c30:	843b      	strh	r3, [r7, #32]
 8012c32:	e009      	b.n	8012c48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012c34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012c38:	2b09      	cmp	r3, #9
 8012c3a:	dc02      	bgt.n	8012c42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012c3c:	8bfb      	ldrh	r3, [r7, #30]
 8012c3e:	843b      	strh	r3, [r7, #32]
 8012c40:	e002      	b.n	8012c48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012c42:	f04f 33ff 	mov.w	r3, #4294967295
 8012c46:	e054      	b.n	8012cf2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c4c:	2b09      	cmp	r3, #9
 8012c4e:	dd06      	ble.n	8012c5e <etharp_find_entry+0x236>
 8012c50:	4b2b      	ldr	r3, [pc, #172]	@ (8012d00 <etharp_find_entry+0x2d8>)
 8012c52:	f240 127f 	movw	r2, #383	@ 0x17f
 8012c56:	492e      	ldr	r1, [pc, #184]	@ (8012d10 <etharp_find_entry+0x2e8>)
 8012c58:	482b      	ldr	r0, [pc, #172]	@ (8012d08 <etharp_find_entry+0x2e0>)
 8012c5a:	f002 fbb3 	bl	80153c4 <iprintf>
    etharp_free_entry(i);
 8012c5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7ff fe06 	bl	8012874 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c6c:	2b09      	cmp	r3, #9
 8012c6e:	dd06      	ble.n	8012c7e <etharp_find_entry+0x256>
 8012c70:	4b23      	ldr	r3, [pc, #140]	@ (8012d00 <etharp_find_entry+0x2d8>)
 8012c72:	f240 1283 	movw	r2, #387	@ 0x183
 8012c76:	4926      	ldr	r1, [pc, #152]	@ (8012d10 <etharp_find_entry+0x2e8>)
 8012c78:	4823      	ldr	r0, [pc, #140]	@ (8012d08 <etharp_find_entry+0x2e0>)
 8012c7a:	f002 fba3 	bl	80153c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012c7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c82:	491e      	ldr	r1, [pc, #120]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012c84:	4613      	mov	r3, r2
 8012c86:	005b      	lsls	r3, r3, #1
 8012c88:	4413      	add	r3, r2
 8012c8a:	00db      	lsls	r3, r3, #3
 8012c8c:	440b      	add	r3, r1
 8012c8e:	3314      	adds	r3, #20
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d006      	beq.n	8012ca4 <etharp_find_entry+0x27c>
 8012c96:	4b1a      	ldr	r3, [pc, #104]	@ (8012d00 <etharp_find_entry+0x2d8>)
 8012c98:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012c9c:	491d      	ldr	r1, [pc, #116]	@ (8012d14 <etharp_find_entry+0x2ec>)
 8012c9e:	481a      	ldr	r0, [pc, #104]	@ (8012d08 <etharp_find_entry+0x2e0>)
 8012ca0:	f002 fb90 	bl	80153c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00b      	beq.n	8012cc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012caa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	6819      	ldr	r1, [r3, #0]
 8012cb2:	4812      	ldr	r0, [pc, #72]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012cb4:	4613      	mov	r3, r2
 8012cb6:	005b      	lsls	r3, r3, #1
 8012cb8:	4413      	add	r3, r2
 8012cba:	00db      	lsls	r3, r3, #3
 8012cbc:	4403      	add	r3, r0
 8012cbe:	3304      	adds	r3, #4
 8012cc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012cc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cc6:	490d      	ldr	r1, [pc, #52]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012cc8:	4613      	mov	r3, r2
 8012cca:	005b      	lsls	r3, r3, #1
 8012ccc:	4413      	add	r3, r2
 8012cce:	00db      	lsls	r3, r3, #3
 8012cd0:	440b      	add	r3, r1
 8012cd2:	3312      	adds	r3, #18
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012cd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cdc:	4907      	ldr	r1, [pc, #28]	@ (8012cfc <etharp_find_entry+0x2d4>)
 8012cde:	4613      	mov	r3, r2
 8012ce0:	005b      	lsls	r3, r3, #1
 8012ce2:	4413      	add	r3, r2
 8012ce4:	00db      	lsls	r3, r3, #3
 8012ce6:	440b      	add	r3, r1
 8012ce8:	3308      	adds	r3, #8
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012cee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3728      	adds	r7, #40	@ 0x28
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	2000bfc8 	.word	0x2000bfc8
 8012d00:	08019410 	.word	0x08019410
 8012d04:	08019448 	.word	0x08019448
 8012d08:	08019488 	.word	0x08019488
 8012d0c:	080194b0 	.word	0x080194b0
 8012d10:	080194c8 	.word	0x080194c8
 8012d14:	080194dc 	.word	0x080194dc

08012d18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b088      	sub	sp, #32
 8012d1c:	af02      	add	r7, sp, #8
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	607a      	str	r2, [r7, #4]
 8012d24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012d2c:	2b06      	cmp	r3, #6
 8012d2e:	d006      	beq.n	8012d3e <etharp_update_arp_entry+0x26>
 8012d30:	4b48      	ldr	r3, [pc, #288]	@ (8012e54 <etharp_update_arp_entry+0x13c>)
 8012d32:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012d36:	4948      	ldr	r1, [pc, #288]	@ (8012e58 <etharp_update_arp_entry+0x140>)
 8012d38:	4848      	ldr	r0, [pc, #288]	@ (8012e5c <etharp_update_arp_entry+0x144>)
 8012d3a:	f002 fb43 	bl	80153c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d012      	beq.n	8012d6a <etharp_update_arp_entry+0x52>
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d00e      	beq.n	8012d6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	68f9      	ldr	r1, [r7, #12]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f001 f8fe 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 8012d58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d105      	bne.n	8012d6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d66:	2be0      	cmp	r3, #224	@ 0xe0
 8012d68:	d102      	bne.n	8012d70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012d6a:	f06f 030f 	mvn.w	r3, #15
 8012d6e:	e06c      	b.n	8012e4a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012d70:	78fb      	ldrb	r3, [r7, #3]
 8012d72:	68fa      	ldr	r2, [r7, #12]
 8012d74:	4619      	mov	r1, r3
 8012d76:	68b8      	ldr	r0, [r7, #8]
 8012d78:	f7ff fe56 	bl	8012a28 <etharp_find_entry>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012d80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	da02      	bge.n	8012d8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012d88:	8afb      	ldrh	r3, [r7, #22]
 8012d8a:	b25b      	sxtb	r3, r3
 8012d8c:	e05d      	b.n	8012e4a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012d8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d92:	4933      	ldr	r1, [pc, #204]	@ (8012e60 <etharp_update_arp_entry+0x148>)
 8012d94:	4613      	mov	r3, r2
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	4413      	add	r3, r2
 8012d9a:	00db      	lsls	r3, r3, #3
 8012d9c:	440b      	add	r3, r1
 8012d9e:	3314      	adds	r3, #20
 8012da0:	2202      	movs	r2, #2
 8012da2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012da4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012da8:	492d      	ldr	r1, [pc, #180]	@ (8012e60 <etharp_update_arp_entry+0x148>)
 8012daa:	4613      	mov	r3, r2
 8012dac:	005b      	lsls	r3, r3, #1
 8012dae:	4413      	add	r3, r2
 8012db0:	00db      	lsls	r3, r3, #3
 8012db2:	440b      	add	r3, r1
 8012db4:	3308      	adds	r3, #8
 8012db6:	68fa      	ldr	r2, [r7, #12]
 8012db8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012dba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	005b      	lsls	r3, r3, #1
 8012dc2:	4413      	add	r3, r2
 8012dc4:	00db      	lsls	r3, r3, #3
 8012dc6:	3308      	adds	r3, #8
 8012dc8:	4a25      	ldr	r2, [pc, #148]	@ (8012e60 <etharp_update_arp_entry+0x148>)
 8012dca:	4413      	add	r3, r2
 8012dcc:	3304      	adds	r3, #4
 8012dce:	2206      	movs	r2, #6
 8012dd0:	6879      	ldr	r1, [r7, #4]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f002 fc87 	bl	80156e6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012dd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ddc:	4920      	ldr	r1, [pc, #128]	@ (8012e60 <etharp_update_arp_entry+0x148>)
 8012dde:	4613      	mov	r3, r2
 8012de0:	005b      	lsls	r3, r3, #1
 8012de2:	4413      	add	r3, r2
 8012de4:	00db      	lsls	r3, r3, #3
 8012de6:	440b      	add	r3, r1
 8012de8:	3312      	adds	r3, #18
 8012dea:	2200      	movs	r2, #0
 8012dec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012dee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012df2:	491b      	ldr	r1, [pc, #108]	@ (8012e60 <etharp_update_arp_entry+0x148>)
 8012df4:	4613      	mov	r3, r2
 8012df6:	005b      	lsls	r3, r3, #1
 8012df8:	4413      	add	r3, r2
 8012dfa:	00db      	lsls	r3, r3, #3
 8012dfc:	440b      	add	r3, r1
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d021      	beq.n	8012e48 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012e08:	4915      	ldr	r1, [pc, #84]	@ (8012e60 <etharp_update_arp_entry+0x148>)
 8012e0a:	4613      	mov	r3, r2
 8012e0c:	005b      	lsls	r3, r3, #1
 8012e0e:	4413      	add	r3, r2
 8012e10:	00db      	lsls	r3, r3, #3
 8012e12:	440b      	add	r3, r1
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012e18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012e1c:	4910      	ldr	r1, [pc, #64]	@ (8012e60 <etharp_update_arp_entry+0x148>)
 8012e1e:	4613      	mov	r3, r2
 8012e20:	005b      	lsls	r3, r3, #1
 8012e22:	4413      	add	r3, r2
 8012e24:	00db      	lsls	r3, r3, #3
 8012e26:	440b      	add	r3, r1
 8012e28:	2200      	movs	r2, #0
 8012e2a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012e32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012e36:	9300      	str	r3, [sp, #0]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6939      	ldr	r1, [r7, #16]
 8012e3c:	68f8      	ldr	r0, [r7, #12]
 8012e3e:	f001 ff97 	bl	8014d70 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012e42:	6938      	ldr	r0, [r7, #16]
 8012e44:	f7f8 fa38 	bl	800b2b8 <pbuf_free>
  }
  return ERR_OK;
 8012e48:	2300      	movs	r3, #0
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3718      	adds	r7, #24
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	08019410 	.word	0x08019410
 8012e58:	08019508 	.word	0x08019508
 8012e5c:	08019488 	.word	0x08019488
 8012e60:	2000bfc8 	.word	0x2000bfc8

08012e64 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	60fb      	str	r3, [r7, #12]
 8012e70:	e01e      	b.n	8012eb0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012e72:	4913      	ldr	r1, [pc, #76]	@ (8012ec0 <etharp_cleanup_netif+0x5c>)
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	4613      	mov	r3, r2
 8012e78:	005b      	lsls	r3, r3, #1
 8012e7a:	4413      	add	r3, r2
 8012e7c:	00db      	lsls	r3, r3, #3
 8012e7e:	440b      	add	r3, r1
 8012e80:	3314      	adds	r3, #20
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012e86:	7afb      	ldrb	r3, [r7, #11]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d00e      	beq.n	8012eaa <etharp_cleanup_netif+0x46>
 8012e8c:	490c      	ldr	r1, [pc, #48]	@ (8012ec0 <etharp_cleanup_netif+0x5c>)
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	4613      	mov	r3, r2
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	4413      	add	r3, r2
 8012e96:	00db      	lsls	r3, r3, #3
 8012e98:	440b      	add	r3, r1
 8012e9a:	3308      	adds	r3, #8
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	687a      	ldr	r2, [r7, #4]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d102      	bne.n	8012eaa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f7ff fce5 	bl	8012874 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	3301      	adds	r3, #1
 8012eae:	60fb      	str	r3, [r7, #12]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2b09      	cmp	r3, #9
 8012eb4:	dddd      	ble.n	8012e72 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012eb6:	bf00      	nop
 8012eb8:	bf00      	nop
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}
 8012ec0:	2000bfc8 	.word	0x2000bfc8

08012ec4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012ec4:	b5b0      	push	{r4, r5, r7, lr}
 8012ec6:	b08a      	sub	sp, #40	@ 0x28
 8012ec8:	af04      	add	r7, sp, #16
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d107      	bne.n	8012ee4 <etharp_input+0x20>
 8012ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8012fcc <etharp_input+0x108>)
 8012ed6:	f240 228a 	movw	r2, #650	@ 0x28a
 8012eda:	493d      	ldr	r1, [pc, #244]	@ (8012fd0 <etharp_input+0x10c>)
 8012edc:	483d      	ldr	r0, [pc, #244]	@ (8012fd4 <etharp_input+0x110>)
 8012ede:	f002 fa71 	bl	80153c4 <iprintf>
 8012ee2:	e06f      	b.n	8012fc4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	881b      	ldrh	r3, [r3, #0]
 8012eee:	b29b      	uxth	r3, r3
 8012ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ef4:	d10c      	bne.n	8012f10 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012efa:	2b06      	cmp	r3, #6
 8012efc:	d108      	bne.n	8012f10 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012f02:	2b04      	cmp	r3, #4
 8012f04:	d104      	bne.n	8012f10 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	885b      	ldrh	r3, [r3, #2]
 8012f0a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012f0c:	2b08      	cmp	r3, #8
 8012f0e:	d003      	beq.n	8012f18 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f7f8 f9d1 	bl	800b2b8 <pbuf_free>
    return;
 8012f16:	e055      	b.n	8012fc4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	330e      	adds	r3, #14
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	3318      	adds	r3, #24
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	3304      	adds	r3, #4
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d102      	bne.n	8012f38 <etharp_input+0x74>
    for_us = 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	75fb      	strb	r3, [r7, #23]
 8012f36:	e009      	b.n	8012f4c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012f38:	68ba      	ldr	r2, [r7, #8]
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	3304      	adds	r3, #4
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	bf0c      	ite	eq
 8012f44:	2301      	moveq	r3, #1
 8012f46:	2300      	movne	r3, #0
 8012f48:	b2db      	uxtb	r3, r3
 8012f4a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	f103 0208 	add.w	r2, r3, #8
 8012f52:	7dfb      	ldrb	r3, [r7, #23]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d001      	beq.n	8012f5c <etharp_input+0x98>
 8012f58:	2301      	movs	r3, #1
 8012f5a:	e000      	b.n	8012f5e <etharp_input+0x9a>
 8012f5c:	2302      	movs	r3, #2
 8012f5e:	f107 010c 	add.w	r1, r7, #12
 8012f62:	6838      	ldr	r0, [r7, #0]
 8012f64:	f7ff fed8 	bl	8012d18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	88db      	ldrh	r3, [r3, #6]
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012f72:	d003      	beq.n	8012f7c <etharp_input+0xb8>
 8012f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f78:	d01e      	beq.n	8012fb8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012f7a:	e020      	b.n	8012fbe <etharp_input+0xfa>
      if (for_us) {
 8012f7c:	7dfb      	ldrb	r3, [r7, #23]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d01c      	beq.n	8012fbc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012f98:	693a      	ldr	r2, [r7, #16]
 8012f9a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012f9c:	2102      	movs	r1, #2
 8012f9e:	9103      	str	r1, [sp, #12]
 8012fa0:	f107 010c 	add.w	r1, r7, #12
 8012fa4:	9102      	str	r1, [sp, #8]
 8012fa6:	9201      	str	r2, [sp, #4]
 8012fa8:	9300      	str	r3, [sp, #0]
 8012faa:	462b      	mov	r3, r5
 8012fac:	4622      	mov	r2, r4
 8012fae:	4601      	mov	r1, r0
 8012fb0:	6838      	ldr	r0, [r7, #0]
 8012fb2:	f000 faeb 	bl	801358c <etharp_raw>
      break;
 8012fb6:	e001      	b.n	8012fbc <etharp_input+0xf8>
      break;
 8012fb8:	bf00      	nop
 8012fba:	e000      	b.n	8012fbe <etharp_input+0xfa>
      break;
 8012fbc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f7f8 f97a 	bl	800b2b8 <pbuf_free>
}
 8012fc4:	3718      	adds	r7, #24
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	08019410 	.word	0x08019410
 8012fd0:	08019560 	.word	0x08019560
 8012fd4:	08019488 	.word	0x08019488

08012fd8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b086      	sub	sp, #24
 8012fdc:	af02      	add	r7, sp, #8
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012fe6:	79fa      	ldrb	r2, [r7, #7]
 8012fe8:	4944      	ldr	r1, [pc, #272]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 8012fea:	4613      	mov	r3, r2
 8012fec:	005b      	lsls	r3, r3, #1
 8012fee:	4413      	add	r3, r2
 8012ff0:	00db      	lsls	r3, r3, #3
 8012ff2:	440b      	add	r3, r1
 8012ff4:	3314      	adds	r3, #20
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d806      	bhi.n	801300a <etharp_output_to_arp_index+0x32>
 8012ffc:	4b40      	ldr	r3, [pc, #256]	@ (8013100 <etharp_output_to_arp_index+0x128>)
 8012ffe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013002:	4940      	ldr	r1, [pc, #256]	@ (8013104 <etharp_output_to_arp_index+0x12c>)
 8013004:	4840      	ldr	r0, [pc, #256]	@ (8013108 <etharp_output_to_arp_index+0x130>)
 8013006:	f002 f9dd 	bl	80153c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801300a:	79fa      	ldrb	r2, [r7, #7]
 801300c:	493b      	ldr	r1, [pc, #236]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 801300e:	4613      	mov	r3, r2
 8013010:	005b      	lsls	r3, r3, #1
 8013012:	4413      	add	r3, r2
 8013014:	00db      	lsls	r3, r3, #3
 8013016:	440b      	add	r3, r1
 8013018:	3314      	adds	r3, #20
 801301a:	781b      	ldrb	r3, [r3, #0]
 801301c:	2b02      	cmp	r3, #2
 801301e:	d153      	bne.n	80130c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013020:	79fa      	ldrb	r2, [r7, #7]
 8013022:	4936      	ldr	r1, [pc, #216]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 8013024:	4613      	mov	r3, r2
 8013026:	005b      	lsls	r3, r3, #1
 8013028:	4413      	add	r3, r2
 801302a:	00db      	lsls	r3, r3, #3
 801302c:	440b      	add	r3, r1
 801302e:	3312      	adds	r3, #18
 8013030:	881b      	ldrh	r3, [r3, #0]
 8013032:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8013036:	d919      	bls.n	801306c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013038:	79fa      	ldrb	r2, [r7, #7]
 801303a:	4613      	mov	r3, r2
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	4413      	add	r3, r2
 8013040:	00db      	lsls	r3, r3, #3
 8013042:	4a2e      	ldr	r2, [pc, #184]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 8013044:	4413      	add	r3, r2
 8013046:	3304      	adds	r3, #4
 8013048:	4619      	mov	r1, r3
 801304a:	68f8      	ldr	r0, [r7, #12]
 801304c:	f000 fb4c 	bl	80136e8 <etharp_request>
 8013050:	4603      	mov	r3, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d138      	bne.n	80130c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013056:	79fa      	ldrb	r2, [r7, #7]
 8013058:	4928      	ldr	r1, [pc, #160]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 801305a:	4613      	mov	r3, r2
 801305c:	005b      	lsls	r3, r3, #1
 801305e:	4413      	add	r3, r2
 8013060:	00db      	lsls	r3, r3, #3
 8013062:	440b      	add	r3, r1
 8013064:	3314      	adds	r3, #20
 8013066:	2203      	movs	r2, #3
 8013068:	701a      	strb	r2, [r3, #0]
 801306a:	e02d      	b.n	80130c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801306c:	79fa      	ldrb	r2, [r7, #7]
 801306e:	4923      	ldr	r1, [pc, #140]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 8013070:	4613      	mov	r3, r2
 8013072:	005b      	lsls	r3, r3, #1
 8013074:	4413      	add	r3, r2
 8013076:	00db      	lsls	r3, r3, #3
 8013078:	440b      	add	r3, r1
 801307a:	3312      	adds	r3, #18
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013082:	d321      	bcc.n	80130c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013084:	79fa      	ldrb	r2, [r7, #7]
 8013086:	4613      	mov	r3, r2
 8013088:	005b      	lsls	r3, r3, #1
 801308a:	4413      	add	r3, r2
 801308c:	00db      	lsls	r3, r3, #3
 801308e:	4a1b      	ldr	r2, [pc, #108]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 8013090:	4413      	add	r3, r2
 8013092:	1d19      	adds	r1, r3, #4
 8013094:	79fa      	ldrb	r2, [r7, #7]
 8013096:	4613      	mov	r3, r2
 8013098:	005b      	lsls	r3, r3, #1
 801309a:	4413      	add	r3, r2
 801309c:	00db      	lsls	r3, r3, #3
 801309e:	3308      	adds	r3, #8
 80130a0:	4a16      	ldr	r2, [pc, #88]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 80130a2:	4413      	add	r3, r2
 80130a4:	3304      	adds	r3, #4
 80130a6:	461a      	mov	r2, r3
 80130a8:	68f8      	ldr	r0, [r7, #12]
 80130aa:	f000 fafb 	bl	80136a4 <etharp_request_dst>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d109      	bne.n	80130c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80130b4:	79fa      	ldrb	r2, [r7, #7]
 80130b6:	4911      	ldr	r1, [pc, #68]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 80130b8:	4613      	mov	r3, r2
 80130ba:	005b      	lsls	r3, r3, #1
 80130bc:	4413      	add	r3, r2
 80130be:	00db      	lsls	r3, r3, #3
 80130c0:	440b      	add	r3, r1
 80130c2:	3314      	adds	r3, #20
 80130c4:	2203      	movs	r2, #3
 80130c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80130ce:	79fa      	ldrb	r2, [r7, #7]
 80130d0:	4613      	mov	r3, r2
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	4413      	add	r3, r2
 80130d6:	00db      	lsls	r3, r3, #3
 80130d8:	3308      	adds	r3, #8
 80130da:	4a08      	ldr	r2, [pc, #32]	@ (80130fc <etharp_output_to_arp_index+0x124>)
 80130dc:	4413      	add	r3, r2
 80130de:	3304      	adds	r3, #4
 80130e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80130e4:	9200      	str	r2, [sp, #0]
 80130e6:	460a      	mov	r2, r1
 80130e8:	68b9      	ldr	r1, [r7, #8]
 80130ea:	68f8      	ldr	r0, [r7, #12]
 80130ec:	f001 fe40 	bl	8014d70 <ethernet_output>
 80130f0:	4603      	mov	r3, r0
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3710      	adds	r7, #16
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	2000bfc8 	.word	0x2000bfc8
 8013100:	08019410 	.word	0x08019410
 8013104:	08019580 	.word	0x08019580
 8013108:	08019488 	.word	0x08019488

0801310c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b08a      	sub	sp, #40	@ 0x28
 8013110:	af02      	add	r7, sp, #8
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	60b9      	str	r1, [r7, #8]
 8013116:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d106      	bne.n	8013130 <etharp_output+0x24>
 8013122:	4b73      	ldr	r3, [pc, #460]	@ (80132f0 <etharp_output+0x1e4>)
 8013124:	f240 321e 	movw	r2, #798	@ 0x31e
 8013128:	4972      	ldr	r1, [pc, #456]	@ (80132f4 <etharp_output+0x1e8>)
 801312a:	4873      	ldr	r0, [pc, #460]	@ (80132f8 <etharp_output+0x1ec>)
 801312c:	f002 f94a 	bl	80153c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d106      	bne.n	8013144 <etharp_output+0x38>
 8013136:	4b6e      	ldr	r3, [pc, #440]	@ (80132f0 <etharp_output+0x1e4>)
 8013138:	f240 321f 	movw	r2, #799	@ 0x31f
 801313c:	496f      	ldr	r1, [pc, #444]	@ (80132fc <etharp_output+0x1f0>)
 801313e:	486e      	ldr	r0, [pc, #440]	@ (80132f8 <etharp_output+0x1ec>)
 8013140:	f002 f940 	bl	80153c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d106      	bne.n	8013158 <etharp_output+0x4c>
 801314a:	4b69      	ldr	r3, [pc, #420]	@ (80132f0 <etharp_output+0x1e4>)
 801314c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013150:	496b      	ldr	r1, [pc, #428]	@ (8013300 <etharp_output+0x1f4>)
 8013152:	4869      	ldr	r0, [pc, #420]	@ (80132f8 <etharp_output+0x1ec>)
 8013154:	f002 f936 	bl	80153c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68f9      	ldr	r1, [r7, #12]
 801315e:	4618      	mov	r0, r3
 8013160:	f000 fef8 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
 8013168:	d002      	beq.n	8013170 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801316a:	4b66      	ldr	r3, [pc, #408]	@ (8013304 <etharp_output+0x1f8>)
 801316c:	61fb      	str	r3, [r7, #28]
 801316e:	e0af      	b.n	80132d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013178:	2be0      	cmp	r3, #224	@ 0xe0
 801317a:	d118      	bne.n	80131ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801317c:	2301      	movs	r3, #1
 801317e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013180:	2300      	movs	r3, #0
 8013182:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013184:	235e      	movs	r3, #94	@ 0x5e
 8013186:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	3301      	adds	r3, #1
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013192:	b2db      	uxtb	r3, r3
 8013194:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	3302      	adds	r3, #2
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	3303      	adds	r3, #3
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80131a6:	f107 0310 	add.w	r3, r7, #16
 80131aa:	61fb      	str	r3, [r7, #28]
 80131ac:	e090      	b.n	80132d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	3304      	adds	r3, #4
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	405a      	eors	r2, r3
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	3308      	adds	r3, #8
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4013      	ands	r3, r2
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d012      	beq.n	80131ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80131cc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d00b      	beq.n	80131ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	330c      	adds	r3, #12
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d003      	beq.n	80131e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	330c      	adds	r3, #12
 80131e2:	61bb      	str	r3, [r7, #24]
 80131e4:	e002      	b.n	80131ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80131e6:	f06f 0303 	mvn.w	r3, #3
 80131ea:	e07d      	b.n	80132e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80131ec:	4b46      	ldr	r3, [pc, #280]	@ (8013308 <etharp_output+0x1fc>)
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	4619      	mov	r1, r3
 80131f2:	4a46      	ldr	r2, [pc, #280]	@ (801330c <etharp_output+0x200>)
 80131f4:	460b      	mov	r3, r1
 80131f6:	005b      	lsls	r3, r3, #1
 80131f8:	440b      	add	r3, r1
 80131fa:	00db      	lsls	r3, r3, #3
 80131fc:	4413      	add	r3, r2
 80131fe:	3314      	adds	r3, #20
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	2b01      	cmp	r3, #1
 8013204:	d925      	bls.n	8013252 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013206:	4b40      	ldr	r3, [pc, #256]	@ (8013308 <etharp_output+0x1fc>)
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	4619      	mov	r1, r3
 801320c:	4a3f      	ldr	r2, [pc, #252]	@ (801330c <etharp_output+0x200>)
 801320e:	460b      	mov	r3, r1
 8013210:	005b      	lsls	r3, r3, #1
 8013212:	440b      	add	r3, r1
 8013214:	00db      	lsls	r3, r3, #3
 8013216:	4413      	add	r3, r2
 8013218:	3308      	adds	r3, #8
 801321a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801321c:	68fa      	ldr	r2, [r7, #12]
 801321e:	429a      	cmp	r2, r3
 8013220:	d117      	bne.n	8013252 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	681a      	ldr	r2, [r3, #0]
 8013226:	4b38      	ldr	r3, [pc, #224]	@ (8013308 <etharp_output+0x1fc>)
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	4618      	mov	r0, r3
 801322c:	4937      	ldr	r1, [pc, #220]	@ (801330c <etharp_output+0x200>)
 801322e:	4603      	mov	r3, r0
 8013230:	005b      	lsls	r3, r3, #1
 8013232:	4403      	add	r3, r0
 8013234:	00db      	lsls	r3, r3, #3
 8013236:	440b      	add	r3, r1
 8013238:	3304      	adds	r3, #4
 801323a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801323c:	429a      	cmp	r2, r3
 801323e:	d108      	bne.n	8013252 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013240:	4b31      	ldr	r3, [pc, #196]	@ (8013308 <etharp_output+0x1fc>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	461a      	mov	r2, r3
 8013246:	68b9      	ldr	r1, [r7, #8]
 8013248:	68f8      	ldr	r0, [r7, #12]
 801324a:	f7ff fec5 	bl	8012fd8 <etharp_output_to_arp_index>
 801324e:	4603      	mov	r3, r0
 8013250:	e04a      	b.n	80132e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013252:	2300      	movs	r3, #0
 8013254:	75fb      	strb	r3, [r7, #23]
 8013256:	e031      	b.n	80132bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013258:	7dfa      	ldrb	r2, [r7, #23]
 801325a:	492c      	ldr	r1, [pc, #176]	@ (801330c <etharp_output+0x200>)
 801325c:	4613      	mov	r3, r2
 801325e:	005b      	lsls	r3, r3, #1
 8013260:	4413      	add	r3, r2
 8013262:	00db      	lsls	r3, r3, #3
 8013264:	440b      	add	r3, r1
 8013266:	3314      	adds	r3, #20
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b01      	cmp	r3, #1
 801326c:	d923      	bls.n	80132b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801326e:	7dfa      	ldrb	r2, [r7, #23]
 8013270:	4926      	ldr	r1, [pc, #152]	@ (801330c <etharp_output+0x200>)
 8013272:	4613      	mov	r3, r2
 8013274:	005b      	lsls	r3, r3, #1
 8013276:	4413      	add	r3, r2
 8013278:	00db      	lsls	r3, r3, #3
 801327a:	440b      	add	r3, r1
 801327c:	3308      	adds	r3, #8
 801327e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013280:	68fa      	ldr	r2, [r7, #12]
 8013282:	429a      	cmp	r2, r3
 8013284:	d117      	bne.n	80132b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	6819      	ldr	r1, [r3, #0]
 801328a:	7dfa      	ldrb	r2, [r7, #23]
 801328c:	481f      	ldr	r0, [pc, #124]	@ (801330c <etharp_output+0x200>)
 801328e:	4613      	mov	r3, r2
 8013290:	005b      	lsls	r3, r3, #1
 8013292:	4413      	add	r3, r2
 8013294:	00db      	lsls	r3, r3, #3
 8013296:	4403      	add	r3, r0
 8013298:	3304      	adds	r3, #4
 801329a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801329c:	4299      	cmp	r1, r3
 801329e:	d10a      	bne.n	80132b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80132a0:	4a19      	ldr	r2, [pc, #100]	@ (8013308 <etharp_output+0x1fc>)
 80132a2:	7dfb      	ldrb	r3, [r7, #23]
 80132a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80132a6:	7dfb      	ldrb	r3, [r7, #23]
 80132a8:	461a      	mov	r2, r3
 80132aa:	68b9      	ldr	r1, [r7, #8]
 80132ac:	68f8      	ldr	r0, [r7, #12]
 80132ae:	f7ff fe93 	bl	8012fd8 <etharp_output_to_arp_index>
 80132b2:	4603      	mov	r3, r0
 80132b4:	e018      	b.n	80132e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80132b6:	7dfb      	ldrb	r3, [r7, #23]
 80132b8:	3301      	adds	r3, #1
 80132ba:	75fb      	strb	r3, [r7, #23]
 80132bc:	7dfb      	ldrb	r3, [r7, #23]
 80132be:	2b09      	cmp	r3, #9
 80132c0:	d9ca      	bls.n	8013258 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	69b9      	ldr	r1, [r7, #24]
 80132c6:	68f8      	ldr	r0, [r7, #12]
 80132c8:	f000 f822 	bl	8013310 <etharp_query>
 80132cc:	4603      	mov	r3, r0
 80132ce:	e00b      	b.n	80132e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80132d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	68b9      	ldr	r1, [r7, #8]
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	f001 fd45 	bl	8014d70 <ethernet_output>
 80132e6:	4603      	mov	r3, r0
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3720      	adds	r7, #32
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}
 80132f0:	08019410 	.word	0x08019410
 80132f4:	08019560 	.word	0x08019560
 80132f8:	08019488 	.word	0x08019488
 80132fc:	080195b0 	.word	0x080195b0
 8013300:	08019550 	.word	0x08019550
 8013304:	08019c10 	.word	0x08019c10
 8013308:	2000c0b8 	.word	0x2000c0b8
 801330c:	2000bfc8 	.word	0x2000bfc8

08013310 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b08c      	sub	sp, #48	@ 0x30
 8013314:	af02      	add	r7, sp, #8
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	60b9      	str	r1, [r7, #8]
 801331a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3326      	adds	r3, #38	@ 0x26
 8013320:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013322:	23ff      	movs	r3, #255	@ 0xff
 8013324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8013328:	2300      	movs	r3, #0
 801332a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	68f9      	ldr	r1, [r7, #12]
 8013332:	4618      	mov	r0, r3
 8013334:	f000 fe0e 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10c      	bne.n	8013358 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013346:	2be0      	cmp	r3, #224	@ 0xe0
 8013348:	d006      	beq.n	8013358 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d003      	beq.n	8013358 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d102      	bne.n	801335e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013358:	f06f 030f 	mvn.w	r3, #15
 801335c:	e101      	b.n	8013562 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801335e:	68fa      	ldr	r2, [r7, #12]
 8013360:	2101      	movs	r1, #1
 8013362:	68b8      	ldr	r0, [r7, #8]
 8013364:	f7ff fb60 	bl	8012a28 <etharp_find_entry>
 8013368:	4603      	mov	r3, r0
 801336a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801336c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013370:	2b00      	cmp	r3, #0
 8013372:	da02      	bge.n	801337a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013374:	8a7b      	ldrh	r3, [r7, #18]
 8013376:	b25b      	sxtb	r3, r3
 8013378:	e0f3      	b.n	8013562 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801337a:	8a7b      	ldrh	r3, [r7, #18]
 801337c:	2b7e      	cmp	r3, #126	@ 0x7e
 801337e:	d906      	bls.n	801338e <etharp_query+0x7e>
 8013380:	4b7a      	ldr	r3, [pc, #488]	@ (801356c <etharp_query+0x25c>)
 8013382:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013386:	497a      	ldr	r1, [pc, #488]	@ (8013570 <etharp_query+0x260>)
 8013388:	487a      	ldr	r0, [pc, #488]	@ (8013574 <etharp_query+0x264>)
 801338a:	f002 f81b 	bl	80153c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801338e:	8a7b      	ldrh	r3, [r7, #18]
 8013390:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013392:	7c7a      	ldrb	r2, [r7, #17]
 8013394:	4978      	ldr	r1, [pc, #480]	@ (8013578 <etharp_query+0x268>)
 8013396:	4613      	mov	r3, r2
 8013398:	005b      	lsls	r3, r3, #1
 801339a:	4413      	add	r3, r2
 801339c:	00db      	lsls	r3, r3, #3
 801339e:	440b      	add	r3, r1
 80133a0:	3314      	adds	r3, #20
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d115      	bne.n	80133d4 <etharp_query+0xc4>
    is_new_entry = 1;
 80133a8:	2301      	movs	r3, #1
 80133aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80133ac:	7c7a      	ldrb	r2, [r7, #17]
 80133ae:	4972      	ldr	r1, [pc, #456]	@ (8013578 <etharp_query+0x268>)
 80133b0:	4613      	mov	r3, r2
 80133b2:	005b      	lsls	r3, r3, #1
 80133b4:	4413      	add	r3, r2
 80133b6:	00db      	lsls	r3, r3, #3
 80133b8:	440b      	add	r3, r1
 80133ba:	3314      	adds	r3, #20
 80133bc:	2201      	movs	r2, #1
 80133be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80133c0:	7c7a      	ldrb	r2, [r7, #17]
 80133c2:	496d      	ldr	r1, [pc, #436]	@ (8013578 <etharp_query+0x268>)
 80133c4:	4613      	mov	r3, r2
 80133c6:	005b      	lsls	r3, r3, #1
 80133c8:	4413      	add	r3, r2
 80133ca:	00db      	lsls	r3, r3, #3
 80133cc:	440b      	add	r3, r1
 80133ce:	3308      	adds	r3, #8
 80133d0:	68fa      	ldr	r2, [r7, #12]
 80133d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80133d4:	7c7a      	ldrb	r2, [r7, #17]
 80133d6:	4968      	ldr	r1, [pc, #416]	@ (8013578 <etharp_query+0x268>)
 80133d8:	4613      	mov	r3, r2
 80133da:	005b      	lsls	r3, r3, #1
 80133dc:	4413      	add	r3, r2
 80133de:	00db      	lsls	r3, r3, #3
 80133e0:	440b      	add	r3, r1
 80133e2:	3314      	adds	r3, #20
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	d011      	beq.n	801340e <etharp_query+0xfe>
 80133ea:	7c7a      	ldrb	r2, [r7, #17]
 80133ec:	4962      	ldr	r1, [pc, #392]	@ (8013578 <etharp_query+0x268>)
 80133ee:	4613      	mov	r3, r2
 80133f0:	005b      	lsls	r3, r3, #1
 80133f2:	4413      	add	r3, r2
 80133f4:	00db      	lsls	r3, r3, #3
 80133f6:	440b      	add	r3, r1
 80133f8:	3314      	adds	r3, #20
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	2b01      	cmp	r3, #1
 80133fe:	d806      	bhi.n	801340e <etharp_query+0xfe>
 8013400:	4b5a      	ldr	r3, [pc, #360]	@ (801356c <etharp_query+0x25c>)
 8013402:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8013406:	495d      	ldr	r1, [pc, #372]	@ (801357c <etharp_query+0x26c>)
 8013408:	485a      	ldr	r0, [pc, #360]	@ (8013574 <etharp_query+0x264>)
 801340a:	f001 ffdb 	bl	80153c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801340e:	6a3b      	ldr	r3, [r7, #32]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d102      	bne.n	801341a <etharp_query+0x10a>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d10c      	bne.n	8013434 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801341a:	68b9      	ldr	r1, [r7, #8]
 801341c:	68f8      	ldr	r0, [r7, #12]
 801341e:	f000 f963 	bl	80136e8 <etharp_request>
 8013422:	4603      	mov	r3, r0
 8013424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d102      	bne.n	8013434 <etharp_query+0x124>
      return result;
 801342e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013432:	e096      	b.n	8013562 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d106      	bne.n	8013448 <etharp_query+0x138>
 801343a:	4b4c      	ldr	r3, [pc, #304]	@ (801356c <etharp_query+0x25c>)
 801343c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8013440:	494f      	ldr	r1, [pc, #316]	@ (8013580 <etharp_query+0x270>)
 8013442:	484c      	ldr	r0, [pc, #304]	@ (8013574 <etharp_query+0x264>)
 8013444:	f001 ffbe 	bl	80153c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013448:	7c7a      	ldrb	r2, [r7, #17]
 801344a:	494b      	ldr	r1, [pc, #300]	@ (8013578 <etharp_query+0x268>)
 801344c:	4613      	mov	r3, r2
 801344e:	005b      	lsls	r3, r3, #1
 8013450:	4413      	add	r3, r2
 8013452:	00db      	lsls	r3, r3, #3
 8013454:	440b      	add	r3, r1
 8013456:	3314      	adds	r3, #20
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	2b01      	cmp	r3, #1
 801345c:	d917      	bls.n	801348e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801345e:	4a49      	ldr	r2, [pc, #292]	@ (8013584 <etharp_query+0x274>)
 8013460:	7c7b      	ldrb	r3, [r7, #17]
 8013462:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013464:	7c7a      	ldrb	r2, [r7, #17]
 8013466:	4613      	mov	r3, r2
 8013468:	005b      	lsls	r3, r3, #1
 801346a:	4413      	add	r3, r2
 801346c:	00db      	lsls	r3, r3, #3
 801346e:	3308      	adds	r3, #8
 8013470:	4a41      	ldr	r2, [pc, #260]	@ (8013578 <etharp_query+0x268>)
 8013472:	4413      	add	r3, r2
 8013474:	3304      	adds	r3, #4
 8013476:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801347a:	9200      	str	r2, [sp, #0]
 801347c:	697a      	ldr	r2, [r7, #20]
 801347e:	6879      	ldr	r1, [r7, #4]
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f001 fc75 	bl	8014d70 <ethernet_output>
 8013486:	4603      	mov	r3, r0
 8013488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801348c:	e067      	b.n	801355e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801348e:	7c7a      	ldrb	r2, [r7, #17]
 8013490:	4939      	ldr	r1, [pc, #228]	@ (8013578 <etharp_query+0x268>)
 8013492:	4613      	mov	r3, r2
 8013494:	005b      	lsls	r3, r3, #1
 8013496:	4413      	add	r3, r2
 8013498:	00db      	lsls	r3, r3, #3
 801349a:	440b      	add	r3, r1
 801349c:	3314      	adds	r3, #20
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	2b01      	cmp	r3, #1
 80134a2:	d15c      	bne.n	801355e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80134a4:	2300      	movs	r3, #0
 80134a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80134ac:	e01c      	b.n	80134e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	895a      	ldrh	r2, [r3, #10]
 80134b2:	69fb      	ldr	r3, [r7, #28]
 80134b4:	891b      	ldrh	r3, [r3, #8]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d10a      	bne.n	80134d0 <etharp_query+0x1c0>
 80134ba:	69fb      	ldr	r3, [r7, #28]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d006      	beq.n	80134d0 <etharp_query+0x1c0>
 80134c2:	4b2a      	ldr	r3, [pc, #168]	@ (801356c <etharp_query+0x25c>)
 80134c4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80134c8:	492f      	ldr	r1, [pc, #188]	@ (8013588 <etharp_query+0x278>)
 80134ca:	482a      	ldr	r0, [pc, #168]	@ (8013574 <etharp_query+0x264>)
 80134cc:	f001 ff7a 	bl	80153c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80134d0:	69fb      	ldr	r3, [r7, #28]
 80134d2:	7b1b      	ldrb	r3, [r3, #12]
 80134d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d002      	beq.n	80134e2 <etharp_query+0x1d2>
        copy_needed = 1;
 80134dc:	2301      	movs	r3, #1
 80134de:	61bb      	str	r3, [r7, #24]
        break;
 80134e0:	e005      	b.n	80134ee <etharp_query+0x1de>
      }
      p = p->next;
 80134e2:	69fb      	ldr	r3, [r7, #28]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80134e8:	69fb      	ldr	r3, [r7, #28]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d1df      	bne.n	80134ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d007      	beq.n	8013504 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80134fa:	200e      	movs	r0, #14
 80134fc:	f7f8 f9e6 	bl	800b8cc <pbuf_clone>
 8013500:	61f8      	str	r0, [r7, #28]
 8013502:	e004      	b.n	801350e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013508:	69f8      	ldr	r0, [r7, #28]
 801350a:	f7f7 ff7b 	bl	800b404 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801350e:	69fb      	ldr	r3, [r7, #28]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d021      	beq.n	8013558 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013514:	7c7a      	ldrb	r2, [r7, #17]
 8013516:	4918      	ldr	r1, [pc, #96]	@ (8013578 <etharp_query+0x268>)
 8013518:	4613      	mov	r3, r2
 801351a:	005b      	lsls	r3, r3, #1
 801351c:	4413      	add	r3, r2
 801351e:	00db      	lsls	r3, r3, #3
 8013520:	440b      	add	r3, r1
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d00a      	beq.n	801353e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013528:	7c7a      	ldrb	r2, [r7, #17]
 801352a:	4913      	ldr	r1, [pc, #76]	@ (8013578 <etharp_query+0x268>)
 801352c:	4613      	mov	r3, r2
 801352e:	005b      	lsls	r3, r3, #1
 8013530:	4413      	add	r3, r2
 8013532:	00db      	lsls	r3, r3, #3
 8013534:	440b      	add	r3, r1
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4618      	mov	r0, r3
 801353a:	f7f7 febd 	bl	800b2b8 <pbuf_free>
      }
      arp_table[i].q = p;
 801353e:	7c7a      	ldrb	r2, [r7, #17]
 8013540:	490d      	ldr	r1, [pc, #52]	@ (8013578 <etharp_query+0x268>)
 8013542:	4613      	mov	r3, r2
 8013544:	005b      	lsls	r3, r3, #1
 8013546:	4413      	add	r3, r2
 8013548:	00db      	lsls	r3, r3, #3
 801354a:	440b      	add	r3, r1
 801354c:	69fa      	ldr	r2, [r7, #28]
 801354e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013550:	2300      	movs	r3, #0
 8013552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013556:	e002      	b.n	801355e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013558:	23ff      	movs	r3, #255	@ 0xff
 801355a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801355e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013562:	4618      	mov	r0, r3
 8013564:	3728      	adds	r7, #40	@ 0x28
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	08019410 	.word	0x08019410
 8013570:	080195bc 	.word	0x080195bc
 8013574:	08019488 	.word	0x08019488
 8013578:	2000bfc8 	.word	0x2000bfc8
 801357c:	080195cc 	.word	0x080195cc
 8013580:	080195b0 	.word	0x080195b0
 8013584:	2000c0b8 	.word	0x2000c0b8
 8013588:	080195f4 	.word	0x080195f4

0801358c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b08a      	sub	sp, #40	@ 0x28
 8013590:	af02      	add	r7, sp, #8
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801359a:	2300      	movs	r3, #0
 801359c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d106      	bne.n	80135b2 <etharp_raw+0x26>
 80135a4:	4b3a      	ldr	r3, [pc, #232]	@ (8013690 <etharp_raw+0x104>)
 80135a6:	f240 4257 	movw	r2, #1111	@ 0x457
 80135aa:	493a      	ldr	r1, [pc, #232]	@ (8013694 <etharp_raw+0x108>)
 80135ac:	483a      	ldr	r0, [pc, #232]	@ (8013698 <etharp_raw+0x10c>)
 80135ae:	f001 ff09 	bl	80153c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80135b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80135b6:	211c      	movs	r1, #28
 80135b8:	200e      	movs	r0, #14
 80135ba:	f7f7 fb99 	bl	800acf0 <pbuf_alloc>
 80135be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80135c0:	69bb      	ldr	r3, [r7, #24]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d102      	bne.n	80135cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80135c6:	f04f 33ff 	mov.w	r3, #4294967295
 80135ca:	e05d      	b.n	8013688 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	895b      	ldrh	r3, [r3, #10]
 80135d0:	2b1b      	cmp	r3, #27
 80135d2:	d806      	bhi.n	80135e2 <etharp_raw+0x56>
 80135d4:	4b2e      	ldr	r3, [pc, #184]	@ (8013690 <etharp_raw+0x104>)
 80135d6:	f240 4262 	movw	r2, #1122	@ 0x462
 80135da:	4930      	ldr	r1, [pc, #192]	@ (801369c <etharp_raw+0x110>)
 80135dc:	482e      	ldr	r0, [pc, #184]	@ (8013698 <etharp_raw+0x10c>)
 80135de:	f001 fef1 	bl	80153c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80135e2:	69bb      	ldr	r3, [r7, #24]
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80135e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7f6 fa76 	bl	8009adc <lwip_htons>
 80135f0:	4603      	mov	r3, r0
 80135f2:	461a      	mov	r2, r3
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80135fe:	2b06      	cmp	r3, #6
 8013600:	d006      	beq.n	8013610 <etharp_raw+0x84>
 8013602:	4b23      	ldr	r3, [pc, #140]	@ (8013690 <etharp_raw+0x104>)
 8013604:	f240 4269 	movw	r2, #1129	@ 0x469
 8013608:	4925      	ldr	r1, [pc, #148]	@ (80136a0 <etharp_raw+0x114>)
 801360a:	4823      	ldr	r0, [pc, #140]	@ (8013698 <etharp_raw+0x10c>)
 801360c:	f001 feda 	bl	80153c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	3308      	adds	r3, #8
 8013614:	2206      	movs	r2, #6
 8013616:	6839      	ldr	r1, [r7, #0]
 8013618:	4618      	mov	r0, r3
 801361a:	f002 f864 	bl	80156e6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	3312      	adds	r3, #18
 8013622:	2206      	movs	r2, #6
 8013624:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013626:	4618      	mov	r0, r3
 8013628:	f002 f85d 	bl	80156e6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	330e      	adds	r3, #14
 8013630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013632:	6812      	ldr	r2, [r2, #0]
 8013634:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	3318      	adds	r3, #24
 801363a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801363c:	6812      	ldr	r2, [r2, #0]
 801363e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	2200      	movs	r2, #0
 8013644:	701a      	strb	r2, [r3, #0]
 8013646:	2200      	movs	r2, #0
 8013648:	f042 0201 	orr.w	r2, r2, #1
 801364c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	2200      	movs	r2, #0
 8013652:	f042 0208 	orr.w	r2, r2, #8
 8013656:	709a      	strb	r2, [r3, #2]
 8013658:	2200      	movs	r2, #0
 801365a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	2206      	movs	r2, #6
 8013660:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	2204      	movs	r2, #4
 8013666:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013668:	f640 0306 	movw	r3, #2054	@ 0x806
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	68ba      	ldr	r2, [r7, #8]
 8013672:	69b9      	ldr	r1, [r7, #24]
 8013674:	68f8      	ldr	r0, [r7, #12]
 8013676:	f001 fb7b 	bl	8014d70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801367a:	69b8      	ldr	r0, [r7, #24]
 801367c:	f7f7 fe1c 	bl	800b2b8 <pbuf_free>
  p = NULL;
 8013680:	2300      	movs	r3, #0
 8013682:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013684:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013688:	4618      	mov	r0, r3
 801368a:	3720      	adds	r7, #32
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	08019410 	.word	0x08019410
 8013694:	08019560 	.word	0x08019560
 8013698:	08019488 	.word	0x08019488
 801369c:	08019610 	.word	0x08019610
 80136a0:	08019644 	.word	0x08019644

080136a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b088      	sub	sp, #32
 80136a8:	af04      	add	r7, sp, #16
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80136c0:	2201      	movs	r2, #1
 80136c2:	9203      	str	r2, [sp, #12]
 80136c4:	68ba      	ldr	r2, [r7, #8]
 80136c6:	9202      	str	r2, [sp, #8]
 80136c8:	4a06      	ldr	r2, [pc, #24]	@ (80136e4 <etharp_request_dst+0x40>)
 80136ca:	9201      	str	r2, [sp, #4]
 80136cc:	9300      	str	r3, [sp, #0]
 80136ce:	4603      	mov	r3, r0
 80136d0:	687a      	ldr	r2, [r7, #4]
 80136d2:	68f8      	ldr	r0, [r7, #12]
 80136d4:	f7ff ff5a 	bl	801358c <etharp_raw>
 80136d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3710      	adds	r7, #16
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	08019c18 	.word	0x08019c18

080136e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80136f2:	4a05      	ldr	r2, [pc, #20]	@ (8013708 <etharp_request+0x20>)
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f7ff ffd4 	bl	80136a4 <etharp_request_dst>
 80136fc:	4603      	mov	r3, r0
}
 80136fe:	4618      	mov	r0, r3
 8013700:	3708      	adds	r7, #8
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}
 8013706:	bf00      	nop
 8013708:	08019c10 	.word	0x08019c10

0801370c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b08e      	sub	sp, #56	@ 0x38
 8013710:	af04      	add	r7, sp, #16
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013716:	4b79      	ldr	r3, [pc, #484]	@ (80138fc <icmp_input+0x1f0>)
 8013718:	689b      	ldr	r3, [r3, #8]
 801371a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801371e:	781b      	ldrb	r3, [r3, #0]
 8013720:	f003 030f 	and.w	r3, r3, #15
 8013724:	b2db      	uxtb	r3, r3
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	b2db      	uxtb	r3, r3
 801372a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801372c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801372e:	2b13      	cmp	r3, #19
 8013730:	f240 80cd 	bls.w	80138ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	895b      	ldrh	r3, [r3, #10]
 8013738:	2b03      	cmp	r3, #3
 801373a:	f240 80ca 	bls.w	80138d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013748:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801374c:	2b00      	cmp	r3, #0
 801374e:	f000 80b7 	beq.w	80138c0 <icmp_input+0x1b4>
 8013752:	2b08      	cmp	r3, #8
 8013754:	f040 80b7 	bne.w	80138c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013758:	4b69      	ldr	r3, [pc, #420]	@ (8013900 <icmp_input+0x1f4>)
 801375a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801375c:	4b67      	ldr	r3, [pc, #412]	@ (80138fc <icmp_input+0x1f0>)
 801375e:	695b      	ldr	r3, [r3, #20]
 8013760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013764:	2be0      	cmp	r3, #224	@ 0xe0
 8013766:	f000 80bb 	beq.w	80138e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801376a:	4b64      	ldr	r3, [pc, #400]	@ (80138fc <icmp_input+0x1f0>)
 801376c:	695b      	ldr	r3, [r3, #20]
 801376e:	4a63      	ldr	r2, [pc, #396]	@ (80138fc <icmp_input+0x1f0>)
 8013770:	6812      	ldr	r2, [r2, #0]
 8013772:	4611      	mov	r1, r2
 8013774:	4618      	mov	r0, r3
 8013776:	f000 fbed 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	f040 80b1 	bne.w	80138e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	891b      	ldrh	r3, [r3, #8]
 8013786:	2b07      	cmp	r3, #7
 8013788:	f240 80a5 	bls.w	80138d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801378c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801378e:	330e      	adds	r3, #14
 8013790:	4619      	mov	r1, r3
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f7f7 fcfa 	bl	800b18c <pbuf_add_header>
 8013798:	4603      	mov	r3, r0
 801379a:	2b00      	cmp	r3, #0
 801379c:	d04b      	beq.n	8013836 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	891a      	ldrh	r2, [r3, #8]
 80137a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137a4:	4413      	add	r3, r2
 80137a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	891b      	ldrh	r3, [r3, #8]
 80137ac:	8b7a      	ldrh	r2, [r7, #26]
 80137ae:	429a      	cmp	r2, r3
 80137b0:	f0c0 809a 	bcc.w	80138e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80137b4:	8b7b      	ldrh	r3, [r7, #26]
 80137b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80137ba:	4619      	mov	r1, r3
 80137bc:	200e      	movs	r0, #14
 80137be:	f7f7 fa97 	bl	800acf0 <pbuf_alloc>
 80137c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f000 8090 	beq.w	80138ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	895b      	ldrh	r3, [r3, #10]
 80137d0:	461a      	mov	r2, r3
 80137d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137d4:	3308      	adds	r3, #8
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d203      	bcs.n	80137e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80137da:	6978      	ldr	r0, [r7, #20]
 80137dc:	f7f7 fd6c 	bl	800b2b8 <pbuf_free>
          goto icmperr;
 80137e0:	e085      	b.n	80138ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	685b      	ldr	r3, [r3, #4]
 80137e6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80137e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80137ea:	4618      	mov	r0, r3
 80137ec:	f001 ff7b 	bl	80156e6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80137f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137f2:	4619      	mov	r1, r3
 80137f4:	6978      	ldr	r0, [r7, #20]
 80137f6:	f7f7 fcd9 	bl	800b1ac <pbuf_remove_header>
 80137fa:	4603      	mov	r3, r0
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d009      	beq.n	8013814 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013800:	4b40      	ldr	r3, [pc, #256]	@ (8013904 <icmp_input+0x1f8>)
 8013802:	22b6      	movs	r2, #182	@ 0xb6
 8013804:	4940      	ldr	r1, [pc, #256]	@ (8013908 <icmp_input+0x1fc>)
 8013806:	4841      	ldr	r0, [pc, #260]	@ (801390c <icmp_input+0x200>)
 8013808:	f001 fddc 	bl	80153c4 <iprintf>
          pbuf_free(r);
 801380c:	6978      	ldr	r0, [r7, #20]
 801380e:	f7f7 fd53 	bl	800b2b8 <pbuf_free>
          goto icmperr;
 8013812:	e06c      	b.n	80138ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013814:	6879      	ldr	r1, [r7, #4]
 8013816:	6978      	ldr	r0, [r7, #20]
 8013818:	f7f7 fe82 	bl	800b520 <pbuf_copy>
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d003      	beq.n	801382a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013822:	6978      	ldr	r0, [r7, #20]
 8013824:	f7f7 fd48 	bl	800b2b8 <pbuf_free>
          goto icmperr;
 8013828:	e061      	b.n	80138ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f7f7 fd44 	bl	800b2b8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	607b      	str	r3, [r7, #4]
 8013834:	e00f      	b.n	8013856 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013836:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013838:	330e      	adds	r3, #14
 801383a:	4619      	mov	r1, r3
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7f7 fcb5 	bl	800b1ac <pbuf_remove_header>
 8013842:	4603      	mov	r3, r0
 8013844:	2b00      	cmp	r3, #0
 8013846:	d006      	beq.n	8013856 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013848:	4b2e      	ldr	r3, [pc, #184]	@ (8013904 <icmp_input+0x1f8>)
 801384a:	22c7      	movs	r2, #199	@ 0xc7
 801384c:	4930      	ldr	r1, [pc, #192]	@ (8013910 <icmp_input+0x204>)
 801384e:	482f      	ldr	r0, [pc, #188]	@ (801390c <icmp_input+0x200>)
 8013850:	f001 fdb8 	bl	80153c4 <iprintf>
          goto icmperr;
 8013854:	e04b      	b.n	80138ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801385c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801385e:	4619      	mov	r1, r3
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f7f7 fc93 	bl	800b18c <pbuf_add_header>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	d12b      	bne.n	80138c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	685b      	ldr	r3, [r3, #4]
 8013870:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	681a      	ldr	r2, [r3, #0]
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801387a:	4b20      	ldr	r3, [pc, #128]	@ (80138fc <icmp_input+0x1f0>)
 801387c:	691a      	ldr	r2, [r3, #16]
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	2200      	movs	r2, #0
 8013886:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	2200      	movs	r2, #0
 801388c:	709a      	strb	r2, [r3, #2]
 801388e:	2200      	movs	r2, #0
 8013890:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	22ff      	movs	r2, #255	@ 0xff
 8013896:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2200      	movs	r2, #0
 801389c:	729a      	strb	r2, [r3, #10]
 801389e:	2200      	movs	r2, #0
 80138a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	9302      	str	r3, [sp, #8]
 80138a6:	2301      	movs	r3, #1
 80138a8:	9301      	str	r3, [sp, #4]
 80138aa:	2300      	movs	r3, #0
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	23ff      	movs	r3, #255	@ 0xff
 80138b0:	2200      	movs	r2, #0
 80138b2:	69f9      	ldr	r1, [r7, #28]
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 fa75 	bl	8013da4 <ip4_output_if>
 80138ba:	4603      	mov	r3, r0
 80138bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80138be:	e001      	b.n	80138c4 <icmp_input+0x1b8>
      break;
 80138c0:	bf00      	nop
 80138c2:	e000      	b.n	80138c6 <icmp_input+0x1ba>
      break;
 80138c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f7f7 fcf6 	bl	800b2b8 <pbuf_free>
  return;
 80138cc:	e013      	b.n	80138f6 <icmp_input+0x1ea>
    goto lenerr;
 80138ce:	bf00      	nop
 80138d0:	e002      	b.n	80138d8 <icmp_input+0x1cc>
    goto lenerr;
 80138d2:	bf00      	nop
 80138d4:	e000      	b.n	80138d8 <icmp_input+0x1cc>
        goto lenerr;
 80138d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f7f7 fced 	bl	800b2b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138de:	e00a      	b.n	80138f6 <icmp_input+0x1ea>
        goto icmperr;
 80138e0:	bf00      	nop
 80138e2:	e004      	b.n	80138ee <icmp_input+0x1e2>
        goto icmperr;
 80138e4:	bf00      	nop
 80138e6:	e002      	b.n	80138ee <icmp_input+0x1e2>
          goto icmperr;
 80138e8:	bf00      	nop
 80138ea:	e000      	b.n	80138ee <icmp_input+0x1e2>
          goto icmperr;
 80138ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f7f7 fce2 	bl	800b2b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80138f6:	3728      	adds	r7, #40	@ 0x28
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	20008e68 	.word	0x20008e68
 8013900:	20008e7c 	.word	0x20008e7c
 8013904:	08019688 	.word	0x08019688
 8013908:	080196c0 	.word	0x080196c0
 801390c:	080196f8 	.word	0x080196f8
 8013910:	08019720 	.word	0x08019720

08013914 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b082      	sub	sp, #8
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	460b      	mov	r3, r1
 801391e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013920:	78fb      	ldrb	r3, [r7, #3]
 8013922:	461a      	mov	r2, r3
 8013924:	2103      	movs	r1, #3
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f000 f814 	bl	8013954 <icmp_send_response>
}
 801392c:	bf00      	nop
 801392e:	3708      	adds	r7, #8
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	460b      	mov	r3, r1
 801393e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013940:	78fb      	ldrb	r3, [r7, #3]
 8013942:	461a      	mov	r2, r3
 8013944:	210b      	movs	r1, #11
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f000 f804 	bl	8013954 <icmp_send_response>
}
 801394c:	bf00      	nop
 801394e:	3708      	adds	r7, #8
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b08c      	sub	sp, #48	@ 0x30
 8013958:	af04      	add	r7, sp, #16
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	460b      	mov	r3, r1
 801395e:	70fb      	strb	r3, [r7, #3]
 8013960:	4613      	mov	r3, r2
 8013962:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013964:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013968:	2124      	movs	r1, #36	@ 0x24
 801396a:	2022      	movs	r0, #34	@ 0x22
 801396c:	f7f7 f9c0 	bl	800acf0 <pbuf_alloc>
 8013970:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d04c      	beq.n	8013a12 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	895b      	ldrh	r3, [r3, #10]
 801397c:	2b23      	cmp	r3, #35	@ 0x23
 801397e:	d806      	bhi.n	801398e <icmp_send_response+0x3a>
 8013980:	4b26      	ldr	r3, [pc, #152]	@ (8013a1c <icmp_send_response+0xc8>)
 8013982:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013986:	4926      	ldr	r1, [pc, #152]	@ (8013a20 <icmp_send_response+0xcc>)
 8013988:	4826      	ldr	r0, [pc, #152]	@ (8013a24 <icmp_send_response+0xd0>)
 801398a:	f001 fd1b 	bl	80153c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	78fa      	ldrb	r2, [r7, #3]
 801399e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	78ba      	ldrb	r2, [r7, #2]
 80139a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	2200      	movs	r2, #0
 80139aa:	711a      	strb	r2, [r3, #4]
 80139ac:	2200      	movs	r2, #0
 80139ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	2200      	movs	r2, #0
 80139b4:	719a      	strb	r2, [r3, #6]
 80139b6:	2200      	movs	r2, #0
 80139b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	f103 0008 	add.w	r0, r3, #8
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	221c      	movs	r2, #28
 80139c8:	4619      	mov	r1, r3
 80139ca:	f001 fe8c 	bl	80156e6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	68db      	ldr	r3, [r3, #12]
 80139d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80139d4:	f107 030c 	add.w	r3, r7, #12
 80139d8:	4618      	mov	r0, r3
 80139da:	f000 f825 	bl	8013a28 <ip4_route>
 80139de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d011      	beq.n	8013a0a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	2200      	movs	r2, #0
 80139ea:	709a      	strb	r2, [r3, #2]
 80139ec:	2200      	movs	r2, #0
 80139ee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80139f0:	f107 020c 	add.w	r2, r7, #12
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	9302      	str	r3, [sp, #8]
 80139f8:	2301      	movs	r3, #1
 80139fa:	9301      	str	r3, [sp, #4]
 80139fc:	2300      	movs	r3, #0
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	23ff      	movs	r3, #255	@ 0xff
 8013a02:	2100      	movs	r1, #0
 8013a04:	69f8      	ldr	r0, [r7, #28]
 8013a06:	f000 f9cd 	bl	8013da4 <ip4_output_if>
  }
  pbuf_free(q);
 8013a0a:	69f8      	ldr	r0, [r7, #28]
 8013a0c:	f7f7 fc54 	bl	800b2b8 <pbuf_free>
 8013a10:	e000      	b.n	8013a14 <icmp_send_response+0xc0>
    return;
 8013a12:	bf00      	nop
}
 8013a14:	3720      	adds	r7, #32
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	08019688 	.word	0x08019688
 8013a20:	08019754 	.word	0x08019754
 8013a24:	080196f8 	.word	0x080196f8

08013a28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013a28:	b480      	push	{r7}
 8013a2a:	b085      	sub	sp, #20
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013a30:	4b33      	ldr	r3, [pc, #204]	@ (8013b00 <ip4_route+0xd8>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	60fb      	str	r3, [r7, #12]
 8013a36:	e036      	b.n	8013aa6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a3e:	f003 0301 	and.w	r3, r3, #1
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d02b      	beq.n	8013aa0 <ip4_route+0x78>
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a4e:	089b      	lsrs	r3, r3, #2
 8013a50:	f003 0301 	and.w	r3, r3, #1
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d022      	beq.n	8013aa0 <ip4_route+0x78>
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	3304      	adds	r3, #4
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d01d      	beq.n	8013aa0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681a      	ldr	r2, [r3, #0]
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	3304      	adds	r3, #4
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	405a      	eors	r2, r3
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	3308      	adds	r3, #8
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	4013      	ands	r3, r2
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d101      	bne.n	8013a80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	e038      	b.n	8013af2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a86:	f003 0302 	and.w	r3, r3, #2
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d108      	bne.n	8013aa0 <ip4_route+0x78>
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681a      	ldr	r2, [r3, #0]
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	330c      	adds	r3, #12
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d101      	bne.n	8013aa0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	e028      	b.n	8013af2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	60fb      	str	r3, [r7, #12]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d1c5      	bne.n	8013a38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013aac:	4b15      	ldr	r3, [pc, #84]	@ (8013b04 <ip4_route+0xdc>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d01a      	beq.n	8013aea <ip4_route+0xc2>
 8013ab4:	4b13      	ldr	r3, [pc, #76]	@ (8013b04 <ip4_route+0xdc>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013abc:	f003 0301 	and.w	r3, r3, #1
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d012      	beq.n	8013aea <ip4_route+0xc2>
 8013ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8013b04 <ip4_route+0xdc>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013acc:	f003 0304 	and.w	r3, r3, #4
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d00a      	beq.n	8013aea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8013b04 <ip4_route+0xdc>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	3304      	adds	r3, #4
 8013ada:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d004      	beq.n	8013aea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ae8:	d101      	bne.n	8013aee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013aea:	2300      	movs	r3, #0
 8013aec:	e001      	b.n	8013af2 <ip4_route+0xca>
  }

  return netif_default;
 8013aee:	4b05      	ldr	r3, [pc, #20]	@ (8013b04 <ip4_route+0xdc>)
 8013af0:	681b      	ldr	r3, [r3, #0]
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3714      	adds	r7, #20
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr
 8013afe:	bf00      	nop
 8013b00:	2000bf5c 	.word	0x2000bf5c
 8013b04:	2000bf60 	.word	0x2000bf60

08013b08 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b16:	f003 0301 	and.w	r3, r3, #1
 8013b1a:	b2db      	uxtb	r3, r3
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d016      	beq.n	8013b4e <ip4_input_accept+0x46>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	3304      	adds	r3, #4
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d011      	beq.n	8013b4e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8013b58 <ip4_input_accept+0x50>)
 8013b2c:	695a      	ldr	r2, [r3, #20]
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	3304      	adds	r3, #4
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d008      	beq.n	8013b4a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013b38:	4b07      	ldr	r3, [pc, #28]	@ (8013b58 <ip4_input_accept+0x50>)
 8013b3a:	695b      	ldr	r3, [r3, #20]
 8013b3c:	6879      	ldr	r1, [r7, #4]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f000 fa08 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 8013b44:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d001      	beq.n	8013b4e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	e000      	b.n	8013b50 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013b4e:	2300      	movs	r3, #0
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3708      	adds	r7, #8
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	20008e68 	.word	0x20008e68

08013b5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b086      	sub	sp, #24
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	685b      	ldr	r3, [r3, #4]
 8013b6a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	091b      	lsrs	r3, r3, #4
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	2b04      	cmp	r3, #4
 8013b76:	d004      	beq.n	8013b82 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7f7 fb9d 	bl	800b2b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	e107      	b.n	8013d92 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	f003 030f 	and.w	r3, r3, #15
 8013b8a:	b2db      	uxtb	r3, r3
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	885b      	ldrh	r3, [r3, #2]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7f5 ff9f 	bl	8009adc <lwip_htons>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	891b      	ldrh	r3, [r3, #8]
 8013ba6:	89ba      	ldrh	r2, [r7, #12]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d204      	bcs.n	8013bb6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013bac:	89bb      	ldrh	r3, [r7, #12]
 8013bae:	4619      	mov	r1, r3
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f7f7 f9fb 	bl	800afac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	895b      	ldrh	r3, [r3, #10]
 8013bba:	89fa      	ldrh	r2, [r7, #14]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d807      	bhi.n	8013bd0 <ip4_input+0x74>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	891b      	ldrh	r3, [r3, #8]
 8013bc4:	89ba      	ldrh	r2, [r7, #12]
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	d802      	bhi.n	8013bd0 <ip4_input+0x74>
 8013bca:	89fb      	ldrh	r3, [r7, #14]
 8013bcc:	2b13      	cmp	r3, #19
 8013bce:	d804      	bhi.n	8013bda <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f7f7 fb71 	bl	800b2b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	e0db      	b.n	8013d92 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	691b      	ldr	r3, [r3, #16]
 8013bde:	4a6f      	ldr	r2, [pc, #444]	@ (8013d9c <ip4_input+0x240>)
 8013be0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	68db      	ldr	r3, [r3, #12]
 8013be6:	4a6d      	ldr	r2, [pc, #436]	@ (8013d9c <ip4_input+0x240>)
 8013be8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013bea:	4b6c      	ldr	r3, [pc, #432]	@ (8013d9c <ip4_input+0x240>)
 8013bec:	695b      	ldr	r3, [r3, #20]
 8013bee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013bf2:	2be0      	cmp	r3, #224	@ 0xe0
 8013bf4:	d112      	bne.n	8013c1c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013bfc:	f003 0301 	and.w	r3, r3, #1
 8013c00:	b2db      	uxtb	r3, r3
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d007      	beq.n	8013c16 <ip4_input+0xba>
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	3304      	adds	r3, #4
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d002      	beq.n	8013c16 <ip4_input+0xba>
      netif = inp;
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	613b      	str	r3, [r7, #16]
 8013c14:	e02a      	b.n	8013c6c <ip4_input+0x110>
    } else {
      netif = NULL;
 8013c16:	2300      	movs	r3, #0
 8013c18:	613b      	str	r3, [r7, #16]
 8013c1a:	e027      	b.n	8013c6c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013c1c:	6838      	ldr	r0, [r7, #0]
 8013c1e:	f7ff ff73 	bl	8013b08 <ip4_input_accept>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d002      	beq.n	8013c2e <ip4_input+0xd2>
      netif = inp;
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	613b      	str	r3, [r7, #16]
 8013c2c:	e01e      	b.n	8013c6c <ip4_input+0x110>
    } else {
      netif = NULL;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013c32:	4b5a      	ldr	r3, [pc, #360]	@ (8013d9c <ip4_input+0x240>)
 8013c34:	695b      	ldr	r3, [r3, #20]
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	2b7f      	cmp	r3, #127	@ 0x7f
 8013c3a:	d017      	beq.n	8013c6c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013c3c:	4b58      	ldr	r3, [pc, #352]	@ (8013da0 <ip4_input+0x244>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	613b      	str	r3, [r7, #16]
 8013c42:	e00e      	b.n	8013c62 <ip4_input+0x106>
          if (netif == inp) {
 8013c44:	693a      	ldr	r2, [r7, #16]
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d006      	beq.n	8013c5a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013c4c:	6938      	ldr	r0, [r7, #16]
 8013c4e:	f7ff ff5b 	bl	8013b08 <ip4_input_accept>
 8013c52:	4603      	mov	r3, r0
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d108      	bne.n	8013c6a <ip4_input+0x10e>
 8013c58:	e000      	b.n	8013c5c <ip4_input+0x100>
            continue;
 8013c5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	613b      	str	r3, [r7, #16]
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d1ed      	bne.n	8013c44 <ip4_input+0xe8>
 8013c68:	e000      	b.n	8013c6c <ip4_input+0x110>
            break;
 8013c6a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8013d9c <ip4_input+0x240>)
 8013c6e:	691b      	ldr	r3, [r3, #16]
 8013c70:	6839      	ldr	r1, [r7, #0]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f000 f96e 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d105      	bne.n	8013c8a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013c7e:	4b47      	ldr	r3, [pc, #284]	@ (8013d9c <ip4_input+0x240>)
 8013c80:	691b      	ldr	r3, [r3, #16]
 8013c82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c86:	2be0      	cmp	r3, #224	@ 0xe0
 8013c88:	d104      	bne.n	8013c94 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f7f7 fb14 	bl	800b2b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013c90:	2300      	movs	r3, #0
 8013c92:	e07e      	b.n	8013d92 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d104      	bne.n	8013ca4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f7f7 fb0c 	bl	800b2b8 <pbuf_free>
    return ERR_OK;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	e076      	b.n	8013d92 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	88db      	ldrh	r3, [r3, #6]
 8013ca8:	b29b      	uxth	r3, r3
 8013caa:	461a      	mov	r2, r3
 8013cac:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013cb0:	4013      	ands	r3, r2
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d00b      	beq.n	8013cce <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fc92 	bl	80145e0 <ip4_reass>
 8013cbc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <ip4_input+0x16c>
      return ERR_OK;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	e064      	b.n	8013d92 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013cce:	4a33      	ldr	r2, [pc, #204]	@ (8013d9c <ip4_input+0x240>)
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013cd4:	4a31      	ldr	r2, [pc, #196]	@ (8013d9c <ip4_input+0x240>)
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013cda:	4a30      	ldr	r2, [pc, #192]	@ (8013d9c <ip4_input+0x240>)
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	f003 030f 	and.w	r3, r3, #15
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	009b      	lsls	r3, r3, #2
 8013cec:	b2db      	uxtb	r3, r3
 8013cee:	461a      	mov	r2, r3
 8013cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8013d9c <ip4_input+0x240>)
 8013cf2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013cf4:	89fb      	ldrh	r3, [r7, #14]
 8013cf6:	4619      	mov	r1, r3
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7f7 fa57 	bl	800b1ac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	7a5b      	ldrb	r3, [r3, #9]
 8013d02:	2b11      	cmp	r3, #17
 8013d04:	d006      	beq.n	8013d14 <ip4_input+0x1b8>
 8013d06:	2b11      	cmp	r3, #17
 8013d08:	dc13      	bgt.n	8013d32 <ip4_input+0x1d6>
 8013d0a:	2b01      	cmp	r3, #1
 8013d0c:	d00c      	beq.n	8013d28 <ip4_input+0x1cc>
 8013d0e:	2b06      	cmp	r3, #6
 8013d10:	d005      	beq.n	8013d1e <ip4_input+0x1c2>
 8013d12:	e00e      	b.n	8013d32 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013d14:	6839      	ldr	r1, [r7, #0]
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f7fe f902 	bl	8011f20 <udp_input>
        break;
 8013d1c:	e026      	b.n	8013d6c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013d1e:	6839      	ldr	r1, [r7, #0]
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f7f9 fcc1 	bl	800d6a8 <tcp_input>
        break;
 8013d26:	e021      	b.n	8013d6c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013d28:	6839      	ldr	r1, [r7, #0]
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7ff fcee 	bl	801370c <icmp_input>
        break;
 8013d30:	e01c      	b.n	8013d6c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d32:	4b1a      	ldr	r3, [pc, #104]	@ (8013d9c <ip4_input+0x240>)
 8013d34:	695b      	ldr	r3, [r3, #20]
 8013d36:	6939      	ldr	r1, [r7, #16]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f000 f90b 	bl	8013f54 <ip4_addr_isbroadcast_u32>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d10f      	bne.n	8013d64 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d44:	4b15      	ldr	r3, [pc, #84]	@ (8013d9c <ip4_input+0x240>)
 8013d46:	695b      	ldr	r3, [r3, #20]
 8013d48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d4c:	2be0      	cmp	r3, #224	@ 0xe0
 8013d4e:	d009      	beq.n	8013d64 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013d50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013d54:	4619      	mov	r1, r3
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f7f7 fa9b 	bl	800b292 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013d5c:	2102      	movs	r1, #2
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f7ff fdd8 	bl	8013914 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f7f7 faa7 	bl	800b2b8 <pbuf_free>
        break;
 8013d6a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8013d9c <ip4_input+0x240>)
 8013d6e:	2200      	movs	r2, #0
 8013d70:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013d72:	4b0a      	ldr	r3, [pc, #40]	@ (8013d9c <ip4_input+0x240>)
 8013d74:	2200      	movs	r2, #0
 8013d76:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013d78:	4b08      	ldr	r3, [pc, #32]	@ (8013d9c <ip4_input+0x240>)
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013d7e:	4b07      	ldr	r3, [pc, #28]	@ (8013d9c <ip4_input+0x240>)
 8013d80:	2200      	movs	r2, #0
 8013d82:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013d84:	4b05      	ldr	r3, [pc, #20]	@ (8013d9c <ip4_input+0x240>)
 8013d86:	2200      	movs	r2, #0
 8013d88:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013d8a:	4b04      	ldr	r3, [pc, #16]	@ (8013d9c <ip4_input+0x240>)
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013d90:	2300      	movs	r3, #0
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3718      	adds	r7, #24
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	20008e68 	.word	0x20008e68
 8013da0:	2000bf5c 	.word	0x2000bf5c

08013da4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b08a      	sub	sp, #40	@ 0x28
 8013da8:	af04      	add	r7, sp, #16
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	607a      	str	r2, [r7, #4]
 8013db0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d009      	beq.n	8013dd0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d003      	beq.n	8013dca <ip4_output_if+0x26>
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d102      	bne.n	8013dd0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dcc:	3304      	adds	r3, #4
 8013dce:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013dd0:	78fa      	ldrb	r2, [r7, #3]
 8013dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dd4:	9302      	str	r3, [sp, #8]
 8013dd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013dda:	9301      	str	r3, [sp, #4]
 8013ddc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013de0:	9300      	str	r3, [sp, #0]
 8013de2:	4613      	mov	r3, r2
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	6979      	ldr	r1, [r7, #20]
 8013de8:	68f8      	ldr	r0, [r7, #12]
 8013dea:	f000 f805 	bl	8013df8 <ip4_output_if_src>
 8013dee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3718      	adds	r7, #24
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b088      	sub	sp, #32
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	7b9b      	ldrb	r3, [r3, #14]
 8013e0a:	2b01      	cmp	r3, #1
 8013e0c:	d006      	beq.n	8013e1c <ip4_output_if_src+0x24>
 8013e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8013f3c <ip4_output_if_src+0x144>)
 8013e10:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013e14:	494a      	ldr	r1, [pc, #296]	@ (8013f40 <ip4_output_if_src+0x148>)
 8013e16:	484b      	ldr	r0, [pc, #300]	@ (8013f44 <ip4_output_if_src+0x14c>)
 8013e18:	f001 fad4 	bl	80153c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d060      	beq.n	8013ee4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013e22:	2314      	movs	r3, #20
 8013e24:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013e26:	2114      	movs	r1, #20
 8013e28:	68f8      	ldr	r0, [r7, #12]
 8013e2a:	f7f7 f9af 	bl	800b18c <pbuf_add_header>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d002      	beq.n	8013e3a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e34:	f06f 0301 	mvn.w	r3, #1
 8013e38:	e07c      	b.n	8013f34 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	895b      	ldrh	r3, [r3, #10]
 8013e44:	2b13      	cmp	r3, #19
 8013e46:	d806      	bhi.n	8013e56 <ip4_output_if_src+0x5e>
 8013e48:	4b3c      	ldr	r3, [pc, #240]	@ (8013f3c <ip4_output_if_src+0x144>)
 8013e4a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013e4e:	493e      	ldr	r1, [pc, #248]	@ (8013f48 <ip4_output_if_src+0x150>)
 8013e50:	483c      	ldr	r0, [pc, #240]	@ (8013f44 <ip4_output_if_src+0x14c>)
 8013e52:	f001 fab7 	bl	80153c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	78fa      	ldrb	r2, [r7, #3]
 8013e5a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013e62:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681a      	ldr	r2, [r3, #0]
 8013e68:	69fb      	ldr	r3, [r7, #28]
 8013e6a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013e6c:	8b7b      	ldrh	r3, [r7, #26]
 8013e6e:	089b      	lsrs	r3, r3, #2
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e78:	b2da      	uxtb	r2, r3
 8013e7a:	69fb      	ldr	r3, [r7, #28]
 8013e7c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013e7e:	69fb      	ldr	r3, [r7, #28]
 8013e80:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013e84:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	891b      	ldrh	r3, [r3, #8]
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7f5 fe26 	bl	8009adc <lwip_htons>
 8013e90:	4603      	mov	r3, r0
 8013e92:	461a      	mov	r2, r3
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013e98:	69fb      	ldr	r3, [r7, #28]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	719a      	strb	r2, [r3, #6]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8013f4c <ip4_output_if_src+0x154>)
 8013ea4:	881b      	ldrh	r3, [r3, #0]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7f5 fe18 	bl	8009adc <lwip_htons>
 8013eac:	4603      	mov	r3, r0
 8013eae:	461a      	mov	r2, r3
 8013eb0:	69fb      	ldr	r3, [r7, #28]
 8013eb2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013eb4:	4b25      	ldr	r3, [pc, #148]	@ (8013f4c <ip4_output_if_src+0x154>)
 8013eb6:	881b      	ldrh	r3, [r3, #0]
 8013eb8:	3301      	adds	r3, #1
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	4b23      	ldr	r3, [pc, #140]	@ (8013f4c <ip4_output_if_src+0x154>)
 8013ebe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d104      	bne.n	8013ed0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013ec6:	4b22      	ldr	r3, [pc, #136]	@ (8013f50 <ip4_output_if_src+0x158>)
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	60da      	str	r2, [r3, #12]
 8013ece:	e003      	b.n	8013ed8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	2200      	movs	r2, #0
 8013edc:	729a      	strb	r2, [r3, #10]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	72da      	strb	r2, [r3, #11]
 8013ee2:	e00f      	b.n	8013f04 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	895b      	ldrh	r3, [r3, #10]
 8013ee8:	2b13      	cmp	r3, #19
 8013eea:	d802      	bhi.n	8013ef2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013eec:	f06f 0301 	mvn.w	r3, #1
 8013ef0:	e020      	b.n	8013f34 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	685b      	ldr	r3, [r3, #4]
 8013ef6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013ef8:	69fb      	ldr	r3, [r7, #28]
 8013efa:	691b      	ldr	r3, [r3, #16]
 8013efc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013efe:	f107 0314 	add.w	r3, r7, #20
 8013f02:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d00c      	beq.n	8013f26 <ip4_output_if_src+0x12e>
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	891a      	ldrh	r2, [r3, #8]
 8013f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d906      	bls.n	8013f26 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f1c:	68f8      	ldr	r0, [r7, #12]
 8013f1e:	f000 fd53 	bl	80149c8 <ip4_frag>
 8013f22:	4603      	mov	r3, r0
 8013f24:	e006      	b.n	8013f34 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f28:	695b      	ldr	r3, [r3, #20]
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	68f9      	ldr	r1, [r7, #12]
 8013f2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f30:	4798      	blx	r3
 8013f32:	4603      	mov	r3, r0
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3720      	adds	r7, #32
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	08019780 	.word	0x08019780
 8013f40:	080197b4 	.word	0x080197b4
 8013f44:	080197c0 	.word	0x080197c0
 8013f48:	080197e8 	.word	0x080197e8
 8013f4c:	2000c0ba 	.word	0x2000c0ba
 8013f50:	08019c0c 	.word	0x08019c0c

08013f54 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b085      	sub	sp, #20
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f68:	d002      	beq.n	8013f70 <ip4_addr_isbroadcast_u32+0x1c>
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d101      	bne.n	8013f74 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013f70:	2301      	movs	r3, #1
 8013f72:	e02a      	b.n	8013fca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f7a:	f003 0302 	and.w	r3, r3, #2
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d101      	bne.n	8013f86 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013f82:	2300      	movs	r3, #0
 8013f84:	e021      	b.n	8013fca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	3304      	adds	r3, #4
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d101      	bne.n	8013f96 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013f92:	2300      	movs	r3, #0
 8013f94:	e019      	b.n	8013fca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013f96:	68fa      	ldr	r2, [r7, #12]
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	3304      	adds	r3, #4
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	405a      	eors	r2, r3
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	3308      	adds	r3, #8
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	4013      	ands	r3, r2
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d10d      	bne.n	8013fc8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	3308      	adds	r3, #8
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	43da      	mvns	r2, r3
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	3308      	adds	r3, #8
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d101      	bne.n	8013fc8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	e000      	b.n	8013fca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013fc8:	2300      	movs	r3, #0
  }
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3714      	adds	r7, #20
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd4:	4770      	bx	lr
	...

08013fd8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b084      	sub	sp, #16
 8013fdc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013fe2:	4b12      	ldr	r3, [pc, #72]	@ (801402c <ip_reass_tmr+0x54>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013fe8:	e018      	b.n	801401c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	7fdb      	ldrb	r3, [r3, #31]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d00b      	beq.n	801400a <ip_reass_tmr+0x32>
      r->timer--;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	7fdb      	ldrb	r3, [r3, #31]
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	b2da      	uxtb	r2, r3
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	60fb      	str	r3, [r7, #12]
 8014008:	e008      	b.n	801401c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014014:	68b9      	ldr	r1, [r7, #8]
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f000 f80a 	bl	8014030 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d1e3      	bne.n	8013fea <ip_reass_tmr+0x12>
    }
  }
}
 8014022:	bf00      	nop
 8014024:	bf00      	nop
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	2000c0bc 	.word	0x2000c0bc

08014030 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b088      	sub	sp, #32
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801403a:	2300      	movs	r3, #0
 801403c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801403e:	683a      	ldr	r2, [r7, #0]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	429a      	cmp	r2, r3
 8014044:	d105      	bne.n	8014052 <ip_reass_free_complete_datagram+0x22>
 8014046:	4b45      	ldr	r3, [pc, #276]	@ (801415c <ip_reass_free_complete_datagram+0x12c>)
 8014048:	22ab      	movs	r2, #171	@ 0xab
 801404a:	4945      	ldr	r1, [pc, #276]	@ (8014160 <ip_reass_free_complete_datagram+0x130>)
 801404c:	4845      	ldr	r0, [pc, #276]	@ (8014164 <ip_reass_free_complete_datagram+0x134>)
 801404e:	f001 f9b9 	bl	80153c4 <iprintf>
  if (prev != NULL) {
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d00a      	beq.n	801406e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	429a      	cmp	r2, r3
 8014060:	d005      	beq.n	801406e <ip_reass_free_complete_datagram+0x3e>
 8014062:	4b3e      	ldr	r3, [pc, #248]	@ (801415c <ip_reass_free_complete_datagram+0x12c>)
 8014064:	22ad      	movs	r2, #173	@ 0xad
 8014066:	4940      	ldr	r1, [pc, #256]	@ (8014168 <ip_reass_free_complete_datagram+0x138>)
 8014068:	483e      	ldr	r0, [pc, #248]	@ (8014164 <ip_reass_free_complete_datagram+0x134>)
 801406a:	f001 f9ab 	bl	80153c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	889b      	ldrh	r3, [r3, #4]
 801407a:	b29b      	uxth	r3, r3
 801407c:	2b00      	cmp	r3, #0
 801407e:	d12a      	bne.n	80140d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801408e:	69bb      	ldr	r3, [r7, #24]
 8014090:	6858      	ldr	r0, [r3, #4]
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	3308      	adds	r3, #8
 8014096:	2214      	movs	r2, #20
 8014098:	4619      	mov	r1, r3
 801409a:	f001 fb24 	bl	80156e6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801409e:	2101      	movs	r1, #1
 80140a0:	69b8      	ldr	r0, [r7, #24]
 80140a2:	f7ff fc47 	bl	8013934 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80140a6:	69b8      	ldr	r0, [r7, #24]
 80140a8:	f7f7 f994 	bl	800b3d4 <pbuf_clen>
 80140ac:	4603      	mov	r3, r0
 80140ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80140b0:	8bfa      	ldrh	r2, [r7, #30]
 80140b2:	8a7b      	ldrh	r3, [r7, #18]
 80140b4:	4413      	add	r3, r2
 80140b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140ba:	db05      	blt.n	80140c8 <ip_reass_free_complete_datagram+0x98>
 80140bc:	4b27      	ldr	r3, [pc, #156]	@ (801415c <ip_reass_free_complete_datagram+0x12c>)
 80140be:	22bc      	movs	r2, #188	@ 0xbc
 80140c0:	492a      	ldr	r1, [pc, #168]	@ (801416c <ip_reass_free_complete_datagram+0x13c>)
 80140c2:	4828      	ldr	r0, [pc, #160]	@ (8014164 <ip_reass_free_complete_datagram+0x134>)
 80140c4:	f001 f97e 	bl	80153c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80140c8:	8bfa      	ldrh	r2, [r7, #30]
 80140ca:	8a7b      	ldrh	r3, [r7, #18]
 80140cc:	4413      	add	r3, r2
 80140ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80140d0:	69b8      	ldr	r0, [r7, #24]
 80140d2:	f7f7 f8f1 	bl	800b2b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	685b      	ldr	r3, [r3, #4]
 80140da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80140dc:	e01f      	b.n	801411e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	f7f7 f970 	bl	800b3d4 <pbuf_clen>
 80140f4:	4603      	mov	r3, r0
 80140f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80140f8:	8bfa      	ldrh	r2, [r7, #30]
 80140fa:	8a7b      	ldrh	r3, [r7, #18]
 80140fc:	4413      	add	r3, r2
 80140fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014102:	db05      	blt.n	8014110 <ip_reass_free_complete_datagram+0xe0>
 8014104:	4b15      	ldr	r3, [pc, #84]	@ (801415c <ip_reass_free_complete_datagram+0x12c>)
 8014106:	22cc      	movs	r2, #204	@ 0xcc
 8014108:	4918      	ldr	r1, [pc, #96]	@ (801416c <ip_reass_free_complete_datagram+0x13c>)
 801410a:	4816      	ldr	r0, [pc, #88]	@ (8014164 <ip_reass_free_complete_datagram+0x134>)
 801410c:	f001 f95a 	bl	80153c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014110:	8bfa      	ldrh	r2, [r7, #30]
 8014112:	8a7b      	ldrh	r3, [r7, #18]
 8014114:	4413      	add	r3, r2
 8014116:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014118:	68f8      	ldr	r0, [r7, #12]
 801411a:	f7f7 f8cd 	bl	800b2b8 <pbuf_free>
  while (p != NULL) {
 801411e:	69bb      	ldr	r3, [r7, #24]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d1dc      	bne.n	80140de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 f8c2 	bl	80142b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801412c:	4b10      	ldr	r3, [pc, #64]	@ (8014170 <ip_reass_free_complete_datagram+0x140>)
 801412e:	881b      	ldrh	r3, [r3, #0]
 8014130:	8bfa      	ldrh	r2, [r7, #30]
 8014132:	429a      	cmp	r2, r3
 8014134:	d905      	bls.n	8014142 <ip_reass_free_complete_datagram+0x112>
 8014136:	4b09      	ldr	r3, [pc, #36]	@ (801415c <ip_reass_free_complete_datagram+0x12c>)
 8014138:	22d2      	movs	r2, #210	@ 0xd2
 801413a:	490e      	ldr	r1, [pc, #56]	@ (8014174 <ip_reass_free_complete_datagram+0x144>)
 801413c:	4809      	ldr	r0, [pc, #36]	@ (8014164 <ip_reass_free_complete_datagram+0x134>)
 801413e:	f001 f941 	bl	80153c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014142:	4b0b      	ldr	r3, [pc, #44]	@ (8014170 <ip_reass_free_complete_datagram+0x140>)
 8014144:	881a      	ldrh	r2, [r3, #0]
 8014146:	8bfb      	ldrh	r3, [r7, #30]
 8014148:	1ad3      	subs	r3, r2, r3
 801414a:	b29a      	uxth	r2, r3
 801414c:	4b08      	ldr	r3, [pc, #32]	@ (8014170 <ip_reass_free_complete_datagram+0x140>)
 801414e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014150:	8bfb      	ldrh	r3, [r7, #30]
}
 8014152:	4618      	mov	r0, r3
 8014154:	3720      	adds	r7, #32
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
 801415a:	bf00      	nop
 801415c:	08019818 	.word	0x08019818
 8014160:	08019854 	.word	0x08019854
 8014164:	08019860 	.word	0x08019860
 8014168:	08019888 	.word	0x08019888
 801416c:	0801989c 	.word	0x0801989c
 8014170:	2000c0c0 	.word	0x2000c0c0
 8014174:	080198bc 	.word	0x080198bc

08014178 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b08a      	sub	sp, #40	@ 0x28
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014182:	2300      	movs	r3, #0
 8014184:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014186:	2300      	movs	r3, #0
 8014188:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801418a:	2300      	movs	r3, #0
 801418c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801418e:	2300      	movs	r3, #0
 8014190:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014192:	2300      	movs	r3, #0
 8014194:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014196:	4b28      	ldr	r3, [pc, #160]	@ (8014238 <ip_reass_remove_oldest_datagram+0xc0>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801419c:	e030      	b.n	8014200 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141a0:	695a      	ldr	r2, [r3, #20]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	68db      	ldr	r3, [r3, #12]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d10c      	bne.n	80141c4 <ip_reass_remove_oldest_datagram+0x4c>
 80141aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ac:	699a      	ldr	r2, [r3, #24]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	691b      	ldr	r3, [r3, #16]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d106      	bne.n	80141c4 <ip_reass_remove_oldest_datagram+0x4c>
 80141b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b8:	899a      	ldrh	r2, [r3, #12]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	889b      	ldrh	r3, [r3, #4]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d014      	beq.n	80141ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80141c4:	693b      	ldr	r3, [r7, #16]
 80141c6:	3301      	adds	r3, #1
 80141c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80141ca:	6a3b      	ldr	r3, [r7, #32]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d104      	bne.n	80141da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80141d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	61bb      	str	r3, [r7, #24]
 80141d8:	e009      	b.n	80141ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80141da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141dc:	7fda      	ldrb	r2, [r3, #31]
 80141de:	6a3b      	ldr	r3, [r7, #32]
 80141e0:	7fdb      	ldrb	r3, [r3, #31]
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d803      	bhi.n	80141ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80141e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80141ea:	69fb      	ldr	r3, [r7, #28]
 80141ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80141ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d001      	beq.n	80141fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80141f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80141fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014202:	2b00      	cmp	r3, #0
 8014204:	d1cb      	bne.n	801419e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014206:	6a3b      	ldr	r3, [r7, #32]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d008      	beq.n	801421e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801420c:	69b9      	ldr	r1, [r7, #24]
 801420e:	6a38      	ldr	r0, [r7, #32]
 8014210:	f7ff ff0e 	bl	8014030 <ip_reass_free_complete_datagram>
 8014214:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014216:	697a      	ldr	r2, [r7, #20]
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	4413      	add	r3, r2
 801421c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801421e:	697a      	ldr	r2, [r7, #20]
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	429a      	cmp	r2, r3
 8014224:	da02      	bge.n	801422c <ip_reass_remove_oldest_datagram+0xb4>
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	2b01      	cmp	r3, #1
 801422a:	dcac      	bgt.n	8014186 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801422c:	697b      	ldr	r3, [r7, #20]
}
 801422e:	4618      	mov	r0, r3
 8014230:	3728      	adds	r7, #40	@ 0x28
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	2000c0bc 	.word	0x2000c0bc

0801423c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014246:	2004      	movs	r0, #4
 8014248:	f7f6 f91c 	bl	800a484 <memp_malloc>
 801424c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d110      	bne.n	8014276 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014254:	6839      	ldr	r1, [r7, #0]
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f7ff ff8e 	bl	8014178 <ip_reass_remove_oldest_datagram>
 801425c:	4602      	mov	r2, r0
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	4293      	cmp	r3, r2
 8014262:	dc03      	bgt.n	801426c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014264:	2004      	movs	r0, #4
 8014266:	f7f6 f90d 	bl	800a484 <memp_malloc>
 801426a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d101      	bne.n	8014276 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014272:	2300      	movs	r3, #0
 8014274:	e016      	b.n	80142a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014276:	2220      	movs	r2, #32
 8014278:	2100      	movs	r1, #0
 801427a:	68f8      	ldr	r0, [r7, #12]
 801427c:	f001 f955 	bl	801552a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	220f      	movs	r2, #15
 8014284:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014286:	4b09      	ldr	r3, [pc, #36]	@ (80142ac <ip_reass_enqueue_new_datagram+0x70>)
 8014288:	681a      	ldr	r2, [r3, #0]
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801428e:	4a07      	ldr	r2, [pc, #28]	@ (80142ac <ip_reass_enqueue_new_datagram+0x70>)
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	3308      	adds	r3, #8
 8014298:	2214      	movs	r2, #20
 801429a:	6879      	ldr	r1, [r7, #4]
 801429c:	4618      	mov	r0, r3
 801429e:	f001 fa22 	bl	80156e6 <memcpy>
  return ipr;
 80142a2:	68fb      	ldr	r3, [r7, #12]
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	2000c0bc 	.word	0x2000c0bc

080142b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80142ba:	4b10      	ldr	r3, [pc, #64]	@ (80142fc <ip_reass_dequeue_datagram+0x4c>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d104      	bne.n	80142ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	4a0c      	ldr	r2, [pc, #48]	@ (80142fc <ip_reass_dequeue_datagram+0x4c>)
 80142ca:	6013      	str	r3, [r2, #0]
 80142cc:	e00d      	b.n	80142ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d106      	bne.n	80142e2 <ip_reass_dequeue_datagram+0x32>
 80142d4:	4b0a      	ldr	r3, [pc, #40]	@ (8014300 <ip_reass_dequeue_datagram+0x50>)
 80142d6:	f240 1245 	movw	r2, #325	@ 0x145
 80142da:	490a      	ldr	r1, [pc, #40]	@ (8014304 <ip_reass_dequeue_datagram+0x54>)
 80142dc:	480a      	ldr	r0, [pc, #40]	@ (8014308 <ip_reass_dequeue_datagram+0x58>)
 80142de:	f001 f871 	bl	80153c4 <iprintf>
    prev->next = ipr->next;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681a      	ldr	r2, [r3, #0]
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80142ea:	6879      	ldr	r1, [r7, #4]
 80142ec:	2004      	movs	r0, #4
 80142ee:	f7f6 f93f 	bl	800a570 <memp_free>
}
 80142f2:	bf00      	nop
 80142f4:	3708      	adds	r7, #8
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	2000c0bc 	.word	0x2000c0bc
 8014300:	08019818 	.word	0x08019818
 8014304:	080198e0 	.word	0x080198e0
 8014308:	08019860 	.word	0x08019860

0801430c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b08c      	sub	sp, #48	@ 0x30
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014318:	2300      	movs	r3, #0
 801431a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801431c:	2301      	movs	r3, #1
 801431e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	885b      	ldrh	r3, [r3, #2]
 801432a:	b29b      	uxth	r3, r3
 801432c:	4618      	mov	r0, r3
 801432e:	f7f5 fbd5 	bl	8009adc <lwip_htons>
 8014332:	4603      	mov	r3, r0
 8014334:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014336:	69fb      	ldr	r3, [r7, #28]
 8014338:	781b      	ldrb	r3, [r3, #0]
 801433a:	f003 030f 	and.w	r3, r3, #15
 801433e:	b2db      	uxtb	r3, r3
 8014340:	009b      	lsls	r3, r3, #2
 8014342:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014344:	7e7b      	ldrb	r3, [r7, #25]
 8014346:	b29b      	uxth	r3, r3
 8014348:	8b7a      	ldrh	r2, [r7, #26]
 801434a:	429a      	cmp	r2, r3
 801434c:	d202      	bcs.n	8014354 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801434e:	f04f 33ff 	mov.w	r3, #4294967295
 8014352:	e135      	b.n	80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014354:	7e7b      	ldrb	r3, [r7, #25]
 8014356:	b29b      	uxth	r3, r3
 8014358:	8b7a      	ldrh	r2, [r7, #26]
 801435a:	1ad3      	subs	r3, r2, r3
 801435c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	88db      	ldrh	r3, [r3, #6]
 8014362:	b29b      	uxth	r3, r3
 8014364:	4618      	mov	r0, r3
 8014366:	f7f5 fbb9 	bl	8009adc <lwip_htons>
 801436a:	4603      	mov	r3, r0
 801436c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014370:	b29b      	uxth	r3, r3
 8014372:	00db      	lsls	r3, r3, #3
 8014374:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801437e:	2200      	movs	r2, #0
 8014380:	701a      	strb	r2, [r3, #0]
 8014382:	2200      	movs	r2, #0
 8014384:	705a      	strb	r2, [r3, #1]
 8014386:	2200      	movs	r2, #0
 8014388:	709a      	strb	r2, [r3, #2]
 801438a:	2200      	movs	r2, #0
 801438c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801438e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014390:	8afa      	ldrh	r2, [r7, #22]
 8014392:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014394:	8afa      	ldrh	r2, [r7, #22]
 8014396:	8b7b      	ldrh	r3, [r7, #26]
 8014398:	4413      	add	r3, r2
 801439a:	b29a      	uxth	r2, r3
 801439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801439e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80143a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143a2:	88db      	ldrh	r3, [r3, #6]
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	8afa      	ldrh	r2, [r7, #22]
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d902      	bls.n	80143b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143ac:	f04f 33ff 	mov.w	r3, #4294967295
 80143b0:	e106      	b.n	80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80143b8:	e068      	b.n	801448c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80143ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80143c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c2:	889b      	ldrh	r3, [r3, #4]
 80143c4:	b29a      	uxth	r2, r3
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	889b      	ldrh	r3, [r3, #4]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d235      	bcs.n	801443c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80143d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80143d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d020      	beq.n	801441e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80143dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143de:	889b      	ldrh	r3, [r3, #4]
 80143e0:	b29a      	uxth	r2, r3
 80143e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e4:	88db      	ldrh	r3, [r3, #6]
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d307      	bcc.n	80143fc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80143ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ee:	88db      	ldrh	r3, [r3, #6]
 80143f0:	b29a      	uxth	r2, r3
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	889b      	ldrh	r3, [r3, #4]
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d902      	bls.n	8014402 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014400:	e0de      	b.n	80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014404:	68ba      	ldr	r2, [r7, #8]
 8014406:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801440a:	88db      	ldrh	r3, [r3, #6]
 801440c:	b29a      	uxth	r2, r3
 801440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014410:	889b      	ldrh	r3, [r3, #4]
 8014412:	b29b      	uxth	r3, r3
 8014414:	429a      	cmp	r2, r3
 8014416:	d03d      	beq.n	8014494 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014418:	2300      	movs	r3, #0
 801441a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801441c:	e03a      	b.n	8014494 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014420:	88db      	ldrh	r3, [r3, #6]
 8014422:	b29a      	uxth	r2, r3
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	889b      	ldrh	r3, [r3, #4]
 8014428:	b29b      	uxth	r3, r3
 801442a:	429a      	cmp	r2, r3
 801442c:	d902      	bls.n	8014434 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801442e:	f04f 33ff 	mov.w	r3, #4294967295
 8014432:	e0c5      	b.n	80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	68ba      	ldr	r2, [r7, #8]
 8014438:	605a      	str	r2, [r3, #4]
      break;
 801443a:	e02b      	b.n	8014494 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801443c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801443e:	889b      	ldrh	r3, [r3, #4]
 8014440:	b29a      	uxth	r2, r3
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	889b      	ldrh	r3, [r3, #4]
 8014446:	b29b      	uxth	r3, r3
 8014448:	429a      	cmp	r2, r3
 801444a:	d102      	bne.n	8014452 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801444c:	f04f 33ff 	mov.w	r3, #4294967295
 8014450:	e0b6      	b.n	80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014454:	889b      	ldrh	r3, [r3, #4]
 8014456:	b29a      	uxth	r2, r3
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	88db      	ldrh	r3, [r3, #6]
 801445c:	b29b      	uxth	r3, r3
 801445e:	429a      	cmp	r2, r3
 8014460:	d202      	bcs.n	8014468 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014462:	f04f 33ff 	mov.w	r3, #4294967295
 8014466:	e0ab      	b.n	80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801446a:	2b00      	cmp	r3, #0
 801446c:	d009      	beq.n	8014482 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014470:	88db      	ldrh	r3, [r3, #6]
 8014472:	b29a      	uxth	r2, r3
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	889b      	ldrh	r3, [r3, #4]
 8014478:	b29b      	uxth	r3, r3
 801447a:	429a      	cmp	r2, r3
 801447c:	d001      	beq.n	8014482 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801448e:	2b00      	cmp	r3, #0
 8014490:	d193      	bne.n	80143ba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014492:	e000      	b.n	8014496 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014494:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014498:	2b00      	cmp	r3, #0
 801449a:	d12d      	bne.n	80144f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d01c      	beq.n	80144dc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80144a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144a4:	88db      	ldrh	r3, [r3, #6]
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144aa:	889b      	ldrh	r3, [r3, #4]
 80144ac:	b29b      	uxth	r3, r3
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d906      	bls.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80144b2:	4b45      	ldr	r3, [pc, #276]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144b4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80144b8:	4944      	ldr	r1, [pc, #272]	@ (80145cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80144ba:	4845      	ldr	r0, [pc, #276]	@ (80145d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144bc:	f000 ff82 	bl	80153c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80144c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144c2:	68ba      	ldr	r2, [r7, #8]
 80144c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80144c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144c8:	88db      	ldrh	r3, [r3, #6]
 80144ca:	b29a      	uxth	r2, r3
 80144cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ce:	889b      	ldrh	r3, [r3, #4]
 80144d0:	b29b      	uxth	r3, r3
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d010      	beq.n	80144f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80144d6:	2300      	movs	r3, #0
 80144d8:	623b      	str	r3, [r7, #32]
 80144da:	e00d      	b.n	80144f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d006      	beq.n	80144f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80144e4:	4b38      	ldr	r3, [pc, #224]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144e6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80144ea:	493a      	ldr	r1, [pc, #232]	@ (80145d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80144ec:	4838      	ldr	r0, [pc, #224]	@ (80145d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144ee:	f000 ff69 	bl	80153c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	68ba      	ldr	r2, [r7, #8]
 80144f6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d105      	bne.n	801450a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	7f9b      	ldrb	r3, [r3, #30]
 8014502:	f003 0301 	and.w	r3, r3, #1
 8014506:	2b00      	cmp	r3, #0
 8014508:	d059      	beq.n	80145be <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801450a:	6a3b      	ldr	r3, [r7, #32]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d04f      	beq.n	80145b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d006      	beq.n	8014526 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	889b      	ldrh	r3, [r3, #4]
 8014520:	b29b      	uxth	r3, r3
 8014522:	2b00      	cmp	r3, #0
 8014524:	d002      	beq.n	801452c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014526:	2300      	movs	r3, #0
 8014528:	623b      	str	r3, [r7, #32]
 801452a:	e041      	b.n	80145b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801452e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014536:	e012      	b.n	801455e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801453e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014540:	88db      	ldrh	r3, [r3, #6]
 8014542:	b29a      	uxth	r2, r3
 8014544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014546:	889b      	ldrh	r3, [r3, #4]
 8014548:	b29b      	uxth	r3, r3
 801454a:	429a      	cmp	r2, r3
 801454c:	d002      	beq.n	8014554 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801454e:	2300      	movs	r3, #0
 8014550:	623b      	str	r3, [r7, #32]
            break;
 8014552:	e007      	b.n	8014564 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014556:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014560:	2b00      	cmp	r3, #0
 8014562:	d1e9      	bne.n	8014538 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014564:	6a3b      	ldr	r3, [r7, #32]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d022      	beq.n	80145b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d106      	bne.n	8014580 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014572:	4b15      	ldr	r3, [pc, #84]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014574:	f240 12df 	movw	r2, #479	@ 0x1df
 8014578:	4917      	ldr	r1, [pc, #92]	@ (80145d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801457a:	4815      	ldr	r0, [pc, #84]	@ (80145d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801457c:	f000 ff22 	bl	80153c4 <iprintf>
          LWIP_ASSERT("sanity check",
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	685b      	ldr	r3, [r3, #4]
 8014584:	685b      	ldr	r3, [r3, #4]
 8014586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014588:	429a      	cmp	r2, r3
 801458a:	d106      	bne.n	801459a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801458c:	4b0e      	ldr	r3, [pc, #56]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801458e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8014592:	4911      	ldr	r1, [pc, #68]	@ (80145d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014594:	480e      	ldr	r0, [pc, #56]	@ (80145d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014596:	f000 ff15 	bl	80153c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801459a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d006      	beq.n	80145b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80145a2:	4b09      	ldr	r3, [pc, #36]	@ (80145c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80145a4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80145a8:	490c      	ldr	r1, [pc, #48]	@ (80145dc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80145aa:	4809      	ldr	r0, [pc, #36]	@ (80145d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80145ac:	f000 ff0a 	bl	80153c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80145b0:	6a3b      	ldr	r3, [r7, #32]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	bf14      	ite	ne
 80145b6:	2301      	movne	r3, #1
 80145b8:	2300      	moveq	r3, #0
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	e000      	b.n	80145c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80145be:	2300      	movs	r3, #0
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	3730      	adds	r7, #48	@ 0x30
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	08019818 	.word	0x08019818
 80145cc:	080198fc 	.word	0x080198fc
 80145d0:	08019860 	.word	0x08019860
 80145d4:	0801991c 	.word	0x0801991c
 80145d8:	08019954 	.word	0x08019954
 80145dc:	08019964 	.word	0x08019964

080145e0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b08e      	sub	sp, #56	@ 0x38
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	685b      	ldr	r3, [r3, #4]
 80145ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80145ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	f003 030f 	and.w	r3, r3, #15
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	b2db      	uxtb	r3, r3
 80145fc:	2b14      	cmp	r3, #20
 80145fe:	f040 8171 	bne.w	80148e4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014604:	88db      	ldrh	r3, [r3, #6]
 8014606:	b29b      	uxth	r3, r3
 8014608:	4618      	mov	r0, r3
 801460a:	f7f5 fa67 	bl	8009adc <lwip_htons>
 801460e:	4603      	mov	r3, r0
 8014610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014614:	b29b      	uxth	r3, r3
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801461c:	885b      	ldrh	r3, [r3, #2]
 801461e:	b29b      	uxth	r3, r3
 8014620:	4618      	mov	r0, r3
 8014622:	f7f5 fa5b 	bl	8009adc <lwip_htons>
 8014626:	4603      	mov	r3, r0
 8014628:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	f003 030f 	and.w	r3, r3, #15
 8014632:	b2db      	uxtb	r3, r3
 8014634:	009b      	lsls	r3, r3, #2
 8014636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801463a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801463e:	b29b      	uxth	r3, r3
 8014640:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014642:	429a      	cmp	r2, r3
 8014644:	f0c0 8150 	bcc.w	80148e8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014648:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801464c:	b29b      	uxth	r3, r3
 801464e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014650:	1ad3      	subs	r3, r2, r3
 8014652:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7f6 febd 	bl	800b3d4 <pbuf_clen>
 801465a:	4603      	mov	r3, r0
 801465c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801465e:	4b8c      	ldr	r3, [pc, #560]	@ (8014890 <ip4_reass+0x2b0>)
 8014660:	881b      	ldrh	r3, [r3, #0]
 8014662:	461a      	mov	r2, r3
 8014664:	8c3b      	ldrh	r3, [r7, #32]
 8014666:	4413      	add	r3, r2
 8014668:	2b0a      	cmp	r3, #10
 801466a:	dd10      	ble.n	801468e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801466c:	8c3b      	ldrh	r3, [r7, #32]
 801466e:	4619      	mov	r1, r3
 8014670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014672:	f7ff fd81 	bl	8014178 <ip_reass_remove_oldest_datagram>
 8014676:	4603      	mov	r3, r0
 8014678:	2b00      	cmp	r3, #0
 801467a:	f000 8137 	beq.w	80148ec <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801467e:	4b84      	ldr	r3, [pc, #528]	@ (8014890 <ip4_reass+0x2b0>)
 8014680:	881b      	ldrh	r3, [r3, #0]
 8014682:	461a      	mov	r2, r3
 8014684:	8c3b      	ldrh	r3, [r7, #32]
 8014686:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014688:	2b0a      	cmp	r3, #10
 801468a:	f300 812f 	bgt.w	80148ec <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801468e:	4b81      	ldr	r3, [pc, #516]	@ (8014894 <ip4_reass+0x2b4>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	633b      	str	r3, [r7, #48]	@ 0x30
 8014694:	e015      	b.n	80146c2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014698:	695a      	ldr	r2, [r3, #20]
 801469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d10c      	bne.n	80146bc <ip4_reass+0xdc>
 80146a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a4:	699a      	ldr	r2, [r3, #24]
 80146a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146a8:	691b      	ldr	r3, [r3, #16]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d106      	bne.n	80146bc <ip4_reass+0xdc>
 80146ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146b0:	899a      	ldrh	r2, [r3, #12]
 80146b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146b4:	889b      	ldrh	r3, [r3, #4]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d006      	beq.n	80146ca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80146bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80146c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d1e6      	bne.n	8014696 <ip4_reass+0xb6>
 80146c8:	e000      	b.n	80146cc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80146ca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80146cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d109      	bne.n	80146e6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80146d2:	8c3b      	ldrh	r3, [r7, #32]
 80146d4:	4619      	mov	r1, r3
 80146d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146d8:	f7ff fdb0 	bl	801423c <ip_reass_enqueue_new_datagram>
 80146dc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80146de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d11c      	bne.n	801471e <ip4_reass+0x13e>
      goto nullreturn;
 80146e4:	e105      	b.n	80148f2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80146e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146e8:	88db      	ldrh	r3, [r3, #6]
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7f5 f9f5 	bl	8009adc <lwip_htons>
 80146f2:	4603      	mov	r3, r0
 80146f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d110      	bne.n	801471e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80146fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146fe:	89db      	ldrh	r3, [r3, #14]
 8014700:	4618      	mov	r0, r3
 8014702:	f7f5 f9eb 	bl	8009adc <lwip_htons>
 8014706:	4603      	mov	r3, r0
 8014708:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801470c:	2b00      	cmp	r3, #0
 801470e:	d006      	beq.n	801471e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014712:	3308      	adds	r3, #8
 8014714:	2214      	movs	r2, #20
 8014716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014718:	4618      	mov	r0, r3
 801471a:	f000 ffe4 	bl	80156e6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014720:	88db      	ldrh	r3, [r3, #6]
 8014722:	b29b      	uxth	r3, r3
 8014724:	f003 0320 	and.w	r3, r3, #32
 8014728:	2b00      	cmp	r3, #0
 801472a:	bf0c      	ite	eq
 801472c:	2301      	moveq	r3, #1
 801472e:	2300      	movne	r3, #0
 8014730:	b2db      	uxtb	r3, r3
 8014732:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d00e      	beq.n	8014758 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801473a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801473c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801473e:	4413      	add	r3, r2
 8014740:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014742:	8b7a      	ldrh	r2, [r7, #26]
 8014744:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014746:	429a      	cmp	r2, r3
 8014748:	f0c0 80a0 	bcc.w	801488c <ip4_reass+0x2ac>
 801474c:	8b7b      	ldrh	r3, [r7, #26]
 801474e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014752:	4293      	cmp	r3, r2
 8014754:	f200 809a 	bhi.w	801488c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014758:	69fa      	ldr	r2, [r7, #28]
 801475a:	6879      	ldr	r1, [r7, #4]
 801475c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801475e:	f7ff fdd5 	bl	801430c <ip_reass_chain_frag_into_datagram_and_validate>
 8014762:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801476a:	f000 809b 	beq.w	80148a4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801476e:	4b48      	ldr	r3, [pc, #288]	@ (8014890 <ip4_reass+0x2b0>)
 8014770:	881a      	ldrh	r2, [r3, #0]
 8014772:	8c3b      	ldrh	r3, [r7, #32]
 8014774:	4413      	add	r3, r2
 8014776:	b29a      	uxth	r2, r3
 8014778:	4b45      	ldr	r3, [pc, #276]	@ (8014890 <ip4_reass+0x2b0>)
 801477a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d00d      	beq.n	801479e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014782:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014784:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014786:	4413      	add	r3, r2
 8014788:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801478c:	8a7a      	ldrh	r2, [r7, #18]
 801478e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014792:	7f9b      	ldrb	r3, [r3, #30]
 8014794:	f043 0301 	orr.w	r3, r3, #1
 8014798:	b2da      	uxtb	r2, r3
 801479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801479c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	2b01      	cmp	r3, #1
 80147a2:	d171      	bne.n	8014888 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80147a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147a6:	8b9b      	ldrh	r3, [r3, #28]
 80147a8:	3314      	adds	r3, #20
 80147aa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80147ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	685b      	ldr	r3, [r3, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80147b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b8:	685b      	ldr	r3, [r3, #4]
 80147ba:	685b      	ldr	r3, [r3, #4]
 80147bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80147be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147c0:	3308      	adds	r3, #8
 80147c2:	2214      	movs	r2, #20
 80147c4:	4619      	mov	r1, r3
 80147c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80147c8:	f000 ff8d 	bl	80156e6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80147cc:	8a3b      	ldrh	r3, [r7, #16]
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7f5 f984 	bl	8009adc <lwip_htons>
 80147d4:	4603      	mov	r3, r0
 80147d6:	461a      	mov	r2, r3
 80147d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147da:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80147dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147de:	2200      	movs	r2, #0
 80147e0:	719a      	strb	r2, [r3, #6]
 80147e2:	2200      	movs	r2, #0
 80147e4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80147e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147e8:	2200      	movs	r2, #0
 80147ea:	729a      	strb	r2, [r3, #10]
 80147ec:	2200      	movs	r2, #0
 80147ee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80147f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80147f6:	e00d      	b.n	8014814 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80147f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80147fe:	2114      	movs	r1, #20
 8014800:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014802:	f7f6 fcd3 	bl	800b1ac <pbuf_remove_header>
      pbuf_cat(p, r);
 8014806:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f7f6 fe23 	bl	800b454 <pbuf_cat>
      r = iprh->next_pbuf;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8014814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014816:	2b00      	cmp	r3, #0
 8014818:	d1ee      	bne.n	80147f8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801481a:	4b1e      	ldr	r3, [pc, #120]	@ (8014894 <ip4_reass+0x2b4>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014820:	429a      	cmp	r2, r3
 8014822:	d102      	bne.n	801482a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014824:	2300      	movs	r3, #0
 8014826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014828:	e010      	b.n	801484c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801482a:	4b1a      	ldr	r3, [pc, #104]	@ (8014894 <ip4_reass+0x2b4>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014830:	e007      	b.n	8014842 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014838:	429a      	cmp	r2, r3
 801483a:	d006      	beq.n	801484a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014844:	2b00      	cmp	r3, #0
 8014846:	d1f4      	bne.n	8014832 <ip4_reass+0x252>
 8014848:	e000      	b.n	801484c <ip4_reass+0x26c>
          break;
 801484a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801484c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801484e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014850:	f7ff fd2e 	bl	80142b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f7f6 fdbd 	bl	800b3d4 <pbuf_clen>
 801485a:	4603      	mov	r3, r0
 801485c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801485e:	4b0c      	ldr	r3, [pc, #48]	@ (8014890 <ip4_reass+0x2b0>)
 8014860:	881b      	ldrh	r3, [r3, #0]
 8014862:	8c3a      	ldrh	r2, [r7, #32]
 8014864:	429a      	cmp	r2, r3
 8014866:	d906      	bls.n	8014876 <ip4_reass+0x296>
 8014868:	4b0b      	ldr	r3, [pc, #44]	@ (8014898 <ip4_reass+0x2b8>)
 801486a:	f240 229b 	movw	r2, #667	@ 0x29b
 801486e:	490b      	ldr	r1, [pc, #44]	@ (801489c <ip4_reass+0x2bc>)
 8014870:	480b      	ldr	r0, [pc, #44]	@ (80148a0 <ip4_reass+0x2c0>)
 8014872:	f000 fda7 	bl	80153c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014876:	4b06      	ldr	r3, [pc, #24]	@ (8014890 <ip4_reass+0x2b0>)
 8014878:	881a      	ldrh	r2, [r3, #0]
 801487a:	8c3b      	ldrh	r3, [r7, #32]
 801487c:	1ad3      	subs	r3, r2, r3
 801487e:	b29a      	uxth	r2, r3
 8014880:	4b03      	ldr	r3, [pc, #12]	@ (8014890 <ip4_reass+0x2b0>)
 8014882:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	e038      	b.n	80148fa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014888:	2300      	movs	r3, #0
 801488a:	e036      	b.n	80148fa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801488c:	bf00      	nop
 801488e:	e00a      	b.n	80148a6 <ip4_reass+0x2c6>
 8014890:	2000c0c0 	.word	0x2000c0c0
 8014894:	2000c0bc 	.word	0x2000c0bc
 8014898:	08019818 	.word	0x08019818
 801489c:	08019988 	.word	0x08019988
 80148a0:	08019860 	.word	0x08019860
    goto nullreturn_ipr;
 80148a4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80148a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d106      	bne.n	80148ba <ip4_reass+0x2da>
 80148ac:	4b15      	ldr	r3, [pc, #84]	@ (8014904 <ip4_reass+0x324>)
 80148ae:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80148b2:	4915      	ldr	r1, [pc, #84]	@ (8014908 <ip4_reass+0x328>)
 80148b4:	4815      	ldr	r0, [pc, #84]	@ (801490c <ip4_reass+0x32c>)
 80148b6:	f000 fd85 	bl	80153c4 <iprintf>
  if (ipr->p == NULL) {
 80148ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d116      	bne.n	80148f0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80148c2:	4b13      	ldr	r3, [pc, #76]	@ (8014910 <ip4_reass+0x330>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d006      	beq.n	80148da <ip4_reass+0x2fa>
 80148cc:	4b0d      	ldr	r3, [pc, #52]	@ (8014904 <ip4_reass+0x324>)
 80148ce:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80148d2:	4910      	ldr	r1, [pc, #64]	@ (8014914 <ip4_reass+0x334>)
 80148d4:	480d      	ldr	r0, [pc, #52]	@ (801490c <ip4_reass+0x32c>)
 80148d6:	f000 fd75 	bl	80153c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80148da:	2100      	movs	r1, #0
 80148dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80148de:	f7ff fce7 	bl	80142b0 <ip_reass_dequeue_datagram>
 80148e2:	e006      	b.n	80148f2 <ip4_reass+0x312>
    goto nullreturn;
 80148e4:	bf00      	nop
 80148e6:	e004      	b.n	80148f2 <ip4_reass+0x312>
    goto nullreturn;
 80148e8:	bf00      	nop
 80148ea:	e002      	b.n	80148f2 <ip4_reass+0x312>
      goto nullreturn;
 80148ec:	bf00      	nop
 80148ee:	e000      	b.n	80148f2 <ip4_reass+0x312>
  }

nullreturn:
 80148f0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f7f6 fce0 	bl	800b2b8 <pbuf_free>
  return NULL;
 80148f8:	2300      	movs	r3, #0
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3738      	adds	r7, #56	@ 0x38
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	08019818 	.word	0x08019818
 8014908:	080199a4 	.word	0x080199a4
 801490c:	08019860 	.word	0x08019860
 8014910:	2000c0bc 	.word	0x2000c0bc
 8014914:	080199b0 	.word	0x080199b0

08014918 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801491c:	2005      	movs	r0, #5
 801491e:	f7f5 fdb1 	bl	800a484 <memp_malloc>
 8014922:	4603      	mov	r3, r0
}
 8014924:	4618      	mov	r0, r3
 8014926:	bd80      	pop	{r7, pc}

08014928 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d106      	bne.n	8014944 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014936:	4b07      	ldr	r3, [pc, #28]	@ (8014954 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014938:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801493c:	4906      	ldr	r1, [pc, #24]	@ (8014958 <ip_frag_free_pbuf_custom_ref+0x30>)
 801493e:	4807      	ldr	r0, [pc, #28]	@ (801495c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014940:	f000 fd40 	bl	80153c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014944:	6879      	ldr	r1, [r7, #4]
 8014946:	2005      	movs	r0, #5
 8014948:	f7f5 fe12 	bl	800a570 <memp_free>
}
 801494c:	bf00      	nop
 801494e:	3708      	adds	r7, #8
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	08019818 	.word	0x08019818
 8014958:	080199d0 	.word	0x080199d0
 801495c:	08019860 	.word	0x08019860

08014960 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d106      	bne.n	8014980 <ipfrag_free_pbuf_custom+0x20>
 8014972:	4b11      	ldr	r3, [pc, #68]	@ (80149b8 <ipfrag_free_pbuf_custom+0x58>)
 8014974:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014978:	4910      	ldr	r1, [pc, #64]	@ (80149bc <ipfrag_free_pbuf_custom+0x5c>)
 801497a:	4811      	ldr	r0, [pc, #68]	@ (80149c0 <ipfrag_free_pbuf_custom+0x60>)
 801497c:	f000 fd22 	bl	80153c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014980:	68fa      	ldr	r2, [r7, #12]
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	429a      	cmp	r2, r3
 8014986:	d006      	beq.n	8014996 <ipfrag_free_pbuf_custom+0x36>
 8014988:	4b0b      	ldr	r3, [pc, #44]	@ (80149b8 <ipfrag_free_pbuf_custom+0x58>)
 801498a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801498e:	490d      	ldr	r1, [pc, #52]	@ (80149c4 <ipfrag_free_pbuf_custom+0x64>)
 8014990:	480b      	ldr	r0, [pc, #44]	@ (80149c0 <ipfrag_free_pbuf_custom+0x60>)
 8014992:	f000 fd17 	bl	80153c4 <iprintf>
  if (pcr->original != NULL) {
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	695b      	ldr	r3, [r3, #20]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d004      	beq.n	80149a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	695b      	ldr	r3, [r3, #20]
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7f6 fc88 	bl	800b2b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f7ff ffbd 	bl	8014928 <ip_frag_free_pbuf_custom_ref>
}
 80149ae:	bf00      	nop
 80149b0:	3710      	adds	r7, #16
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	08019818 	.word	0x08019818
 80149bc:	080199dc 	.word	0x080199dc
 80149c0:	08019860 	.word	0x08019860
 80149c4:	080199e8 	.word	0x080199e8

080149c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b094      	sub	sp, #80	@ 0x50
 80149cc:	af02      	add	r7, sp, #8
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80149d4:	2300      	movs	r3, #0
 80149d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80149de:	3b14      	subs	r3, #20
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	da00      	bge.n	80149e6 <ip4_frag+0x1e>
 80149e4:	3307      	adds	r3, #7
 80149e6:	10db      	asrs	r3, r3, #3
 80149e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80149ea:	2314      	movs	r3, #20
 80149ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80149f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80149f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	f003 030f 	and.w	r3, r3, #15
 8014a00:	b2db      	uxtb	r3, r3
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	2b14      	cmp	r3, #20
 8014a08:	d002      	beq.n	8014a10 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014a0a:	f06f 0305 	mvn.w	r3, #5
 8014a0e:	e110      	b.n	8014c32 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	895b      	ldrh	r3, [r3, #10]
 8014a14:	2b13      	cmp	r3, #19
 8014a16:	d809      	bhi.n	8014a2c <ip4_frag+0x64>
 8014a18:	4b88      	ldr	r3, [pc, #544]	@ (8014c3c <ip4_frag+0x274>)
 8014a1a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014a1e:	4988      	ldr	r1, [pc, #544]	@ (8014c40 <ip4_frag+0x278>)
 8014a20:	4888      	ldr	r0, [pc, #544]	@ (8014c44 <ip4_frag+0x27c>)
 8014a22:	f000 fccf 	bl	80153c4 <iprintf>
 8014a26:	f06f 0305 	mvn.w	r3, #5
 8014a2a:	e102      	b.n	8014c32 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a2e:	88db      	ldrh	r3, [r3, #6]
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7f5 f852 	bl	8009adc <lwip_htons>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014a3c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a42:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014a46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	891b      	ldrh	r3, [r3, #8]
 8014a52:	3b14      	subs	r3, #20
 8014a54:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014a58:	e0e1      	b.n	8014c1e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014a5a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014a5c:	00db      	lsls	r3, r3, #3
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014a64:	4293      	cmp	r3, r2
 8014a66:	bf28      	it	cs
 8014a68:	4613      	movcs	r3, r2
 8014a6a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014a6c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014a70:	2114      	movs	r1, #20
 8014a72:	200e      	movs	r0, #14
 8014a74:	f7f6 f93c 	bl	800acf0 <pbuf_alloc>
 8014a78:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f000 80d5 	beq.w	8014c2c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a84:	895b      	ldrh	r3, [r3, #10]
 8014a86:	2b13      	cmp	r3, #19
 8014a88:	d806      	bhi.n	8014a98 <ip4_frag+0xd0>
 8014a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8014c3c <ip4_frag+0x274>)
 8014a8c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014a90:	496d      	ldr	r1, [pc, #436]	@ (8014c48 <ip4_frag+0x280>)
 8014a92:	486c      	ldr	r0, [pc, #432]	@ (8014c44 <ip4_frag+0x27c>)
 8014a94:	f000 fc96 	bl	80153c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	2214      	movs	r2, #20
 8014a9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f000 fe20 	bl	80156e6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014aac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014aae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014ab2:	e064      	b.n	8014b7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	895a      	ldrh	r2, [r3, #10]
 8014ab8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014aba:	1ad3      	subs	r3, r2, r3
 8014abc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	895b      	ldrh	r3, [r3, #10]
 8014ac2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d906      	bls.n	8014ad6 <ip4_frag+0x10e>
 8014ac8:	4b5c      	ldr	r3, [pc, #368]	@ (8014c3c <ip4_frag+0x274>)
 8014aca:	f240 322d 	movw	r2, #813	@ 0x32d
 8014ace:	495f      	ldr	r1, [pc, #380]	@ (8014c4c <ip4_frag+0x284>)
 8014ad0:	485c      	ldr	r0, [pc, #368]	@ (8014c44 <ip4_frag+0x27c>)
 8014ad2:	f000 fc77 	bl	80153c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014ad6:	8bfa      	ldrh	r2, [r7, #30]
 8014ad8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014adc:	4293      	cmp	r3, r2
 8014ade:	bf28      	it	cs
 8014ae0:	4613      	movcs	r3, r2
 8014ae2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014ae6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d105      	bne.n	8014afa <ip4_frag+0x132>
        poff = 0;
 8014aee:	2300      	movs	r3, #0
 8014af0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	60fb      	str	r3, [r7, #12]
        continue;
 8014af8:	e041      	b.n	8014b7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014afa:	f7ff ff0d 	bl	8014918 <ip_frag_alloc_pbuf_custom_ref>
 8014afe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014b00:	69bb      	ldr	r3, [r7, #24]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d103      	bne.n	8014b0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014b06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b08:	f7f6 fbd6 	bl	800b2b8 <pbuf_free>
        goto memerr;
 8014b0c:	e08f      	b.n	8014c2e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014b0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014b14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014b16:	4413      	add	r3, r2
 8014b18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014b1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014b20:	9201      	str	r2, [sp, #4]
 8014b22:	9300      	str	r3, [sp, #0]
 8014b24:	4603      	mov	r3, r0
 8014b26:	2241      	movs	r2, #65	@ 0x41
 8014b28:	2000      	movs	r0, #0
 8014b2a:	f7f6 fa0b 	bl	800af44 <pbuf_alloced_custom>
 8014b2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d106      	bne.n	8014b44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014b36:	69b8      	ldr	r0, [r7, #24]
 8014b38:	f7ff fef6 	bl	8014928 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014b3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b3e:	f7f6 fbbb 	bl	800b2b8 <pbuf_free>
        goto memerr;
 8014b42:	e074      	b.n	8014c2e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014b44:	68f8      	ldr	r0, [r7, #12]
 8014b46:	f7f6 fc5d 	bl	800b404 <pbuf_ref>
      pcr->original = p;
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014b50:	69bb      	ldr	r3, [r7, #24]
 8014b52:	4a3f      	ldr	r2, [pc, #252]	@ (8014c50 <ip4_frag+0x288>)
 8014b54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014b56:	6979      	ldr	r1, [r7, #20]
 8014b58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b5a:	f7f6 fc7b 	bl	800b454 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014b5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014b62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014b66:	1ad3      	subs	r3, r2, r3
 8014b68:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014b6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d004      	beq.n	8014b7e <ip4_frag+0x1b6>
        poff = 0;
 8014b74:	2300      	movs	r3, #0
 8014b76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014b7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d196      	bne.n	8014ab4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014b86:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014b88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014b8c:	4413      	add	r3, r2
 8014b8e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014b94:	f1a3 0213 	sub.w	r2, r3, #19
 8014b98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	bfcc      	ite	gt
 8014ba0:	2301      	movgt	r3, #1
 8014ba2:	2300      	movle	r3, #0
 8014ba4:	b2db      	uxtb	r3, r3
 8014ba6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bb0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014bb2:	6a3b      	ldr	r3, [r7, #32]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d002      	beq.n	8014bbe <ip4_frag+0x1f6>
 8014bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d003      	beq.n	8014bc6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014bbe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014bc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014bc4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014bc6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7f4 ff87 	bl	8009adc <lwip_htons>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	461a      	mov	r2, r3
 8014bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014bd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014bd8:	3314      	adds	r3, #20
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7f4 ff7d 	bl	8009adc <lwip_htons>
 8014be2:	4603      	mov	r3, r0
 8014be4:	461a      	mov	r2, r3
 8014be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bec:	2200      	movs	r2, #0
 8014bee:	729a      	strb	r2, [r3, #10]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	695b      	ldr	r3, [r3, #20]
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014bfc:	68b8      	ldr	r0, [r7, #8]
 8014bfe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014c00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014c02:	f7f6 fb59 	bl	800b2b8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014c06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014c0c:	1ad3      	subs	r3, r2, r3
 8014c0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014c12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014c16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014c18:	4413      	add	r3, r2
 8014c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014c1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	f47f af19 	bne.w	8014a5a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	e002      	b.n	8014c32 <ip4_frag+0x26a>
      goto memerr;
 8014c2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3748      	adds	r7, #72	@ 0x48
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	08019818 	.word	0x08019818
 8014c40:	080199f4 	.word	0x080199f4
 8014c44:	08019860 	.word	0x08019860
 8014c48:	08019a10 	.word	0x08019a10
 8014c4c:	08019a30 	.word	0x08019a30
 8014c50:	08014961 	.word	0x08014961

08014c54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b086      	sub	sp, #24
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014c5e:	230e      	movs	r3, #14
 8014c60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	895b      	ldrh	r3, [r3, #10]
 8014c66:	2b0e      	cmp	r3, #14
 8014c68:	d96e      	bls.n	8014d48 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	7bdb      	ldrb	r3, [r3, #15]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d106      	bne.n	8014c80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014c78:	3301      	adds	r3, #1
 8014c7a:	b2da      	uxtb	r2, r3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	7b1a      	ldrb	r2, [r3, #12]
 8014c8a:	7b5b      	ldrb	r3, [r3, #13]
 8014c8c:	021b      	lsls	r3, r3, #8
 8014c8e:	4313      	orrs	r3, r2
 8014c90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	781b      	ldrb	r3, [r3, #0]
 8014c96:	f003 0301 	and.w	r3, r3, #1
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d023      	beq.n	8014ce6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	2b01      	cmp	r3, #1
 8014ca4:	d10f      	bne.n	8014cc6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	785b      	ldrb	r3, [r3, #1]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d11b      	bne.n	8014ce6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014cb2:	2b5e      	cmp	r3, #94	@ 0x5e
 8014cb4:	d117      	bne.n	8014ce6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	7b5b      	ldrb	r3, [r3, #13]
 8014cba:	f043 0310 	orr.w	r3, r3, #16
 8014cbe:	b2da      	uxtb	r2, r3
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	735a      	strb	r2, [r3, #13]
 8014cc4:	e00f      	b.n	8014ce6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	2206      	movs	r2, #6
 8014cca:	4928      	ldr	r1, [pc, #160]	@ (8014d6c <ethernet_input+0x118>)
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f000 fc02 	bl	80154d6 <memcmp>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d106      	bne.n	8014ce6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	7b5b      	ldrb	r3, [r3, #13]
 8014cdc:	f043 0308 	orr.w	r3, r3, #8
 8014ce0:	b2da      	uxtb	r2, r3
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014ce6:	89fb      	ldrh	r3, [r7, #14]
 8014ce8:	2b08      	cmp	r3, #8
 8014cea:	d003      	beq.n	8014cf4 <ethernet_input+0xa0>
 8014cec:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014cf0:	d014      	beq.n	8014d1c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014cf2:	e032      	b.n	8014d5a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cfa:	f003 0308 	and.w	r3, r3, #8
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d024      	beq.n	8014d4c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014d02:	8afb      	ldrh	r3, [r7, #22]
 8014d04:	4619      	mov	r1, r3
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7f6 fa50 	bl	800b1ac <pbuf_remove_header>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d11e      	bne.n	8014d50 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014d12:	6839      	ldr	r1, [r7, #0]
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f7fe ff21 	bl	8013b5c <ip4_input>
      break;
 8014d1a:	e013      	b.n	8014d44 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d22:	f003 0308 	and.w	r3, r3, #8
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d014      	beq.n	8014d54 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014d2a:	8afb      	ldrh	r3, [r7, #22]
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f7f6 fa3c 	bl	800b1ac <pbuf_remove_header>
 8014d34:	4603      	mov	r3, r0
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d10e      	bne.n	8014d58 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014d3a:	6839      	ldr	r1, [r7, #0]
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7fe f8c1 	bl	8012ec4 <etharp_input>
      break;
 8014d42:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014d44:	2300      	movs	r3, #0
 8014d46:	e00c      	b.n	8014d62 <ethernet_input+0x10e>
    goto free_and_return;
 8014d48:	bf00      	nop
 8014d4a:	e006      	b.n	8014d5a <ethernet_input+0x106>
        goto free_and_return;
 8014d4c:	bf00      	nop
 8014d4e:	e004      	b.n	8014d5a <ethernet_input+0x106>
        goto free_and_return;
 8014d50:	bf00      	nop
 8014d52:	e002      	b.n	8014d5a <ethernet_input+0x106>
        goto free_and_return;
 8014d54:	bf00      	nop
 8014d56:	e000      	b.n	8014d5a <ethernet_input+0x106>
        goto free_and_return;
 8014d58:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f7f6 faac 	bl	800b2b8 <pbuf_free>
  return ERR_OK;
 8014d60:	2300      	movs	r3, #0
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3718      	adds	r7, #24
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}
 8014d6a:	bf00      	nop
 8014d6c:	08019c10 	.word	0x08019c10

08014d70 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b086      	sub	sp, #24
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	60b9      	str	r1, [r7, #8]
 8014d7a:	607a      	str	r2, [r7, #4]
 8014d7c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014d7e:	8c3b      	ldrh	r3, [r7, #32]
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7f4 feab 	bl	8009adc <lwip_htons>
 8014d86:	4603      	mov	r3, r0
 8014d88:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014d8a:	210e      	movs	r1, #14
 8014d8c:	68b8      	ldr	r0, [r7, #8]
 8014d8e:	f7f6 f9fd 	bl	800b18c <pbuf_add_header>
 8014d92:	4603      	mov	r3, r0
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d125      	bne.n	8014de4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	8afa      	ldrh	r2, [r7, #22]
 8014da2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	2206      	movs	r2, #6
 8014da8:	6839      	ldr	r1, [r7, #0]
 8014daa:	4618      	mov	r0, r3
 8014dac:	f000 fc9b 	bl	80156e6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	3306      	adds	r3, #6
 8014db4:	2206      	movs	r2, #6
 8014db6:	6879      	ldr	r1, [r7, #4]
 8014db8:	4618      	mov	r0, r3
 8014dba:	f000 fc94 	bl	80156e6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014dc4:	2b06      	cmp	r3, #6
 8014dc6:	d006      	beq.n	8014dd6 <ethernet_output+0x66>
 8014dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8014df4 <ethernet_output+0x84>)
 8014dca:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014dce:	490a      	ldr	r1, [pc, #40]	@ (8014df8 <ethernet_output+0x88>)
 8014dd0:	480a      	ldr	r0, [pc, #40]	@ (8014dfc <ethernet_output+0x8c>)
 8014dd2:	f000 faf7 	bl	80153c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	699b      	ldr	r3, [r3, #24]
 8014dda:	68b9      	ldr	r1, [r7, #8]
 8014ddc:	68f8      	ldr	r0, [r7, #12]
 8014dde:	4798      	blx	r3
 8014de0:	4603      	mov	r3, r0
 8014de2:	e002      	b.n	8014dea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014de4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014de6:	f06f 0301 	mvn.w	r3, #1
}
 8014dea:	4618      	mov	r0, r3
 8014dec:	3718      	adds	r7, #24
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}
 8014df2:	bf00      	nop
 8014df4:	08019a40 	.word	0x08019a40
 8014df8:	08019a78 	.word	0x08019a78
 8014dfc:	08019aac 	.word	0x08019aac

08014e00 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b086      	sub	sp, #24
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	60bb      	str	r3, [r7, #8]
 8014e0e:	2304      	movs	r3, #4
 8014e10:	60fb      	str	r3, [r7, #12]
 8014e12:	2300      	movs	r3, #0
 8014e14:	613b      	str	r3, [r7, #16]
 8014e16:	2300      	movs	r3, #0
 8014e18:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014e1a:	f107 0308 	add.w	r3, r7, #8
 8014e1e:	2100      	movs	r1, #0
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7ef fe12 	bl	8004a4a <osMessageCreate>
 8014e26:	4602      	mov	r2, r0
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d102      	bne.n	8014e3a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014e34:	f04f 33ff 	mov.w	r3, #4294967295
 8014e38:	e000      	b.n	8014e3c <sys_mbox_new+0x3c>

  return ERR_OK;
 8014e3a:	2300      	movs	r3, #0
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3718      	adds	r7, #24
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}

08014e44 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b082      	sub	sp, #8
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7ef fed7 	bl	8004c04 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7ef fee8 	bl	8004c30 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014e60:	bf00      	nop
 8014e62:	3708      	adds	r7, #8
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}

08014e68 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	6839      	ldr	r1, [r7, #0]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7ef fe0e 	bl	8004a9c <osMessagePut>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d102      	bne.n	8014e8c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014e86:	2300      	movs	r3, #0
 8014e88:	73fb      	strb	r3, [r7, #15]
 8014e8a:	e001      	b.n	8014e90 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014e8c:	23ff      	movs	r3, #255	@ 0xff
 8014e8e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3710      	adds	r7, #16
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b08c      	sub	sp, #48	@ 0x30
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	61f8      	str	r0, [r7, #28]
 8014ea4:	61b9      	str	r1, [r7, #24]
 8014ea6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014ea8:	f7ef fbed 	bl	8004686 <osKernelSysTick>
 8014eac:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d017      	beq.n	8014ee4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014eb4:	69fb      	ldr	r3, [r7, #28]
 8014eb6:	6819      	ldr	r1, [r3, #0]
 8014eb8:	f107 0320 	add.w	r3, r7, #32
 8014ebc:	697a      	ldr	r2, [r7, #20]
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7ef fe2c 	bl	8004b1c <osMessageGet>

    if(event.status == osEventMessage)
 8014ec4:	6a3b      	ldr	r3, [r7, #32]
 8014ec6:	2b10      	cmp	r3, #16
 8014ec8:	d109      	bne.n	8014ede <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ecc:	461a      	mov	r2, r3
 8014ece:	69bb      	ldr	r3, [r7, #24]
 8014ed0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014ed2:	f7ef fbd8 	bl	8004686 <osKernelSysTick>
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eda:	1ad3      	subs	r3, r2, r3
 8014edc:	e019      	b.n	8014f12 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014ede:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee2:	e016      	b.n	8014f12 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014ee4:	69fb      	ldr	r3, [r7, #28]
 8014ee6:	6819      	ldr	r1, [r3, #0]
 8014ee8:	463b      	mov	r3, r7
 8014eea:	f04f 32ff 	mov.w	r2, #4294967295
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7ef fe14 	bl	8004b1c <osMessageGet>
 8014ef4:	f107 0320 	add.w	r3, r7, #32
 8014ef8:	463a      	mov	r2, r7
 8014efa:	ca07      	ldmia	r2, {r0, r1, r2}
 8014efc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f02:	461a      	mov	r2, r3
 8014f04:	69bb      	ldr	r3, [r7, #24]
 8014f06:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014f08:	f7ef fbbd 	bl	8004686 <osKernelSysTick>
 8014f0c:	4602      	mov	r2, r0
 8014f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f10:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014f12:	4618      	mov	r0, r3
 8014f14:	3730      	adds	r7, #48	@ 0x30
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}

08014f1a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	b086      	sub	sp, #24
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
 8014f22:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6819      	ldr	r1, [r3, #0]
 8014f28:	f107 030c 	add.w	r3, r7, #12
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f7ef fdf4 	bl	8004b1c <osMessageGet>

  if(event.status == osEventMessage)
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2b10      	cmp	r3, #16
 8014f38:	d105      	bne.n	8014f46 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8014f42:	2300      	movs	r3, #0
 8014f44:	e001      	b.n	8014f4a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014f46:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3718      	adds	r7, #24
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014f52:	b480      	push	{r7}
 8014f54:	b083      	sub	sp, #12
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d101      	bne.n	8014f66 <sys_mbox_valid+0x14>
    return 0;
 8014f62:	2300      	movs	r3, #0
 8014f64:	e000      	b.n	8014f68 <sys_mbox_valid+0x16>
  else
    return 1;
 8014f66:	2301      	movs	r3, #1
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	370c      	adds	r7, #12
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr

08014f74 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	601a      	str	r2, [r3, #0]
}
 8014f82:	bf00      	nop
 8014f84:	370c      	adds	r7, #12
 8014f86:	46bd      	mov	sp, r7
 8014f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8c:	4770      	bx	lr

08014f8e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014f8e:	b580      	push	{r7, lr}
 8014f90:	b084      	sub	sp, #16
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	6078      	str	r0, [r7, #4]
 8014f96:	460b      	mov	r3, r1
 8014f98:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	60bb      	str	r3, [r7, #8]
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8014fa2:	f107 0308 	add.w	r3, r7, #8
 8014fa6:	2101      	movs	r1, #1
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7ef fc85 	bl	80048b8 <osSemaphoreCreate>
 8014fae:	4602      	mov	r2, r0
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d102      	bne.n	8014fc2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc0:	e009      	b.n	8014fd6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8014fc2:	78fb      	ldrb	r3, [r7, #3]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d105      	bne.n	8014fd4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2100      	movs	r1, #0
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7ef fca4 	bl	800491c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014fd4:	2300      	movs	r3, #0
}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3710      	adds	r7, #16
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b084      	sub	sp, #16
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
 8014fe6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014fe8:	f7ef fb4d 	bl	8004686 <osKernelSysTick>
 8014fec:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d011      	beq.n	8015018 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	6839      	ldr	r1, [r7, #0]
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7ef fc8e 	bl	800491c <osSemaphoreWait>
 8015000:	4603      	mov	r3, r0
 8015002:	2b00      	cmp	r3, #0
 8015004:	d105      	bne.n	8015012 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015006:	f7ef fb3e 	bl	8004686 <osKernelSysTick>
 801500a:	4602      	mov	r2, r0
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	1ad3      	subs	r3, r2, r3
 8015010:	e012      	b.n	8015038 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015012:	f04f 33ff 	mov.w	r3, #4294967295
 8015016:	e00f      	b.n	8015038 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015018:	bf00      	nop
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	f04f 31ff 	mov.w	r1, #4294967295
 8015022:	4618      	mov	r0, r3
 8015024:	f7ef fc7a 	bl	800491c <osSemaphoreWait>
 8015028:	4603      	mov	r3, r0
 801502a:	2b00      	cmp	r3, #0
 801502c:	d1f5      	bne.n	801501a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801502e:	f7ef fb2a 	bl	8004686 <osKernelSysTick>
 8015032:	4602      	mov	r2, r0
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015038:	4618      	mov	r0, r3
 801503a:	3710      	adds	r7, #16
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}

08015040 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4618      	mov	r0, r3
 801504e:	f7ef fcb3 	bl	80049b8 <osSemaphoreRelease>
}
 8015052:	bf00      	nop
 8015054:	3708      	adds	r7, #8
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}

0801505a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801505a:	b580      	push	{r7, lr}
 801505c:	b082      	sub	sp, #8
 801505e:	af00      	add	r7, sp, #0
 8015060:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	4618      	mov	r0, r3
 8015068:	f7ef fcdc 	bl	8004a24 <osSemaphoreDelete>
}
 801506c:	bf00      	nop
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015074:	b480      	push	{r7}
 8015076:	b083      	sub	sp, #12
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d101      	bne.n	8015088 <sys_sem_valid+0x14>
    return 0;
 8015084:	2300      	movs	r3, #0
 8015086:	e000      	b.n	801508a <sys_sem_valid+0x16>
  else
    return 1;
 8015088:	2301      	movs	r3, #1
}
 801508a:	4618      	mov	r0, r3
 801508c:	370c      	adds	r7, #12
 801508e:	46bd      	mov	sp, r7
 8015090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015094:	4770      	bx	lr

08015096 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015096:	b480      	push	{r7}
 8015098:	b083      	sub	sp, #12
 801509a:	af00      	add	r7, sp, #0
 801509c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	601a      	str	r2, [r3, #0]
}
 80150a4:	bf00      	nop
 80150a6:	370c      	adds	r7, #12
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr

080150b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80150b4:	4803      	ldr	r0, [pc, #12]	@ (80150c4 <sys_init+0x14>)
 80150b6:	f7ef fb62 	bl	800477e <osMutexCreate>
 80150ba:	4603      	mov	r3, r0
 80150bc:	4a02      	ldr	r2, [pc, #8]	@ (80150c8 <sys_init+0x18>)
 80150be:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80150c0:	bf00      	nop
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	08019c20 	.word	0x08019c20
 80150c8:	2000c0c4 	.word	0x2000c0c4

080150cc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b084      	sub	sp, #16
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80150d4:	2300      	movs	r3, #0
 80150d6:	60bb      	str	r3, [r7, #8]
 80150d8:	2300      	movs	r3, #0
 80150da:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80150dc:	f107 0308 	add.w	r3, r7, #8
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7ef fb4c 	bl	800477e <osMutexCreate>
 80150e6:	4602      	mov	r2, r0
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d102      	bne.n	80150fa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80150f4:	f04f 33ff 	mov.w	r3, #4294967295
 80150f8:	e000      	b.n	80150fc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80150fa:	2300      	movs	r3, #0
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	f04f 31ff 	mov.w	r1, #4294967295
 8015114:	4618      	mov	r0, r3
 8015116:	f7ef fb4b 	bl	80047b0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801511a:	bf00      	nop
 801511c:	3708      	adds	r7, #8
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}

08015122 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015122:	b580      	push	{r7, lr}
 8015124:	b082      	sub	sp, #8
 8015126:	af00      	add	r7, sp, #0
 8015128:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	4618      	mov	r0, r3
 8015130:	f7ef fb8c 	bl	800484c <osMutexRelease>
}
 8015134:	bf00      	nop
 8015136:	3708      	adds	r7, #8
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}

0801513c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b08c      	sub	sp, #48	@ 0x30
 8015140:	af00      	add	r7, sp, #0
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	607a      	str	r2, [r7, #4]
 8015148:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801514a:	f107 0314 	add.w	r3, r7, #20
 801514e:	2200      	movs	r2, #0
 8015150:	601a      	str	r2, [r3, #0]
 8015152:	605a      	str	r2, [r3, #4]
 8015154:	609a      	str	r2, [r3, #8]
 8015156:	60da      	str	r2, [r3, #12]
 8015158:	611a      	str	r2, [r3, #16]
 801515a:	615a      	str	r2, [r3, #20]
 801515c:	619a      	str	r2, [r3, #24]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	617b      	str	r3, [r7, #20]
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	61bb      	str	r3, [r7, #24]
 8015166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015168:	b21b      	sxth	r3, r3
 801516a:	83bb      	strh	r3, [r7, #28]
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015170:	f107 0314 	add.w	r3, r7, #20
 8015174:	6879      	ldr	r1, [r7, #4]
 8015176:	4618      	mov	r0, r3
 8015178:	f7ef fa95 	bl	80046a6 <osThreadCreate>
 801517c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801517e:	4618      	mov	r0, r3
 8015180:	3730      	adds	r7, #48	@ 0x30
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}
	...

08015188 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801518c:	4b04      	ldr	r3, [pc, #16]	@ (80151a0 <sys_arch_protect+0x18>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	f04f 31ff 	mov.w	r1, #4294967295
 8015194:	4618      	mov	r0, r3
 8015196:	f7ef fb0b 	bl	80047b0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801519a:	2301      	movs	r3, #1
}
 801519c:	4618      	mov	r0, r3
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	2000c0c4 	.word	0x2000c0c4

080151a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b082      	sub	sp, #8
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80151ac:	4b04      	ldr	r3, [pc, #16]	@ (80151c0 <sys_arch_unprotect+0x1c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7ef fb4b 	bl	800484c <osMutexRelease>
}
 80151b6:	bf00      	nop
 80151b8:	3708      	adds	r7, #8
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}
 80151be:	bf00      	nop
 80151c0:	2000c0c4 	.word	0x2000c0c4

080151c4 <rand>:
 80151c4:	4b16      	ldr	r3, [pc, #88]	@ (8015220 <rand+0x5c>)
 80151c6:	b510      	push	{r4, lr}
 80151c8:	681c      	ldr	r4, [r3, #0]
 80151ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151cc:	b9b3      	cbnz	r3, 80151fc <rand+0x38>
 80151ce:	2018      	movs	r0, #24
 80151d0:	f000 fb00 	bl	80157d4 <malloc>
 80151d4:	4602      	mov	r2, r0
 80151d6:	6320      	str	r0, [r4, #48]	@ 0x30
 80151d8:	b920      	cbnz	r0, 80151e4 <rand+0x20>
 80151da:	4b12      	ldr	r3, [pc, #72]	@ (8015224 <rand+0x60>)
 80151dc:	4812      	ldr	r0, [pc, #72]	@ (8015228 <rand+0x64>)
 80151de:	2152      	movs	r1, #82	@ 0x52
 80151e0:	f000 fa90 	bl	8015704 <__assert_func>
 80151e4:	4911      	ldr	r1, [pc, #68]	@ (801522c <rand+0x68>)
 80151e6:	4b12      	ldr	r3, [pc, #72]	@ (8015230 <rand+0x6c>)
 80151e8:	e9c0 1300 	strd	r1, r3, [r0]
 80151ec:	4b11      	ldr	r3, [pc, #68]	@ (8015234 <rand+0x70>)
 80151ee:	6083      	str	r3, [r0, #8]
 80151f0:	230b      	movs	r3, #11
 80151f2:	8183      	strh	r3, [r0, #12]
 80151f4:	2100      	movs	r1, #0
 80151f6:	2001      	movs	r0, #1
 80151f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80151fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80151fe:	480e      	ldr	r0, [pc, #56]	@ (8015238 <rand+0x74>)
 8015200:	690b      	ldr	r3, [r1, #16]
 8015202:	694c      	ldr	r4, [r1, #20]
 8015204:	4a0d      	ldr	r2, [pc, #52]	@ (801523c <rand+0x78>)
 8015206:	4358      	muls	r0, r3
 8015208:	fb02 0004 	mla	r0, r2, r4, r0
 801520c:	fba3 3202 	umull	r3, r2, r3, r2
 8015210:	3301      	adds	r3, #1
 8015212:	eb40 0002 	adc.w	r0, r0, r2
 8015216:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801521a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801521e:	bd10      	pop	{r4, pc}
 8015220:	2000003c 	.word	0x2000003c
 8015224:	08019c28 	.word	0x08019c28
 8015228:	08019c3f 	.word	0x08019c3f
 801522c:	abcd330e 	.word	0xabcd330e
 8015230:	e66d1234 	.word	0xe66d1234
 8015234:	0005deec 	.word	0x0005deec
 8015238:	5851f42d 	.word	0x5851f42d
 801523c:	4c957f2d 	.word	0x4c957f2d

08015240 <std>:
 8015240:	2300      	movs	r3, #0
 8015242:	b510      	push	{r4, lr}
 8015244:	4604      	mov	r4, r0
 8015246:	e9c0 3300 	strd	r3, r3, [r0]
 801524a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801524e:	6083      	str	r3, [r0, #8]
 8015250:	8181      	strh	r1, [r0, #12]
 8015252:	6643      	str	r3, [r0, #100]	@ 0x64
 8015254:	81c2      	strh	r2, [r0, #14]
 8015256:	6183      	str	r3, [r0, #24]
 8015258:	4619      	mov	r1, r3
 801525a:	2208      	movs	r2, #8
 801525c:	305c      	adds	r0, #92	@ 0x5c
 801525e:	f000 f964 	bl	801552a <memset>
 8015262:	4b0d      	ldr	r3, [pc, #52]	@ (8015298 <std+0x58>)
 8015264:	6263      	str	r3, [r4, #36]	@ 0x24
 8015266:	4b0d      	ldr	r3, [pc, #52]	@ (801529c <std+0x5c>)
 8015268:	62a3      	str	r3, [r4, #40]	@ 0x28
 801526a:	4b0d      	ldr	r3, [pc, #52]	@ (80152a0 <std+0x60>)
 801526c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801526e:	4b0d      	ldr	r3, [pc, #52]	@ (80152a4 <std+0x64>)
 8015270:	6323      	str	r3, [r4, #48]	@ 0x30
 8015272:	4b0d      	ldr	r3, [pc, #52]	@ (80152a8 <std+0x68>)
 8015274:	6224      	str	r4, [r4, #32]
 8015276:	429c      	cmp	r4, r3
 8015278:	d006      	beq.n	8015288 <std+0x48>
 801527a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801527e:	4294      	cmp	r4, r2
 8015280:	d002      	beq.n	8015288 <std+0x48>
 8015282:	33d0      	adds	r3, #208	@ 0xd0
 8015284:	429c      	cmp	r4, r3
 8015286:	d105      	bne.n	8015294 <std+0x54>
 8015288:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015290:	f000 ba26 	b.w	80156e0 <__retarget_lock_init_recursive>
 8015294:	bd10      	pop	{r4, pc}
 8015296:	bf00      	nop
 8015298:	08015451 	.word	0x08015451
 801529c:	08015473 	.word	0x08015473
 80152a0:	080154ab 	.word	0x080154ab
 80152a4:	080154cf 	.word	0x080154cf
 80152a8:	2000c0c8 	.word	0x2000c0c8

080152ac <stdio_exit_handler>:
 80152ac:	4a02      	ldr	r2, [pc, #8]	@ (80152b8 <stdio_exit_handler+0xc>)
 80152ae:	4903      	ldr	r1, [pc, #12]	@ (80152bc <stdio_exit_handler+0x10>)
 80152b0:	4803      	ldr	r0, [pc, #12]	@ (80152c0 <stdio_exit_handler+0x14>)
 80152b2:	f000 b869 	b.w	8015388 <_fwalk_sglue>
 80152b6:	bf00      	nop
 80152b8:	20000030 	.word	0x20000030
 80152bc:	08016299 	.word	0x08016299
 80152c0:	20000040 	.word	0x20000040

080152c4 <cleanup_stdio>:
 80152c4:	6841      	ldr	r1, [r0, #4]
 80152c6:	4b0c      	ldr	r3, [pc, #48]	@ (80152f8 <cleanup_stdio+0x34>)
 80152c8:	4299      	cmp	r1, r3
 80152ca:	b510      	push	{r4, lr}
 80152cc:	4604      	mov	r4, r0
 80152ce:	d001      	beq.n	80152d4 <cleanup_stdio+0x10>
 80152d0:	f000 ffe2 	bl	8016298 <_fflush_r>
 80152d4:	68a1      	ldr	r1, [r4, #8]
 80152d6:	4b09      	ldr	r3, [pc, #36]	@ (80152fc <cleanup_stdio+0x38>)
 80152d8:	4299      	cmp	r1, r3
 80152da:	d002      	beq.n	80152e2 <cleanup_stdio+0x1e>
 80152dc:	4620      	mov	r0, r4
 80152de:	f000 ffdb 	bl	8016298 <_fflush_r>
 80152e2:	68e1      	ldr	r1, [r4, #12]
 80152e4:	4b06      	ldr	r3, [pc, #24]	@ (8015300 <cleanup_stdio+0x3c>)
 80152e6:	4299      	cmp	r1, r3
 80152e8:	d004      	beq.n	80152f4 <cleanup_stdio+0x30>
 80152ea:	4620      	mov	r0, r4
 80152ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152f0:	f000 bfd2 	b.w	8016298 <_fflush_r>
 80152f4:	bd10      	pop	{r4, pc}
 80152f6:	bf00      	nop
 80152f8:	2000c0c8 	.word	0x2000c0c8
 80152fc:	2000c130 	.word	0x2000c130
 8015300:	2000c198 	.word	0x2000c198

08015304 <global_stdio_init.part.0>:
 8015304:	b510      	push	{r4, lr}
 8015306:	4b0b      	ldr	r3, [pc, #44]	@ (8015334 <global_stdio_init.part.0+0x30>)
 8015308:	4c0b      	ldr	r4, [pc, #44]	@ (8015338 <global_stdio_init.part.0+0x34>)
 801530a:	4a0c      	ldr	r2, [pc, #48]	@ (801533c <global_stdio_init.part.0+0x38>)
 801530c:	601a      	str	r2, [r3, #0]
 801530e:	4620      	mov	r0, r4
 8015310:	2200      	movs	r2, #0
 8015312:	2104      	movs	r1, #4
 8015314:	f7ff ff94 	bl	8015240 <std>
 8015318:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801531c:	2201      	movs	r2, #1
 801531e:	2109      	movs	r1, #9
 8015320:	f7ff ff8e 	bl	8015240 <std>
 8015324:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015328:	2202      	movs	r2, #2
 801532a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801532e:	2112      	movs	r1, #18
 8015330:	f7ff bf86 	b.w	8015240 <std>
 8015334:	2000c200 	.word	0x2000c200
 8015338:	2000c0c8 	.word	0x2000c0c8
 801533c:	080152ad 	.word	0x080152ad

08015340 <__sfp_lock_acquire>:
 8015340:	4801      	ldr	r0, [pc, #4]	@ (8015348 <__sfp_lock_acquire+0x8>)
 8015342:	f000 b9ce 	b.w	80156e2 <__retarget_lock_acquire_recursive>
 8015346:	bf00      	nop
 8015348:	2000c209 	.word	0x2000c209

0801534c <__sfp_lock_release>:
 801534c:	4801      	ldr	r0, [pc, #4]	@ (8015354 <__sfp_lock_release+0x8>)
 801534e:	f000 b9c9 	b.w	80156e4 <__retarget_lock_release_recursive>
 8015352:	bf00      	nop
 8015354:	2000c209 	.word	0x2000c209

08015358 <__sinit>:
 8015358:	b510      	push	{r4, lr}
 801535a:	4604      	mov	r4, r0
 801535c:	f7ff fff0 	bl	8015340 <__sfp_lock_acquire>
 8015360:	6a23      	ldr	r3, [r4, #32]
 8015362:	b11b      	cbz	r3, 801536c <__sinit+0x14>
 8015364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015368:	f7ff bff0 	b.w	801534c <__sfp_lock_release>
 801536c:	4b04      	ldr	r3, [pc, #16]	@ (8015380 <__sinit+0x28>)
 801536e:	6223      	str	r3, [r4, #32]
 8015370:	4b04      	ldr	r3, [pc, #16]	@ (8015384 <__sinit+0x2c>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d1f5      	bne.n	8015364 <__sinit+0xc>
 8015378:	f7ff ffc4 	bl	8015304 <global_stdio_init.part.0>
 801537c:	e7f2      	b.n	8015364 <__sinit+0xc>
 801537e:	bf00      	nop
 8015380:	080152c5 	.word	0x080152c5
 8015384:	2000c200 	.word	0x2000c200

08015388 <_fwalk_sglue>:
 8015388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801538c:	4607      	mov	r7, r0
 801538e:	4688      	mov	r8, r1
 8015390:	4614      	mov	r4, r2
 8015392:	2600      	movs	r6, #0
 8015394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015398:	f1b9 0901 	subs.w	r9, r9, #1
 801539c:	d505      	bpl.n	80153aa <_fwalk_sglue+0x22>
 801539e:	6824      	ldr	r4, [r4, #0]
 80153a0:	2c00      	cmp	r4, #0
 80153a2:	d1f7      	bne.n	8015394 <_fwalk_sglue+0xc>
 80153a4:	4630      	mov	r0, r6
 80153a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153aa:	89ab      	ldrh	r3, [r5, #12]
 80153ac:	2b01      	cmp	r3, #1
 80153ae:	d907      	bls.n	80153c0 <_fwalk_sglue+0x38>
 80153b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80153b4:	3301      	adds	r3, #1
 80153b6:	d003      	beq.n	80153c0 <_fwalk_sglue+0x38>
 80153b8:	4629      	mov	r1, r5
 80153ba:	4638      	mov	r0, r7
 80153bc:	47c0      	blx	r8
 80153be:	4306      	orrs	r6, r0
 80153c0:	3568      	adds	r5, #104	@ 0x68
 80153c2:	e7e9      	b.n	8015398 <_fwalk_sglue+0x10>

080153c4 <iprintf>:
 80153c4:	b40f      	push	{r0, r1, r2, r3}
 80153c6:	b507      	push	{r0, r1, r2, lr}
 80153c8:	4906      	ldr	r1, [pc, #24]	@ (80153e4 <iprintf+0x20>)
 80153ca:	ab04      	add	r3, sp, #16
 80153cc:	6808      	ldr	r0, [r1, #0]
 80153ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80153d2:	6881      	ldr	r1, [r0, #8]
 80153d4:	9301      	str	r3, [sp, #4]
 80153d6:	f000 fc35 	bl	8015c44 <_vfiprintf_r>
 80153da:	b003      	add	sp, #12
 80153dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80153e0:	b004      	add	sp, #16
 80153e2:	4770      	bx	lr
 80153e4:	2000003c 	.word	0x2000003c

080153e8 <sniprintf>:
 80153e8:	b40c      	push	{r2, r3}
 80153ea:	b530      	push	{r4, r5, lr}
 80153ec:	4b17      	ldr	r3, [pc, #92]	@ (801544c <sniprintf+0x64>)
 80153ee:	1e0c      	subs	r4, r1, #0
 80153f0:	681d      	ldr	r5, [r3, #0]
 80153f2:	b09d      	sub	sp, #116	@ 0x74
 80153f4:	da08      	bge.n	8015408 <sniprintf+0x20>
 80153f6:	238b      	movs	r3, #139	@ 0x8b
 80153f8:	602b      	str	r3, [r5, #0]
 80153fa:	f04f 30ff 	mov.w	r0, #4294967295
 80153fe:	b01d      	add	sp, #116	@ 0x74
 8015400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015404:	b002      	add	sp, #8
 8015406:	4770      	bx	lr
 8015408:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801540c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015410:	bf14      	ite	ne
 8015412:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015416:	4623      	moveq	r3, r4
 8015418:	9304      	str	r3, [sp, #16]
 801541a:	9307      	str	r3, [sp, #28]
 801541c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015420:	9002      	str	r0, [sp, #8]
 8015422:	9006      	str	r0, [sp, #24]
 8015424:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015428:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801542a:	ab21      	add	r3, sp, #132	@ 0x84
 801542c:	a902      	add	r1, sp, #8
 801542e:	4628      	mov	r0, r5
 8015430:	9301      	str	r3, [sp, #4]
 8015432:	f000 fae1 	bl	80159f8 <_svfiprintf_r>
 8015436:	1c43      	adds	r3, r0, #1
 8015438:	bfbc      	itt	lt
 801543a:	238b      	movlt	r3, #139	@ 0x8b
 801543c:	602b      	strlt	r3, [r5, #0]
 801543e:	2c00      	cmp	r4, #0
 8015440:	d0dd      	beq.n	80153fe <sniprintf+0x16>
 8015442:	9b02      	ldr	r3, [sp, #8]
 8015444:	2200      	movs	r2, #0
 8015446:	701a      	strb	r2, [r3, #0]
 8015448:	e7d9      	b.n	80153fe <sniprintf+0x16>
 801544a:	bf00      	nop
 801544c:	2000003c 	.word	0x2000003c

08015450 <__sread>:
 8015450:	b510      	push	{r4, lr}
 8015452:	460c      	mov	r4, r1
 8015454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015458:	f000 f8fa 	bl	8015650 <_read_r>
 801545c:	2800      	cmp	r0, #0
 801545e:	bfab      	itete	ge
 8015460:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015462:	89a3      	ldrhlt	r3, [r4, #12]
 8015464:	181b      	addge	r3, r3, r0
 8015466:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801546a:	bfac      	ite	ge
 801546c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801546e:	81a3      	strhlt	r3, [r4, #12]
 8015470:	bd10      	pop	{r4, pc}

08015472 <__swrite>:
 8015472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015476:	461f      	mov	r7, r3
 8015478:	898b      	ldrh	r3, [r1, #12]
 801547a:	05db      	lsls	r3, r3, #23
 801547c:	4605      	mov	r5, r0
 801547e:	460c      	mov	r4, r1
 8015480:	4616      	mov	r6, r2
 8015482:	d505      	bpl.n	8015490 <__swrite+0x1e>
 8015484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015488:	2302      	movs	r3, #2
 801548a:	2200      	movs	r2, #0
 801548c:	f000 f8ce 	bl	801562c <_lseek_r>
 8015490:	89a3      	ldrh	r3, [r4, #12]
 8015492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015496:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801549a:	81a3      	strh	r3, [r4, #12]
 801549c:	4632      	mov	r2, r6
 801549e:	463b      	mov	r3, r7
 80154a0:	4628      	mov	r0, r5
 80154a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154a6:	f000 b8e5 	b.w	8015674 <_write_r>

080154aa <__sseek>:
 80154aa:	b510      	push	{r4, lr}
 80154ac:	460c      	mov	r4, r1
 80154ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154b2:	f000 f8bb 	bl	801562c <_lseek_r>
 80154b6:	1c43      	adds	r3, r0, #1
 80154b8:	89a3      	ldrh	r3, [r4, #12]
 80154ba:	bf15      	itete	ne
 80154bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80154be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80154c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80154c6:	81a3      	strheq	r3, [r4, #12]
 80154c8:	bf18      	it	ne
 80154ca:	81a3      	strhne	r3, [r4, #12]
 80154cc:	bd10      	pop	{r4, pc}

080154ce <__sclose>:
 80154ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154d2:	f000 b845 	b.w	8015560 <_close_r>

080154d6 <memcmp>:
 80154d6:	b510      	push	{r4, lr}
 80154d8:	3901      	subs	r1, #1
 80154da:	4402      	add	r2, r0
 80154dc:	4290      	cmp	r0, r2
 80154de:	d101      	bne.n	80154e4 <memcmp+0xe>
 80154e0:	2000      	movs	r0, #0
 80154e2:	e005      	b.n	80154f0 <memcmp+0x1a>
 80154e4:	7803      	ldrb	r3, [r0, #0]
 80154e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80154ea:	42a3      	cmp	r3, r4
 80154ec:	d001      	beq.n	80154f2 <memcmp+0x1c>
 80154ee:	1b18      	subs	r0, r3, r4
 80154f0:	bd10      	pop	{r4, pc}
 80154f2:	3001      	adds	r0, #1
 80154f4:	e7f2      	b.n	80154dc <memcmp+0x6>

080154f6 <memmove>:
 80154f6:	4288      	cmp	r0, r1
 80154f8:	b510      	push	{r4, lr}
 80154fa:	eb01 0402 	add.w	r4, r1, r2
 80154fe:	d902      	bls.n	8015506 <memmove+0x10>
 8015500:	4284      	cmp	r4, r0
 8015502:	4623      	mov	r3, r4
 8015504:	d807      	bhi.n	8015516 <memmove+0x20>
 8015506:	1e43      	subs	r3, r0, #1
 8015508:	42a1      	cmp	r1, r4
 801550a:	d008      	beq.n	801551e <memmove+0x28>
 801550c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015510:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015514:	e7f8      	b.n	8015508 <memmove+0x12>
 8015516:	4402      	add	r2, r0
 8015518:	4601      	mov	r1, r0
 801551a:	428a      	cmp	r2, r1
 801551c:	d100      	bne.n	8015520 <memmove+0x2a>
 801551e:	bd10      	pop	{r4, pc}
 8015520:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015524:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015528:	e7f7      	b.n	801551a <memmove+0x24>

0801552a <memset>:
 801552a:	4402      	add	r2, r0
 801552c:	4603      	mov	r3, r0
 801552e:	4293      	cmp	r3, r2
 8015530:	d100      	bne.n	8015534 <memset+0xa>
 8015532:	4770      	bx	lr
 8015534:	f803 1b01 	strb.w	r1, [r3], #1
 8015538:	e7f9      	b.n	801552e <memset+0x4>

0801553a <strncpy>:
 801553a:	b510      	push	{r4, lr}
 801553c:	3901      	subs	r1, #1
 801553e:	4603      	mov	r3, r0
 8015540:	b132      	cbz	r2, 8015550 <strncpy+0x16>
 8015542:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015546:	f803 4b01 	strb.w	r4, [r3], #1
 801554a:	3a01      	subs	r2, #1
 801554c:	2c00      	cmp	r4, #0
 801554e:	d1f7      	bne.n	8015540 <strncpy+0x6>
 8015550:	441a      	add	r2, r3
 8015552:	2100      	movs	r1, #0
 8015554:	4293      	cmp	r3, r2
 8015556:	d100      	bne.n	801555a <strncpy+0x20>
 8015558:	bd10      	pop	{r4, pc}
 801555a:	f803 1b01 	strb.w	r1, [r3], #1
 801555e:	e7f9      	b.n	8015554 <strncpy+0x1a>

08015560 <_close_r>:
 8015560:	b538      	push	{r3, r4, r5, lr}
 8015562:	4d06      	ldr	r5, [pc, #24]	@ (801557c <_close_r+0x1c>)
 8015564:	2300      	movs	r3, #0
 8015566:	4604      	mov	r4, r0
 8015568:	4608      	mov	r0, r1
 801556a:	602b      	str	r3, [r5, #0]
 801556c:	f7eb fa52 	bl	8000a14 <_close>
 8015570:	1c43      	adds	r3, r0, #1
 8015572:	d102      	bne.n	801557a <_close_r+0x1a>
 8015574:	682b      	ldr	r3, [r5, #0]
 8015576:	b103      	cbz	r3, 801557a <_close_r+0x1a>
 8015578:	6023      	str	r3, [r4, #0]
 801557a:	bd38      	pop	{r3, r4, r5, pc}
 801557c:	2000c204 	.word	0x2000c204

08015580 <_reclaim_reent>:
 8015580:	4b29      	ldr	r3, [pc, #164]	@ (8015628 <_reclaim_reent+0xa8>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	4283      	cmp	r3, r0
 8015586:	b570      	push	{r4, r5, r6, lr}
 8015588:	4604      	mov	r4, r0
 801558a:	d04b      	beq.n	8015624 <_reclaim_reent+0xa4>
 801558c:	69c3      	ldr	r3, [r0, #28]
 801558e:	b1ab      	cbz	r3, 80155bc <_reclaim_reent+0x3c>
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	b16b      	cbz	r3, 80155b0 <_reclaim_reent+0x30>
 8015594:	2500      	movs	r5, #0
 8015596:	69e3      	ldr	r3, [r4, #28]
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	5959      	ldr	r1, [r3, r5]
 801559c:	2900      	cmp	r1, #0
 801559e:	d13b      	bne.n	8015618 <_reclaim_reent+0x98>
 80155a0:	3504      	adds	r5, #4
 80155a2:	2d80      	cmp	r5, #128	@ 0x80
 80155a4:	d1f7      	bne.n	8015596 <_reclaim_reent+0x16>
 80155a6:	69e3      	ldr	r3, [r4, #28]
 80155a8:	4620      	mov	r0, r4
 80155aa:	68d9      	ldr	r1, [r3, #12]
 80155ac:	f000 f8c8 	bl	8015740 <_free_r>
 80155b0:	69e3      	ldr	r3, [r4, #28]
 80155b2:	6819      	ldr	r1, [r3, #0]
 80155b4:	b111      	cbz	r1, 80155bc <_reclaim_reent+0x3c>
 80155b6:	4620      	mov	r0, r4
 80155b8:	f000 f8c2 	bl	8015740 <_free_r>
 80155bc:	6961      	ldr	r1, [r4, #20]
 80155be:	b111      	cbz	r1, 80155c6 <_reclaim_reent+0x46>
 80155c0:	4620      	mov	r0, r4
 80155c2:	f000 f8bd 	bl	8015740 <_free_r>
 80155c6:	69e1      	ldr	r1, [r4, #28]
 80155c8:	b111      	cbz	r1, 80155d0 <_reclaim_reent+0x50>
 80155ca:	4620      	mov	r0, r4
 80155cc:	f000 f8b8 	bl	8015740 <_free_r>
 80155d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80155d2:	b111      	cbz	r1, 80155da <_reclaim_reent+0x5a>
 80155d4:	4620      	mov	r0, r4
 80155d6:	f000 f8b3 	bl	8015740 <_free_r>
 80155da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80155dc:	b111      	cbz	r1, 80155e4 <_reclaim_reent+0x64>
 80155de:	4620      	mov	r0, r4
 80155e0:	f000 f8ae 	bl	8015740 <_free_r>
 80155e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80155e6:	b111      	cbz	r1, 80155ee <_reclaim_reent+0x6e>
 80155e8:	4620      	mov	r0, r4
 80155ea:	f000 f8a9 	bl	8015740 <_free_r>
 80155ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80155f0:	b111      	cbz	r1, 80155f8 <_reclaim_reent+0x78>
 80155f2:	4620      	mov	r0, r4
 80155f4:	f000 f8a4 	bl	8015740 <_free_r>
 80155f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80155fa:	b111      	cbz	r1, 8015602 <_reclaim_reent+0x82>
 80155fc:	4620      	mov	r0, r4
 80155fe:	f000 f89f 	bl	8015740 <_free_r>
 8015602:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015604:	b111      	cbz	r1, 801560c <_reclaim_reent+0x8c>
 8015606:	4620      	mov	r0, r4
 8015608:	f000 f89a 	bl	8015740 <_free_r>
 801560c:	6a23      	ldr	r3, [r4, #32]
 801560e:	b14b      	cbz	r3, 8015624 <_reclaim_reent+0xa4>
 8015610:	4620      	mov	r0, r4
 8015612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015616:	4718      	bx	r3
 8015618:	680e      	ldr	r6, [r1, #0]
 801561a:	4620      	mov	r0, r4
 801561c:	f000 f890 	bl	8015740 <_free_r>
 8015620:	4631      	mov	r1, r6
 8015622:	e7bb      	b.n	801559c <_reclaim_reent+0x1c>
 8015624:	bd70      	pop	{r4, r5, r6, pc}
 8015626:	bf00      	nop
 8015628:	2000003c 	.word	0x2000003c

0801562c <_lseek_r>:
 801562c:	b538      	push	{r3, r4, r5, lr}
 801562e:	4d07      	ldr	r5, [pc, #28]	@ (801564c <_lseek_r+0x20>)
 8015630:	4604      	mov	r4, r0
 8015632:	4608      	mov	r0, r1
 8015634:	4611      	mov	r1, r2
 8015636:	2200      	movs	r2, #0
 8015638:	602a      	str	r2, [r5, #0]
 801563a:	461a      	mov	r2, r3
 801563c:	f7eb fa11 	bl	8000a62 <_lseek>
 8015640:	1c43      	adds	r3, r0, #1
 8015642:	d102      	bne.n	801564a <_lseek_r+0x1e>
 8015644:	682b      	ldr	r3, [r5, #0]
 8015646:	b103      	cbz	r3, 801564a <_lseek_r+0x1e>
 8015648:	6023      	str	r3, [r4, #0]
 801564a:	bd38      	pop	{r3, r4, r5, pc}
 801564c:	2000c204 	.word	0x2000c204

08015650 <_read_r>:
 8015650:	b538      	push	{r3, r4, r5, lr}
 8015652:	4d07      	ldr	r5, [pc, #28]	@ (8015670 <_read_r+0x20>)
 8015654:	4604      	mov	r4, r0
 8015656:	4608      	mov	r0, r1
 8015658:	4611      	mov	r1, r2
 801565a:	2200      	movs	r2, #0
 801565c:	602a      	str	r2, [r5, #0]
 801565e:	461a      	mov	r2, r3
 8015660:	f7eb f99f 	bl	80009a2 <_read>
 8015664:	1c43      	adds	r3, r0, #1
 8015666:	d102      	bne.n	801566e <_read_r+0x1e>
 8015668:	682b      	ldr	r3, [r5, #0]
 801566a:	b103      	cbz	r3, 801566e <_read_r+0x1e>
 801566c:	6023      	str	r3, [r4, #0]
 801566e:	bd38      	pop	{r3, r4, r5, pc}
 8015670:	2000c204 	.word	0x2000c204

08015674 <_write_r>:
 8015674:	b538      	push	{r3, r4, r5, lr}
 8015676:	4d07      	ldr	r5, [pc, #28]	@ (8015694 <_write_r+0x20>)
 8015678:	4604      	mov	r4, r0
 801567a:	4608      	mov	r0, r1
 801567c:	4611      	mov	r1, r2
 801567e:	2200      	movs	r2, #0
 8015680:	602a      	str	r2, [r5, #0]
 8015682:	461a      	mov	r2, r3
 8015684:	f7eb f9aa 	bl	80009dc <_write>
 8015688:	1c43      	adds	r3, r0, #1
 801568a:	d102      	bne.n	8015692 <_write_r+0x1e>
 801568c:	682b      	ldr	r3, [r5, #0]
 801568e:	b103      	cbz	r3, 8015692 <_write_r+0x1e>
 8015690:	6023      	str	r3, [r4, #0]
 8015692:	bd38      	pop	{r3, r4, r5, pc}
 8015694:	2000c204 	.word	0x2000c204

08015698 <__libc_init_array>:
 8015698:	b570      	push	{r4, r5, r6, lr}
 801569a:	4d0d      	ldr	r5, [pc, #52]	@ (80156d0 <__libc_init_array+0x38>)
 801569c:	4c0d      	ldr	r4, [pc, #52]	@ (80156d4 <__libc_init_array+0x3c>)
 801569e:	1b64      	subs	r4, r4, r5
 80156a0:	10a4      	asrs	r4, r4, #2
 80156a2:	2600      	movs	r6, #0
 80156a4:	42a6      	cmp	r6, r4
 80156a6:	d109      	bne.n	80156bc <__libc_init_array+0x24>
 80156a8:	4d0b      	ldr	r5, [pc, #44]	@ (80156d8 <__libc_init_array+0x40>)
 80156aa:	4c0c      	ldr	r4, [pc, #48]	@ (80156dc <__libc_init_array+0x44>)
 80156ac:	f000 ffd8 	bl	8016660 <_init>
 80156b0:	1b64      	subs	r4, r4, r5
 80156b2:	10a4      	asrs	r4, r4, #2
 80156b4:	2600      	movs	r6, #0
 80156b6:	42a6      	cmp	r6, r4
 80156b8:	d105      	bne.n	80156c6 <__libc_init_array+0x2e>
 80156ba:	bd70      	pop	{r4, r5, r6, pc}
 80156bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80156c0:	4798      	blx	r3
 80156c2:	3601      	adds	r6, #1
 80156c4:	e7ee      	b.n	80156a4 <__libc_init_array+0xc>
 80156c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80156ca:	4798      	blx	r3
 80156cc:	3601      	adds	r6, #1
 80156ce:	e7f2      	b.n	80156b6 <__libc_init_array+0x1e>
 80156d0:	08019d10 	.word	0x08019d10
 80156d4:	08019d10 	.word	0x08019d10
 80156d8:	08019d10 	.word	0x08019d10
 80156dc:	08019d14 	.word	0x08019d14

080156e0 <__retarget_lock_init_recursive>:
 80156e0:	4770      	bx	lr

080156e2 <__retarget_lock_acquire_recursive>:
 80156e2:	4770      	bx	lr

080156e4 <__retarget_lock_release_recursive>:
 80156e4:	4770      	bx	lr

080156e6 <memcpy>:
 80156e6:	440a      	add	r2, r1
 80156e8:	4291      	cmp	r1, r2
 80156ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80156ee:	d100      	bne.n	80156f2 <memcpy+0xc>
 80156f0:	4770      	bx	lr
 80156f2:	b510      	push	{r4, lr}
 80156f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156fc:	4291      	cmp	r1, r2
 80156fe:	d1f9      	bne.n	80156f4 <memcpy+0xe>
 8015700:	bd10      	pop	{r4, pc}
	...

08015704 <__assert_func>:
 8015704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015706:	4614      	mov	r4, r2
 8015708:	461a      	mov	r2, r3
 801570a:	4b09      	ldr	r3, [pc, #36]	@ (8015730 <__assert_func+0x2c>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	4605      	mov	r5, r0
 8015710:	68d8      	ldr	r0, [r3, #12]
 8015712:	b954      	cbnz	r4, 801572a <__assert_func+0x26>
 8015714:	4b07      	ldr	r3, [pc, #28]	@ (8015734 <__assert_func+0x30>)
 8015716:	461c      	mov	r4, r3
 8015718:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801571c:	9100      	str	r1, [sp, #0]
 801571e:	462b      	mov	r3, r5
 8015720:	4905      	ldr	r1, [pc, #20]	@ (8015738 <__assert_func+0x34>)
 8015722:	f000 fde1 	bl	80162e8 <fiprintf>
 8015726:	f000 fe95 	bl	8016454 <abort>
 801572a:	4b04      	ldr	r3, [pc, #16]	@ (801573c <__assert_func+0x38>)
 801572c:	e7f4      	b.n	8015718 <__assert_func+0x14>
 801572e:	bf00      	nop
 8015730:	2000003c 	.word	0x2000003c
 8015734:	08019cd2 	.word	0x08019cd2
 8015738:	08019ca4 	.word	0x08019ca4
 801573c:	08019c97 	.word	0x08019c97

08015740 <_free_r>:
 8015740:	b538      	push	{r3, r4, r5, lr}
 8015742:	4605      	mov	r5, r0
 8015744:	2900      	cmp	r1, #0
 8015746:	d041      	beq.n	80157cc <_free_r+0x8c>
 8015748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801574c:	1f0c      	subs	r4, r1, #4
 801574e:	2b00      	cmp	r3, #0
 8015750:	bfb8      	it	lt
 8015752:	18e4      	addlt	r4, r4, r3
 8015754:	f000 f8e8 	bl	8015928 <__malloc_lock>
 8015758:	4a1d      	ldr	r2, [pc, #116]	@ (80157d0 <_free_r+0x90>)
 801575a:	6813      	ldr	r3, [r2, #0]
 801575c:	b933      	cbnz	r3, 801576c <_free_r+0x2c>
 801575e:	6063      	str	r3, [r4, #4]
 8015760:	6014      	str	r4, [r2, #0]
 8015762:	4628      	mov	r0, r5
 8015764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015768:	f000 b8e4 	b.w	8015934 <__malloc_unlock>
 801576c:	42a3      	cmp	r3, r4
 801576e:	d908      	bls.n	8015782 <_free_r+0x42>
 8015770:	6820      	ldr	r0, [r4, #0]
 8015772:	1821      	adds	r1, r4, r0
 8015774:	428b      	cmp	r3, r1
 8015776:	bf01      	itttt	eq
 8015778:	6819      	ldreq	r1, [r3, #0]
 801577a:	685b      	ldreq	r3, [r3, #4]
 801577c:	1809      	addeq	r1, r1, r0
 801577e:	6021      	streq	r1, [r4, #0]
 8015780:	e7ed      	b.n	801575e <_free_r+0x1e>
 8015782:	461a      	mov	r2, r3
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	b10b      	cbz	r3, 801578c <_free_r+0x4c>
 8015788:	42a3      	cmp	r3, r4
 801578a:	d9fa      	bls.n	8015782 <_free_r+0x42>
 801578c:	6811      	ldr	r1, [r2, #0]
 801578e:	1850      	adds	r0, r2, r1
 8015790:	42a0      	cmp	r0, r4
 8015792:	d10b      	bne.n	80157ac <_free_r+0x6c>
 8015794:	6820      	ldr	r0, [r4, #0]
 8015796:	4401      	add	r1, r0
 8015798:	1850      	adds	r0, r2, r1
 801579a:	4283      	cmp	r3, r0
 801579c:	6011      	str	r1, [r2, #0]
 801579e:	d1e0      	bne.n	8015762 <_free_r+0x22>
 80157a0:	6818      	ldr	r0, [r3, #0]
 80157a2:	685b      	ldr	r3, [r3, #4]
 80157a4:	6053      	str	r3, [r2, #4]
 80157a6:	4408      	add	r0, r1
 80157a8:	6010      	str	r0, [r2, #0]
 80157aa:	e7da      	b.n	8015762 <_free_r+0x22>
 80157ac:	d902      	bls.n	80157b4 <_free_r+0x74>
 80157ae:	230c      	movs	r3, #12
 80157b0:	602b      	str	r3, [r5, #0]
 80157b2:	e7d6      	b.n	8015762 <_free_r+0x22>
 80157b4:	6820      	ldr	r0, [r4, #0]
 80157b6:	1821      	adds	r1, r4, r0
 80157b8:	428b      	cmp	r3, r1
 80157ba:	bf04      	itt	eq
 80157bc:	6819      	ldreq	r1, [r3, #0]
 80157be:	685b      	ldreq	r3, [r3, #4]
 80157c0:	6063      	str	r3, [r4, #4]
 80157c2:	bf04      	itt	eq
 80157c4:	1809      	addeq	r1, r1, r0
 80157c6:	6021      	streq	r1, [r4, #0]
 80157c8:	6054      	str	r4, [r2, #4]
 80157ca:	e7ca      	b.n	8015762 <_free_r+0x22>
 80157cc:	bd38      	pop	{r3, r4, r5, pc}
 80157ce:	bf00      	nop
 80157d0:	2000c210 	.word	0x2000c210

080157d4 <malloc>:
 80157d4:	4b02      	ldr	r3, [pc, #8]	@ (80157e0 <malloc+0xc>)
 80157d6:	4601      	mov	r1, r0
 80157d8:	6818      	ldr	r0, [r3, #0]
 80157da:	f000 b825 	b.w	8015828 <_malloc_r>
 80157de:	bf00      	nop
 80157e0:	2000003c 	.word	0x2000003c

080157e4 <sbrk_aligned>:
 80157e4:	b570      	push	{r4, r5, r6, lr}
 80157e6:	4e0f      	ldr	r6, [pc, #60]	@ (8015824 <sbrk_aligned+0x40>)
 80157e8:	460c      	mov	r4, r1
 80157ea:	6831      	ldr	r1, [r6, #0]
 80157ec:	4605      	mov	r5, r0
 80157ee:	b911      	cbnz	r1, 80157f6 <sbrk_aligned+0x12>
 80157f0:	f000 fe20 	bl	8016434 <_sbrk_r>
 80157f4:	6030      	str	r0, [r6, #0]
 80157f6:	4621      	mov	r1, r4
 80157f8:	4628      	mov	r0, r5
 80157fa:	f000 fe1b 	bl	8016434 <_sbrk_r>
 80157fe:	1c43      	adds	r3, r0, #1
 8015800:	d103      	bne.n	801580a <sbrk_aligned+0x26>
 8015802:	f04f 34ff 	mov.w	r4, #4294967295
 8015806:	4620      	mov	r0, r4
 8015808:	bd70      	pop	{r4, r5, r6, pc}
 801580a:	1cc4      	adds	r4, r0, #3
 801580c:	f024 0403 	bic.w	r4, r4, #3
 8015810:	42a0      	cmp	r0, r4
 8015812:	d0f8      	beq.n	8015806 <sbrk_aligned+0x22>
 8015814:	1a21      	subs	r1, r4, r0
 8015816:	4628      	mov	r0, r5
 8015818:	f000 fe0c 	bl	8016434 <_sbrk_r>
 801581c:	3001      	adds	r0, #1
 801581e:	d1f2      	bne.n	8015806 <sbrk_aligned+0x22>
 8015820:	e7ef      	b.n	8015802 <sbrk_aligned+0x1e>
 8015822:	bf00      	nop
 8015824:	2000c20c 	.word	0x2000c20c

08015828 <_malloc_r>:
 8015828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801582c:	1ccd      	adds	r5, r1, #3
 801582e:	f025 0503 	bic.w	r5, r5, #3
 8015832:	3508      	adds	r5, #8
 8015834:	2d0c      	cmp	r5, #12
 8015836:	bf38      	it	cc
 8015838:	250c      	movcc	r5, #12
 801583a:	2d00      	cmp	r5, #0
 801583c:	4606      	mov	r6, r0
 801583e:	db01      	blt.n	8015844 <_malloc_r+0x1c>
 8015840:	42a9      	cmp	r1, r5
 8015842:	d904      	bls.n	801584e <_malloc_r+0x26>
 8015844:	230c      	movs	r3, #12
 8015846:	6033      	str	r3, [r6, #0]
 8015848:	2000      	movs	r0, #0
 801584a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801584e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015924 <_malloc_r+0xfc>
 8015852:	f000 f869 	bl	8015928 <__malloc_lock>
 8015856:	f8d8 3000 	ldr.w	r3, [r8]
 801585a:	461c      	mov	r4, r3
 801585c:	bb44      	cbnz	r4, 80158b0 <_malloc_r+0x88>
 801585e:	4629      	mov	r1, r5
 8015860:	4630      	mov	r0, r6
 8015862:	f7ff ffbf 	bl	80157e4 <sbrk_aligned>
 8015866:	1c43      	adds	r3, r0, #1
 8015868:	4604      	mov	r4, r0
 801586a:	d158      	bne.n	801591e <_malloc_r+0xf6>
 801586c:	f8d8 4000 	ldr.w	r4, [r8]
 8015870:	4627      	mov	r7, r4
 8015872:	2f00      	cmp	r7, #0
 8015874:	d143      	bne.n	80158fe <_malloc_r+0xd6>
 8015876:	2c00      	cmp	r4, #0
 8015878:	d04b      	beq.n	8015912 <_malloc_r+0xea>
 801587a:	6823      	ldr	r3, [r4, #0]
 801587c:	4639      	mov	r1, r7
 801587e:	4630      	mov	r0, r6
 8015880:	eb04 0903 	add.w	r9, r4, r3
 8015884:	f000 fdd6 	bl	8016434 <_sbrk_r>
 8015888:	4581      	cmp	r9, r0
 801588a:	d142      	bne.n	8015912 <_malloc_r+0xea>
 801588c:	6821      	ldr	r1, [r4, #0]
 801588e:	1a6d      	subs	r5, r5, r1
 8015890:	4629      	mov	r1, r5
 8015892:	4630      	mov	r0, r6
 8015894:	f7ff ffa6 	bl	80157e4 <sbrk_aligned>
 8015898:	3001      	adds	r0, #1
 801589a:	d03a      	beq.n	8015912 <_malloc_r+0xea>
 801589c:	6823      	ldr	r3, [r4, #0]
 801589e:	442b      	add	r3, r5
 80158a0:	6023      	str	r3, [r4, #0]
 80158a2:	f8d8 3000 	ldr.w	r3, [r8]
 80158a6:	685a      	ldr	r2, [r3, #4]
 80158a8:	bb62      	cbnz	r2, 8015904 <_malloc_r+0xdc>
 80158aa:	f8c8 7000 	str.w	r7, [r8]
 80158ae:	e00f      	b.n	80158d0 <_malloc_r+0xa8>
 80158b0:	6822      	ldr	r2, [r4, #0]
 80158b2:	1b52      	subs	r2, r2, r5
 80158b4:	d420      	bmi.n	80158f8 <_malloc_r+0xd0>
 80158b6:	2a0b      	cmp	r2, #11
 80158b8:	d917      	bls.n	80158ea <_malloc_r+0xc2>
 80158ba:	1961      	adds	r1, r4, r5
 80158bc:	42a3      	cmp	r3, r4
 80158be:	6025      	str	r5, [r4, #0]
 80158c0:	bf18      	it	ne
 80158c2:	6059      	strne	r1, [r3, #4]
 80158c4:	6863      	ldr	r3, [r4, #4]
 80158c6:	bf08      	it	eq
 80158c8:	f8c8 1000 	streq.w	r1, [r8]
 80158cc:	5162      	str	r2, [r4, r5]
 80158ce:	604b      	str	r3, [r1, #4]
 80158d0:	4630      	mov	r0, r6
 80158d2:	f000 f82f 	bl	8015934 <__malloc_unlock>
 80158d6:	f104 000b 	add.w	r0, r4, #11
 80158da:	1d23      	adds	r3, r4, #4
 80158dc:	f020 0007 	bic.w	r0, r0, #7
 80158e0:	1ac2      	subs	r2, r0, r3
 80158e2:	bf1c      	itt	ne
 80158e4:	1a1b      	subne	r3, r3, r0
 80158e6:	50a3      	strne	r3, [r4, r2]
 80158e8:	e7af      	b.n	801584a <_malloc_r+0x22>
 80158ea:	6862      	ldr	r2, [r4, #4]
 80158ec:	42a3      	cmp	r3, r4
 80158ee:	bf0c      	ite	eq
 80158f0:	f8c8 2000 	streq.w	r2, [r8]
 80158f4:	605a      	strne	r2, [r3, #4]
 80158f6:	e7eb      	b.n	80158d0 <_malloc_r+0xa8>
 80158f8:	4623      	mov	r3, r4
 80158fa:	6864      	ldr	r4, [r4, #4]
 80158fc:	e7ae      	b.n	801585c <_malloc_r+0x34>
 80158fe:	463c      	mov	r4, r7
 8015900:	687f      	ldr	r7, [r7, #4]
 8015902:	e7b6      	b.n	8015872 <_malloc_r+0x4a>
 8015904:	461a      	mov	r2, r3
 8015906:	685b      	ldr	r3, [r3, #4]
 8015908:	42a3      	cmp	r3, r4
 801590a:	d1fb      	bne.n	8015904 <_malloc_r+0xdc>
 801590c:	2300      	movs	r3, #0
 801590e:	6053      	str	r3, [r2, #4]
 8015910:	e7de      	b.n	80158d0 <_malloc_r+0xa8>
 8015912:	230c      	movs	r3, #12
 8015914:	6033      	str	r3, [r6, #0]
 8015916:	4630      	mov	r0, r6
 8015918:	f000 f80c 	bl	8015934 <__malloc_unlock>
 801591c:	e794      	b.n	8015848 <_malloc_r+0x20>
 801591e:	6005      	str	r5, [r0, #0]
 8015920:	e7d6      	b.n	80158d0 <_malloc_r+0xa8>
 8015922:	bf00      	nop
 8015924:	2000c210 	.word	0x2000c210

08015928 <__malloc_lock>:
 8015928:	4801      	ldr	r0, [pc, #4]	@ (8015930 <__malloc_lock+0x8>)
 801592a:	f7ff beda 	b.w	80156e2 <__retarget_lock_acquire_recursive>
 801592e:	bf00      	nop
 8015930:	2000c208 	.word	0x2000c208

08015934 <__malloc_unlock>:
 8015934:	4801      	ldr	r0, [pc, #4]	@ (801593c <__malloc_unlock+0x8>)
 8015936:	f7ff bed5 	b.w	80156e4 <__retarget_lock_release_recursive>
 801593a:	bf00      	nop
 801593c:	2000c208 	.word	0x2000c208

08015940 <__ssputs_r>:
 8015940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015944:	688e      	ldr	r6, [r1, #8]
 8015946:	461f      	mov	r7, r3
 8015948:	42be      	cmp	r6, r7
 801594a:	680b      	ldr	r3, [r1, #0]
 801594c:	4682      	mov	sl, r0
 801594e:	460c      	mov	r4, r1
 8015950:	4690      	mov	r8, r2
 8015952:	d82d      	bhi.n	80159b0 <__ssputs_r+0x70>
 8015954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015958:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801595c:	d026      	beq.n	80159ac <__ssputs_r+0x6c>
 801595e:	6965      	ldr	r5, [r4, #20]
 8015960:	6909      	ldr	r1, [r1, #16]
 8015962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015966:	eba3 0901 	sub.w	r9, r3, r1
 801596a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801596e:	1c7b      	adds	r3, r7, #1
 8015970:	444b      	add	r3, r9
 8015972:	106d      	asrs	r5, r5, #1
 8015974:	429d      	cmp	r5, r3
 8015976:	bf38      	it	cc
 8015978:	461d      	movcc	r5, r3
 801597a:	0553      	lsls	r3, r2, #21
 801597c:	d527      	bpl.n	80159ce <__ssputs_r+0x8e>
 801597e:	4629      	mov	r1, r5
 8015980:	f7ff ff52 	bl	8015828 <_malloc_r>
 8015984:	4606      	mov	r6, r0
 8015986:	b360      	cbz	r0, 80159e2 <__ssputs_r+0xa2>
 8015988:	6921      	ldr	r1, [r4, #16]
 801598a:	464a      	mov	r2, r9
 801598c:	f7ff feab 	bl	80156e6 <memcpy>
 8015990:	89a3      	ldrh	r3, [r4, #12]
 8015992:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801599a:	81a3      	strh	r3, [r4, #12]
 801599c:	6126      	str	r6, [r4, #16]
 801599e:	6165      	str	r5, [r4, #20]
 80159a0:	444e      	add	r6, r9
 80159a2:	eba5 0509 	sub.w	r5, r5, r9
 80159a6:	6026      	str	r6, [r4, #0]
 80159a8:	60a5      	str	r5, [r4, #8]
 80159aa:	463e      	mov	r6, r7
 80159ac:	42be      	cmp	r6, r7
 80159ae:	d900      	bls.n	80159b2 <__ssputs_r+0x72>
 80159b0:	463e      	mov	r6, r7
 80159b2:	6820      	ldr	r0, [r4, #0]
 80159b4:	4632      	mov	r2, r6
 80159b6:	4641      	mov	r1, r8
 80159b8:	f7ff fd9d 	bl	80154f6 <memmove>
 80159bc:	68a3      	ldr	r3, [r4, #8]
 80159be:	1b9b      	subs	r3, r3, r6
 80159c0:	60a3      	str	r3, [r4, #8]
 80159c2:	6823      	ldr	r3, [r4, #0]
 80159c4:	4433      	add	r3, r6
 80159c6:	6023      	str	r3, [r4, #0]
 80159c8:	2000      	movs	r0, #0
 80159ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159ce:	462a      	mov	r2, r5
 80159d0:	f000 fd47 	bl	8016462 <_realloc_r>
 80159d4:	4606      	mov	r6, r0
 80159d6:	2800      	cmp	r0, #0
 80159d8:	d1e0      	bne.n	801599c <__ssputs_r+0x5c>
 80159da:	6921      	ldr	r1, [r4, #16]
 80159dc:	4650      	mov	r0, sl
 80159de:	f7ff feaf 	bl	8015740 <_free_r>
 80159e2:	230c      	movs	r3, #12
 80159e4:	f8ca 3000 	str.w	r3, [sl]
 80159e8:	89a3      	ldrh	r3, [r4, #12]
 80159ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159ee:	81a3      	strh	r3, [r4, #12]
 80159f0:	f04f 30ff 	mov.w	r0, #4294967295
 80159f4:	e7e9      	b.n	80159ca <__ssputs_r+0x8a>
	...

080159f8 <_svfiprintf_r>:
 80159f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159fc:	4698      	mov	r8, r3
 80159fe:	898b      	ldrh	r3, [r1, #12]
 8015a00:	061b      	lsls	r3, r3, #24
 8015a02:	b09d      	sub	sp, #116	@ 0x74
 8015a04:	4607      	mov	r7, r0
 8015a06:	460d      	mov	r5, r1
 8015a08:	4614      	mov	r4, r2
 8015a0a:	d510      	bpl.n	8015a2e <_svfiprintf_r+0x36>
 8015a0c:	690b      	ldr	r3, [r1, #16]
 8015a0e:	b973      	cbnz	r3, 8015a2e <_svfiprintf_r+0x36>
 8015a10:	2140      	movs	r1, #64	@ 0x40
 8015a12:	f7ff ff09 	bl	8015828 <_malloc_r>
 8015a16:	6028      	str	r0, [r5, #0]
 8015a18:	6128      	str	r0, [r5, #16]
 8015a1a:	b930      	cbnz	r0, 8015a2a <_svfiprintf_r+0x32>
 8015a1c:	230c      	movs	r3, #12
 8015a1e:	603b      	str	r3, [r7, #0]
 8015a20:	f04f 30ff 	mov.w	r0, #4294967295
 8015a24:	b01d      	add	sp, #116	@ 0x74
 8015a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a2a:	2340      	movs	r3, #64	@ 0x40
 8015a2c:	616b      	str	r3, [r5, #20]
 8015a2e:	2300      	movs	r3, #0
 8015a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a32:	2320      	movs	r3, #32
 8015a34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a3c:	2330      	movs	r3, #48	@ 0x30
 8015a3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015bdc <_svfiprintf_r+0x1e4>
 8015a42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015a46:	f04f 0901 	mov.w	r9, #1
 8015a4a:	4623      	mov	r3, r4
 8015a4c:	469a      	mov	sl, r3
 8015a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a52:	b10a      	cbz	r2, 8015a58 <_svfiprintf_r+0x60>
 8015a54:	2a25      	cmp	r2, #37	@ 0x25
 8015a56:	d1f9      	bne.n	8015a4c <_svfiprintf_r+0x54>
 8015a58:	ebba 0b04 	subs.w	fp, sl, r4
 8015a5c:	d00b      	beq.n	8015a76 <_svfiprintf_r+0x7e>
 8015a5e:	465b      	mov	r3, fp
 8015a60:	4622      	mov	r2, r4
 8015a62:	4629      	mov	r1, r5
 8015a64:	4638      	mov	r0, r7
 8015a66:	f7ff ff6b 	bl	8015940 <__ssputs_r>
 8015a6a:	3001      	adds	r0, #1
 8015a6c:	f000 80a7 	beq.w	8015bbe <_svfiprintf_r+0x1c6>
 8015a70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015a72:	445a      	add	r2, fp
 8015a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8015a76:	f89a 3000 	ldrb.w	r3, [sl]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	f000 809f 	beq.w	8015bbe <_svfiprintf_r+0x1c6>
 8015a80:	2300      	movs	r3, #0
 8015a82:	f04f 32ff 	mov.w	r2, #4294967295
 8015a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a8a:	f10a 0a01 	add.w	sl, sl, #1
 8015a8e:	9304      	str	r3, [sp, #16]
 8015a90:	9307      	str	r3, [sp, #28]
 8015a92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015a96:	931a      	str	r3, [sp, #104]	@ 0x68
 8015a98:	4654      	mov	r4, sl
 8015a9a:	2205      	movs	r2, #5
 8015a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015aa0:	484e      	ldr	r0, [pc, #312]	@ (8015bdc <_svfiprintf_r+0x1e4>)
 8015aa2:	f7ea fbb5 	bl	8000210 <memchr>
 8015aa6:	9a04      	ldr	r2, [sp, #16]
 8015aa8:	b9d8      	cbnz	r0, 8015ae2 <_svfiprintf_r+0xea>
 8015aaa:	06d0      	lsls	r0, r2, #27
 8015aac:	bf44      	itt	mi
 8015aae:	2320      	movmi	r3, #32
 8015ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ab4:	0711      	lsls	r1, r2, #28
 8015ab6:	bf44      	itt	mi
 8015ab8:	232b      	movmi	r3, #43	@ 0x2b
 8015aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015abe:	f89a 3000 	ldrb.w	r3, [sl]
 8015ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8015ac4:	d015      	beq.n	8015af2 <_svfiprintf_r+0xfa>
 8015ac6:	9a07      	ldr	r2, [sp, #28]
 8015ac8:	4654      	mov	r4, sl
 8015aca:	2000      	movs	r0, #0
 8015acc:	f04f 0c0a 	mov.w	ip, #10
 8015ad0:	4621      	mov	r1, r4
 8015ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ad6:	3b30      	subs	r3, #48	@ 0x30
 8015ad8:	2b09      	cmp	r3, #9
 8015ada:	d94b      	bls.n	8015b74 <_svfiprintf_r+0x17c>
 8015adc:	b1b0      	cbz	r0, 8015b0c <_svfiprintf_r+0x114>
 8015ade:	9207      	str	r2, [sp, #28]
 8015ae0:	e014      	b.n	8015b0c <_svfiprintf_r+0x114>
 8015ae2:	eba0 0308 	sub.w	r3, r0, r8
 8015ae6:	fa09 f303 	lsl.w	r3, r9, r3
 8015aea:	4313      	orrs	r3, r2
 8015aec:	9304      	str	r3, [sp, #16]
 8015aee:	46a2      	mov	sl, r4
 8015af0:	e7d2      	b.n	8015a98 <_svfiprintf_r+0xa0>
 8015af2:	9b03      	ldr	r3, [sp, #12]
 8015af4:	1d19      	adds	r1, r3, #4
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	9103      	str	r1, [sp, #12]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	bfbb      	ittet	lt
 8015afe:	425b      	neglt	r3, r3
 8015b00:	f042 0202 	orrlt.w	r2, r2, #2
 8015b04:	9307      	strge	r3, [sp, #28]
 8015b06:	9307      	strlt	r3, [sp, #28]
 8015b08:	bfb8      	it	lt
 8015b0a:	9204      	strlt	r2, [sp, #16]
 8015b0c:	7823      	ldrb	r3, [r4, #0]
 8015b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015b10:	d10a      	bne.n	8015b28 <_svfiprintf_r+0x130>
 8015b12:	7863      	ldrb	r3, [r4, #1]
 8015b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b16:	d132      	bne.n	8015b7e <_svfiprintf_r+0x186>
 8015b18:	9b03      	ldr	r3, [sp, #12]
 8015b1a:	1d1a      	adds	r2, r3, #4
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	9203      	str	r2, [sp, #12]
 8015b20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015b24:	3402      	adds	r4, #2
 8015b26:	9305      	str	r3, [sp, #20]
 8015b28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015bec <_svfiprintf_r+0x1f4>
 8015b2c:	7821      	ldrb	r1, [r4, #0]
 8015b2e:	2203      	movs	r2, #3
 8015b30:	4650      	mov	r0, sl
 8015b32:	f7ea fb6d 	bl	8000210 <memchr>
 8015b36:	b138      	cbz	r0, 8015b48 <_svfiprintf_r+0x150>
 8015b38:	9b04      	ldr	r3, [sp, #16]
 8015b3a:	eba0 000a 	sub.w	r0, r0, sl
 8015b3e:	2240      	movs	r2, #64	@ 0x40
 8015b40:	4082      	lsls	r2, r0
 8015b42:	4313      	orrs	r3, r2
 8015b44:	3401      	adds	r4, #1
 8015b46:	9304      	str	r3, [sp, #16]
 8015b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b4c:	4824      	ldr	r0, [pc, #144]	@ (8015be0 <_svfiprintf_r+0x1e8>)
 8015b4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015b52:	2206      	movs	r2, #6
 8015b54:	f7ea fb5c 	bl	8000210 <memchr>
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d036      	beq.n	8015bca <_svfiprintf_r+0x1d2>
 8015b5c:	4b21      	ldr	r3, [pc, #132]	@ (8015be4 <_svfiprintf_r+0x1ec>)
 8015b5e:	bb1b      	cbnz	r3, 8015ba8 <_svfiprintf_r+0x1b0>
 8015b60:	9b03      	ldr	r3, [sp, #12]
 8015b62:	3307      	adds	r3, #7
 8015b64:	f023 0307 	bic.w	r3, r3, #7
 8015b68:	3308      	adds	r3, #8
 8015b6a:	9303      	str	r3, [sp, #12]
 8015b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b6e:	4433      	add	r3, r6
 8015b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b72:	e76a      	b.n	8015a4a <_svfiprintf_r+0x52>
 8015b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b78:	460c      	mov	r4, r1
 8015b7a:	2001      	movs	r0, #1
 8015b7c:	e7a8      	b.n	8015ad0 <_svfiprintf_r+0xd8>
 8015b7e:	2300      	movs	r3, #0
 8015b80:	3401      	adds	r4, #1
 8015b82:	9305      	str	r3, [sp, #20]
 8015b84:	4619      	mov	r1, r3
 8015b86:	f04f 0c0a 	mov.w	ip, #10
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b90:	3a30      	subs	r2, #48	@ 0x30
 8015b92:	2a09      	cmp	r2, #9
 8015b94:	d903      	bls.n	8015b9e <_svfiprintf_r+0x1a6>
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d0c6      	beq.n	8015b28 <_svfiprintf_r+0x130>
 8015b9a:	9105      	str	r1, [sp, #20]
 8015b9c:	e7c4      	b.n	8015b28 <_svfiprintf_r+0x130>
 8015b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	e7f0      	b.n	8015b8a <_svfiprintf_r+0x192>
 8015ba8:	ab03      	add	r3, sp, #12
 8015baa:	9300      	str	r3, [sp, #0]
 8015bac:	462a      	mov	r2, r5
 8015bae:	4b0e      	ldr	r3, [pc, #56]	@ (8015be8 <_svfiprintf_r+0x1f0>)
 8015bb0:	a904      	add	r1, sp, #16
 8015bb2:	4638      	mov	r0, r7
 8015bb4:	f3af 8000 	nop.w
 8015bb8:	1c42      	adds	r2, r0, #1
 8015bba:	4606      	mov	r6, r0
 8015bbc:	d1d6      	bne.n	8015b6c <_svfiprintf_r+0x174>
 8015bbe:	89ab      	ldrh	r3, [r5, #12]
 8015bc0:	065b      	lsls	r3, r3, #25
 8015bc2:	f53f af2d 	bmi.w	8015a20 <_svfiprintf_r+0x28>
 8015bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015bc8:	e72c      	b.n	8015a24 <_svfiprintf_r+0x2c>
 8015bca:	ab03      	add	r3, sp, #12
 8015bcc:	9300      	str	r3, [sp, #0]
 8015bce:	462a      	mov	r2, r5
 8015bd0:	4b05      	ldr	r3, [pc, #20]	@ (8015be8 <_svfiprintf_r+0x1f0>)
 8015bd2:	a904      	add	r1, sp, #16
 8015bd4:	4638      	mov	r0, r7
 8015bd6:	f000 f9bb 	bl	8015f50 <_printf_i>
 8015bda:	e7ed      	b.n	8015bb8 <_svfiprintf_r+0x1c0>
 8015bdc:	08019cd3 	.word	0x08019cd3
 8015be0:	08019cdd 	.word	0x08019cdd
 8015be4:	00000000 	.word	0x00000000
 8015be8:	08015941 	.word	0x08015941
 8015bec:	08019cd9 	.word	0x08019cd9

08015bf0 <__sfputc_r>:
 8015bf0:	6893      	ldr	r3, [r2, #8]
 8015bf2:	3b01      	subs	r3, #1
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	b410      	push	{r4}
 8015bf8:	6093      	str	r3, [r2, #8]
 8015bfa:	da08      	bge.n	8015c0e <__sfputc_r+0x1e>
 8015bfc:	6994      	ldr	r4, [r2, #24]
 8015bfe:	42a3      	cmp	r3, r4
 8015c00:	db01      	blt.n	8015c06 <__sfputc_r+0x16>
 8015c02:	290a      	cmp	r1, #10
 8015c04:	d103      	bne.n	8015c0e <__sfputc_r+0x1e>
 8015c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c0a:	f000 bb7f 	b.w	801630c <__swbuf_r>
 8015c0e:	6813      	ldr	r3, [r2, #0]
 8015c10:	1c58      	adds	r0, r3, #1
 8015c12:	6010      	str	r0, [r2, #0]
 8015c14:	7019      	strb	r1, [r3, #0]
 8015c16:	4608      	mov	r0, r1
 8015c18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c1c:	4770      	bx	lr

08015c1e <__sfputs_r>:
 8015c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c20:	4606      	mov	r6, r0
 8015c22:	460f      	mov	r7, r1
 8015c24:	4614      	mov	r4, r2
 8015c26:	18d5      	adds	r5, r2, r3
 8015c28:	42ac      	cmp	r4, r5
 8015c2a:	d101      	bne.n	8015c30 <__sfputs_r+0x12>
 8015c2c:	2000      	movs	r0, #0
 8015c2e:	e007      	b.n	8015c40 <__sfputs_r+0x22>
 8015c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c34:	463a      	mov	r2, r7
 8015c36:	4630      	mov	r0, r6
 8015c38:	f7ff ffda 	bl	8015bf0 <__sfputc_r>
 8015c3c:	1c43      	adds	r3, r0, #1
 8015c3e:	d1f3      	bne.n	8015c28 <__sfputs_r+0xa>
 8015c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015c44 <_vfiprintf_r>:
 8015c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c48:	460d      	mov	r5, r1
 8015c4a:	b09d      	sub	sp, #116	@ 0x74
 8015c4c:	4614      	mov	r4, r2
 8015c4e:	4698      	mov	r8, r3
 8015c50:	4606      	mov	r6, r0
 8015c52:	b118      	cbz	r0, 8015c5c <_vfiprintf_r+0x18>
 8015c54:	6a03      	ldr	r3, [r0, #32]
 8015c56:	b90b      	cbnz	r3, 8015c5c <_vfiprintf_r+0x18>
 8015c58:	f7ff fb7e 	bl	8015358 <__sinit>
 8015c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015c5e:	07d9      	lsls	r1, r3, #31
 8015c60:	d405      	bmi.n	8015c6e <_vfiprintf_r+0x2a>
 8015c62:	89ab      	ldrh	r3, [r5, #12]
 8015c64:	059a      	lsls	r2, r3, #22
 8015c66:	d402      	bmi.n	8015c6e <_vfiprintf_r+0x2a>
 8015c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015c6a:	f7ff fd3a 	bl	80156e2 <__retarget_lock_acquire_recursive>
 8015c6e:	89ab      	ldrh	r3, [r5, #12]
 8015c70:	071b      	lsls	r3, r3, #28
 8015c72:	d501      	bpl.n	8015c78 <_vfiprintf_r+0x34>
 8015c74:	692b      	ldr	r3, [r5, #16]
 8015c76:	b99b      	cbnz	r3, 8015ca0 <_vfiprintf_r+0x5c>
 8015c78:	4629      	mov	r1, r5
 8015c7a:	4630      	mov	r0, r6
 8015c7c:	f000 fb84 	bl	8016388 <__swsetup_r>
 8015c80:	b170      	cbz	r0, 8015ca0 <_vfiprintf_r+0x5c>
 8015c82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015c84:	07dc      	lsls	r4, r3, #31
 8015c86:	d504      	bpl.n	8015c92 <_vfiprintf_r+0x4e>
 8015c88:	f04f 30ff 	mov.w	r0, #4294967295
 8015c8c:	b01d      	add	sp, #116	@ 0x74
 8015c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c92:	89ab      	ldrh	r3, [r5, #12]
 8015c94:	0598      	lsls	r0, r3, #22
 8015c96:	d4f7      	bmi.n	8015c88 <_vfiprintf_r+0x44>
 8015c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015c9a:	f7ff fd23 	bl	80156e4 <__retarget_lock_release_recursive>
 8015c9e:	e7f3      	b.n	8015c88 <_vfiprintf_r+0x44>
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ca4:	2320      	movs	r3, #32
 8015ca6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cae:	2330      	movs	r3, #48	@ 0x30
 8015cb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015e60 <_vfiprintf_r+0x21c>
 8015cb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015cb8:	f04f 0901 	mov.w	r9, #1
 8015cbc:	4623      	mov	r3, r4
 8015cbe:	469a      	mov	sl, r3
 8015cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cc4:	b10a      	cbz	r2, 8015cca <_vfiprintf_r+0x86>
 8015cc6:	2a25      	cmp	r2, #37	@ 0x25
 8015cc8:	d1f9      	bne.n	8015cbe <_vfiprintf_r+0x7a>
 8015cca:	ebba 0b04 	subs.w	fp, sl, r4
 8015cce:	d00b      	beq.n	8015ce8 <_vfiprintf_r+0xa4>
 8015cd0:	465b      	mov	r3, fp
 8015cd2:	4622      	mov	r2, r4
 8015cd4:	4629      	mov	r1, r5
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	f7ff ffa1 	bl	8015c1e <__sfputs_r>
 8015cdc:	3001      	adds	r0, #1
 8015cde:	f000 80a7 	beq.w	8015e30 <_vfiprintf_r+0x1ec>
 8015ce2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ce4:	445a      	add	r2, fp
 8015ce6:	9209      	str	r2, [sp, #36]	@ 0x24
 8015ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	f000 809f 	beq.w	8015e30 <_vfiprintf_r+0x1ec>
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8015cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015cfc:	f10a 0a01 	add.w	sl, sl, #1
 8015d00:	9304      	str	r3, [sp, #16]
 8015d02:	9307      	str	r3, [sp, #28]
 8015d04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015d08:	931a      	str	r3, [sp, #104]	@ 0x68
 8015d0a:	4654      	mov	r4, sl
 8015d0c:	2205      	movs	r2, #5
 8015d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d12:	4853      	ldr	r0, [pc, #332]	@ (8015e60 <_vfiprintf_r+0x21c>)
 8015d14:	f7ea fa7c 	bl	8000210 <memchr>
 8015d18:	9a04      	ldr	r2, [sp, #16]
 8015d1a:	b9d8      	cbnz	r0, 8015d54 <_vfiprintf_r+0x110>
 8015d1c:	06d1      	lsls	r1, r2, #27
 8015d1e:	bf44      	itt	mi
 8015d20:	2320      	movmi	r3, #32
 8015d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d26:	0713      	lsls	r3, r2, #28
 8015d28:	bf44      	itt	mi
 8015d2a:	232b      	movmi	r3, #43	@ 0x2b
 8015d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d30:	f89a 3000 	ldrb.w	r3, [sl]
 8015d34:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d36:	d015      	beq.n	8015d64 <_vfiprintf_r+0x120>
 8015d38:	9a07      	ldr	r2, [sp, #28]
 8015d3a:	4654      	mov	r4, sl
 8015d3c:	2000      	movs	r0, #0
 8015d3e:	f04f 0c0a 	mov.w	ip, #10
 8015d42:	4621      	mov	r1, r4
 8015d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d48:	3b30      	subs	r3, #48	@ 0x30
 8015d4a:	2b09      	cmp	r3, #9
 8015d4c:	d94b      	bls.n	8015de6 <_vfiprintf_r+0x1a2>
 8015d4e:	b1b0      	cbz	r0, 8015d7e <_vfiprintf_r+0x13a>
 8015d50:	9207      	str	r2, [sp, #28]
 8015d52:	e014      	b.n	8015d7e <_vfiprintf_r+0x13a>
 8015d54:	eba0 0308 	sub.w	r3, r0, r8
 8015d58:	fa09 f303 	lsl.w	r3, r9, r3
 8015d5c:	4313      	orrs	r3, r2
 8015d5e:	9304      	str	r3, [sp, #16]
 8015d60:	46a2      	mov	sl, r4
 8015d62:	e7d2      	b.n	8015d0a <_vfiprintf_r+0xc6>
 8015d64:	9b03      	ldr	r3, [sp, #12]
 8015d66:	1d19      	adds	r1, r3, #4
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	9103      	str	r1, [sp, #12]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	bfbb      	ittet	lt
 8015d70:	425b      	neglt	r3, r3
 8015d72:	f042 0202 	orrlt.w	r2, r2, #2
 8015d76:	9307      	strge	r3, [sp, #28]
 8015d78:	9307      	strlt	r3, [sp, #28]
 8015d7a:	bfb8      	it	lt
 8015d7c:	9204      	strlt	r2, [sp, #16]
 8015d7e:	7823      	ldrb	r3, [r4, #0]
 8015d80:	2b2e      	cmp	r3, #46	@ 0x2e
 8015d82:	d10a      	bne.n	8015d9a <_vfiprintf_r+0x156>
 8015d84:	7863      	ldrb	r3, [r4, #1]
 8015d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d88:	d132      	bne.n	8015df0 <_vfiprintf_r+0x1ac>
 8015d8a:	9b03      	ldr	r3, [sp, #12]
 8015d8c:	1d1a      	adds	r2, r3, #4
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	9203      	str	r2, [sp, #12]
 8015d92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015d96:	3402      	adds	r4, #2
 8015d98:	9305      	str	r3, [sp, #20]
 8015d9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015e70 <_vfiprintf_r+0x22c>
 8015d9e:	7821      	ldrb	r1, [r4, #0]
 8015da0:	2203      	movs	r2, #3
 8015da2:	4650      	mov	r0, sl
 8015da4:	f7ea fa34 	bl	8000210 <memchr>
 8015da8:	b138      	cbz	r0, 8015dba <_vfiprintf_r+0x176>
 8015daa:	9b04      	ldr	r3, [sp, #16]
 8015dac:	eba0 000a 	sub.w	r0, r0, sl
 8015db0:	2240      	movs	r2, #64	@ 0x40
 8015db2:	4082      	lsls	r2, r0
 8015db4:	4313      	orrs	r3, r2
 8015db6:	3401      	adds	r4, #1
 8015db8:	9304      	str	r3, [sp, #16]
 8015dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dbe:	4829      	ldr	r0, [pc, #164]	@ (8015e64 <_vfiprintf_r+0x220>)
 8015dc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015dc4:	2206      	movs	r2, #6
 8015dc6:	f7ea fa23 	bl	8000210 <memchr>
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	d03f      	beq.n	8015e4e <_vfiprintf_r+0x20a>
 8015dce:	4b26      	ldr	r3, [pc, #152]	@ (8015e68 <_vfiprintf_r+0x224>)
 8015dd0:	bb1b      	cbnz	r3, 8015e1a <_vfiprintf_r+0x1d6>
 8015dd2:	9b03      	ldr	r3, [sp, #12]
 8015dd4:	3307      	adds	r3, #7
 8015dd6:	f023 0307 	bic.w	r3, r3, #7
 8015dda:	3308      	adds	r3, #8
 8015ddc:	9303      	str	r3, [sp, #12]
 8015dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015de0:	443b      	add	r3, r7
 8015de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8015de4:	e76a      	b.n	8015cbc <_vfiprintf_r+0x78>
 8015de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015dea:	460c      	mov	r4, r1
 8015dec:	2001      	movs	r0, #1
 8015dee:	e7a8      	b.n	8015d42 <_vfiprintf_r+0xfe>
 8015df0:	2300      	movs	r3, #0
 8015df2:	3401      	adds	r4, #1
 8015df4:	9305      	str	r3, [sp, #20]
 8015df6:	4619      	mov	r1, r3
 8015df8:	f04f 0c0a 	mov.w	ip, #10
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e02:	3a30      	subs	r2, #48	@ 0x30
 8015e04:	2a09      	cmp	r2, #9
 8015e06:	d903      	bls.n	8015e10 <_vfiprintf_r+0x1cc>
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d0c6      	beq.n	8015d9a <_vfiprintf_r+0x156>
 8015e0c:	9105      	str	r1, [sp, #20]
 8015e0e:	e7c4      	b.n	8015d9a <_vfiprintf_r+0x156>
 8015e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e14:	4604      	mov	r4, r0
 8015e16:	2301      	movs	r3, #1
 8015e18:	e7f0      	b.n	8015dfc <_vfiprintf_r+0x1b8>
 8015e1a:	ab03      	add	r3, sp, #12
 8015e1c:	9300      	str	r3, [sp, #0]
 8015e1e:	462a      	mov	r2, r5
 8015e20:	4b12      	ldr	r3, [pc, #72]	@ (8015e6c <_vfiprintf_r+0x228>)
 8015e22:	a904      	add	r1, sp, #16
 8015e24:	4630      	mov	r0, r6
 8015e26:	f3af 8000 	nop.w
 8015e2a:	4607      	mov	r7, r0
 8015e2c:	1c78      	adds	r0, r7, #1
 8015e2e:	d1d6      	bne.n	8015dde <_vfiprintf_r+0x19a>
 8015e30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015e32:	07d9      	lsls	r1, r3, #31
 8015e34:	d405      	bmi.n	8015e42 <_vfiprintf_r+0x1fe>
 8015e36:	89ab      	ldrh	r3, [r5, #12]
 8015e38:	059a      	lsls	r2, r3, #22
 8015e3a:	d402      	bmi.n	8015e42 <_vfiprintf_r+0x1fe>
 8015e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015e3e:	f7ff fc51 	bl	80156e4 <__retarget_lock_release_recursive>
 8015e42:	89ab      	ldrh	r3, [r5, #12]
 8015e44:	065b      	lsls	r3, r3, #25
 8015e46:	f53f af1f 	bmi.w	8015c88 <_vfiprintf_r+0x44>
 8015e4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e4c:	e71e      	b.n	8015c8c <_vfiprintf_r+0x48>
 8015e4e:	ab03      	add	r3, sp, #12
 8015e50:	9300      	str	r3, [sp, #0]
 8015e52:	462a      	mov	r2, r5
 8015e54:	4b05      	ldr	r3, [pc, #20]	@ (8015e6c <_vfiprintf_r+0x228>)
 8015e56:	a904      	add	r1, sp, #16
 8015e58:	4630      	mov	r0, r6
 8015e5a:	f000 f879 	bl	8015f50 <_printf_i>
 8015e5e:	e7e4      	b.n	8015e2a <_vfiprintf_r+0x1e6>
 8015e60:	08019cd3 	.word	0x08019cd3
 8015e64:	08019cdd 	.word	0x08019cdd
 8015e68:	00000000 	.word	0x00000000
 8015e6c:	08015c1f 	.word	0x08015c1f
 8015e70:	08019cd9 	.word	0x08019cd9

08015e74 <_printf_common>:
 8015e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e78:	4616      	mov	r6, r2
 8015e7a:	4698      	mov	r8, r3
 8015e7c:	688a      	ldr	r2, [r1, #8]
 8015e7e:	690b      	ldr	r3, [r1, #16]
 8015e80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015e84:	4293      	cmp	r3, r2
 8015e86:	bfb8      	it	lt
 8015e88:	4613      	movlt	r3, r2
 8015e8a:	6033      	str	r3, [r6, #0]
 8015e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015e90:	4607      	mov	r7, r0
 8015e92:	460c      	mov	r4, r1
 8015e94:	b10a      	cbz	r2, 8015e9a <_printf_common+0x26>
 8015e96:	3301      	adds	r3, #1
 8015e98:	6033      	str	r3, [r6, #0]
 8015e9a:	6823      	ldr	r3, [r4, #0]
 8015e9c:	0699      	lsls	r1, r3, #26
 8015e9e:	bf42      	ittt	mi
 8015ea0:	6833      	ldrmi	r3, [r6, #0]
 8015ea2:	3302      	addmi	r3, #2
 8015ea4:	6033      	strmi	r3, [r6, #0]
 8015ea6:	6825      	ldr	r5, [r4, #0]
 8015ea8:	f015 0506 	ands.w	r5, r5, #6
 8015eac:	d106      	bne.n	8015ebc <_printf_common+0x48>
 8015eae:	f104 0a19 	add.w	sl, r4, #25
 8015eb2:	68e3      	ldr	r3, [r4, #12]
 8015eb4:	6832      	ldr	r2, [r6, #0]
 8015eb6:	1a9b      	subs	r3, r3, r2
 8015eb8:	42ab      	cmp	r3, r5
 8015eba:	dc26      	bgt.n	8015f0a <_printf_common+0x96>
 8015ebc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015ec0:	6822      	ldr	r2, [r4, #0]
 8015ec2:	3b00      	subs	r3, #0
 8015ec4:	bf18      	it	ne
 8015ec6:	2301      	movne	r3, #1
 8015ec8:	0692      	lsls	r2, r2, #26
 8015eca:	d42b      	bmi.n	8015f24 <_printf_common+0xb0>
 8015ecc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ed0:	4641      	mov	r1, r8
 8015ed2:	4638      	mov	r0, r7
 8015ed4:	47c8      	blx	r9
 8015ed6:	3001      	adds	r0, #1
 8015ed8:	d01e      	beq.n	8015f18 <_printf_common+0xa4>
 8015eda:	6823      	ldr	r3, [r4, #0]
 8015edc:	6922      	ldr	r2, [r4, #16]
 8015ede:	f003 0306 	and.w	r3, r3, #6
 8015ee2:	2b04      	cmp	r3, #4
 8015ee4:	bf02      	ittt	eq
 8015ee6:	68e5      	ldreq	r5, [r4, #12]
 8015ee8:	6833      	ldreq	r3, [r6, #0]
 8015eea:	1aed      	subeq	r5, r5, r3
 8015eec:	68a3      	ldr	r3, [r4, #8]
 8015eee:	bf0c      	ite	eq
 8015ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ef4:	2500      	movne	r5, #0
 8015ef6:	4293      	cmp	r3, r2
 8015ef8:	bfc4      	itt	gt
 8015efa:	1a9b      	subgt	r3, r3, r2
 8015efc:	18ed      	addgt	r5, r5, r3
 8015efe:	2600      	movs	r6, #0
 8015f00:	341a      	adds	r4, #26
 8015f02:	42b5      	cmp	r5, r6
 8015f04:	d11a      	bne.n	8015f3c <_printf_common+0xc8>
 8015f06:	2000      	movs	r0, #0
 8015f08:	e008      	b.n	8015f1c <_printf_common+0xa8>
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	4652      	mov	r2, sl
 8015f0e:	4641      	mov	r1, r8
 8015f10:	4638      	mov	r0, r7
 8015f12:	47c8      	blx	r9
 8015f14:	3001      	adds	r0, #1
 8015f16:	d103      	bne.n	8015f20 <_printf_common+0xac>
 8015f18:	f04f 30ff 	mov.w	r0, #4294967295
 8015f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f20:	3501      	adds	r5, #1
 8015f22:	e7c6      	b.n	8015eb2 <_printf_common+0x3e>
 8015f24:	18e1      	adds	r1, r4, r3
 8015f26:	1c5a      	adds	r2, r3, #1
 8015f28:	2030      	movs	r0, #48	@ 0x30
 8015f2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015f2e:	4422      	add	r2, r4
 8015f30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015f34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015f38:	3302      	adds	r3, #2
 8015f3a:	e7c7      	b.n	8015ecc <_printf_common+0x58>
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	4622      	mov	r2, r4
 8015f40:	4641      	mov	r1, r8
 8015f42:	4638      	mov	r0, r7
 8015f44:	47c8      	blx	r9
 8015f46:	3001      	adds	r0, #1
 8015f48:	d0e6      	beq.n	8015f18 <_printf_common+0xa4>
 8015f4a:	3601      	adds	r6, #1
 8015f4c:	e7d9      	b.n	8015f02 <_printf_common+0x8e>
	...

08015f50 <_printf_i>:
 8015f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f54:	7e0f      	ldrb	r7, [r1, #24]
 8015f56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015f58:	2f78      	cmp	r7, #120	@ 0x78
 8015f5a:	4691      	mov	r9, r2
 8015f5c:	4680      	mov	r8, r0
 8015f5e:	460c      	mov	r4, r1
 8015f60:	469a      	mov	sl, r3
 8015f62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015f66:	d807      	bhi.n	8015f78 <_printf_i+0x28>
 8015f68:	2f62      	cmp	r7, #98	@ 0x62
 8015f6a:	d80a      	bhi.n	8015f82 <_printf_i+0x32>
 8015f6c:	2f00      	cmp	r7, #0
 8015f6e:	f000 80d2 	beq.w	8016116 <_printf_i+0x1c6>
 8015f72:	2f58      	cmp	r7, #88	@ 0x58
 8015f74:	f000 80b9 	beq.w	80160ea <_printf_i+0x19a>
 8015f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015f80:	e03a      	b.n	8015ff8 <_printf_i+0xa8>
 8015f82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015f86:	2b15      	cmp	r3, #21
 8015f88:	d8f6      	bhi.n	8015f78 <_printf_i+0x28>
 8015f8a:	a101      	add	r1, pc, #4	@ (adr r1, 8015f90 <_printf_i+0x40>)
 8015f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015f90:	08015fe9 	.word	0x08015fe9
 8015f94:	08015ffd 	.word	0x08015ffd
 8015f98:	08015f79 	.word	0x08015f79
 8015f9c:	08015f79 	.word	0x08015f79
 8015fa0:	08015f79 	.word	0x08015f79
 8015fa4:	08015f79 	.word	0x08015f79
 8015fa8:	08015ffd 	.word	0x08015ffd
 8015fac:	08015f79 	.word	0x08015f79
 8015fb0:	08015f79 	.word	0x08015f79
 8015fb4:	08015f79 	.word	0x08015f79
 8015fb8:	08015f79 	.word	0x08015f79
 8015fbc:	080160fd 	.word	0x080160fd
 8015fc0:	08016027 	.word	0x08016027
 8015fc4:	080160b7 	.word	0x080160b7
 8015fc8:	08015f79 	.word	0x08015f79
 8015fcc:	08015f79 	.word	0x08015f79
 8015fd0:	0801611f 	.word	0x0801611f
 8015fd4:	08015f79 	.word	0x08015f79
 8015fd8:	08016027 	.word	0x08016027
 8015fdc:	08015f79 	.word	0x08015f79
 8015fe0:	08015f79 	.word	0x08015f79
 8015fe4:	080160bf 	.word	0x080160bf
 8015fe8:	6833      	ldr	r3, [r6, #0]
 8015fea:	1d1a      	adds	r2, r3, #4
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	6032      	str	r2, [r6, #0]
 8015ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015ff4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015ff8:	2301      	movs	r3, #1
 8015ffa:	e09d      	b.n	8016138 <_printf_i+0x1e8>
 8015ffc:	6833      	ldr	r3, [r6, #0]
 8015ffe:	6820      	ldr	r0, [r4, #0]
 8016000:	1d19      	adds	r1, r3, #4
 8016002:	6031      	str	r1, [r6, #0]
 8016004:	0606      	lsls	r6, r0, #24
 8016006:	d501      	bpl.n	801600c <_printf_i+0xbc>
 8016008:	681d      	ldr	r5, [r3, #0]
 801600a:	e003      	b.n	8016014 <_printf_i+0xc4>
 801600c:	0645      	lsls	r5, r0, #25
 801600e:	d5fb      	bpl.n	8016008 <_printf_i+0xb8>
 8016010:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016014:	2d00      	cmp	r5, #0
 8016016:	da03      	bge.n	8016020 <_printf_i+0xd0>
 8016018:	232d      	movs	r3, #45	@ 0x2d
 801601a:	426d      	negs	r5, r5
 801601c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016020:	4859      	ldr	r0, [pc, #356]	@ (8016188 <_printf_i+0x238>)
 8016022:	230a      	movs	r3, #10
 8016024:	e011      	b.n	801604a <_printf_i+0xfa>
 8016026:	6821      	ldr	r1, [r4, #0]
 8016028:	6833      	ldr	r3, [r6, #0]
 801602a:	0608      	lsls	r0, r1, #24
 801602c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016030:	d402      	bmi.n	8016038 <_printf_i+0xe8>
 8016032:	0649      	lsls	r1, r1, #25
 8016034:	bf48      	it	mi
 8016036:	b2ad      	uxthmi	r5, r5
 8016038:	2f6f      	cmp	r7, #111	@ 0x6f
 801603a:	4853      	ldr	r0, [pc, #332]	@ (8016188 <_printf_i+0x238>)
 801603c:	6033      	str	r3, [r6, #0]
 801603e:	bf14      	ite	ne
 8016040:	230a      	movne	r3, #10
 8016042:	2308      	moveq	r3, #8
 8016044:	2100      	movs	r1, #0
 8016046:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801604a:	6866      	ldr	r6, [r4, #4]
 801604c:	60a6      	str	r6, [r4, #8]
 801604e:	2e00      	cmp	r6, #0
 8016050:	bfa2      	ittt	ge
 8016052:	6821      	ldrge	r1, [r4, #0]
 8016054:	f021 0104 	bicge.w	r1, r1, #4
 8016058:	6021      	strge	r1, [r4, #0]
 801605a:	b90d      	cbnz	r5, 8016060 <_printf_i+0x110>
 801605c:	2e00      	cmp	r6, #0
 801605e:	d04b      	beq.n	80160f8 <_printf_i+0x1a8>
 8016060:	4616      	mov	r6, r2
 8016062:	fbb5 f1f3 	udiv	r1, r5, r3
 8016066:	fb03 5711 	mls	r7, r3, r1, r5
 801606a:	5dc7      	ldrb	r7, [r0, r7]
 801606c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016070:	462f      	mov	r7, r5
 8016072:	42bb      	cmp	r3, r7
 8016074:	460d      	mov	r5, r1
 8016076:	d9f4      	bls.n	8016062 <_printf_i+0x112>
 8016078:	2b08      	cmp	r3, #8
 801607a:	d10b      	bne.n	8016094 <_printf_i+0x144>
 801607c:	6823      	ldr	r3, [r4, #0]
 801607e:	07df      	lsls	r7, r3, #31
 8016080:	d508      	bpl.n	8016094 <_printf_i+0x144>
 8016082:	6923      	ldr	r3, [r4, #16]
 8016084:	6861      	ldr	r1, [r4, #4]
 8016086:	4299      	cmp	r1, r3
 8016088:	bfde      	ittt	le
 801608a:	2330      	movle	r3, #48	@ 0x30
 801608c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016090:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016094:	1b92      	subs	r2, r2, r6
 8016096:	6122      	str	r2, [r4, #16]
 8016098:	f8cd a000 	str.w	sl, [sp]
 801609c:	464b      	mov	r3, r9
 801609e:	aa03      	add	r2, sp, #12
 80160a0:	4621      	mov	r1, r4
 80160a2:	4640      	mov	r0, r8
 80160a4:	f7ff fee6 	bl	8015e74 <_printf_common>
 80160a8:	3001      	adds	r0, #1
 80160aa:	d14a      	bne.n	8016142 <_printf_i+0x1f2>
 80160ac:	f04f 30ff 	mov.w	r0, #4294967295
 80160b0:	b004      	add	sp, #16
 80160b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160b6:	6823      	ldr	r3, [r4, #0]
 80160b8:	f043 0320 	orr.w	r3, r3, #32
 80160bc:	6023      	str	r3, [r4, #0]
 80160be:	4833      	ldr	r0, [pc, #204]	@ (801618c <_printf_i+0x23c>)
 80160c0:	2778      	movs	r7, #120	@ 0x78
 80160c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80160c6:	6823      	ldr	r3, [r4, #0]
 80160c8:	6831      	ldr	r1, [r6, #0]
 80160ca:	061f      	lsls	r7, r3, #24
 80160cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80160d0:	d402      	bmi.n	80160d8 <_printf_i+0x188>
 80160d2:	065f      	lsls	r7, r3, #25
 80160d4:	bf48      	it	mi
 80160d6:	b2ad      	uxthmi	r5, r5
 80160d8:	6031      	str	r1, [r6, #0]
 80160da:	07d9      	lsls	r1, r3, #31
 80160dc:	bf44      	itt	mi
 80160de:	f043 0320 	orrmi.w	r3, r3, #32
 80160e2:	6023      	strmi	r3, [r4, #0]
 80160e4:	b11d      	cbz	r5, 80160ee <_printf_i+0x19e>
 80160e6:	2310      	movs	r3, #16
 80160e8:	e7ac      	b.n	8016044 <_printf_i+0xf4>
 80160ea:	4827      	ldr	r0, [pc, #156]	@ (8016188 <_printf_i+0x238>)
 80160ec:	e7e9      	b.n	80160c2 <_printf_i+0x172>
 80160ee:	6823      	ldr	r3, [r4, #0]
 80160f0:	f023 0320 	bic.w	r3, r3, #32
 80160f4:	6023      	str	r3, [r4, #0]
 80160f6:	e7f6      	b.n	80160e6 <_printf_i+0x196>
 80160f8:	4616      	mov	r6, r2
 80160fa:	e7bd      	b.n	8016078 <_printf_i+0x128>
 80160fc:	6833      	ldr	r3, [r6, #0]
 80160fe:	6825      	ldr	r5, [r4, #0]
 8016100:	6961      	ldr	r1, [r4, #20]
 8016102:	1d18      	adds	r0, r3, #4
 8016104:	6030      	str	r0, [r6, #0]
 8016106:	062e      	lsls	r6, r5, #24
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	d501      	bpl.n	8016110 <_printf_i+0x1c0>
 801610c:	6019      	str	r1, [r3, #0]
 801610e:	e002      	b.n	8016116 <_printf_i+0x1c6>
 8016110:	0668      	lsls	r0, r5, #25
 8016112:	d5fb      	bpl.n	801610c <_printf_i+0x1bc>
 8016114:	8019      	strh	r1, [r3, #0]
 8016116:	2300      	movs	r3, #0
 8016118:	6123      	str	r3, [r4, #16]
 801611a:	4616      	mov	r6, r2
 801611c:	e7bc      	b.n	8016098 <_printf_i+0x148>
 801611e:	6833      	ldr	r3, [r6, #0]
 8016120:	1d1a      	adds	r2, r3, #4
 8016122:	6032      	str	r2, [r6, #0]
 8016124:	681e      	ldr	r6, [r3, #0]
 8016126:	6862      	ldr	r2, [r4, #4]
 8016128:	2100      	movs	r1, #0
 801612a:	4630      	mov	r0, r6
 801612c:	f7ea f870 	bl	8000210 <memchr>
 8016130:	b108      	cbz	r0, 8016136 <_printf_i+0x1e6>
 8016132:	1b80      	subs	r0, r0, r6
 8016134:	6060      	str	r0, [r4, #4]
 8016136:	6863      	ldr	r3, [r4, #4]
 8016138:	6123      	str	r3, [r4, #16]
 801613a:	2300      	movs	r3, #0
 801613c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016140:	e7aa      	b.n	8016098 <_printf_i+0x148>
 8016142:	6923      	ldr	r3, [r4, #16]
 8016144:	4632      	mov	r2, r6
 8016146:	4649      	mov	r1, r9
 8016148:	4640      	mov	r0, r8
 801614a:	47d0      	blx	sl
 801614c:	3001      	adds	r0, #1
 801614e:	d0ad      	beq.n	80160ac <_printf_i+0x15c>
 8016150:	6823      	ldr	r3, [r4, #0]
 8016152:	079b      	lsls	r3, r3, #30
 8016154:	d413      	bmi.n	801617e <_printf_i+0x22e>
 8016156:	68e0      	ldr	r0, [r4, #12]
 8016158:	9b03      	ldr	r3, [sp, #12]
 801615a:	4298      	cmp	r0, r3
 801615c:	bfb8      	it	lt
 801615e:	4618      	movlt	r0, r3
 8016160:	e7a6      	b.n	80160b0 <_printf_i+0x160>
 8016162:	2301      	movs	r3, #1
 8016164:	4632      	mov	r2, r6
 8016166:	4649      	mov	r1, r9
 8016168:	4640      	mov	r0, r8
 801616a:	47d0      	blx	sl
 801616c:	3001      	adds	r0, #1
 801616e:	d09d      	beq.n	80160ac <_printf_i+0x15c>
 8016170:	3501      	adds	r5, #1
 8016172:	68e3      	ldr	r3, [r4, #12]
 8016174:	9903      	ldr	r1, [sp, #12]
 8016176:	1a5b      	subs	r3, r3, r1
 8016178:	42ab      	cmp	r3, r5
 801617a:	dcf2      	bgt.n	8016162 <_printf_i+0x212>
 801617c:	e7eb      	b.n	8016156 <_printf_i+0x206>
 801617e:	2500      	movs	r5, #0
 8016180:	f104 0619 	add.w	r6, r4, #25
 8016184:	e7f5      	b.n	8016172 <_printf_i+0x222>
 8016186:	bf00      	nop
 8016188:	08019ce4 	.word	0x08019ce4
 801618c:	08019cf5 	.word	0x08019cf5

08016190 <__sflush_r>:
 8016190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016198:	0716      	lsls	r6, r2, #28
 801619a:	4605      	mov	r5, r0
 801619c:	460c      	mov	r4, r1
 801619e:	d454      	bmi.n	801624a <__sflush_r+0xba>
 80161a0:	684b      	ldr	r3, [r1, #4]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	dc02      	bgt.n	80161ac <__sflush_r+0x1c>
 80161a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	dd48      	ble.n	801623e <__sflush_r+0xae>
 80161ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80161ae:	2e00      	cmp	r6, #0
 80161b0:	d045      	beq.n	801623e <__sflush_r+0xae>
 80161b2:	2300      	movs	r3, #0
 80161b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80161b8:	682f      	ldr	r7, [r5, #0]
 80161ba:	6a21      	ldr	r1, [r4, #32]
 80161bc:	602b      	str	r3, [r5, #0]
 80161be:	d030      	beq.n	8016222 <__sflush_r+0x92>
 80161c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80161c2:	89a3      	ldrh	r3, [r4, #12]
 80161c4:	0759      	lsls	r1, r3, #29
 80161c6:	d505      	bpl.n	80161d4 <__sflush_r+0x44>
 80161c8:	6863      	ldr	r3, [r4, #4]
 80161ca:	1ad2      	subs	r2, r2, r3
 80161cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80161ce:	b10b      	cbz	r3, 80161d4 <__sflush_r+0x44>
 80161d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80161d2:	1ad2      	subs	r2, r2, r3
 80161d4:	2300      	movs	r3, #0
 80161d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80161d8:	6a21      	ldr	r1, [r4, #32]
 80161da:	4628      	mov	r0, r5
 80161dc:	47b0      	blx	r6
 80161de:	1c43      	adds	r3, r0, #1
 80161e0:	89a3      	ldrh	r3, [r4, #12]
 80161e2:	d106      	bne.n	80161f2 <__sflush_r+0x62>
 80161e4:	6829      	ldr	r1, [r5, #0]
 80161e6:	291d      	cmp	r1, #29
 80161e8:	d82b      	bhi.n	8016242 <__sflush_r+0xb2>
 80161ea:	4a2a      	ldr	r2, [pc, #168]	@ (8016294 <__sflush_r+0x104>)
 80161ec:	410a      	asrs	r2, r1
 80161ee:	07d6      	lsls	r6, r2, #31
 80161f0:	d427      	bmi.n	8016242 <__sflush_r+0xb2>
 80161f2:	2200      	movs	r2, #0
 80161f4:	6062      	str	r2, [r4, #4]
 80161f6:	04d9      	lsls	r1, r3, #19
 80161f8:	6922      	ldr	r2, [r4, #16]
 80161fa:	6022      	str	r2, [r4, #0]
 80161fc:	d504      	bpl.n	8016208 <__sflush_r+0x78>
 80161fe:	1c42      	adds	r2, r0, #1
 8016200:	d101      	bne.n	8016206 <__sflush_r+0x76>
 8016202:	682b      	ldr	r3, [r5, #0]
 8016204:	b903      	cbnz	r3, 8016208 <__sflush_r+0x78>
 8016206:	6560      	str	r0, [r4, #84]	@ 0x54
 8016208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801620a:	602f      	str	r7, [r5, #0]
 801620c:	b1b9      	cbz	r1, 801623e <__sflush_r+0xae>
 801620e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016212:	4299      	cmp	r1, r3
 8016214:	d002      	beq.n	801621c <__sflush_r+0x8c>
 8016216:	4628      	mov	r0, r5
 8016218:	f7ff fa92 	bl	8015740 <_free_r>
 801621c:	2300      	movs	r3, #0
 801621e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016220:	e00d      	b.n	801623e <__sflush_r+0xae>
 8016222:	2301      	movs	r3, #1
 8016224:	4628      	mov	r0, r5
 8016226:	47b0      	blx	r6
 8016228:	4602      	mov	r2, r0
 801622a:	1c50      	adds	r0, r2, #1
 801622c:	d1c9      	bne.n	80161c2 <__sflush_r+0x32>
 801622e:	682b      	ldr	r3, [r5, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d0c6      	beq.n	80161c2 <__sflush_r+0x32>
 8016234:	2b1d      	cmp	r3, #29
 8016236:	d001      	beq.n	801623c <__sflush_r+0xac>
 8016238:	2b16      	cmp	r3, #22
 801623a:	d11e      	bne.n	801627a <__sflush_r+0xea>
 801623c:	602f      	str	r7, [r5, #0]
 801623e:	2000      	movs	r0, #0
 8016240:	e022      	b.n	8016288 <__sflush_r+0xf8>
 8016242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016246:	b21b      	sxth	r3, r3
 8016248:	e01b      	b.n	8016282 <__sflush_r+0xf2>
 801624a:	690f      	ldr	r7, [r1, #16]
 801624c:	2f00      	cmp	r7, #0
 801624e:	d0f6      	beq.n	801623e <__sflush_r+0xae>
 8016250:	0793      	lsls	r3, r2, #30
 8016252:	680e      	ldr	r6, [r1, #0]
 8016254:	bf08      	it	eq
 8016256:	694b      	ldreq	r3, [r1, #20]
 8016258:	600f      	str	r7, [r1, #0]
 801625a:	bf18      	it	ne
 801625c:	2300      	movne	r3, #0
 801625e:	eba6 0807 	sub.w	r8, r6, r7
 8016262:	608b      	str	r3, [r1, #8]
 8016264:	f1b8 0f00 	cmp.w	r8, #0
 8016268:	dde9      	ble.n	801623e <__sflush_r+0xae>
 801626a:	6a21      	ldr	r1, [r4, #32]
 801626c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801626e:	4643      	mov	r3, r8
 8016270:	463a      	mov	r2, r7
 8016272:	4628      	mov	r0, r5
 8016274:	47b0      	blx	r6
 8016276:	2800      	cmp	r0, #0
 8016278:	dc08      	bgt.n	801628c <__sflush_r+0xfc>
 801627a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801627e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016282:	81a3      	strh	r3, [r4, #12]
 8016284:	f04f 30ff 	mov.w	r0, #4294967295
 8016288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801628c:	4407      	add	r7, r0
 801628e:	eba8 0800 	sub.w	r8, r8, r0
 8016292:	e7e7      	b.n	8016264 <__sflush_r+0xd4>
 8016294:	dfbffffe 	.word	0xdfbffffe

08016298 <_fflush_r>:
 8016298:	b538      	push	{r3, r4, r5, lr}
 801629a:	690b      	ldr	r3, [r1, #16]
 801629c:	4605      	mov	r5, r0
 801629e:	460c      	mov	r4, r1
 80162a0:	b913      	cbnz	r3, 80162a8 <_fflush_r+0x10>
 80162a2:	2500      	movs	r5, #0
 80162a4:	4628      	mov	r0, r5
 80162a6:	bd38      	pop	{r3, r4, r5, pc}
 80162a8:	b118      	cbz	r0, 80162b2 <_fflush_r+0x1a>
 80162aa:	6a03      	ldr	r3, [r0, #32]
 80162ac:	b90b      	cbnz	r3, 80162b2 <_fflush_r+0x1a>
 80162ae:	f7ff f853 	bl	8015358 <__sinit>
 80162b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d0f3      	beq.n	80162a2 <_fflush_r+0xa>
 80162ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80162bc:	07d0      	lsls	r0, r2, #31
 80162be:	d404      	bmi.n	80162ca <_fflush_r+0x32>
 80162c0:	0599      	lsls	r1, r3, #22
 80162c2:	d402      	bmi.n	80162ca <_fflush_r+0x32>
 80162c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80162c6:	f7ff fa0c 	bl	80156e2 <__retarget_lock_acquire_recursive>
 80162ca:	4628      	mov	r0, r5
 80162cc:	4621      	mov	r1, r4
 80162ce:	f7ff ff5f 	bl	8016190 <__sflush_r>
 80162d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80162d4:	07da      	lsls	r2, r3, #31
 80162d6:	4605      	mov	r5, r0
 80162d8:	d4e4      	bmi.n	80162a4 <_fflush_r+0xc>
 80162da:	89a3      	ldrh	r3, [r4, #12]
 80162dc:	059b      	lsls	r3, r3, #22
 80162de:	d4e1      	bmi.n	80162a4 <_fflush_r+0xc>
 80162e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80162e2:	f7ff f9ff 	bl	80156e4 <__retarget_lock_release_recursive>
 80162e6:	e7dd      	b.n	80162a4 <_fflush_r+0xc>

080162e8 <fiprintf>:
 80162e8:	b40e      	push	{r1, r2, r3}
 80162ea:	b503      	push	{r0, r1, lr}
 80162ec:	4601      	mov	r1, r0
 80162ee:	ab03      	add	r3, sp, #12
 80162f0:	4805      	ldr	r0, [pc, #20]	@ (8016308 <fiprintf+0x20>)
 80162f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80162f6:	6800      	ldr	r0, [r0, #0]
 80162f8:	9301      	str	r3, [sp, #4]
 80162fa:	f7ff fca3 	bl	8015c44 <_vfiprintf_r>
 80162fe:	b002      	add	sp, #8
 8016300:	f85d eb04 	ldr.w	lr, [sp], #4
 8016304:	b003      	add	sp, #12
 8016306:	4770      	bx	lr
 8016308:	2000003c 	.word	0x2000003c

0801630c <__swbuf_r>:
 801630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801630e:	460e      	mov	r6, r1
 8016310:	4614      	mov	r4, r2
 8016312:	4605      	mov	r5, r0
 8016314:	b118      	cbz	r0, 801631e <__swbuf_r+0x12>
 8016316:	6a03      	ldr	r3, [r0, #32]
 8016318:	b90b      	cbnz	r3, 801631e <__swbuf_r+0x12>
 801631a:	f7ff f81d 	bl	8015358 <__sinit>
 801631e:	69a3      	ldr	r3, [r4, #24]
 8016320:	60a3      	str	r3, [r4, #8]
 8016322:	89a3      	ldrh	r3, [r4, #12]
 8016324:	071a      	lsls	r2, r3, #28
 8016326:	d501      	bpl.n	801632c <__swbuf_r+0x20>
 8016328:	6923      	ldr	r3, [r4, #16]
 801632a:	b943      	cbnz	r3, 801633e <__swbuf_r+0x32>
 801632c:	4621      	mov	r1, r4
 801632e:	4628      	mov	r0, r5
 8016330:	f000 f82a 	bl	8016388 <__swsetup_r>
 8016334:	b118      	cbz	r0, 801633e <__swbuf_r+0x32>
 8016336:	f04f 37ff 	mov.w	r7, #4294967295
 801633a:	4638      	mov	r0, r7
 801633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801633e:	6823      	ldr	r3, [r4, #0]
 8016340:	6922      	ldr	r2, [r4, #16]
 8016342:	1a98      	subs	r0, r3, r2
 8016344:	6963      	ldr	r3, [r4, #20]
 8016346:	b2f6      	uxtb	r6, r6
 8016348:	4283      	cmp	r3, r0
 801634a:	4637      	mov	r7, r6
 801634c:	dc05      	bgt.n	801635a <__swbuf_r+0x4e>
 801634e:	4621      	mov	r1, r4
 8016350:	4628      	mov	r0, r5
 8016352:	f7ff ffa1 	bl	8016298 <_fflush_r>
 8016356:	2800      	cmp	r0, #0
 8016358:	d1ed      	bne.n	8016336 <__swbuf_r+0x2a>
 801635a:	68a3      	ldr	r3, [r4, #8]
 801635c:	3b01      	subs	r3, #1
 801635e:	60a3      	str	r3, [r4, #8]
 8016360:	6823      	ldr	r3, [r4, #0]
 8016362:	1c5a      	adds	r2, r3, #1
 8016364:	6022      	str	r2, [r4, #0]
 8016366:	701e      	strb	r6, [r3, #0]
 8016368:	6962      	ldr	r2, [r4, #20]
 801636a:	1c43      	adds	r3, r0, #1
 801636c:	429a      	cmp	r2, r3
 801636e:	d004      	beq.n	801637a <__swbuf_r+0x6e>
 8016370:	89a3      	ldrh	r3, [r4, #12]
 8016372:	07db      	lsls	r3, r3, #31
 8016374:	d5e1      	bpl.n	801633a <__swbuf_r+0x2e>
 8016376:	2e0a      	cmp	r6, #10
 8016378:	d1df      	bne.n	801633a <__swbuf_r+0x2e>
 801637a:	4621      	mov	r1, r4
 801637c:	4628      	mov	r0, r5
 801637e:	f7ff ff8b 	bl	8016298 <_fflush_r>
 8016382:	2800      	cmp	r0, #0
 8016384:	d0d9      	beq.n	801633a <__swbuf_r+0x2e>
 8016386:	e7d6      	b.n	8016336 <__swbuf_r+0x2a>

08016388 <__swsetup_r>:
 8016388:	b538      	push	{r3, r4, r5, lr}
 801638a:	4b29      	ldr	r3, [pc, #164]	@ (8016430 <__swsetup_r+0xa8>)
 801638c:	4605      	mov	r5, r0
 801638e:	6818      	ldr	r0, [r3, #0]
 8016390:	460c      	mov	r4, r1
 8016392:	b118      	cbz	r0, 801639c <__swsetup_r+0x14>
 8016394:	6a03      	ldr	r3, [r0, #32]
 8016396:	b90b      	cbnz	r3, 801639c <__swsetup_r+0x14>
 8016398:	f7fe ffde 	bl	8015358 <__sinit>
 801639c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163a0:	0719      	lsls	r1, r3, #28
 80163a2:	d422      	bmi.n	80163ea <__swsetup_r+0x62>
 80163a4:	06da      	lsls	r2, r3, #27
 80163a6:	d407      	bmi.n	80163b8 <__swsetup_r+0x30>
 80163a8:	2209      	movs	r2, #9
 80163aa:	602a      	str	r2, [r5, #0]
 80163ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163b0:	81a3      	strh	r3, [r4, #12]
 80163b2:	f04f 30ff 	mov.w	r0, #4294967295
 80163b6:	e033      	b.n	8016420 <__swsetup_r+0x98>
 80163b8:	0758      	lsls	r0, r3, #29
 80163ba:	d512      	bpl.n	80163e2 <__swsetup_r+0x5a>
 80163bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80163be:	b141      	cbz	r1, 80163d2 <__swsetup_r+0x4a>
 80163c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80163c4:	4299      	cmp	r1, r3
 80163c6:	d002      	beq.n	80163ce <__swsetup_r+0x46>
 80163c8:	4628      	mov	r0, r5
 80163ca:	f7ff f9b9 	bl	8015740 <_free_r>
 80163ce:	2300      	movs	r3, #0
 80163d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80163d2:	89a3      	ldrh	r3, [r4, #12]
 80163d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80163d8:	81a3      	strh	r3, [r4, #12]
 80163da:	2300      	movs	r3, #0
 80163dc:	6063      	str	r3, [r4, #4]
 80163de:	6923      	ldr	r3, [r4, #16]
 80163e0:	6023      	str	r3, [r4, #0]
 80163e2:	89a3      	ldrh	r3, [r4, #12]
 80163e4:	f043 0308 	orr.w	r3, r3, #8
 80163e8:	81a3      	strh	r3, [r4, #12]
 80163ea:	6923      	ldr	r3, [r4, #16]
 80163ec:	b94b      	cbnz	r3, 8016402 <__swsetup_r+0x7a>
 80163ee:	89a3      	ldrh	r3, [r4, #12]
 80163f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80163f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80163f8:	d003      	beq.n	8016402 <__swsetup_r+0x7a>
 80163fa:	4621      	mov	r1, r4
 80163fc:	4628      	mov	r0, r5
 80163fe:	f000 f884 	bl	801650a <__smakebuf_r>
 8016402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016406:	f013 0201 	ands.w	r2, r3, #1
 801640a:	d00a      	beq.n	8016422 <__swsetup_r+0x9a>
 801640c:	2200      	movs	r2, #0
 801640e:	60a2      	str	r2, [r4, #8]
 8016410:	6962      	ldr	r2, [r4, #20]
 8016412:	4252      	negs	r2, r2
 8016414:	61a2      	str	r2, [r4, #24]
 8016416:	6922      	ldr	r2, [r4, #16]
 8016418:	b942      	cbnz	r2, 801642c <__swsetup_r+0xa4>
 801641a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801641e:	d1c5      	bne.n	80163ac <__swsetup_r+0x24>
 8016420:	bd38      	pop	{r3, r4, r5, pc}
 8016422:	0799      	lsls	r1, r3, #30
 8016424:	bf58      	it	pl
 8016426:	6962      	ldrpl	r2, [r4, #20]
 8016428:	60a2      	str	r2, [r4, #8]
 801642a:	e7f4      	b.n	8016416 <__swsetup_r+0x8e>
 801642c:	2000      	movs	r0, #0
 801642e:	e7f7      	b.n	8016420 <__swsetup_r+0x98>
 8016430:	2000003c 	.word	0x2000003c

08016434 <_sbrk_r>:
 8016434:	b538      	push	{r3, r4, r5, lr}
 8016436:	4d06      	ldr	r5, [pc, #24]	@ (8016450 <_sbrk_r+0x1c>)
 8016438:	2300      	movs	r3, #0
 801643a:	4604      	mov	r4, r0
 801643c:	4608      	mov	r0, r1
 801643e:	602b      	str	r3, [r5, #0]
 8016440:	f7ea fb1c 	bl	8000a7c <_sbrk>
 8016444:	1c43      	adds	r3, r0, #1
 8016446:	d102      	bne.n	801644e <_sbrk_r+0x1a>
 8016448:	682b      	ldr	r3, [r5, #0]
 801644a:	b103      	cbz	r3, 801644e <_sbrk_r+0x1a>
 801644c:	6023      	str	r3, [r4, #0]
 801644e:	bd38      	pop	{r3, r4, r5, pc}
 8016450:	2000c204 	.word	0x2000c204

08016454 <abort>:
 8016454:	b508      	push	{r3, lr}
 8016456:	2006      	movs	r0, #6
 8016458:	f000 f8bc 	bl	80165d4 <raise>
 801645c:	2001      	movs	r0, #1
 801645e:	f7ea fa95 	bl	800098c <_exit>

08016462 <_realloc_r>:
 8016462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016466:	4680      	mov	r8, r0
 8016468:	4615      	mov	r5, r2
 801646a:	460c      	mov	r4, r1
 801646c:	b921      	cbnz	r1, 8016478 <_realloc_r+0x16>
 801646e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016472:	4611      	mov	r1, r2
 8016474:	f7ff b9d8 	b.w	8015828 <_malloc_r>
 8016478:	b92a      	cbnz	r2, 8016486 <_realloc_r+0x24>
 801647a:	f7ff f961 	bl	8015740 <_free_r>
 801647e:	2400      	movs	r4, #0
 8016480:	4620      	mov	r0, r4
 8016482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016486:	f000 f8e3 	bl	8016650 <_malloc_usable_size_r>
 801648a:	4285      	cmp	r5, r0
 801648c:	4606      	mov	r6, r0
 801648e:	d802      	bhi.n	8016496 <_realloc_r+0x34>
 8016490:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016494:	d8f4      	bhi.n	8016480 <_realloc_r+0x1e>
 8016496:	4629      	mov	r1, r5
 8016498:	4640      	mov	r0, r8
 801649a:	f7ff f9c5 	bl	8015828 <_malloc_r>
 801649e:	4607      	mov	r7, r0
 80164a0:	2800      	cmp	r0, #0
 80164a2:	d0ec      	beq.n	801647e <_realloc_r+0x1c>
 80164a4:	42b5      	cmp	r5, r6
 80164a6:	462a      	mov	r2, r5
 80164a8:	4621      	mov	r1, r4
 80164aa:	bf28      	it	cs
 80164ac:	4632      	movcs	r2, r6
 80164ae:	f7ff f91a 	bl	80156e6 <memcpy>
 80164b2:	4621      	mov	r1, r4
 80164b4:	4640      	mov	r0, r8
 80164b6:	f7ff f943 	bl	8015740 <_free_r>
 80164ba:	463c      	mov	r4, r7
 80164bc:	e7e0      	b.n	8016480 <_realloc_r+0x1e>

080164be <__swhatbuf_r>:
 80164be:	b570      	push	{r4, r5, r6, lr}
 80164c0:	460c      	mov	r4, r1
 80164c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164c6:	2900      	cmp	r1, #0
 80164c8:	b096      	sub	sp, #88	@ 0x58
 80164ca:	4615      	mov	r5, r2
 80164cc:	461e      	mov	r6, r3
 80164ce:	da0d      	bge.n	80164ec <__swhatbuf_r+0x2e>
 80164d0:	89a3      	ldrh	r3, [r4, #12]
 80164d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80164d6:	f04f 0100 	mov.w	r1, #0
 80164da:	bf14      	ite	ne
 80164dc:	2340      	movne	r3, #64	@ 0x40
 80164de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80164e2:	2000      	movs	r0, #0
 80164e4:	6031      	str	r1, [r6, #0]
 80164e6:	602b      	str	r3, [r5, #0]
 80164e8:	b016      	add	sp, #88	@ 0x58
 80164ea:	bd70      	pop	{r4, r5, r6, pc}
 80164ec:	466a      	mov	r2, sp
 80164ee:	f000 f879 	bl	80165e4 <_fstat_r>
 80164f2:	2800      	cmp	r0, #0
 80164f4:	dbec      	blt.n	80164d0 <__swhatbuf_r+0x12>
 80164f6:	9901      	ldr	r1, [sp, #4]
 80164f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80164fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016500:	4259      	negs	r1, r3
 8016502:	4159      	adcs	r1, r3
 8016504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016508:	e7eb      	b.n	80164e2 <__swhatbuf_r+0x24>

0801650a <__smakebuf_r>:
 801650a:	898b      	ldrh	r3, [r1, #12]
 801650c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801650e:	079d      	lsls	r5, r3, #30
 8016510:	4606      	mov	r6, r0
 8016512:	460c      	mov	r4, r1
 8016514:	d507      	bpl.n	8016526 <__smakebuf_r+0x1c>
 8016516:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801651a:	6023      	str	r3, [r4, #0]
 801651c:	6123      	str	r3, [r4, #16]
 801651e:	2301      	movs	r3, #1
 8016520:	6163      	str	r3, [r4, #20]
 8016522:	b003      	add	sp, #12
 8016524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016526:	ab01      	add	r3, sp, #4
 8016528:	466a      	mov	r2, sp
 801652a:	f7ff ffc8 	bl	80164be <__swhatbuf_r>
 801652e:	9f00      	ldr	r7, [sp, #0]
 8016530:	4605      	mov	r5, r0
 8016532:	4639      	mov	r1, r7
 8016534:	4630      	mov	r0, r6
 8016536:	f7ff f977 	bl	8015828 <_malloc_r>
 801653a:	b948      	cbnz	r0, 8016550 <__smakebuf_r+0x46>
 801653c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016540:	059a      	lsls	r2, r3, #22
 8016542:	d4ee      	bmi.n	8016522 <__smakebuf_r+0x18>
 8016544:	f023 0303 	bic.w	r3, r3, #3
 8016548:	f043 0302 	orr.w	r3, r3, #2
 801654c:	81a3      	strh	r3, [r4, #12]
 801654e:	e7e2      	b.n	8016516 <__smakebuf_r+0xc>
 8016550:	89a3      	ldrh	r3, [r4, #12]
 8016552:	6020      	str	r0, [r4, #0]
 8016554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016558:	81a3      	strh	r3, [r4, #12]
 801655a:	9b01      	ldr	r3, [sp, #4]
 801655c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016560:	b15b      	cbz	r3, 801657a <__smakebuf_r+0x70>
 8016562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016566:	4630      	mov	r0, r6
 8016568:	f000 f84e 	bl	8016608 <_isatty_r>
 801656c:	b128      	cbz	r0, 801657a <__smakebuf_r+0x70>
 801656e:	89a3      	ldrh	r3, [r4, #12]
 8016570:	f023 0303 	bic.w	r3, r3, #3
 8016574:	f043 0301 	orr.w	r3, r3, #1
 8016578:	81a3      	strh	r3, [r4, #12]
 801657a:	89a3      	ldrh	r3, [r4, #12]
 801657c:	431d      	orrs	r5, r3
 801657e:	81a5      	strh	r5, [r4, #12]
 8016580:	e7cf      	b.n	8016522 <__smakebuf_r+0x18>

08016582 <_raise_r>:
 8016582:	291f      	cmp	r1, #31
 8016584:	b538      	push	{r3, r4, r5, lr}
 8016586:	4605      	mov	r5, r0
 8016588:	460c      	mov	r4, r1
 801658a:	d904      	bls.n	8016596 <_raise_r+0x14>
 801658c:	2316      	movs	r3, #22
 801658e:	6003      	str	r3, [r0, #0]
 8016590:	f04f 30ff 	mov.w	r0, #4294967295
 8016594:	bd38      	pop	{r3, r4, r5, pc}
 8016596:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016598:	b112      	cbz	r2, 80165a0 <_raise_r+0x1e>
 801659a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801659e:	b94b      	cbnz	r3, 80165b4 <_raise_r+0x32>
 80165a0:	4628      	mov	r0, r5
 80165a2:	f000 f853 	bl	801664c <_getpid_r>
 80165a6:	4622      	mov	r2, r4
 80165a8:	4601      	mov	r1, r0
 80165aa:	4628      	mov	r0, r5
 80165ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165b0:	f000 b83a 	b.w	8016628 <_kill_r>
 80165b4:	2b01      	cmp	r3, #1
 80165b6:	d00a      	beq.n	80165ce <_raise_r+0x4c>
 80165b8:	1c59      	adds	r1, r3, #1
 80165ba:	d103      	bne.n	80165c4 <_raise_r+0x42>
 80165bc:	2316      	movs	r3, #22
 80165be:	6003      	str	r3, [r0, #0]
 80165c0:	2001      	movs	r0, #1
 80165c2:	e7e7      	b.n	8016594 <_raise_r+0x12>
 80165c4:	2100      	movs	r1, #0
 80165c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80165ca:	4620      	mov	r0, r4
 80165cc:	4798      	blx	r3
 80165ce:	2000      	movs	r0, #0
 80165d0:	e7e0      	b.n	8016594 <_raise_r+0x12>
	...

080165d4 <raise>:
 80165d4:	4b02      	ldr	r3, [pc, #8]	@ (80165e0 <raise+0xc>)
 80165d6:	4601      	mov	r1, r0
 80165d8:	6818      	ldr	r0, [r3, #0]
 80165da:	f7ff bfd2 	b.w	8016582 <_raise_r>
 80165de:	bf00      	nop
 80165e0:	2000003c 	.word	0x2000003c

080165e4 <_fstat_r>:
 80165e4:	b538      	push	{r3, r4, r5, lr}
 80165e6:	4d07      	ldr	r5, [pc, #28]	@ (8016604 <_fstat_r+0x20>)
 80165e8:	2300      	movs	r3, #0
 80165ea:	4604      	mov	r4, r0
 80165ec:	4608      	mov	r0, r1
 80165ee:	4611      	mov	r1, r2
 80165f0:	602b      	str	r3, [r5, #0]
 80165f2:	f7ea fa1b 	bl	8000a2c <_fstat>
 80165f6:	1c43      	adds	r3, r0, #1
 80165f8:	d102      	bne.n	8016600 <_fstat_r+0x1c>
 80165fa:	682b      	ldr	r3, [r5, #0]
 80165fc:	b103      	cbz	r3, 8016600 <_fstat_r+0x1c>
 80165fe:	6023      	str	r3, [r4, #0]
 8016600:	bd38      	pop	{r3, r4, r5, pc}
 8016602:	bf00      	nop
 8016604:	2000c204 	.word	0x2000c204

08016608 <_isatty_r>:
 8016608:	b538      	push	{r3, r4, r5, lr}
 801660a:	4d06      	ldr	r5, [pc, #24]	@ (8016624 <_isatty_r+0x1c>)
 801660c:	2300      	movs	r3, #0
 801660e:	4604      	mov	r4, r0
 8016610:	4608      	mov	r0, r1
 8016612:	602b      	str	r3, [r5, #0]
 8016614:	f7ea fa1a 	bl	8000a4c <_isatty>
 8016618:	1c43      	adds	r3, r0, #1
 801661a:	d102      	bne.n	8016622 <_isatty_r+0x1a>
 801661c:	682b      	ldr	r3, [r5, #0]
 801661e:	b103      	cbz	r3, 8016622 <_isatty_r+0x1a>
 8016620:	6023      	str	r3, [r4, #0]
 8016622:	bd38      	pop	{r3, r4, r5, pc}
 8016624:	2000c204 	.word	0x2000c204

08016628 <_kill_r>:
 8016628:	b538      	push	{r3, r4, r5, lr}
 801662a:	4d07      	ldr	r5, [pc, #28]	@ (8016648 <_kill_r+0x20>)
 801662c:	2300      	movs	r3, #0
 801662e:	4604      	mov	r4, r0
 8016630:	4608      	mov	r0, r1
 8016632:	4611      	mov	r1, r2
 8016634:	602b      	str	r3, [r5, #0]
 8016636:	f7ea f997 	bl	8000968 <_kill>
 801663a:	1c43      	adds	r3, r0, #1
 801663c:	d102      	bne.n	8016644 <_kill_r+0x1c>
 801663e:	682b      	ldr	r3, [r5, #0]
 8016640:	b103      	cbz	r3, 8016644 <_kill_r+0x1c>
 8016642:	6023      	str	r3, [r4, #0]
 8016644:	bd38      	pop	{r3, r4, r5, pc}
 8016646:	bf00      	nop
 8016648:	2000c204 	.word	0x2000c204

0801664c <_getpid_r>:
 801664c:	f7ea b984 	b.w	8000958 <_getpid>

08016650 <_malloc_usable_size_r>:
 8016650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016654:	1f18      	subs	r0, r3, #4
 8016656:	2b00      	cmp	r3, #0
 8016658:	bfbc      	itt	lt
 801665a:	580b      	ldrlt	r3, [r1, r0]
 801665c:	18c0      	addlt	r0, r0, r3
 801665e:	4770      	bx	lr

08016660 <_init>:
 8016660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016662:	bf00      	nop
 8016664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016666:	bc08      	pop	{r3}
 8016668:	469e      	mov	lr, r3
 801666a:	4770      	bx	lr

0801666c <_fini>:
 801666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801666e:	bf00      	nop
 8016670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016672:	bc08      	pop	{r3}
 8016674:	469e      	mov	lr, r3
 8016676:	4770      	bx	lr
