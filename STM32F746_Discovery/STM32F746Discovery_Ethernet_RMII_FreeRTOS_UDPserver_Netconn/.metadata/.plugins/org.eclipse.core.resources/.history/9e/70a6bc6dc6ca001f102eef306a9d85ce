#include "lwip/opt.h"
#include "lwip/api.h"
#include "lwip/sys.h"

#include "udpserver.h"
#include "string.h"

#define Msg_Len			100

static struct netconn *conn;
static struct netbuf *buf;
static ip_addr_t *addr;
static unsigned short port;

char msg[Msg_Len];
char responseMsg[Msg_Len + 50];

// <---- ---------------------- Send RESPONSE every time the client sends some data ---------------------- ---->
static void udp_thread(void *arg)
{
	err_t err;
	struct pbuf *responseBuf;

	conn = netconn_new(NETCONN_UDP);				// Create a new connection identifier
	if(conn != NULL)
	{
		err = netconn_bind(conn, IP_ADDR_ANY, 7);	// Bind connection to the port 7
		if(err == ERR_OK)
		{
			/* The while loop will run everytime this Task is executed */
			while(1)
			{
				err = netconn_recv(conn, &buf);		// Receive the data from the connection
				if(err == ERR_OK) 					// if the data is received
				{
					addr = netbuf_fromaddr(buf);  	// get the address of the client
					port = netbuf_fromport(buf);  	// get the Port of the client

					strcpy(msg, buf->p->payload);   // get the message from the client and copy to the msg
					int len = sprintf(responseMsg, "\"%s\" was sent by the Client\n", msg); // Or modify the message received, so that we can send it back to the client

					responseBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);	// allocates memory for that will hold the response data and will be allocated in RAM.
					pbuf_take(responseBuf, responseMsg, len); 					// copies the data from the responseMsg into the allocated pbuf (responseBuf).
					buf->p = responseBuf						// buf->p pointer(part of netbuf structure) is updated to point to your newly pbuf (responseBuf).

					netconn_connect(conn, addr, port);  // connect to the destination address and port
					netconn_send(conn,buf);  			// send the netbuf to the client

					buf->addr.addr = 0;  		// clear the address
					pbuf_free(responseBuf);   	// clear the pbuf
					netbuf_delete(buf);  		// delete the netbuf
				}
			}
		}
		else
		{
			netconn_delete(conn);
		}
	}
}


void udpserver_init(void)
{
  sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
}
