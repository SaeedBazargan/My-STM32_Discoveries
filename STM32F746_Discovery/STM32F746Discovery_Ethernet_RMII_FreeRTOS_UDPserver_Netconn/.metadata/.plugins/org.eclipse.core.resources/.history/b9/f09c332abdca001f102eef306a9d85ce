//#include "lwip/opt.h"
//#include "lwip/api.h"
//#include "lwip/sys.h"
#include "main.h"

#include "udpserver.h"
#include "string.h"

extern struct netif gnetif;

static struct netconn *conn;
static struct netbuf *buf;
static ip_addr_t *addr;
static unsigned short port;

char msg[100];
char smsg[200];

static void udp_thread(void *arg)
{
	while(gnetif.ip_addr.addr == 0)		os_delay(1);
}

//// <---- ---------------------- Send RESPONSE every time the client sends some data ---------------------- ---->
//static void udp_thread(void *arg)
//{
//	err_t err, recv_err;
//	struct pbuf *txBuf;
//
//	conn = netconn_new(NETCONN_UDP);		// Create a new connection identifier
//	if (conn!= NULL)
//	{
//		err = netconn_bind(conn, IP_ADDR_ANY, 7);		// Bind connection to the port 7
//
//		if (err == ERR_OK)
//		{
//			/* The while loop will run everytime this Task is executed */
//			while (1)
//			{
//				recv_err = netconn_recv(conn, &buf);		// Receive the data from the connection
//
//				if (recv_err == ERR_OK) // if the data is received
//				{
//					addr = netbuf_fromaddr(buf);  // get the address of the client
//					port = netbuf_fromport(buf);  // get the Port of the client
//					strcpy (msg, buf->p->payload);   // get the message from the client
//
//					int len = sprintf (smsg, "\"%s\" was sent by the Client\n", (char *)buf->p->payload);		// Or modify the message received, so that we can send it back to the client
//
//					txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);		// allocate pbuf from RAM
//
//					pbuf_take(txBuf, smsg, len);		// copy the data into the buffer
//
//					buf->p = txBuf;		// refer the nebuf->pbuf to our pbuf
//
//					netconn_connect(conn, addr, port);  // connect to the destination address and port
//
//					netconn_send(conn,buf);  // send the netbuf to the client
//
//					buf->addr.addr = 0;  // clear the address
//					pbuf_free(txBuf);   // clear the pbuf
//					netbuf_delete(buf);  // delete the netbuf
//				}
//			}
//		}
//		else
//		{
//			netconn_delete(conn);
//		}
//	}
//}


void udpserver_init(void)
{
  sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
}
