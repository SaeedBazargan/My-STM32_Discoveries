
UART_DataLogger_SDcard_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000866c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  0800883c  0800883c  0000983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed0  08008ed0  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed0  08008ed0  00009ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ed8  08008ed8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed8  08008ed8  00009ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008edc  08008edc  00009edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008ee0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002320  20000068  08008f48  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002388  08008f48  0000a388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d242  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ab  00000000  00000000  000172da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00019a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000932  00000000  00000000  0001a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ec9  00000000  00000000  0001b01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a8b  00000000  00000000  00042ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9567  00000000  00000000  0005496e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ded5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b50  00000000  00000000  0013df18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d9  00000000  00000000  00141a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008824 	.word	0x08008824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08008824 	.word	0x08008824

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	@ 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__aeabi_d2uiz>:
 80008ac:	004a      	lsls	r2, r1, #1
 80008ae:	d211      	bcs.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008b4:	d211      	bcs.n	80008da <__aeabi_d2uiz+0x2e>
 80008b6:	d50d      	bpl.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d40e      	bmi.n	80008e0 <__aeabi_d2uiz+0x34>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	fa23 f002 	lsr.w	r0, r3, r2
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d102      	bne.n	80008e6 <__aeabi_d2uiz+0x3a>
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	4770      	bx	lr
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	4770      	bx	lr

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;

//<---- --------------- Functions --------------- ---->
void Mount_SD(const TCHAR* path)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <Mount_SD+0x48>)
 8000bea:	f005 fd91 	bl	8006710 <f_mount>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <Mount_SD+0x4c>)
 8000bf4:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Mounting => %d \n", fresult);
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <Mount_SD+0x4c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <Mount_SD+0x50>)
 8000bfe:	f006 fe1d 	bl	800783c <iprintf>

	if(fresult == FR_OK)
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <Mount_SD+0x4c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <Mount_SD+0x36>
		printf("SD_CARD mounted successfully...\n");
 8000c0a:	4809      	ldr	r0, [pc, #36]	@ (8000c30 <Mount_SD+0x54>)
 8000c0c:	f006 fe7e 	bl	800790c <puts>
	else
	{
		printf("Error! in mounting SD_CARD...\n");
		Error_Handler();
	}
}
 8000c10:	e004      	b.n	8000c1c <Mount_SD+0x40>
		printf("Error! in mounting SD_CARD...\n");
 8000c12:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <Mount_SD+0x58>)
 8000c14:	f006 fe7a 	bl	800790c <puts>
		Error_Handler();
 8000c18:	f000 fb40 	bl	800129c <Error_Handler>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000084 	.word	0x20000084
 8000c28:	20002100 	.word	0x20002100
 8000c2c:	0800883c 	.word	0x0800883c
 8000c30:	08008858 	.word	0x08008858
 8000c34:	08008878 	.word	0x08008878

08000c38 <Unmount_SD>:

//<---- -------------------------------------------------------- ---->
void Unmount_SD(const TCHAR* path)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	2000      	movs	r0, #0
 8000c46:	f005 fd63 	bl	8006710 <f_mount>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <Unmount_SD+0x48>)
 8000c50:	701a      	strb	r2, [r3, #0]
	printf("Fresult in Unmounting => %d \n", fresult);
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <Unmount_SD+0x48>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4619      	mov	r1, r3
 8000c58:	480a      	ldr	r0, [pc, #40]	@ (8000c84 <Unmount_SD+0x4c>)
 8000c5a:	f006 fdef 	bl	800783c <iprintf>

	if(fresult == FR_OK)
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <Unmount_SD+0x48>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <Unmount_SD+0x36>
		printf("SD_CARD unmounted successfully...\n");
 8000c66:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <Unmount_SD+0x50>)
 8000c68:	f006 fe50 	bl	800790c <puts>
	else
	{
		printf("Error! in unmounting SD_CARD...\n");
		Error_Handler();
	}
}
 8000c6c:	e004      	b.n	8000c78 <Unmount_SD+0x40>
		printf("Error! in unmounting SD_CARD...\n");
 8000c6e:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <Unmount_SD+0x54>)
 8000c70:	f006 fe4c 	bl	800790c <puts>
		Error_Handler();
 8000c74:	f000 fb12 	bl	800129c <Error_Handler>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20002100 	.word	0x20002100
 8000c84:	08008898 	.word	0x08008898
 8000c88:	080088b8 	.word	0x080088b8
 8000c8c:	080088dc 	.word	0x080088dc

08000c90 <Format_SD>:
//<---- -------------------------------------------------------- ---->

FRESULT Format_SD(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20 * sizeof(char));
 8000c96:	2014      	movs	r0, #20
 8000c98:	f006 fc50 	bl	800753c <malloc>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
    sprintf(path, "%s", "/");
 8000ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d50 <Format_SD+0xc0>)
 8000ca2:	492c      	ldr	r1, [pc, #176]	@ (8000d54 <Format_SD+0xc4>)
 8000ca4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000ca6:	f006 fe39 	bl	800791c <siprintf>

    fresult = f_opendir(&dir, path);							// Open the directory
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 f978 	bl	8006fa4 <f_opendir>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <Format_SD+0xc8>)
 8000cba:	701a      	strb	r2, [r3, #0]
    printf("Fresult in Opening Directory => %d \n", fresult);
 8000cbc:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <Format_SD+0xc8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <Format_SD+0xcc>)
 8000cc4:	f006 fdba 	bl	800783c <iprintf>

    if(fresult == FR_OK)
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <Format_SD+0xc8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d136      	bne.n	8000d3e <Format_SD+0xae>
    {
        for(;;)
        {
            fresult = f_readdir(&dir, &fno);                   	// Read a directory item
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4923      	ldr	r1, [pc, #140]	@ (8000d60 <Format_SD+0xd0>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 f9fe 	bl	80070d6 <f_readdir>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <Format_SD+0xc8>)
 8000ce0:	701a      	strb	r2, [r3, #0]
            if(fresult != FR_OK || fno.fname[0] == 0)
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <Format_SD+0xc8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d125      	bne.n	8000d36 <Format_SD+0xa6>
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <Format_SD+0xd0>)
 8000cec:	7a5b      	ldrb	r3, [r3, #9]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d021      	beq.n	8000d36 <Format_SD+0xa6>
            	break;  										// Break on error or end of dir

            if(fno.fattrib & AM_DIR)     						// It is a directory
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <Format_SD+0xd0>)
 8000cf4:	7a1b      	ldrb	r3, [r3, #8]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d011      	beq.n	8000d22 <Format_SD+0x92>
            {
            	if(!(strcmp("SYSTEM~1", fno.fname)))
 8000cfe:	4919      	ldr	r1, [pc, #100]	@ (8000d64 <Format_SD+0xd4>)
 8000d00:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <Format_SD+0xd8>)
 8000d02:	f7ff fa85 	bl	8000210 <strcmp>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d012      	beq.n	8000d32 <Format_SD+0xa2>
            		continue;

            	fresult = f_unlink(fno.fname);
 8000d0c:	4815      	ldr	r0, [pc, #84]	@ (8000d64 <Format_SD+0xd4>)
 8000d0e:	f006 fb0d 	bl	800732c <f_unlink>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <Format_SD+0xc8>)
 8000d18:	701a      	strb	r2, [r3, #0]
            	if(fresult == FR_DENIED)
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <Format_SD+0xc8>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b07      	cmp	r3, #7
 8000d20:	e7d6      	b.n	8000cd0 <Format_SD+0x40>
            		continue;
            }
            else
            {
               fresult = f_unlink(fno.fname);					// It is a file.
 8000d22:	4810      	ldr	r0, [pc, #64]	@ (8000d64 <Format_SD+0xd4>)
 8000d24:	f006 fb02 	bl	800732c <f_unlink>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <Format_SD+0xc8>)
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e7ce      	b.n	8000cd0 <Format_SD+0x40>
            		continue;
 8000d32:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   	// Read a directory item
 8000d34:	e7cc      	b.n	8000cd0 <Format_SD+0x40>
            }
        }
        f_closedir(&dir);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f006 f9a6 	bl	800708a <f_closedir>
    }
    free(path);
 8000d3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000d40:	f006 fc04 	bl	800754c <free>
    return fresult;
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <Format_SD+0xc8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3738      	adds	r7, #56	@ 0x38
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	080088fc 	.word	0x080088fc
 8000d54:	08008900 	.word	0x08008900
 8000d58:	20002100 	.word	0x20002100
 8000d5c:	08008904 	.word	0x08008904
 8000d60:	200020e8 	.word	0x200020e8
 8000d64:	200020f1 	.word	0x200020f1
 8000d68:	0800892c 	.word	0x0800892c

08000d6c <Create_File>:
//<---- -------------------------------------------------------- ---->

FRESULT Create_File(char *name)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8000d74:	4928      	ldr	r1, [pc, #160]	@ (8000e18 <Create_File+0xac>)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f006 f9ea 	bl	8007150 <f_stat>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <Create_File+0xb0>)
 8000d82:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8000d84:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <Create_File+0xb0>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4825      	ldr	r0, [pc, #148]	@ (8000e20 <Create_File+0xb4>)
 8000d8c:	f006 fd56 	bl	800783c <iprintf>

	if(fresult == FR_OK)
 8000d90:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <Create_File+0xb0>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <Create_File+0x3a>
	{
		printf("Error! *%s* already exists!\n use Update_File Function \n", name);
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4822      	ldr	r0, [pc, #136]	@ (8000e24 <Create_File+0xb8>)
 8000d9c:	f006 fd4e 	bl	800783c <iprintf>
	    return fresult;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <Create_File+0xb0>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	e034      	b.n	8000e10 <Create_File+0xa4>
	}
	else
	{
		fresult = f_open(&fil, name, (FA_CREATE_ALWAYS | FA_READ | FA_WRITE));
 8000da6:	220b      	movs	r2, #11
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	481f      	ldr	r0, [pc, #124]	@ (8000e28 <Create_File+0xbc>)
 8000dac:	f005 fcf6 	bl	800679c <f_open>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <Create_File+0xb0>)
 8000db6:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <Create_File+0xb0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10f      	bne.n	8000de0 <Create_File+0x74>
			printf("*%s* created successfully\n Now use Write_File to write data\n", name);
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	481a      	ldr	r0, [pc, #104]	@ (8000e2c <Create_File+0xc0>)
 8000dc4:	f006 fd3a 	bl	800783c <iprintf>
		{
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
		    return fresult;
		}

		fresult = f_close(&fil);
 8000dc8:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <Create_File+0xbc>)
 8000dca:	f006 f8c1 	bl	8006f50 <f_close>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <Create_File+0xb0>)
 8000dd4:	701a      	strb	r2, [r3, #0]
		if(fresult == FR_OK)
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <Create_File+0xb0>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10f      	bne.n	8000dfe <Create_File+0x92>
 8000dde:	e009      	b.n	8000df4 <Create_File+0x88>
			printf("Error! No. %d in creating file *%s* \n", fresult, name);
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <Create_File+0xb0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <Create_File+0xc4>)
 8000dea:	f006 fd27 	bl	800783c <iprintf>
		    return fresult;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <Create_File+0xb0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	e00d      	b.n	8000e10 <Create_File+0xa4>
			printf("File *%s* Closed Successfully\n", name);
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	480f      	ldr	r0, [pc, #60]	@ (8000e34 <Create_File+0xc8>)
 8000df8:	f006 fd20 	bl	800783c <iprintf>
 8000dfc:	e006      	b.n	8000e0c <Create_File+0xa0>
		else
			printf("Error! No. %d in closing file *%s* \n", fresult, name);
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <Create_File+0xb0>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4619      	mov	r1, r3
 8000e06:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <Create_File+0xcc>)
 8000e08:	f006 fd18 	bl	800783c <iprintf>
	}
    return fresult;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <Create_File+0xb0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200020e8 	.word	0x200020e8
 8000e1c:	20002100 	.word	0x20002100
 8000e20:	08008938 	.word	0x08008938
 8000e24:	08008958 	.word	0x08008958
 8000e28:	200010b8 	.word	0x200010b8
 8000e2c:	08008990 	.word	0x08008990
 8000e30:	080089d0 	.word	0x080089d0
 8000e34:	080089f8 	.word	0x080089f8
 8000e38:	08008a18 	.word	0x08008a18

08000e3c <Update_File>:
//<---- -------------------------------------------------------- ---->

FRESULT Update_File(char *name, char *data)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	fresult = f_stat(name, &fno);
 8000e46:	493b      	ldr	r1, [pc, #236]	@ (8000f34 <Update_File+0xf8>)
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f006 f981 	bl	8007150 <f_stat>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b39      	ldr	r3, [pc, #228]	@ (8000f38 <Update_File+0xfc>)
 8000e54:	701a      	strb	r2, [r3, #0]
	printf("Fresult in File Status => %d \n", fresult);
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <Update_File+0xfc>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4837      	ldr	r0, [pc, #220]	@ (8000f3c <Update_File+0x100>)
 8000e5e:	f006 fced 	bl	800783c <iprintf>

	if(fresult == FR_OK)
 8000e62:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <Update_File+0xfc>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d157      	bne.n	8000f1a <Update_File+0xde>
	{
		fresult = f_open(&fil, name, (FA_OPEN_APPEND | FA_WRITE));
 8000e6a:	2232      	movs	r2, #50	@ 0x32
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4834      	ldr	r0, [pc, #208]	@ (8000f40 <Update_File+0x104>)
 8000e70:	f005 fc94 	bl	800679c <f_open>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <Update_File+0xfc>)
 8000e7a:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK)
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f38 <Update_File+0xfc>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <Update_File+0x5c>
		{
			printf("Error! No. %d in opening file *%s*\n\n", fresult, name);
 8000e84:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <Update_File+0xfc>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482d      	ldr	r0, [pc, #180]	@ (8000f44 <Update_File+0x108>)
 8000e8e:	f006 fcd5 	bl	800783c <iprintf>
			return fresult;
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <Update_File+0xfc>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	e049      	b.n	8000f2c <Update_File+0xf0>
		}

		fresult = f_write(&fil, data, strlen (data), &bw);					// Writing text
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff f9c3 	bl	8000224 <strlen>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <Update_File+0x10c>)
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	4826      	ldr	r0, [pc, #152]	@ (8000f40 <Update_File+0x104>)
 8000ea6:	f005 fe41 	bl	8006b2c <f_write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <Update_File+0xfc>)
 8000eb0:	701a      	strb	r2, [r3, #0]
		printf("Fresult in Write File => %d \n", fresult);
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <Update_File+0xfc>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4824      	ldr	r0, [pc, #144]	@ (8000f4c <Update_File+0x110>)
 8000eba:	f006 fcbf 	bl	800783c <iprintf>

		if(fresult == FR_OK)
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <Update_File+0xfc>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d104      	bne.n	8000ed0 <Update_File+0x94>
			printf("*%s* UPDATED successfully\n", name);
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4821      	ldr	r0, [pc, #132]	@ (8000f50 <Update_File+0x114>)
 8000eca:	f006 fcb7 	bl	800783c <iprintf>
 8000ece:	e006      	b.n	8000ede <Update_File+0xa2>
		else
			printf("Error! No. %d in writing file *%s*\n\n", fresult, name);
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <Update_File+0xfc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481e      	ldr	r0, [pc, #120]	@ (8000f54 <Update_File+0x118>)
 8000eda:	f006 fcaf 	bl	800783c <iprintf>

		fresult = f_close(&fil);											// Close file
 8000ede:	4818      	ldr	r0, [pc, #96]	@ (8000f40 <Update_File+0x104>)
 8000ee0:	f006 f836 	bl	8006f50 <f_close>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <Update_File+0xfc>)
 8000eea:	701a      	strb	r2, [r3, #0]
		printf("Fresult in Closing File => %d \n", fresult);
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <Update_File+0xfc>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4819      	ldr	r0, [pc, #100]	@ (8000f58 <Update_File+0x11c>)
 8000ef4:	f006 fca2 	bl	800783c <iprintf>

		if(fresult == FR_OK)
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <Update_File+0xfc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <Update_File+0xce>
			printf("File *%s* CLOSED successfully\n", name);
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4816      	ldr	r0, [pc, #88]	@ (8000f5c <Update_File+0x120>)
 8000f04:	f006 fc9a 	bl	800783c <iprintf>
 8000f08:	e00e      	b.n	8000f28 <Update_File+0xec>
		else
			printf("Error! No. %d in closing file *%s*\n\n", fresult, name);
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <Update_File+0xfc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4813      	ldr	r0, [pc, #76]	@ (8000f60 <Update_File+0x124>)
 8000f14:	f006 fc92 	bl	800783c <iprintf>
 8000f18:	e006      	b.n	8000f28 <Update_File+0xec>
	}
	else
	{
		printf("Error! *%s* does not exists\n\n", name);
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <Update_File+0x128>)
 8000f1e:	f006 fc8d 	bl	800783c <iprintf>
	    return fresult;
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <Update_File+0xfc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	e001      	b.n	8000f2c <Update_File+0xf0>
	}
    return fresult;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <Update_File+0xfc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200020e8 	.word	0x200020e8
 8000f38:	20002100 	.word	0x20002100
 8000f3c:	08008938 	.word	0x08008938
 8000f40:	200010b8 	.word	0x200010b8
 8000f44:	08008a40 	.word	0x08008a40
 8000f48:	20002104 	.word	0x20002104
 8000f4c:	08008a68 	.word	0x08008a68
 8000f50:	08008a88 	.word	0x08008a88
 8000f54:	08008aa4 	.word	0x08008aa4
 8000f58:	08008acc 	.word	0x08008acc
 8000f5c:	08008aec 	.word	0x08008aec
 8000f60:	08008b0c 	.word	0x08008b0c
 8000f64:	08008b34 	.word	0x08008b34

08000f68 <Check_SD_Space>:
    return fresult;
}
//<---- -------------------------------------------------------- ---->

void Check_SD_Space (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint32_t total, free_space;

    f_getfree("", &fre_clust, &pfs);						// Check free space
 8000f6e:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f70:	4921      	ldr	r1, [pc, #132]	@ (8000ff8 <Check_SD_Space+0x90>)
 8000f72:	4822      	ldr	r0, [pc, #136]	@ (8000ffc <Check_SD_Space+0x94>)
 8000f74:	f006 f925 	bl	80071c2 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	3b02      	subs	r3, #2
 8000f80:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	8952      	ldrh	r2, [r2, #10]
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fc14 	bl	80007b8 <__aeabi_ui2d>
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <Check_SD_Space+0x98>)
 8000f96:	f7ff f9a3 	bl	80002e0 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fc83 	bl	80008ac <__aeabi_d2uiz>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	607b      	str	r3, [r7, #4]
    printf("SD_CARD Total Size: \t%lu\n", total);
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4815      	ldr	r0, [pc, #84]	@ (8001004 <Check_SD_Space+0x9c>)
 8000fae:	f006 fc45 	bl	800783c <iprintf>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <Check_SD_Space+0x8c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	895b      	ldrh	r3, [r3, #10]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <Check_SD_Space+0x90>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fbf8 	bl	80007b8 <__aeabi_ui2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Check_SD_Space+0x98>)
 8000fce:	f7ff f987 	bl	80002e0 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fc67 	bl	80008ac <__aeabi_d2uiz>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	603b      	str	r3, [r7, #0]
    printf("SD_CARD Free Space: \t%lu\n", free_space);
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <Check_SD_Space+0xa0>)
 8000fe6:	f006 fc29 	bl	800783c <iprintf>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20002108 	.word	0x20002108
 8000ff8:	2000210c 	.word	0x2000210c
 8000ffc:	08008d54 	.word	0x08008d54
 8001000:	3fe00000 	.word	0x3fe00000
 8001004:	08008d58 	.word	0x08008d58
 8001008:	08008d74 	.word	0x08008d74

0800100c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001018:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001024:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001028:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800102c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001034:	e000      	b.n	8001038 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001036:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001038:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f9      	beq.n	8001036 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001042:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	e009      	b.n	8001084 <_write+0x2a>
	{
		ITM_SendChar(*ptr++);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffc7 	bl	800100c <ITM_SendChar>
	for(i = 0; i < len; i++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbf1      	blt.n	8001070 <_write+0x16>
	}
	return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109c:	f000 fa9f 	bl	80015de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a0:	f000 f826 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a4:	f000 f8aa 	bl	80011fc <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80010a8:	f000 f888 	bl	80011bc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80010ac:	f003 faca 	bl	8004644 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Mount_SD(SDPath);
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <main+0x48>)
 80010b2:	f7ff fd93 	bl	8000bdc <Mount_SD>
  Format_SD();
 80010b6:	f7ff fdeb 	bl	8000c90 <Format_SD>
  Check_SD_Space();
 80010ba:	f7ff ff55 	bl	8000f68 <Check_SD_Space>
  Create_File("MRL.txt");
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <main+0x4c>)
 80010c0:	f7ff fe54 	bl	8000d6c <Create_File>
  sprintf(buffer, "Hello MRL \n Hello Maryam \n");
 80010c4:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <main+0x50>)
 80010c6:	4809      	ldr	r0, [pc, #36]	@ (80010ec <main+0x54>)
 80010c8:	f006 fc28 	bl	800791c <siprintf>
  Update_File("MRL.txt", buffer);
 80010cc:	4907      	ldr	r1, [pc, #28]	@ (80010ec <main+0x54>)
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <main+0x4c>)
 80010d0:	f7ff feb4 	bl	8000e3c <Update_File>
  Unmount_SD(SDPath);
 80010d4:	4802      	ldr	r0, [pc, #8]	@ (80010e0 <main+0x48>)
 80010d6:	f7ff fdaf 	bl	8000c38 <Unmount_SD>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010da:	bf00      	nop
 80010dc:	e7fd      	b.n	80010da <main+0x42>
 80010de:	bf00      	nop
 80010e0:	20002204 	.word	0x20002204
 80010e4:	08008d90 	.word	0x08008d90
 80010e8:	08008d98 	.word	0x08008d98
 80010ec:	20002194 	.word	0x20002194

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b094      	sub	sp, #80	@ 0x50
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	2230      	movs	r2, #48	@ 0x30
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f006 fd04 	bl	8007b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <SystemClock_Config+0xc4>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	4a26      	ldr	r2, [pc, #152]	@ (80011b4 <SystemClock_Config+0xc4>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <SystemClock_Config+0xc4>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <SystemClock_Config+0xc8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <SystemClock_Config+0xc8>)
 8001132:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <SystemClock_Config+0xc8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001152:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001158:	230f      	movs	r3, #15
 800115a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800115c:	23d8      	movs	r3, #216	@ 0xd8
 800115e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001164:	230f      	movs	r3, #15
 8001166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fd61 	bl	8001c34 <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001178:	f000 f890 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001180:	2302      	movs	r3, #2
 8001182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001188:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800118e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001192:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2105      	movs	r1, #5
 800119a:	4618      	mov	r0, r3
 800119c:	f000 ffee 	bl	800217c <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011a6:	f000 f879 	bl	800129c <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	@ 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_SDMMC1_SD_Init+0x38>)
 80011c2:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <MX_SDMMC1_SD_Init+0x3c>)
 80011c4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_SDMMC1_SD_Init+0x38>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_SDMMC1_SD_Init+0x38>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_SDMMC1_SD_Init+0x38>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_SDMMC1_SD_Init+0x38>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <MX_SDMMC1_SD_Init+0x38>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <MX_SDMMC1_SD_Init+0x38>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20002110 	.word	0x20002110
 80011f8:	40012c00 	.word	0x40012c00

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a1f      	ldr	r2, [pc, #124]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_GPIO_Init+0x98>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a13      	ldr	r2, [pc, #76]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_GPIO_Init+0x98>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_GPIO_Init+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SDMMC1_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC1_Detect_Pin;
 8001272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_Detect_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_GPIO_Init+0x9c>)
 8001288:	f000 fb10 	bl	80018ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	@ 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_MspInit+0x44>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <HAL_MspInit+0x44>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_MspInit+0x44>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_MspInit+0x44>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_MspInit+0x44>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_MspInit+0x44>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ac      	sub	sp, #176	@ 0xb0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	2284      	movs	r2, #132	@ 0x84
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f006 fbfb 	bl	8007b0c <memset>
  if(hsd->Instance==SDMMC1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a34      	ldr	r2, [pc, #208]	@ (80013ec <HAL_SD_MspInit+0xfc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d161      	bne.n	80013e4 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001320:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001324:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001332:	f107 0318 	add.w	r3, r7, #24
 8001336:	4618      	mov	r0, r3
 8001338:	f001 f8d2 	bl	80024e0 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001342:	f7ff ffab 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001346:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	4a29      	ldr	r2, [pc, #164]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 800134c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001350:	6453      	str	r3, [r2, #68]	@ 0x44
 8001352:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a1d      	ldr	r2, [pc, #116]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <HAL_SD_MspInit+0x100>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 800138e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001392:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013a8:	230c      	movs	r3, #12
 80013aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013b2:	4619      	mov	r1, r3
 80013b4:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <HAL_SD_MspInit+0x104>)
 80013b6:	f000 fa79 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ba:	2304      	movs	r3, #4
 80013bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013d2:	230c      	movs	r3, #12
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <HAL_SD_MspInit+0x108>)
 80013e0:	f000 fa64 	bl	80018ac <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80013e4:	bf00      	nop
 80013e6:	37b0      	adds	r7, #176	@ 0xb0
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40012c00 	.word	0x40012c00
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020c00 	.word	0x40020c00

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001452:	f000 f901 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}

0800145a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e00a      	b.n	8001482 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800146c:	f3af 8000 	nop.w
 8001470:	4601      	mov	r1, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	60ba      	str	r2, [r7, #8]
 8001478:	b2ca      	uxtb	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3301      	adds	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	dbf0      	blt.n	800146c <_read+0x12>
  }

  return len;
 800148a:	687b      	ldr	r3, [r7, #4]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014bc:	605a      	str	r2, [r3, #4]
  return 0;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_isatty>:

int _isatty(int file)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f006 fb4c 	bl	8007bc8 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	@ (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20050000 	.word	0x20050000
 800155c:	00000400 	.word	0x00000400
 8001560:	200021f8 	.word	0x200021f8
 8001564:	20002388 	.word	0x20002388

08001568 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001590:	f7ff ffea 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	@ (80015cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	@ (80015d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f006 fb0b 	bl	8007bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015be:	f7ff fd6b 	bl	8001098 <main>
  bx  lr    
 80015c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015d0:	08008ee0 	.word	0x08008ee0
  ldr r2, =_sbss
 80015d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015d8:	20002388 	.word	0x20002388

080015dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC_IRQHandler>

080015de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e2:	2003      	movs	r0, #3
 80015e4:	f000 f92e 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e8:	200f      	movs	r0, #15
 80015ea:	f000 f805 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ee:	f7ff fe5b 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f93b 	bl	8001892 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 f911 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	200021fc 	.word	0x200021fc

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200021fc 	.word	0x200021fc

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008

080016e0 <__NVIC_SetPriorityGrouping>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	4313      	orrs	r3, r2
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	05fa0000 	.word	0x05fa0000

08001728 <__NVIC_GetPriorityGrouping>:
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_SetPriority>:
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	@ (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	@ (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff47 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff5c 	bl	8001728 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffb0 	bl	8001800 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e175      	b.n	8001bb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8164 	bne.w	8001bb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d005      	beq.n	8001902 <HAL_GPIO_Init+0x56>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b03      	cmp	r3, #3
 800196e:	d017      	beq.n	80019a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80be 	beq.w	8001bb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	4b66      	ldr	r3, [pc, #408]	@ (8001bd0 <HAL_GPIO_Init+0x324>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	4a65      	ldr	r2, [pc, #404]	@ (8001bd0 <HAL_GPIO_Init+0x324>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a42:	4b63      	ldr	r3, [pc, #396]	@ (8001bd0 <HAL_GPIO_Init+0x324>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a4e:	4a61      	ldr	r2, [pc, #388]	@ (8001bd4 <HAL_GPIO_Init+0x328>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a58      	ldr	r2, [pc, #352]	@ (8001bd8 <HAL_GPIO_Init+0x32c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d037      	beq.n	8001aea <HAL_GPIO_Init+0x23e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a57      	ldr	r2, [pc, #348]	@ (8001bdc <HAL_GPIO_Init+0x330>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d031      	beq.n	8001ae6 <HAL_GPIO_Init+0x23a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a56      	ldr	r2, [pc, #344]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d02b      	beq.n	8001ae2 <HAL_GPIO_Init+0x236>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a55      	ldr	r2, [pc, #340]	@ (8001be4 <HAL_GPIO_Init+0x338>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x232>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a54      	ldr	r2, [pc, #336]	@ (8001be8 <HAL_GPIO_Init+0x33c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x22e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a53      	ldr	r2, [pc, #332]	@ (8001bec <HAL_GPIO_Init+0x340>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x22a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	@ (8001bf0 <HAL_GPIO_Init+0x344>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x226>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a51      	ldr	r2, [pc, #324]	@ (8001bf4 <HAL_GPIO_Init+0x348>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x222>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a50      	ldr	r2, [pc, #320]	@ (8001bf8 <HAL_GPIO_Init+0x34c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x21e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4f      	ldr	r2, [pc, #316]	@ (8001bfc <HAL_GPIO_Init+0x350>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	e012      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	e010      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001aca:	2308      	movs	r3, #8
 8001acc:	e00e      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ace:	2307      	movs	r3, #7
 8001ad0:	e00c      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	e00a      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001aea:	2300      	movs	r3, #0
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001afc:	4935      	ldr	r1, [pc, #212]	@ (8001bd4 <HAL_GPIO_Init+0x328>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c00 <HAL_GPIO_Init+0x354>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2e:	4a34      	ldr	r2, [pc, #208]	@ (8001c00 <HAL_GPIO_Init+0x354>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b34:	4b32      	ldr	r3, [pc, #200]	@ (8001c00 <HAL_GPIO_Init+0x354>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b58:	4a29      	ldr	r2, [pc, #164]	@ (8001c00 <HAL_GPIO_Init+0x354>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b5e:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <HAL_GPIO_Init+0x354>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b82:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <HAL_GPIO_Init+0x354>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <HAL_GPIO_Init+0x354>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bac:	4a14      	ldr	r2, [pc, #80]	@ (8001c00 <HAL_GPIO_Init+0x354>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	f67f ae86 	bls.w	80018cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3724      	adds	r7, #36	@ 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40021400 	.word	0x40021400
 8001bf0:	40021800 	.word	0x40021800
 8001bf4:	40021c00 	.word	0x40021c00
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40022400 	.word	0x40022400
 8001c00:	40013c00 	.word	0x40013c00

08001c04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e291      	b.n	800216e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8087 	beq.w	8001d66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c58:	4b96      	ldr	r3, [pc, #600]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d00c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c64:	4b93      	ldr	r3, [pc, #588]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d112      	bne.n	8001c96 <HAL_RCC_OscConfig+0x62>
 8001c70:	4b90      	ldr	r3, [pc, #576]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c7c:	d10b      	bne.n	8001c96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d06c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x130>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d168      	bne.n	8001d64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e26b      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x7a>
 8001ca0:	4b84      	ldr	r3, [pc, #528]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a83      	ldr	r2, [pc, #524]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e02e      	b.n	8001d0c <HAL_RCC_OscConfig+0xd8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x9c>
 8001cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7e      	ldr	r2, [pc, #504]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a7b      	ldr	r2, [pc, #492]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001cc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xd8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xc0>
 8001cda:	4b76      	ldr	r3, [pc, #472]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a75      	ldr	r2, [pc, #468]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a72      	ldr	r2, [pc, #456]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xd8>
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6b      	ldr	r2, [pc, #428]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fcb4 	bl	8001680 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fcb0 	bl	8001680 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	@ 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e21f      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b61      	ldr	r3, [pc, #388]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe8>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fca0 	bl	8001680 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fc9c 	bl	8001680 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e20b      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b57      	ldr	r3, [pc, #348]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x110>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d069      	beq.n	8001e46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d72:	4b50      	ldr	r3, [pc, #320]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d11c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x190>
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x17a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e1df      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	493d      	ldr	r1, [pc, #244]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e040      	b.n	8001e46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d023      	beq.n	8001e14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dcc:	4b39      	ldr	r3, [pc, #228]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a38      	ldr	r2, [pc, #224]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fc52 	bl	8001680 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de0:	f7ff fc4e 	bl	8001680 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1bd      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b30      	ldr	r3, [pc, #192]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4929      	ldr	r1, [pc, #164]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
 8001e12:	e018      	b.n	8001e46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e14:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a26      	ldr	r2, [pc, #152]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc2e 	bl	8001680 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff fc2a 	bl	8001680 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e199      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d038      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5e:	4a15      	ldr	r2, [pc, #84]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7ff fc0b 	bl	8001680 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fc07 	bl	8001680 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e176      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x23a>
 8001e8c:	e01a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e92:	4a08      	ldr	r2, [pc, #32]	@ (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fbf1 	bl	8001680 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fbed 	bl	8001680 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d903      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e15c      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
 8001eb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b91      	ldr	r3, [pc, #580]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ee      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a4 	beq.w	800201a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10d      	bne.n	8001efa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b88      	ldr	r3, [pc, #544]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	4a87      	ldr	r2, [pc, #540]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eea:	4b85      	ldr	r3, [pc, #532]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efa:	4b82      	ldr	r3, [pc, #520]	@ (8002104 <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f06:	4b7f      	ldr	r3, [pc, #508]	@ (8002104 <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002104 <HAL_RCC_OscConfig+0x4d0>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fbb5 	bl	8001680 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7ff fbb1 	bl	8001680 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	@ 0x64
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e120      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2c:	4b75      	ldr	r3, [pc, #468]	@ (8002104 <HAL_RCC_OscConfig+0x4d0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x31a>
 8001f40:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f44:	4a6e      	ldr	r2, [pc, #440]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4c:	e02d      	b.n	8001faa <HAL_RCC_OscConfig+0x376>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x33c>
 8001f56:	4b6a      	ldr	r3, [pc, #424]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5a:	4a69      	ldr	r2, [pc, #420]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f62:	4b67      	ldr	r3, [pc, #412]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f66:	4a66      	ldr	r2, [pc, #408]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6e:	e01c      	b.n	8001faa <HAL_RCC_OscConfig+0x376>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x35e>
 8001f78:	4b61      	ldr	r3, [pc, #388]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7c:	4a60      	ldr	r2, [pc, #384]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f84:	4b5e      	ldr	r3, [pc, #376]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f88:	4a5d      	ldr	r2, [pc, #372]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f90:	e00b      	b.n	8001faa <HAL_RCC_OscConfig+0x376>
 8001f92:	4b5b      	ldr	r3, [pc, #364]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	4a5a      	ldr	r2, [pc, #360]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9e:	4b58      	ldr	r3, [pc, #352]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa2:	4a57      	ldr	r2, [pc, #348]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d015      	beq.n	8001fde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fb65 	bl	8001680 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff fb61 	bl	8001680 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0ce      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0ee      	beq.n	8001fba <HAL_RCC_OscConfig+0x386>
 8001fdc:	e014      	b.n	8002008 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7ff fb4f 	bl	8001680 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fb4b 	bl	8001680 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffc:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1ee      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d105      	bne.n	800201a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200e:	4b3c      	ldr	r3, [pc, #240]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a3b      	ldr	r2, [pc, #236]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80a4 	beq.w	800216c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002024:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d06b      	beq.n	8002108 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d149      	bne.n	80020cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b31      	ldr	r3, [pc, #196]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a30      	ldr	r2, [pc, #192]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 800203e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fb1c 	bl	8001680 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fb18 	bl	8001680 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e087      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	041b      	lsls	r3, r3, #16
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	4313      	orrs	r3, r2
 8002090:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002096:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff faec 	bl	8001680 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff fae8 	bl	8001680 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e057      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x478>
 80020ca:	e04f      	b.n	800216c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 80020d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fad2 	bl	8001680 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff face 	bl	8001680 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e03d      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4ac>
 80020fe:	e035      	b.n	800216c <HAL_RCC_OscConfig+0x538>
 8002100:	40023800 	.word	0x40023800
 8002104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_RCC_OscConfig+0x544>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d028      	beq.n	8002168 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d121      	bne.n	8002168 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d11a      	bne.n	8002168 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800213e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002140:	4293      	cmp	r3, r2
 8002142:	d111      	bne.n	8002168 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	3b01      	subs	r3, #1
 8002152:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0d0      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	4b6a      	ldr	r3, [pc, #424]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d910      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b67      	ldr	r3, [pc, #412]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 020f 	bic.w	r2, r3, #15
 80021aa:	4965      	ldr	r1, [pc, #404]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b63      	ldr	r3, [pc, #396]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0b8      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021dc:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a58      	ldr	r2, [pc, #352]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80021e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f4:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a52      	ldr	r2, [pc, #328]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80021fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b50      	ldr	r3, [pc, #320]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	494d      	ldr	r1, [pc, #308]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d040      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b47      	ldr	r3, [pc, #284]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d115      	bne.n	800225e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e07f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b41      	ldr	r3, [pc, #260]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e073      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	4b3d      	ldr	r3, [pc, #244]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e06b      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b39      	ldr	r3, [pc, #228]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4936      	ldr	r1, [pc, #216]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002270:	f7ff fa06 	bl	8001680 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7ff fa02 	bl	8001680 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e053      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b2d      	ldr	r3, [pc, #180]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d210      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	4922      	ldr	r1, [pc, #136]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e032      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4916      	ldr	r1, [pc, #88]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fa:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	490e      	ldr	r1, [pc, #56]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230e:	f000 f821 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002312:	4602      	mov	r2, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	490a      	ldr	r1, [pc, #40]	@ (8002348 <HAL_RCC_ClockConfig+0x1cc>)
 8002320:	5ccb      	ldrb	r3, [r1, r3]
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	4a09      	ldr	r2, [pc, #36]	@ (800234c <HAL_RCC_ClockConfig+0x1d0>)
 8002328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232a:	4b09      	ldr	r3, [pc, #36]	@ (8002350 <HAL_RCC_ClockConfig+0x1d4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f962 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023c00 	.word	0x40023c00
 8002344:	40023800 	.word	0x40023800
 8002348:	08008df8 	.word	0x08008df8
 800234c:	20000000 	.word	0x20000000
 8002350:	20000004 	.word	0x20000004

08002354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002358:	b090      	sub	sp, #64	@ 0x40
 800235a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002360:	2300      	movs	r3, #0
 8002362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002364:	2300      	movs	r3, #0
 8002366:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d00d      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x40>
 8002378:	2b08      	cmp	r3, #8
 800237a:	f200 80a1 	bhi.w	80024c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x34>
 8002382:	2b04      	cmp	r3, #4
 8002384:	d003      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x3a>
 8002386:	e09b      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b53      	ldr	r3, [pc, #332]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800238a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800238c:	e09b      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238e:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002390:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002392:	e098      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002394:	4b4f      	ldr	r3, [pc, #316]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800239e:	4b4d      	ldr	r3, [pc, #308]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d028      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b4a      	ldr	r3, [pc, #296]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	2200      	movs	r2, #0
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023bc:	2100      	movs	r1, #0
 80023be:	4b47      	ldr	r3, [pc, #284]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x188>)
 80023c0:	fb03 f201 	mul.w	r2, r3, r1
 80023c4:	2300      	movs	r3, #0
 80023c6:	fb00 f303 	mul.w	r3, r0, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	4a43      	ldr	r2, [pc, #268]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x188>)
 80023ce:	fba0 1202 	umull	r1, r2, r0, r2
 80023d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023d4:	460a      	mov	r2, r1
 80023d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023da:	4413      	add	r3, r2
 80023dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e0:	2200      	movs	r2, #0
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	61fa      	str	r2, [r7, #28]
 80023e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023ee:	f7fe fa7d 	bl	80008ec <__aeabi_uldivmod>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4613      	mov	r3, r2
 80023f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023fa:	e053      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fc:	4b35      	ldr	r3, [pc, #212]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	2200      	movs	r2, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	617a      	str	r2, [r7, #20]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800240e:	f04f 0b00 	mov.w	fp, #0
 8002412:	4652      	mov	r2, sl
 8002414:	465b      	mov	r3, fp
 8002416:	f04f 0000 	mov.w	r0, #0
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	0159      	lsls	r1, r3, #5
 8002420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002424:	0150      	lsls	r0, r2, #5
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	ebb2 080a 	subs.w	r8, r2, sl
 800242e:	eb63 090b 	sbc.w	r9, r3, fp
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800243e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002442:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002446:	ebb2 0408 	subs.w	r4, r2, r8
 800244a:	eb63 0509 	sbc.w	r5, r3, r9
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	00eb      	lsls	r3, r5, #3
 8002458:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800245c:	00e2      	lsls	r2, r4, #3
 800245e:	4614      	mov	r4, r2
 8002460:	461d      	mov	r5, r3
 8002462:	eb14 030a 	adds.w	r3, r4, sl
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	eb45 030b 	adc.w	r3, r5, fp
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247a:	4629      	mov	r1, r5
 800247c:	028b      	lsls	r3, r1, #10
 800247e:	4621      	mov	r1, r4
 8002480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002484:	4621      	mov	r1, r4
 8002486:	028a      	lsls	r2, r1, #10
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248e:	2200      	movs	r2, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	60fa      	str	r2, [r7, #12]
 8002494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002498:	f7fe fa28 	bl	80008ec <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4613      	mov	r3, r2
 80024a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80024b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024be:	e002      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80024c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3740      	adds	r7, #64	@ 0x40
 80024cc:	46bd      	mov	sp, r7
 80024ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	017d7840 	.word	0x017d7840

080024e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d012      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002508:	4b69      	ldr	r3, [pc, #420]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a68      	ldr	r2, [pc, #416]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002512:	6093      	str	r3, [r2, #8]
 8002514:	4b66      	ldr	r3, [pc, #408]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251c:	4964      	ldr	r1, [pc, #400]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800252a:	2301      	movs	r3, #1
 800252c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d017      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800253a:	4b5d      	ldr	r3, [pc, #372]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002540:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	4959      	ldr	r1, [pc, #356]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002558:	d101      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002566:	2301      	movs	r3, #1
 8002568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d017      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002576:	4b4e      	ldr	r3, [pc, #312]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800257c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	494a      	ldr	r1, [pc, #296]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002594:	d101      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002596:	2301      	movs	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 808b 	beq.w	80026da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b3a      	ldr	r3, [pc, #232]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	4a39      	ldr	r2, [pc, #228]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d0:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025dc:	4b35      	ldr	r3, [pc, #212]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a34      	ldr	r2, [pc, #208]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e8:	f7ff f84a 	bl	8001680 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f0:	f7ff f846 	bl	8001680 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e357      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002602:	4b2c      	ldr	r3, [pc, #176]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800260e:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002616:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d035      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	429a      	cmp	r2, r3
 800262a:	d02e      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800262c:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002634:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002636:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	4a1d      	ldr	r2, [pc, #116]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002640:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002642:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002646:	4a1a      	ldr	r2, [pc, #104]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800264e:	4a18      	ldr	r2, [pc, #96]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002654:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d114      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff f80e 	bl	8001680 <HAL_GetTick>
 8002664:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	e00a      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7ff f80a 	bl	8001680 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e319      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ee      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002696:	d111      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026a4:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026a6:	400b      	ands	r3, r1
 80026a8:	4901      	ldr	r1, [pc, #4]	@ (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40007000 	.word	0x40007000
 80026b8:	0ffffcff 	.word	0x0ffffcff
 80026bc:	4baa      	ldr	r3, [pc, #680]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4aa9      	ldr	r2, [pc, #676]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80026c6:	6093      	str	r3, [r2, #8]
 80026c8:	4ba7      	ldr	r3, [pc, #668]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	49a4      	ldr	r1, [pc, #656]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d010      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026e6:	4ba0      	ldr	r3, [pc, #640]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ec:	4a9e      	ldr	r2, [pc, #632]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026f6:	4b9c      	ldr	r3, [pc, #624]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	4999      	ldr	r1, [pc, #612]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002714:	4b94      	ldr	r3, [pc, #592]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002722:	4991      	ldr	r1, [pc, #580]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002736:	4b8c      	ldr	r3, [pc, #560]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002744:	4988      	ldr	r1, [pc, #544]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002758:	4b83      	ldr	r3, [pc, #524]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002766:	4980      	ldr	r1, [pc, #512]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800277a:	4b7b      	ldr	r3, [pc, #492]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002780:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	4977      	ldr	r1, [pc, #476]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800279c:	4b72      	ldr	r3, [pc, #456]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	496f      	ldr	r1, [pc, #444]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027be:	4b6a      	ldr	r3, [pc, #424]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c4:	f023 020c 	bic.w	r2, r3, #12
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027cc:	4966      	ldr	r1, [pc, #408]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027e0:	4b61      	ldr	r3, [pc, #388]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	495e      	ldr	r1, [pc, #376]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002802:	4b59      	ldr	r3, [pc, #356]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002808:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002810:	4955      	ldr	r1, [pc, #340]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002824:	4b50      	ldr	r3, [pc, #320]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002832:	494d      	ldr	r1, [pc, #308]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002846:	4b48      	ldr	r3, [pc, #288]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	4944      	ldr	r1, [pc, #272]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002868:	4b3f      	ldr	r3, [pc, #252]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002876:	493c      	ldr	r1, [pc, #240]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800288a:	4b37      	ldr	r3, [pc, #220]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002890:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	4933      	ldr	r1, [pc, #204]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ba:	492b      	ldr	r1, [pc, #172]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d011      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028ce:	4b26      	ldr	r3, [pc, #152]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028dc:	4922      	ldr	r1, [pc, #136]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ec:	d101      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800290e:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002914:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800291c:	4912      	ldr	r1, [pc, #72]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002930:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002940:	4909      	ldr	r1, [pc, #36]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d006      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80d9 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800295c:	4b02      	ldr	r3, [pc, #8]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a01      	ldr	r2, [pc, #4]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002962:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002966:	e001      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002968:	40023800 	.word	0x40023800
 800296c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296e:	f7fe fe87 	bl	8001680 <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002976:	f7fe fe83 	bl	8001680 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	@ 0x64
 8002982:	d901      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e194      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002988:	4b6c      	ldr	r3, [pc, #432]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d021      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11d      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029a8:	4b64      	ldr	r3, [pc, #400]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ae:	0c1b      	lsrs	r3, r3, #16
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029b6:	4b61      	ldr	r3, [pc, #388]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029bc:	0e1b      	lsrs	r3, r3, #24
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	019a      	lsls	r2, r3, #6
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	071b      	lsls	r3, r3, #28
 80029dc:	4957      	ldr	r1, [pc, #348]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02e      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a0e:	d129      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a10:	4b4a      	ldr	r3, [pc, #296]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a1e:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a24:	0f1b      	lsrs	r3, r3, #28
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	019a      	lsls	r2, r3, #6
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	071b      	lsls	r3, r3, #28
 8002a44:	493d      	ldr	r1, [pc, #244]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a52:	f023 021f 	bic.w	r2, r3, #31
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	4937      	ldr	r1, [pc, #220]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01d      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a70:	4b32      	ldr	r3, [pc, #200]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a76:	0e1b      	lsrs	r3, r3, #24
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a84:	0f1b      	lsrs	r3, r3, #28
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	019a      	lsls	r2, r3, #6
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	071b      	lsls	r3, r3, #28
 8002aa4:	4925      	ldr	r1, [pc, #148]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d011      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	019a      	lsls	r2, r3, #6
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	071b      	lsls	r3, r3, #28
 8002ad4:	4919      	ldr	r1, [pc, #100]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002adc:	4b17      	ldr	r3, [pc, #92]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a16      	ldr	r2, [pc, #88]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fdca 	bl	8001680 <HAL_GetTick>
 8002aec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002af0:	f7fe fdc6 	bl	8001680 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	@ 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0d7      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 80cd 	bne.w	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a08      	ldr	r2, [pc, #32]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b22:	f7fe fdad 	bl	8001680 <HAL_GetTick>
 8002b26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b2a:	f7fe fda9 	bl	8001680 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b64      	cmp	r3, #100	@ 0x64
 8002b36:	d903      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0ba      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b40:	4b5e      	ldr	r3, [pc, #376]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b4c:	d0ed      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02e      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d12a      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b76:	4b51      	ldr	r3, [pc, #324]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b84:	4b4d      	ldr	r3, [pc, #308]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	0f1b      	lsrs	r3, r3, #28
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	019a      	lsls	r2, r3, #6
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	071b      	lsls	r3, r3, #28
 8002baa:	4944      	ldr	r1, [pc, #272]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bb2:	4b42      	ldr	r3, [pc, #264]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bb8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	493d      	ldr	r1, [pc, #244]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d022      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002be0:	d11d      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002be2:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be8:	0e1b      	lsrs	r3, r3, #24
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bf0:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	0f1b      	lsrs	r3, r3, #28
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	019a      	lsls	r2, r3, #6
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	071b      	lsls	r3, r3, #28
 8002c16:	4929      	ldr	r1, [pc, #164]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d028      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	0e1b      	lsrs	r3, r3, #24
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c38:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	019a      	lsls	r2, r3, #6
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	071b      	lsls	r3, r3, #28
 8002c5e:	4917      	ldr	r1, [pc, #92]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	4911      	ldr	r1, [pc, #68]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0e      	ldr	r2, [pc, #56]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c88:	f7fe fcfa 	bl	8001680 <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c90:	f7fe fcf6 	bl	8001680 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e007      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cae:	d1ef      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e022      	b.n	8002d18 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fe fb03 	bl	80012f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f814 	bl	8002d20 <HAL_SD_InitCard>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00a      	b.n	8002d18 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d20:	b5b0      	push	{r4, r5, r7, lr}
 8002d22:	b08e      	sub	sp, #56	@ 0x38
 8002d24:	af04      	add	r7, sp, #16
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002d3c:	2376      	movs	r3, #118	@ 0x76
 8002d3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681d      	ldr	r5, [r3, #0]
 8002d44:	466c      	mov	r4, sp
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d58:	4628      	mov	r0, r5
 8002d5a:	f000 ff41 	bl	8003be0 <SDMMC_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e059      	b.n	8002e24 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d7e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 ff75 	bl	8003c74 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d98:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002d9a:	2002      	movs	r0, #2
 8002d9c:	f7fe fc7c 	bl	8001698 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fe67 	bl	8003a74 <SD_PowerON>
 8002da6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e02e      	b.n	8002e24 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fd86 	bl	80038d8 <SD_InitCard>
 8002dcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e01b      	b.n	8002e24 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 ffcf 	bl	8003d98 <SDMMC_CmdBlockLength>
 8002dfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00f      	beq.n	8002e22 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a09      	ldr	r2, [pc, #36]	@ (8002e2c <HAL_SD_InitCard+0x10c>)
 8002e08:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3728      	adds	r7, #40	@ 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2c:	004005ff 	.word	0x004005ff

08002e30 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b092      	sub	sp, #72	@ 0x48
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e3e:	f7fe fc1f 	bl	8001680 <HAL_GetTick>
 8002e42:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d107      	bne.n	8002e62 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1bd      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	f040 81b0 	bne.w	80031d0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d907      	bls.n	8002e94 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e88:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e1a4      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2203      	movs	r2, #3
 8002e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d002      	beq.n	8002eb2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eae:	025b      	lsls	r3, r3, #9
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	025b      	lsls	r3, r3, #9
 8002ebc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002ebe:	2390      	movs	r3, #144	@ 0x90
 8002ec0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f107 0214 	add.w	r2, r7, #20
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 ff31 	bl	8003d40 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d90a      	bls.n	8002efa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 ff95 	bl	8003e20 <SDMMC_CmdReadMultiBlock>
 8002ef6:	6478      	str	r0, [r7, #68]	@ 0x44
 8002ef8:	e009      	b.n	8002f0e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 ff68 	bl	8003ddc <SDMMC_CmdReadSingleBlock>
 8002f0c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7a      	ldr	r2, [pc, #488]	@ (8003104 <HAL_SD_ReadBlocks+0x2d4>)
 8002f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e151      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002f3e:	e061      	b.n	8003004 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d03c      	beq.n	8002fc8 <HAL_SD_ReadBlocks+0x198>
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d039      	beq.n	8002fc8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f58:	e033      	b.n	8002fc2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fe6a 	bl	8003c38 <SDMMC_ReadFIFO>
 8002f64:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f70:	3301      	adds	r3, #1
 8002f72:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f76:	3b01      	subs	r3, #1
 8002f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f82:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f86:	3301      	adds	r3, #1
 8002f88:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f98:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc4:	2b07      	cmp	r3, #7
 8002fc6:	d9c8      	bls.n	8002f5a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fc8:	f7fe fb5a 	bl	8001680 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d902      	bls.n	8002fde <HAL_SD_ReadBlocks+0x1ae>
 8002fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d112      	bne.n	8003004 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a48      	ldr	r2, [pc, #288]	@ (8003104 <HAL_SD_ReadBlocks+0x2d4>)
 8002fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0ec      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800300e:	2b00      	cmp	r3, #0
 8003010:	d096      	beq.n	8002f40 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d022      	beq.n	8003066 <HAL_SD_ReadBlocks+0x236>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d91f      	bls.n	8003066 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	2b03      	cmp	r3, #3
 800302c:	d01b      	beq.n	8003066 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 ff5a 	bl	8003eec <SDMMC_CmdStopTransfer>
 8003038:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800303a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800303c:	2b00      	cmp	r3, #0
 800303e:	d012      	beq.n	8003066 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2f      	ldr	r2, [pc, #188]	@ (8003104 <HAL_SD_ReadBlocks+0x2d4>)
 8003046:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800304c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800304e:	431a      	orrs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0bb      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d012      	beq.n	800309a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a22      	ldr	r2, [pc, #136]	@ (8003104 <HAL_SD_ReadBlocks+0x2d4>)
 800307a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003080:	f043 0208 	orr.w	r2, r3, #8
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0a1      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d012      	beq.n	80030ce <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a15      	ldr	r2, [pc, #84]	@ (8003104 <HAL_SD_ReadBlocks+0x2d4>)
 80030ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b4:	f043 0202 	orr.w	r2, r3, #2
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e087      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d064      	beq.n	80031a6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a08      	ldr	r2, [pc, #32]	@ (8003104 <HAL_SD_ReadBlocks+0x2d4>)
 80030e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06d      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
 8003102:	bf00      	nop
 8003104:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fd93 	bl	8003c38 <SDMMC_ReadFIFO>
 8003112:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003116:	b2da      	uxtb	r2, r3
 8003118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	3301      	adds	r3, #1
 8003120:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003124:	3b01      	subs	r3, #1
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b2da      	uxtb	r2, r3
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	3301      	adds	r3, #1
 8003136:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313a:	3b01      	subs	r3, #1
 800313c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800313e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	b2da      	uxtb	r2, r3
 8003144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003146:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314a:	3301      	adds	r3, #1
 800314c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800314e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003150:	3b01      	subs	r3, #1
 8003152:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	0e1b      	lsrs	r3, r3, #24
 8003158:	b2da      	uxtb	r2, r3
 800315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	3301      	adds	r3, #1
 8003162:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003166:	3b01      	subs	r3, #1
 8003168:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800316a:	f7fe fa89 	bl	8001680 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003176:	429a      	cmp	r2, r3
 8003178:	d902      	bls.n	8003180 <HAL_SD_ReadBlocks+0x350>
 800317a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800317c:	2b00      	cmp	r3, #0
 800317e:	d112      	bne.n	80031a6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a18      	ldr	r2, [pc, #96]	@ (80031e8 <HAL_SD_ReadBlocks+0x3b8>)
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e01b      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SD_ReadBlocks+0x38a>
 80031b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1a6      	bne.n	8003108 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f240 523a 	movw	r2, #1338	@ 0x53a
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e006      	b.n	80031de <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3748      	adds	r7, #72	@ 0x48
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	004005ff 	.word	0x004005ff

080031ec <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b092      	sub	sp, #72	@ 0x48
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80031fa:	f7fe fa41 	bl	8001680 <HAL_GetTick>
 80031fe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d107      	bne.n	800321e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003212:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e165      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	f040 8158 	bne.w	80034dc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003232:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	441a      	add	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	429a      	cmp	r2, r3
 800323e:	d907      	bls.n	8003250 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003244:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e14c      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2203      	movs	r2, #3
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2200      	movs	r2, #0
 800325e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003264:	2b01      	cmp	r3, #1
 8003266:	d002      	beq.n	800326e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326a:	025b      	lsls	r3, r3, #9
 800326c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	025b      	lsls	r3, r3, #9
 8003278:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800327a:	2390      	movs	r3, #144	@ 0x90
 800327c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003282:	2300      	movs	r3, #0
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003286:	2301      	movs	r3, #1
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f107 0218 	add.w	r2, r7, #24
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fd53 	bl	8003d40 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d90a      	bls.n	80032b6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fdfb 	bl	8003ea8 <SDMMC_CmdWriteMultiBlock>
 80032b2:	6478      	str	r0, [r7, #68]	@ 0x44
 80032b4:	e009      	b.n	80032ca <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2210      	movs	r2, #16
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fdce 	bl	8003e64 <SDMMC_CmdWriteSingleBlock>
 80032c8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d012      	beq.n	80032f6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a87      	ldr	r2, [pc, #540]	@ (80034f4 <HAL_SD_WriteBlocks+0x308>)
 80032d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032de:	431a      	orrs	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0f9      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80032fa:	e065      	b.n	80033c8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d040      	beq.n	800338c <HAL_SD_WriteBlocks+0x1a0>
 800330a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03d      	beq.n	800338c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003310:	2300      	movs	r3, #0
 8003312:	643b      	str	r3, [r7, #64]	@ 0x40
 8003314:	e037      	b.n	8003386 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	3301      	adds	r3, #1
 8003320:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003324:	3b01      	subs	r3, #1
 8003326:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003336:	3301      	adds	r3, #1
 8003338:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800333a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333c:	3b01      	subs	r3, #1
 800333e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800334c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334e:	3301      	adds	r3, #1
 8003350:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003354:	3b01      	subs	r3, #1
 8003356:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	061a      	lsls	r2, r3, #24
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	3301      	adds	r3, #1
 8003368:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800336a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800336c:	3b01      	subs	r3, #1
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f107 0214 	add.w	r2, r7, #20
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fc69 	bl	8003c52 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003382:	3301      	adds	r3, #1
 8003384:	643b      	str	r3, [r7, #64]	@ 0x40
 8003386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003388:	2b07      	cmp	r3, #7
 800338a:	d9c4      	bls.n	8003316 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800338c:	f7fe f978 	bl	8001680 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003398:	429a      	cmp	r2, r3
 800339a:	d902      	bls.n	80033a2 <HAL_SD_WriteBlocks+0x1b6>
 800339c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d112      	bne.n	80033c8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a53      	ldr	r2, [pc, #332]	@ (80034f4 <HAL_SD_WriteBlocks+0x308>)
 80033a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e090      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ce:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d092      	beq.n	80032fc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d022      	beq.n	800342a <HAL_SD_WriteBlocks+0x23e>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d91f      	bls.n	800342a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d01b      	beq.n	800342a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fd78 	bl	8003eec <SDMMC_CmdStopTransfer>
 80033fc:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80033fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3a      	ldr	r2, [pc, #232]	@ (80034f4 <HAL_SD_WriteBlocks+0x308>)
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003412:	431a      	orrs	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e05f      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d012      	beq.n	800345e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2d      	ldr	r2, [pc, #180]	@ (80034f4 <HAL_SD_WriteBlocks+0x308>)
 800343e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	f043 0208 	orr.w	r2, r3, #8
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e045      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a20      	ldr	r2, [pc, #128]	@ (80034f4 <HAL_SD_WriteBlocks+0x308>)
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	f043 0202 	orr.w	r2, r3, #2
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e02b      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d012      	beq.n	80034c6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a13      	ldr	r2, [pc, #76]	@ (80034f4 <HAL_SD_WriteBlocks+0x308>)
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	f043 0210 	orr.w	r2, r3, #16
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e011      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f240 523a 	movw	r2, #1338	@ 0x53a
 80034ce:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e006      	b.n	80034ea <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3748      	adds	r7, #72	@ 0x48
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	004005ff 	.word	0x004005ff

080034f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003506:	0f9b      	lsrs	r3, r3, #30
 8003508:	b2da      	uxtb	r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003512:	0e9b      	lsrs	r3, r3, #26
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	b2da      	uxtb	r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	b2da      	uxtb	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b2da      	uxtb	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	b2da      	uxtb	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800354e:	b2da      	uxtb	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003558:	0d1b      	lsrs	r3, r3, #20
 800355a:	b29a      	uxth	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	b2da      	uxtb	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003576:	0bdb      	lsrs	r3, r3, #15
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003588:	0b9b      	lsrs	r3, r3, #14
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800359a:	0b5b      	lsrs	r3, r3, #13
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ac:	0b1b      	lsrs	r3, r3, #12
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d163      	bne.n	8003690 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035cc:	009a      	lsls	r2, r3, #2
 80035ce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035d2:	4013      	ands	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80035d8:	0f92      	lsrs	r2, r2, #30
 80035da:	431a      	orrs	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e4:	0edb      	lsrs	r3, r3, #27
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f6:	0e1b      	lsrs	r3, r3, #24
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003608:	0d5b      	lsrs	r3, r3, #21
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	b2da      	uxtb	r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800361a:	0c9b      	lsrs	r3, r3, #18
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	b2da      	uxtb	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362c:	0bdb      	lsrs	r3, r3, #15
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	b2da      	uxtb	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	7e1b      	ldrb	r3, [r3, #24]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	3302      	adds	r3, #2
 8003650:	2201      	movs	r2, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800365a:	fb03 f202 	mul.w	r2, r3, r2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	7a1b      	ldrb	r3, [r3, #8]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	2201      	movs	r2, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800367c:	0a52      	lsrs	r2, r2, #9
 800367e:	fb03 f202 	mul.w	r2, r3, r2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800368c:	661a      	str	r2, [r3, #96]	@ 0x60
 800368e:	e031      	b.n	80036f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	2b01      	cmp	r3, #1
 8003696:	d11d      	bne.n	80036d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	431a      	orrs	r2, r3
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	3301      	adds	r3, #1
 80036b4:	029a      	lsls	r2, r3, #10
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80036d2:	e00f      	b.n	80036f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a58      	ldr	r2, [pc, #352]	@ (800383c <HAL_SD_GetCardCSD+0x344>)
 80036da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e09d      	b.n	8003830 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f8:	0b9b      	lsrs	r3, r3, #14
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	b2da      	uxtb	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800370a:	09db      	lsrs	r3, r3, #7
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003712:	b2da      	uxtb	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003722:	b2da      	uxtb	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	0fdb      	lsrs	r3, r3, #31
 800372e:	b2da      	uxtb	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	0f5b      	lsrs	r3, r3, #29
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	b2da      	uxtb	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	b2da      	uxtb	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375c:	0d9b      	lsrs	r3, r3, #22
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	b2da      	uxtb	r2, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	0d5b      	lsrs	r3, r3, #21
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	b2da      	uxtb	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	b2da      	uxtb	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	0bdb      	lsrs	r3, r3, #15
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	0b9b      	lsrs	r3, r3, #14
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c6:	0b5b      	lsrs	r3, r3, #13
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	0b1b      	lsrs	r3, r3, #12
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	0a9b      	lsrs	r3, r3, #10
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	b2da      	uxtb	r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800381e:	b2da      	uxtb	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	004005ff 	.word	0x004005ff

08003840 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f970 	bl	8003b90 <SD_SendStatus>
 80038b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	0a5b      	lsrs	r3, r3, #9
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038ce:	693b      	ldr	r3, [r7, #16]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	b094      	sub	sp, #80	@ 0x50
 80038dc:	af04      	add	r7, sp, #16
 80038de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80038e0:	2301      	movs	r3, #1
 80038e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f9d1 	bl	8003c90 <SDMMC_GetPowerState>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80038f8:	e0b8      	b.n	8003a6c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d02f      	beq.n	8003962 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fbb8 	bl	800407c <SDMMC_CmdSendCID>
 800390c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800390e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <SD_InitCard+0x40>
    {
      return errorstate;
 8003914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003916:	e0a9      	b.n	8003a6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f9fb 	bl	8003d1a <SDMMC_GetResponse>
 8003924:	4602      	mov	r2, r0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2104      	movs	r1, #4
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f9f2 	bl	8003d1a <SDMMC_GetResponse>
 8003936:	4602      	mov	r2, r0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2108      	movs	r1, #8
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f9e9 	bl	8003d1a <SDMMC_GetResponse>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	210c      	movs	r1, #12
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f9e0 	bl	8003d1a <SDMMC_GetResponse>
 800395a:	4602      	mov	r2, r0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	2b03      	cmp	r3, #3
 8003968:	d00d      	beq.n	8003986 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f107 020e 	add.w	r2, r7, #14
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fbbe 	bl	80040f6 <SDMMC_CmdSetRelAdd>
 800397a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800397c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <SD_InitCard+0xae>
    {
      return errorstate;
 8003982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003984:	e072      	b.n	8003a6c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	2b03      	cmp	r3, #3
 800398c:	d036      	beq.n	80039fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800398e:	89fb      	ldrh	r3, [r7, #14]
 8003990:	461a      	mov	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f000 fb88 	bl	80040b8 <SDMMC_CmdSendCSD>
 80039a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80039b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b2:	e05b      	b.n	8003a6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2100      	movs	r1, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f9ad 	bl	8003d1a <SDMMC_GetResponse>
 80039c0:	4602      	mov	r2, r0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2104      	movs	r1, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f9a4 	bl	8003d1a <SDMMC_GetResponse>
 80039d2:	4602      	mov	r2, r0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2108      	movs	r1, #8
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f99b 	bl	8003d1a <SDMMC_GetResponse>
 80039e4:	4602      	mov	r2, r0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	210c      	movs	r1, #12
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f992 	bl	8003d1a <SDMMC_GetResponse>
 80039f6:	4602      	mov	r2, r0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2104      	movs	r1, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f989 	bl	8003d1a <SDMMC_GetResponse>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	0d1a      	lsrs	r2, r3, #20
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a10:	f107 0310 	add.w	r3, r7, #16
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fd6e 	bl	80034f8 <HAL_SD_GetCardCSD>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003a26:	e021      	b.n	8003a6c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	2200      	movs	r2, #0
 8003a34:	461c      	mov	r4, r3
 8003a36:	4615      	mov	r5, r2
 8003a38:	4622      	mov	r2, r4
 8003a3a:	462b      	mov	r3, r5
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	f000 fa77 	bl	8003f30 <SDMMC_CmdSelDesel>
 8003a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <SD_InitCard+0x176>
  {
    return errorstate;
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4c:	e00e      	b.n	8003a6c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681d      	ldr	r5, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	466c      	mov	r4, sp
 8003a56:	f103 0210 	add.w	r2, r3, #16
 8003a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a60:	3304      	adds	r3, #4
 8003a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 f8bb 	bl	8003be0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3740      	adds	r7, #64	@ 0x40
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bdb0      	pop	{r4, r5, r7, pc}

08003a74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fa72 	bl	8003f76 <SDMMC_CmdGoIdleState>
 8003a92:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	e072      	b.n	8003b84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fa85 	bl	8003fb2 <SDMMC_CmdOperCond>
 8003aa8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fa5b 	bl	8003f76 <SDMMC_CmdGoIdleState>
 8003ac0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	e05b      	b.n	8003b84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d137      	bne.n	8003b4a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fa85 	bl	8003ff0 <SDMMC_CmdAppCommand>
 8003ae6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02d      	beq.n	8003b4a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003aee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003af2:	e047      	b.n	8003b84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fa78 	bl	8003ff0 <SDMMC_CmdAppCommand>
 8003b00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SD_PowerON+0x98>
    {
      return errorstate;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	e03b      	b.n	8003b84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	491e      	ldr	r1, [pc, #120]	@ (8003b8c <SD_PowerON+0x118>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fa8e 	bl	8004034 <SDMMC_CmdAppOperCommand>
 8003b18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b20:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b24:	e02e      	b.n	8003b84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f8f4 	bl	8003d1a <SDMMC_GetResponse>
 8003b32:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	0fdb      	lsrs	r3, r3, #31
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <SD_PowerON+0xcc>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <SD_PowerON+0xce>
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]

    count++;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d802      	bhi.n	8003b5a <SD_PowerON+0xe6>
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0cc      	beq.n	8003af4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d902      	bls.n	8003b6a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b68:	e00c      	b.n	8003b84 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b7a:	e002      	b.n	8003b82 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	c1100000 	.word	0xc1100000

08003b90 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ba0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ba4:	e018      	b.n	8003bd8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 fac0 	bl	8004138 <SDMMC_CmdSendStatus>
 8003bb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	e009      	b.n	8003bd8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f8a5 	bl	8003d1a <SDMMC_GetResponse>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003be0:	b084      	sub	sp, #16
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	f107 001c 	add.w	r0, r7, #28
 8003bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003bf6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003bfa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8003bfe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003c02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003c06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003c0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <SDMMC_Init+0x54>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	b004      	add	sp, #16
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	ffff8100 	.word	0xffff8100

08003c38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003cd0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003cd6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <SDMMC_SendCommand+0x50>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	fffff000 	.word	0xfffff000

08003d00 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	b2db      	uxtb	r3, r3
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3314      	adds	r3, #20
 8003d28:	461a      	mov	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
}  
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d66:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003d6c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003d72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0

}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003da6:	2310      	movs	r3, #16
 8003da8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003daa:	2340      	movs	r3, #64	@ 0x40
 8003dac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003db6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003db8:	f107 0308 	add.w	r3, r7, #8
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ff74 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8003dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc8:	2110      	movs	r1, #16
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9d6 	bl	800417c <SDMMC_GetCmdResp1>
 8003dd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003dea:	2311      	movs	r3, #17
 8003dec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003dee:	2340      	movs	r3, #64	@ 0x40
 8003df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003dfc:	f107 0308 	add.w	r3, r7, #8
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ff52 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0c:	2111      	movs	r1, #17
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9b4 	bl	800417c <SDMMC_GetCmdResp1>
 8003e14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e16:	69fb      	ldr	r3, [r7, #28]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e2e:	2312      	movs	r3, #18
 8003e30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003e32:	2340      	movs	r3, #64	@ 0x40
 8003e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff30 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	2112      	movs	r1, #18
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f992 	bl	800417c <SDMMC_GetCmdResp1>
 8003e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e72:	2318      	movs	r3, #24
 8003e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003e76:	2340      	movs	r3, #64	@ 0x40
 8003e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003e84:	f107 0308 	add.w	r3, r7, #8
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ff0e 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e94:	2118      	movs	r1, #24
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f970 	bl	800417c <SDMMC_GetCmdResp1>
 8003e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003eb6:	2319      	movs	r3, #25
 8003eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003eba:	2340      	movs	r3, #64	@ 0x40
 8003ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003ec8:	f107 0308 	add.w	r3, r7, #8
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff feec 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8003ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed8:	2119      	movs	r1, #25
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f94e 	bl	800417c <SDMMC_GetCmdResp1>
 8003ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3720      	adds	r7, #32
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003ef8:	230c      	movs	r3, #12
 8003efa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003efc:	2340      	movs	r3, #64	@ 0x40
 8003efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fecb 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8003f16:	4a05      	ldr	r2, [pc, #20]	@ (8003f2c <SDMMC_CmdStopTransfer+0x40>)
 8003f18:	210c      	movs	r1, #12
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f92e 	bl	800417c <SDMMC_GetCmdResp1>
 8003f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f22:	69fb      	ldr	r3, [r7, #28]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	05f5e100 	.word	0x05f5e100

08003f30 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	@ 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f40:	2307      	movs	r3, #7
 8003f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f44:	2340      	movs	r3, #64	@ 0x40
 8003f46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f50:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f52:	f107 0310 	add.w	r3, r7, #16
 8003f56:	4619      	mov	r1, r3
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff fea7 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8003f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f62:	2107      	movs	r1, #7
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f909 	bl	800417c <SDMMC_GetCmdResp1>
 8003f6a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3728      	adds	r7, #40	@ 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b088      	sub	sp, #32
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f94:	f107 0308 	add.w	r3, r7, #8
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fe86 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fb23 	bl	80045ec <SDMMC_GetCmdError>
 8003fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003fba:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003fc4:	2340      	movs	r3, #64	@ 0x40
 8003fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fe67 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fab6 	bl	8004550 <SDMMC_GetCmdResp7>
 8003fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003ffe:	2337      	movs	r3, #55	@ 0x37
 8004000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004002:	2340      	movs	r3, #64	@ 0x40
 8004004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800400a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800400e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fe48 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800401c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004020:	2137      	movs	r1, #55	@ 0x37
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8aa 	bl	800417c <SDMMC_GetCmdResp1>
 8004028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800402a:	69fb      	ldr	r3, [r7, #28]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <SDMMC_CmdAppOperCommand+0x44>)
 8004042:	4313      	orrs	r3, r2
 8004044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004046:	2329      	movs	r3, #41	@ 0x29
 8004048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800404a:	2340      	movs	r3, #64	@ 0x40
 800404c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004058:	f107 0308 	add.w	r3, r7, #8
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fe24 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f9bf 	bl	80043e8 <SDMMC_GetCmdResp3>
 800406a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800406c:	69fb      	ldr	r3, [r7, #28]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	80100000 	.word	0x80100000

0800407c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004088:	2302      	movs	r3, #2
 800408a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800408c:	23c0      	movs	r3, #192	@ 0xc0
 800408e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004098:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800409a:	f107 0308 	add.w	r3, r7, #8
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fe03 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f956 	bl	8004358 <SDMMC_GetCmdResp2>
 80040ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ae:	69fb      	ldr	r3, [r7, #28]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80040c6:	2309      	movs	r3, #9
 80040c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80040ca:	23c0      	movs	r3, #192	@ 0xc0
 80040cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040d8:	f107 0308 	add.w	r3, r7, #8
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fde4 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f937 	bl	8004358 <SDMMC_GetCmdResp2>
 80040ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ec:	69fb      	ldr	r3, [r7, #28]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b088      	sub	sp, #32
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004104:	2303      	movs	r3, #3
 8004106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004108:	2340      	movs	r3, #64	@ 0x40
 800410a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004114:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff fdc5 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	2103      	movs	r1, #3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f99c 	bl	8004464 <SDMMC_GetCmdResp6>
 800412c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800412e:	69fb      	ldr	r3, [r7, #28]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004146:	230d      	movs	r3, #13
 8004148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800414a:	2340      	movs	r3, #64	@ 0x40
 800414c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004156:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004158:	f107 0308 	add.w	r3, r7, #8
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fda4 	bl	8003cac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004168:	210d      	movs	r1, #13
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f806 	bl	800417c <SDMMC_GetCmdResp1>
 8004170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004172:	69fb      	ldr	r3, [r7, #28]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	460b      	mov	r3, r1
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800418a:	4b70      	ldr	r3, [pc, #448]	@ (800434c <SDMMC_GetCmdResp1+0x1d0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a70      	ldr	r2, [pc, #448]	@ (8004350 <SDMMC_GetCmdResp1+0x1d4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0a5a      	lsrs	r2, r3, #9
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	fb02 f303 	mul.w	r3, r2, r3
 800419c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80041ac:	e0c9      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0ef      	beq.n	800419e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ea      	bne.n	800419e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2204      	movs	r2, #4
 80041d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041da:	2304      	movs	r3, #4
 80041dc:	e0b1      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0a6      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	22c5      	movs	r2, #197	@ 0xc5
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff fd80 	bl	8003d00 <SDMMC_GetCommandResponse>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	4293      	cmp	r3, r2
 8004208:	d001      	beq.n	800420e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800420a:	2301      	movs	r3, #1
 800420c:	e099      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800420e:	2100      	movs	r1, #0
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff fd82 	bl	8003d1a <SDMMC_GetResponse>
 8004216:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4b4e      	ldr	r3, [pc, #312]	@ (8004354 <SDMMC_GetCmdResp1+0x1d8>)
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004222:	2300      	movs	r3, #0
 8004224:	e08d      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	da02      	bge.n	8004232 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800422c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004230:	e087      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800423c:	2340      	movs	r3, #64	@ 0x40
 800423e:	e080      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800424a:	2380      	movs	r3, #128	@ 0x80
 800424c:	e079      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800425c:	e071      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800426c:	e069      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004278:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800427c:	e061      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004288:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800428c:	e059      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800429c:	e051      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80042a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042ac:	e049      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80042b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042bc:	e041      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80042c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042cc:	e039      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80042d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042dc:	e031      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80042e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80042ec:	e029      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80042f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80042fc:	e021      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004308:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800430c:	e019      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004318:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800431c:	e011      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004328:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800432c:	e009      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004338:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800433c:	e001      	b.n	8004342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800433e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000000 	.word	0x20000000
 8004350:	10624dd3 	.word	0x10624dd3
 8004354:	fdffe008 	.word	0xfdffe008

08004358 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004360:	4b1f      	ldr	r3, [pc, #124]	@ (80043e0 <SDMMC_GetCmdResp2+0x88>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1f      	ldr	r2, [pc, #124]	@ (80043e4 <SDMMC_GetCmdResp2+0x8c>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0a5b      	lsrs	r3, r3, #9
 800436c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	60fa      	str	r2, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004380:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004384:	e026      	b.n	80043d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ef      	beq.n	8004376 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ea      	bne.n	8004376 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2204      	movs	r2, #4
 80043b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043b2:	2304      	movs	r3, #4
 80043b4:	e00e      	b.n	80043d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e003      	b.n	80043d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	22c5      	movs	r2, #197	@ 0xc5
 80043d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	20000000 	.word	0x20000000
 80043e4:	10624dd3 	.word	0x10624dd3

080043e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043f0:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <SDMMC_GetCmdResp3+0x74>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004460 <SDMMC_GetCmdResp3+0x78>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	0a5b      	lsrs	r3, r3, #9
 80043fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	60fa      	str	r2, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004410:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004414:	e01b      	b.n	800444e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ef      	beq.n	8004406 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ea      	bne.n	8004406 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2204      	movs	r2, #4
 8004440:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004442:	2304      	movs	r3, #4
 8004444:	e003      	b.n	800444e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	22c5      	movs	r2, #197	@ 0xc5
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000000 	.word	0x20000000
 8004460:	10624dd3 	.word	0x10624dd3

08004464 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	460b      	mov	r3, r1
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004472:	4b35      	ldr	r3, [pc, #212]	@ (8004548 <SDMMC_GetCmdResp6+0xe4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a35      	ldr	r2, [pc, #212]	@ (800454c <SDMMC_GetCmdResp6+0xe8>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	0a5b      	lsrs	r3, r3, #9
 800447e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	61fa      	str	r2, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004492:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004496:	e052      	b.n	800453e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ef      	beq.n	8004488 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1ea      	bne.n	8004488 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2204      	movs	r2, #4
 80044c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044c4:	2304      	movs	r3, #4
 80044c6:	e03a      	b.n	800453e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044da:	2301      	movs	r3, #1
 80044dc:	e02f      	b.n	800453e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff fc0e 	bl	8003d00 <SDMMC_GetCommandResponse>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d001      	beq.n	80044f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e025      	b.n	800453e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	22c5      	movs	r2, #197	@ 0xc5
 80044f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80044f8:	2100      	movs	r1, #0
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff fc0d 	bl	8003d1a <SDMMC_GetResponse>
 8004500:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004516:	2300      	movs	r3, #0
 8004518:	e011      	b.n	800453e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004528:	e009      	b.n	800453e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004538:	e001      	b.n	800453e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800453a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000000 	.word	0x20000000
 800454c:	10624dd3 	.word	0x10624dd3

08004550 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004558:	4b22      	ldr	r3, [pc, #136]	@ (80045e4 <SDMMC_GetCmdResp7+0x94>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a22      	ldr	r2, [pc, #136]	@ (80045e8 <SDMMC_GetCmdResp7+0x98>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0a5b      	lsrs	r3, r3, #9
 8004564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1e5a      	subs	r2, r3, #1
 8004572:	60fa      	str	r2, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004578:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800457c:	e02c      	b.n	80045d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004582:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ef      	beq.n	800456e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ea      	bne.n	800456e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2204      	movs	r2, #4
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045aa:	2304      	movs	r3, #4
 80045ac:	e014      	b.n	80045d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d004      	beq.n	80045c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e009      	b.n	80045d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2240      	movs	r2, #64	@ 0x40
 80045d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80045d6:	2300      	movs	r3, #0
  
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	20000000 	.word	0x20000000
 80045e8:	10624dd3 	.word	0x10624dd3

080045ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045f4:	4b11      	ldr	r3, [pc, #68]	@ (800463c <SDMMC_GetCmdError+0x50>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a11      	ldr	r2, [pc, #68]	@ (8004640 <SDMMC_GetCmdError+0x54>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0a5b      	lsrs	r3, r3, #9
 8004600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1e5a      	subs	r2, r3, #1
 800460e:	60fa      	str	r2, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004614:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004618:	e009      	b.n	800462e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f1      	beq.n	800460a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	22c5      	movs	r2, #197	@ 0xc5
 800462a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000000 	.word	0x20000000
 8004640:	10624dd3 	.word	0x10624dd3

08004644 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004648:	4904      	ldr	r1, [pc, #16]	@ (800465c <MX_FATFS_Init+0x18>)
 800464a:	4805      	ldr	r0, [pc, #20]	@ (8004660 <MX_FATFS_Init+0x1c>)
 800464c:	f002 ff66 	bl	800751c <FATFS_LinkDriver>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	4b03      	ldr	r3, [pc, #12]	@ (8004664 <MX_FATFS_Init+0x20>)
 8004656:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20002204 	.word	0x20002204
 8004660:	08008e08 	.word	0x08008e08
 8004664:	20002200 	.word	0x20002200

08004668 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800466c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004682:	f000 f86b 	bl	800475c <BSP_SD_IsDetected>
 8004686:	4603      	mov	r3, r0
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800468c:	2302      	movs	r3, #2
 800468e:	e005      	b.n	800469c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8004690:	4804      	ldr	r0, [pc, #16]	@ (80046a4 <BSP_SD_Init+0x2c>)
 8004692:	f7fe fb15 	bl	8002cc0 <HAL_SD_Init>
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800469a:	79fb      	ldrb	r3, [r7, #7]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20002110 	.word	0x20002110

080046a8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	4806      	ldr	r0, [pc, #24]	@ (80046e0 <BSP_SD_ReadBlocks+0x38>)
 80046c6:	f7fe fbb3 	bl	8002e30 <HAL_SD_ReadBlocks>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20002110 	.word	0x20002110

080046e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	4806      	ldr	r0, [pc, #24]	@ (800471c <BSP_SD_WriteBlocks+0x38>)
 8004702:	f7fe fd73 	bl	80031ec <HAL_SD_WriteBlocks>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004710:	7dfb      	ldrb	r3, [r7, #23]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20002110 	.word	0x20002110

08004720 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004724:	4805      	ldr	r0, [pc, #20]	@ (800473c <BSP_SD_GetCardState+0x1c>)
 8004726:	f7ff f8b7 	bl	8003898 <HAL_SD_GetCardState>
 800472a:	4603      	mov	r3, r0
 800472c:	2b04      	cmp	r3, #4
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
}
 8004736:	4618      	mov	r0, r3
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20002110 	.word	0x20002110

08004740 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4803      	ldr	r0, [pc, #12]	@ (8004758 <BSP_SD_GetCardInfo+0x18>)
 800474c:	f7ff f878 	bl	8003840 <HAL_SD_GetCardInfo>
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20002110 	.word	0x20002110

0800475c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004762:	2301      	movs	r3, #1
 8004764:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004766:	f000 f80b 	bl	8004780 <BSP_PlatformIsDetected>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004770:	2300      	movs	r3, #0
 8004772:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	b2db      	uxtb	r3, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004786:	2301      	movs	r3, #1
 8004788:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800478a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800478e:	4806      	ldr	r0, [pc, #24]	@ (80047a8 <BSP_PlatformIsDetected+0x28>)
 8004790:	f7fd fa38 	bl	8001c04 <HAL_GPIO_ReadPin>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800479a:	2300      	movs	r3, #0
 800479c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800479e:	79fb      	ldrb	r3, [r7, #7]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40020800 	.word	0x40020800

080047ac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <SD_CheckStatus+0x38>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80047bc:	f7ff ffb0 	bl	8004720 <BSP_SD_GetCardState>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80047c6:	4b07      	ldr	r3, [pc, #28]	@ (80047e4 <SD_CheckStatus+0x38>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <SD_CheckStatus+0x38>)
 80047d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80047d6:	4b03      	ldr	r3, [pc, #12]	@ (80047e4 <SD_CheckStatus+0x38>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	b2db      	uxtb	r3, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000009 	.word	0x20000009

080047e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <SD_initialize+0x38>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80047f8:	f7ff ff3e 	bl	8004678 <BSP_SD_Init>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d107      	bne.n	8004812 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ffd1 	bl	80047ac <SD_CheckStatus>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <SD_initialize+0x38>)
 8004810:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004812:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <SD_initialize+0x38>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b2db      	uxtb	r3, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000009 	.word	0x20000009

08004824 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ffbb 	bl	80047ac <SD_CheckStatus>
 8004836:	4603      	mov	r3, r0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	68b8      	ldr	r0, [r7, #8]
 800485e:	f7ff ff23 	bl	80046a8 <BSP_SD_ReadBlocks>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d107      	bne.n	8004878 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004868:	bf00      	nop
 800486a:	f7ff ff59 	bl	8004720 <BSP_SD_GetCardState>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1fa      	bne.n	800486a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4603      	mov	r3, r0
 8004890:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	f7ff ff20 	bl	80046e4 <BSP_SD_WriteBlocks>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d107      	bne.n	80048ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80048aa:	bf00      	nop
 80048ac:	f7ff ff38 	bl	8004720 <BSP_SD_GetCardState>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1fa      	bne.n	80048ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	@ 0x30
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	603a      	str	r2, [r7, #0]
 80048ce:	71fb      	strb	r3, [r7, #7]
 80048d0:	460b      	mov	r3, r1
 80048d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80048da:	4b25      	ldr	r3, [pc, #148]	@ (8004970 <SD_ioctl+0xac>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <SD_ioctl+0x28>
 80048e8:	2303      	movs	r3, #3
 80048ea:	e03c      	b.n	8004966 <SD_ioctl+0xa2>

  switch (cmd)
 80048ec:	79bb      	ldrb	r3, [r7, #6]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d834      	bhi.n	800495c <SD_ioctl+0x98>
 80048f2:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <SD_ioctl+0x34>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	08004909 	.word	0x08004909
 80048fc:	08004911 	.word	0x08004911
 8004900:	08004929 	.word	0x08004929
 8004904:	08004943 	.word	0x08004943
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800490e:	e028      	b.n	8004962 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff13 	bl	8004740 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800491a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004926:	e01c      	b.n	8004962 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff07 	bl	8004740 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	b29a      	uxth	r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004940:	e00f      	b.n	8004962 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004942:	f107 030c 	add.w	r3, r7, #12
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fefa 	bl	8004740 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	0a5a      	lsrs	r2, r3, #9
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800495a:	e002      	b.n	8004962 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800495c:	2304      	movs	r3, #4
 800495e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004966:	4618      	mov	r0, r3
 8004968:	3730      	adds	r7, #48	@ 0x30
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000009 	.word	0x20000009

08004974 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	4a08      	ldr	r2, [pc, #32]	@ (80049a4 <disk_status+0x30>)
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	79fa      	ldrb	r2, [r7, #7]
 800498c:	4905      	ldr	r1, [pc, #20]	@ (80049a4 <disk_status+0x30>)
 800498e:	440a      	add	r2, r1
 8004990:	7a12      	ldrb	r2, [r2, #8]
 8004992:	4610      	mov	r0, r2
 8004994:	4798      	blx	r3
 8004996:	4603      	mov	r3, r0
 8004998:	73fb      	strb	r3, [r7, #15]
  return stat;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20002230 	.word	0x20002230

080049a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	4a0d      	ldr	r2, [pc, #52]	@ (80049f0 <disk_initialize+0x48>)
 80049ba:	5cd3      	ldrb	r3, [r2, r3]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d111      	bne.n	80049e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	4a0b      	ldr	r2, [pc, #44]	@ (80049f0 <disk_initialize+0x48>)
 80049c4:	2101      	movs	r1, #1
 80049c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	4a09      	ldr	r2, [pc, #36]	@ (80049f0 <disk_initialize+0x48>)
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	79fa      	ldrb	r2, [r7, #7]
 80049d6:	4906      	ldr	r1, [pc, #24]	@ (80049f0 <disk_initialize+0x48>)
 80049d8:	440a      	add	r2, r1
 80049da:	7a12      	ldrb	r2, [r2, #8]
 80049dc:	4610      	mov	r0, r2
 80049de:	4798      	blx	r3
 80049e0:	4603      	mov	r3, r0
 80049e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20002230 	.word	0x20002230

080049f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	4a0a      	ldr	r2, [pc, #40]	@ (8004a30 <disk_read+0x3c>)
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	689c      	ldr	r4, [r3, #8]
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	4a07      	ldr	r2, [pc, #28]	@ (8004a30 <disk_read+0x3c>)
 8004a14:	4413      	add	r3, r2
 8004a16:	7a18      	ldrb	r0, [r3, #8]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	47a0      	blx	r4
 8004a20:	4603      	mov	r3, r0
 8004a22:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd90      	pop	{r4, r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20002230 	.word	0x20002230

08004a34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4603      	mov	r3, r0
 8004a42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <disk_write+0x3c>)
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68dc      	ldr	r4, [r3, #12]
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	4a07      	ldr	r2, [pc, #28]	@ (8004a70 <disk_write+0x3c>)
 8004a54:	4413      	add	r3, r2
 8004a56:	7a18      	ldrb	r0, [r3, #8]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	47a0      	blx	r4
 8004a60:	4603      	mov	r3, r0
 8004a62:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd90      	pop	{r4, r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20002230 	.word	0x20002230

08004a74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	603a      	str	r2, [r7, #0]
 8004a7e:	71fb      	strb	r3, [r7, #7]
 8004a80:	460b      	mov	r3, r1
 8004a82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	4a09      	ldr	r2, [pc, #36]	@ (8004aac <disk_ioctl+0x38>)
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	79fa      	ldrb	r2, [r7, #7]
 8004a92:	4906      	ldr	r1, [pc, #24]	@ (8004aac <disk_ioctl+0x38>)
 8004a94:	440a      	add	r2, r1
 8004a96:	7a10      	ldrb	r0, [r2, #8]
 8004a98:	79b9      	ldrb	r1, [r7, #6]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	4798      	blx	r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  return res;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20002230 	.word	0x20002230

08004ab0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3301      	adds	r3, #1
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ac0:	89fb      	ldrh	r3, [r7, #14]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	b21a      	sxth	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	4313      	orrs	r3, r2
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004ad2:	89fb      	ldrh	r3, [r7, #14]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3303      	adds	r3, #3
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	3202      	adds	r2, #2
 8004af8:	7812      	ldrb	r2, [r2, #0]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	3201      	adds	r2, #1
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b18:	68fb      	ldr	r3, [r7, #12]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	887a      	ldrh	r2, [r7, #2]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	887b      	ldrh	r3, [r7, #2]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00d      	beq.n	8004bea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	1c53      	adds	r3, r2, #1
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	6179      	str	r1, [r7, #20]
 8004bda:	7812      	ldrb	r2, [r2, #0]
 8004bdc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	607b      	str	r3, [r7, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f1      	bne.n	8004bce <mem_cpy+0x1a>
	}
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004bf6:	b480      	push	{r7}
 8004bf8:	b087      	sub	sp, #28
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	617a      	str	r2, [r7, #20]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f3      	bne.n	8004c06 <mem_set+0x10>
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004c2c:	b480      	push	{r7}
 8004c2e:	b089      	sub	sp, #36	@ 0x24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	61fa      	str	r2, [r7, #28]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	61ba      	str	r2, [r7, #24]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	1acb      	subs	r3, r1, r3
 8004c58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	607b      	str	r3, [r7, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <mem_cmp+0x40>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0eb      	beq.n	8004c44 <mem_cmp+0x18>

	return r;
 8004c6c:	697b      	ldr	r3, [r7, #20]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3724      	adds	r7, #36	@ 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004c84:	e002      	b.n	8004c8c <chk_chr+0x12>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <chk_chr+0x26>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d1f2      	bne.n	8004c86 <chk_chr+0xc>
	return *str;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	e029      	b.n	8004d18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004cc4:	4a27      	ldr	r2, [pc, #156]	@ (8004d64 <chk_lock+0xb4>)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	4413      	add	r3, r2
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01d      	beq.n	8004d0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004cd2:	4a24      	ldr	r2, [pc, #144]	@ (8004d64 <chk_lock+0xb4>)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	4413      	add	r3, r2
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d116      	bne.n	8004d12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d64 <chk_lock+0xb4>)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	4413      	add	r3, r2
 8004cec:	3304      	adds	r3, #4
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d10c      	bne.n	8004d12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8004d64 <chk_lock+0xb4>)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	4413      	add	r3, r2
 8004d00:	3308      	adds	r3, #8
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d102      	bne.n	8004d12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d0c:	e007      	b.n	8004d1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d9d2      	bls.n	8004cc4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d109      	bne.n	8004d38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <chk_lock+0x80>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d101      	bne.n	8004d34 <chk_lock+0x84>
 8004d30:	2300      	movs	r3, #0
 8004d32:	e010      	b.n	8004d56 <chk_lock+0xa6>
 8004d34:	2312      	movs	r3, #18
 8004d36:	e00e      	b.n	8004d56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <chk_lock+0xa0>
 8004d3e:	4a09      	ldr	r2, [pc, #36]	@ (8004d64 <chk_lock+0xb4>)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	4413      	add	r3, r2
 8004d46:	330c      	adds	r3, #12
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d4e:	d101      	bne.n	8004d54 <chk_lock+0xa4>
 8004d50:	2310      	movs	r3, #16
 8004d52:	e000      	b.n	8004d56 <chk_lock+0xa6>
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20002210 	.word	0x20002210

08004d68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	e002      	b.n	8004d7a <enq_lock+0x12>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3301      	adds	r3, #1
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d806      	bhi.n	8004d8e <enq_lock+0x26>
 8004d80:	4a09      	ldr	r2, [pc, #36]	@ (8004da8 <enq_lock+0x40>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	4413      	add	r3, r2
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f2      	bne.n	8004d74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20002210 	.word	0x20002210

08004dac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e01f      	b.n	8004dfc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004dbc:	4a41      	ldr	r2, [pc, #260]	@ (8004ec4 <inc_lock+0x118>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	4413      	add	r3, r2
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d113      	bne.n	8004df6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004dce:	4a3d      	ldr	r2, [pc, #244]	@ (8004ec4 <inc_lock+0x118>)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d109      	bne.n	8004df6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004de2:	4a38      	ldr	r2, [pc, #224]	@ (8004ec4 <inc_lock+0x118>)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	4413      	add	r3, r2
 8004dea:	3308      	adds	r3, #8
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d006      	beq.n	8004e04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d9dc      	bls.n	8004dbc <inc_lock+0x10>
 8004e02:	e000      	b.n	8004e06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004e04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d132      	bne.n	8004e72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e002      	b.n	8004e18 <inc_lock+0x6c>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d806      	bhi.n	8004e2c <inc_lock+0x80>
 8004e1e:	4a29      	ldr	r2, [pc, #164]	@ (8004ec4 <inc_lock+0x118>)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	4413      	add	r3, r2
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f2      	bne.n	8004e12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d101      	bne.n	8004e36 <inc_lock+0x8a>
 8004e32:	2300      	movs	r3, #0
 8004e34:	e040      	b.n	8004eb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4922      	ldr	r1, [pc, #136]	@ (8004ec4 <inc_lock+0x118>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	440b      	add	r3, r1
 8004e42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	491e      	ldr	r1, [pc, #120]	@ (8004ec4 <inc_lock+0x118>)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	440b      	add	r3, r1
 8004e50:	3304      	adds	r3, #4
 8004e52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	491a      	ldr	r1, [pc, #104]	@ (8004ec4 <inc_lock+0x118>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	440b      	add	r3, r1
 8004e60:	3308      	adds	r3, #8
 8004e62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004e64:	4a17      	ldr	r2, [pc, #92]	@ (8004ec4 <inc_lock+0x118>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	4413      	add	r3, r2
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	2200      	movs	r2, #0
 8004e70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <inc_lock+0xe0>
 8004e78:	4a12      	ldr	r2, [pc, #72]	@ (8004ec4 <inc_lock+0x118>)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	4413      	add	r3, r2
 8004e80:	330c      	adds	r3, #12
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <inc_lock+0xe0>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e015      	b.n	8004eb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d108      	bne.n	8004ea4 <inc_lock+0xf8>
 8004e92:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec4 <inc_lock+0x118>)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	4413      	add	r3, r2
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	e001      	b.n	8004ea8 <inc_lock+0xfc>
 8004ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ea8:	4906      	ldr	r1, [pc, #24]	@ (8004ec4 <inc_lock+0x118>)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	440b      	add	r3, r1
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	20002210 	.word	0x20002210

08004ec8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d825      	bhi.n	8004f28 <dec_lock+0x60>
		n = Files[i].ctr;
 8004edc:	4a17      	ldr	r2, [pc, #92]	@ (8004f3c <dec_lock+0x74>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	4413      	add	r3, r2
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004eea:	89fb      	ldrh	r3, [r7, #14]
 8004eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef0:	d101      	bne.n	8004ef6 <dec_lock+0x2e>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004ef6:	89fb      	ldrh	r3, [r7, #14]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <dec_lock+0x3a>
 8004efc:	89fb      	ldrh	r3, [r7, #14]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004f02:	4a0e      	ldr	r2, [pc, #56]	@ (8004f3c <dec_lock+0x74>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	4413      	add	r3, r2
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	89fa      	ldrh	r2, [r7, #14]
 8004f0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004f10:	89fb      	ldrh	r3, [r7, #14]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d105      	bne.n	8004f22 <dec_lock+0x5a>
 8004f16:	4a09      	ldr	r2, [pc, #36]	@ (8004f3c <dec_lock+0x74>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	4413      	add	r3, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	737b      	strb	r3, [r7, #13]
 8004f26:	e001      	b.n	8004f2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004f28:	2302      	movs	r3, #2
 8004f2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004f2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20002210 	.word	0x20002210

08004f40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e010      	b.n	8004f70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f84 <clear_lock+0x44>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	4413      	add	r3, r2
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d105      	bne.n	8004f6a <clear_lock+0x2a>
 8004f5e:	4a09      	ldr	r2, [pc, #36]	@ (8004f84 <clear_lock+0x44>)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	4413      	add	r3, r2
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d9eb      	bls.n	8004f4e <clear_lock+0xe>
	}
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	20002210 	.word	0x20002210

08004f88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	78db      	ldrb	r3, [r3, #3]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d034      	beq.n	8005006 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7858      	ldrb	r0, [r3, #1]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004fac:	2301      	movs	r3, #1
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	f7ff fd40 	bl	8004a34 <disk_write>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e022      	b.n	8005006 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	1ad2      	subs	r2, r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d217      	bcs.n	8005006 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	e010      	b.n	8005000 <sync_window+0x78>
					wsect += fs->fsize;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	7858      	ldrb	r0, [r3, #1]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	f7ff fd1d 	bl	8004a34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d8eb      	bhi.n	8004fde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d01b      	beq.n	8005060 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ffad 	bl	8004f88 <sync_window>
 800502e:	4603      	mov	r3, r0
 8005030:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d113      	bne.n	8005060 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	7858      	ldrb	r0, [r3, #1]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005042:	2301      	movs	r3, #1
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	f7ff fcd5 	bl	80049f4 <disk_read>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005050:	f04f 33ff 	mov.w	r3, #4294967295
 8005054:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff87 	bl	8004f88 <sync_window>
 800507a:	4603      	mov	r3, r0
 800507c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d159      	bne.n	8005138 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d149      	bne.n	8005120 <sync_fs+0xb4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	791b      	ldrb	r3, [r3, #4]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d145      	bne.n	8005120 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	899b      	ldrh	r3, [r3, #12]
 800509e:	461a      	mov	r2, r3
 80050a0:	2100      	movs	r1, #0
 80050a2:	f7ff fda8 	bl	8004bf6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3334      	adds	r3, #52	@ 0x34
 80050aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80050ae:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fd37 	bl	8004b26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3334      	adds	r3, #52	@ 0x34
 80050bc:	4921      	ldr	r1, [pc, #132]	@ (8005144 <sync_fs+0xd8>)
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fd4c 	bl	8004b5c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3334      	adds	r3, #52	@ 0x34
 80050c8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80050cc:	491e      	ldr	r1, [pc, #120]	@ (8005148 <sync_fs+0xdc>)
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fd44 	bl	8004b5c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3334      	adds	r3, #52	@ 0x34
 80050d8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f7ff fd3a 	bl	8004b5c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3334      	adds	r3, #52	@ 0x34
 80050ec:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f7ff fd30 	bl	8004b5c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	7858      	ldrb	r0, [r3, #1]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005114:	2301      	movs	r3, #1
 8005116:	f7ff fc8d 	bl	8004a34 <disk_write>
			fs->fsi_flag = 0;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2200      	movs	r2, #0
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fca3 	bl	8004a74 <disk_ioctl>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <sync_fs+0xcc>
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	41615252 	.word	0x41615252
 8005148:	61417272 	.word	0x61417272

0800514c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	3b02      	subs	r3, #2
 800515a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	3b02      	subs	r3, #2
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d301      	bcc.n	800516c <clust2sect+0x20>
 8005168:	2300      	movs	r3, #0
 800516a:	e008      	b.n	800517e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	895b      	ldrh	r3, [r3, #10]
 8005170:	461a      	mov	r2, r3
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	fb03 f202 	mul.w	r2, r3, r2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	4413      	add	r3, r2
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d904      	bls.n	80051aa <get_fat+0x20>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80051aa:	2301      	movs	r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e0ba      	b.n	8005326 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	f000 8082 	beq.w	80052c4 <get_fat+0x13a>
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	f300 80a6 	bgt.w	8005312 <get_fat+0x188>
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d002      	beq.n	80051d0 <get_fat+0x46>
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d055      	beq.n	800527a <get_fat+0xf0>
 80051ce:	e0a0      	b.n	8005312 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	899b      	ldrh	r3, [r3, #12]
 80051e6:	4619      	mov	r1, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80051ee:	4413      	add	r3, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	6938      	ldr	r0, [r7, #16]
 80051f4:	f7ff ff0c 	bl	8005010 <move_window>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 808c 	bne.w	8005318 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	60fa      	str	r2, [r7, #12]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	8992      	ldrh	r2, [r2, #12]
 800520a:	fbb3 f1f2 	udiv	r1, r3, r2
 800520e:	fb01 f202 	mul.w	r2, r1, r2
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4413      	add	r3, r2
 8005218:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800521c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	899b      	ldrh	r3, [r3, #12]
 8005226:	4619      	mov	r1, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	fbb3 f3f1 	udiv	r3, r3, r1
 800522e:	4413      	add	r3, r2
 8005230:	4619      	mov	r1, r3
 8005232:	6938      	ldr	r0, [r7, #16]
 8005234:	f7ff feec 	bl	8005010 <move_window>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d16e      	bne.n	800531c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	899b      	ldrh	r3, [r3, #12]
 8005242:	461a      	mov	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	fbb3 f1f2 	udiv	r1, r3, r2
 800524a:	fb01 f202 	mul.w	r2, r1, r2
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4313      	orrs	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <get_fat+0xe6>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	e002      	b.n	8005276 <get_fat+0xec>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005276:	617b      	str	r3, [r7, #20]
			break;
 8005278:	e055      	b.n	8005326 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	899b      	ldrh	r3, [r3, #12]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	b29b      	uxth	r3, r3
 8005286:	4619      	mov	r1, r3
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	fbb3 f3f1 	udiv	r3, r3, r1
 800528e:	4413      	add	r3, r2
 8005290:	4619      	mov	r1, r3
 8005292:	6938      	ldr	r0, [r7, #16]
 8005294:	f7ff febc 	bl	8005010 <move_window>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d140      	bne.n	8005320 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	8992      	ldrh	r2, [r2, #12]
 80052ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80052b0:	fb00 f202 	mul.w	r2, r0, r2
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	440b      	add	r3, r1
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fbf9 	bl	8004ab0 <ld_word>
 80052be:	4603      	mov	r3, r0
 80052c0:	617b      	str	r3, [r7, #20]
			break;
 80052c2:	e030      	b.n	8005326 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	899b      	ldrh	r3, [r3, #12]
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	4619      	mov	r1, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80052d8:	4413      	add	r3, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	6938      	ldr	r0, [r7, #16]
 80052de:	f7ff fe97 	bl	8005010 <move_window>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d11d      	bne.n	8005324 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	8992      	ldrh	r2, [r2, #12]
 80052f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80052fa:	fb00 f202 	mul.w	r2, r0, r2
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	440b      	add	r3, r1
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fbec 	bl	8004ae0 <ld_dword>
 8005308:	4603      	mov	r3, r0
 800530a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800530e:	617b      	str	r3, [r7, #20]
			break;
 8005310:	e009      	b.n	8005326 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005312:	2301      	movs	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e006      	b.n	8005326 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005318:	bf00      	nop
 800531a:	e004      	b.n	8005326 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800531c:	bf00      	nop
 800531e:	e002      	b.n	8005326 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005320:	bf00      	nop
 8005322:	e000      	b.n	8005326 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005324:	bf00      	nop
		}
	}

	return val;
 8005326:	697b      	ldr	r3, [r7, #20]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b089      	sub	sp, #36	@ 0x24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800533c:	2302      	movs	r3, #2
 800533e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b01      	cmp	r3, #1
 8005344:	f240 8109 	bls.w	800555a <put_fat+0x22a>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	f080 8103 	bcs.w	800555a <put_fat+0x22a>
		switch (fs->fs_type) {
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b03      	cmp	r3, #3
 800535a:	f000 80b6 	beq.w	80054ca <put_fat+0x19a>
 800535e:	2b03      	cmp	r3, #3
 8005360:	f300 80fb 	bgt.w	800555a <put_fat+0x22a>
 8005364:	2b01      	cmp	r3, #1
 8005366:	d003      	beq.n	8005370 <put_fat+0x40>
 8005368:	2b02      	cmp	r3, #2
 800536a:	f000 8083 	beq.w	8005474 <put_fat+0x144>
 800536e:	e0f4      	b.n	800555a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4413      	add	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	899b      	ldrh	r3, [r3, #12]
 8005386:	4619      	mov	r1, r3
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	fbb3 f3f1 	udiv	r3, r3, r1
 800538e:	4413      	add	r3, r2
 8005390:	4619      	mov	r1, r3
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff fe3c 	bl	8005010 <move_window>
 8005398:	4603      	mov	r3, r0
 800539a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800539c:	7ffb      	ldrb	r3, [r7, #31]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f040 80d4 	bne.w	800554c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	61ba      	str	r2, [r7, #24]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	8992      	ldrh	r2, [r2, #12]
 80053b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80053b8:	fb00 f202 	mul.w	r2, r0, r2
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	440b      	add	r3, r1
 80053c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <put_fat+0xb8>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b25b      	sxtb	r3, r3
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	b25a      	sxtb	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	4313      	orrs	r3, r2
 80053e2:	b25b      	sxtb	r3, r3
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	e001      	b.n	80053ec <put_fat+0xbc>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	899b      	ldrh	r3, [r3, #12]
 80053fe:	4619      	mov	r1, r3
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	fbb3 f3f1 	udiv	r3, r3, r1
 8005406:	4413      	add	r3, r2
 8005408:	4619      	mov	r1, r3
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fe00 	bl	8005010 <move_window>
 8005410:	4603      	mov	r3, r0
 8005412:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005414:	7ffb      	ldrb	r3, [r7, #31]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f040 809a 	bne.w	8005550 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	899b      	ldrh	r3, [r3, #12]
 8005426:	461a      	mov	r2, r3
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	fbb3 f0f2 	udiv	r0, r3, r2
 800542e:	fb00 f202 	mul.w	r2, r0, r2
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	440b      	add	r3, r1
 8005436:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <put_fat+0x11a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e00e      	b.n	8005468 <put_fat+0x138>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	b25b      	sxtb	r3, r3
 8005450:	f023 030f 	bic.w	r3, r3, #15
 8005454:	b25a      	sxtb	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	b25b      	sxtb	r3, r3
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	b25b      	sxtb	r3, r3
 8005462:	4313      	orrs	r3, r2
 8005464:	b25b      	sxtb	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	70da      	strb	r2, [r3, #3]
			break;
 8005472:	e072      	b.n	800555a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	899b      	ldrh	r3, [r3, #12]
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	b29b      	uxth	r3, r3
 8005480:	4619      	mov	r1, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	fbb3 f3f1 	udiv	r3, r3, r1
 8005488:	4413      	add	r3, r2
 800548a:	4619      	mov	r1, r3
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7ff fdbf 	bl	8005010 <move_window>
 8005492:	4603      	mov	r3, r0
 8005494:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005496:	7ffb      	ldrb	r3, [r7, #31]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d15b      	bne.n	8005554 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	8992      	ldrh	r2, [r2, #12]
 80054aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80054ae:	fb00 f202 	mul.w	r2, r0, r2
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	440b      	add	r3, r1
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	b292      	uxth	r2, r2
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fb32 	bl	8004b26 <st_word>
			fs->wflag = 1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	70da      	strb	r2, [r3, #3]
			break;
 80054c8:	e047      	b.n	800555a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	899b      	ldrh	r3, [r3, #12]
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	4619      	mov	r1, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	fbb3 f3f1 	udiv	r3, r3, r1
 80054de:	4413      	add	r3, r2
 80054e0:	4619      	mov	r1, r3
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff fd94 	bl	8005010 <move_window>
 80054e8:	4603      	mov	r3, r0
 80054ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054ec:	7ffb      	ldrb	r3, [r7, #31]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d132      	bne.n	8005558 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	8992      	ldrh	r2, [r2, #12]
 8005506:	fbb3 f0f2 	udiv	r0, r3, r2
 800550a:	fb00 f202 	mul.w	r2, r0, r2
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	440b      	add	r3, r1
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fae4 	bl	8004ae0 <ld_dword>
 8005518:	4603      	mov	r3, r0
 800551a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800551e:	4323      	orrs	r3, r4
 8005520:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	8992      	ldrh	r2, [r2, #12]
 8005530:	fbb3 f0f2 	udiv	r0, r3, r2
 8005534:	fb00 f202 	mul.w	r2, r0, r2
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	440b      	add	r3, r1
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fb0c 	bl	8004b5c <st_dword>
			fs->wflag = 1;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	70da      	strb	r2, [r3, #3]
			break;
 800554a:	e006      	b.n	800555a <put_fat+0x22a>
			if (res != FR_OK) break;
 800554c:	bf00      	nop
 800554e:	e004      	b.n	800555a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005550:	bf00      	nop
 8005552:	e002      	b.n	800555a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005554:	bf00      	nop
 8005556:	e000      	b.n	800555a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005558:	bf00      	nop
		}
	}
	return res;
 800555a:	7ffb      	ldrb	r3, [r7, #31]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3724      	adds	r7, #36	@ 0x24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd90      	pop	{r4, r7, pc}

08005564 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d904      	bls.n	800558a <remove_chain+0x26>
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	d301      	bcc.n	800558e <remove_chain+0x2a>
 800558a:	2302      	movs	r3, #2
 800558c:	e04b      	b.n	8005626 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00c      	beq.n	80055ae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	69b8      	ldr	r0, [r7, #24]
 800559c:	f7ff fec8 	bl	8005330 <put_fat>
 80055a0:	4603      	mov	r3, r0
 80055a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80055a4:	7ffb      	ldrb	r3, [r7, #31]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <remove_chain+0x4a>
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	e03b      	b.n	8005626 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f7ff fdea 	bl	800518a <get_fat>
 80055b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d031      	beq.n	8005622 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <remove_chain+0x64>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e02e      	b.n	8005626 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d101      	bne.n	80055d4 <remove_chain+0x70>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e028      	b.n	8005626 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80055d4:	2200      	movs	r2, #0
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	69b8      	ldr	r0, [r7, #24]
 80055da:	f7ff fea9 	bl	8005330 <put_fat>
 80055de:	4603      	mov	r3, r0
 80055e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80055e2:	7ffb      	ldrb	r3, [r7, #31]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <remove_chain+0x88>
 80055e8:	7ffb      	ldrb	r3, [r7, #31]
 80055ea:	e01c      	b.n	8005626 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	3b02      	subs	r3, #2
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d20b      	bcs.n	8005612 <remove_chain+0xae>
			fs->free_clst++;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	791b      	ldrb	r3, [r3, #4]
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	429a      	cmp	r2, r3
 800561e:	d3c6      	bcc.n	80055ae <remove_chain+0x4a>
 8005620:	e000      	b.n	8005624 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005622:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b088      	sub	sp, #32
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10d      	bne.n	8005660 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <create_chain+0x2c>
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	429a      	cmp	r2, r3
 8005658:	d31b      	bcc.n	8005692 <create_chain+0x64>
 800565a:	2301      	movs	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	e018      	b.n	8005692 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fd91 	bl	800518a <get_fat>
 8005668:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d801      	bhi.n	8005674 <create_chain+0x46>
 8005670:	2301      	movs	r3, #1
 8005672:	e070      	b.n	8005756 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d101      	bne.n	8005680 <create_chain+0x52>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	e06a      	b.n	8005756 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	429a      	cmp	r2, r3
 8005688:	d201      	bcs.n	800568e <create_chain+0x60>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	e063      	b.n	8005756 <create_chain+0x128>
		scl = clst;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3301      	adds	r3, #1
 800569a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d307      	bcc.n	80056b6 <create_chain+0x88>
				ncl = 2;
 80056a6:	2302      	movs	r3, #2
 80056a8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d901      	bls.n	80056b6 <create_chain+0x88>
 80056b2:	2300      	movs	r3, #0
 80056b4:	e04f      	b.n	8005756 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80056b6:	69f9      	ldr	r1, [r7, #28]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fd66 	bl	800518a <get_fat>
 80056be:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d003      	beq.n	80056d4 <create_chain+0xa6>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d101      	bne.n	80056d8 <create_chain+0xaa>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	e03e      	b.n	8005756 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1da      	bne.n	8005696 <create_chain+0x68>
 80056e0:	2300      	movs	r3, #0
 80056e2:	e038      	b.n	8005756 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80056e4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ea:	69f9      	ldr	r1, [r7, #28]
 80056ec:	6938      	ldr	r0, [r7, #16]
 80056ee:	f7ff fe1f 	bl	8005330 <put_fat>
 80056f2:	4603      	mov	r3, r0
 80056f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <create_chain+0xe2>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d006      	beq.n	8005710 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6938      	ldr	r0, [r7, #16]
 8005708:	f7ff fe12 	bl	8005330 <put_fat>
 800570c:	4603      	mov	r3, r0
 800570e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d116      	bne.n	8005744 <create_chain+0x116>
		fs->last_clst = ncl;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	695a      	ldr	r2, [r3, #20]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	3b02      	subs	r3, #2
 8005726:	429a      	cmp	r2, r3
 8005728:	d804      	bhi.n	8005734 <create_chain+0x106>
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	1e5a      	subs	r2, r3, #1
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	791b      	ldrb	r3, [r3, #4]
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	b2da      	uxtb	r2, r3
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	711a      	strb	r2, [r3, #4]
 8005742:	e007      	b.n	8005754 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d102      	bne.n	8005750 <create_chain+0x122>
 800574a:	f04f 33ff 	mov.w	r3, #4294967295
 800574e:	e000      	b.n	8005752 <create_chain+0x124>
 8005750:	2301      	movs	r3, #1
 8005752:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005754:	69fb      	ldr	r3, [r7, #28]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	3304      	adds	r3, #4
 8005774:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	899b      	ldrh	r3, [r3, #12]
 800577a:	461a      	mov	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	8952      	ldrh	r2, [r2, #10]
 8005786:	fbb3 f3f2 	udiv	r3, r3, r2
 800578a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	613a      	str	r2, [r7, #16]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <clmt_clust+0x42>
 800579c:	2300      	movs	r3, #0
 800579e:	e010      	b.n	80057c2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d307      	bcc.n	80057b8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3304      	adds	r3, #4
 80057b4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057b6:	e7e9      	b.n	800578c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80057b8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	4413      	add	r3, r2
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b086      	sub	sp, #24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057e4:	d204      	bcs.n	80057f0 <dir_sdi+0x22>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80057f0:	2302      	movs	r3, #2
 80057f2:	e071      	b.n	80058d8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <dir_sdi+0x46>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d902      	bls.n	8005814 <dir_sdi+0x46>
		clst = fs->dirbase;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005812:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10c      	bne.n	8005834 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	8912      	ldrh	r2, [r2, #8]
 8005822:	4293      	cmp	r3, r2
 8005824:	d301      	bcc.n	800582a <dir_sdi+0x5c>
 8005826:	2302      	movs	r3, #2
 8005828:	e056      	b.n	80058d8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	61da      	str	r2, [r3, #28]
 8005832:	e02d      	b.n	8005890 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	895b      	ldrh	r3, [r3, #10]
 8005838:	461a      	mov	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	899b      	ldrh	r3, [r3, #12]
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005844:	e019      	b.n	800587a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6979      	ldr	r1, [r7, #20]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fc9d 	bl	800518a <get_fat>
 8005850:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d101      	bne.n	800585e <dir_sdi+0x90>
 800585a:	2301      	movs	r3, #1
 800585c:	e03c      	b.n	80058d8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d904      	bls.n	800586e <dir_sdi+0xa0>
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	429a      	cmp	r2, r3
 800586c:	d301      	bcc.n	8005872 <dir_sdi+0xa4>
 800586e:	2302      	movs	r3, #2
 8005870:	e032      	b.n	80058d8 <dir_sdi+0x10a>
			ofs -= csz;
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	429a      	cmp	r2, r3
 8005880:	d2e1      	bcs.n	8005846 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005882:	6979      	ldr	r1, [r7, #20]
 8005884:	6938      	ldr	r0, [r7, #16]
 8005886:	f7ff fc61 	bl	800514c <clust2sect>
 800588a:	4602      	mov	r2, r0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <dir_sdi+0xd4>
 800589e:	2302      	movs	r3, #2
 80058a0:	e01a      	b.n	80058d8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	899b      	ldrh	r3, [r3, #12]
 80058aa:	4619      	mov	r1, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80058b2:	441a      	add	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	899b      	ldrh	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80058ca:	fb00 f202 	mul.w	r2, r0, r2
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	18ca      	adds	r2, r1, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	3320      	adds	r3, #32
 80058f6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <dir_next+0x28>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005906:	d301      	bcc.n	800590c <dir_next+0x2c>
 8005908:	2304      	movs	r3, #4
 800590a:	e0bb      	b.n	8005a84 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	899b      	ldrh	r3, [r3, #12]
 8005910:	461a      	mov	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	fbb3 f1f2 	udiv	r1, r3, r2
 8005918:	fb01 f202 	mul.w	r2, r1, r2
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	f040 809d 	bne.w	8005a5e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	8912      	ldrh	r2, [r2, #8]
 800593e:	4293      	cmp	r3, r2
 8005940:	f0c0 808d 	bcc.w	8005a5e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	61da      	str	r2, [r3, #28]
 800594a:	2304      	movs	r3, #4
 800594c:	e09a      	b.n	8005a84 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	899b      	ldrh	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	fbb3 f3f2 	udiv	r3, r3, r2
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	8952      	ldrh	r2, [r2, #10]
 800595e:	3a01      	subs	r2, #1
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d17b      	bne.n	8005a5e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f7ff fc0b 	bl	800518a <get_fat>
 8005974:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d801      	bhi.n	8005980 <dir_next+0xa0>
 800597c:	2302      	movs	r3, #2
 800597e:	e081      	b.n	8005a84 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d101      	bne.n	800598c <dir_next+0xac>
 8005988:	2301      	movs	r3, #1
 800598a:	e07b      	b.n	8005a84 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	429a      	cmp	r2, r3
 8005994:	d359      	bcc.n	8005a4a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	61da      	str	r2, [r3, #28]
 80059a2:	2304      	movs	r3, #4
 80059a4:	e06e      	b.n	8005a84 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f7ff fe3d 	bl	800562e <create_chain>
 80059b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <dir_next+0xe0>
 80059bc:	2307      	movs	r3, #7
 80059be:	e061      	b.n	8005a84 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <dir_next+0xea>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e05c      	b.n	8005a84 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d101      	bne.n	80059d6 <dir_next+0xf6>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e056      	b.n	8005a84 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff fad6 	bl	8004f88 <sync_window>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <dir_next+0x106>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e04e      	b.n	8005a84 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	899b      	ldrh	r3, [r3, #12]
 80059f0:	461a      	mov	r2, r3
 80059f2:	2100      	movs	r1, #0
 80059f4:	f7ff f8ff 	bl	8004bf6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	6979      	ldr	r1, [r7, #20]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff fba4 	bl	800514c <clust2sect>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a0a:	e012      	b.n	8005a32 <dir_next+0x152>
						fs->wflag = 1;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fab8 	bl	8004f88 <sync_window>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <dir_next+0x142>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e030      	b.n	8005a84 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3301      	adds	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	895b      	ldrh	r3, [r3, #10]
 8005a36:	461a      	mov	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d3e6      	bcc.n	8005a0c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad2      	subs	r2, r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff fb7a 	bl	800514c <clust2sect>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	899b      	ldrh	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a76:	fb00 f202 	mul.w	r2, r0, r2
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	18ca      	adds	r2, r1, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fe95 	bl	80057ce <dir_sdi>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d12b      	bne.n	8005b06 <dir_alloc+0x7a>
		n = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff faa9 	bl	8005010 <move_window>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11d      	bne.n	8005b04 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2be5      	cmp	r3, #229	@ 0xe5
 8005ad0:	d004      	beq.n	8005adc <dir_alloc+0x50>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d107      	bne.n	8005aec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d102      	bne.n	8005af0 <dir_alloc+0x64>
 8005aea:	e00c      	b.n	8005b06 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005af0:	2101      	movs	r1, #1
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fef4 	bl	80058e0 <dir_next>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0d7      	beq.n	8005ab2 <dir_alloc+0x26>
 8005b02:	e000      	b.n	8005b06 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005b04:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d101      	bne.n	8005b10 <dir_alloc+0x84>
 8005b0c:	2307      	movs	r3, #7
 8005b0e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	331a      	adds	r3, #26
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe ffc1 	bl	8004ab0 <ld_word>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d109      	bne.n	8005b4e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe ffb6 	bl	8004ab0 <ld_word>
 8005b44:	4603      	mov	r3, r0
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	331a      	adds	r3, #26
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe ffd9 	bl	8004b26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d109      	bne.n	8005b90 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f103 0214 	add.w	r2, r3, #20
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	0c1b      	lsrs	r3, r3, #16
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7fe ffcb 	bl	8004b26 <st_word>
	}
}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005bac:	e03c      	b.n	8005c28 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6938      	ldr	r0, [r7, #16]
 8005bb6:	f7ff fa2b 	bl	8005010 <move_window>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d136      	bne.n	8005c32 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005bd2:	2304      	movs	r3, #4
 8005bd4:	75fb      	strb	r3, [r7, #23]
 8005bd6:	e031      	b.n	8005c3c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	330b      	adds	r3, #11
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005be4:	73bb      	strb	r3, [r7, #14]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	7bba      	ldrb	r2, [r7, #14]
 8005bea:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	2be5      	cmp	r3, #229	@ 0xe5
 8005bf0:	d011      	beq.n	8005c16 <dir_read+0x7e>
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bf6:	d00e      	beq.n	8005c16 <dir_read+0x7e>
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d00b      	beq.n	8005c16 <dir_read+0x7e>
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	f023 0320 	bic.w	r3, r3, #32
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	bf0c      	ite	eq
 8005c08:	2301      	moveq	r3, #1
 8005c0a:	2300      	movne	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00f      	beq.n	8005c36 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005c16:	2100      	movs	r1, #0
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff fe61 	bl	80058e0 <dir_next>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d108      	bne.n	8005c3a <dir_read+0xa2>
	while (dp->sect) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1be      	bne.n	8005bae <dir_read+0x16>
 8005c30:	e004      	b.n	8005c3c <dir_read+0xa4>
		if (res != FR_OK) break;
 8005c32:	bf00      	nop
 8005c34:	e002      	b.n	8005c3c <dir_read+0xa4>
				break;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <dir_read+0xa4>
		if (res != FR_OK) break;
 8005c3a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <dir_read+0xb0>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	61da      	str	r2, [r3, #28]
	return res;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b086      	sub	sp, #24
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c60:	2100      	movs	r1, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fdb3 	bl	80057ce <dir_sdi>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <dir_find+0x24>
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	e03e      	b.n	8005cf4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6938      	ldr	r0, [r7, #16]
 8005c7e:	f7ff f9c7 	bl	8005010 <move_window>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d12f      	bne.n	8005cec <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <dir_find+0x4e>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	75fb      	strb	r3, [r7, #23]
 8005c9e:	e028      	b.n	8005cf2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	330b      	adds	r3, #11
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	330b      	adds	r3, #11
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <dir_find+0x86>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a18      	ldr	r0, [r3, #32]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3324      	adds	r3, #36	@ 0x24
 8005cca:	220b      	movs	r2, #11
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f7fe ffad 	bl	8004c2c <mem_cmp>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005cd8:	2100      	movs	r1, #0
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fe00 	bl	80058e0 <dir_next>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0c5      	beq.n	8005c76 <dir_find+0x24>
 8005cea:	e002      	b.n	8005cf2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005cec:	bf00      	nop
 8005cee:	e000      	b.n	8005cf2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005cf0:	bf00      	nop

	return res;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff febd 	bl	8005a8c <dir_alloc>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d11c      	bne.n	8005d56 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	4619      	mov	r1, r3
 8005d22:	68b8      	ldr	r0, [r7, #8]
 8005d24:	f7ff f974 	bl	8005010 <move_window>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d111      	bne.n	8005d56 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	2220      	movs	r2, #32
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe ff5b 	bl	8004bf6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a18      	ldr	r0, [r3, #32]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3324      	adds	r3, #36	@ 0x24
 8005d48:	220b      	movs	r2, #11
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f7fe ff32 	bl	8004bb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2201      	movs	r2, #1
 8005d54:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	4619      	mov	r1, r3
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff f94b 	bl	8005010 <move_window>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d106      	bne.n	8005d92 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	22e5      	movs	r2, #229	@ 0xe5
 8005d8a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8005d92:	7afb      	ldrb	r3, [r7, #11]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d04f      	beq.n	8005e54 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8005dbc:	e022      	b.n	8005e04 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	1c59      	adds	r1, r3, #1
 8005dc6:	6179      	str	r1, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d016      	beq.n	8005e02 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	2b05      	cmp	r3, #5
 8005dd8:	d101      	bne.n	8005dde <get_fileinfo+0x42>
 8005dda:	23e5      	movs	r3, #229	@ 0xe5
 8005ddc:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d106      	bne.n	8005df2 <get_fileinfo+0x56>
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	613a      	str	r2, [r7, #16]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	4413      	add	r3, r2
 8005dee:	222e      	movs	r2, #46	@ 0x2e
 8005df0:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	613a      	str	r2, [r7, #16]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	7bfa      	ldrb	r2, [r7, #15]
 8005dfe:	725a      	strb	r2, [r3, #9]
 8005e00:	e000      	b.n	8005e04 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8005e02:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b0a      	cmp	r3, #10
 8005e08:	d9d9      	bls.n	8005dbe <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	3309      	adds	r3, #9
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	7ada      	ldrb	r2, [r3, #11]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	331c      	adds	r3, #28
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fe5a 	bl	8004ae0 <ld_dword>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	3316      	adds	r3, #22
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fe51 	bl	8004ae0 <ld_dword>
 8005e3e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	80da      	strh	r2, [r3, #6]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	0c1b      	lsrs	r3, r3, #16
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	809a      	strh	r2, [r3, #4]
 8005e52:	e000      	b.n	8005e56 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005e54:	bf00      	nop
}
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3324      	adds	r3, #36	@ 0x24
 8005e70:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005e72:	220b      	movs	r2, #11
 8005e74:	2120      	movs	r1, #32
 8005e76:	68b8      	ldr	r0, [r7, #8]
 8005e78:	f7fe febd 	bl	8004bf6 <mem_set>
	si = i = 0; ni = 8;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	2308      	movs	r3, #8
 8005e86:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	61fa      	str	r2, [r7, #28]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e96:	7efb      	ldrb	r3, [r7, #27]
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d94e      	bls.n	8005f3a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005e9c:	7efb      	ldrb	r3, [r7, #27]
 8005e9e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ea0:	d006      	beq.n	8005eb0 <create_name+0x54>
 8005ea2:	7efb      	ldrb	r3, [r7, #27]
 8005ea4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ea6:	d110      	bne.n	8005eca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005ea8:	e002      	b.n	8005eb0 <create_name+0x54>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005eba:	d0f6      	beq.n	8005eaa <create_name+0x4e>
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ec6:	d0f0      	beq.n	8005eaa <create_name+0x4e>
			break;
 8005ec8:	e038      	b.n	8005f3c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005eca:	7efb      	ldrb	r3, [r7, #27]
 8005ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ece:	d003      	beq.n	8005ed8 <create_name+0x7c>
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d30c      	bcc.n	8005ef2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b0b      	cmp	r3, #11
 8005edc:	d002      	beq.n	8005ee4 <create_name+0x88>
 8005ede:	7efb      	ldrb	r3, [r7, #27]
 8005ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ee2:	d001      	beq.n	8005ee8 <create_name+0x8c>
 8005ee4:	2306      	movs	r3, #6
 8005ee6:	e044      	b.n	8005f72 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005ee8:	2308      	movs	r3, #8
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	230b      	movs	r3, #11
 8005eee:	617b      	str	r3, [r7, #20]
			continue;
 8005ef0:	e022      	b.n	8005f38 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005ef2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da04      	bge.n	8005f04 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005efa:	7efb      	ldrb	r3, [r7, #27]
 8005efc:	3b80      	subs	r3, #128	@ 0x80
 8005efe:	4a1f      	ldr	r2, [pc, #124]	@ (8005f7c <create_name+0x120>)
 8005f00:	5cd3      	ldrb	r3, [r2, r3]
 8005f02:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005f04:	7efb      	ldrb	r3, [r7, #27]
 8005f06:	4619      	mov	r1, r3
 8005f08:	481d      	ldr	r0, [pc, #116]	@ (8005f80 <create_name+0x124>)
 8005f0a:	f7fe feb6 	bl	8004c7a <chk_chr>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <create_name+0xbc>
 8005f14:	2306      	movs	r3, #6
 8005f16:	e02c      	b.n	8005f72 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005f18:	7efb      	ldrb	r3, [r7, #27]
 8005f1a:	2b60      	cmp	r3, #96	@ 0x60
 8005f1c:	d905      	bls.n	8005f2a <create_name+0xce>
 8005f1e:	7efb      	ldrb	r3, [r7, #27]
 8005f20:	2b7a      	cmp	r3, #122	@ 0x7a
 8005f22:	d802      	bhi.n	8005f2a <create_name+0xce>
 8005f24:	7efb      	ldrb	r3, [r7, #27]
 8005f26:	3b20      	subs	r3, #32
 8005f28:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	613a      	str	r2, [r7, #16]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	4413      	add	r3, r2
 8005f34:	7efa      	ldrb	r2, [r7, #27]
 8005f36:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005f38:	e7a6      	b.n	8005e88 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f3a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	441a      	add	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <create_name+0xf4>
 8005f4c:	2306      	movs	r3, #6
 8005f4e:	e010      	b.n	8005f72 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2be5      	cmp	r3, #229	@ 0xe5
 8005f56:	d102      	bne.n	8005f5e <create_name+0x102>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2205      	movs	r2, #5
 8005f5c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f5e:	7efb      	ldrb	r3, [r7, #27]
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d801      	bhi.n	8005f68 <create_name+0x10c>
 8005f64:	2204      	movs	r2, #4
 8005f66:	e000      	b.n	8005f6a <create_name+0x10e>
 8005f68:	2200      	movs	r2, #0
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	330b      	adds	r3, #11
 8005f6e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f70:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3720      	adds	r7, #32
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	08008e1c 	.word	0x08008e1c
 8005f80:	08008db4 	.word	0x08008db4

08005f84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f98:	e002      	b.n	8005fa0 <follow_path+0x1c>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005fa6:	d0f8      	beq.n	8005f9a <follow_path+0x16>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b5c      	cmp	r3, #92	@ 0x5c
 8005fae:	d0f4      	beq.n	8005f9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b1f      	cmp	r3, #31
 8005fbc:	d80a      	bhi.n	8005fd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2280      	movs	r2, #128	@ 0x80
 8005fc2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fc00 	bl	80057ce <dir_sdi>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]
 8005fd2:	e048      	b.n	8006066 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff3f 	bl	8005e5c <create_name>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d139      	bne.n	800605c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fe32 	bl	8005c52 <dir_find>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ff8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b04      	cmp	r3, #4
 8006004:	d12c      	bne.n	8006060 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d127      	bne.n	8006060 <follow_path+0xdc>
 8006010:	2305      	movs	r3, #5
 8006012:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006014:	e024      	b.n	8006060 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006016:	7afb      	ldrb	r3, [r7, #11]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d121      	bne.n	8006064 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	799b      	ldrb	r3, [r3, #6]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800602c:	2305      	movs	r3, #5
 800602e:	75fb      	strb	r3, [r7, #23]
 8006030:	e019      	b.n	8006066 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	8992      	ldrh	r2, [r2, #12]
 8006040:	fbb3 f0f2 	udiv	r0, r3, r2
 8006044:	fb00 f202 	mul.w	r2, r0, r2
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	440b      	add	r3, r1
 800604c:	4619      	mov	r1, r3
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fd63 	bl	8005b1a <ld_clust>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800605a:	e7bb      	b.n	8005fd4 <follow_path+0x50>
			if (res != FR_OK) break;
 800605c:	bf00      	nop
 800605e:	e002      	b.n	8006066 <follow_path+0xe2>
				break;
 8006060:	bf00      	nop
 8006062:	e000      	b.n	8006066 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006064:	bf00      	nop
			}
		}
	}

	return res;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006078:	f04f 33ff 	mov.w	r3, #4294967295
 800607c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d031      	beq.n	80060ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e002      	b.n	8006094 <get_ldnumber+0x24>
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	3301      	adds	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b20      	cmp	r3, #32
 800609a:	d903      	bls.n	80060a4 <get_ldnumber+0x34>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80060a2:	d1f4      	bne.n	800608e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80060aa:	d11c      	bne.n	80060e6 <get_ldnumber+0x76>
			tp = *path;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	60fa      	str	r2, [r7, #12]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	3b30      	subs	r3, #48	@ 0x30
 80060bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	d80e      	bhi.n	80060e2 <get_ldnumber+0x72>
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d10a      	bne.n	80060e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d107      	bne.n	80060e2 <get_ldnumber+0x72>
					vol = (int)i;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	3301      	adds	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	e002      	b.n	80060ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060ea:	693b      	ldr	r3, [r7, #16]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	70da      	strb	r2, [r3, #3]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fe ff7c 	bl	8005010 <move_window>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <check_fs+0x2a>
 800611e:	2304      	movs	r3, #4
 8006120:	e038      	b.n	8006194 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3334      	adds	r3, #52	@ 0x34
 8006126:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fcc0 	bl	8004ab0 <ld_word>
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006138:	429a      	cmp	r2, r3
 800613a:	d001      	beq.n	8006140 <check_fs+0x48>
 800613c:	2303      	movs	r3, #3
 800613e:	e029      	b.n	8006194 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006146:	2be9      	cmp	r3, #233	@ 0xe9
 8006148:	d009      	beq.n	800615e <check_fs+0x66>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006150:	2beb      	cmp	r3, #235	@ 0xeb
 8006152:	d11e      	bne.n	8006192 <check_fs+0x9a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800615a:	2b90      	cmp	r3, #144	@ 0x90
 800615c:	d119      	bne.n	8006192 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3334      	adds	r3, #52	@ 0x34
 8006162:	3336      	adds	r3, #54	@ 0x36
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe fcbb 	bl	8004ae0 <ld_dword>
 800616a:	4603      	mov	r3, r0
 800616c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006170:	4a0a      	ldr	r2, [pc, #40]	@ (800619c <check_fs+0xa4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d101      	bne.n	800617a <check_fs+0x82>
 8006176:	2300      	movs	r3, #0
 8006178:	e00c      	b.n	8006194 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3334      	adds	r3, #52	@ 0x34
 800617e:	3352      	adds	r3, #82	@ 0x52
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe fcad 	bl	8004ae0 <ld_dword>
 8006186:	4603      	mov	r3, r0
 8006188:	4a05      	ldr	r2, [pc, #20]	@ (80061a0 <check_fs+0xa8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d101      	bne.n	8006192 <check_fs+0x9a>
 800618e:	2300      	movs	r3, #0
 8006190:	e000      	b.n	8006194 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006192:	2302      	movs	r3, #2
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	00544146 	.word	0x00544146
 80061a0:	33544146 	.word	0x33544146

080061a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b096      	sub	sp, #88	@ 0x58
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff ff59 	bl	8006070 <get_ldnumber>
 80061be:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80061c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	da01      	bge.n	80061ca <find_volume+0x26>
 80061c6:	230b      	movs	r3, #11
 80061c8:	e262      	b.n	8006690 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80061ca:	4a9f      	ldr	r2, [pc, #636]	@ (8006448 <find_volume+0x2a4>)
 80061cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <find_volume+0x3a>
 80061da:	230c      	movs	r3, #12
 80061dc:	e258      	b.n	8006690 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80061ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01a      	beq.n	800622a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80061f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fbbb 	bl	8004974 <disk_status>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006204:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <find_volume+0x82>
 8006216:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006222:	230a      	movs	r3, #10
 8006224:	e234      	b.n	8006690 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006226:	2300      	movs	r3, #0
 8006228:	e232      	b.n	8006690 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800622a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006232:	b2da      	uxtb	r2, r3
 8006234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006236:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe fbb3 	bl	80049a8 <disk_initialize>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006248:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006254:	2303      	movs	r3, #3
 8006256:	e21b      	b.n	8006690 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <find_volume+0xca>
 800625e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800626a:	230a      	movs	r3, #10
 800626c:	e210      	b.n	8006690 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800626e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006270:	7858      	ldrb	r0, [r3, #1]
 8006272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006274:	330c      	adds	r3, #12
 8006276:	461a      	mov	r2, r3
 8006278:	2102      	movs	r1, #2
 800627a:	f7fe fbfb 	bl	8004a74 <disk_ioctl>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <find_volume+0xe4>
 8006284:	2301      	movs	r3, #1
 8006286:	e203      	b.n	8006690 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	899b      	ldrh	r3, [r3, #12]
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006290:	d80d      	bhi.n	80062ae <find_volume+0x10a>
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	899b      	ldrh	r3, [r3, #12]
 8006296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629a:	d308      	bcc.n	80062ae <find_volume+0x10a>
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	899b      	ldrh	r3, [r3, #12]
 80062a0:	461a      	mov	r2, r3
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	899b      	ldrh	r3, [r3, #12]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	4013      	ands	r3, r2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <find_volume+0x10e>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e1ee      	b.n	8006690 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80062b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062ba:	f7ff ff1d 	bl	80060f8 <check_fs>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80062c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d149      	bne.n	8006360 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062cc:	2300      	movs	r3, #0
 80062ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d0:	e01e      	b.n	8006310 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80062d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80062e0:	4413      	add	r3, r2
 80062e2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	3304      	adds	r3, #4
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <find_volume+0x158>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	3308      	adds	r3, #8
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fbf4 	bl	8004ae0 <ld_dword>
 80062f8:	4602      	mov	r2, r0
 80062fa:	e000      	b.n	80062fe <find_volume+0x15a>
 80062fc:	2200      	movs	r2, #0
 80062fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	3358      	adds	r3, #88	@ 0x58
 8006304:	443b      	add	r3, r7
 8006306:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800630a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800630c:	3301      	adds	r3, #1
 800630e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006312:	2b03      	cmp	r3, #3
 8006314:	d9dd      	bls.n	80062d2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006316:	2300      	movs	r3, #0
 8006318:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800631a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <find_volume+0x182>
 8006320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006322:	3b01      	subs	r3, #1
 8006324:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	3358      	adds	r3, #88	@ 0x58
 800632c:	443b      	add	r3, r7
 800632e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006332:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <find_volume+0x1a2>
 800633a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800633c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800633e:	f7ff fedb 	bl	80060f8 <check_fs>
 8006342:	4603      	mov	r3, r0
 8006344:	e000      	b.n	8006348 <find_volume+0x1a4>
 8006346:	2303      	movs	r3, #3
 8006348:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800634c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006350:	2b01      	cmp	r3, #1
 8006352:	d905      	bls.n	8006360 <find_volume+0x1bc>
 8006354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006356:	3301      	adds	r3, #1
 8006358:	643b      	str	r3, [r7, #64]	@ 0x40
 800635a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800635c:	2b03      	cmp	r3, #3
 800635e:	d9e2      	bls.n	8006326 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006360:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006364:	2b04      	cmp	r3, #4
 8006366:	d101      	bne.n	800636c <find_volume+0x1c8>
 8006368:	2301      	movs	r3, #1
 800636a:	e191      	b.n	8006690 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800636c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006370:	2b01      	cmp	r3, #1
 8006372:	d901      	bls.n	8006378 <find_volume+0x1d4>
 8006374:	230d      	movs	r3, #13
 8006376:	e18b      	b.n	8006690 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637a:	3334      	adds	r3, #52	@ 0x34
 800637c:	330b      	adds	r3, #11
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fb96 	bl	8004ab0 <ld_word>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	899b      	ldrh	r3, [r3, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d001      	beq.n	8006394 <find_volume+0x1f0>
 8006390:	230d      	movs	r3, #13
 8006392:	e17d      	b.n	8006690 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006396:	3334      	adds	r3, #52	@ 0x34
 8006398:	3316      	adds	r3, #22
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fb88 	bl	8004ab0 <ld_word>
 80063a0:	4603      	mov	r3, r0
 80063a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80063a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <find_volume+0x214>
 80063aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ac:	3334      	adds	r3, #52	@ 0x34
 80063ae:	3324      	adds	r3, #36	@ 0x24
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe fb95 	bl	8004ae0 <ld_dword>
 80063b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063bc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80063be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80063c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	789b      	ldrb	r3, [r3, #2]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d005      	beq.n	80063dc <find_volume+0x238>
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	789b      	ldrb	r3, [r3, #2]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d001      	beq.n	80063dc <find_volume+0x238>
 80063d8:	230d      	movs	r3, #13
 80063da:	e159      	b.n	8006690 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	789b      	ldrb	r3, [r3, #2]
 80063e0:	461a      	mov	r2, r3
 80063e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063e4:	fb02 f303 	mul.w	r3, r2, r3
 80063e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f0:	461a      	mov	r2, r3
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	895b      	ldrh	r3, [r3, #10]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d008      	beq.n	8006410 <find_volume+0x26c>
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	895b      	ldrh	r3, [r3, #10]
 8006402:	461a      	mov	r2, r3
 8006404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006406:	895b      	ldrh	r3, [r3, #10]
 8006408:	3b01      	subs	r3, #1
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <find_volume+0x270>
 8006410:	230d      	movs	r3, #13
 8006412:	e13d      	b.n	8006690 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	3334      	adds	r3, #52	@ 0x34
 8006418:	3311      	adds	r3, #17
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fb48 	bl	8004ab0 <ld_word>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006426:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642a:	891b      	ldrh	r3, [r3, #8]
 800642c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800642e:	8992      	ldrh	r2, [r2, #12]
 8006430:	0952      	lsrs	r2, r2, #5
 8006432:	b292      	uxth	r2, r2
 8006434:	fbb3 f1f2 	udiv	r1, r3, r2
 8006438:	fb01 f202 	mul.w	r2, r1, r2
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <find_volume+0x2a8>
 8006444:	230d      	movs	r3, #13
 8006446:	e123      	b.n	8006690 <find_volume+0x4ec>
 8006448:	20002208 	.word	0x20002208

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	3334      	adds	r3, #52	@ 0x34
 8006450:	3313      	adds	r3, #19
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fb2c 	bl	8004ab0 <ld_word>
 8006458:	4603      	mov	r3, r0
 800645a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800645c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <find_volume+0x2cc>
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	3334      	adds	r3, #52	@ 0x34
 8006466:	3320      	adds	r3, #32
 8006468:	4618      	mov	r0, r3
 800646a:	f7fe fb39 	bl	8004ae0 <ld_dword>
 800646e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006472:	3334      	adds	r3, #52	@ 0x34
 8006474:	330e      	adds	r3, #14
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fb1a 	bl	8004ab0 <ld_word>
 800647c:	4603      	mov	r3, r0
 800647e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006480:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <find_volume+0x2e6>
 8006486:	230d      	movs	r3, #13
 8006488:	e102      	b.n	8006690 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800648a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800648c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800648e:	4413      	add	r3, r2
 8006490:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006492:	8911      	ldrh	r1, [r2, #8]
 8006494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006496:	8992      	ldrh	r2, [r2, #12]
 8006498:	0952      	lsrs	r2, r2, #5
 800649a:	b292      	uxth	r2, r2
 800649c:	fbb1 f2f2 	udiv	r2, r1, r2
 80064a0:	b292      	uxth	r2, r2
 80064a2:	4413      	add	r3, r2
 80064a4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80064a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d201      	bcs.n	80064b2 <find_volume+0x30e>
 80064ae:	230d      	movs	r3, #13
 80064b0:	e0ee      	b.n	8006690 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80064b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ba:	8952      	ldrh	r2, [r2, #10]
 80064bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <find_volume+0x328>
 80064c8:	230d      	movs	r3, #13
 80064ca:	e0e1      	b.n	8006690 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80064cc:	2303      	movs	r3, #3
 80064ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80064d8:	4293      	cmp	r3, r2
 80064da:	d802      	bhi.n	80064e2 <find_volume+0x33e>
 80064dc:	2302      	movs	r3, #2
 80064de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d802      	bhi.n	80064f2 <find_volume+0x34e>
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	1c9a      	adds	r2, r3, #2
 80064f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064fe:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006500:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006504:	441a      	add	r2, r3
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800650a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	441a      	add	r2, r3
 8006510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006512:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8006514:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006518:	2b03      	cmp	r3, #3
 800651a:	d11e      	bne.n	800655a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	3334      	adds	r3, #52	@ 0x34
 8006520:	332a      	adds	r3, #42	@ 0x2a
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fac4 	bl	8004ab0 <ld_word>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <find_volume+0x38e>
 800652e:	230d      	movs	r3, #13
 8006530:	e0ae      	b.n	8006690 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	891b      	ldrh	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <find_volume+0x39a>
 800653a:	230d      	movs	r3, #13
 800653c:	e0a8      	b.n	8006690 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	3334      	adds	r3, #52	@ 0x34
 8006542:	332c      	adds	r3, #44	@ 0x2c
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe facb 	bl	8004ae0 <ld_dword>
 800654a:	4602      	mov	r2, r0
 800654c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	647b      	str	r3, [r7, #68]	@ 0x44
 8006558:	e01f      	b.n	800659a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	891b      	ldrh	r3, [r3, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <find_volume+0x3c2>
 8006562:	230d      	movs	r3, #13
 8006564:	e094      	b.n	8006690 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800656a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800656c:	441a      	add	r2, r3
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006572:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006576:	2b02      	cmp	r3, #2
 8006578:	d103      	bne.n	8006582 <find_volume+0x3de>
 800657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	e00a      	b.n	8006598 <find_volume+0x3f4>
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	4613      	mov	r3, r2
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	4413      	add	r3, r2
 800658c:	085a      	lsrs	r2, r3, #1
 800658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006598:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	69da      	ldr	r2, [r3, #28]
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	899b      	ldrh	r3, [r3, #12]
 80065a2:	4619      	mov	r1, r3
 80065a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a6:	440b      	add	r3, r1
 80065a8:	3b01      	subs	r3, #1
 80065aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065ac:	8989      	ldrh	r1, [r1, #12]
 80065ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d201      	bcs.n	80065ba <find_volume+0x416>
 80065b6:	230d      	movs	r3, #13
 80065b8:	e06a      	b.n	8006690 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	f04f 32ff 	mov.w	r2, #4294967295
 80065c0:	615a      	str	r2, [r3, #20]
 80065c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80065ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065cc:	2280      	movs	r2, #128	@ 0x80
 80065ce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80065d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d149      	bne.n	800666c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	3334      	adds	r3, #52	@ 0x34
 80065dc:	3330      	adds	r3, #48	@ 0x30
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fa66 	bl	8004ab0 <ld_word>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d140      	bne.n	800666c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80065ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ec:	3301      	adds	r3, #1
 80065ee:	4619      	mov	r1, r3
 80065f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065f2:	f7fe fd0d 	bl	8005010 <move_window>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d137      	bne.n	800666c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	2200      	movs	r2, #0
 8006600:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006604:	3334      	adds	r3, #52	@ 0x34
 8006606:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fa50 	bl	8004ab0 <ld_word>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006618:	429a      	cmp	r2, r3
 800661a:	d127      	bne.n	800666c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661e:	3334      	adds	r3, #52	@ 0x34
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fa5d 	bl	8004ae0 <ld_dword>
 8006626:	4603      	mov	r3, r0
 8006628:	4a1b      	ldr	r2, [pc, #108]	@ (8006698 <find_volume+0x4f4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d11e      	bne.n	800666c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	3334      	adds	r3, #52	@ 0x34
 8006632:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fa52 	bl	8004ae0 <ld_dword>
 800663c:	4603      	mov	r3, r0
 800663e:	4a17      	ldr	r2, [pc, #92]	@ (800669c <find_volume+0x4f8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d113      	bne.n	800666c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	3334      	adds	r3, #52	@ 0x34
 8006648:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fa47 	bl	8004ae0 <ld_dword>
 8006652:	4602      	mov	r2, r0
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665a:	3334      	adds	r3, #52	@ 0x34
 800665c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fa3d 	bl	8004ae0 <ld_dword>
 8006666:	4602      	mov	r2, r0
 8006668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800666c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006672:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006674:	4b0a      	ldr	r3, [pc, #40]	@ (80066a0 <find_volume+0x4fc>)
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	4b08      	ldr	r3, [pc, #32]	@ (80066a0 <find_volume+0x4fc>)
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <find_volume+0x4fc>)
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006688:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800668a:	f7fe fc59 	bl	8004f40 <clear_lock>
#endif
	return FR_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3758      	adds	r7, #88	@ 0x58
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	41615252 	.word	0x41615252
 800669c:	61417272 	.word	0x61417272
 80066a0:	2000220c 	.word	0x2000220c

080066a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80066ae:	2309      	movs	r3, #9
 80066b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01c      	beq.n	80066f2 <validate+0x4e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d018      	beq.n	80066f2 <validate+0x4e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d013      	beq.n	80066f2 <validate+0x4e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	889a      	ldrh	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	88db      	ldrh	r3, [r3, #6]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d10c      	bne.n	80066f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe f948 	bl	8004974 <disk_status>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <validate+0x4e>
			res = FR_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <validate+0x5a>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	e000      	b.n	8006700 <validate+0x5c>
 80066fe:	2300      	movs	r3, #0
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	6013      	str	r3, [r2, #0]
	return res;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006722:	f107 0310 	add.w	r3, r7, #16
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fca2 	bl	8006070 <get_ldnumber>
 800672c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	2b00      	cmp	r3, #0
 8006732:	da01      	bge.n	8006738 <f_mount+0x28>
 8006734:	230b      	movs	r3, #11
 8006736:	e02b      	b.n	8006790 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006738:	4a17      	ldr	r2, [pc, #92]	@ (8006798 <f_mount+0x88>)
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006740:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006748:	69b8      	ldr	r0, [r7, #24]
 800674a:	f7fe fbf9 	bl	8004f40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	490d      	ldr	r1, [pc, #52]	@ (8006798 <f_mount+0x88>)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <f_mount+0x66>
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d001      	beq.n	800677a <f_mount+0x6a>
 8006776:	2300      	movs	r3, #0
 8006778:	e00a      	b.n	8006790 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800677a:	f107 010c 	add.w	r1, r7, #12
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	2200      	movs	r2, #0
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fd0d 	bl	80061a4 <find_volume>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800678e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20002208 	.word	0x20002208

0800679c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b098      	sub	sp, #96	@ 0x60
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <f_open+0x18>
 80067b0:	2309      	movs	r3, #9
 80067b2:	e1b7      	b.n	8006b24 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80067bc:	79fa      	ldrb	r2, [r7, #7]
 80067be:	f107 0110 	add.w	r1, r7, #16
 80067c2:	f107 0308 	add.w	r3, r7, #8
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fcec 	bl	80061a4 <find_volume>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80067d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f040 819b 	bne.w	8006b12 <f_open+0x376>
		dj.obj.fs = fs;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	f107 0314 	add.w	r3, r7, #20
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fbcb 	bl	8005f84 <follow_path>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80067f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d118      	bne.n	800682e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80067fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006800:	b25b      	sxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	da03      	bge.n	800680e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006806:	2306      	movs	r3, #6
 8006808:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800680c:	e00f      	b.n	800682e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	2b01      	cmp	r3, #1
 8006812:	bf8c      	ite	hi
 8006814:	2301      	movhi	r3, #1
 8006816:	2300      	movls	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	f107 0314 	add.w	r3, r7, #20
 8006820:	4611      	mov	r1, r2
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe fa44 	bl	8004cb0 <chk_lock>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	f003 031c 	and.w	r3, r3, #28
 8006834:	2b00      	cmp	r3, #0
 8006836:	d07f      	beq.n	8006938 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006838:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800683c:	2b00      	cmp	r3, #0
 800683e:	d017      	beq.n	8006870 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006840:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006844:	2b04      	cmp	r3, #4
 8006846:	d10e      	bne.n	8006866 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006848:	f7fe fa8e 	bl	8004d68 <enq_lock>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d006      	beq.n	8006860 <f_open+0xc4>
 8006852:	f107 0314 	add.w	r3, r7, #20
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fa50 	bl	8005cfc <dir_register>
 800685c:	4603      	mov	r3, r0
 800685e:	e000      	b.n	8006862 <f_open+0xc6>
 8006860:	2312      	movs	r3, #18
 8006862:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	f043 0308 	orr.w	r3, r3, #8
 800686c:	71fb      	strb	r3, [r7, #7]
 800686e:	e010      	b.n	8006892 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006870:	7ebb      	ldrb	r3, [r7, #26]
 8006872:	f003 0311 	and.w	r3, r3, #17
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <f_open+0xe6>
					res = FR_DENIED;
 800687a:	2307      	movs	r3, #7
 800687c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006880:	e007      	b.n	8006892 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <f_open+0xf6>
 800688c:	2308      	movs	r3, #8
 800688e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006892:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006896:	2b00      	cmp	r3, #0
 8006898:	d168      	bne.n	800696c <f_open+0x1d0>
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d063      	beq.n	800696c <f_open+0x1d0>
				dw = GET_FATTIME();
 80068a4:	f7fd fee0 	bl	8004668 <get_fattime>
 80068a8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80068aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ac:	330e      	adds	r3, #14
 80068ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe f953 	bl	8004b5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80068b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b8:	3316      	adds	r3, #22
 80068ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe f94d 	bl	8004b5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80068c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c4:	330b      	adds	r3, #11
 80068c6:	2220      	movs	r2, #32
 80068c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068ce:	4611      	mov	r1, r2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff f922 	bl	8005b1a <ld_clust>
 80068d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80068dc:	2200      	movs	r2, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff f93a 	bl	8005b58 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80068e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e6:	331c      	adds	r3, #28
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe f936 	bl	8004b5c <st_dword>
					fs->wflag = 1;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2201      	movs	r2, #1
 80068f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80068f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d037      	beq.n	800696c <f_open+0x1d0>
						dw = fs->winsect;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006902:	f107 0314 	add.w	r3, r7, #20
 8006906:	2200      	movs	r2, #0
 8006908:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fe2a 	bl	8005564 <remove_chain>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006916:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800691a:	2b00      	cmp	r3, #0
 800691c:	d126      	bne.n	800696c <f_open+0x1d0>
							res = move_window(fs, dw);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fb74 	bl	8005010 <move_window>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006932:	3a01      	subs	r2, #1
 8006934:	611a      	str	r2, [r3, #16]
 8006936:	e019      	b.n	800696c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006938:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800693c:	2b00      	cmp	r3, #0
 800693e:	d115      	bne.n	800696c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006940:	7ebb      	ldrb	r3, [r7, #26]
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <f_open+0x1b6>
					res = FR_NO_FILE;
 800694a:	2304      	movs	r3, #4
 800694c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006950:	e00c      	b.n	800696c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <f_open+0x1d0>
 800695c:	7ebb      	ldrb	r3, [r7, #26]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <f_open+0x1d0>
						res = FR_DENIED;
 8006966:	2307      	movs	r3, #7
 8006968:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800696c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006970:	2b00      	cmp	r3, #0
 8006972:	d126      	bne.n	80069c2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006984:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800698e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	2b01      	cmp	r3, #1
 8006998:	bf8c      	ite	hi
 800699a:	2301      	movhi	r3, #1
 800699c:	2300      	movls	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	f107 0314 	add.w	r3, r7, #20
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe f9ff 	bl	8004dac <inc_lock>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <f_open+0x226>
 80069bc:	2302      	movs	r3, #2
 80069be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80069c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 80a3 	bne.w	8006b12 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff f8a1 	bl	8005b1a <ld_clust>
 80069d8:	4602      	mov	r2, r0
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80069de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e0:	331c      	adds	r3, #28
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe f87c 	bl	8004ae0 <ld_dword>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	88da      	ldrh	r2, [r3, #6]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	79fa      	ldrb	r2, [r7, #7]
 8006a06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3330      	adds	r3, #48	@ 0x30
 8006a1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe f8e6 	bl	8004bf6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d06e      	beq.n	8006b12 <f_open+0x376>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d06a      	beq.n	8006b12 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	895b      	ldrh	r3, [r3, #10]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	899b      	ldrh	r3, [r3, #12]
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
 8006a52:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a60:	e016      	b.n	8006a90 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fb8f 	bl	800518a <get_fat>
 8006a6c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d802      	bhi.n	8006a7a <f_open+0x2de>
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006a7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a80:	d102      	bne.n	8006a88 <f_open+0x2ec>
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d103      	bne.n	8006aa0 <f_open+0x304>
 8006a98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d8e0      	bhi.n	8006a62 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aa4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d131      	bne.n	8006b12 <f_open+0x376>
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	899b      	ldrh	r3, [r3, #12]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aba:	fb01 f202 	mul.w	r2, r1, r2
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d026      	beq.n	8006b12 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fb3f 	bl	800514c <clust2sect>
 8006ace:	6478      	str	r0, [r7, #68]	@ 0x44
 8006ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <f_open+0x342>
						res = FR_INT_ERR;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006adc:	e019      	b.n	8006b12 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	899b      	ldrh	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aec:	441a      	add	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	7858      	ldrb	r0, [r3, #1]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a1a      	ldr	r2, [r3, #32]
 8006b00:	2301      	movs	r3, #1
 8006b02:	f7fd ff77 	bl	80049f4 <disk_read>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <f_open+0x376>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006b12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <f_open+0x384>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006b20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3760      	adds	r7, #96	@ 0x60
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08c      	sub	sp, #48	@ 0x30
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f107 0210 	add.w	r2, r7, #16
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fda9 	bl	80066a4 <validate>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d107      	bne.n	8006b70 <f_write+0x44>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	7d5b      	ldrb	r3, [r3, #21]
 8006b64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006b68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <f_write+0x4a>
 8006b70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b74:	e16a      	b.n	8006e4c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	7d1b      	ldrb	r3, [r3, #20]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <f_write+0x5a>
 8006b82:	2307      	movs	r3, #7
 8006b84:	e162      	b.n	8006e4c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	441a      	add	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	f080 814c 	bcs.w	8006e30 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006ba0:	e146      	b.n	8006e30 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	8992      	ldrh	r2, [r2, #12]
 8006baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bae:	fb01 f202 	mul.w	r2, r1, r2
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 80f1 	bne.w	8006d9c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	8992      	ldrh	r2, [r2, #12]
 8006bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	8952      	ldrh	r2, [r2, #10]
 8006bca:	3a01      	subs	r2, #1
 8006bcc:	4013      	ands	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d143      	bne.n	8006c5e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10c      	bne.n	8006bf8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d11a      	bne.n	8006c20 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fd1d 	bl	800562e <create_chain>
 8006bf4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006bf6:	e013      	b.n	8006c20 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d007      	beq.n	8006c10 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	4619      	mov	r1, r3
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f7fe fda9 	bl	800575e <clmt_clust>
 8006c0c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006c0e:	e007      	b.n	8006c20 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f7fe fd08 	bl	800562e <create_chain>
 8006c1e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8109 	beq.w	8006e3a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d104      	bne.n	8006c38 <f_write+0x10c>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2202      	movs	r2, #2
 8006c32:	755a      	strb	r2, [r3, #21]
 8006c34:	2302      	movs	r3, #2
 8006c36:	e109      	b.n	8006e4c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d104      	bne.n	8006c4a <f_write+0x11e>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	755a      	strb	r2, [r3, #21]
 8006c46:	2301      	movs	r3, #1
 8006c48:	e100      	b.n	8006e4c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c4e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <f_write+0x132>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c5c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	7d1b      	ldrb	r3, [r3, #20]
 8006c62:	b25b      	sxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	da18      	bge.n	8006c9a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	7858      	ldrb	r0, [r3, #1]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1a      	ldr	r2, [r3, #32]
 8006c76:	2301      	movs	r3, #1
 8006c78:	f7fd fedc 	bl	8004a34 <disk_write>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d004      	beq.n	8006c8c <f_write+0x160>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	755a      	strb	r2, [r3, #21]
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0df      	b.n	8006e4c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	7d1b      	ldrb	r3, [r3, #20]
 8006c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f7fe fa52 	bl	800514c <clust2sect>
 8006ca8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <f_write+0x18e>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	755a      	strb	r2, [r3, #21]
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e0c8      	b.n	8006e4c <f_write+0x320>
			sect += csect;
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	899b      	ldrh	r3, [r3, #12]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cce:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d043      	beq.n	8006d5e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	4413      	add	r3, r2
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	8952      	ldrh	r2, [r2, #10]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d905      	bls.n	8006cf0 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	895b      	ldrh	r3, [r3, #10]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	7858      	ldrb	r0, [r3, #1]
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	69f9      	ldr	r1, [r7, #28]
 8006cfa:	f7fd fe9b 	bl	8004a34 <disk_write>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <f_write+0x1e2>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	755a      	strb	r2, [r3, #21]
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e09e      	b.n	8006e4c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1a      	ldr	r2, [r3, #32]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d918      	bls.n	8006d4e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	8992      	ldrh	r2, [r2, #12]
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	18d1      	adds	r1, r2, r3
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	899b      	ldrh	r3, [r3, #12]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f7fd ff3a 	bl	8004bb4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	7d1b      	ldrb	r3, [r3, #20]
 8006d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	899b      	ldrh	r3, [r3, #12]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006d5c:	e04b      	b.n	8006df6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d016      	beq.n	8006d96 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d210      	bcs.n	8006d96 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	7858      	ldrb	r0, [r3, #1]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d7e:	2301      	movs	r3, #1
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	f7fd fe37 	bl	80049f4 <disk_read>
 8006d86:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	755a      	strb	r2, [r3, #21]
 8006d92:	2301      	movs	r3, #1
 8006d94:	e05a      	b.n	8006e4c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	899b      	ldrh	r3, [r3, #12]
 8006da0:	4618      	mov	r0, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	8992      	ldrh	r2, [r2, #12]
 8006daa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dae:	fb01 f202 	mul.w	r2, r1, r2
 8006db2:	1a9b      	subs	r3, r3, r2
 8006db4:	1ac3      	subs	r3, r0, r3
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d901      	bls.n	8006dc4 <f_write+0x298>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	8992      	ldrh	r2, [r2, #12]
 8006dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dd6:	fb00 f202 	mul.w	r2, r0, r2
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	440b      	add	r3, r1
 8006dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de0:	69f9      	ldr	r1, [r7, #28]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fd fee6 	bl	8004bb4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7d1b      	ldrb	r3, [r3, #20]
 8006dec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	4413      	add	r3, r2
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	441a      	add	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	619a      	str	r2, [r3, #24]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	bf38      	it	cc
 8006e16:	461a      	movcc	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	60da      	str	r2, [r3, #12]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	441a      	add	r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f47f aeb5 	bne.w	8006ba2 <f_write+0x76>
 8006e38:	e000      	b.n	8006e3c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006e3a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	7d1b      	ldrb	r3, [r3, #20]
 8006e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3730      	adds	r7, #48	@ 0x30
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f107 0208 	add.w	r2, r7, #8
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff fc1d 	bl	80066a4 <validate>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d168      	bne.n	8006f46 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	7d1b      	ldrb	r3, [r3, #20]
 8006e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d062      	beq.n	8006f46 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7d1b      	ldrb	r3, [r3, #20]
 8006e84:	b25b      	sxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da15      	bge.n	8006eb6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	7858      	ldrb	r0, [r3, #1]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1a      	ldr	r2, [r3, #32]
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f7fd fdcb 	bl	8004a34 <disk_write>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <f_sync+0x54>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e04f      	b.n	8006f48 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7d1b      	ldrb	r3, [r3, #20]
 8006eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006eb6:	f7fd fbd7 	bl	8004668 <get_fattime>
 8006eba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7fe f8a3 	bl	8005010 <move_window>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d138      	bne.n	8006f46 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	330b      	adds	r3, #11
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	330b      	adds	r3, #11
 8006ee4:	f042 0220 	orr.w	r2, r2, #32
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	f7fe fe2e 	bl	8005b58 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f103 021c 	add.w	r2, r3, #28
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	4619      	mov	r1, r3
 8006f08:	4610      	mov	r0, r2
 8006f0a:	f7fd fe27 	bl	8004b5c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3316      	adds	r3, #22
 8006f12:	6939      	ldr	r1, [r7, #16]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd fe21 	bl	8004b5c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3312      	adds	r3, #18
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fd fe00 	bl	8004b26 <st_word>
					fs->wflag = 1;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe f89c 	bl	800506c <sync_fs>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7d1b      	ldrb	r3, [r3, #20]
 8006f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ff7b 	bl	8006e54 <f_sync>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d118      	bne.n	8006f9a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f107 0208 	add.w	r2, r7, #8
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff fb97 	bl	80066a4 <validate>
 8006f76:	4603      	mov	r3, r0
 8006f78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10c      	bne.n	8006f9a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fd ff9f 	bl	8004ec8 <dec_lock>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <f_opendir+0x14>
 8006fb4:	2309      	movs	r3, #9
 8006fb6:	e064      	b.n	8007082 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8006fbc:	f107 010c 	add.w	r1, r7, #12
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff f8ed 	bl	80061a4 <find_volume>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d14f      	bne.n	8007074 <f_opendir+0xd0>
		obj->fs = fs;
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fe ffd0 	bl	8005f84 <follow_path>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d13d      	bne.n	800706a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006ff4:	b25b      	sxtb	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	db12      	blt.n	8007020 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	799b      	ldrb	r3, [r3, #6]
 8006ffe:	f003 0310 	and.w	r3, r3, #16
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7fe fd83 	bl	8005b1a <ld_clust>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	609a      	str	r2, [r3, #8]
 800701a:	e001      	b.n	8007020 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800701c:	2305      	movs	r3, #5
 800701e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d121      	bne.n	800706a <f_opendir+0xc6>
				obj->id = fs->id;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	88da      	ldrh	r2, [r3, #6]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800702e:	2100      	movs	r1, #0
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fe fbcc 	bl	80057ce <dir_sdi>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d114      	bne.n	800706a <f_opendir+0xc6>
					if (obj->sclust) {
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00d      	beq.n	8007064 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007048:	2100      	movs	r1, #0
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fd feae 	bl	8004dac <inc_lock>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d105      	bne.n	800706a <f_opendir+0xc6>
 800705e:	2312      	movs	r3, #18
 8007060:	75fb      	strb	r3, [r7, #23]
 8007062:	e002      	b.n	800706a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2200      	movs	r2, #0
 8007068:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d101      	bne.n	8007074 <f_opendir+0xd0>
 8007070:	2305      	movs	r3, #5
 8007072:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <f_opendir+0xdc>
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007080:	7dfb      	ldrb	r3, [r7, #23]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f107 0208 	add.w	r2, r7, #8
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fb02 	bl	80066a4 <validate>
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d110      	bne.n	80070cc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d006      	beq.n	80070c0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fd ff06 	bl	8004ec8 <dec_lock>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f107 0208 	add.w	r2, r7, #8
 80070e6:	4611      	mov	r1, r2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff fadb 	bl	80066a4 <validate>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d126      	bne.n	8007146 <f_readdir+0x70>
		if (!fno) {
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80070fe:	2100      	movs	r1, #0
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fe fb64 	bl	80057ce <dir_sdi>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
 800710a:	e01c      	b.n	8007146 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800710c:	2100      	movs	r1, #0
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fe fd42 	bl	8005b98 <dir_read>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b04      	cmp	r3, #4
 800711c:	d101      	bne.n	8007122 <f_readdir+0x4c>
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10e      	bne.n	8007146 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fe fe36 	bl	8005d9c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fe fbd4 	bl	80058e0 <dir_next>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d101      	bne.n	8007146 <f_readdir+0x70>
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b090      	sub	sp, #64	@ 0x40
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800715a:	f107 010c 	add.w	r1, r7, #12
 800715e:	1d3b      	adds	r3, r7, #4
 8007160:	2200      	movs	r2, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f7ff f81e 	bl	80061a4 <find_volume>
 8007168:	4603      	mov	r3, r0
 800716a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800716e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007172:	2b00      	cmp	r3, #0
 8007174:	d11f      	bne.n	80071b6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe ff00 	bl	8005f84 <follow_path>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800718a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800718e:	2b00      	cmp	r3, #0
 8007190:	d111      	bne.n	80071b6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007192:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007196:	b25b      	sxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	da03      	bge.n	80071a4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800719c:	2306      	movs	r3, #6
 800719e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80071a2:	e008      	b.n	80071b6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <f_stat+0x66>
 80071aa:	f107 030c 	add.w	r3, r7, #12
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fdf3 	bl	8005d9c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80071b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3740      	adds	r7, #64	@ 0x40
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b092      	sub	sp, #72	@ 0x48
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80071ce:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80071d2:	f107 030c 	add.w	r3, r7, #12
 80071d6:	2200      	movs	r2, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe ffe3 	bl	80061a4 <find_volume>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80071e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 8099 	bne.w	8007320 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80071ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80071f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f6:	695a      	ldr	r2, [r3, #20]
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	3b02      	subs	r3, #2
 80071fe:	429a      	cmp	r2, r3
 8007200:	d804      	bhi.n	800720c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	e089      	b.n	8007320 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d128      	bne.n	800726a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007218:	2302      	movs	r3, #2
 800721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007226:	4618      	mov	r0, r3
 8007228:	f7fd ffaf 	bl	800518a <get_fat>
 800722c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d103      	bne.n	800723e <f_getfree+0x7c>
 8007236:	2301      	movs	r3, #1
 8007238:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800723c:	e063      	b.n	8007306 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d103      	bne.n	800724c <f_getfree+0x8a>
 8007244:	2302      	movs	r3, #2
 8007246:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800724a:	e05c      	b.n	8007306 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800724c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <f_getfree+0x96>
 8007252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007254:	3301      	adds	r3, #1
 8007256:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800725a:	3301      	adds	r3, #1
 800725c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007264:	429a      	cmp	r2, r3
 8007266:	d3db      	bcc.n	8007220 <f_getfree+0x5e>
 8007268:	e04d      	b.n	8007306 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800726a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	637b      	str	r3, [r7, #52]	@ 0x34
 800727a:	2300      	movs	r3, #0
 800727c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800727e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007280:	2b00      	cmp	r3, #0
 8007282:	d113      	bne.n	80072ac <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007284:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800728c:	4619      	mov	r1, r3
 800728e:	f7fd febf 	bl	8005010 <move_window>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007298:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800729c:	2b00      	cmp	r3, #0
 800729e:	d131      	bne.n	8007304 <f_getfree+0x142>
							p = fs->win;
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	3334      	adds	r3, #52	@ 0x34
 80072a4:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80072a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a8:	899b      	ldrh	r3, [r3, #12]
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d10f      	bne.n	80072d4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80072b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072b6:	f7fd fbfb 	bl	8004ab0 <ld_word>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <f_getfree+0x104>
 80072c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c2:	3301      	adds	r3, #1
 80072c4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	3302      	adds	r3, #2
 80072ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80072cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ce:	3b02      	subs	r3, #2
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d2:	e010      	b.n	80072f6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80072d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072d6:	f7fd fc03 	bl	8004ae0 <ld_dword>
 80072da:	4603      	mov	r3, r0
 80072dc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d102      	bne.n	80072ea <f_getfree+0x128>
 80072e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e6:	3301      	adds	r3, #1
 80072e8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	3304      	adds	r3, #4
 80072ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80072f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f2:	3b04      	subs	r3, #4
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80072f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f8:	3b01      	subs	r3, #1
 80072fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1bd      	bne.n	800727e <f_getfree+0xbc>
 8007302:	e000      	b.n	8007306 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007304:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800730a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007310:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007314:	791a      	ldrb	r2, [r3, #4]
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007320:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007324:	4618      	mov	r0, r3
 8007326:	3748      	adds	r7, #72	@ 0x48
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b09e      	sub	sp, #120	@ 0x78
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007338:	f107 010c 	add.w	r1, r7, #12
 800733c:	1d3b      	adds	r3, r7, #4
 800733e:	2202      	movs	r2, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe ff2f 	bl	80061a4 <find_volume>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8007350:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 808e 	bne.w	8007476 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007360:	4611      	mov	r1, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fe0e 	bl	8005f84 <follow_path>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800736e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007372:	2b00      	cmp	r3, #0
 8007374:	d108      	bne.n	8007388 <f_unlink+0x5c>
 8007376:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800737a:	2102      	movs	r1, #2
 800737c:	4618      	mov	r0, r3
 800737e:	f7fd fc97 	bl	8004cb0 <chk_lock>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8007388:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800738c:	2b00      	cmp	r3, #0
 800738e:	d172      	bne.n	8007476 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007390:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007394:	b25b      	sxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	da03      	bge.n	80073a2 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800739a:	2306      	movs	r3, #6
 800739c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80073a0:	e008      	b.n	80073b4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80073a2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80073ae:	2307      	movs	r3, #7
 80073b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 80073b4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d134      	bne.n	8007426 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fba9 	bl	8005b1a <ld_clust>
 80073c8:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80073ca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d027      	beq.n	8007426 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80073da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073dc:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80073de:	f107 0310 	add.w	r3, r7, #16
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe f9f2 	bl	80057ce <dir_sdi>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 80073f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d116      	bne.n	8007426 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80073f8:	f107 0310 	add.w	r3, r7, #16
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fbca 	bl	8005b98 <dir_read>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800740a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <f_unlink+0xec>
 8007412:	2307      	movs	r3, #7
 8007414:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007418:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800741c:	2b04      	cmp	r3, #4
 800741e:	d102      	bne.n	8007426 <f_unlink+0xfa>
 8007420:	2300      	movs	r3, #0
 8007422:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8007426:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800742a:	2b00      	cmp	r3, #0
 800742c:	d123      	bne.n	8007476 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800742e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fc94 	bl	8005d60 <dir_remove>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800743e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10c      	bne.n	8007460 <f_unlink+0x134>
 8007446:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007448:	2b00      	cmp	r3, #0
 800744a:	d009      	beq.n	8007460 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800744c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007450:	2200      	movs	r2, #0
 8007452:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe f885 	bl	8005564 <remove_chain>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8007460:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <f_unlink+0x14a>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4618      	mov	r0, r3
 800746c:	f7fd fdfe 	bl	800506c <sync_fs>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007476:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800747a:	4618      	mov	r0, r3
 800747c:	3778      	adds	r7, #120	@ 0x78
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007492:	2301      	movs	r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800749a:	4b1f      	ldr	r3, [pc, #124]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 800749c:	7a5b      	ldrb	r3, [r3, #9]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d131      	bne.n	8007508 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80074a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 80074a6:	7a5b      	ldrb	r3, [r3, #9]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 80074ae:	2100      	movs	r1, #0
 80074b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80074b2:	4b19      	ldr	r3, [pc, #100]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 80074b4:	7a5b      	ldrb	r3, [r3, #9]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	4a17      	ldr	r2, [pc, #92]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80074c2:	4b15      	ldr	r3, [pc, #84]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 80074c4:	7a5b      	ldrb	r3, [r3, #9]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	4b13      	ldr	r3, [pc, #76]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 80074cc:	4413      	add	r3, r2
 80074ce:	79fa      	ldrb	r2, [r7, #7]
 80074d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80074d2:	4b11      	ldr	r3, [pc, #68]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 80074d4:	7a5b      	ldrb	r3, [r3, #9]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	b2d1      	uxtb	r1, r2
 80074dc:	4a0e      	ldr	r2, [pc, #56]	@ (8007518 <FATFS_LinkDriverEx+0x94>)
 80074de:	7251      	strb	r1, [r2, #9]
 80074e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80074e2:	7dbb      	ldrb	r3, [r7, #22]
 80074e4:	3330      	adds	r3, #48	@ 0x30
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3301      	adds	r3, #1
 80074f0:	223a      	movs	r2, #58	@ 0x3a
 80074f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	3302      	adds	r3, #2
 80074f8:	222f      	movs	r2, #47	@ 0x2f
 80074fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3303      	adds	r3, #3
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
}
 800750a:	4618      	mov	r0, r3
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20002230 	.word	0x20002230

0800751c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007526:	2200      	movs	r2, #0
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff ffaa 	bl	8007484 <FATFS_LinkDriverEx>
 8007530:	4603      	mov	r3, r0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <malloc>:
 800753c:	4b02      	ldr	r3, [pc, #8]	@ (8007548 <malloc+0xc>)
 800753e:	4601      	mov	r1, r0
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	f000 b82d 	b.w	80075a0 <_malloc_r>
 8007546:	bf00      	nop
 8007548:	20000018 	.word	0x20000018

0800754c <free>:
 800754c:	4b02      	ldr	r3, [pc, #8]	@ (8007558 <free+0xc>)
 800754e:	4601      	mov	r1, r0
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f000 bb67 	b.w	8007c24 <_free_r>
 8007556:	bf00      	nop
 8007558:	20000018 	.word	0x20000018

0800755c <sbrk_aligned>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	4e0f      	ldr	r6, [pc, #60]	@ (800759c <sbrk_aligned+0x40>)
 8007560:	460c      	mov	r4, r1
 8007562:	6831      	ldr	r1, [r6, #0]
 8007564:	4605      	mov	r5, r0
 8007566:	b911      	cbnz	r1, 800756e <sbrk_aligned+0x12>
 8007568:	f000 fb0c 	bl	8007b84 <_sbrk_r>
 800756c:	6030      	str	r0, [r6, #0]
 800756e:	4621      	mov	r1, r4
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fb07 	bl	8007b84 <_sbrk_r>
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	d103      	bne.n	8007582 <sbrk_aligned+0x26>
 800757a:	f04f 34ff 	mov.w	r4, #4294967295
 800757e:	4620      	mov	r0, r4
 8007580:	bd70      	pop	{r4, r5, r6, pc}
 8007582:	1cc4      	adds	r4, r0, #3
 8007584:	f024 0403 	bic.w	r4, r4, #3
 8007588:	42a0      	cmp	r0, r4
 800758a:	d0f8      	beq.n	800757e <sbrk_aligned+0x22>
 800758c:	1a21      	subs	r1, r4, r0
 800758e:	4628      	mov	r0, r5
 8007590:	f000 faf8 	bl	8007b84 <_sbrk_r>
 8007594:	3001      	adds	r0, #1
 8007596:	d1f2      	bne.n	800757e <sbrk_aligned+0x22>
 8007598:	e7ef      	b.n	800757a <sbrk_aligned+0x1e>
 800759a:	bf00      	nop
 800759c:	2000223c 	.word	0x2000223c

080075a0 <_malloc_r>:
 80075a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a4:	1ccd      	adds	r5, r1, #3
 80075a6:	f025 0503 	bic.w	r5, r5, #3
 80075aa:	3508      	adds	r5, #8
 80075ac:	2d0c      	cmp	r5, #12
 80075ae:	bf38      	it	cc
 80075b0:	250c      	movcc	r5, #12
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	4606      	mov	r6, r0
 80075b6:	db01      	blt.n	80075bc <_malloc_r+0x1c>
 80075b8:	42a9      	cmp	r1, r5
 80075ba:	d904      	bls.n	80075c6 <_malloc_r+0x26>
 80075bc:	230c      	movs	r3, #12
 80075be:	6033      	str	r3, [r6, #0]
 80075c0:	2000      	movs	r0, #0
 80075c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800769c <_malloc_r+0xfc>
 80075ca:	f000 f869 	bl	80076a0 <__malloc_lock>
 80075ce:	f8d8 3000 	ldr.w	r3, [r8]
 80075d2:	461c      	mov	r4, r3
 80075d4:	bb44      	cbnz	r4, 8007628 <_malloc_r+0x88>
 80075d6:	4629      	mov	r1, r5
 80075d8:	4630      	mov	r0, r6
 80075da:	f7ff ffbf 	bl	800755c <sbrk_aligned>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	4604      	mov	r4, r0
 80075e2:	d158      	bne.n	8007696 <_malloc_r+0xf6>
 80075e4:	f8d8 4000 	ldr.w	r4, [r8]
 80075e8:	4627      	mov	r7, r4
 80075ea:	2f00      	cmp	r7, #0
 80075ec:	d143      	bne.n	8007676 <_malloc_r+0xd6>
 80075ee:	2c00      	cmp	r4, #0
 80075f0:	d04b      	beq.n	800768a <_malloc_r+0xea>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	4639      	mov	r1, r7
 80075f6:	4630      	mov	r0, r6
 80075f8:	eb04 0903 	add.w	r9, r4, r3
 80075fc:	f000 fac2 	bl	8007b84 <_sbrk_r>
 8007600:	4581      	cmp	r9, r0
 8007602:	d142      	bne.n	800768a <_malloc_r+0xea>
 8007604:	6821      	ldr	r1, [r4, #0]
 8007606:	1a6d      	subs	r5, r5, r1
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f7ff ffa6 	bl	800755c <sbrk_aligned>
 8007610:	3001      	adds	r0, #1
 8007612:	d03a      	beq.n	800768a <_malloc_r+0xea>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	442b      	add	r3, r5
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	f8d8 3000 	ldr.w	r3, [r8]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	bb62      	cbnz	r2, 800767c <_malloc_r+0xdc>
 8007622:	f8c8 7000 	str.w	r7, [r8]
 8007626:	e00f      	b.n	8007648 <_malloc_r+0xa8>
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	1b52      	subs	r2, r2, r5
 800762c:	d420      	bmi.n	8007670 <_malloc_r+0xd0>
 800762e:	2a0b      	cmp	r2, #11
 8007630:	d917      	bls.n	8007662 <_malloc_r+0xc2>
 8007632:	1961      	adds	r1, r4, r5
 8007634:	42a3      	cmp	r3, r4
 8007636:	6025      	str	r5, [r4, #0]
 8007638:	bf18      	it	ne
 800763a:	6059      	strne	r1, [r3, #4]
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	bf08      	it	eq
 8007640:	f8c8 1000 	streq.w	r1, [r8]
 8007644:	5162      	str	r2, [r4, r5]
 8007646:	604b      	str	r3, [r1, #4]
 8007648:	4630      	mov	r0, r6
 800764a:	f000 f82f 	bl	80076ac <__malloc_unlock>
 800764e:	f104 000b 	add.w	r0, r4, #11
 8007652:	1d23      	adds	r3, r4, #4
 8007654:	f020 0007 	bic.w	r0, r0, #7
 8007658:	1ac2      	subs	r2, r0, r3
 800765a:	bf1c      	itt	ne
 800765c:	1a1b      	subne	r3, r3, r0
 800765e:	50a3      	strne	r3, [r4, r2]
 8007660:	e7af      	b.n	80075c2 <_malloc_r+0x22>
 8007662:	6862      	ldr	r2, [r4, #4]
 8007664:	42a3      	cmp	r3, r4
 8007666:	bf0c      	ite	eq
 8007668:	f8c8 2000 	streq.w	r2, [r8]
 800766c:	605a      	strne	r2, [r3, #4]
 800766e:	e7eb      	b.n	8007648 <_malloc_r+0xa8>
 8007670:	4623      	mov	r3, r4
 8007672:	6864      	ldr	r4, [r4, #4]
 8007674:	e7ae      	b.n	80075d4 <_malloc_r+0x34>
 8007676:	463c      	mov	r4, r7
 8007678:	687f      	ldr	r7, [r7, #4]
 800767a:	e7b6      	b.n	80075ea <_malloc_r+0x4a>
 800767c:	461a      	mov	r2, r3
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	42a3      	cmp	r3, r4
 8007682:	d1fb      	bne.n	800767c <_malloc_r+0xdc>
 8007684:	2300      	movs	r3, #0
 8007686:	6053      	str	r3, [r2, #4]
 8007688:	e7de      	b.n	8007648 <_malloc_r+0xa8>
 800768a:	230c      	movs	r3, #12
 800768c:	6033      	str	r3, [r6, #0]
 800768e:	4630      	mov	r0, r6
 8007690:	f000 f80c 	bl	80076ac <__malloc_unlock>
 8007694:	e794      	b.n	80075c0 <_malloc_r+0x20>
 8007696:	6005      	str	r5, [r0, #0]
 8007698:	e7d6      	b.n	8007648 <_malloc_r+0xa8>
 800769a:	bf00      	nop
 800769c:	20002240 	.word	0x20002240

080076a0 <__malloc_lock>:
 80076a0:	4801      	ldr	r0, [pc, #4]	@ (80076a8 <__malloc_lock+0x8>)
 80076a2:	f000 babc 	b.w	8007c1e <__retarget_lock_acquire_recursive>
 80076a6:	bf00      	nop
 80076a8:	20002384 	.word	0x20002384

080076ac <__malloc_unlock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	@ (80076b4 <__malloc_unlock+0x8>)
 80076ae:	f000 bab7 	b.w	8007c20 <__retarget_lock_release_recursive>
 80076b2:	bf00      	nop
 80076b4:	20002384 	.word	0x20002384

080076b8 <std>:
 80076b8:	2300      	movs	r3, #0
 80076ba:	b510      	push	{r4, lr}
 80076bc:	4604      	mov	r4, r0
 80076be:	e9c0 3300 	strd	r3, r3, [r0]
 80076c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076c6:	6083      	str	r3, [r0, #8]
 80076c8:	8181      	strh	r1, [r0, #12]
 80076ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80076cc:	81c2      	strh	r2, [r0, #14]
 80076ce:	6183      	str	r3, [r0, #24]
 80076d0:	4619      	mov	r1, r3
 80076d2:	2208      	movs	r2, #8
 80076d4:	305c      	adds	r0, #92	@ 0x5c
 80076d6:	f000 fa19 	bl	8007b0c <memset>
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <std+0x58>)
 80076dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80076de:	4b0d      	ldr	r3, [pc, #52]	@ (8007714 <std+0x5c>)
 80076e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007718 <std+0x60>)
 80076e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076e6:	4b0d      	ldr	r3, [pc, #52]	@ (800771c <std+0x64>)
 80076e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80076ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <std+0x68>)
 80076ec:	6224      	str	r4, [r4, #32]
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d006      	beq.n	8007700 <std+0x48>
 80076f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076f6:	4294      	cmp	r4, r2
 80076f8:	d002      	beq.n	8007700 <std+0x48>
 80076fa:	33d0      	adds	r3, #208	@ 0xd0
 80076fc:	429c      	cmp	r4, r3
 80076fe:	d105      	bne.n	800770c <std+0x54>
 8007700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007708:	f000 ba88 	b.w	8007c1c <__retarget_lock_init_recursive>
 800770c:	bd10      	pop	{r4, pc}
 800770e:	bf00      	nop
 8007710:	0800795d 	.word	0x0800795d
 8007714:	0800797f 	.word	0x0800797f
 8007718:	080079b7 	.word	0x080079b7
 800771c:	080079db 	.word	0x080079db
 8007720:	20002244 	.word	0x20002244

08007724 <stdio_exit_handler>:
 8007724:	4a02      	ldr	r2, [pc, #8]	@ (8007730 <stdio_exit_handler+0xc>)
 8007726:	4903      	ldr	r1, [pc, #12]	@ (8007734 <stdio_exit_handler+0x10>)
 8007728:	4803      	ldr	r0, [pc, #12]	@ (8007738 <stdio_exit_handler+0x14>)
 800772a:	f000 b869 	b.w	8007800 <_fwalk_sglue>
 800772e:	bf00      	nop
 8007730:	2000000c 	.word	0x2000000c
 8007734:	08008611 	.word	0x08008611
 8007738:	2000001c 	.word	0x2000001c

0800773c <cleanup_stdio>:
 800773c:	6841      	ldr	r1, [r0, #4]
 800773e:	4b0c      	ldr	r3, [pc, #48]	@ (8007770 <cleanup_stdio+0x34>)
 8007740:	4299      	cmp	r1, r3
 8007742:	b510      	push	{r4, lr}
 8007744:	4604      	mov	r4, r0
 8007746:	d001      	beq.n	800774c <cleanup_stdio+0x10>
 8007748:	f000 ff62 	bl	8008610 <_fflush_r>
 800774c:	68a1      	ldr	r1, [r4, #8]
 800774e:	4b09      	ldr	r3, [pc, #36]	@ (8007774 <cleanup_stdio+0x38>)
 8007750:	4299      	cmp	r1, r3
 8007752:	d002      	beq.n	800775a <cleanup_stdio+0x1e>
 8007754:	4620      	mov	r0, r4
 8007756:	f000 ff5b 	bl	8008610 <_fflush_r>
 800775a:	68e1      	ldr	r1, [r4, #12]
 800775c:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <cleanup_stdio+0x3c>)
 800775e:	4299      	cmp	r1, r3
 8007760:	d004      	beq.n	800776c <cleanup_stdio+0x30>
 8007762:	4620      	mov	r0, r4
 8007764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007768:	f000 bf52 	b.w	8008610 <_fflush_r>
 800776c:	bd10      	pop	{r4, pc}
 800776e:	bf00      	nop
 8007770:	20002244 	.word	0x20002244
 8007774:	200022ac 	.word	0x200022ac
 8007778:	20002314 	.word	0x20002314

0800777c <global_stdio_init.part.0>:
 800777c:	b510      	push	{r4, lr}
 800777e:	4b0b      	ldr	r3, [pc, #44]	@ (80077ac <global_stdio_init.part.0+0x30>)
 8007780:	4c0b      	ldr	r4, [pc, #44]	@ (80077b0 <global_stdio_init.part.0+0x34>)
 8007782:	4a0c      	ldr	r2, [pc, #48]	@ (80077b4 <global_stdio_init.part.0+0x38>)
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	4620      	mov	r0, r4
 8007788:	2200      	movs	r2, #0
 800778a:	2104      	movs	r1, #4
 800778c:	f7ff ff94 	bl	80076b8 <std>
 8007790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007794:	2201      	movs	r2, #1
 8007796:	2109      	movs	r1, #9
 8007798:	f7ff ff8e 	bl	80076b8 <std>
 800779c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077a0:	2202      	movs	r2, #2
 80077a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a6:	2112      	movs	r1, #18
 80077a8:	f7ff bf86 	b.w	80076b8 <std>
 80077ac:	2000237c 	.word	0x2000237c
 80077b0:	20002244 	.word	0x20002244
 80077b4:	08007725 	.word	0x08007725

080077b8 <__sfp_lock_acquire>:
 80077b8:	4801      	ldr	r0, [pc, #4]	@ (80077c0 <__sfp_lock_acquire+0x8>)
 80077ba:	f000 ba30 	b.w	8007c1e <__retarget_lock_acquire_recursive>
 80077be:	bf00      	nop
 80077c0:	20002385 	.word	0x20002385

080077c4 <__sfp_lock_release>:
 80077c4:	4801      	ldr	r0, [pc, #4]	@ (80077cc <__sfp_lock_release+0x8>)
 80077c6:	f000 ba2b 	b.w	8007c20 <__retarget_lock_release_recursive>
 80077ca:	bf00      	nop
 80077cc:	20002385 	.word	0x20002385

080077d0 <__sinit>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4604      	mov	r4, r0
 80077d4:	f7ff fff0 	bl	80077b8 <__sfp_lock_acquire>
 80077d8:	6a23      	ldr	r3, [r4, #32]
 80077da:	b11b      	cbz	r3, 80077e4 <__sinit+0x14>
 80077dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e0:	f7ff bff0 	b.w	80077c4 <__sfp_lock_release>
 80077e4:	4b04      	ldr	r3, [pc, #16]	@ (80077f8 <__sinit+0x28>)
 80077e6:	6223      	str	r3, [r4, #32]
 80077e8:	4b04      	ldr	r3, [pc, #16]	@ (80077fc <__sinit+0x2c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f5      	bne.n	80077dc <__sinit+0xc>
 80077f0:	f7ff ffc4 	bl	800777c <global_stdio_init.part.0>
 80077f4:	e7f2      	b.n	80077dc <__sinit+0xc>
 80077f6:	bf00      	nop
 80077f8:	0800773d 	.word	0x0800773d
 80077fc:	2000237c 	.word	0x2000237c

08007800 <_fwalk_sglue>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	4607      	mov	r7, r0
 8007806:	4688      	mov	r8, r1
 8007808:	4614      	mov	r4, r2
 800780a:	2600      	movs	r6, #0
 800780c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007810:	f1b9 0901 	subs.w	r9, r9, #1
 8007814:	d505      	bpl.n	8007822 <_fwalk_sglue+0x22>
 8007816:	6824      	ldr	r4, [r4, #0]
 8007818:	2c00      	cmp	r4, #0
 800781a:	d1f7      	bne.n	800780c <_fwalk_sglue+0xc>
 800781c:	4630      	mov	r0, r6
 800781e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d907      	bls.n	8007838 <_fwalk_sglue+0x38>
 8007828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800782c:	3301      	adds	r3, #1
 800782e:	d003      	beq.n	8007838 <_fwalk_sglue+0x38>
 8007830:	4629      	mov	r1, r5
 8007832:	4638      	mov	r0, r7
 8007834:	47c0      	blx	r8
 8007836:	4306      	orrs	r6, r0
 8007838:	3568      	adds	r5, #104	@ 0x68
 800783a:	e7e9      	b.n	8007810 <_fwalk_sglue+0x10>

0800783c <iprintf>:
 800783c:	b40f      	push	{r0, r1, r2, r3}
 800783e:	b507      	push	{r0, r1, r2, lr}
 8007840:	4906      	ldr	r1, [pc, #24]	@ (800785c <iprintf+0x20>)
 8007842:	ab04      	add	r3, sp, #16
 8007844:	6808      	ldr	r0, [r1, #0]
 8007846:	f853 2b04 	ldr.w	r2, [r3], #4
 800784a:	6881      	ldr	r1, [r0, #8]
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	f000 fbb5 	bl	8007fbc <_vfiprintf_r>
 8007852:	b003      	add	sp, #12
 8007854:	f85d eb04 	ldr.w	lr, [sp], #4
 8007858:	b004      	add	sp, #16
 800785a:	4770      	bx	lr
 800785c:	20000018 	.word	0x20000018

08007860 <_puts_r>:
 8007860:	6a03      	ldr	r3, [r0, #32]
 8007862:	b570      	push	{r4, r5, r6, lr}
 8007864:	6884      	ldr	r4, [r0, #8]
 8007866:	4605      	mov	r5, r0
 8007868:	460e      	mov	r6, r1
 800786a:	b90b      	cbnz	r3, 8007870 <_puts_r+0x10>
 800786c:	f7ff ffb0 	bl	80077d0 <__sinit>
 8007870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007872:	07db      	lsls	r3, r3, #31
 8007874:	d405      	bmi.n	8007882 <_puts_r+0x22>
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	0598      	lsls	r0, r3, #22
 800787a:	d402      	bmi.n	8007882 <_puts_r+0x22>
 800787c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800787e:	f000 f9ce 	bl	8007c1e <__retarget_lock_acquire_recursive>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	0719      	lsls	r1, r3, #28
 8007886:	d502      	bpl.n	800788e <_puts_r+0x2e>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d135      	bne.n	80078fa <_puts_r+0x9a>
 800788e:	4621      	mov	r1, r4
 8007890:	4628      	mov	r0, r5
 8007892:	f000 f8e5 	bl	8007a60 <__swsetup_r>
 8007896:	b380      	cbz	r0, 80078fa <_puts_r+0x9a>
 8007898:	f04f 35ff 	mov.w	r5, #4294967295
 800789c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800789e:	07da      	lsls	r2, r3, #31
 80078a0:	d405      	bmi.n	80078ae <_puts_r+0x4e>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	059b      	lsls	r3, r3, #22
 80078a6:	d402      	bmi.n	80078ae <_puts_r+0x4e>
 80078a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078aa:	f000 f9b9 	bl	8007c20 <__retarget_lock_release_recursive>
 80078ae:	4628      	mov	r0, r5
 80078b0:	bd70      	pop	{r4, r5, r6, pc}
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	da04      	bge.n	80078c0 <_puts_r+0x60>
 80078b6:	69a2      	ldr	r2, [r4, #24]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	dc17      	bgt.n	80078ec <_puts_r+0x8c>
 80078bc:	290a      	cmp	r1, #10
 80078be:	d015      	beq.n	80078ec <_puts_r+0x8c>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	6022      	str	r2, [r4, #0]
 80078c6:	7019      	strb	r1, [r3, #0]
 80078c8:	68a3      	ldr	r3, [r4, #8]
 80078ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078ce:	3b01      	subs	r3, #1
 80078d0:	60a3      	str	r3, [r4, #8]
 80078d2:	2900      	cmp	r1, #0
 80078d4:	d1ed      	bne.n	80078b2 <_puts_r+0x52>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	da11      	bge.n	80078fe <_puts_r+0x9e>
 80078da:	4622      	mov	r2, r4
 80078dc:	210a      	movs	r1, #10
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 f87f 	bl	80079e2 <__swbuf_r>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d0d7      	beq.n	8007898 <_puts_r+0x38>
 80078e8:	250a      	movs	r5, #10
 80078ea:	e7d7      	b.n	800789c <_puts_r+0x3c>
 80078ec:	4622      	mov	r2, r4
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 f877 	bl	80079e2 <__swbuf_r>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1e7      	bne.n	80078c8 <_puts_r+0x68>
 80078f8:	e7ce      	b.n	8007898 <_puts_r+0x38>
 80078fa:	3e01      	subs	r6, #1
 80078fc:	e7e4      	b.n	80078c8 <_puts_r+0x68>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	6022      	str	r2, [r4, #0]
 8007904:	220a      	movs	r2, #10
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	e7ee      	b.n	80078e8 <_puts_r+0x88>
	...

0800790c <puts>:
 800790c:	4b02      	ldr	r3, [pc, #8]	@ (8007918 <puts+0xc>)
 800790e:	4601      	mov	r1, r0
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	f7ff bfa5 	b.w	8007860 <_puts_r>
 8007916:	bf00      	nop
 8007918:	20000018 	.word	0x20000018

0800791c <siprintf>:
 800791c:	b40e      	push	{r1, r2, r3}
 800791e:	b500      	push	{lr}
 8007920:	b09c      	sub	sp, #112	@ 0x70
 8007922:	ab1d      	add	r3, sp, #116	@ 0x74
 8007924:	9002      	str	r0, [sp, #8]
 8007926:	9006      	str	r0, [sp, #24]
 8007928:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800792c:	4809      	ldr	r0, [pc, #36]	@ (8007954 <siprintf+0x38>)
 800792e:	9107      	str	r1, [sp, #28]
 8007930:	9104      	str	r1, [sp, #16]
 8007932:	4909      	ldr	r1, [pc, #36]	@ (8007958 <siprintf+0x3c>)
 8007934:	f853 2b04 	ldr.w	r2, [r3], #4
 8007938:	9105      	str	r1, [sp, #20]
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	a902      	add	r1, sp, #8
 8007940:	f000 fa16 	bl	8007d70 <_svfiprintf_r>
 8007944:	9b02      	ldr	r3, [sp, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	b01c      	add	sp, #112	@ 0x70
 800794c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007950:	b003      	add	sp, #12
 8007952:	4770      	bx	lr
 8007954:	20000018 	.word	0x20000018
 8007958:	ffff0208 	.word	0xffff0208

0800795c <__sread>:
 800795c:	b510      	push	{r4, lr}
 800795e:	460c      	mov	r4, r1
 8007960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007964:	f000 f8fc 	bl	8007b60 <_read_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	bfab      	itete	ge
 800796c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800796e:	89a3      	ldrhlt	r3, [r4, #12]
 8007970:	181b      	addge	r3, r3, r0
 8007972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007976:	bfac      	ite	ge
 8007978:	6563      	strge	r3, [r4, #84]	@ 0x54
 800797a:	81a3      	strhlt	r3, [r4, #12]
 800797c:	bd10      	pop	{r4, pc}

0800797e <__swrite>:
 800797e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	461f      	mov	r7, r3
 8007984:	898b      	ldrh	r3, [r1, #12]
 8007986:	05db      	lsls	r3, r3, #23
 8007988:	4605      	mov	r5, r0
 800798a:	460c      	mov	r4, r1
 800798c:	4616      	mov	r6, r2
 800798e:	d505      	bpl.n	800799c <__swrite+0x1e>
 8007990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007994:	2302      	movs	r3, #2
 8007996:	2200      	movs	r2, #0
 8007998:	f000 f8d0 	bl	8007b3c <_lseek_r>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079a6:	81a3      	strh	r3, [r4, #12]
 80079a8:	4632      	mov	r2, r6
 80079aa:	463b      	mov	r3, r7
 80079ac:	4628      	mov	r0, r5
 80079ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b2:	f000 b8f7 	b.w	8007ba4 <_write_r>

080079b6 <__sseek>:
 80079b6:	b510      	push	{r4, lr}
 80079b8:	460c      	mov	r4, r1
 80079ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079be:	f000 f8bd 	bl	8007b3c <_lseek_r>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	bf15      	itete	ne
 80079c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079d2:	81a3      	strheq	r3, [r4, #12]
 80079d4:	bf18      	it	ne
 80079d6:	81a3      	strhne	r3, [r4, #12]
 80079d8:	bd10      	pop	{r4, pc}

080079da <__sclose>:
 80079da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079de:	f000 b89d 	b.w	8007b1c <_close_r>

080079e2 <__swbuf_r>:
 80079e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e4:	460e      	mov	r6, r1
 80079e6:	4614      	mov	r4, r2
 80079e8:	4605      	mov	r5, r0
 80079ea:	b118      	cbz	r0, 80079f4 <__swbuf_r+0x12>
 80079ec:	6a03      	ldr	r3, [r0, #32]
 80079ee:	b90b      	cbnz	r3, 80079f4 <__swbuf_r+0x12>
 80079f0:	f7ff feee 	bl	80077d0 <__sinit>
 80079f4:	69a3      	ldr	r3, [r4, #24]
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	071a      	lsls	r2, r3, #28
 80079fc:	d501      	bpl.n	8007a02 <__swbuf_r+0x20>
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	b943      	cbnz	r3, 8007a14 <__swbuf_r+0x32>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f82b 	bl	8007a60 <__swsetup_r>
 8007a0a:	b118      	cbz	r0, 8007a14 <__swbuf_r+0x32>
 8007a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a10:	4638      	mov	r0, r7
 8007a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	6922      	ldr	r2, [r4, #16]
 8007a18:	1a98      	subs	r0, r3, r2
 8007a1a:	6963      	ldr	r3, [r4, #20]
 8007a1c:	b2f6      	uxtb	r6, r6
 8007a1e:	4283      	cmp	r3, r0
 8007a20:	4637      	mov	r7, r6
 8007a22:	dc05      	bgt.n	8007a30 <__swbuf_r+0x4e>
 8007a24:	4621      	mov	r1, r4
 8007a26:	4628      	mov	r0, r5
 8007a28:	f000 fdf2 	bl	8008610 <_fflush_r>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d1ed      	bne.n	8007a0c <__swbuf_r+0x2a>
 8007a30:	68a3      	ldr	r3, [r4, #8]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	60a3      	str	r3, [r4, #8]
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	701e      	strb	r6, [r3, #0]
 8007a3e:	6962      	ldr	r2, [r4, #20]
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d004      	beq.n	8007a50 <__swbuf_r+0x6e>
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	07db      	lsls	r3, r3, #31
 8007a4a:	d5e1      	bpl.n	8007a10 <__swbuf_r+0x2e>
 8007a4c:	2e0a      	cmp	r6, #10
 8007a4e:	d1df      	bne.n	8007a10 <__swbuf_r+0x2e>
 8007a50:	4621      	mov	r1, r4
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 fddc 	bl	8008610 <_fflush_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d0d9      	beq.n	8007a10 <__swbuf_r+0x2e>
 8007a5c:	e7d6      	b.n	8007a0c <__swbuf_r+0x2a>
	...

08007a60 <__swsetup_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4b29      	ldr	r3, [pc, #164]	@ (8007b08 <__swsetup_r+0xa8>)
 8007a64:	4605      	mov	r5, r0
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	460c      	mov	r4, r1
 8007a6a:	b118      	cbz	r0, 8007a74 <__swsetup_r+0x14>
 8007a6c:	6a03      	ldr	r3, [r0, #32]
 8007a6e:	b90b      	cbnz	r3, 8007a74 <__swsetup_r+0x14>
 8007a70:	f7ff feae 	bl	80077d0 <__sinit>
 8007a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a78:	0719      	lsls	r1, r3, #28
 8007a7a:	d422      	bmi.n	8007ac2 <__swsetup_r+0x62>
 8007a7c:	06da      	lsls	r2, r3, #27
 8007a7e:	d407      	bmi.n	8007a90 <__swsetup_r+0x30>
 8007a80:	2209      	movs	r2, #9
 8007a82:	602a      	str	r2, [r5, #0]
 8007a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8e:	e033      	b.n	8007af8 <__swsetup_r+0x98>
 8007a90:	0758      	lsls	r0, r3, #29
 8007a92:	d512      	bpl.n	8007aba <__swsetup_r+0x5a>
 8007a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a96:	b141      	cbz	r1, 8007aaa <__swsetup_r+0x4a>
 8007a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	d002      	beq.n	8007aa6 <__swsetup_r+0x46>
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f8bf 	bl	8007c24 <_free_r>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f043 0308 	orr.w	r3, r3, #8
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	b94b      	cbnz	r3, 8007ada <__swsetup_r+0x7a>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad0:	d003      	beq.n	8007ada <__swsetup_r+0x7a>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 fde9 	bl	80086ac <__smakebuf_r>
 8007ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ade:	f013 0201 	ands.w	r2, r3, #1
 8007ae2:	d00a      	beq.n	8007afa <__swsetup_r+0x9a>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	60a2      	str	r2, [r4, #8]
 8007ae8:	6962      	ldr	r2, [r4, #20]
 8007aea:	4252      	negs	r2, r2
 8007aec:	61a2      	str	r2, [r4, #24]
 8007aee:	6922      	ldr	r2, [r4, #16]
 8007af0:	b942      	cbnz	r2, 8007b04 <__swsetup_r+0xa4>
 8007af2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007af6:	d1c5      	bne.n	8007a84 <__swsetup_r+0x24>
 8007af8:	bd38      	pop	{r3, r4, r5, pc}
 8007afa:	0799      	lsls	r1, r3, #30
 8007afc:	bf58      	it	pl
 8007afe:	6962      	ldrpl	r2, [r4, #20]
 8007b00:	60a2      	str	r2, [r4, #8]
 8007b02:	e7f4      	b.n	8007aee <__swsetup_r+0x8e>
 8007b04:	2000      	movs	r0, #0
 8007b06:	e7f7      	b.n	8007af8 <__swsetup_r+0x98>
 8007b08:	20000018 	.word	0x20000018

08007b0c <memset>:
 8007b0c:	4402      	add	r2, r0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d100      	bne.n	8007b16 <memset+0xa>
 8007b14:	4770      	bx	lr
 8007b16:	f803 1b01 	strb.w	r1, [r3], #1
 8007b1a:	e7f9      	b.n	8007b10 <memset+0x4>

08007b1c <_close_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d06      	ldr	r5, [pc, #24]	@ (8007b38 <_close_r+0x1c>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	602b      	str	r3, [r5, #0]
 8007b28:	f7f9 fcb4 	bl	8001494 <_close>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_close_r+0x1a>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_close_r+0x1a>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	20002380 	.word	0x20002380

08007b3c <_lseek_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d07      	ldr	r5, [pc, #28]	@ (8007b5c <_lseek_r+0x20>)
 8007b40:	4604      	mov	r4, r0
 8007b42:	4608      	mov	r0, r1
 8007b44:	4611      	mov	r1, r2
 8007b46:	2200      	movs	r2, #0
 8007b48:	602a      	str	r2, [r5, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f7f9 fcc9 	bl	80014e2 <_lseek>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_lseek_r+0x1e>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_lseek_r+0x1e>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	20002380 	.word	0x20002380

08007b60 <_read_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	@ (8007b80 <_read_r+0x20>)
 8007b64:	4604      	mov	r4, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	4611      	mov	r1, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	602a      	str	r2, [r5, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f7f9 fc73 	bl	800145a <_read>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_read_r+0x1e>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_read_r+0x1e>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	20002380 	.word	0x20002380

08007b84 <_sbrk_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d06      	ldr	r5, [pc, #24]	@ (8007ba0 <_sbrk_r+0x1c>)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	602b      	str	r3, [r5, #0]
 8007b90:	f7f9 fcb4 	bl	80014fc <_sbrk>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_sbrk_r+0x1a>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_sbrk_r+0x1a>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	20002380 	.word	0x20002380

08007ba4 <_write_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4d07      	ldr	r5, [pc, #28]	@ (8007bc4 <_write_r+0x20>)
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	602a      	str	r2, [r5, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f7f9 fa51 	bl	800105a <_write>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_write_r+0x1e>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_write_r+0x1e>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	20002380 	.word	0x20002380

08007bc8 <__errno>:
 8007bc8:	4b01      	ldr	r3, [pc, #4]	@ (8007bd0 <__errno+0x8>)
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	20000018 	.word	0x20000018

08007bd4 <__libc_init_array>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8007c0c <__libc_init_array+0x38>)
 8007bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8007c10 <__libc_init_array+0x3c>)
 8007bda:	1b64      	subs	r4, r4, r5
 8007bdc:	10a4      	asrs	r4, r4, #2
 8007bde:	2600      	movs	r6, #0
 8007be0:	42a6      	cmp	r6, r4
 8007be2:	d109      	bne.n	8007bf8 <__libc_init_array+0x24>
 8007be4:	4d0b      	ldr	r5, [pc, #44]	@ (8007c14 <__libc_init_array+0x40>)
 8007be6:	4c0c      	ldr	r4, [pc, #48]	@ (8007c18 <__libc_init_array+0x44>)
 8007be8:	f000 fe1c 	bl	8008824 <_init>
 8007bec:	1b64      	subs	r4, r4, r5
 8007bee:	10a4      	asrs	r4, r4, #2
 8007bf0:	2600      	movs	r6, #0
 8007bf2:	42a6      	cmp	r6, r4
 8007bf4:	d105      	bne.n	8007c02 <__libc_init_array+0x2e>
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}
 8007bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfc:	4798      	blx	r3
 8007bfe:	3601      	adds	r6, #1
 8007c00:	e7ee      	b.n	8007be0 <__libc_init_array+0xc>
 8007c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c06:	4798      	blx	r3
 8007c08:	3601      	adds	r6, #1
 8007c0a:	e7f2      	b.n	8007bf2 <__libc_init_array+0x1e>
 8007c0c:	08008ed8 	.word	0x08008ed8
 8007c10:	08008ed8 	.word	0x08008ed8
 8007c14:	08008ed8 	.word	0x08008ed8
 8007c18:	08008edc 	.word	0x08008edc

08007c1c <__retarget_lock_init_recursive>:
 8007c1c:	4770      	bx	lr

08007c1e <__retarget_lock_acquire_recursive>:
 8007c1e:	4770      	bx	lr

08007c20 <__retarget_lock_release_recursive>:
 8007c20:	4770      	bx	lr
	...

08007c24 <_free_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4605      	mov	r5, r0
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d041      	beq.n	8007cb0 <_free_r+0x8c>
 8007c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c30:	1f0c      	subs	r4, r1, #4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfb8      	it	lt
 8007c36:	18e4      	addlt	r4, r4, r3
 8007c38:	f7ff fd32 	bl	80076a0 <__malloc_lock>
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb4 <_free_r+0x90>)
 8007c3e:	6813      	ldr	r3, [r2, #0]
 8007c40:	b933      	cbnz	r3, 8007c50 <_free_r+0x2c>
 8007c42:	6063      	str	r3, [r4, #4]
 8007c44:	6014      	str	r4, [r2, #0]
 8007c46:	4628      	mov	r0, r5
 8007c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c4c:	f7ff bd2e 	b.w	80076ac <__malloc_unlock>
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d908      	bls.n	8007c66 <_free_r+0x42>
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	1821      	adds	r1, r4, r0
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	bf01      	itttt	eq
 8007c5c:	6819      	ldreq	r1, [r3, #0]
 8007c5e:	685b      	ldreq	r3, [r3, #4]
 8007c60:	1809      	addeq	r1, r1, r0
 8007c62:	6021      	streq	r1, [r4, #0]
 8007c64:	e7ed      	b.n	8007c42 <_free_r+0x1e>
 8007c66:	461a      	mov	r2, r3
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	b10b      	cbz	r3, 8007c70 <_free_r+0x4c>
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	d9fa      	bls.n	8007c66 <_free_r+0x42>
 8007c70:	6811      	ldr	r1, [r2, #0]
 8007c72:	1850      	adds	r0, r2, r1
 8007c74:	42a0      	cmp	r0, r4
 8007c76:	d10b      	bne.n	8007c90 <_free_r+0x6c>
 8007c78:	6820      	ldr	r0, [r4, #0]
 8007c7a:	4401      	add	r1, r0
 8007c7c:	1850      	adds	r0, r2, r1
 8007c7e:	4283      	cmp	r3, r0
 8007c80:	6011      	str	r1, [r2, #0]
 8007c82:	d1e0      	bne.n	8007c46 <_free_r+0x22>
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	6053      	str	r3, [r2, #4]
 8007c8a:	4408      	add	r0, r1
 8007c8c:	6010      	str	r0, [r2, #0]
 8007c8e:	e7da      	b.n	8007c46 <_free_r+0x22>
 8007c90:	d902      	bls.n	8007c98 <_free_r+0x74>
 8007c92:	230c      	movs	r3, #12
 8007c94:	602b      	str	r3, [r5, #0]
 8007c96:	e7d6      	b.n	8007c46 <_free_r+0x22>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	1821      	adds	r1, r4, r0
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	bf04      	itt	eq
 8007ca0:	6819      	ldreq	r1, [r3, #0]
 8007ca2:	685b      	ldreq	r3, [r3, #4]
 8007ca4:	6063      	str	r3, [r4, #4]
 8007ca6:	bf04      	itt	eq
 8007ca8:	1809      	addeq	r1, r1, r0
 8007caa:	6021      	streq	r1, [r4, #0]
 8007cac:	6054      	str	r4, [r2, #4]
 8007cae:	e7ca      	b.n	8007c46 <_free_r+0x22>
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20002240 	.word	0x20002240

08007cb8 <__ssputs_r>:
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	688e      	ldr	r6, [r1, #8]
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	42be      	cmp	r6, r7
 8007cc2:	680b      	ldr	r3, [r1, #0]
 8007cc4:	4682      	mov	sl, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	4690      	mov	r8, r2
 8007cca:	d82d      	bhi.n	8007d28 <__ssputs_r+0x70>
 8007ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cd4:	d026      	beq.n	8007d24 <__ssputs_r+0x6c>
 8007cd6:	6965      	ldr	r5, [r4, #20]
 8007cd8:	6909      	ldr	r1, [r1, #16]
 8007cda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cde:	eba3 0901 	sub.w	r9, r3, r1
 8007ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ce6:	1c7b      	adds	r3, r7, #1
 8007ce8:	444b      	add	r3, r9
 8007cea:	106d      	asrs	r5, r5, #1
 8007cec:	429d      	cmp	r5, r3
 8007cee:	bf38      	it	cc
 8007cf0:	461d      	movcc	r5, r3
 8007cf2:	0553      	lsls	r3, r2, #21
 8007cf4:	d527      	bpl.n	8007d46 <__ssputs_r+0x8e>
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	f7ff fc52 	bl	80075a0 <_malloc_r>
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	b360      	cbz	r0, 8007d5a <__ssputs_r+0xa2>
 8007d00:	6921      	ldr	r1, [r4, #16]
 8007d02:	464a      	mov	r2, r9
 8007d04:	f000 fd4a 	bl	800879c <memcpy>
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d12:	81a3      	strh	r3, [r4, #12]
 8007d14:	6126      	str	r6, [r4, #16]
 8007d16:	6165      	str	r5, [r4, #20]
 8007d18:	444e      	add	r6, r9
 8007d1a:	eba5 0509 	sub.w	r5, r5, r9
 8007d1e:	6026      	str	r6, [r4, #0]
 8007d20:	60a5      	str	r5, [r4, #8]
 8007d22:	463e      	mov	r6, r7
 8007d24:	42be      	cmp	r6, r7
 8007d26:	d900      	bls.n	8007d2a <__ssputs_r+0x72>
 8007d28:	463e      	mov	r6, r7
 8007d2a:	6820      	ldr	r0, [r4, #0]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4641      	mov	r1, r8
 8007d30:	f000 fcf8 	bl	8008724 <memmove>
 8007d34:	68a3      	ldr	r3, [r4, #8]
 8007d36:	1b9b      	subs	r3, r3, r6
 8007d38:	60a3      	str	r3, [r4, #8]
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	4433      	add	r3, r6
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	2000      	movs	r0, #0
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	462a      	mov	r2, r5
 8007d48:	f000 fd36 	bl	80087b8 <_realloc_r>
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d1e0      	bne.n	8007d14 <__ssputs_r+0x5c>
 8007d52:	6921      	ldr	r1, [r4, #16]
 8007d54:	4650      	mov	r0, sl
 8007d56:	f7ff ff65 	bl	8007c24 <_free_r>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	f8ca 3000 	str.w	r3, [sl]
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	e7e9      	b.n	8007d42 <__ssputs_r+0x8a>
	...

08007d70 <_svfiprintf_r>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4698      	mov	r8, r3
 8007d76:	898b      	ldrh	r3, [r1, #12]
 8007d78:	061b      	lsls	r3, r3, #24
 8007d7a:	b09d      	sub	sp, #116	@ 0x74
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460d      	mov	r5, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	d510      	bpl.n	8007da6 <_svfiprintf_r+0x36>
 8007d84:	690b      	ldr	r3, [r1, #16]
 8007d86:	b973      	cbnz	r3, 8007da6 <_svfiprintf_r+0x36>
 8007d88:	2140      	movs	r1, #64	@ 0x40
 8007d8a:	f7ff fc09 	bl	80075a0 <_malloc_r>
 8007d8e:	6028      	str	r0, [r5, #0]
 8007d90:	6128      	str	r0, [r5, #16]
 8007d92:	b930      	cbnz	r0, 8007da2 <_svfiprintf_r+0x32>
 8007d94:	230c      	movs	r3, #12
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	b01d      	add	sp, #116	@ 0x74
 8007d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da2:	2340      	movs	r3, #64	@ 0x40
 8007da4:	616b      	str	r3, [r5, #20]
 8007da6:	2300      	movs	r3, #0
 8007da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007daa:	2320      	movs	r3, #32
 8007dac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db4:	2330      	movs	r3, #48	@ 0x30
 8007db6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f54 <_svfiprintf_r+0x1e4>
 8007dba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dbe:	f04f 0901 	mov.w	r9, #1
 8007dc2:	4623      	mov	r3, r4
 8007dc4:	469a      	mov	sl, r3
 8007dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dca:	b10a      	cbz	r2, 8007dd0 <_svfiprintf_r+0x60>
 8007dcc:	2a25      	cmp	r2, #37	@ 0x25
 8007dce:	d1f9      	bne.n	8007dc4 <_svfiprintf_r+0x54>
 8007dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd4:	d00b      	beq.n	8007dee <_svfiprintf_r+0x7e>
 8007dd6:	465b      	mov	r3, fp
 8007dd8:	4622      	mov	r2, r4
 8007dda:	4629      	mov	r1, r5
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f7ff ff6b 	bl	8007cb8 <__ssputs_r>
 8007de2:	3001      	adds	r0, #1
 8007de4:	f000 80a7 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007de8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dea:	445a      	add	r2, fp
 8007dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dee:	f89a 3000 	ldrb.w	r3, [sl]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 809f 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e02:	f10a 0a01 	add.w	sl, sl, #1
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	9307      	str	r3, [sp, #28]
 8007e0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e10:	4654      	mov	r4, sl
 8007e12:	2205      	movs	r2, #5
 8007e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e18:	484e      	ldr	r0, [pc, #312]	@ (8007f54 <_svfiprintf_r+0x1e4>)
 8007e1a:	f7f8 fa11 	bl	8000240 <memchr>
 8007e1e:	9a04      	ldr	r2, [sp, #16]
 8007e20:	b9d8      	cbnz	r0, 8007e5a <_svfiprintf_r+0xea>
 8007e22:	06d0      	lsls	r0, r2, #27
 8007e24:	bf44      	itt	mi
 8007e26:	2320      	movmi	r3, #32
 8007e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e2c:	0711      	lsls	r1, r2, #28
 8007e2e:	bf44      	itt	mi
 8007e30:	232b      	movmi	r3, #43	@ 0x2b
 8007e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e36:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e3c:	d015      	beq.n	8007e6a <_svfiprintf_r+0xfa>
 8007e3e:	9a07      	ldr	r2, [sp, #28]
 8007e40:	4654      	mov	r4, sl
 8007e42:	2000      	movs	r0, #0
 8007e44:	f04f 0c0a 	mov.w	ip, #10
 8007e48:	4621      	mov	r1, r4
 8007e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4e:	3b30      	subs	r3, #48	@ 0x30
 8007e50:	2b09      	cmp	r3, #9
 8007e52:	d94b      	bls.n	8007eec <_svfiprintf_r+0x17c>
 8007e54:	b1b0      	cbz	r0, 8007e84 <_svfiprintf_r+0x114>
 8007e56:	9207      	str	r2, [sp, #28]
 8007e58:	e014      	b.n	8007e84 <_svfiprintf_r+0x114>
 8007e5a:	eba0 0308 	sub.w	r3, r0, r8
 8007e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e62:	4313      	orrs	r3, r2
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	46a2      	mov	sl, r4
 8007e68:	e7d2      	b.n	8007e10 <_svfiprintf_r+0xa0>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	1d19      	adds	r1, r3, #4
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	9103      	str	r1, [sp, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfbb      	ittet	lt
 8007e76:	425b      	neglt	r3, r3
 8007e78:	f042 0202 	orrlt.w	r2, r2, #2
 8007e7c:	9307      	strge	r3, [sp, #28]
 8007e7e:	9307      	strlt	r3, [sp, #28]
 8007e80:	bfb8      	it	lt
 8007e82:	9204      	strlt	r2, [sp, #16]
 8007e84:	7823      	ldrb	r3, [r4, #0]
 8007e86:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e88:	d10a      	bne.n	8007ea0 <_svfiprintf_r+0x130>
 8007e8a:	7863      	ldrb	r3, [r4, #1]
 8007e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e8e:	d132      	bne.n	8007ef6 <_svfiprintf_r+0x186>
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	1d1a      	adds	r2, r3, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	9203      	str	r2, [sp, #12]
 8007e98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e9c:	3402      	adds	r4, #2
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f64 <_svfiprintf_r+0x1f4>
 8007ea4:	7821      	ldrb	r1, [r4, #0]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	f7f8 f9c9 	bl	8000240 <memchr>
 8007eae:	b138      	cbz	r0, 8007ec0 <_svfiprintf_r+0x150>
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	eba0 000a 	sub.w	r0, r0, sl
 8007eb6:	2240      	movs	r2, #64	@ 0x40
 8007eb8:	4082      	lsls	r2, r0
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	4824      	ldr	r0, [pc, #144]	@ (8007f58 <_svfiprintf_r+0x1e8>)
 8007ec6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007eca:	2206      	movs	r2, #6
 8007ecc:	f7f8 f9b8 	bl	8000240 <memchr>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d036      	beq.n	8007f42 <_svfiprintf_r+0x1d2>
 8007ed4:	4b21      	ldr	r3, [pc, #132]	@ (8007f5c <_svfiprintf_r+0x1ec>)
 8007ed6:	bb1b      	cbnz	r3, 8007f20 <_svfiprintf_r+0x1b0>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	3307      	adds	r3, #7
 8007edc:	f023 0307 	bic.w	r3, r3, #7
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee6:	4433      	add	r3, r6
 8007ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eea:	e76a      	b.n	8007dc2 <_svfiprintf_r+0x52>
 8007eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7a8      	b.n	8007e48 <_svfiprintf_r+0xd8>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	4619      	mov	r1, r3
 8007efe:	f04f 0c0a 	mov.w	ip, #10
 8007f02:	4620      	mov	r0, r4
 8007f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f08:	3a30      	subs	r2, #48	@ 0x30
 8007f0a:	2a09      	cmp	r2, #9
 8007f0c:	d903      	bls.n	8007f16 <_svfiprintf_r+0x1a6>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0c6      	beq.n	8007ea0 <_svfiprintf_r+0x130>
 8007f12:	9105      	str	r1, [sp, #20]
 8007f14:	e7c4      	b.n	8007ea0 <_svfiprintf_r+0x130>
 8007f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e7f0      	b.n	8007f02 <_svfiprintf_r+0x192>
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4b0e      	ldr	r3, [pc, #56]	@ (8007f60 <_svfiprintf_r+0x1f0>)
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f3af 8000 	nop.w
 8007f30:	1c42      	adds	r2, r0, #1
 8007f32:	4606      	mov	r6, r0
 8007f34:	d1d6      	bne.n	8007ee4 <_svfiprintf_r+0x174>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	065b      	lsls	r3, r3, #25
 8007f3a:	f53f af2d 	bmi.w	8007d98 <_svfiprintf_r+0x28>
 8007f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f40:	e72c      	b.n	8007d9c <_svfiprintf_r+0x2c>
 8007f42:	ab03      	add	r3, sp, #12
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	462a      	mov	r2, r5
 8007f48:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <_svfiprintf_r+0x1f0>)
 8007f4a:	a904      	add	r1, sp, #16
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f000 f9bb 	bl	80082c8 <_printf_i>
 8007f52:	e7ed      	b.n	8007f30 <_svfiprintf_r+0x1c0>
 8007f54:	08008e9c 	.word	0x08008e9c
 8007f58:	08008ea6 	.word	0x08008ea6
 8007f5c:	00000000 	.word	0x00000000
 8007f60:	08007cb9 	.word	0x08007cb9
 8007f64:	08008ea2 	.word	0x08008ea2

08007f68 <__sfputc_r>:
 8007f68:	6893      	ldr	r3, [r2, #8]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	b410      	push	{r4}
 8007f70:	6093      	str	r3, [r2, #8]
 8007f72:	da08      	bge.n	8007f86 <__sfputc_r+0x1e>
 8007f74:	6994      	ldr	r4, [r2, #24]
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	db01      	blt.n	8007f7e <__sfputc_r+0x16>
 8007f7a:	290a      	cmp	r1, #10
 8007f7c:	d103      	bne.n	8007f86 <__sfputc_r+0x1e>
 8007f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f82:	f7ff bd2e 	b.w	80079e2 <__swbuf_r>
 8007f86:	6813      	ldr	r3, [r2, #0]
 8007f88:	1c58      	adds	r0, r3, #1
 8007f8a:	6010      	str	r0, [r2, #0]
 8007f8c:	7019      	strb	r1, [r3, #0]
 8007f8e:	4608      	mov	r0, r1
 8007f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <__sfputs_r>:
 8007f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f98:	4606      	mov	r6, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	18d5      	adds	r5, r2, r3
 8007fa0:	42ac      	cmp	r4, r5
 8007fa2:	d101      	bne.n	8007fa8 <__sfputs_r+0x12>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e007      	b.n	8007fb8 <__sfputs_r+0x22>
 8007fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fac:	463a      	mov	r2, r7
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ffda 	bl	8007f68 <__sfputc_r>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d1f3      	bne.n	8007fa0 <__sfputs_r+0xa>
 8007fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fbc <_vfiprintf_r>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	b09d      	sub	sp, #116	@ 0x74
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	4698      	mov	r8, r3
 8007fc8:	4606      	mov	r6, r0
 8007fca:	b118      	cbz	r0, 8007fd4 <_vfiprintf_r+0x18>
 8007fcc:	6a03      	ldr	r3, [r0, #32]
 8007fce:	b90b      	cbnz	r3, 8007fd4 <_vfiprintf_r+0x18>
 8007fd0:	f7ff fbfe 	bl	80077d0 <__sinit>
 8007fd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fd6:	07d9      	lsls	r1, r3, #31
 8007fd8:	d405      	bmi.n	8007fe6 <_vfiprintf_r+0x2a>
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	059a      	lsls	r2, r3, #22
 8007fde:	d402      	bmi.n	8007fe6 <_vfiprintf_r+0x2a>
 8007fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fe2:	f7ff fe1c 	bl	8007c1e <__retarget_lock_acquire_recursive>
 8007fe6:	89ab      	ldrh	r3, [r5, #12]
 8007fe8:	071b      	lsls	r3, r3, #28
 8007fea:	d501      	bpl.n	8007ff0 <_vfiprintf_r+0x34>
 8007fec:	692b      	ldr	r3, [r5, #16]
 8007fee:	b99b      	cbnz	r3, 8008018 <_vfiprintf_r+0x5c>
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff fd34 	bl	8007a60 <__swsetup_r>
 8007ff8:	b170      	cbz	r0, 8008018 <_vfiprintf_r+0x5c>
 8007ffa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ffc:	07dc      	lsls	r4, r3, #31
 8007ffe:	d504      	bpl.n	800800a <_vfiprintf_r+0x4e>
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	b01d      	add	sp, #116	@ 0x74
 8008006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800a:	89ab      	ldrh	r3, [r5, #12]
 800800c:	0598      	lsls	r0, r3, #22
 800800e:	d4f7      	bmi.n	8008000 <_vfiprintf_r+0x44>
 8008010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008012:	f7ff fe05 	bl	8007c20 <__retarget_lock_release_recursive>
 8008016:	e7f3      	b.n	8008000 <_vfiprintf_r+0x44>
 8008018:	2300      	movs	r3, #0
 800801a:	9309      	str	r3, [sp, #36]	@ 0x24
 800801c:	2320      	movs	r3, #32
 800801e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008022:	f8cd 800c 	str.w	r8, [sp, #12]
 8008026:	2330      	movs	r3, #48	@ 0x30
 8008028:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081d8 <_vfiprintf_r+0x21c>
 800802c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008030:	f04f 0901 	mov.w	r9, #1
 8008034:	4623      	mov	r3, r4
 8008036:	469a      	mov	sl, r3
 8008038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800803c:	b10a      	cbz	r2, 8008042 <_vfiprintf_r+0x86>
 800803e:	2a25      	cmp	r2, #37	@ 0x25
 8008040:	d1f9      	bne.n	8008036 <_vfiprintf_r+0x7a>
 8008042:	ebba 0b04 	subs.w	fp, sl, r4
 8008046:	d00b      	beq.n	8008060 <_vfiprintf_r+0xa4>
 8008048:	465b      	mov	r3, fp
 800804a:	4622      	mov	r2, r4
 800804c:	4629      	mov	r1, r5
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ffa1 	bl	8007f96 <__sfputs_r>
 8008054:	3001      	adds	r0, #1
 8008056:	f000 80a7 	beq.w	80081a8 <_vfiprintf_r+0x1ec>
 800805a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800805c:	445a      	add	r2, fp
 800805e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008060:	f89a 3000 	ldrb.w	r3, [sl]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 809f 	beq.w	80081a8 <_vfiprintf_r+0x1ec>
 800806a:	2300      	movs	r3, #0
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008074:	f10a 0a01 	add.w	sl, sl, #1
 8008078:	9304      	str	r3, [sp, #16]
 800807a:	9307      	str	r3, [sp, #28]
 800807c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008080:	931a      	str	r3, [sp, #104]	@ 0x68
 8008082:	4654      	mov	r4, sl
 8008084:	2205      	movs	r2, #5
 8008086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808a:	4853      	ldr	r0, [pc, #332]	@ (80081d8 <_vfiprintf_r+0x21c>)
 800808c:	f7f8 f8d8 	bl	8000240 <memchr>
 8008090:	9a04      	ldr	r2, [sp, #16]
 8008092:	b9d8      	cbnz	r0, 80080cc <_vfiprintf_r+0x110>
 8008094:	06d1      	lsls	r1, r2, #27
 8008096:	bf44      	itt	mi
 8008098:	2320      	movmi	r3, #32
 800809a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809e:	0713      	lsls	r3, r2, #28
 80080a0:	bf44      	itt	mi
 80080a2:	232b      	movmi	r3, #43	@ 0x2b
 80080a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080a8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ae:	d015      	beq.n	80080dc <_vfiprintf_r+0x120>
 80080b0:	9a07      	ldr	r2, [sp, #28]
 80080b2:	4654      	mov	r4, sl
 80080b4:	2000      	movs	r0, #0
 80080b6:	f04f 0c0a 	mov.w	ip, #10
 80080ba:	4621      	mov	r1, r4
 80080bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c0:	3b30      	subs	r3, #48	@ 0x30
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	d94b      	bls.n	800815e <_vfiprintf_r+0x1a2>
 80080c6:	b1b0      	cbz	r0, 80080f6 <_vfiprintf_r+0x13a>
 80080c8:	9207      	str	r2, [sp, #28]
 80080ca:	e014      	b.n	80080f6 <_vfiprintf_r+0x13a>
 80080cc:	eba0 0308 	sub.w	r3, r0, r8
 80080d0:	fa09 f303 	lsl.w	r3, r9, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	46a2      	mov	sl, r4
 80080da:	e7d2      	b.n	8008082 <_vfiprintf_r+0xc6>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	1d19      	adds	r1, r3, #4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	9103      	str	r1, [sp, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfbb      	ittet	lt
 80080e8:	425b      	neglt	r3, r3
 80080ea:	f042 0202 	orrlt.w	r2, r2, #2
 80080ee:	9307      	strge	r3, [sp, #28]
 80080f0:	9307      	strlt	r3, [sp, #28]
 80080f2:	bfb8      	it	lt
 80080f4:	9204      	strlt	r2, [sp, #16]
 80080f6:	7823      	ldrb	r3, [r4, #0]
 80080f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80080fa:	d10a      	bne.n	8008112 <_vfiprintf_r+0x156>
 80080fc:	7863      	ldrb	r3, [r4, #1]
 80080fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008100:	d132      	bne.n	8008168 <_vfiprintf_r+0x1ac>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	1d1a      	adds	r2, r3, #4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	9203      	str	r2, [sp, #12]
 800810a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800810e:	3402      	adds	r4, #2
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081e8 <_vfiprintf_r+0x22c>
 8008116:	7821      	ldrb	r1, [r4, #0]
 8008118:	2203      	movs	r2, #3
 800811a:	4650      	mov	r0, sl
 800811c:	f7f8 f890 	bl	8000240 <memchr>
 8008120:	b138      	cbz	r0, 8008132 <_vfiprintf_r+0x176>
 8008122:	9b04      	ldr	r3, [sp, #16]
 8008124:	eba0 000a 	sub.w	r0, r0, sl
 8008128:	2240      	movs	r2, #64	@ 0x40
 800812a:	4082      	lsls	r2, r0
 800812c:	4313      	orrs	r3, r2
 800812e:	3401      	adds	r4, #1
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008136:	4829      	ldr	r0, [pc, #164]	@ (80081dc <_vfiprintf_r+0x220>)
 8008138:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800813c:	2206      	movs	r2, #6
 800813e:	f7f8 f87f 	bl	8000240 <memchr>
 8008142:	2800      	cmp	r0, #0
 8008144:	d03f      	beq.n	80081c6 <_vfiprintf_r+0x20a>
 8008146:	4b26      	ldr	r3, [pc, #152]	@ (80081e0 <_vfiprintf_r+0x224>)
 8008148:	bb1b      	cbnz	r3, 8008192 <_vfiprintf_r+0x1d6>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	3307      	adds	r3, #7
 800814e:	f023 0307 	bic.w	r3, r3, #7
 8008152:	3308      	adds	r3, #8
 8008154:	9303      	str	r3, [sp, #12]
 8008156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008158:	443b      	add	r3, r7
 800815a:	9309      	str	r3, [sp, #36]	@ 0x24
 800815c:	e76a      	b.n	8008034 <_vfiprintf_r+0x78>
 800815e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008162:	460c      	mov	r4, r1
 8008164:	2001      	movs	r0, #1
 8008166:	e7a8      	b.n	80080ba <_vfiprintf_r+0xfe>
 8008168:	2300      	movs	r3, #0
 800816a:	3401      	adds	r4, #1
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	4619      	mov	r1, r3
 8008170:	f04f 0c0a 	mov.w	ip, #10
 8008174:	4620      	mov	r0, r4
 8008176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800817a:	3a30      	subs	r2, #48	@ 0x30
 800817c:	2a09      	cmp	r2, #9
 800817e:	d903      	bls.n	8008188 <_vfiprintf_r+0x1cc>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0c6      	beq.n	8008112 <_vfiprintf_r+0x156>
 8008184:	9105      	str	r1, [sp, #20]
 8008186:	e7c4      	b.n	8008112 <_vfiprintf_r+0x156>
 8008188:	fb0c 2101 	mla	r1, ip, r1, r2
 800818c:	4604      	mov	r4, r0
 800818e:	2301      	movs	r3, #1
 8008190:	e7f0      	b.n	8008174 <_vfiprintf_r+0x1b8>
 8008192:	ab03      	add	r3, sp, #12
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	462a      	mov	r2, r5
 8008198:	4b12      	ldr	r3, [pc, #72]	@ (80081e4 <_vfiprintf_r+0x228>)
 800819a:	a904      	add	r1, sp, #16
 800819c:	4630      	mov	r0, r6
 800819e:	f3af 8000 	nop.w
 80081a2:	4607      	mov	r7, r0
 80081a4:	1c78      	adds	r0, r7, #1
 80081a6:	d1d6      	bne.n	8008156 <_vfiprintf_r+0x19a>
 80081a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081aa:	07d9      	lsls	r1, r3, #31
 80081ac:	d405      	bmi.n	80081ba <_vfiprintf_r+0x1fe>
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	059a      	lsls	r2, r3, #22
 80081b2:	d402      	bmi.n	80081ba <_vfiprintf_r+0x1fe>
 80081b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081b6:	f7ff fd33 	bl	8007c20 <__retarget_lock_release_recursive>
 80081ba:	89ab      	ldrh	r3, [r5, #12]
 80081bc:	065b      	lsls	r3, r3, #25
 80081be:	f53f af1f 	bmi.w	8008000 <_vfiprintf_r+0x44>
 80081c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c4:	e71e      	b.n	8008004 <_vfiprintf_r+0x48>
 80081c6:	ab03      	add	r3, sp, #12
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	462a      	mov	r2, r5
 80081cc:	4b05      	ldr	r3, [pc, #20]	@ (80081e4 <_vfiprintf_r+0x228>)
 80081ce:	a904      	add	r1, sp, #16
 80081d0:	4630      	mov	r0, r6
 80081d2:	f000 f879 	bl	80082c8 <_printf_i>
 80081d6:	e7e4      	b.n	80081a2 <_vfiprintf_r+0x1e6>
 80081d8:	08008e9c 	.word	0x08008e9c
 80081dc:	08008ea6 	.word	0x08008ea6
 80081e0:	00000000 	.word	0x00000000
 80081e4:	08007f97 	.word	0x08007f97
 80081e8:	08008ea2 	.word	0x08008ea2

080081ec <_printf_common>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	4616      	mov	r6, r2
 80081f2:	4698      	mov	r8, r3
 80081f4:	688a      	ldr	r2, [r1, #8]
 80081f6:	690b      	ldr	r3, [r1, #16]
 80081f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	bfb8      	it	lt
 8008200:	4613      	movlt	r3, r2
 8008202:	6033      	str	r3, [r6, #0]
 8008204:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008208:	4607      	mov	r7, r0
 800820a:	460c      	mov	r4, r1
 800820c:	b10a      	cbz	r2, 8008212 <_printf_common+0x26>
 800820e:	3301      	adds	r3, #1
 8008210:	6033      	str	r3, [r6, #0]
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	0699      	lsls	r1, r3, #26
 8008216:	bf42      	ittt	mi
 8008218:	6833      	ldrmi	r3, [r6, #0]
 800821a:	3302      	addmi	r3, #2
 800821c:	6033      	strmi	r3, [r6, #0]
 800821e:	6825      	ldr	r5, [r4, #0]
 8008220:	f015 0506 	ands.w	r5, r5, #6
 8008224:	d106      	bne.n	8008234 <_printf_common+0x48>
 8008226:	f104 0a19 	add.w	sl, r4, #25
 800822a:	68e3      	ldr	r3, [r4, #12]
 800822c:	6832      	ldr	r2, [r6, #0]
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	42ab      	cmp	r3, r5
 8008232:	dc26      	bgt.n	8008282 <_printf_common+0x96>
 8008234:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	3b00      	subs	r3, #0
 800823c:	bf18      	it	ne
 800823e:	2301      	movne	r3, #1
 8008240:	0692      	lsls	r2, r2, #26
 8008242:	d42b      	bmi.n	800829c <_printf_common+0xb0>
 8008244:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008248:	4641      	mov	r1, r8
 800824a:	4638      	mov	r0, r7
 800824c:	47c8      	blx	r9
 800824e:	3001      	adds	r0, #1
 8008250:	d01e      	beq.n	8008290 <_printf_common+0xa4>
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	6922      	ldr	r2, [r4, #16]
 8008256:	f003 0306 	and.w	r3, r3, #6
 800825a:	2b04      	cmp	r3, #4
 800825c:	bf02      	ittt	eq
 800825e:	68e5      	ldreq	r5, [r4, #12]
 8008260:	6833      	ldreq	r3, [r6, #0]
 8008262:	1aed      	subeq	r5, r5, r3
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	bf0c      	ite	eq
 8008268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800826c:	2500      	movne	r5, #0
 800826e:	4293      	cmp	r3, r2
 8008270:	bfc4      	itt	gt
 8008272:	1a9b      	subgt	r3, r3, r2
 8008274:	18ed      	addgt	r5, r5, r3
 8008276:	2600      	movs	r6, #0
 8008278:	341a      	adds	r4, #26
 800827a:	42b5      	cmp	r5, r6
 800827c:	d11a      	bne.n	80082b4 <_printf_common+0xc8>
 800827e:	2000      	movs	r0, #0
 8008280:	e008      	b.n	8008294 <_printf_common+0xa8>
 8008282:	2301      	movs	r3, #1
 8008284:	4652      	mov	r2, sl
 8008286:	4641      	mov	r1, r8
 8008288:	4638      	mov	r0, r7
 800828a:	47c8      	blx	r9
 800828c:	3001      	adds	r0, #1
 800828e:	d103      	bne.n	8008298 <_printf_common+0xac>
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
 8008294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008298:	3501      	adds	r5, #1
 800829a:	e7c6      	b.n	800822a <_printf_common+0x3e>
 800829c:	18e1      	adds	r1, r4, r3
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	2030      	movs	r0, #48	@ 0x30
 80082a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082a6:	4422      	add	r2, r4
 80082a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082b0:	3302      	adds	r3, #2
 80082b2:	e7c7      	b.n	8008244 <_printf_common+0x58>
 80082b4:	2301      	movs	r3, #1
 80082b6:	4622      	mov	r2, r4
 80082b8:	4641      	mov	r1, r8
 80082ba:	4638      	mov	r0, r7
 80082bc:	47c8      	blx	r9
 80082be:	3001      	adds	r0, #1
 80082c0:	d0e6      	beq.n	8008290 <_printf_common+0xa4>
 80082c2:	3601      	adds	r6, #1
 80082c4:	e7d9      	b.n	800827a <_printf_common+0x8e>
	...

080082c8 <_printf_i>:
 80082c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082cc:	7e0f      	ldrb	r7, [r1, #24]
 80082ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082d0:	2f78      	cmp	r7, #120	@ 0x78
 80082d2:	4691      	mov	r9, r2
 80082d4:	4680      	mov	r8, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	469a      	mov	sl, r3
 80082da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082de:	d807      	bhi.n	80082f0 <_printf_i+0x28>
 80082e0:	2f62      	cmp	r7, #98	@ 0x62
 80082e2:	d80a      	bhi.n	80082fa <_printf_i+0x32>
 80082e4:	2f00      	cmp	r7, #0
 80082e6:	f000 80d2 	beq.w	800848e <_printf_i+0x1c6>
 80082ea:	2f58      	cmp	r7, #88	@ 0x58
 80082ec:	f000 80b9 	beq.w	8008462 <_printf_i+0x19a>
 80082f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082f8:	e03a      	b.n	8008370 <_printf_i+0xa8>
 80082fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082fe:	2b15      	cmp	r3, #21
 8008300:	d8f6      	bhi.n	80082f0 <_printf_i+0x28>
 8008302:	a101      	add	r1, pc, #4	@ (adr r1, 8008308 <_printf_i+0x40>)
 8008304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008308:	08008361 	.word	0x08008361
 800830c:	08008375 	.word	0x08008375
 8008310:	080082f1 	.word	0x080082f1
 8008314:	080082f1 	.word	0x080082f1
 8008318:	080082f1 	.word	0x080082f1
 800831c:	080082f1 	.word	0x080082f1
 8008320:	08008375 	.word	0x08008375
 8008324:	080082f1 	.word	0x080082f1
 8008328:	080082f1 	.word	0x080082f1
 800832c:	080082f1 	.word	0x080082f1
 8008330:	080082f1 	.word	0x080082f1
 8008334:	08008475 	.word	0x08008475
 8008338:	0800839f 	.word	0x0800839f
 800833c:	0800842f 	.word	0x0800842f
 8008340:	080082f1 	.word	0x080082f1
 8008344:	080082f1 	.word	0x080082f1
 8008348:	08008497 	.word	0x08008497
 800834c:	080082f1 	.word	0x080082f1
 8008350:	0800839f 	.word	0x0800839f
 8008354:	080082f1 	.word	0x080082f1
 8008358:	080082f1 	.word	0x080082f1
 800835c:	08008437 	.word	0x08008437
 8008360:	6833      	ldr	r3, [r6, #0]
 8008362:	1d1a      	adds	r2, r3, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6032      	str	r2, [r6, #0]
 8008368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800836c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008370:	2301      	movs	r3, #1
 8008372:	e09d      	b.n	80084b0 <_printf_i+0x1e8>
 8008374:	6833      	ldr	r3, [r6, #0]
 8008376:	6820      	ldr	r0, [r4, #0]
 8008378:	1d19      	adds	r1, r3, #4
 800837a:	6031      	str	r1, [r6, #0]
 800837c:	0606      	lsls	r6, r0, #24
 800837e:	d501      	bpl.n	8008384 <_printf_i+0xbc>
 8008380:	681d      	ldr	r5, [r3, #0]
 8008382:	e003      	b.n	800838c <_printf_i+0xc4>
 8008384:	0645      	lsls	r5, r0, #25
 8008386:	d5fb      	bpl.n	8008380 <_printf_i+0xb8>
 8008388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800838c:	2d00      	cmp	r5, #0
 800838e:	da03      	bge.n	8008398 <_printf_i+0xd0>
 8008390:	232d      	movs	r3, #45	@ 0x2d
 8008392:	426d      	negs	r5, r5
 8008394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008398:	4859      	ldr	r0, [pc, #356]	@ (8008500 <_printf_i+0x238>)
 800839a:	230a      	movs	r3, #10
 800839c:	e011      	b.n	80083c2 <_printf_i+0xfa>
 800839e:	6821      	ldr	r1, [r4, #0]
 80083a0:	6833      	ldr	r3, [r6, #0]
 80083a2:	0608      	lsls	r0, r1, #24
 80083a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80083a8:	d402      	bmi.n	80083b0 <_printf_i+0xe8>
 80083aa:	0649      	lsls	r1, r1, #25
 80083ac:	bf48      	it	mi
 80083ae:	b2ad      	uxthmi	r5, r5
 80083b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80083b2:	4853      	ldr	r0, [pc, #332]	@ (8008500 <_printf_i+0x238>)
 80083b4:	6033      	str	r3, [r6, #0]
 80083b6:	bf14      	ite	ne
 80083b8:	230a      	movne	r3, #10
 80083ba:	2308      	moveq	r3, #8
 80083bc:	2100      	movs	r1, #0
 80083be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083c2:	6866      	ldr	r6, [r4, #4]
 80083c4:	60a6      	str	r6, [r4, #8]
 80083c6:	2e00      	cmp	r6, #0
 80083c8:	bfa2      	ittt	ge
 80083ca:	6821      	ldrge	r1, [r4, #0]
 80083cc:	f021 0104 	bicge.w	r1, r1, #4
 80083d0:	6021      	strge	r1, [r4, #0]
 80083d2:	b90d      	cbnz	r5, 80083d8 <_printf_i+0x110>
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	d04b      	beq.n	8008470 <_printf_i+0x1a8>
 80083d8:	4616      	mov	r6, r2
 80083da:	fbb5 f1f3 	udiv	r1, r5, r3
 80083de:	fb03 5711 	mls	r7, r3, r1, r5
 80083e2:	5dc7      	ldrb	r7, [r0, r7]
 80083e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e8:	462f      	mov	r7, r5
 80083ea:	42bb      	cmp	r3, r7
 80083ec:	460d      	mov	r5, r1
 80083ee:	d9f4      	bls.n	80083da <_printf_i+0x112>
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d10b      	bne.n	800840c <_printf_i+0x144>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	07df      	lsls	r7, r3, #31
 80083f8:	d508      	bpl.n	800840c <_printf_i+0x144>
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	6861      	ldr	r1, [r4, #4]
 80083fe:	4299      	cmp	r1, r3
 8008400:	bfde      	ittt	le
 8008402:	2330      	movle	r3, #48	@ 0x30
 8008404:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008408:	f106 36ff 	addle.w	r6, r6, #4294967295
 800840c:	1b92      	subs	r2, r2, r6
 800840e:	6122      	str	r2, [r4, #16]
 8008410:	f8cd a000 	str.w	sl, [sp]
 8008414:	464b      	mov	r3, r9
 8008416:	aa03      	add	r2, sp, #12
 8008418:	4621      	mov	r1, r4
 800841a:	4640      	mov	r0, r8
 800841c:	f7ff fee6 	bl	80081ec <_printf_common>
 8008420:	3001      	adds	r0, #1
 8008422:	d14a      	bne.n	80084ba <_printf_i+0x1f2>
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	b004      	add	sp, #16
 800842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	f043 0320 	orr.w	r3, r3, #32
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	4833      	ldr	r0, [pc, #204]	@ (8008504 <_printf_i+0x23c>)
 8008438:	2778      	movs	r7, #120	@ 0x78
 800843a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	6831      	ldr	r1, [r6, #0]
 8008442:	061f      	lsls	r7, r3, #24
 8008444:	f851 5b04 	ldr.w	r5, [r1], #4
 8008448:	d402      	bmi.n	8008450 <_printf_i+0x188>
 800844a:	065f      	lsls	r7, r3, #25
 800844c:	bf48      	it	mi
 800844e:	b2ad      	uxthmi	r5, r5
 8008450:	6031      	str	r1, [r6, #0]
 8008452:	07d9      	lsls	r1, r3, #31
 8008454:	bf44      	itt	mi
 8008456:	f043 0320 	orrmi.w	r3, r3, #32
 800845a:	6023      	strmi	r3, [r4, #0]
 800845c:	b11d      	cbz	r5, 8008466 <_printf_i+0x19e>
 800845e:	2310      	movs	r3, #16
 8008460:	e7ac      	b.n	80083bc <_printf_i+0xf4>
 8008462:	4827      	ldr	r0, [pc, #156]	@ (8008500 <_printf_i+0x238>)
 8008464:	e7e9      	b.n	800843a <_printf_i+0x172>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f023 0320 	bic.w	r3, r3, #32
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	e7f6      	b.n	800845e <_printf_i+0x196>
 8008470:	4616      	mov	r6, r2
 8008472:	e7bd      	b.n	80083f0 <_printf_i+0x128>
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	6825      	ldr	r5, [r4, #0]
 8008478:	6961      	ldr	r1, [r4, #20]
 800847a:	1d18      	adds	r0, r3, #4
 800847c:	6030      	str	r0, [r6, #0]
 800847e:	062e      	lsls	r6, r5, #24
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	d501      	bpl.n	8008488 <_printf_i+0x1c0>
 8008484:	6019      	str	r1, [r3, #0]
 8008486:	e002      	b.n	800848e <_printf_i+0x1c6>
 8008488:	0668      	lsls	r0, r5, #25
 800848a:	d5fb      	bpl.n	8008484 <_printf_i+0x1bc>
 800848c:	8019      	strh	r1, [r3, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	4616      	mov	r6, r2
 8008494:	e7bc      	b.n	8008410 <_printf_i+0x148>
 8008496:	6833      	ldr	r3, [r6, #0]
 8008498:	1d1a      	adds	r2, r3, #4
 800849a:	6032      	str	r2, [r6, #0]
 800849c:	681e      	ldr	r6, [r3, #0]
 800849e:	6862      	ldr	r2, [r4, #4]
 80084a0:	2100      	movs	r1, #0
 80084a2:	4630      	mov	r0, r6
 80084a4:	f7f7 fecc 	bl	8000240 <memchr>
 80084a8:	b108      	cbz	r0, 80084ae <_printf_i+0x1e6>
 80084aa:	1b80      	subs	r0, r0, r6
 80084ac:	6060      	str	r0, [r4, #4]
 80084ae:	6863      	ldr	r3, [r4, #4]
 80084b0:	6123      	str	r3, [r4, #16]
 80084b2:	2300      	movs	r3, #0
 80084b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b8:	e7aa      	b.n	8008410 <_printf_i+0x148>
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	4632      	mov	r2, r6
 80084be:	4649      	mov	r1, r9
 80084c0:	4640      	mov	r0, r8
 80084c2:	47d0      	blx	sl
 80084c4:	3001      	adds	r0, #1
 80084c6:	d0ad      	beq.n	8008424 <_printf_i+0x15c>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	079b      	lsls	r3, r3, #30
 80084cc:	d413      	bmi.n	80084f6 <_printf_i+0x22e>
 80084ce:	68e0      	ldr	r0, [r4, #12]
 80084d0:	9b03      	ldr	r3, [sp, #12]
 80084d2:	4298      	cmp	r0, r3
 80084d4:	bfb8      	it	lt
 80084d6:	4618      	movlt	r0, r3
 80084d8:	e7a6      	b.n	8008428 <_printf_i+0x160>
 80084da:	2301      	movs	r3, #1
 80084dc:	4632      	mov	r2, r6
 80084de:	4649      	mov	r1, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	47d0      	blx	sl
 80084e4:	3001      	adds	r0, #1
 80084e6:	d09d      	beq.n	8008424 <_printf_i+0x15c>
 80084e8:	3501      	adds	r5, #1
 80084ea:	68e3      	ldr	r3, [r4, #12]
 80084ec:	9903      	ldr	r1, [sp, #12]
 80084ee:	1a5b      	subs	r3, r3, r1
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	dcf2      	bgt.n	80084da <_printf_i+0x212>
 80084f4:	e7eb      	b.n	80084ce <_printf_i+0x206>
 80084f6:	2500      	movs	r5, #0
 80084f8:	f104 0619 	add.w	r6, r4, #25
 80084fc:	e7f5      	b.n	80084ea <_printf_i+0x222>
 80084fe:	bf00      	nop
 8008500:	08008ead 	.word	0x08008ead
 8008504:	08008ebe 	.word	0x08008ebe

08008508 <__sflush_r>:
 8008508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008510:	0716      	lsls	r6, r2, #28
 8008512:	4605      	mov	r5, r0
 8008514:	460c      	mov	r4, r1
 8008516:	d454      	bmi.n	80085c2 <__sflush_r+0xba>
 8008518:	684b      	ldr	r3, [r1, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	dc02      	bgt.n	8008524 <__sflush_r+0x1c>
 800851e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	dd48      	ble.n	80085b6 <__sflush_r+0xae>
 8008524:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008526:	2e00      	cmp	r6, #0
 8008528:	d045      	beq.n	80085b6 <__sflush_r+0xae>
 800852a:	2300      	movs	r3, #0
 800852c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008530:	682f      	ldr	r7, [r5, #0]
 8008532:	6a21      	ldr	r1, [r4, #32]
 8008534:	602b      	str	r3, [r5, #0]
 8008536:	d030      	beq.n	800859a <__sflush_r+0x92>
 8008538:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	0759      	lsls	r1, r3, #29
 800853e:	d505      	bpl.n	800854c <__sflush_r+0x44>
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008546:	b10b      	cbz	r3, 800854c <__sflush_r+0x44>
 8008548:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	2300      	movs	r3, #0
 800854e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008550:	6a21      	ldr	r1, [r4, #32]
 8008552:	4628      	mov	r0, r5
 8008554:	47b0      	blx	r6
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	d106      	bne.n	800856a <__sflush_r+0x62>
 800855c:	6829      	ldr	r1, [r5, #0]
 800855e:	291d      	cmp	r1, #29
 8008560:	d82b      	bhi.n	80085ba <__sflush_r+0xb2>
 8008562:	4a2a      	ldr	r2, [pc, #168]	@ (800860c <__sflush_r+0x104>)
 8008564:	410a      	asrs	r2, r1
 8008566:	07d6      	lsls	r6, r2, #31
 8008568:	d427      	bmi.n	80085ba <__sflush_r+0xb2>
 800856a:	2200      	movs	r2, #0
 800856c:	6062      	str	r2, [r4, #4]
 800856e:	04d9      	lsls	r1, r3, #19
 8008570:	6922      	ldr	r2, [r4, #16]
 8008572:	6022      	str	r2, [r4, #0]
 8008574:	d504      	bpl.n	8008580 <__sflush_r+0x78>
 8008576:	1c42      	adds	r2, r0, #1
 8008578:	d101      	bne.n	800857e <__sflush_r+0x76>
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	b903      	cbnz	r3, 8008580 <__sflush_r+0x78>
 800857e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008582:	602f      	str	r7, [r5, #0]
 8008584:	b1b9      	cbz	r1, 80085b6 <__sflush_r+0xae>
 8008586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800858a:	4299      	cmp	r1, r3
 800858c:	d002      	beq.n	8008594 <__sflush_r+0x8c>
 800858e:	4628      	mov	r0, r5
 8008590:	f7ff fb48 	bl	8007c24 <_free_r>
 8008594:	2300      	movs	r3, #0
 8008596:	6363      	str	r3, [r4, #52]	@ 0x34
 8008598:	e00d      	b.n	80085b6 <__sflush_r+0xae>
 800859a:	2301      	movs	r3, #1
 800859c:	4628      	mov	r0, r5
 800859e:	47b0      	blx	r6
 80085a0:	4602      	mov	r2, r0
 80085a2:	1c50      	adds	r0, r2, #1
 80085a4:	d1c9      	bne.n	800853a <__sflush_r+0x32>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0c6      	beq.n	800853a <__sflush_r+0x32>
 80085ac:	2b1d      	cmp	r3, #29
 80085ae:	d001      	beq.n	80085b4 <__sflush_r+0xac>
 80085b0:	2b16      	cmp	r3, #22
 80085b2:	d11e      	bne.n	80085f2 <__sflush_r+0xea>
 80085b4:	602f      	str	r7, [r5, #0]
 80085b6:	2000      	movs	r0, #0
 80085b8:	e022      	b.n	8008600 <__sflush_r+0xf8>
 80085ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085be:	b21b      	sxth	r3, r3
 80085c0:	e01b      	b.n	80085fa <__sflush_r+0xf2>
 80085c2:	690f      	ldr	r7, [r1, #16]
 80085c4:	2f00      	cmp	r7, #0
 80085c6:	d0f6      	beq.n	80085b6 <__sflush_r+0xae>
 80085c8:	0793      	lsls	r3, r2, #30
 80085ca:	680e      	ldr	r6, [r1, #0]
 80085cc:	bf08      	it	eq
 80085ce:	694b      	ldreq	r3, [r1, #20]
 80085d0:	600f      	str	r7, [r1, #0]
 80085d2:	bf18      	it	ne
 80085d4:	2300      	movne	r3, #0
 80085d6:	eba6 0807 	sub.w	r8, r6, r7
 80085da:	608b      	str	r3, [r1, #8]
 80085dc:	f1b8 0f00 	cmp.w	r8, #0
 80085e0:	dde9      	ble.n	80085b6 <__sflush_r+0xae>
 80085e2:	6a21      	ldr	r1, [r4, #32]
 80085e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085e6:	4643      	mov	r3, r8
 80085e8:	463a      	mov	r2, r7
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b0      	blx	r6
 80085ee:	2800      	cmp	r0, #0
 80085f0:	dc08      	bgt.n	8008604 <__sflush_r+0xfc>
 80085f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	4407      	add	r7, r0
 8008606:	eba8 0800 	sub.w	r8, r8, r0
 800860a:	e7e7      	b.n	80085dc <__sflush_r+0xd4>
 800860c:	dfbffffe 	.word	0xdfbffffe

08008610 <_fflush_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	690b      	ldr	r3, [r1, #16]
 8008614:	4605      	mov	r5, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b913      	cbnz	r3, 8008620 <_fflush_r+0x10>
 800861a:	2500      	movs	r5, #0
 800861c:	4628      	mov	r0, r5
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	b118      	cbz	r0, 800862a <_fflush_r+0x1a>
 8008622:	6a03      	ldr	r3, [r0, #32]
 8008624:	b90b      	cbnz	r3, 800862a <_fflush_r+0x1a>
 8008626:	f7ff f8d3 	bl	80077d0 <__sinit>
 800862a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0f3      	beq.n	800861a <_fflush_r+0xa>
 8008632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008634:	07d0      	lsls	r0, r2, #31
 8008636:	d404      	bmi.n	8008642 <_fflush_r+0x32>
 8008638:	0599      	lsls	r1, r3, #22
 800863a:	d402      	bmi.n	8008642 <_fflush_r+0x32>
 800863c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800863e:	f7ff faee 	bl	8007c1e <__retarget_lock_acquire_recursive>
 8008642:	4628      	mov	r0, r5
 8008644:	4621      	mov	r1, r4
 8008646:	f7ff ff5f 	bl	8008508 <__sflush_r>
 800864a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800864c:	07da      	lsls	r2, r3, #31
 800864e:	4605      	mov	r5, r0
 8008650:	d4e4      	bmi.n	800861c <_fflush_r+0xc>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	059b      	lsls	r3, r3, #22
 8008656:	d4e1      	bmi.n	800861c <_fflush_r+0xc>
 8008658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800865a:	f7ff fae1 	bl	8007c20 <__retarget_lock_release_recursive>
 800865e:	e7dd      	b.n	800861c <_fflush_r+0xc>

08008660 <__swhatbuf_r>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	460c      	mov	r4, r1
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	2900      	cmp	r1, #0
 800866a:	b096      	sub	sp, #88	@ 0x58
 800866c:	4615      	mov	r5, r2
 800866e:	461e      	mov	r6, r3
 8008670:	da0d      	bge.n	800868e <__swhatbuf_r+0x2e>
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008678:	f04f 0100 	mov.w	r1, #0
 800867c:	bf14      	ite	ne
 800867e:	2340      	movne	r3, #64	@ 0x40
 8008680:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008684:	2000      	movs	r0, #0
 8008686:	6031      	str	r1, [r6, #0]
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	b016      	add	sp, #88	@ 0x58
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	466a      	mov	r2, sp
 8008690:	f000 f862 	bl	8008758 <_fstat_r>
 8008694:	2800      	cmp	r0, #0
 8008696:	dbec      	blt.n	8008672 <__swhatbuf_r+0x12>
 8008698:	9901      	ldr	r1, [sp, #4]
 800869a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800869e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086a2:	4259      	negs	r1, r3
 80086a4:	4159      	adcs	r1, r3
 80086a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086aa:	e7eb      	b.n	8008684 <__swhatbuf_r+0x24>

080086ac <__smakebuf_r>:
 80086ac:	898b      	ldrh	r3, [r1, #12]
 80086ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086b0:	079d      	lsls	r5, r3, #30
 80086b2:	4606      	mov	r6, r0
 80086b4:	460c      	mov	r4, r1
 80086b6:	d507      	bpl.n	80086c8 <__smakebuf_r+0x1c>
 80086b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	2301      	movs	r3, #1
 80086c2:	6163      	str	r3, [r4, #20]
 80086c4:	b003      	add	sp, #12
 80086c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086c8:	ab01      	add	r3, sp, #4
 80086ca:	466a      	mov	r2, sp
 80086cc:	f7ff ffc8 	bl	8008660 <__swhatbuf_r>
 80086d0:	9f00      	ldr	r7, [sp, #0]
 80086d2:	4605      	mov	r5, r0
 80086d4:	4639      	mov	r1, r7
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7fe ff62 	bl	80075a0 <_malloc_r>
 80086dc:	b948      	cbnz	r0, 80086f2 <__smakebuf_r+0x46>
 80086de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e2:	059a      	lsls	r2, r3, #22
 80086e4:	d4ee      	bmi.n	80086c4 <__smakebuf_r+0x18>
 80086e6:	f023 0303 	bic.w	r3, r3, #3
 80086ea:	f043 0302 	orr.w	r3, r3, #2
 80086ee:	81a3      	strh	r3, [r4, #12]
 80086f0:	e7e2      	b.n	80086b8 <__smakebuf_r+0xc>
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	6020      	str	r0, [r4, #0]
 80086f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008702:	b15b      	cbz	r3, 800871c <__smakebuf_r+0x70>
 8008704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008708:	4630      	mov	r0, r6
 800870a:	f000 f837 	bl	800877c <_isatty_r>
 800870e:	b128      	cbz	r0, 800871c <__smakebuf_r+0x70>
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	431d      	orrs	r5, r3
 8008720:	81a5      	strh	r5, [r4, #12]
 8008722:	e7cf      	b.n	80086c4 <__smakebuf_r+0x18>

08008724 <memmove>:
 8008724:	4288      	cmp	r0, r1
 8008726:	b510      	push	{r4, lr}
 8008728:	eb01 0402 	add.w	r4, r1, r2
 800872c:	d902      	bls.n	8008734 <memmove+0x10>
 800872e:	4284      	cmp	r4, r0
 8008730:	4623      	mov	r3, r4
 8008732:	d807      	bhi.n	8008744 <memmove+0x20>
 8008734:	1e43      	subs	r3, r0, #1
 8008736:	42a1      	cmp	r1, r4
 8008738:	d008      	beq.n	800874c <memmove+0x28>
 800873a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800873e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008742:	e7f8      	b.n	8008736 <memmove+0x12>
 8008744:	4402      	add	r2, r0
 8008746:	4601      	mov	r1, r0
 8008748:	428a      	cmp	r2, r1
 800874a:	d100      	bne.n	800874e <memmove+0x2a>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008756:	e7f7      	b.n	8008748 <memmove+0x24>

08008758 <_fstat_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	@ (8008778 <_fstat_r+0x20>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	4611      	mov	r1, r2
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	f7f8 fea1 	bl	80014ac <_fstat>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d102      	bne.n	8008774 <_fstat_r+0x1c>
 800876e:	682b      	ldr	r3, [r5, #0]
 8008770:	b103      	cbz	r3, 8008774 <_fstat_r+0x1c>
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	bf00      	nop
 8008778:	20002380 	.word	0x20002380

0800877c <_isatty_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	@ (8008798 <_isatty_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7f8 fea0 	bl	80014cc <_isatty>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_isatty_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_isatty_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20002380 	.word	0x20002380

0800879c <memcpy>:
 800879c:	440a      	add	r2, r1
 800879e:	4291      	cmp	r1, r2
 80087a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087a4:	d100      	bne.n	80087a8 <memcpy+0xc>
 80087a6:	4770      	bx	lr
 80087a8:	b510      	push	{r4, lr}
 80087aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087b2:	4291      	cmp	r1, r2
 80087b4:	d1f9      	bne.n	80087aa <memcpy+0xe>
 80087b6:	bd10      	pop	{r4, pc}

080087b8 <_realloc_r>:
 80087b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087bc:	4680      	mov	r8, r0
 80087be:	4615      	mov	r5, r2
 80087c0:	460c      	mov	r4, r1
 80087c2:	b921      	cbnz	r1, 80087ce <_realloc_r+0x16>
 80087c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087c8:	4611      	mov	r1, r2
 80087ca:	f7fe bee9 	b.w	80075a0 <_malloc_r>
 80087ce:	b92a      	cbnz	r2, 80087dc <_realloc_r+0x24>
 80087d0:	f7ff fa28 	bl	8007c24 <_free_r>
 80087d4:	2400      	movs	r4, #0
 80087d6:	4620      	mov	r0, r4
 80087d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087dc:	f000 f81a 	bl	8008814 <_malloc_usable_size_r>
 80087e0:	4285      	cmp	r5, r0
 80087e2:	4606      	mov	r6, r0
 80087e4:	d802      	bhi.n	80087ec <_realloc_r+0x34>
 80087e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087ea:	d8f4      	bhi.n	80087d6 <_realloc_r+0x1e>
 80087ec:	4629      	mov	r1, r5
 80087ee:	4640      	mov	r0, r8
 80087f0:	f7fe fed6 	bl	80075a0 <_malloc_r>
 80087f4:	4607      	mov	r7, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d0ec      	beq.n	80087d4 <_realloc_r+0x1c>
 80087fa:	42b5      	cmp	r5, r6
 80087fc:	462a      	mov	r2, r5
 80087fe:	4621      	mov	r1, r4
 8008800:	bf28      	it	cs
 8008802:	4632      	movcs	r2, r6
 8008804:	f7ff ffca 	bl	800879c <memcpy>
 8008808:	4621      	mov	r1, r4
 800880a:	4640      	mov	r0, r8
 800880c:	f7ff fa0a 	bl	8007c24 <_free_r>
 8008810:	463c      	mov	r4, r7
 8008812:	e7e0      	b.n	80087d6 <_realloc_r+0x1e>

08008814 <_malloc_usable_size_r>:
 8008814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008818:	1f18      	subs	r0, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	bfbc      	itt	lt
 800881e:	580b      	ldrlt	r3, [r1, r0]
 8008820:	18c0      	addlt	r0, r0, r3
 8008822:	4770      	bx	lr

08008824 <_init>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr

08008830 <_fini>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	bf00      	nop
 8008834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008836:	bc08      	pop	{r3}
 8008838:	469e      	mov	lr, r3
 800883a:	4770      	bx	lr
